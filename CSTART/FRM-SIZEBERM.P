/*---------------------------------------------------------
  File: FRM-SIZEBERM.P
  Purpose: Changes the size and shape of the panel.  This
  routine spaces the buttons to fill the available space.
  
  Input Parameters: 
    ph_frame    - the handle of the frame
    win_height-p - the desired height (in pixels)
    win_width-p  - the desired width  (in pixels)

  Notes:
    This procedure assumes that the target frame:
       - is not hidden
       - is not scrollable
       - has a single iteration without column labels
---------------------------------------------------------*/
{FRAMSIZETEMP.I}

DEFINE INPUT PARAMETER TABLE FOR frametemp.
DEFINE INPUT PARAMETER TABLE FOR widgettemp.
DEFINE INPUT PARAMETER win_height-p AS INTEGER NO-UNDO.
DEFINE INPUT PARAMETER win_width-p  AS INTEGER NO-UNDO.
DEFINE INPUT PARAMETER minmax AS LOGICAL NO-UNDO.
DEFINE INPUT PARAMETER winh AS HANDLE NO-UNDO.
DEFINE INPUT PARAMETER dfh AS HANDLE NO-UNDO.


DEFINE VAR x-border AS INTEGER NO-UNDO.
DEFINE VAR y-border AS INTEGER NO-UNDO.
DEFINE VAR x-mult AS DECIMAL NO-UNDO.
DEFINE VAR y-mult AS DECIMAL NO-UNDO.
DEFINE VAR h AS HANDLE  NO-UNDO.

DEFINE VARIABLE frmheight AS DECIMAL NO-UNDO.
DEFINE VARIABLE frmrow AS DECIMAL NO-UNDO.
DEFINE VARIABLE frmh AS INTEGER NO-UNDO.
DEFINE VARIABLE frmb AS INTEGER NO-UNDO.
DEFINE VARIABLE hidvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE fh AS HANDLE NO-UNDO.
{FINNSBEN.I}
FOR EACH widgettemp:
   CREATE widgettemp2.
   BUFFER-COPY widgettemp TO widgettemp2.
   widgettemp2.ANDFRAME = widgettemp.WIDGETHAND:FRAME.
END.
RUN max_UI.
/*
IF minmax = TRUE THEN RUN max_UI.
ELSE RUN min_UI.
*/
/*
RUN fixandrak_UI.

PROCEDURE fixandrak_UI :
   
   FIND FIRST frametemp WHERE frametemp.FRAMENAMN = "FRAME-ANDRAK" NO-LOCK NO-ERROR.
   IF NOT AVAILABLE frametemp THEN RETURN.
   FIND FIRST widgettemp2 WHERE 
   widgettemp2.WIDGETNAMN = "BRW_VAL" NO-LOCK NO-ERROR.
   IF AVAILABLE widgettemp2 THEN DO:
      ASSIGN
      frametemp.FRMHAND:ROW = widgettemp2.WIDGETHAND:ROW + 0.59
      frametemp.FRMHAND:HEIGHT = widgettemp2.WIDGETHAND:HEIGHT - 0.92
      frametemp.FRMHAND:WIDTH = widgettemp2.WIDGETHAND:WIDTH - 14.5.
      FIND FIRST widgettemp2 WHERE 
      widgettemp2.WIDGETNAMN = "BRW_ANDRAK" NO-LOCK NO-ERROR.
      IF AVAILABLE widgettemp2 THEN DO:
         ASSIGN
         widgettemp2.WIDGETHAND:HEIGHT = frametemp.FRMHAND:HEIGHT - 1
         widgettemp2.WIDGETHAND:WIDTH = frametemp.FRMHAND:WIDTH - 23.  

      END.
   END.
END PROCEDURE.
*/
PROCEDURE min_UI :
   FOR EACH frametemp BY frametemp.ORDNING:
      hidvar = frametemp.FRMHAND:HIDDEN.     
      frametemp.FRMHAND:HIDDEN     = YES.
      IF frametemp.ORDNING = 1 THEN frmheight = frametemp.FHOJD.
      IF frametemp.FRMHAND:NAME = "FRAME-ORDN" OR 
              frametemp.FRMHAND:NAME = "FRAME-FRI"  OR 
              frametemp.FRMHAND:NAME = "FRAME-KABSKAP"  OR  
              frametemp.FRMHAND:NAME = "FRAME-SKAPMTRL" OR   
              frametemp.FRMHAND:NAME = "FRAME-LIN"   OR 
              frametemp.FRMHAND:NAME = "FRAME-LINUPP" OR 
              frametemp.FRMHAND:NAME = "FRAME-KOPUPP" OR      
              frametemp.FRMHAND:NAME = "FRAME-LISTOR" 
      THEN DO:     
         frametemp.FRMHAND:ROW = 3.83.
      END.
      ELSE IF frametemp.ORDNING NE 1 THEN DO:
         frametemp.FRMHAND:ROW = frmheight / 24 - (frametemp.FRMHAND:HEIGHT - 1).      
      END.
      ASSIGN
      frametemp.MFHOJD  = frametemp.FRMHAND:HEIGHT-PIXELS
      frametemp.MFBREDD = frametemp.FRMHAND:WIDTH-PIXELS. 
      ASSIGN 
      x-border = frametemp.FRMHAND:BORDER-LEFT-PIXELS + frametemp.FRMHAND:BORDER-RIGHT-PIXELS
      y-border = frametemp.FRMHAND:BORDER-TOP-PIXELS +  frametemp.FRMHAND:BORDER-BOTTOM-PIXELS
      x-mult = (frametemp.FBREDD - x-border) / (frametemp.MFBREDD - x-border) 
      y-mult = (frametemp.FHOJD - y-border) / (frametemp.MFHOJD - y-border).
      /*
      IF Guru.SharedVariable:globmaxforand = 0 THEN Guru.SharedVariable:globmaxforand = y-mult.
      */
      Guru.SharedVariable:globmaxforand = y-mult.
      IF y-mult = 1 AND x-mult = 1 THEN.
      ELSE DO:
         FOR EACH widgettemp2 WHERE widgettemp2.ANDFRAME = INTEGER(frametemp.FRMHAND):    
            IF widgettemp2.WIDGETHAND:TYPE = "FRAME" THEN.
         END.
      END.
      frametemp.FRMHAND:HIDDEN        = hidvar.
   END.   
   FOR EACH frametemp BY frametemp.ORDNING DESCENDING:
      ASSIGN
      frametemp.FRMHAND:HEIGHT-PIXELS = frametemp.FHOJD
      frametemp.FRMHAND:WIDTH-PIXELS  = frametemp.FBREDD.      
      frametemp.FRMHAND:SCROLLABLE    = no.
   END.     
END PROCEDURE.
PROCEDURE max_UI :
   DEFINE VARIABLE helph AS HANDLE NO-UNDO.
   FOR EACH frametemp BY frametemp.ORDNING:
      helph = frametemp.FRMHAND.
      hidvar = frametemp.FRMHAND:HIDDEN.
      frametemp.FRMHAND:HIDDEN     = YES.
           
      IF frametemp.FRMHAND:NAME = "FRAME-BARABREDD" THEN DO:
        
         ASSIGN
         frametemp.FRMHAND:HEIGHT-PIXELS = win_height-p
         frametemp.FRMHAND:WIDTH-PIXELS  = win_width-p.
         ASSIGN
         frmheight = frametemp.FRMHAND:HEIGHT
         frmrow =  frametemp.FRMHAND:ROW.
        
      END.
      
      ELSE IF frametemp.FRMHAND:NAME = "FRAME-ORDN" OR 
              frametemp.FRMHAND:NAME = "FRAME-FRI"  OR 
              frametemp.FRMHAND:NAME = "FRAME-KABSKAP"  OR  
              frametemp.FRMHAND:NAME = "FRAME-SKAPMTRL" OR   
              frametemp.FRMHAND:NAME = "FRAME-LIN"   OR 
              frametemp.FRMHAND:NAME = "FRAME-LINUPP" OR 
              frametemp.FRMHAND:NAME = "FRAME-KOPUPP" OR      
              frametemp.FRMHAND:NAME = "FRAME-ATG" OR 
              frametemp.FRMHAND:NAME = "FRAME-LISTOR" 
      THEN DO:     
         ASSIGN 
         frametemp.FRMHAND:HEIGHT = frmheight - 3
         frametemp.FRMHAND:ROW = frmrow - 3
         frametemp.FRMHAND:WIDTH-PIXELS  = win_width-p - 4.      
         
      END.
      ELSE IF frametemp.FRMHAND:NAME = "FRAME-ANDRAK" THEN DO:
         ASSIGN
         frametemp.FRMHAND:ROW = frmheight - (frametemp.FRMHAND:HEIGHT - 4).
         frametemp.FRMHAND:WIDTH-PIXELS  = win_width-p - 100.
      END.
      ELSE IF frametemp.FRMHAND:NAME = "CFRAME-ANDKONST" THEN DO:
         ASSIGN
         frametemp.FRMHAND:ROW = frmheight - (frametemp.FRMHAND:HEIGHT - 4).
         frametemp.FRMHAND:WIDTH-PIXELS  = win_width-p - 4.
      END.
      ELSE DO:
         ASSIGN
         frametemp.FRMHAND:ROW = frmheight - (frametemp.FRMHAND:HEIGHT - 1).
         frametemp.FRMHAND:WIDTH-PIXELS  = win_width-p - 4.
      END.
      
      ASSIGN
      frmh = frametemp.FRMHAND:HEIGHT-PIXELS
      frmb = frametemp.FRMHAND:WIDTH-PIXELS.

      ASSIGN 
      x-border = frametemp.FRMHAND:BORDER-LEFT-PIXELS + frametemp.FRMHAND:BORDER-RIGHT-PIXELS
      y-border = frametemp.FRMHAND:BORDER-TOP-PIXELS +  frametemp.FRMHAND:BORDER-BOTTOM-PIXELS
      x-mult = (frmb - x-border) / (frametemp.FBREDD - x-border) 
      y-mult = (frmh - y-border) / (frametemp.FHOJD - y-border).
      /*
      MESSAGE CURRENT-WINDOW:WINDOW-STATE frametemp.FRMHAND:NAME x-mult frametemp.FBREDD frametemp.mFBREDD
      VIEW-AS ALERT-BOX. 
        */
      IF y-mult = 1 AND x-mult = 1 THEN.
      ELSE DO:
         FOR EACH widgettemp2 WHERE widgettemp2.ANDFRAME = INTEGER(frametemp.FRMHAND):    
           
            IF widgettemp2.WIDGETHAND:TYPE = "FRAME" THEN.
            ELSE RUN storlek_UI (INPUT widgettemp2.WIDGETHAND).
         END.
      END.
      frametemp.FRMHAND:HIDDEN        = hidvar.
   END.
END PROCEDURE.
PROCEDURE storlek_UI :
   DEFINE INPUT PARAMETER hh AS HANDLE NO-UNDO.
   h = hh.
   
   IF h:TYPE = "BUTTON" THEN DO:
      IF h:HEIGHT = 1.92 AND h:WIDTH = 7.5 THEN DO:
         x-mult = x-mult. 
      END.
      ELSE IF h:HEIGHT = 1.92 AND h:WIDTH = 7.25 THEN DO:
            x-mult = x-mult. 
         END.
      ELSE IF h:HEIGHT = 2.33 AND h:WIDTH = 7.25 THEN DO:
         x-mult = x-mult. 
      END.
      ELSE IF h:NAME MATCHES("BTN_AVB") THEN  RUN flyttaX_UI.      
      ELSE IF h:NAME MATCHES("BTN_OK") THEN  RUN flyttaX_UI.      
      ELSE IF h:NAME MATCHES("BTN_STANG") THEN.
      ELSE IF h:NAME MATCHES("BTN_STANGANDKONST") THEN.
      ELSE RUN flyttaXY_UI.                         
   END.
   ELSE IF h:TYPE = "TEXT" THEN DO:
      RUN flyttaXY_UI.      
      RUN sX_UI.
   END.  
   ELSE IF h:TYPE = "LITERAL" THEN DO:                       
      RUN flyttaXY_UI.
      RUN sX_UI.
   END.  
   ELSE IF h:TYPE = "FILL-IN" THEN DO:
      RUN flyttaXY_UI.       
      RUN sX_UI.
   END.
   ELSE IF h:TYPE = "RECTANGLE" THEN DO:
      IF h:HEIGHT = 0.08 THEN DO:  
         RUN sX_UI.
      END.
      ELSE DO:
         RUN flyttaXY_UI.            
         RUN sXY_UI.
      END.
      
   END.
   ELSE IF h:TYPE = "BROWSE" THEN DO:
      RUN flyttaXY_UI. 
      RUN finnsben_UI.       
      RUN sXY_UI.
      IF finnsben = TRUE THEN DO:
         IF frametemp.FRMHAND:NAME = "FRAME-MTRL" OR frametemp.FRMHAND:NAME = "FRAME-SKAPMTRL" THEN frametemp.FRMHAND:HIDDEN     = NO.
         RUN colwidth_UI.
         frametemp.FRMHAND:HIDDEN     = YES.
      END.  
      IF  h:NAME = "BRW_VAL" THEN DO:
         RUN colwidthfix_UI.
      END.   
      
   END.
   ELSE DO:      
      RUN flyttaXY_UI.        
      RUN sXY_UI.
   END.       /*   
   Guru.Konstanter:LabelFlytt(h).
   */ 
END.

PROCEDURE colwidthfix_UI :
   DEFINE VARIABLE dyncurcolh AS HANDLE NO-UNDO.
   dyncurcolh = h:FIRST-COLUMN.
   IF dyncurcolh = ? THEN RETURN.
   REPEAT:
      dyncurcolh:WIDTH-CHARS = dyncurcolh:WIDTH-CHARS * x-mult NO-ERROR.
      dyncurcolh = dyncurcolh:NEXT-COLUMN.
      IF NOT VALID-HANDLE(dyncurcolh) THEN LEAVE.
   END.
   dyncurcolh = h:FIRST-COLUMN.
      
  
END PROCEDURE.


PROCEDURE sXY_UI :
   h:WIDTH-PIXELS = h:WIDTH-PIXELS * x-mult NO-ERROR.
   h:HEIGHT-PIXELS = h:HEIGHT-PIXELS * y-mult NO-ERROR.
END PROCEDURE.
PROCEDURE sX_UI :
   h:WIDTH-PIXELS = h:WIDTH-PIXELS * x-mult NO-ERROR.   
END PROCEDURE.
PROCEDURE sY_UI :
   h:HEIGHT-PIXELS = h:HEIGHT-PIXELS * y-mult NO-ERROR.
END PROCEDURE.
PROCEDURE flyttaX_UI :
   h:X = h:X * x-mult.     
END PROCEDURE.
PROCEDURE flyttabaraY_UI :
   h:Y = h:Y * y-mult.     
END PROCEDURE.
PROCEDURE flyttaXY_UI :
   h:X = h:X * x-mult.     
   h:Y = h:Y * y-mult.        
END PROCEDURE.
