/*
               KSV Editor
    Copyright: (
     Filename: SCHAKTPROAPP.P
      Comment: <comment>
   Parameters:
         Uses:
      Used by:
      Created: 2009.10.21 15:30 ELPAO   
     Modified: 2009.10.23 08:20 ELPAO    
     Modified: 2009.12.09 10:28 ELPAO    
     Modified: 
*/
DEFINE INPUT  PARAMETER classerkollin AS CHARACTER NO-UNDO.
DEFINE INPUT  PARAMETER gin AS CHARACTER NO-UNDO.
CREATE WIDGET-POOL "DynTableBH" NO-ERROR.
DEFINE VARIABLE LocalAppServerKalkberApps AS HANDLE NO-UNDO.

DEFINE VARIABLE ExtradataAppServerHandleSet AS HANDLE NO-UNDO. 
DEFINE VARIABLE ExtraFieldH AS HANDLE NO-UNDO.
DEFINE VARIABLE ExtraFielChdH AS HANDLE NO-UNDO.
DEFINE VARIABLE ExtraDataDS AS HANDLE NO-UNDO.
DEFINE VARIABLE ExtraVadHmt AS CHARACTER NO-UNDO.
DEFINE VARIABLE queryvar AS CHARACTER NO-UNDO.

DEFINE BUFFER KALKNUMBUF FOR KALKNUM.
FUNCTION Antalkalkyl RETURNS DECIMAL
  ( INPUT ordvar AS INTEGER ) FORWARD.

{KalkylimportTT.I}
{TTFORLAG.I}
{temphandelsett.i}
DEFINE VARIABLE grundkloid AS INTEGER NO-UNDO.
{STARTFORAPPC.I}
&Scoped-define NEW NEW
&Scoped-define SHARED SHARED 
DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.
{EXTRADATA.I}
{HDTEMP.I}
DEFINE VARIABLE gbernrvar AS INTEGER NO-UNDO.
DEFINE VARIABLE gomrvar   AS CHARACTER NO-UNDO.
DEFINE VARIABLE kalkylhmt AS LOGICAL NO-UNDO.
DEFINE TEMP-TABLE sumhdschtprot NO-UNDO LIKE HDSCHAKTPROT.

DEFINE VARIABLE berkopptabbuffh AS HANDLE NO-UNDO.

&Scoped-define NEW 
&Scoped-define SHARED  



{SCHAKTPROFIL.I}

PROCEDURE sparprosid_UI :
   DEFINE INPUT PARAMETER bernrvar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER omrvar AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR hdschakttemp.
   DEFINE INPUT PARAMETER TABLE FOR hdschakprottemp.
   DEFINE INPUT PARAMETER TABLE FOR hdschakprothandtemp.
   DEFINE INPUT PARAMETER TABLE FOR hdprotkopbertemp.
   DEFINE INPUT PARAMETER TABLE FOR hdkalktemp.
   DEFINE INPUT  PARAMETER vadsid AS INTEGER NO-UNDO.
   FOR EACH hdschakttemp WHERE hdschakttemp.ANDRAD AND hdschakttemp.SID = vadsid NO-LOCK:
      FIND FIRST HDSCHAKT WHERE HDSCHAKT.BERNR = hdschakttemp.BERNR AND HDSCHAKT.OMRADE = hdschakttemp.OMRADE AND
      HDSCHAKT.SID = hdschakttemp.SID EXCLUSIVE-LOCK NO-ERROR.      
      IF NOT AVAILABLE HDSCHAKT THEN DO:
         CREATE HDSCHAKT.    
         FIND FIRST BEREDNING  WHERE BEREDNING.BERNR = bernrvar AND BEREDNING.OMRADE = omrvar NO-LOCK NO-ERROR.
         IF BEREDNING.KALKYL = TRUE THEN RUN SCHKALKSTOPP.P (INPUT bernrvar,INPUT omrvar,INPUT vadsid, INPUT FALSE).
         IF BEREDNING.KALKYL = FALSE THEN RUN SCHKALKSTOPP.P (INPUT bernrvar,INPUT omrvar,INPUT vadsid, INPUT TRUE).     
      END.
      BUFFER-COPY hdschakttemp TO HDSCHAKT.
      
   END.   
   
   /* hdprotkopber bort */
   FOR EACH hdprotkopbertemp WHERE hdprotkopbertemp.BORT AND hdprotkopbertemp.SID = vadsid NO-LOCK:      
      FIND FIRST HDPROTKOPPBER WHERE HDPROTKOPPBER.BERNR = hdprotkopbertemp.BERNR AND HDPROTKOPPBER.OMRADE = hdprotkopbertemp.OMRADE AND
      HDPROTKOPPBER.SID = hdprotkopbertemp.SID AND HDPROTKOPPBER.ID = hdprotkopbertemp.ID AND HDPROTKOPPBER.TYP = hdprotkopbertemp.TYP EXCLUSIVE-LOCK NO-ERROR.
      IF AVAILABLE HDPROTKOPPBER THEN DO:
         DELETE HDPROTKOPPBER.
         DELETE hdprotkopbertemp.
      END.  
      DELETE hdprotkopbertemp.    
   END.
   
   /* hdprotkopber*/
   FOR EACH hdprotkopbertemp WHERE hdprotkopbertemp.ANDRAD AND hdprotkopbertemp.SID = vadsid NO-LOCK:     
      FIND FIRST HDPROTKOPPBER WHERE HDPROTKOPPBER.BERNR = hdprotkopbertemp.BERNR AND HDPROTKOPPBER.OMRADE = hdprotkopbertemp.OMRADE AND
      HDPROTKOPPBER.SID = hdprotkopbertemp.SID AND HDPROTKOPPBER.ID = hdprotkopbertemp.ID AND HDPROTKOPPBER.TYP = hdprotkopbertemp.TYP EXCLUSIVE-LOCK NO-ERROR.      
      IF NOT AVAILABLE HDPROTKOPPBER THEN DO:
         CREATE HDPROTKOPPBER.               
      END.
      BUFFER-COPY hdprotkopbertemp TO HDPROTKOPPBER.     
   END.
   
   /* hdschaktprot bort */
   FOR EACH hdschakprottemp WHERE hdschakprottemp.BORT AND hdschakprottemp.SID = vadsid NO-LOCK:   
      FIND FIRST HDSCHAKTPROT WHERE HDSCHAKTPROT.BERNR = hdschakprottemp.BERNR AND HDSCHAKTPROT.OMRADE = hdschakprottemp.OMRADE AND
      HDSCHAKTPROT.SID = hdschakprottemp.SID AND HDSCHAKTPROT.KLID = hdschakprottemp.KLID EXCLUSIVE-LOCK NO-ERROR.
      IF AVAILABLE HDSCHAKTPROT THEN DO:
         DELETE HDSCHAKTPROT.
         DELETE hdprotkopbertemp. 
      END.
      DELETE hdschakprottemp.
   END.
   /* hdschaktprot*/
   FOR EACH hdschakprottemp WHERE hdschakprottemp.ANDRAD AND hdschakprottemp.SID = vadsid NO-LOCK:
      FIND FIRST HDSCHAKTPROT WHERE HDSCHAKTPROT.BERNR = hdschakprottemp.BERNR AND HDSCHAKTPROT.OMRADE = hdschakprottemp.OMRADE AND
      HDSCHAKTPROT.SID = hdschakprottemp.SID AND HDSCHAKTPROT.KLID = hdschakprottemp.KLID EXCLUSIVE-LOCK NO-ERROR.      
      IF NOT AVAILABLE HDSCHAKTPROT THEN DO:
         CREATE HDSCHAKTPROT.         
      END.
      BUFFER-COPY hdschakprottemp TO HDSCHAKTPROT.
   END.   
      
   RELEASE HDSCHAKT NO-ERROR.
   RELEASE HDSCHAKTPROT NO-ERROR.
   RELEASE HDPROTKOPPBER NO-ERROR.
   RELEASE HDSCHAKTPROTHAND NO-ERROR.
   RELEASE HDSCHAKTPROT NO-ERROR.
END PROCEDURE.

PROCEDURE sparpro_UI :
   DEFINE INPUT PARAMETER bernrvar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER omrvar AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR hdschakttemp.
   DEFINE INPUT PARAMETER TABLE FOR hdschakprottemp.
   DEFINE INPUT PARAMETER TABLE FOR hdschakprothandtemp.
   DEFINE INPUT PARAMETER TABLE FOR hdprotkopbertemp.
   DEFINE INPUT PARAMETER TABLE FOR hdkalktemp.
   DEFINE VARIABLE sidnr AS INTEGER NO-UNDO.
      /* hdschakt bort */
   FOR EACH hdschakttemp WHERE hdschakttemp.BORT NO-LOCK:      
      FIND FIRST HDSCHAKT WHERE HDSCHAKT.BERNR = hdschakttemp.BERNR AND HDSCHAKT.OMRADE = hdschakttemp.OMRADE AND
      HDSCHAKT.SID = hdschakttemp.SID EXCLUSIVE-LOCK NO-ERROR.
      IF AVAILABLE HDSCHAKT THEN DO:
         /* ta bort bakomliggande tabeller för detta schakt */
         RUN manbortschakt_UI (INPUT hdschakttemp.BERNR,INPUT hdschakttemp.OMRADE,INPUT hdschakttemp.SID).
         DELETE HDSCHAKT.                  
      END.
      FOR EACH hdprotkopbertemp WHERE hdprotkopbertemp.SID = hdschakttemp.SID :
         DELETE hdprotkopbertemp NO-ERROR.
      END.
      FOR EACH hdschakprottemp WHERE hdschakprottemp.SID = hdschakttemp.SID :
         DELETE hdschakprottemp NO-ERROR.
      END.
      /*Måste rensa kalknum också*/
      FOR EACH hdkalktemp WHERE hdkalktemp.SID = hdschakttemp.SID :
         DELETE hdkalktemp NO-ERROR.
      END.
      
      DELETE hdschakttemp NO-ERROR.
      
   END.
   FOR EACH hdschakttemp WHERE hdschakttemp.ANDRAD NO-LOCK:
      /*FIND FIRST HDSCHAKT WHERE ROWID(HDSCHAKT) = hdschakttemp.SCHAKTR NO-LOCK NO-ERROR.*/
      FIND FIRST HDSCHAKT WHERE HDSCHAKT.BERNR = hdschakttemp.BERNR AND HDSCHAKT.OMRADE = hdschakttemp.OMRADE AND
      HDSCHAKT.SID = hdschakttemp.SID EXCLUSIVE-LOCK NO-ERROR.
      
      IF NOT AVAILABLE HDSCHAKT THEN DO:
         CREATE HDSCHAKT.  
         FIND FIRST BEREDNING  WHERE BEREDNING.BERNR = bernrvar AND BEREDNING.OMRADE = omrvar NO-LOCK NO-ERROR.
         IF BEREDNING.KALKYL = TRUE THEN RUN SCHKALKSTOPP.P (INPUT bernrvar,INPUT omrvar,INPUT hdschakttemp.SID, INPUT FALSE).
         IF BEREDNING.KALKYL = FALSE THEN RUN SCHKALKSTOPP.P (INPUT bernrvar,INPUT omrvar,INPUT hdschakttemp.SID, INPUT TRUE).       
      END.
      BUFFER-COPY hdschakttemp TO HDSCHAKT.
   END.
   
   
   
   IF kalkylhmt = TRUE THEN DO: 
      /* HDKALK BORT */
      /*Anders Olsson Elpool i Umeå AB  18 feb 2016 15:08:46 
      för enskilda koder om man ej kör classer, annars vid om genereing av kalkyl 
      */ 
      
      RUN BerkoppbuffCreate_UI (INPUT bernrvar,INPUT omrvar).
      IF VALID-HANDLE(berkopptabbuffh) THEN DO:
         IF berkopptabbuffh:AVAILABLE THEN DO:
            REPEAT:  
               FIND FIRST hdkalktemp WHERE hdkalktemp.BORT = TRUE NO-LOCK NO-ERROR.
               IF AVAILABLE hdkalktemp THEN DO:
                  sidnr = hdkalktemp.SID.
                  RUN HDKalkBortStart_UI (INPUT bernrvar, INPUT omrvar, INPUT hdkalktemp.SID).
                  FOR EACH hdkalktemp WHERE hdkalktemp.SID = sidnr NO-LOCK:
                     DELETE hdkalktemp.
                  END.
               END.
               ELSE LEAVE.
            END.      
         END.
      END.
      ELSE DO:
         FOR EACH hdkalktemp WHERE hdkalktemp.BORT = TRUE NO-LOCK: 
            FIND FIRST HDKALK WHERE HDKALK.BERNR = hdkalktemp.BERNR AND HDKALK.OMRADE = hdkalktemp.OMRADE AND
            HDKALK.SID = hdkalktemp.SID AND HDKALK.ARBKOD = hdkalktemp.ARBKOD AND HDKALK.LOPNR = hdkalktemp.LOPNR EXCLUSIVE-LOCK NO-ERROR.
            IF AVAILABLE HDKALK THEN DO:
               DELETE HDKALK. 
        
            END.  
            DELETE hdkalktemp.   
         END.
      END.      
   /* HDKALK ANDRAD*/
      
     /*Anders Olsson Elpool i Umeå AB  18 feb 2016 15:09:53 
     bara dom som ej kör klasser KOMMER INTE ATT HÄNDA FÖR ÖVRIGA 
     */
              
   END.
   
   /* hdprotkopber bort */
   FOR EACH hdprotkopbertemp WHERE hdprotkopbertemp.BORT NO-LOCK:      
      FIND FIRST HDPROTKOPPBER WHERE HDPROTKOPPBER.BERNR = hdprotkopbertemp.BERNR AND HDPROTKOPPBER.OMRADE = hdprotkopbertemp.OMRADE AND
       HDPROTKOPPBER.SID = hdprotkopbertemp.SID AND HDPROTKOPPBER.ID = hdprotkopbertemp.ID AND HDPROTKOPPBER.TYP = hdprotkopbertemp.TYP EXCLUSIVE-LOCK NO-ERROR.
      IF AVAILABLE HDPROTKOPPBER THEN DO:
         DELETE HDPROTKOPPBER.         
      END.  
      DELETE hdprotkopbertemp.    
   END.
   
   /* hdprotkopber*/
   FOR EACH hdprotkopbertemp WHERE hdprotkopbertemp.ANDRAD NO-LOCK:     
      FIND FIRST HDPROTKOPPBER WHERE HDPROTKOPPBER.BERNR = hdprotkopbertemp.BERNR AND HDPROTKOPPBER.OMRADE = hdprotkopbertemp.OMRADE AND
       HDPROTKOPPBER.SID = hdprotkopbertemp.SID AND HDPROTKOPPBER.ID = hdprotkopbertemp.ID AND HDPROTKOPPBER.TYP = hdprotkopbertemp.TYP EXCLUSIVE-LOCK NO-ERROR.      
      IF NOT AVAILABLE HDPROTKOPPBER THEN DO:
         CREATE HDPROTKOPPBER.               
      END.
      BUFFER-COPY hdprotkopbertemp TO HDPROTKOPPBER.
      
   END.
   
   /* hdschaktprot bort */
   FOR EACH hdschakprottemp WHERE hdschakprottemp.BORT NO-LOCK:      
      FIND FIRST HDSCHAKTPROT WHERE HDSCHAKTPROT.BERNR = hdschakprottemp.BERNR AND HDSCHAKTPROT.OMRADE = hdschakprottemp.OMRADE AND
      HDSCHAKTPROT.SID = hdschakprottemp.SID AND HDSCHAKTPROT.KLID = hdschakprottemp.KLID EXCLUSIVE-LOCK NO-ERROR.
      IF AVAILABLE HDSCHAKTPROT THEN DO:
         DELETE HDSCHAKTPROT.           
      END.
      DELETE hdschakprottemp.
   END.
   /* hdschaktprot*/
   FOR EACH hdschakprottemp WHERE hdschakprottemp.ANDRAD NO-LOCK:      
      FIND FIRST HDSCHAKTPROT WHERE HDSCHAKTPROT.BERNR = hdschakprottemp.BERNR AND HDSCHAKTPROT.OMRADE = hdschakprottemp.OMRADE AND
      HDSCHAKTPROT.SID = hdschakprottemp.SID AND HDSCHAKTPROT.KLID = hdschakprottemp.KLID EXCLUSIVE-LOCK NO-ERROR.      
      IF NOT AVAILABLE HDSCHAKTPROT THEN DO:
         CREATE HDSCHAKTPROT.         
      END.
      BUFFER-COPY hdschakprottemp TO HDSCHAKTPROT.
   END.   
      
   RELEASE HDSCHAKT NO-ERROR.
   RELEASE HDSCHAKTPROT NO-ERROR.
   RELEASE HDPROTKOPPBER NO-ERROR.
   RELEASE HDSCHAKTPROTHAND NO-ERROR.
   RELEASE HDSCHAKTPROT NO-ERROR.
END PROCEDURE.
PROCEDURE hamtpro_UI :
   DEFINE INPUT PARAMETER bernrvar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER omrvar AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR hdschakprottemp.
   DEFINE OUTPUT PARAMETER TABLE FOR hdschakprothandtemp.
   DEFINE OUTPUT PARAMETER TABLE FOR hdprotkopbertemp.
   DEFINE OUTPUT PARAMETER TABLE FOR schkordstartsluttemp.
   DEFINE OUTPUT PARAMETER TABLE FOR hdschakttemp.
   EMPTY TEMP-TABLE hdschakprottemp       NO-ERROR. 
   EMPTY TEMP-TABLE hdschakprothandtemp NO-ERROR. 
   EMPTY TEMP-TABLE hdprotkopbertemp     NO-ERROR. 
   EMPTY TEMP-TABLE schkordstartsluttemp NO-ERROR. 
   EMPTY TEMP-TABLE hdschakttemp NO-ERROR. 
      
   FOR EACH HDSCHAKT WHERE HDSCHAKT.BERNR = bernrvar AND HDSCHAKT.OMRADE = omrvar NO-LOCK:
      CREATE hdschakttemp.
      BUFFER-COPY HDSCHAKT TO hdschakttemp.
   END.
   
   FOR EACH HDSCHAKTPROT WHERE HDSCHAKTPROT.BERNR = bernrvar AND HDSCHAKTPROT.OMRADE = omrvar NO-LOCK:
      CREATE hdschakprottemp.
      BUFFER-COPY HDSCHAKTPROT TO hdschakprottemp.    
   END.
   FOR EACH HDSCHAKTPROTHAND WHERE HDSCHAKTPROTHAND.BERNR = bernrvar AND HDSCHAKTPROTHAND.OMRADE = omrvar NO-LOCK:
      CREATE hdschakprothandtemp.
      BUFFER-COPY HDSCHAKTPROTHAND TO hdschakprothandtemp.       
   END.
   FOR EACH HDPROTKOPPBER WHERE HDPROTKOPPBER.BERNR = bernrvar AND HDPROTKOPPBER.OMRADE = omrvar NO-LOCK:
      CREATE hdprotkopbertemp.
      BUFFER-COPY HDPROTKOPPBER TO hdprotkopbertemp.     
   END.
   FOR EACH hdschakprottemp,
   EACH hdschakprothandtemp WHERE hdschakprothandtemp.SID = hdschakprottemp.SID AND hdschakprothandtemp.KLID = hdschakprottemp.KLID:
      hdschakprothandtemp.FRANTILL = hdschakprottemp.FRANTILL. 
   END.
   FOR EACH hdschakprottemp:
      CREATE schkordstartsluttemp.
      BUFFER-COPY hdschakprottemp TO schkordstartsluttemp.
   END.
   FOR EACH schkordstartsluttemp:
      FIND FIRST HDKABELLINJE WHERE HDKABELLINJE.BERNR = bernrvar AND HDKABELLINJE.OMRADE = omrvar AND
      HDKABELLINJE.SID = schkordstartsluttemp.SID AND  HDKABELLINJE.KLID = schkordstartsluttemp.KLID AND
      HDKABELLINJE.START = TRUE NO-LOCK NO-ERROR.
      IF AVAILABLE HDKABELLINJE THEN DO:
         schkordstartsluttemp.FPID = HDKABELLINJE.PID.
      END.
      FIND FIRST HDKABELLINJE WHERE HDKABELLINJE.BERNR = bernrvar AND HDKABELLINJE.OMRADE = omrvar AND
      HDKABELLINJE.SID = schkordstartsluttemp.SID AND  HDKABELLINJE.KLID = schkordstartsluttemp.KLID AND
      HDKABELLINJE.SLUT = TRUE NO-LOCK NO-ERROR.
      IF AVAILABLE HDKABELLINJE THEN DO:
         schkordstartsluttemp.TPID = HDKABELLINJE.PID.
      END.
      FIND FIRST HDPUNKT WHERE HDPUNKT.BERNR = bernrvar AND HDPUNKT.OMRADE = omrvar AND
      HDPUNKT.PID = schkordstartsluttemp.FPID NO-LOCK NO-ERROR.
      IF AVAILABLE HDPUNKT THEN DO:
         ASSIGN
         schkordstartsluttemp.XKORDF = HDPUNKT.XKORD 
         schkordstartsluttemp.YKORDF = HDPUNKT.YKORD 
         schkordstartsluttemp.ZKORDF = HDPUNKT.ZKORD. 
      END.
      FIND FIRST HDPUNKT WHERE HDPUNKT.BERNR = bernrvar AND HDPUNKT.OMRADE = omrvar AND
      HDPUNKT.PID = schkordstartsluttemp.TPID NO-LOCK NO-ERROR.
      IF AVAILABLE HDPUNKT THEN DO:
         ASSIGN
         schkordstartsluttemp.XKORDT = HDPUNKT.XKORD 
         schkordstartsluttemp.YKORDT = HDPUNKT.YKORD 
         schkordstartsluttemp.ZKORDT = HDPUNKT.ZKORD.
      END.
    
   END.  
END PROCEDURE.

PROCEDURE delkalk_UI :
   /*Anders Olsson Elpool i Umeå AB  18 feb 2016 15:40:39 
   KÖRS INTE !!!! 
   */
   DEFINE INPUT PARAMETER bernrvar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER omrvar AS CHARACTER NO-UNDO.
   
   RETURN.
END PROCEDURE.
PROCEDURE nolla_UI :
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph.
END PROCEDURE.

PROCEDURE Rubsort_UI :
   DEFINE INPUT PARAMETER bernrvar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER omrvar AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER rsort AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER spauto AS INTEGER NO-UNDO.
   DO TRANSACTION:
      FIND FIRST BETFRIA WHERE BETFRIA.BETNR = bernrvar AND
      BETFRIA.FAKTTEXT = omrvar 
      EXCLUSIVE-LOCK NO-ERROR.
      IF NOT AVAILABLE BETFRIA THEN DO:
         CREATE BETFRIA.
         ASSIGN
         BETFRIA.BETNR = bernrvar /*beredningsnummer*/
         BETFRIA.FAKTTEXT = omrvar. /*beredningens område*/
         BETFRIA.OANTAL = Guru.Konstanter:varforetypval[16].
      END.
     rsort = BETFRIA.OANTAL.
     spauto = BETFRIA.OPRIS.
   END.   
   RELEASE BETFRIA NO-ERROR. 
   
END PROCEDURE.
PROCEDURE RubsortSpar_UI :
   DEFINE INPUT PARAMETER bernrvar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER omrvar AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER rsort AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER spauto AS INTEGER NO-UNDO.
   DO TRANSACTION:
      FIND FIRST BETFRIA WHERE BETFRIA.BETNR = bernrvar AND
      BETFRIA.FAKTTEXT = omrvar 
      EXCLUSIVE-LOCK NO-ERROR.
      BETFRIA.OANTAL = rsort.
      BETFRIA.OPRIS  = spauto. 
   END.   
   RELEASE BETFRIA NO-ERROR. 
END PROCEDURE.

PROCEDURE genkalk_UI :
   DEFINE INPUT PARAMETER bernrvar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER omrvar AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER genauto AS LOGICAL NO-UNDO.
   FIND FIRST BEREDNING  WHERE BEREDNING.BERNR = bernrvar AND BEREDNING.OMRADE = omrvar NO-LOCK NO-ERROR.
   IF AVAILABLE BEREDNING THEN genauto = BEREDNING.KALKYL.
   
END PROCEDURE.
PROCEDURE kalktolk_UI :
   DEFINE INPUT PARAMETER bernrvar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER omrvar AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER vadsid AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR hdkalktemp.      
   DEFINE VARIABLE hdkalkfinns AS LOGICAL NO-UNDO.
   EMPTY TEMP-TABLE sumhdschtprot NO-ERROR.
   EMPTY TEMP-TABLE hdkalktemp NO-ERROR. 
   ASSIGN
   kalkylhmt = TRUE
   gbernrvar = bernrvar
   gomrvar   = omrvar.
   RUN EXTRADATAHMT.P PERSISTENT SET edataapph.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   /*KOLLAR BEREDNINGENS URSPRUNG*/
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "BERFORE"  
   inextradatatemp.HUVUDCH =  omrvar
   inextradatatemp.HUVUDINT = bernrvar.
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:
      IF extradatatemp.SOKCHAR[1] = Guru.Konstanter:globforetag THEN.
      ELSE DO:
         RUN nolla_UI. 
        
      END.
   END.
   RUN nolla_UI. 
   
   FOR EACH HDSCHAKT WHERE HDSCHAKT.BERNR = bernrvar AND HDSCHAKT.OMRADE = omrvar AND HDSCHAKT.SID = vadsid NO-LOCK:     
         /*HÄR SKAPAS HDKALKTEMP FRÅN KALKYLEN OM DET FINNS*/
      RUN HdKalkUppStart_UI (INPUT HDSCHAKT.BERNR, INPUT HDSCHAKT.OMRADE, HDSCHAKT.SID, OUTPUT hdkalkfinns).
      IF hdkalkfinns = TRUE THEN RETURN.
      FIND FIRST HDSCHSTOPP WHERE  HDSCHSTOPP.BERNR = bernrvar AND HDSCHSTOPP.OMRADE = omrvar AND HDSCHSTOPP.SID = vadsid NO-LOCK NO-ERROR.
      IF AVAILABLE HDSCHSTOPP THEN DO:
         
         IF HDSCHSTOPP.STOPP = TRUE THEN RETURN.
      END.
      FOR EACH HDSCHAKTPROT WHERE HDSCHAKTPROT.BERNR = bernrvar AND 
      HDSCHAKTPROT.OMRADE = omrvar AND HDSCHAKTPROT.SID = HDSCHAKT.SID NO-LOCK BREAK BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID :
         ACCUMULATE HDSCHAKTPROT.DEC1 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC2 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC3 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC4 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC5 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC6 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC7 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC8 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC9 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC10 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC11 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC12 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC13 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC14 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC15 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC16 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC17 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC18 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC19 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID).
         ACCUMULATE HDSCHAKTPROT.DEC20 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC21 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC22 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC23 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC24 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC25 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC26 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC27 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC28 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC29 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC30 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC31 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC32 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC33 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC34 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC35 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC36 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC37 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC38 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         ACCUMULATE HDSCHAKTPROT.DEC39 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID).
         ACCUMULATE HDSCHAKTPROT.DEC40 (TOTAL BY HDSCHAKTPROT.SID BY HDSCHAKTPROT.KLID). 
         IF LAST-OF(HDSCHAKTPROT.KLID) THEN DO:
            CREATE sumhdschtprot.      
            BUFFER-COPY HDSCHAKTPROT TO sumhdschtprot.       
            sumhdschtprot.DEC1 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC1 ). 
            sumhdschtprot.DEC2 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC2 ). 
            sumhdschtprot.DEC3 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC3 ). 
            sumhdschtprot.DEC4 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC4 ). 
            sumhdschtprot.DEC5 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC5 ). 
            sumhdschtprot.DEC6 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC6 ). 
            sumhdschtprot.DEC7 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC7 ). 
            sumhdschtprot.DEC8 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC8 ). 
            sumhdschtprot.DEC9 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC9 ). 
            sumhdschtprot.DEC10 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC10). 
            sumhdschtprot.DEC11 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC11). 
            sumhdschtprot.DEC12 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC12). 
            sumhdschtprot.DEC13 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC13). 
            sumhdschtprot.DEC14 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC14). 
            sumhdschtprot.DEC15 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC15). 
            sumhdschtprot.DEC16 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC16). 
            sumhdschtprot.DEC17 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC17). 
            sumhdschtprot.DEC18 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC18). 
            sumhdschtprot.DEC19 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC19).
            sumhdschtprot.DEC20 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC20). 
            sumhdschtprot.DEC21 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC21). 
            sumhdschtprot.DEC22 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC22). 
            sumhdschtprot.DEC23 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC23). 
            sumhdschtprot.DEC24 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC24). 
            sumhdschtprot.DEC25 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC25). 
            sumhdschtprot.DEC26 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC26). 
            sumhdschtprot.DEC27 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC27). 
            sumhdschtprot.DEC28 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC28). 
            sumhdschtprot.DEC29 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC29). 
            sumhdschtprot.DEC30 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC30). 
            sumhdschtprot.DEC31 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC31). 
            sumhdschtprot.DEC32 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC32). 
            sumhdschtprot.DEC33 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC33). 
            sumhdschtprot.DEC34 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC34). 
            sumhdschtprot.DEC35 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC35). 
            sumhdschtprot.DEC36 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC36). 
            sumhdschtprot.DEC37 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC37). 
            sumhdschtprot.DEC38 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC38). 
            sumhdschtprot.DEC39 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC39).
            sumhdschtprot.DEC40 = (ACCUM TOTAL BY HDSCHAKTPROT.KLID HDSCHAKTPROT.DEC40).
         END.     
      END.
   END.
   RUN HdKoppStart_UI (INPUT bernrvar, INPUT omrvar).
   FOR EACH sumhdschtprot:
      IF sumhdschtprot.DEC1 NE 0 THEN RUN hdkopp_UI (INPUT 1).
      IF sumhdschtprot.DEC2 NE 0 THEN RUN hdkopp_UI (INPUT 2).
      IF sumhdschtprot.DEC3 NE 0 THEN RUN hdkopp_UI (INPUT 3).
      IF sumhdschtprot.DEC4 NE 0 THEN RUN hdkopp_UI (INPUT 4).
      IF sumhdschtprot.DEC5 NE 0 THEN RUN hdkopp_UI (INPUT 5).
      IF sumhdschtprot.DEC6 NE 0 THEN RUN hdkopp_UI (INPUT 6).
      IF sumhdschtprot.DEC7 NE 0 THEN RUN hdkopp_UI (INPUT 7).
      IF sumhdschtprot.DEC8 NE 0 THEN RUN hdkopp_UI (INPUT 8).
      IF sumhdschtprot.DEC9 NE 0 THEN RUN hdkopp_UI (INPUT 9).
      IF sumhdschtprot.DEC10 NE 0 THEN RUN hdkopp_UI (INPUT 10). 
      IF sumhdschtprot.DEC11 NE 0 THEN RUN hdkopp_UI (INPUT 11). 
      IF sumhdschtprot.DEC12 NE 0 THEN RUN hdkopp_UI (INPUT 12). 
      IF sumhdschtprot.DEC13 NE 0 THEN RUN hdkopp_UI (INPUT 13). 
      IF sumhdschtprot.DEC14 NE 0 THEN RUN hdkopp_UI (INPUT 14). 
      IF sumhdschtprot.DEC15 NE 0 THEN RUN hdkopp_UI (INPUT 15). 
      IF sumhdschtprot.DEC16 NE 0 THEN RUN hdkopp_UI (INPUT 16). 
      IF sumhdschtprot.DEC17 NE 0 THEN RUN hdkopp_UI (INPUT 17). 
      IF sumhdschtprot.DEC18 NE 0 THEN RUN hdkopp_UI (INPUT 18). 
      IF sumhdschtprot.DEC19 NE 0 THEN RUN hdkopp_UI (INPUT 19). 
      IF sumhdschtprot.DEC20 NE 0 THEN RUN hdkopp_UI (INPUT 20). 
      IF sumhdschtprot.DEC21 NE 0 THEN RUN hdkopp_UI (INPUT 21). 
      IF sumhdschtprot.DEC22 NE 0 THEN RUN hdkopp_UI (INPUT 22). 
      IF sumhdschtprot.DEC23 NE 0 THEN RUN hdkopp_UI (INPUT 23). 
      IF sumhdschtprot.DEC24 NE 0 THEN RUN hdkopp_UI (INPUT 24). 
      IF sumhdschtprot.DEC25 NE 0 THEN RUN hdkopp_UI (INPUT 25). 
      IF sumhdschtprot.DEC26 NE 0 THEN RUN hdkopp_UI (INPUT 26). 
      IF sumhdschtprot.DEC27 NE 0 THEN RUN hdkopp_UI (INPUT 27). 
      IF sumhdschtprot.DEC28 NE 0 THEN RUN hdkopp_UI (INPUT 28). 
      IF sumhdschtprot.DEC29 NE 0 THEN RUN hdkopp_UI (INPUT 29). 
      IF sumhdschtprot.DEC30 NE 0 THEN RUN hdkopp_UI (INPUT 30). 
      IF sumhdschtprot.DEC31 NE 0 THEN RUN hdkopp_UI (INPUT 31). 
      IF sumhdschtprot.DEC32 NE 0 THEN RUN hdkopp_UI (INPUT 32). 
      IF sumhdschtprot.DEC33 NE 0 THEN RUN hdkopp_UI (INPUT 33). 
      IF sumhdschtprot.DEC34 NE 0 THEN RUN hdkopp_UI (INPUT 34). 
      IF sumhdschtprot.DEC35 NE 0 THEN RUN hdkopp_UI (INPUT 35). 
      IF sumhdschtprot.DEC36 NE 0 THEN RUN hdkopp_UI (INPUT 36). 
      IF sumhdschtprot.DEC37 NE 0 THEN RUN hdkopp_UI (INPUT 37). 
      IF sumhdschtprot.DEC38 NE 0 THEN RUN hdkopp_UI (INPUT 38). 
      IF sumhdschtprot.DEC39 NE 0 THEN RUN hdkopp_UI (INPUT 39). 
      IF sumhdschtprot.DEC40 NE 0 THEN RUN hdkopp_UI (INPUT 40).       
   END.
   FIND FIRST BEREDNING  WHERE BEREDNING.BERNR = bernrvar AND BEREDNING.OMRADE = omrvar NO-LOCK NO-ERROR.
   /*Anders Olsson Elpool i Umeå AB  5 sep 2016 13:14:10 
   I hdkopp_UI KÖR HdKoppImport_UI OCH DÄR SKAPAS FRÅN UPLÄGGET I KalkiBerSchApp.p SKAPAS KALKNUM I HdKalkUppStart_UI KÖR
    HdKalkUpp_UI DÄR  SKAPAS hdkalktemp SOM VISAS I SCHAKT.
   */
   
   RUN KalkiBerSchApp.p (INPUT TABLE KalkylimportTT).
   EMPTY TEMP-TABLE KalkylimportTT NO-ERROR. 
   /*HÄR SKAPAS hdkalktemp I HdKalkUpp_UI*/ 
   RUN HdKalkUppStart_UI (INPUT bernrvar, INPUT omrvar, vadsid, OUTPUT hdkalkfinns).
      
END PROCEDURE.

PROCEDURE hdkopp_UI :
   DEFINE INPUT PARAMETER ovar AS INTEGER NO-UNDO.
   FIND FIRST HDPROTKOPPBER WHERE HDPROTKOPPBER.BERNR = sumhdschtprot.BERNR AND 
   HDPROTKOPPBER.OMRADE = sumhdschtprot.OMRADE AND 
   HDPROTKOPPBER.ORDNING = ovar AND HDPROTKOPPBER.SID = sumhdschtprot.SID NO-LOCK NO-ERROR.
   IF AVAILABLE HDPROTKOPPBER THEN RUN HdKoppImport_UI (INPUT ovar). 
             
END PROCEDURE.

PROCEDURE kalkenhet_UI :
   DEFINE VARIABLE katar AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER vadsid AS INTEGER NO-UNDO.
   /*Anders Olsson Elpool i Umeå AB  7 feb 2018 09:46:02 
   körs inte 
   */
   katar = YEAR(TODAY). 
      
END PROCEDURE.

PROCEDURE mannyschakt_UI :   
   DEFINE INPUT PARAMETER varbernr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER varomrade AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER varbenamning AS CHARACTER NO-UNDO.
   
   DEFINE VARIABLE vadsid AS INTEGER NO-UNDO.
   FIND LAST HDSCHAKT WHERE HDSCHAKT.BERNR = varbernr AND HDSCHAKT.OMRADE = varomrade NO-LOCK.
   
   IF AVAILABLE HDSCHAKT THEN DO:
      vadsid = HDSCHAKT.SID.
      vadsid = vadsid + 1.
   END.
   ELSE DO:
      vadsid = 1.
   END.
   DO TRANSACTION: 
      CREATE HDSCHAKT.
      ASSIGN 
      HDSCHAKT.SID = vadsid
      HDSCHAKT.BERNR = varbernr
      HDSCHAKT.OMRADE = varomrade
      HDSCHAKT.BENAMNING = varbenamning.
   END.
   FIND CURRENT HDSCHAKT NO-LOCK NO-ERROR.   
   FIND FIRST BEREDNING  WHERE BEREDNING.BERNR = varbernr AND BEREDNING.OMRADE = varomrade NO-LOCK NO-ERROR.
   IF BEREDNING.KALKYL = TRUE THEN RUN SCHKALKSTOPP.P (INPUT varbernr,INPUT varomrade,INPUT vadsid, INPUT FALSE).
   IF BEREDNING.KALKYL = FALSE THEN RUN SCHKALKSTOPP.P (INPUT varbernr,INPUT varomrade,INPUT vadsid, INPUT TRUE).
   
END PROCEDURE.

/*
PROCEDURE mannystracka_UI :
   DEFINE INPUT  PARAMETER varbernr AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER varomrade AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER vadsid AS INTEGER NO-UNDO.   
   DEFINE VARIABLE varklid AS INTEGER NO-UNDO.
   
   FIND LAST HDSCHAKTPROT WHERE HDSCHAKTPROT.BERNR = varbernr AND HDSCHAKTPROT.OMRADE = varomrade AND HDSCHAKTPROT.SID = vadsid NO-ERROR.
   IF AVAILABLE HDSCHAKTPROT THEN DO:
      varklid = HDSCHAKTPROT.KLID + 1.
   END.
   ELSE varklid = 1.
   
   CREATE HDSCHAKTPROT.
   ASSIGN
   HDSCHAKTPROT.BERNR = varbernr
   HDSCHAKTPROT.OMRADE = varomrade
   /*HDSCHAKTPROT.FRANTILL = varbenamning*/
   HDSCHAKTPROT.FRANTILL = "Ny Sträcka"
   HDSCHAKTPROT.SID = vadsid
   HDSCHAKTPROT.KLID = varklid
   HDSCHAKTPROT.OVRIGT = varovrigt.      
      
END PROCEDURE.*/

PROCEDURE manbortschakt_UI :
   DEFINE INPUT PARAMETER varbernr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER varomrade AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER vadsid AS INTEGER NO-UNDO.
   
   FOR EACH HDSCHSTOPP WHERE HDSCHSTOPP.BERNR = varbernr AND HDSCHSTOPP.OMRADE = varomrade AND HDSCHSTOPP.SID = vadsid EXCLUSIVE-LOCK:
      DELETE HDSCHSTOPP.            
   END.
   FOR EACH HDSCHAKTFOR WHERE HDSCHAKTFOR.BERNR = varbernr AND HDSCHAKTFOR.OMRADE = varomrade AND HDSCHAKTFOR.SID = vadsid EXCLUSIVE-LOCK:
      DELETE HDSCHAKTFOR.
   END.   
   FOR EACH HDSCHAKTKALKSPEC WHERE HDSCHAKTKALKSPEC.BERNR = varbernr AND HDSCHAKTKALKSPEC.OMRADE = varomrade AND HDSCHAKTKALKSPEC.SID = vadsid EXCLUSIVE-LOCK:
      DELETE HDSCHAKTKALKSPEC.
   END.
   FOR EACH HDSCHAKTPROT WHERE HDSCHAKTPROT.BERNR = varbernr AND HDSCHAKTPROT.OMRADE = varomrade AND HDSCHAKTPROT.SID = vadsid EXCLUSIVE-LOCK:
      DELETE HDSCHAKTPROT.
   END.
   FOR EACH HDSCHAKTPROTHAND WHERE HDSCHAKTPROTHAND.BERNR = varbernr AND HDSCHAKTPROTHAND.OMRADE = varomrade AND HDSCHAKTPROTHAND.SID = vadsid EXCLUSIVE-LOCK:
      DELETE HDSCHAKTPROTHAND.
   END.
   FOR EACH HDPROTKOPPBER WHERE HDPROTKOPPBER.BERNR = varbernr AND HDPROTKOPPBER.OMRADE = varomrade AND HDPROTKOPPBER.SID = vadsid EXCLUSIVE-LOCK:
      DELETE HDPROTKOPPBER.
   END.
   
   RUN HDKalkBortStart_UI (INPUT varbernr, INPUT varomrade, INPUT vadsid).
    
   
   RELEASE HDSCHAKTFOR NO-ERROR.
   RELEASE HDSCHAKTKALKSPEC NO-ERROR.
   RELEASE HDSCHAKTPROT NO-ERROR.
   RELEASE HDSCHAKTPROTHAND NO-ERROR.
   RELEASE HDPROTKOPPBER NO-ERROR.
   
END PROCEDURE.

/*ordning enligt admin*/
PROCEDURE manadminord_UI :
   DEFINE INPUT  PARAMETER varid AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER vartyp AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER adminord AS INTEGER NO-UNDO.
   
   IF vartyp = "y" THEN DO:
      FIND FIRST YTBELAGG WHERE YTBELAGG.ID = varid NO-LOCK NO-ERROR.
      IF AVAILABLE YTBELAGG THEN adminord = YTBELAGG.ORDNING.
      ELSE adminord = 0.
   END.
   ELSE IF vartyp = "f" THEN DO:
      FIND FIRST FORLAGG WHERE FORLAGG.ID = varid NO-LOCK NO-ERROR.
      IF AVAILABLE FORLAGG THEN adminord = FORLAGG.ORDNING.
      ELSE adminord = 0.
   END.
   ELSE IF vartyp = "fh" OR vartyp = "ph" THEN DO:
      FIND FIRST HDHANDELSE WHERE HDHANDELSE.ID = varid NO-LOCK NO-ERROR.
      IF AVAILABLE HDHANDELSE THEN adminord = HDHANDELSE.ORDNING.
      ELSE adminord = 0.
   END.   
END PROCEDURE.

PROCEDURE hamtaRubEnhet_UI :
   DEFINE INPUT  PARAMETER varid AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER vartyp AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER varrub AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER varenh AS CHARACTER NO-UNDO.
   
   IF vartyp = "y" THEN DO: 
      FIND FIRST YTBELAGG WHERE YTBELAGG.ID = varid NO-LOCK NO-ERROR.
      IF AVAILABLE YTBELAGG THEN DO:
         ASSIGN
         varrub = YTBELAGG.YTBELAGG
         varenh = "m".
      END.
      FIND FIRST HDKKOPP WHERE HDKKOPP.ID = YTBELAGG.ID AND HDKKOPP.TYP = "Y"  NO-LOCK NO-ERROR.
      IF AVAILABLE HDKKOPP THEN DO:  
         KLOID:
         FOR EACH KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID =  grundkloid NO-LOCK: 
            FIND LAST KALKYLLOPPOSTER WHERE KALKYLLOPPOSTER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND KALKYLLOPPOSTER.ARBKOD = HDKKOPP.ARBKOD AND KALKYLLOPPOSTER.LOPNR = HDKKOPP.LOPNR  USE-INDEX LOPNR NO-LOCK NO-ERROR.
            IF AVAILABLE KALKYLLOPPOSTER THEN DO:
               varenh = KALKYLLOPPOSTER.ENHET.
               LEAVE KLOID.  
            END.
         END.
    
      END.
   END.      
   ELSE IF vartyp = "f" THEN DO:
      FIND FIRST FORLAGG WHERE FORLAGG.ID = varid NO-LOCK NO-ERROR.
      IF AVAILABLE FORLAGG THEN DO:
         ASSIGN
         varrub = FORLAGG.BENAMNING
         varenh = "m".
      END.
   END.
   ELSE IF vartyp = "fh" OR vartyp = "ph" THEN DO:
      FIND FIRST HDHANDELSE WHERE HDHANDELSE.ID = varid NO-LOCK NO-ERROR.
      IF AVAILABLE HDHANDELSE THEN DO:
         ASSIGN
         varrub = HDHANDELSE.BENAMNING
         varenh = HDHANDELSE.ENHET.
      END.
   END.
END PROCEDURE.

{BERKALKBKID.I}

PROCEDURE HdKoppStart_UI :
   DEFINE INPUT PARAMETER bernrvar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER omrvar AS CHARACTER NO-UNDO.
   
   DEFINE VARIABLE felmedd AS CHARACTER NO-UNDO.
   DEFINE VARIABLE nyKalkNrvar AS INTEGER NO-UNDO.
   DEFINE VARIABLE ejstart AS LOGICAL NO-UNDO.
   /*KalkyliBerAnd.P Kalkspara_UI  kalknumskap_UI*/
    /*koppling och kalkyl skapas*/
  
   RUN KalkyleraiBeredningStart.p PERSISTENT SET LocalAppServerKalkberApps (INPUT Guru.Konstanter:globanv).
   RUN KalkyleraiBeredning_UI IN LocalAppServerKalkberApps (INPUT 0,INPUT  bernrvar,INPUT omrvar,OUTPUT felmedd,OUTPUT nyKalkNrvar, OUTPUT ejstart).
   IF VALID-HANDLE(LocalAppServerKalkberApps) THEN DO:
      RUN avsluta_UI IN LocalAppServerKalkberApps.
      DELETE PROCEDURE LocalAppServerKalkberApps.
      LocalAppServerKalkberApps = ?.
   END.    
   IF ejstart = TRUE THEN RETURN.
   FIND FIRST KALKHUV WHERE KALKHUV.KALKNR = nyKalkNrvar AND KALKHUV.OMRADE = omrvar NO-LOCK NO-ERROR.
   IF AVAILABLE KALKHUV THEN grundkloid = KALKHUV.KLOGID.
   EMPTY TEMP-TABLE KalkylimportTT NO-ERROR. 
   
   
END PROCEDURE.
PROCEDURE HdKoppImport_UI :
   
   DEFINE INPUT PARAMETER ovar AS INTEGER NO-UNDO.
   FOR EACH HDKKOPP WHERE HDKKOPP.ID = HDPROTKOPPBER.ID AND HDKKOPP.TYP = HDPROTKOPPBER.TYP NO-LOCK:
      CREATE KalkylimportTT.
      ASSIGN
      KalkylimportTT.TTRECID = RECID(KalkylimportTT) 
      KalkylimportTT.KALKNR = KALKHUV.KALKNR
      KalkylimportTT.OMRADE = KALKHUV.OMRADE
      KalkylimportTT.MATRIS = sumhdschtprot.KLID
      KalkylimportTT.BERNUM = sumhdschtprot.BERNUM
      KalkylimportTT.ARBKOD = HDKKOPP.ARBKOD 
      KalkylimportTT.LOPNR = HDKKOPP.LOPNR
      KalkylimportTT.SID = HDPROTKOPPBER.SID. 
      KalkylimportTT.ANTAL     = 1 * Antalkalkyl(ovar).
      /*FORS sätt matris efter byggnr Lena 20200224
      IF sumhdschtprot.BERID > 0 THEN KalkylimportTT.MATRIS = sumhdschtprot.BERID.*/
       
      IF HDKKOPP.TYP = "F" THEN DO:
         KalkylimportTT.ANTAL     =  HDKKOPP.ANTAL * Antalkalkyl(ovar).     
      END. 
      IF HDKKOPP.TYP = "PH" THEN DO:
         IF KalkylimportTT.ANTAL NE 0 THEN DO:
            KalkylimportTT.ANTAL =  KalkylimportTT.ANTAL * HDKKOPP.ANTAL.
         END.
      END.     
      KLOID:
      FOR EACH KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID =  grundkloid NO-LOCK: 
         FIND LAST KALKYLLOPPOSTER WHERE KALKYLLOPPOSTER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND KALKYLLOPPOSTER.ARBKOD = KalkylimportTT.ARBKOD AND KALKYLLOPPOSTER.LOPNR = KalkylimportTT.LOPNR  USE-INDEX LOPNR NO-LOCK NO-ERROR.
         IF AVAILABLE KALKYLLOPPOSTER THEN DO:
            IF KALKYLLOPPOSTER.ENHET = "KM" THEN KalkylimportTT.ANTAL = KalkylimportTT.ANTAL / 1000.
            LEAVE KLOID.  
         END.
      END.   
   END. 
END PROCEDURE.

PROCEDURE GrunVolymSkap_UI :
   DEFINE INPUT PARAMETER bernrvar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER omrvar AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER vad AS INTEGER NO-UNDO.
   
   FOR EACH  HDSCHAKTPROT WHERE HDSCHAKTPROT.BERNR = bernrvar AND HDSCHAKTPROT.OMRADE = omrvar AND  HDSCHAKTPROT.SID = vad NO-LOCK:
      DO TRANSACTION:
         FIND FIRST HDVOLYMBER WHERE HDVOLYMBER.bernr = HDSCHAKTPROT.BERNR   AND HDVOLYMBER.OMRADE = HDSCHAKTPROT.OMRADE  AND  HDVOLYMBER.SID =  HDSCHAKTPROT.SID AND  HDVOLYMBER.KLID =  HDSCHAKTPROT.KLID  EXCLUSIVE-LOCK NO-ERROR.
         IF NOT AVAILABLE HDVOLYMBER THEN DO:
            CREATE HDVOLYMBER.
         END. 
         BUFFER-COPY HDSCHAKTPROT TO HDVOLYMBER.
         HDVOLYMBER.STRACKA = HDSCHAKTPROT.FRANTILL. 
      END.
   END.
   RELEASE HDVOLYMBER NO-ERROR.    
END PROCEDURE.
PROCEDURE hamtsckalknr_UI :
   DEFINE INPUT PARAMETER bernrvar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER omrvar AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER KalkNrvar AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER grundkloid AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER grundkloidnamn AS CHARACTER NO-UNDO.
   ASSIGN 
   KalkNrvar = ?
   grundkloid = ?.
   FIND FIRST BERKALKOPPLA WHERE BERKALKOPPLA.BERNR = bernrvar AND BERKALKOPPLA.OMRADE = OmrVar NO-LOCK NO-ERROR.   
   IF AVAILABLE BERKALKOPPLA THEN DO:
      ASSIGN
      KalkNrvar = BERKALKOPPLA.KALKNR.
      FIND FIRST KALKHUV WHERE KALKHUV.KALKNR = KalkNrvar AND KALKHUV.OMRADE = omrvar NO-LOCK NO-ERROR.
      IF AVAILABLE KALKHUV THEN grundkloid = KALKHUV.KLOGID.
      FIND FIRST KALKYLKATALOG WHERE KALKYLKATALOG.KLOGID = KALKHUV.KLOGID NO-LOCK NO-ERROR.
      IF AVAILABLE KALKYLKATALOG THEN grundkloidnamn = KALKYLKATALOG.BENAMNING.
   END.   
   
END PROCEDURE.
PROCEDURE HamtaSchaktProfil_UI :
   
   RUN EXTRADATAHMTDS.p PERSISTENT SET ExtradataAppServerHandleSet.
   Guru.SharedVariable:ExtradataAppServerHandle = ExtradataAppServerHandleSet.
   ExtraDataDS = ?.
   ExtraVadHmt =  ' EXTRADATA.PROGRAM = "PROFIL"' + ' AND EXTRADATA.HUVUDCH = "SCHAKT" '.
   RUN laddaExtraDataDS_UI IN ExtradataAppServerHandleSet (INPUT ExtraVadHmt,OUTPUT DATASET-HANDLE ExtraDataDS BIND).
   IF VALID-HANDLE(ExtraDataDS) THEN DO:
      Guru.SharedVariable:ExtraDataDS = ExtraDataDS.
      Guru.Konstanter:ExtradataLaddTracking().
   END.
   RUN KollSchaktProfil_UI.
END PROCEDURE.
PROCEDURE KollSchaktProfil_UI :
   queryvar =  "FOR EACH " + Guru.SharedVariable:ExtradataDsbufftH:TABLE.
   Guru.Konstanter:CreateCustomQuery(Guru.SharedVariable:ExtradataDsbufftH,queryvar).
   Guru.GlobalaVariabler:CustomQueryDyn:GET-FIRST().
   ExtraFieldH = Guru.SharedVariable:ExtradataDsbufftH:BUFFER-FIELD("SOKINT").
   ExtraFielChdH = Guru.SharedVariable:ExtradataDsbufftH:BUFFER-FIELD("SOKCHAR").
   DO WHILE Guru.GlobalaVariabler:CustomQueryDyn:QUERY-OFF-END = FALSE:
      CREATE schackprofiltt.
      ASSIGN 
      schackprofiltt.ORDNING = Guru.SharedVariable:ExtradataDsbufftH:BUFFER-FIELD("HUVUDINT"):BUFFER-VALUE
      schackprofiltt.BB = ExtraFieldH:BUFFER-VALUE(1)
      schackprofiltt.TB = ExtraFieldH:BUFFER-VALUE(2)
      schackprofiltt.DJP = ExtraFieldH:BUFFER-VALUE(3)
      schackprofiltt.DJM = ExtraFieldH:BUFFER-VALUE(4).
      schackprofiltt.PACK   = (schackprofiltt.BB + schackprofiltt.TB) / 2 * 0.01 * schackprofiltt.DJP * 0.01.
      schackprofiltt.UTBYTM = (schackprofiltt.BB + schackprofiltt.TB) / 2 * 0.01 * schackprofiltt.DJM * 0.01.
      schackprofiltt.SPROFIL = ExtraFielChdH:BUFFER-VALUE(1).
      
      Guru.GlobalaVariabler:CustomQueryDyn:GET-NEXT().   
   END. 
 
END PROCEDURE.

PROCEDURE SchProfilHuvCreate_UI :
   ExtraFieldH = Guru.SharedVariable:ExtradataDsbufftH:BUFFER-FIELD("SOKINT").
   FOR EACH schackprofiltt WHERE NO-LOCK:
      Guru.SharedVariable:ExtradataDsbufftH:BUFFER-CREATE().
      ASSIGN 
      Guru.SharedVariable:ExtradataDsbufftH:BUFFER-FIELD("PROGRAM"):BUFFER-VALUE = "PROFIL"
      Guru.SharedVariable:ExtradataDsbufftH:BUFFER-FIELD("HUVUDCH"):BUFFER-VALUE = "SCHAKT"
      Guru.SharedVariable:ExtradataDsbufftH:BUFFER-FIELD("HUVUDINT"):BUFFER-VALUE = schackprofiltt.ORDNING
      ExtraFieldH:BUFFER-VALUE(1) = schackprofiltt.BB 
      ExtraFieldH:BUFFER-VALUE(2) = schackprofiltt.TB  
      ExtraFieldH:BUFFER-VALUE(3) = schackprofiltt.DJP 
      ExtraFieldH:BUFFER-VALUE(4) = schackprofiltt.DJM.
      IF schackprofiltt.ORDNING = 0 THEN ExtraFielChdH:BUFFER-VALUE(1) = "".
      ELSE ExtraFielChdH:BUFFER-VALUE(1) = STRING(schackprofiltt.BB) + "x" +  STRING(schackprofiltt.TB) + "x" +  STRING(schackprofiltt.DJP)  + "-" +  STRING(schackprofiltt.DJM) + "%".
      
   END.  
   Guru.Konstanter:ExtraDataDSSpar(). 
   Guru.Konstanter:AvslutaExtradata().
   DELETE OBJECT ExtraDataDS NO-ERROR.
   ExtraDataDS = ?.     
   DELETE OBJECT ExtradataAppServerHandleSet NO-ERROR.
   ExtradataAppServerHandleSet = ?.   
END PROCEDURE.

FUNCTION Antalkalkyl RETURNS DECIMAL
  ( INPUT ordvar AS INTEGER):
   IF ordvar = 1 THEN RETURN sumhdschtprot.DEC1.
   IF ordvar = 2 THEN RETURN sumhdschtprot.DEC2. 
   IF ordvar = 3 THEN RETURN sumhdschtprot.DEC3. 
   IF ordvar = 4 THEN RETURN sumhdschtprot.DEC4. 
   IF ordvar = 5 THEN RETURN sumhdschtprot.DEC5. 
   IF ordvar = 6 THEN RETURN sumhdschtprot.DEC6. 
   IF ordvar = 7 THEN RETURN sumhdschtprot.DEC7. 
   IF ordvar = 8 THEN RETURN sumhdschtprot.DEC8. 
   IF ordvar = 9 THEN RETURN sumhdschtprot.DEC9. 
   IF ordvar = 10 THEN RETURN sumhdschtprot.DEC10.
   IF ordvar = 11 THEN RETURN sumhdschtprot.DEC11.
   IF ordvar = 12 THEN RETURN sumhdschtprot.DEC12.
   IF ordvar = 13 THEN RETURN sumhdschtprot.DEC13.
   IF ordvar = 14 THEN RETURN sumhdschtprot.DEC14.
   IF ordvar = 15 THEN RETURN sumhdschtprot.DEC15.
   IF ordvar = 16 THEN RETURN sumhdschtprot.DEC16.
   IF ordvar = 17 THEN RETURN sumhdschtprot.DEC17.
   IF ordvar = 18 THEN RETURN sumhdschtprot.DEC18.
   IF ordvar = 19 THEN RETURN sumhdschtprot.DEC19.
   IF ordvar = 20 THEN RETURN sumhdschtprot.DEC20.
   IF ordvar = 21 THEN RETURN sumhdschtprot.DEC21.
   IF ordvar = 22 THEN RETURN sumhdschtprot.DEC22.
   IF ordvar = 23 THEN RETURN sumhdschtprot.DEC23.
   IF ordvar = 24 THEN RETURN sumhdschtprot.DEC24.
   IF ordvar = 25 THEN RETURN sumhdschtprot.DEC25.
   IF ordvar = 26 THEN RETURN sumhdschtprot.DEC26.
   IF ordvar = 27 THEN RETURN sumhdschtprot.DEC27.
   IF ordvar = 28 THEN RETURN sumhdschtprot.DEC28.
   IF ordvar = 29 THEN RETURN sumhdschtprot.DEC29.
   IF ordvar = 30 THEN RETURN sumhdschtprot.DEC30.
   IF ordvar = 31 THEN RETURN sumhdschtprot.DEC31.
   IF ordvar = 32 THEN RETURN sumhdschtprot.DEC32.
   IF ordvar = 33 THEN RETURN sumhdschtprot.DEC33.
   IF ordvar = 34 THEN RETURN sumhdschtprot.DEC34.
   IF ordvar = 35 THEN RETURN sumhdschtprot.DEC35.
   IF ordvar = 36 THEN RETURN sumhdschtprot.DEC36.
   IF ordvar = 37 THEN RETURN sumhdschtprot.DEC37.
   IF ordvar = 38 THEN RETURN sumhdschtprot.DEC38.
   IF ordvar = 39 THEN RETURN sumhdschtprot.DEC39.
   IF ordvar = 40 THEN RETURN sumhdschtprot.DEC40.

END FUNCTION.  