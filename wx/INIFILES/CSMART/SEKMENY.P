      /*SEKMENY.P*/
 FUNCTION brwval RETURNS LOGICAL
  ( /* parameter-definitions */ )  FORWARD.     
{ALLDEF.I}
{GLOBVAR2DEL1.I}
{SEKWID.I}
{SOKDEF.I}
{FORETEMP.I}
DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.
{EXTRADATA.I}
&Scoped-define NEW 
&Scoped-define SHARED SHARED
{TIDUTTTSHARED.I}
{ANVTEMPS.I}
DEFINE TEMP-TABLE exanvandartemp NO-UNDO LIKE anvandartemp.
{SEKXGURUTEMP.I}
DEFINE SHARED VARIABLE anvapph AS HANDLE NO-UNDO.    /* ANVDYNAPP.P */
DEFINE SHARED VARIABLE skrivut AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE musz AS LOGICAL NO-UNDO.
DEFINE VARIABLE valdanvniv AS INTEGER NO-UNDO.
DEFINE VARIABLE vemanvandare AS CHARACTER NO-UNDO.
DEFINE VARIABLE nivapph AS HANDLE NO-UNDO.               /* NIVPERAPP.P */
DEFINE VARIABLE helaut AS LOGICAL NO-UNDO.
DEFINE VARIABLE xlabelrec AS RECID NO-UNDO.
DEFINE VARIABLE xgururec AS RECID NO-UNDO. 
DEFINE VARIABLE xgururec2 AS RECID NO-UNDO.
DEFINE VARIABLE status-ok AS LOGICAL NO-UNDO.   
DEFINE VARIABLE rad AS INTEGER NO-UNDO.
DEFINE VARIABLE radvar AS INTEGER NO-UNDO.
DEFINE VARIABLE antal_valda AS INTEGER NO-UNDO.
DEFINE VARIABLE antal_raknare AS INTEGER NO-UNDO.
DEFINE VARIABLE xordn AS INTEGER NO-UNDO.
DEFINE VARIABLE xordning AS INTEGER NO-UNDO.
DEFINE VARIABLE menyut AS CHARACTER NO-UNDO.
DEFINE VARIABLE xlev AS INTEGER NO-UNDO.
DEFINE VARIABLE xhop AS CHARACTER NO-UNDO.  
DEFINE VARIABLE xhop2 AS CHARACTER NO-UNDO.
DEFINE VARIABLE xstor AS INTEGER NO-UNDO.
DEFINE VARIABLE xliten AS INTEGER NO-UNDO.   
DEFINE VARIABLE xmenyok AS LOGICAL NO-UNDO.
DEFINE VARIABLE tempniv AS INTEGER NO-UNDO.
DEFINE VARIABLE felmedd AS CHARACTER NO-UNDO.
DEFINE VARIABLE radspar AS INTEGER NO-UNDO.
DEFINE VARIABLE samvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE btnnovit AS HANDLE NO-UNDO.
DEFINE VARIABLE AnvspClasserStart AS HANDLE NO-UNDO. 

DEFINE BUFFER menyutbuff FOR xgurutemp.
framesizeh = framesizeextrah.
DEFINE VARIABLE anvtemph AS HANDLE NO-UNDO.
anvtemph = TEMP-TABLE anvandartemp:DEFAULT-BUFFER-HANDLE. 
DEFINE VARIABLE xguruh AS HANDLE NO-UNDO.
xguruh = TEMP-TABLE xgurutemp:DEFAULT-BUFFER-HANDLE. 
ON 'CHOOSE':U OF BTN_AVB PERSISTENT RUN avb_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF BRW_ANV PERSISTENT RUN and_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF BRW_MENY PERSISTENT RUN mdbrwmeny_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF BRW_MENY PERSISTENT RUN laddaanmark_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_BLOBADM PERSISTENT RUN blobadm_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_SUPPORT PERSISTENT RUN support_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_ADMD PERSISTENT RUN admdyn_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_KOPWTID PERSISTENT RUN flyttaprog_UI IN THIS-PROCEDURE.                           
ON 'CHOOSE':U OF BTN_BORT PERSISTENT RUN btnbort_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_BORT2 PERSISTENT RUN btnbort2_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_EJAUTO PERSISTENT RUN btnejauto_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_KOST PERSISTENT RUN btnkost_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_NY PERSISTENT RUN ny_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_NY2 PERSISTENT RUN btnny2_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_OBEORD PERSISTENT RUN btnobeord_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_UPP PERSISTENT RUN and_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_VISA PERSISTENT RUN visa_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_SKR-2 PERSISTENT RUN btnskr_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK':U OF FBTN_SKR-2 PERSISTENT RUN mmbtnskr_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK':U OF FBTN_SKRIV PERSISTENT RUN mmbtnskriv_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_SKRIV PERSISTENT RUN btnskriv_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_SKRTEST PERSISTENT RUN btnskrivtest_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK':U OF FBTN_SKRTEST PERSISTENT RUN btnskrivtest_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_VIALLA PERSISTENT RUN fbtnvialla_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_VPERS PERSISTENT RUN fbtnvpers_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF MBTN_ANV PERSISTENT RUN mbtnanv_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF MBTN_BEH PERSISTENT RUN mbtnbeh_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF MBTN_OVR PERSISTENT RUN mbtnovr_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF RAD_VAL PERSISTENT RUN vcradval_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF SEL_MENY PERSISTENT RUN xhop_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF TOG_LASTNIV PERSISTENT RUN avlevanm_UI IN THIS-PROCEDURE.
ON 'LEAVE':U OF EDD_AVLEV PERSISTENT RUN avlevanm_UI IN THIS-PROCEDURE.
ON 'ENTRY' OF anvkategorih PERSISTENT RUN entryanvkategorih_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF anvkategorih PERSISTENT RUN leaveanvkategorih_UI IN THIS-PROCEDURE.
ON 'ENTRY' OF faktrefh PERSISTENT RUN entryfaktrefh_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF faktrefh PERSISTENT RUN leavefaktrefh_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_LASTAANV PERSISTENT RUN btnlastaanv_UI IN THIS-PROCEDURE.
{OMSTARTAVGURUH.I}
RUN main_UI.
{musarrow.i}

PROCEDURE entryanvkategorih_UI :
   RUN selectfoc_UI.
END PROCEDURE.
PROCEDURE leaveanvkategorih_UI :
   IF AVAILABLE anvandartemp THEN.
   ELSE RETURN.
   IF anvkategorih:SCREEN-VALUE NE anvandartemp.KATEGORI THEN DO:
      ASSIGN
      anvandartemp.KATEGORI = anvkategorih:SCREEN-VALUE.
   END.  
   EMPTY TEMP-TABLE exanvandartemp NO-ERROR. 
   CREATE exanvandartemp.
   BUFFER-COPY anvandartemp TO exanvandartemp.
   RUN sparpanv_UI IN anvapph (INPUT TABLE exanvandartemp).
   EMPTY TEMP-TABLE exanvandartemp NO-ERROR.
    
END PROCEDURE.

PROCEDURE entryfaktrefh_UI :
   RUN selectfoc_UI.
END PROCEDURE.
PROCEDURE leavefaktrefh_UI :
   IF AVAILABLE anvandartemp THEN.
   ELSE RETURN. 
   IF faktrefh:SCREEN-VALUE NE anvandartemp.FAKTURAREF THEN DO:
      ASSIGN
      anvandartemp.FAKTURAREF = faktrefh:SCREEN-VALUE.
   END.   
   EMPTY TEMP-TABLE exanvandartemp NO-ERROR. 
   CREATE exanvandartemp.
   BUFFER-COPY anvandartemp TO exanvandartemp.
   RUN sparpanv_UI IN anvapph (INPUT TABLE exanvandartemp).
   EMPTY TEMP-TABLE exanvandartemp NO-ERROR.
END PROCEDURE.

PROCEDURE laddaanmark_UI :
   RUN selectfoc2_UI.
   IF NOT VALID-HANDLE(edataapph) THEN DO:
      IF Guru.Konstanter:appcon THEN DO:
         RUN EXTRADATAHMT.P PERSISTENT SET edataapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT.   
      END.
      ELSE DO:
         RUN EXTRADATAHMT.P PERSISTENT SET edataapph.   
      END.
   END.   
   IF AVAILABLE xgurutemp THEN.
   ELSE RETURN.  
   IF valdanvniv = 0 THEN DO:
      IF AVAILABLE xgurutemp THEN valdanvniv = xgurutemp.AV-LEVEL.          
   END.    
   ELSE DO:
      EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
      EMPTY TEMP-TABLE extradatatemp NO-ERROR.
      CREATE inextradatatemp.          
      ASSIGN
      inextradatatemp.PROGRAM = "AVLEVANM"                 
      inextradatatemp.HUVUDCH = ?              
      inextradatatemp.HUVUDINT =  valdanvniv. 
      inextradatatemp.SOKCHAR[1]  = EDD_AVLEV:SCREEN-VALUE.  
      inextradatatemp.SOKLOG[1]  = TOG_LASTNIV:CHECKED.    
      RUN extraspar_UI IN edataapph (INPUT TABLE inextradatatemp). 
      EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
      EMPTY TEMP-TABLE inextradatatemp NO-ERROR.
      IF AVAILABLE xgurutemp THEN valdanvniv = xgurutemp.AV-LEVEL.
   END.  
   IF AVAILABLE xgurutemp THEN valdanvniv = xgurutemp.AV-LEVEL.
   IF valdanvniv = 0 THEN RETURN. 
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR.
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "AVLEVANM"                 
   inextradatatemp.HUVUDCH = ?              
   inextradatatemp.HUVUDINT =  valdanvniv.   
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:
      EDD_AVLEV:SCREEN-VALUE = extradatatemp.SOKCHAR[1].
      TOG_LASTNIV:CHECKED = extradatatemp.SOKLOG[1].      
   END.
   ELSE DO:
      EDD_AVLEV:SCREEN-VALUE = "".
      TOG_LASTNIV:CHECKED = FALSE.
   END.   
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
   FILL-IN-ANMNIV:SCREEN-VALUE = "Anmärkning för nivå " + STRING(valdanvniv).   
END PROCEDURE.
PROCEDURE avlevanm_UI :
   RUN laddaanmark_UI.
END PROCEDURE.

PROCEDURE btnvit_UI :
   DEFINE INPUT PARAMETER btnh AS HANDLE NO-UNDO.
   DEFINE VARIABLE btnlabel AS CHARACTER NO-UNDO.
   IF btnnovit NE ? THEN DO:
      btnlabel = btnnovit:IMAGE.
      btnlabel = REPLACE(btnlabel,"_vit.gif",".gif"). 
      btnnovit:LOAD-IMAGE (btnlabel) NO-ERROR.
   END.
   btnlabel = btnh:IMAGE.
   btnlabel = REPLACE(btnlabel,".gif","_vit.gif"). 
   btnh:LOAD-IMAGE (btnlabel) NO-ERROR.
   btnnovit = btnh.   
END PROCEDURE.
PROCEDURE anvkoll_UI :
   DEFINE VARIABLE anvkoll AS CHARACTER NO-UNDO.
   anvkoll = "".
   RUN selectfoc_UI.
   IF NOT AVAILABLE anvandartemp THEN DO:
      FIND FIRST anvandartemp NO-LOCK NO-ERROR.
   END.
   IF AVAILABLE anvandartemp THEN DO:
      anvkoll = anvandartemp.ANVANDARE.
   END.
   RUN hamta_UI IN anvapph (INPUT TRUE,OUTPUT TABLE anvandartemp). 
   FIND FIRST anvandartemp WHERE anvandartemp.ANVANDARE = anvkoll NO-LOCK NO-ERROR.   
   IF AVAILABLE anvandartemp THEN DO:
      RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(anvandartemp)).              
   END.
   RUN openbdynspec_UI IN brwproc[1].
   RUN lastselectdyn_UI IN brwproc[1].     
END PROCEDURE.
PROCEDURE vcradval_UI :
   RUN frameval_UI (INPUT RAD_VAL:SCREEN-VALUE).
END PROCEDURE.
PROCEDURE mbtnovr_UI :
   RUN btnvit_UI (INPUT MBTN_OVR).
   RAD_VAL:SCREEN-VALUE = STRING(3).
   APPLY "VALUE-CHANGED" TO RAD_VAL.
END PROCEDURE.
PROCEDURE mbtnbeh_UI :
   RUN btnvit_UI (INPUT MBTN_BEH).
   RAD_VAL:SCREEN-VALUE = STRING(2).
   APPLY "VALUE-CHANGED" TO RAD_VAL.
END PROCEDURE.
PROCEDURE mbtnanv_UI :
   RUN btnvit_UI (INPUT MBTN_ANV).
   RAD_VAL:SCREEN-VALUE = STRING(1).
   APPLY "VALUE-CHANGED" TO RAD_VAL.
END PROCEDURE.


PROCEDURE fbtnvpers_UI :
   RUN selectfoc_UI.   
   IF NOT AVAILABLE anvandartemp THEN DO:
      MESSAGE "Du måste välja någon!" VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.
   IF anvandartemp.PERSONALKOD = "" THEN DO:
      MESSAGE "Ingen person är kopplad!" VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.
   ELSE DO:
      {AVBGOM2.I}
      RUN VPTVISA.W (INPUT anvandartemp.PERSONALKOD).
      {AVBFRAM2.I}      
   END.
END PROCEDURE.
PROCEDURE fbtnvialla_UI :
   skrivut = FALSE.   
   {AVBGOM2.I}
   RUN SEKVISANY.W.   
   {AVBFRAM2.I}
   {musarrow.i}
END PROCEDURE.
PROCEDURE btnskrivtest_UI :
   RUN SIDLANGD.W.
END PROCEDURE.
PROCEDURE btnskriv_UI :
   skrivut = TRUE.   
   RUN SKRIVVAL.W (INPUT FALSE).   
   IF musz = TRUE THEN DO:
      musz = FALSE.
      skrivut = FALSE.  
   END.                 
   IF skrivut = FALSE THEN skrivut = skrivut.
   ELSE DO:     
      {AVBGOM2.I}
      RUN VISANV.W (INPUT ?).
      {AVBFRAM2.I}
      {musarrow.i}
   END.           
   skrivut = FALSE.
END PROCEDURE.


PROCEDURE btnlastaanv_UI :
     IF NOT VALID-HANDLE(AnvspClasserStart) THEN DO:
      RUN Modules\Register\AnvSparrHelpStart.p PERSISTENT SET AnvspClasserStart.
   END.   
   
   RUN Usersparr_UI IN AnvspClasserStart .
  
END PROCEDURE.

PROCEDURE mmbtnskriv_UI :
   RUN SIDLANGD.W.
END PROCEDURE.
PROCEDURE mmbtnskr_UI :
   RUN SIDLANGD.W.
END PROCEDURE.
PROCEDURE btnskr_UI :
    {OMSTARTAVGURUH.I}
   MESSAGE "Ange JA för att skriva visad behörighetslista. Ange NEJ för att skriva ut hela listan" 
   VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO-CANCEL UPDATE val1 AS LOGICAL.
   CASE val1:
      WHEN TRUE THEN DO:
         helaut = FALSE.    
      END.
      WHEN FALSE THEN DO:
         helaut = TRUE.                                     
      END.
      OTHERWISE musz = TRUE. 
   END CASE. 
   IF musz = TRUE THEN DO:
      musz = FALSE.
      RETURN NO-APPLY.
   END.
   
   skrivut = TRUE.
   EMPTY TEMP-TABLE tidut NO-ERROR.    
   RUN SKRIVVAL.W (INPUT FALSE).
   IF musz = TRUE THEN DO:
      musz = FALSE.
      skrivut = FALSE.        
   END.
   ELSE DO:
     
      RUN ut_UI. 
   END.  
   skrivut = FALSE.
   {musarrow.i}
END PROCEDURE.
PROCEDURE btnobeord_UI :
   {OMSTARTAVGURUH.I}
   IF NOT Guru.Konstanter:appcon THEN DO:
      {APCONFEL.I}                     
   END.
   ELSE DO:
      IF Guru.Konstanter:appcon THEN DO:         
         {AVBGOM2.I}          
         IF Guru.Konstanter:globforetag = "sund" THEN DO:         
            samvar = "D:\DELAD\SERVER\PRO10S\SULESAMM.TXT".        
            RUN OBEORDLIST.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT (INPUT samvar).
            RUN VECKOVFLEX.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT (INPUT samvar).
            RUN LAKINTYGSU.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT (INPUT samvar).
         END.
         IF Guru.Konstanter:globforetag = "SNAT" THEN DO:         
            /*SNATBERGET*/
            samvar = "D:\DELAD\PRO10S\SULESAMM.TXT".               
            RUN OBEORDLIST.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT (INPUT samvar).
            RUN VECKOVFLEX.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT (INPUT samvar).
         END.
         IF Guru.Konstanter:globforetag = "MISV" THEN DO:
            samvar = "C:\elpool\delad\pro10s\MILESAMM.TXT".        
            IF Guru.Konstanter:AppSpringSet[1] = "misvstb" THEN samvar = "d:\elpool\delad\pro10s\MILESAMM.TXT".
            RUN OBEORDLIST.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT (INPUT samvar).
         END.
         {AVBFRAM2.I}
         {musarrow.i}
         MESSAGE "Klart!" VIEW-AS ALERT-BOX.
      END.
      ELSE DO:
         MESSAGE "Du har ingen appserver!" VIEW-AS ALERT-BOX.
      END.        
   END.
END PROCEDURE.
PROCEDURE btnny2_UI :
   {OMSTARTAVGURUH.I}
   IF INTEGER(FILL-IN_AV-LEVEL-NY:SCREEN-VALUE) = 999999 THEN DO:
      MESSAGE "Ogiltig nivå!"
      VIEW-AS ALERT-BOX.
      RETURN.
   END.   
   
   RUN nivcheck_UI IN nivapph (INPUT INTEGER(FILL-IN_AV-LEVEL-FRAN:SCREEN-VALUE), INPUT INTEGER(FILL-IN_AV-LEVEL-NY:SCREEN-VALUE), OUTPUT felmedd).
   IF felmedd = "" THEN DO:
      
      RUN ny_UI IN nivapph (INPUT INTEGER(FILL-IN_AV-LEVEL-FRAN:SCREEN-VALUE), INPUT INTEGER(FILL-IN_AV-LEVEL-NY:SCREEN-VALUE), OUTPUT TABLE xgurutemp).
      RUN xhop_UI.             
      FIND FIRST xgurutemp WHERE xgurutemp.MENYVART = xhop AND
      xgurutemp.AV-LEVEL = INTEGER(FILL-IN_AV-LEVEL-NY:SCREEN-VALUE) USE-INDEX ORDNING NO-LOCK NO-ERROR.
      RUN setlastrowid_UI IN brwproc[2] (INPUT ROWID(xgurutemp)).
      RUN lastselectdyn_UI IN brwproc[2].            
   END.        
   ELSE MESSAGE felmedd VIEW-AS ALERT-BOX.
   musz = FALSE.
   {musarrow.i}
END PROCEDURE.
PROCEDURE ny_UI :
   {OMSTARTAVGURUH.I}   
   vemanvandare = "".
   RUN ANDANV.W (INPUT 1,INPUT-OUTPUT vemanvandare).
   FIND FIRST anvandartemp WHERE anvandartemp.ANVANDARE = vemanvandare
   NO-LOCK NO-ERROR. 
   IF AVAILABLE anvandartemp THEN DELETE anvandartemp.   
   {musarrow.i} 
   IF musz = FALSE THEN DO:
      RUN hamtaen_UI IN anvapph (INPUT vemanvandare,INPUT TRUE,OUTPUT TABLE anvandartemp APPEND).   
      FIND FIRST anvandartemp WHERE anvandartemp.ANVANDARE = vemanvandare
      NO-LOCK NO-ERROR.   
      IF AVAILABLE anvandartemp THEN DO:
         RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(anvandartemp)).              
         RUN openbdynspec_UI IN brwproc[1].
         RUN lastselectdyn_UI IN brwproc[1].     
         ASSIGN
         BRW_ANV:HIDDEN = FALSE
         BTN_BORT:HIDDEN = FALSE 
         BTN_UPP:HIDDEN = FALSE
         BTN_VISA:HIDDEN = FALSE
         FILL-IN_SNAMN:HIDDEN = FALSE
         FILL-IN_SANVANDARE:HIDDEN = FALSE
         FBTN_VIALLA:HIDDEN = FALSE 
         FBTN_SKRIV:HIDDEN = FALSE.
      END.
   END.
   musz = FALSE.    
END PROCEDURE.

PROCEDURE btnkost_UI :
   {OMSTARTAVGURUH.I}
   IF NOT Guru.Konstanter:appcon THEN DO:
      {APCONFEL.I}                     
   END.
   ELSE DO:
      {SOKSTART.I}
      ASSIGN
      soktemp.SOKVAL = 77.
      {SOKANROP.I}      
      {SOKSTART.I}
      IF soktemp.SOKCHAR[1]  = "UTBI" THEN musz = musz. 
      ELSE DO:
         IF Guru.Konstanter:appcon THEN DO:            
            {AVBGOM2.I}           
            IF Guru.Konstanter:globforetag = "LULE" THEN DO:            
               RUN LULEIN.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT.         
            END.
            IF Guru.Konstanter:globforetag = "GKAL" THEN DO:           
               RUN GKALINDEVIS.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT.                     
            END.
             
            IF Guru.Konstanter:globforetag = "SUND"  OR Guru.Konstanter:globforetag = "SNAT" THEN DO:            
               RUN SUNDIN.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT.                  
            END.
            IF Guru.Konstanter:globforetag = "UMEA" THEN DO:            
               RUN UMEAIN.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT.                  
               RUN UMEAMTRLIN.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
            END.
            {AVBFRAM2.I}
            {musarrow.i}
            MESSAGE "Klart!" VIEW-AS ALERT-BOX.
         END.
         ELSE DO:
            MESSAGE "Du har ingen appserver!" VIEW-AS ALERT-BOX.
         END.
      END.      
   END.
END PROCEDURE.
PROCEDURE btnejauto_UI :
   DEFINE VARIABLE status-mus2 AS LOGICAL NO-UNDO.
   {OMSTARTAVGURUH.I}   
   MESSAGE "Vill du köra uppföljningen ?"
   VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO TITLE "Uppföljning"
   UPDATE answer AS LOGICAL.
   IF answer THEN DO TRANSACTION:      
      status-mus2 = SESSION:SET-WAIT-STATE("GENERAL").
      IF Guru.Konstanter:appcon THEN DO:                                                    
         RUN SUMDAG.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT.
      END.
      ELSE DO:
         RUN SUMDAG.P.
      END.      
   END.
   
   {musarrow.i}
END PROCEDURE.
PROCEDURE selectfoc_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(anvtemph) THEN DO:
      anvtemph = TEMP-TABLE anvandartemp:DEFAULT-BUFFER-HANDLE.
   END.
   RUN selectrowid_UI IN brwproc[1] (OUTPUT brwrowid).
   RUN selectrecid_UI IN brwproc[1] (OUTPUT brwrecid).
   FIND FIRST anvandartemp WHERE ROWID(anvandartemp) = brwrowid NO-LOCK NO-ERROR.   
END PROCEDURE.
PROCEDURE selectfoc2_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(xguruh) THEN DO:
      xguruh = TEMP-TABLE xgurutemp:DEFAULT-BUFFER-HANDLE.
   END.
   RUN selectrowid_UI IN brwproc[2] (OUTPUT brwrowid).
   RUN selectrecid_UI IN brwproc[2] (OUTPUT brwrecid).
   FIND FIRST xgurutemp WHERE ROWID(xgurutemp) = brwrowid NO-LOCK NO-ERROR.   
END PROCEDURE.
PROCEDURE btnbort2_UI :
   DEFINE VARIABLE val AS LOGICAL NO-UNDO.
   DEFINE VARIABLE npniv AS INTEGER NO-UNDO.
   DEFINE VARIABLE menyvalvar AS CHARACTER NO-UNDO.
   RUN selectfoc2_UI.
   {OMSTARTAVGURUH.I}   
   IF AVAILABLE xgurutemp THEN DO:
      tempniv = xgurutemp.AV-LEVEL.
      IF tempniv = 1 THEN DO:
         MESSAGE "Det går inte att ta bort första nivån." VIEW-AS ALERT-BOX.
      END.
      ELSE DO:    
         MESSAGE "Vill du ta bort nivå nummer" tempniv "?"
         VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE val.
      END.
      IF val = TRUE THEN DO:
         
         ASSIGN
         menyvalvar = xgurutemp.MENYVART
         npniv = xgurutemp.AV-LEVEL.
         FIND FIRST xgurutemp WHERE xgurutemp.MENYVART = menyvalvar AND xgurutemp.AV-LEVEL > tempniv USE-INDEX MENYVART NO-LOCK NO-ERROR.
         IF NOT AVAILABLE xgurutemp THEN DO:
            FIND FIRST xgurutemp WHERE ROWID(xgurutemp) = xguruh:ROWID NO-LOCK NO-ERROR.
            FIND LAST xgurutemp WHERE xgurutemp.MENYVART = menyvalvar AND xgurutemp.AV-LEVEL < tempniv USE-INDEX MENYVART NO-LOCK NO-ERROR. 
         END.         
         RUN setlastrowid_UI IN brwproc[2] (INPUT ROWID(xgurutemp)).                              
         RUN bort_UI IN nivapph
         (OUTPUT musz,INPUT tempniv).
         {musarrow.i}
         IF musz = TRUE THEN DO:
            MESSAGE "Det finns användare med denna nivå." VIEW-AS ALERT-BOX.
            musz = FALSE.
         END.
         ELSE DO:
            OPEN QUERY xguruq FOR EACH xgurutemp WHERE xgurutemp.AV-LEVEL = tempniv
            USE-INDEX AV-LEVEL NO-LOCK.
            DO TRANSACTION:
               GET FIRST xguruq NO-LOCK.
               DO WHILE AVAILABLE(xgurutemp):
                  DELETE xgurutemp.
                  GET NEXT xguruq NO-LOCK.
               END.
            END.            
         END.
         RUN openbdynspec_UI IN brwproc[2].
         RUN lastselectdyn_UI IN brwproc[2].
      END.   
   END.
   musz = FALSE.
END PROCEDURE.
PROCEDURE btnbort_UI :
   {OMSTARTAVGURUH.I}
   RUN selectfoc_UI.   
   IF Guru.Konstanter:globanv = anvandartemp.ANVANDARE THEN DO:
      MESSAGE "Du kan ej ta bort dig själv." VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.
   vemanvandare = anvandartemp.ANVANDARE.
   
   &Scoped-define FRAME-NAME FRAME-BARABREDD
   
   RUN BORTANV.W (INPUT anvandartemp.ANVANDARE).
   
   &Scoped-define FRAME-NAME FRAME-ANV
   IF musz = FALSE THEN DO:
      FIND FIRST anvandartemp WHERE anvandartemp.ANVANDARE = vemanvandare NO-ERROR.
      DELETE anvandartemp.
      RUN selnextprevrow_UI IN brwproc[1].
      RUN refreshbrw_UI IN brwproc[1].
      RUN lastselectdyn_UI IN brwproc[1].                   
   END.
   {musarrow.i}
   musz = FALSE.
END PROCEDURE.

PROCEDURE admdyn_UI :
   {AMERICANEUROPEAN.I}
   IF CONNECTED(LDBNAME(1)) THEN DO:
      RUN ADMDYNBROWSE.W.
      
   END.
   {EUROPEANAMERICAN.I}
END PROCEDURE.
PROCEDURE flyttaprog_UI :
    {AMERICANEUROPEAN.I}
    MESSAGE "Måste köras utan appserver!"
    VIEW-AS ALERT-BOX.
   IF CONNECTED(LDBNAME(1)) THEN DO:
      {VERALIAS.I}
       RUN INLOGRAPURL.P  (INPUT "",INPUT "",INPUT ?).
   END.
   {EUROPEANAMERICAN.I}
END PROCEDURE.

PROCEDURE support_UI :
   {AMERICANEUROPEAN.I}
   {AVBGOM2.I}
   RUN SUPPORT.W.
   {AVBFRAM2.I} 
   {EUROPEANAMERICAN.I}
END PROCEDURE.
PROCEDURE blobadm_UI :
   {AMERICANEUROPEAN.I}
   {AVBGOM2.I}
   RUN BLOBADMIN.W.
   {AVBFRAM2.I} 
   {EUROPEANAMERICAN.I}
END PROCEDURE.
PROCEDURE mdbrwmeny_UI :
   {OMSTARTAVGURUH.I}
   radvar = BRW_MENY:CURRENT-RESULT-ROW.
   RUN selectfoc2_UI.   
   IF xgurutemp.AV-LEVEL = 1 AND xgurutemp.MENY = "Sekretess" THEN DO:
      MESSAGE "Det går inte att ändra på " xgurutemp.MENY " för nivå " xgurutemp.AV-LEVEL "!" VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.
   IF TOG_LASTNIV:CHECKED = TRUE THEN DO:
      MESSAGE "Det går inte att ändra på en låst nivå!" VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.    
   RUN andra_UI IN nivapph 
   (INPUT xgurutemp.AV-LEVEL,INPUT xgurutemp.MENYVART,INPUT xgurutemp.ORDNING).
   IF xgurutemp.MENYOK = FALSE THEN ASSIGN xgurutemp.MENYOK = TRUE.
   ELSE IF xgurutemp.MENYOK = TRUE THEN ASSIGN xgurutemp.MENYOK = FALSE.      
   ASSIGN 
   xordning = xgurutemp.ORDNING
   xhop = xgurutemp.MENYVART
   xstor = xgurutemp.STORKOPPLING
   xliten = xgurutemp.KOPPLING   
   xmenyok = xgurutemp.MENYOK
   xlev = xgurutemp.AV-LEVEL.                     
   
   /*ÄNDRAR ALLA SOM HAR STOR KOPPLING*/
   IF xgurutemp.MENYVART = "GURU" AND xgurutemp.MENYOK = FALSE THEN DO:                
      OPEN QUERY xguruq FOR EACH xgurutemp WHERE xgurutemp.STORKOPPLING = xstor AND 
      xgurutemp.AV-LEVEL = xlev
      USE-INDEX STORKOPPLING NO-LOCK.          
      GET FIRST xguruq.
      DO WHILE AVAILABLE(xgurutemp):
         ASSIGN xgurutemp.MENYOK = FALSE.
         GET NEXT xguruq.                                  
      END. 
   END.     
   FIND FIRST xgurutemp WHERE xgurutemp.AV-LEVEL = xlev AND
   xgurutemp.MENYVART = xhop AND xgurutemp.ORDNING = xordning
   NO-ERROR.
   /*FÖRHINDRAR ATT SISTA UNDERMENY ÄNDRA PÅ HÖGRE NIVÅER
   EX NEJ PÅ ÄNDRA BEREDSKAP SKALL EJ SLÄCK ÄNDRING OCH TILLÄGG MEN SLÄCK ÄNDRING OCH TILLÄGG
   SKALL ÄNDRA PÅ ÄNDRA BEREDSKAP*/
   IF xgurutemp.MENYVART = "TADM" THEN DO:
      xhop = xhop.
   END.
   ELSE IF xgurutemp.MENYVART = "TIDA" THEN DO: 
      xhop = xhop.
   END.    
   ELSE IF xgurutemp.MENYVART = "BULA" THEN DO: 
      xhop = xhop.
   END.
   ELSE IF xgurutemp.MENYVART = "BERE" THEN DO: 
      xhop = xhop.
   END.         
   ELSE DO:
      /*ÄNDRAR PÅ ALLA SOM HAR LITEN KOPPLING*/      
      IF xliten NE 0 THEN DO:
         OPEN QUERY xguruq FOR EACH xgurutemp WHERE xgurutemp.KOPPLING = xliten AND 
         xgurutemp.AV-LEVEL = xlev 
         USE-INDEX KOPPLING NO-LOCK.
         DO TRANSACTION:
            GET FIRST xguruq EXCLUSIVE-LOCK.
            DO WHILE AVAILABLE(xgurutemp):
               ASSIGN xgurutemp.MENYOK = xmenyok.
               GET NEXT xguruq EXCLUSIVE-LOCK.                           
            END.
         END.
      END.                
   END. 
   
   FIND FIRST xgurutemp WHERE xgurutemp.AV-LEVEL = xlev AND
   xgurutemp.MENYVART = xhop AND xgurutemp.ORDNING = xordning
   NO-ERROR.
   RUN setlastrowid_UI IN brwproc[2] (INPUT ROWID(xgurutemp)).
   RUN openbdynspec_UI IN brwproc[2].
   RUN lastselectdyn_UI IN brwproc[2].  
   {musarrow.i}
END PROCEDURE.
PROCEDURE and_UI :
   RUN selectfoc_UI.   
   IF NOT AVAILABLE(anvandartemp) THEN RETURN.
   vemanvandare = anvandartemp.ANVANDARE.
   IF vemanvandare = "ELPLO" THEN RETURN.
   {OMSTARTAVGURUH.I}
   RUN ANDANV.W (INPUT 1,INPUT-OUTPUT vemanvandare).   
   DELETE anvandartemp.
   RUN hamtaen_UI IN anvapph (INPUT vemanvandare,INPUT TRUE,OUTPUT TABLE anvandartemp APPEND).   
   FIND FIRST anvandartemp WHERE anvandartemp.ANVANDARE = vemanvandare NO-LOCK NO-ERROR.   
   IF AVAILABLE anvandartemp THEN DO:
      RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(anvandartemp)).              
      RUN openbdynspec_UI IN brwproc[1].
      RUN lastselectdyn_UI IN brwproc[1].     
   END.
   {musarrow.i}
   musz = FALSE.
END PROCEDURE.
PROCEDURE main_UI :
   c-win:TITLE = "Sekretess" + "-" + "Systemsupport 090/184540    elpool.ume@elpool.se  " + foretemp.ATRHOME.
   {ALLSTARTDYN.I}   
   RUN VISMEDDU.W.
   
   IF Guru.Konstanter:globanv = CHR(69) + CHR(76) + CHR(80) + CHR(65) + CHR(79) THEN.
   ELSE DO:
      faktrefh:VISIBLE = FALSE.   
   END.   
   FIND FIRST seksel NO-ERROR.
   IF NOT AVAILABLE seksel THEN RETURN.          
END PROCEDURE.
PROCEDURE PlaceraKnapp_UI :
   FBTN_SKRIV:HIDDEN = TRUE. 
   Guru.GlobalaVariabler:StartRadForKnappar = BRW_ANV:ROW + 3.
   
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_VIALLA).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_VPERS).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_SKRIV).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_SKRTEST).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_LASTAANV).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_SKR-2).
    
END PROCEDURE.
PROCEDURE allstartbrw_UI :
   IF NOT VALID-HANDLE(brwproc[1]) THEN DO:        
      MBTN_ANV:LOAD-IMAGE("BILDER\xbtn_anvendare.gif")  NO-ERROR.
      MBTN_BEH:LOAD-IMAGE("BILDER\xbtn_behorighet.gif")  NO-ERROR.
      MBTN_OVR:LOAD-IMAGE("BILDER\xbtn_ovrigt.gif")  NO-ERROR.      

      RUN btnvit_UI (INPUT MBTN_ANV).
      RUN DYNBRW.P PERSISTENT SET brwproc[1] (INPUT BRW_ANV).
      RUN settitlenum_UI IN brwproc[1] (INPUT TRUE).
      IF NOT VALID-HANDLE(brwproc[2]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[2] (INPUT BRW_MENY).
      IF Guru.Konstanter:appcon THEN DO:
         IF NOT VALID-HANDLE(edataapph) THEN   RUN EXTRADATAHMT.P PERSISTENT SET edataapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
         IF NOT VALID-HANDLE(anvapph) THEN DO:
            RUN ANVDYNAPP.P PERSISTENT SET anvapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
            RUN hamta_UI IN anvapph (INPUT TRUE,OUTPUT TABLE anvandartemp). 
         END.
         IF NOT VALID-HANDLE(nivapph) THEN DO:
            RUN NIVPERAPP.P PERSISTENT SET nivapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
            RUN sekmeny_UI IN nivapph (OUTPUT TABLE xgurutemp,OUTPUT TABLE seksel).
         END.
      END.
      ELSE DO:
         IF NOT VALID-HANDLE(edataapph) THEN  RUN EXTRADATAHMT.P PERSISTENT SET edataapph. 
         IF NOT VALID-HANDLE(anvapph) THEN DO:
            RUN ANVDYNAPP.P PERSISTENT SET anvapph.
            RUN hamta_UI IN anvapph (INPUT TRUE,OUTPUT TABLE anvandartemp). 
         END.
         IF NOT VALID-HANDLE(nivapph) THEN DO:
            RUN NIVPERAPP.P PERSISTENT SET nivapph.
            RUN sekmeny_UI IN nivapph (OUTPUT TABLE xgurutemp,OUTPUT TABLE seksel).
         END.
      END.
      RUN setpdatacolsort_UI IN brwproc[2] (INPUT "AV-LEVEL", INPUT "MENY BY MENYOK ").
      RUN setpdatacolsort_UI IN brwproc[2] (INPUT "MENY", INPUT "AV-LEVEL BY MENYOK ").
      RUN setpdatacolsort_UI IN brwproc[2] (INPUT "MENYOK", INPUT "MENY BY AV-LEVEL ").
      SEL_MENY:LIST-ITEMS = "".
      FOR EACH seksel: 
         status-ok = SEL_MENY:ADD-LAST(seksel.MENY).       
      END.     
      SEL_MENY:SCREEN-VALUE = "Huvudmeny".
      IF Guru.Konstanter:globanv = CHR(69) + CHR(76) + CHR(80) + CHR(65) + CHR(79)  THEN BTN_BLOBADM:HIDDEN = FALSE.
      ELSE BTN_BLOBADM:HIDDEN = TRUE.
      IF Guru.Konstanter:globforetag = "SUND"  OR Guru.Konstanter:globforetag = "SNAT" OR Guru.Konstanter:globforetag = "elpa" THEN BTN_OBEORD:HIDDEN = FALSE.
      ELSE BTN_OBEORD:HIDDEN = TRUE.
      IF Guru.Konstanter:varforetypval[2] = 0 OR Guru.Konstanter:varforetypval[13] = 1 OR Guru.Konstanter:globanv = CHR(69) + CHR(76) + CHR(80) + CHR(65) + CHR(79) OR Guru.Konstanter:globforetag = "UMEA" THEN musz = musz.
      ELSE MBTN_OVR:HIDDEN  = TRUE. 
      IF Guru.Konstanter:globanv = CHR(69) + CHR(76) + CHR(80) + CHR(65) + CHR(79)  THEN. 
      ELSE DO:
         ASSIGN
         BTN_ADMD:HIDDEN  = TRUE
         BTN_SUPPORT:HIDDEN  = TRUE
         BTN_BLOBADM:HIDDEN  = TRUE.
      END.
      RUN addfillin_UI IN brwproc[1] (INPUT FILL-IN_SNAMN, INPUT "AV-NAMN").
      RUN addfillin_UI IN brwproc[1] (INPUT FILL-IN_SANVANDARE, INPUT "ANVANDARE").
      RUN openbdynspec_UI IN brwproc[1].
      RUN openbdynspec_UI IN brwproc[2].
      FIND FIRST anvandartemp NO-LOCK NO-ERROR.  
      IF NOT AVAILABLE anvandartemp THEN DO:
         ASSIGN
         BTN_BORT:HIDDEN = TRUE 
         BTN_UPP:HIDDEN = TRUE 
         BTN_VISA:HIDDEN = TRUE 
         FILL-IN_SNAMN:HIDDEN = TRUE 
         FILL-IN_SANVANDARE:HIDDEN = TRUE 
         FBTN_VIALLA:HIDDEN = TRUE 
         FBTN_SKRIV:HIDDEN = TRUE.
      END.   
      RAD_VAL:HIDDEN  = TRUE.
      RAD_VAL:SCREEN-VALUE = STRING(1).
      APPLY "ENTRY" TO SEL_MENY.
      RUN xhop_UI.
      Guru.GlobalaVariabler:collefth = ?.
      FBTN_VIALLA:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_VIALLA:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
      FBTN_VPERS:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_VPERS:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
      FBTN_SKRIV:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_SKRIV:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
      FBTN_SKRTEST:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_SKRTEST:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).       
      BTN_LASTAANV:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = BTN_LASTAANV:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
      Guru.GlobalaVariabler:collefth = ?.
      FBTN_SKR-2:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_SKR-2:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).       
      Guru.GlobalaVariabler:collefth =  MBTN_ANV:HANDLE.
      Guru.GlobalaVariabler:colrighth = MBTN_BEH:HANDLE.           
      RUN buttcol_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
      Guru.GlobalaVariabler:colrighth = MBTN_OVR:HANDLE.           
      RUN buttcol_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.
END PROCEDURE.
PROCEDURE frameval_UI :
   DEFINE INPUT PARAMETER radval AS INTEGER NO-UNDO.
   ASSIGN
   FBTN_SKR-2:HIDDEN  = TRUE
   FBTN_VIALLA:HIDDEN  = TRUE
   FBTN_SKRTEST:HIDDEN  = TRUE
   FBTN_SKRIV:HIDDEN  = TRUE
   FBTN_VPERS:HIDDEN  = TRUE
   BTN_LASTAANV:HIDDEN  = TRUE
   
   FRAME-ANV:VISIBLE = FALSE
   FRAME-BEH:VISIBLE = FALSE
   FRAME-OVR:VISIBLE = FALSE.
   IF radval = 1 THEN DO:           
      ASSIGN
      FILL-IN_TEXTANV:SCREEN-VALUE = "Ändra eller registrera användare." 
      FBTN_VIALLA:HIDDEN  = FALSE
      FBTN_SKRTEST:HIDDEN  = FALSE
      FBTN_SKRIV:HIDDEN  = FALSE
      FBTN_VPERS:HIDDEN  = FALSE
      BTN_LASTAANV:HIDDEN  = FALSE
      FRAME-ANV:VISIBLE = TRUE.      
   END.
   ELSE IF radval = 2 THEN DO:
      ASSIGN
      FBTN_SKR-2:HIDDEN  = FALSE
      FILL-IN_TEXTBEH:SCREEN-VALUE = 
         "Ändra behörighet genom att ~"dubbel-klicka~" i behörighetslistan."
      FRAME-BEH:VISIBLE = TRUE.      
   END.
   ELSE IF radval = 3 THEN DO:
      IF Guru.Konstanter:globforetag = "UMEA" THEN DO:
         BTN_EJAUTO:HIDDEN = TRUE.
         ASSIGN
         FILL-IN_TEXTOVR:SCREEN-VALUE = "Inläsning av data från XAL.".
         BTN_KOST:LABEL = "Manuell inläsning från XAL". 
      END.
      ELSE IF Guru.Konstanter:varforetypval[2] = 0 AND Guru.Konstanter:varforetypval[13] = 1 THEN DO:
         ASSIGN
         FILL-IN_TEXTOVR:SCREEN-VALUE = "Styrning av tidautomatkörning samt kostnadsregistreringar.".
      END.   
      ELSE IF Guru.Konstanter:varforetypval[2] = 0 THEN DO:
         BTN_KOST:HIDDEN = TRUE.
         ASSIGN
         FILL-IN_TEXTOVR:SCREEN-VALUE = "Styrning av tidautomatkörning.".
      END.
      ELSE IF Guru.Konstanter:varforetypval[13] = 1 THEN DO:
         BTN_EJAUTO:HIDDEN = TRUE.
         ASSIGN
         FILL-IN_TEXTOVR:SCREEN-VALUE = "Inläsning av kostnadsregistreringar.".
      END.   
      
      FRAME-OVR:VISIBLE = TRUE. 
   END.
   RUN PlaceraKnapp_UI.
END PROCEDURE.

PROCEDURE ut_UI :
   EMPTY TEMP-TABLE tidut NO-ERROR.    
   RUN utskriv_UI IN nivapph 
   (INPUT xhop,INPUT SEL_MENY,INPUT helaut,OUTPUT TABLE tidut).      
   RUN EKLOGS.P. 
END PROCEDURE.

PROCEDURE avb_UI :
   MESSAGE "Du avslutar nu " + SUBSTRING(foretemp.VERSION,1,10)
   VIEW-AS ALERT-BOX QUESTION BUTTONS OK-CANCEL UPDATE val AS LOGICAL.   
   IF val = FALSE THEN RETURN NO-APPLY.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph NO-ERROR. 
   edataapph = ?.
   RUN avb_UI IN huvprogh.   
END PROCEDURE.

PROCEDURE utskap_UI :
   DEFINE VARIABLE i AS INTEGER NO-UNDO.
   REPEAT i = 1 TO 145:
      CREATE tidut.
      ASSIGN tidut.UT = "Detta är rad nr " + STRING(i).
      IF i = 1 THEN tidut.UT = tidut.UT + " Inställningar liggande: " + STRING(Guru.GlobalaVariabler:globsidl) + " stående " + STRING(Guru.GlobalaVariabler:globsids).
      IF i = 2 THEN tidut.UT = tidut.UT + " OBS! Du skall få 3 rader mindre på varje sida än vad du har angivit!".
   END.   
END PROCEDURE.

PROCEDURE visa_UI :
   RUN selectfoc_UI.   
   IF NOT AVAILABLE(anvandartemp) THEN RETURN.
   vemanvandare = anvandartemp.ANVANDARE.
   {AVBGOM2.I}
   RUN VISANV.W (INPUT vemanvandare).
   {AVBFRAM2.I}      
   {musarrow.i}        
   musz = FALSE.
END PROCEDURE.
PROCEDURE xhop_UI :
   {OMSTARTAVGURUH.I}   
   xhop = menyhopp(SEL_MENY:SCREEN-VALUE).   
   IF xhop = ? THEN RUN setcolsortvar_UI IN brwproc[2] (INPUT "xgurutemp.MENYVART = ?").
   ELSE RUN setcolsortvar_UI IN brwproc[2] (INPUT "xgurutemp.MENYVART = '" + xhop + "'").   
   RUN openbdynspec_UI IN brwproc[2].
   {musarrow.i}
END PROCEDURE.
   
PROCEDURE borthand_UI : 
   xguruh:EMPTY-TEMP-TABLE() NO-ERROR.    
   IF VALID-HANDLE(xguruh) THEN   DELETE OBJECT xguruh NO-ERROR.
   xguruh = ?.
   anvtemph:EMPTY-TEMP-TABLE() NO-ERROR.    
   IF VALID-HANDLE(anvtemph) THEN   DELETE OBJECT anvtemph NO-ERROR.
   anvtemph = ?.
   {BORTBRWPROC.I}
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph NO-ERROR.  
   edataapph = ?. 
   IF VALID-HANDLE(nivapph) THEN DELETE PROCEDURE nivapph.
   IF VALID-HANDLE(anvapph) THEN DO:
      RUN avs_UI IN anvapph.
      DELETE PROCEDURE anvapph NO-ERROR.
   END.   
END PROCEDURE.  

