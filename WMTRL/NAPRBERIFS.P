/*NAPRBERIFS.P UPPDATERAR PRISER FÖR TABELLER SOM ANVÄNDS I BEREDNING*/

DEFINE VARIABLE leverant LIKE LEVERANTOR.LEVKOD NO-UNDO.
DEFINE VARIABLE musz AS LOGICAL     NO-UNDO.
DEFINE VARIABLE fragavar AS CHARACTER   NO-UNDO.
DEFINE VARIABLE prognamnque AS CHARACTER NO-UNDO.
DEFINE TEMP-TABLE MtrUpptt NO-UNDO
   FIELD LEVKOD AS CHARACTER
   FIELD INANVPROG AS CHARACTER
   FIELD BENAMNING AS CHARACTER
   FIELD Enr AS CHARACTER
   FIELD ENHET AS CHARACTER
   FIELD NPRIS AS DECIMAL
   INDEX INANVPROG INANVPROG.




DEFINE BUFFER bmh FOR BERMTRL.
prognamnque = "d:\elpool\delad\pro9s\" + "automtrl.txt". 

FIND FIRST FORETAG NO-LOCK NO-ERROR.
Guru.Konstanter:globforetag = FORETAG.FORETAG.

RUN textut_UI (INPUT "upplägg").
OPEN QUERY mq FOR EACH MTRL WHERE MTRL.INANVPROG BEGINS  'MTRLIFS' NO-LOCK. 
GET FIRST mq NO-LOCK.
DO WHILE AVAILABLE(MTRL):
   CREATE MtrUpptt.
   BUFFER-COPY MTRL TO MtrUpptt.
   MtrUpptt.INANVPROG = "MTRLIFS".
   RUN MBerpris_UI.
   RUN Stolppris_UI.
   RUN Skappris_UI.
   GET NEXT mq NO-LOCK.   
END.

RUN textut_UI (INPUT "ber").
FIND FIRST MtrUpptt WHERE NO-LOCK NO-ERROR.
IF AVAILABLE MtrUpptt THEN DO:
   RUN textut_UI (INPUT "Mtrlpostfinns").
   RUN Berpris_UI.
   RUN textut_UI (INPUT "berklar").
END.   
OPEN QUERY mq FOR EACH MTRL WHERE MTRL.INANVPROG BEGINS  'MTRLIFS' NO-LOCK. 
GET FIRST mq NO-LOCK.
DO WHILE AVAILABLE(MTRL):
   DO TRANSACTION:
      GET CURRENT mq EXCLUSIVE-LOCK.
      MTRL.INANVPROG = "NAPRBERIFS.P".
   END.   
   GET NEXT mq NO-LOCK.   
END.
RELEASE MTRL NO-ERROR.
RUN textut_UI (INPUT "mtrlklar").


PROCEDURE Berpris_UI :
   
   OPEN QUERY bq FOR EACH OMRADETAB WHERE OMRADETAB.ELVOMRKOD = 0 NO-LOCK,
   EACH BEREDNING WHERE BEREDNING.OMRADE = OMRADETAB.OMRADE AND BEREDNING.AKTIV = TRUE AND BEREDNING.BERNR > 0 NO-LOCK.
   GET FIRST bq NO-LOCK.
   DO WHILE AVAILABLE(BEREDNING):
   
    RUN textut_UI (INPUT STRING(BEREDNING.BERNR) + " " + BEREDNING.OMRADE ).
      FIND FIRST INKBER  WHERE INKBER.BERNR = BEREDNING.BERNR AND
      INKBER.OMRADE = BEREDNING.OMRADE AND INKBER.PAGAENDE = TRUE
      NO-LOCK NO-ERROR.
      IF NOT AVAILABLE INKBER THEN DO:
         musz = FALSE.
         OPEN QUERY m2q FOR EACH MtrUpptt WHERE MtrUpptt.INANVPROG = 'MTRLIFS' NO-LOCK,
         EACH  BERMTRL WHERE BERMTRL.AONR = BEREDNING.BERAONR AND
         BERMTRL.OMRADE = BEREDNING.OMRADE AND BERMTRL.LEVKOD = MtrUpptt.LEVKOD AND BERMTRL.ENR = MtrUpptt.Enr NO-LOCK.  
         GET FIRST m2q NO-LOCK.
         DO WHILE AVAILABLE(BERMTRL):
            FIND FIRST INKMTRL WHERE 
            INKMTRL.AONRAONR = BEREDNING.AONR AND INKMTRL.AONRDELNR = BEREDNING.DELNR  AND INKMTRL.ENR = BERMTRL.ENR AND  INKMTRL.LEVKOD = BERMTRL.LEVKOD
            NO-LOCK NO-ERROR.
            IF NOT AVAILABLE INKMTRL THEN DO TRANSACTION:
               GET CURRENT m2q EXCLUSIVE-LOCK.
               ASSIGN
               BERMTRL.PRIS = MtrUpptt.NPRIS
               BERMTRL.BENAMNING = MtrUpptt.BENAMNING
               BERMTRL.ENHET = MtrUpptt.ENHET.
            END.
            GET NEXT m2q NO-LOCK.
         END.      
         RELEASE BERMTRL NO-ERROR.             
      END.
      GET NEXT bq NO-LOCK.
   END.
   CLOSE QUERY bq.
END PROCEDURE.    




PROCEDURE MBerPris_UI :
   OPEN QUERY mbq FOR EACH MTRLBER WHERE MTRLBER.LEVKOD = MTRL.LEVKOD AND MTRLBER.ENR = MTRL.ENR NO-LOCK.
   GET FIRST mbq NO-LOCK.
   DO WHILE AVAILABLE(MTRLBER):
      DO TRANSACTION:
         GET CURRENT mbq EXCLUSIVE-LOCK.
         ASSIGN 
         MTRLBER.BENAMNING = MTRL.BENAMNING
         MTRLBER.PRIS = MTRL.NPRIS         
         MTRLBER.ENHET = MTRL.ENHET.
      END.
      GET NEXT mbq NO-LOCK.   
   END.   
   RELEASE MTRLBER NO-ERROR.
   
END PROCEDURE.  
PROCEDURE Stolppris_UI :
   OPEN QUERY stq FOR EACH BERSTOLP WHERE BERSTOLP.LEVKOD = MTRL.LEVKOD AND BERSTOLP.ENR = MTRL.ENR NO-LOCK.
   GET FIRST stq NO-LOCK.
   DO WHILE AVAILABLE(BERSTOLP):
      DO TRANSACTION:
         GET CURRENT stq EXCLUSIVE-LOCK.
         ASSIGN 
         BERSTOLP.BENAMNING = MTRL.BENAMNING
         BERSTOLP.PRIS = MTRL.NPRIS         
         BERSTOLP.ENHET = MTRL.ENHET.
      END.
      GET NEXT stq NO-LOCK.   
   END.   
   RELEASE BERSTOLP NO-ERROR.
   
END PROCEDURE.  

PROCEDURE Skappris_UI :
   OPEN QUERY skq FOR EACH BERSKAP WHERE BERSKAP.LEVKOD = MTRL.LEVKOD AND BERSKAP.ENR = MTRL.ENR NO-LOCK.
   GET FIRST skq NO-LOCK.
   DO WHILE AVAILABLE(BERSKAP):
      DO TRANSACTION:
         GET CURRENT skq EXCLUSIVE-LOCK.
         ASSIGN 
         BERSKAP.BENAMNING = MTRL.BENAMNING
         BERSKAP.PRIS = MTRL.NPRIS         
         BERSKAP.ENHET = MTRL.ENHET.
      END.      
      GET NEXT skq NO-LOCK.   
   END.
   RELEASE BERSKAP NO-ERROR.     
   
END PROCEDURE.

PROCEDURE Satspris_UI :
   OPEN QUERY sakq FOR EACH SATS WHERE SATS.LEVKOD = MTRL.LEVKOD AND SATS.ENR = MTRL.Enr AND SATS.SATS = TRUE NO-LOCK.
   GET FIRST sakq NO-LOCK.
   DO WHILE AVAILABLE(SATS):
      DO TRANSACTION:         
         GET CURRENT sakq EXCLUSIVE-LOCK.         
         ASSIGN 
         SATS.BENAMNING = MTRL.BENAMNING
         SATS.ENHET = MTRL.ENHET
         SATS.PRIS = MTRL.NPRIS.                                            
      END.      
      GET NEXT sakq NO-LOCK.   
   END.
   RELEASE SATS NO-ERROR.
   
   OPEN QUERY sak2q FOR EACH SATS WHERE SATS.LEVKOD = MTRL.LEVKOD AND SATS.ENR2 = MTRL.Enr AND SATS.SATS = FALSE NO-LOCK.
   GET FIRST sak2q NO-LOCK.
   DO WHILE AVAILABLE(SATS):
      DO TRANSACTION:         
         GET CURRENT sak2q EXCLUSIVE-LOCK.         
         ASSIGN 
         SATS.BENAMNING2 = MTRL.BENAMNING
         SATS.ENHET2 = MTRL.ENHET
         SATS.PRIS2 = MTRL.NPRIS.                                            
      END.      
      GET NEXT sak2q NO-LOCK.   
   END.
   RELEASE SATS NO-ERROR.   
   
   
END PROCEDURE.  
 
PROCEDURE textut_UI:
   DEFINE INPUT PARAMETER meddvar AS CHARACTER NO-UNDO.
   OUTPUT TO VALUE(prognamnque) APPEND.
   IF AVAILABLE MTRL THEN 
   PUT UNFORMATTED meddvar " " Guru.Konstanter:globforetag " " TODAY " " STRING(TIME,"HH:MM:SS") + " " + MTRL.Enr SKIP.
   ELSE PUT UNFORMATTED meddvar " " Guru.Konstanter:globforetag " " TODAY " " STRING(TIME,"HH:MM:SS")   SKIP.
   OUTPUT CLOSE.
END PROCEDURE.
