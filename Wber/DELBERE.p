   /*DELBERE.P TA BORT BEREDNING*/
{STARTFORAPP.I}
{EXTRATAB.I}  
{HDKALKTEMP.I} 
{MARKGRUPP.I}
{BILDBERTEMP.I}  
DEFINE TEMP-TABLE bildkomb NO-UNDO
   FIELD NUM AS INTEGER
   FIELD BILD AS CHARACTER
   FIELD KOMB AS CHARACTER
   INDEX NUM NUM.
CREATE WIDGET-POOL "DynTableBH" NO-ERROR.
DEFINE INPUT PARAMETER bernvar AS CHARACTER  NO-UNDO.
DEFINE INPUT PARAMETER valomrade AS CHARACTER NO-UNDO.
DEFINE VARIABLE bloblog AS LOGICAL NO-UNDO.
DEFINE VARIABLE fbestapph AS HANDLE NO-UNDO.                      /*EXTRATABHMT*/
DEFINE VARIABLE berkopptabbuffh AS HANDLE NO-UNDO.
DEFINE VARIABLE grundkloid AS INTEGER NO-UNDO.
DO TRANSACTION:  
   OPEN QUERY berqmtrl FOR EACH BERMTRL WHERE BERMTRL.AONR = bernvar AND
   BERMTRL.OMRADE = valomrade USE-INDEX OMR NO-LOCK.
   GET FIRST berqmtrl EXCLUSIVE-LOCK.
   DO WHILE AVAILABLE(BERMTRL):
      DELETE BERMTRL.      
      GET NEXT berqmtrl EXCLUSIVE-LOCK.
   END.
   CLOSE QUERY berqmtrl. 
END. 
DO TRANSACTION:   
   OPEN QUERY ordq FOR EACH BERORD WHERE BERORD.AONR = bernvar AND
   BERORD.OMRADE = valomrade USE-INDEX ORD NO-LOCK.  
   GET FIRST ordq EXCLUSIVE-LOCK.
   DO WHILE AVAILABLE(BERORD):
      DELETE BERORD.       
      GET NEXT ordq EXCLUSIVE-LOCK.
   END.
   CLOSE QUERY ordq.
END.
DO TRANSACTION:  
   OPEN QUERY berqlin FOR EACH BERLINKAB WHERE BERLINKAB.AONR = bernvar AND
   BERLINKAB.OMRADE = valomrade USE-INDEX OMR NO-LOCK.
   GET FIRST berqlin EXCLUSIVE-LOCK.
   DO WHILE AVAILABLE(BERLINKAB):       
      DELETE BERLINKAB.
      GET NEXT berqlin EXCLUSIVE-LOCK.
   END.
   CLOSE QUERY berqlin. 
END.  
/*
DO TRANSACTION:  
   OPEN QUERY berqskydd FOR EACH KSKYDD WHERE KSKYDD.AONR = bernvar AND
   KSKYDD.OMRADE = valomrade 
   USE-INDEX OMR NO-LOCK.
   GET FIRST berqskydd EXCLUSIVE-LOCK.
   DO WHILE AVAILABLE(KSKYDD):       
      DELETE KSKYDD.
      GET NEXT berqskydd EXCLUSIVE-LOCK.
   END.
   CLOSE QUERY berqskydd. 
END.
*/
DO TRANSACTION:     
   OPEN QUERY berq FOR EACH BERVAL WHERE BERVAL.AONR = bernvar AND
   BERVAL.OMRADE = valomrade 
   USE-INDEX OMR NO-LOCK.
   GET FIRST berq EXCLUSIVE-LOCK.
   DO WHILE AVAILABLE(BERVAL):
      DELETE BERVAL.       
      GET NEXT berq EXCLUSIVE-LOCK.
   END.
   CLOSE QUERY berq.
END.
DO TRANSACTION:    
   OPEN QUERY friq FOR EACH FRIKORT WHERE FRIKORT.AONR = bernvar AND
   FRIKORT.OMRADE = valomrade 
   USE-INDEX OMR NO-LOCK. 
   GET FIRST friq EXCLUSIVE-LOCK.
   DO WHILE AVAILABLE(FRIKORT):
      DELETE FRIKORT.       
      GET NEXT friq EXCLUSIVE-LOCK.
   END.
   CLOSE QUERY friq.
END.

DO TRANSACTION:
   OPEN QUERY berqid FOR EACH BERID WHERE BERID.AONR = bernvar AND
   BERID.OMRADE = valomrade 
   USE-INDEX OMR NO-LOCK.         
   GET FIRST berqid EXCLUSIVE-LOCK.
   DO WHILE AVAILABLE(BERID):       
      DELETE BERID.
      GET NEXT berqid EXCLUSIVE-LOCK.
   END.
   CLOSE QUERY berqid. 
   FOR EACH BERID2 WHERE BERID2.AONR = bernvar AND
   BERID2.OMRADE = valomrade EXCLUSIVE-LOCK.         
      DELETE BERID2.
   END.   
END. 
DO TRANSACTION:
   OPEN QUERY uppq FOR EACH BERUPP WHERE BERUPP.AONR = bernvar AND
   BERUPP.OMRADE = valomrade 
   USE-INDEX OMR NO-LOCK. 
   GET FIRST uppq EXCLUSIVE-LOCK.
   DO WHILE AVAILABLE(BERUPP): 
      DELETE BERUPP.  
      GET NEXT uppq EXCLUSIVE-LOCK.
   END.
   CLOSE QUERY uppq.
   OPEN QUERY Puppq FOR EACH BERPUNKT WHERE BERPUNKT.AONR = bernvar AND
   BERPUNKT.OMRADE = valomrade 
   NO-LOCK. 
   GET FIRST Puppq EXCLUSIVE-LOCK.
   DO WHILE AVAILABLE(BERPUNKT): 
      DELETE BERPUNKT.  
      GET NEXT Puppq EXCLUSIVE-LOCK.
   END.
   CLOSE QUERY Puppq.
END. 
/*
DO TRANSACTION:
   OPEN QUERY kalkq FOR EACH BERKALK WHERE BERKALK.AONR = bernvar AND
   BERKALK.OMRADE = valomrade 
   USE-INDEX OMR NO-LOCK. 
   GET FIRST kalkq EXCLUSIVE-LOCK.
   DO WHILE AVAILABLE(BERKALK): 
      DELETE BERKALK.  
      GET NEXT kalkq EXCLUSIVE-LOCK.
   END.
   CLOSE QUERY kalkq.
END.
*/

RUN BerKalkBortStart_UI (INPUT INTEGER(bernvar),INPUT valomrade).
DO TRANSACTION:
   OPEN QUERY levq FOR EACH LEVTRP WHERE LEVTRP.BERNR = INTEGER(bernvar) AND
   LEVTRP.OMRADE = valomrade 
   USE-INDEX BERNR2 NO-LOCK. 
   GET FIRST levq EXCLUSIVE-LOCK.
   DO WHILE AVAILABLE(LEVTRP): 
      DELETE LEVTRP.  
      GET NEXT levq EXCLUSIVE-LOCK.
   END.
   CLOSE QUERY levq.
END.
DO TRANSACTION:
   OPEN QUERY levq2 FOR EACH LEVTRP2 WHERE LEVTRP2.BERNR = INTEGER(bernvar) AND
   LEVTRP2.OMRADE = valomrade 
   USE-INDEX NR NO-LOCK. 
   GET FIRST levq2 EXCLUSIVE-LOCK.
   DO WHILE AVAILABLE(LEVTRP2): 
      DELETE LEVTRP2.  
      GET NEXT levq2 EXCLUSIVE-LOCK.
   END.
   CLOSE QUERY levq2.
END.
DO TRANSACTION:
   OPEN QUERY bestq FOR EACH BESTSTAT WHERE BESTSTAT.BERNR = INTEGER(bernvar) AND
   BESTSTAT.OMRADE = valomrade 
   USE-INDEX BESTNR2 NO-LOCK. 
   GET FIRST bestq EXCLUSIVE-LOCK.
   DO WHILE AVAILABLE(BESTSTAT): 
      DELETE BESTSTAT.  
      GET NEXT bestq EXCLUSIVE-LOCK.
   END.
   CLOSE QUERY bestq.
END.
   
DO TRANSACTION:    
   OPEN QUERY markq FOR EACH EXTRAKOPPLINGAR WHERE EXTRAKOPPLINGAR.PROGRAM = "MARKSTN" AND EXTRAKOPPLINGAR.KOPPLACHAR1 = bernvar AND
   EXTRAKOPPLINGAR.KOPPLACHAR2 = valomrade NO-LOCK. 
   GET FIRST markq EXCLUSIVE-LOCK.
   DO WHILE AVAILABLE(EXTRAKOPPLINGAR):
      DELETE EXTRAKOPPLINGAR.       
      GET NEXT markq EXCLUSIVE-LOCK.
   END.
   CLOSE QUERY markq.
END.
RUN MarkstationBort_UI (INPUT bernvar, INPUT valomrade).
 FOR EACH EXTRADATA WHERE EXTRADATA.PROGRAM = "BERBILD" AND EXTRADATA.HUVUDINT = INTEGER(bernvar) AND 
 EXTRADATA.HUVUDCH = valomrade  EXCLUSIVE-LOCK:
    DELETE EXTRADATA.
 END.
 RUN BerbildBort_UI (INPUT INTEGER(bernvar), INPUT valomrade).
/*HD*/


EMPTY TEMP-TABLE inextrakopptemp NO-ERROR. 
RUN EXTRATABHMT.P PERSISTENT SET fbestapph.
/*KALKYL-BEREDNING SUNDSVALL*/
CREATE inextrakopptemp.          
ASSIGN
inextrakopptemp.PROGRAM = "KALKBER"   
inextrakopptemp.KOPPLACHAR1 = ?
inextrakopptemp.KOPPLAINT1 =  ?
inextrakopptemp.KOPPLACHAR2 = valomrade
inextrakopptemp.KOPPLAINT2 =  INTEGER(bernvar).
RUN exbort_UI IN fbestapph (INPUT TABLE inextrakopptemp).
EMPTY TEMP-TABLE inextrakopptemp NO-ERROR. 
IF VALID-HANDLE(fbestapph) THEN DELETE PROCEDURE fbestapph.      



/*HD HÄR*/
RUN HDBORT.P (INPUT INTEGER(bernvar),INPUT valomrade).      


RUN FINNSTABELL.P (INPUT "INKBER", OUTPUT bloblog).
IF bloblog = TRUE THEN DO:
   RUN INKBERBORT.P (INPUT INTEGER(bernvar),INPUT valomrade).      
END.



RUN DelPool_UI.
{BERKALKBKID.I}
{Markstationhmt.i}
{Berbilderhmt.i}