/*
     Filename: EXPIMPAPP.P
      Created: 2004.03.29 10:08ELPAO     
     Modified: 
*/


{STARTFORAPP.I}
{TTEXPIMPK.I}
DEFINE BUFFER kalkaobuff FOR KALKAONR.
DEFINE VARIABLE valar LIKE P1.KATAR NO-UNDO.
PROCEDURE laddafastspecinfo_UI:
   DEFINE INPUT PARAMETER varkalknr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER anvandarkod AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER anvandarnamn AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER benamning AS CHARACTER NO-UNDO.

   ASSIGN
   benamning = ""
   anvandarnamn = "".
   FIND FIRST FASTSPEC WHERE FASTSPEC.KALKNR = varkalknr NO-LOCK NO-ERROR.
   IF AVAILABLE FASTSPEC THEN DO:
      FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = FASTSPEC.ANVANDARE NO-LOCK NO-ERROR.
      IF AVAILABLE ANVANDARE THEN anvandarnamn = ANVANDARE.AV-NAMN.
      ASSIGN
      anvandarkod = FASTSPEC.ANVANDARE
      benamning = FASTSPEC.BENAMNING.
   END.
END PROCEDURE.

PROCEDURE tabortfastspec_UI:
   DEFINE INPUT PARAMETER varkalknr AS INTEGER NO-UNDO.

   DO TRANSACTION:
      FIND FIRST FASTSPEC WHERE FASTSPEC.KALKNR = varkalknr EXCLUSIVE-LOCK NO-ERROR.
      IF AVAILABLE FASTSPEC THEN DELETE FASTSPEC.
   END.
END PROCEDURE.

PROCEDURE skapanykalk_UI:
   DEFINE INPUT PARAMETER varomrade AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER nyttnr AS INTEGER NO-UNDO.
   DO TRANSACTION:
      
      IF varforetypchar[3] NE "" THEN DO:
         FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = varforetypchar[3] EXCLUSIVE-LOCK NO-ERROR.
      END.
      ELSE DO:
         FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = varomrade EXCLUSIVE-LOCK NO-ERROR.
      END.
      IF AVAILABLE OMRADETAB THEN DO:
         IF OMRADETAB.KALKYLINT2 < OMRADETAB.KALKYLSIST THEN DO:
            nyttnr = ?.            
         END.
         ELSE DO:
           
            nyttnr = OMRADETAB.KALKYLSIST.
            
            RUN kalksista_UI (INPUT-OUTPUT nyttnr).
         END. 
         IF nyttnr = ? THEN.   
         ELSE DO:
            nyttnr = OMRADETAB.KALKYLSIST.
            OMRADETAB.KALKYLSIST = OMRADETAB.KALKYLSIST + 1. 
         END.     
      END.
      ELSE DO:
         nyttnr = ?.
      END.
   END.
   IF AVAILABLE OMRADETAB THEN RELEASE OMRADETAB.   
END PROCEDURE.

{KALKSISTA.I}

PROCEDURE skapaexport_UI :   
   DEFINE INPUT PARAMETER valkalknr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR temp_kalk.
   DEFINE OUTPUT PARAMETER TABLE FOR tempKALKBEF.
   DEFINE OUTPUT PARAMETER TABLE FOR tempFAKTOR.
   DEFINE OUTPUT PARAMETER TABLE FOR tempFASTKALK.
   DEFINE OUTPUT PARAMETER TABLE FOR tempmtrl.
   DEFINE OUTPUT PARAMETER TABLE FOR tempKALKFOR.
   DEFINE OUTPUT PARAMETER TABLE FOR tempKALKUPP.
   DEFINE OUTPUT PARAMETER TABLE FOR tempKALKKUND.
   DEFINE OUTPUT PARAMETER TABLE FOR tempKALKAONR.
   /*KALKÅR*/
   OPEN QUERY bq FOR EACH FASTSPEC WHERE FASTSPEC.KALKNR = valkalknr AND
   FASTSPEC.OMRADE = valomrade NO-LOCK.
   GET FIRST bq NO-LOCK.
   DO WHILE AVAILABLE(FASTSPEC):
      DO TRANSACTION:
         CREATE temp_kalk.
         BUFFER-COPY FASTSPEC TO temp_kalk.
      END.
      GET NEXT bq NO-LOCK.
   END.
   CLOSE QUERY bq.   
   OPEN QUERY cq FOR EACH KALKAONR WHERE KALKAONR.KALKNR = valkalknr AND
   KALKAONR.OMRADE = valomrade NO-LOCK.
   GET FIRST cq NO-LOCK.
   DO WHILE AVAILABLE(KALKAONR):
      DO TRANSACTION:
         CREATE tempKALKAONR.
         BUFFER-COPY KALKAONR TO tempKALKAONR.
      END.
      GET NEXT cq NO-LOCK.
   END.
   CLOSE QUERY cq.
   
   OPEN QUERY dq FOR EACH KALKBEF WHERE KALKBEF.KALKNR = valkalknr NO-LOCK.
   GET FIRST dq NO-LOCK.
   DO WHILE AVAILABLE(KALKBEF):
      DO TRANSACTION:
         CREATE tempKALKBEF.
         BUFFER-COPY KALKBEF TO tempKALKBEF.
      END.
      GET NEXT dq NO-LOCK.
   END.
   CLOSE QUERY dq.   
   
   
   OPEN QUERY eeq FOR EACH FASTKALK WHERE FASTKALK.OMRADE = valomrade AND 
   FASTKALK.KALKNR = valkalknr NO-LOCK.
   GET FIRST eeq NO-LOCK.
   DO WHILE AVAILABLE(FASTKALK):
      DO TRANSACTION:
         CREATE tempFASTKALK.
         BUFFER-COPY FASTKALK TO tempFASTKALK.
      END.
      GET NEXT eeq NO-LOCK.
   END.
   CLOSE QUERY eeq.   
  
   OPEN QUERY fq FOR EACH FAKTOR WHERE FAKTOR.KALKNR = valkalknr NO-LOCK.
   GET FIRST fq NO-LOCK.
   DO WHILE AVAILABLE(FAKTOR):
      DO TRANSACTION:
         CREATE tempFAKTOR.
         BUFFER-COPY FAKTOR TO tempFAKTOR.
      END.
      GET NEXT fq NO-LOCK.
   END.
   CLOSE QUERY fq.   
      
   OPEN QUERY gq FOR EACH KALKFOR WHERE KALKFOR.KALKNR = valkalknr NO-LOCK.
   GET FIRST gq NO-LOCK.
   DO WHILE AVAILABLE(KALKFOR):
      DO TRANSACTION:
         CREATE tempKALKFOR.
         BUFFER-COPY KALKFOR TO tempKALKFOR.
      END.
      GET NEXT gq NO-LOCK.
   END.
   CLOSE QUERY gq.   

   
   OPEN QUERY sq FOR EACH KALKUPP WHERE KALKUPP.KALKNR = valkalknr NO-LOCK.
   GET FIRST sq NO-LOCK.
   DO WHILE AVAILABLE(KALKUPP):
      DO TRANSACTION:
         CREATE tempKALKUPP.
         BUFFER-COPY KALKUPP TO tempKALKUPP.
      END.
      GET NEXT sq NO-LOCK.
   END.
   CLOSE QUERY sq.   

   
   OPEN QUERY xq FOR EACH KALKKUND WHERE KALKKUND.KALKNR = valkalknr NO-LOCK.
   GET FIRST xq NO-LOCK.
   DO WHILE AVAILABLE(KALKKUND):
      DO TRANSACTION:
         CREATE tempKALKKUND.
         BUFFER-COPY KALKKUND TO tempKALKKUND.
      END.
      GET NEXT xq NO-LOCK.
   END.
   CLOSE QUERY xq.   

   OPEN QUERY tq FOR EACH MTRL WHERE MTRL.KALKNR = valkalknr NO-LOCK.
   GET FIRST tq NO-LOCK.
   DO WHILE AVAILABLE(MTRL):
      DO TRANSACTION:
         CREATE tempMTRL.
         BUFFER-COPY MTRL TO tempMTRL.
      END.
      GET NEXT tq NO-LOCK.
   END.
   CLOSE QUERY tq.   

END PROCEDURE.

PROCEDURE kexpimp_UI :
   DEFINE INPUT PARAMETER valbernr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER finns AS LOGICAL NO-UNDO.   
   DEFINE OUTPUT PARAMETER finns2 AS LOGICAL NO-UNDO.   
   FIND FIRST FASTSPEC WHERE FASTSPEC.KALKNR = valbernr 
   NO-LOCK NO-ERROR.
   IF AVAILABLE FASTSPEC THEN finns = TRUE.
   ELSE finns = FALSE.
   FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = valomrade 
   NO-LOCK NO-ERROR.
   IF AVAILABLE OMRADETAB THEN finns2 = TRUE.
   ELSE finns2 = FALSE.
END PROCEDURE.

PROCEDURE skapaimp_UI :
   DEFINE INPUT PARAMETER TABLE FOR temp_kalk.
   DEFINE INPUT PARAMETER TABLE FOR tempKALKBEF.
   DEFINE INPUT PARAMETER TABLE FOR tempFAKTOR.
   DEFINE INPUT PARAMETER TABLE FOR tempFASTKALK.
   DEFINE INPUT PARAMETER TABLE FOR tempmtrl.
   DEFINE INPUT PARAMETER TABLE FOR tempKALKFOR.
   DEFINE INPUT PARAMETER TABLE FOR tempKALKUPP.
   DEFINE INPUT PARAMETER TABLE FOR tempKALKKUND.
   DEFINE INPUT PARAMETER TABLE FOR tempKALKAONR.
   

   FOR EACH temp_kalk:
      DO TRANSACTION:
         CREATE FASTSPEC.
         BUFFER-COPY temp_kalk TO FASTSPEC.
      END.
   END.
   FOR EACH tempKALKBEF:
      DO TRANSACTION:
         CREATE KALKBEF.
         BUFFER-COPY tempKALKBEF TO KALKBEF.
      END.
   END.
   FOR EACH tempFAKTOR:
      DO TRANSACTION:
         CREATE FAKTOR.
         BUFFER-COPY tempFAKTOR TO FAKTOR.
      END.
   END.
   FOR EACH tempFASTKALK:
      DO TRANSACTION:
         CREATE FASTKALK.
         BUFFER-COPY tempFASTKALK TO FASTKALK.
      END.
   END.
   FOR EACH tempmtrl:
      DO TRANSACTION:
         CREATE MTRL.
         BUFFER-COPY tempmtrl TO MTRL.
      END.
   END.
   FOR EACH tempKALKFOR:
      DO TRANSACTION:
         CREATE KALKFOR.
         BUFFER-COPY tempKALKFOR TO KALKFOR.
      END.
   END.
   FOR EACH tempKALKUPP:
      DO TRANSACTION:
         CREATE KALKUPP.
         BUFFER-COPY tempKALKUPP TO KALKUPP.
      END.
   END.
   FOR EACH tempKALKKUND:
      DO TRANSACTION:
         CREATE KALKKUND.
         BUFFER-COPY tempKALKKUND TO KALKKUND.
      END.
   END.
   FOR EACH tempKALKAONR:
      DO TRANSACTION:
         CREATE KALKAONR.
         BUFFER-COPY tempKALKAONR TO KALKAONR.
         IF KALKAONR.AONR = "" OR  KALKAONR.AONR = ? THEN.
         ELSE DO:
            FIND FIRST AONRTAB WHERE AONRTAB.AONR = KALKAONR.AONR AND AONRTAB.DELNR = KALKAONR.DELNR NO-LOCK NO-ERROR.
            IF NOT AVAILABLE AONRTAB THEN DO:
               ASSIGN
               KALKAONR.AONR = ? 
               KALKAONR.DELNR = ?.
            END.
         END.
         IF KALKAONR.PLANNR = "" OR  KALKAONR.PLANNR = ? THEN.
         ELSE DO:
            FIND FIRST PLANNRTAB WHERE PLANNRTAB.PLANNR = KALKAONR.PLANNR AND PLANNRTAB.ARTAL = KALKAONR.ARTAL NO-LOCK NO-ERROR.
            IF NOT AVAILABLE PLANNRTAB THEN DO:
               ASSIGN
               KALKAONR.PLANNR = ? 
               KALKAONR.ARTAL  = ?.
            END.
         END.
         IF KALKAONR.AONR = ? AND KALKAONR.PLANNR = ? THEN KALKAONR.STATUSNIV = "".
      END.
      FIND CURRENT KALKAONR NO-LOCK NO-ERROR.
      RUN koll_UI (INPUT KALKAONR.KALKNR).
   END.
   
END PROCEDURE.

PROCEDURE koll_UI:
   DEFINE INPUT PARAMETER kalkvar AS INTEGER NO-UNDO.
   
   DO TRANSACTION:
      FIND FIRST KALKAONR WHERE KALKAONR.KALKNR = kalkvar EXCLUSIVE-LOCK NO-ERROR.
      IF KALKAONR.AONR NE ? THEN DO:
         FIND FIRST kalkaobuff WHERE kalkaobuff.AONR = KALKAONR.AONR AND
         kalkaobuff.DELNR = KALKAONR.DELNR AND kalkaobuff.STATUSNIV = "UF"
         AND RECID(kalkaobuff) NE RECID(KALKAONR) NO-LOCK NO-ERROR. 
      END.
      ELSE IF KALKAONR.PLANNR NE ? THEN DO:
         FIND FIRST kalkaobuff WHERE kalkaobuff.PLANNR = KALKAONR.PLANNR AND
         kalkaobuff.ARTAL = KALKAONR.ARTAL AND kalkaobuff.STATUSNIV = "UF"
         AND RECID(kalkaobuff) NE RECID(KALKAONR) NO-LOCK NO-ERROR. 
      END.
      IF AVAILABLE kalkaobuff THEN DO:
         IF kalkaobuff.TYP NE KALKAONR.TYP THEN DO:
            IF KALKAONR.AONR NE ? THEN DO:
               FIND FIRST kalkaobuff WHERE kalkaobuff.AONR = KALKAONR.AONR AND
               kalkaobuff.DELNR = KALKAONR.DELNR AND kalkaobuff.STATUSNIV = "HUV"
               AND kalkaobuff.TYP = KALKAONR.TYP AND RECID(kalkaobuff) NE RECID(KALKAONR)
               NO-LOCK NO-ERROR. 
            END.
            ELSE DO:
               FIND FIRST kalkaobuff WHERE kalkaobuff.PLANNR = KALKAONR.PLANNR AND
               kalkaobuff.ARTAL = KALKAONR.ARTAL AND kalkaobuff.STATUSNIV = "HUV"
               AND kalkaobuff.TYP = KALKAONR.TYP AND RECID(kalkaobuff) NE RECID(KALKAONR)
               NO-LOCK NO-ERROR. 
            END.
            IF AVAILABLE kalkaobuff THEN DO:
               KALKAONR.STATUSNIV = "ALT".
            END.
            ELSE DO:
               KALKAONR.STATUSNIV = "HUV".
            END.
         END.
         ELSE KALKAONR.STATUSNIV = "ALT".
      END.
      ELSE DO:
         KALKAONR.STATUSNIV = "UF".
      END.
   END. 
   IF AVAILABLE KALKAONR THEN RELEASE KALKAONR.
END PROCEDURE.


PROCEDURE expupplagg_UI :
   DEFINE OUTPUT PARAMETER TABLE FOR p1temp.
   DEFINE OUTPUT PARAMETER TABLE FOR p2temp.
   DEFINE OUTPUT PARAMETER TABLE FOR p3temp.
   DEFINE OUTPUT PARAMETER TABLE FOR p5temp.   
   DEFINE OUTPUT PARAMETER TABLE FOR lop1temp.
   DEFINE OUTPUT PARAMETER TABLE FOR lop2temp.
   DEFINE OUTPUT PARAMETER TABLE FOR lop3temp.
   DEFINE OUTPUT PARAMETER TABLE FOR lop5temp.
   DEFINE OUTPUT PARAMETER TABLE FOR kalkbeftemp.
   DEFINE OUTPUT PARAMETER TABLE FOR frekvenstemp.
   DEFINE OUTPUT PARAMETER TABLE FOR ebrpristemp.
   DEFINE OUTPUT PARAMETER TABLE FOR sebrpristemp.

   FIND LAST EBRPRIS USE-INDEX AR NO-LOCK NO-ERROR.
   valar = EBRPRIS.ARTAL.
   
   OPEN QUERY kq FOR EACH P1 WHERE P1.KATAR = valar NO-LOCK.
   GET FIRST kq NO-LOCK.
   DO WHILE AVAILABLE(P1):
      DO TRANSACTION:
         CREATE p1temp.
         BUFFER-COPY P1 TO p1temp.
      END.      
      GET NEXT kq NO-LOCK.
   END.
   CLOSE QUERY kq.

   OPEN QUERY kq2 FOR EACH P2 WHERE P2.KATAR = valar NO-LOCK.
   GET FIRST kq2 NO-LOCK.
   DO WHILE AVAILABLE(P2):
      DO TRANSACTION:
         CREATE p2temp.
         BUFFER-COPY P2 TO p2temp.
      END.      
      GET NEXT kq2 NO-LOCK.
   END.
   CLOSE QUERY kq2.
   
   OPEN QUERY kq3 FOR EACH P3 WHERE P3.KATAR = valar NO-LOCK.
   GET FIRST kq3 NO-LOCK.
   DO WHILE AVAILABLE(P3):      
      DO TRANSACTION:
         CREATE p3temp.
         BUFFER-COPY P3 TO p3temp.
      END.      
      GET NEXT kq3 NO-LOCK.
   END.
   CLOSE QUERY kq3.   

   OPEN QUERY kq35 FOR EACH P5 WHERE P5.KATAR = valar NO-LOCK.
   GET FIRST kq35 NO-LOCK.
   DO WHILE AVAILABLE(P5):      
      DO TRANSACTION:
         CREATE p5temp.
         BUFFER-COPY P5 TO p5temp.
      END.      
      GET NEXT kq35 NO-LOCK.
   END.
   CLOSE QUERY kq35.   
   
   OPEN QUERY kq4 FOR EACH LOP1 WHERE LOP1.KATAR = valar NO-LOCK.
   GET FIRST kq4 NO-LOCK.
   DO WHILE AVAILABLE(LOP1):
      DO TRANSACTION:
         CREATE lop1temp.
         BUFFER-COPY LOP1 TO lop1temp.
      END.      
      GET NEXT kq4 NO-LOCK.
   END.
   CLOSE QUERY kq4.
   
   OPEN QUERY kq5 FOR EACH LOP2 WHERE LOP2.KATAR = valar NO-LOCK.
   GET FIRST kq5 NO-LOCK.
   DO WHILE AVAILABLE(LOP2):
      DO TRANSACTION:
         CREATE lop2temp.
         BUFFER-COPY LOP2 TO lop2temp.
      END.  
      GET NEXT kq5 NO-LOCK.
   END.
   CLOSE QUERY kq5.   
   
   OPEN QUERY kq6 FOR EACH LOP3 WHERE LOP3.KATAR = valar NO-LOCK.
   GET FIRST kq6 NO-LOCK.
   DO WHILE AVAILABLE(LOP3):
      DO TRANSACTION:
         CREATE lop3temp.
         BUFFER-COPY LOP3 TO lop3temp.
      END.  
      GET NEXT kq6 NO-LOCK.
   END.
   CLOSE QUERY kq6.

   OPEN QUERY kq65 FOR EACH LOP5 WHERE LOP5.KATAR = valar NO-LOCK.
   GET FIRST kq65 NO-LOCK.
   DO WHILE AVAILABLE(LOP5):
      DO TRANSACTION:
         CREATE lop5temp.
         BUFFER-COPY LOP5 TO lop5temp.
      END.  
      GET NEXT kq65 NO-LOCK.
   END.
   CLOSE QUERY kq65.

   
   OPEN QUERY kq7 FOR EACH FREKVENS WHERE FREKVENS.KATAR = valar NO-LOCK.
   GET FIRST kq7 NO-LOCK.
   DO WHILE AVAILABLE(FREKVENS):      
      DO TRANSACTION:
         CREATE frekvenstemp.
         BUFFER-COPY FREKVENS TO frekvenstemp.
      END.  
      GET NEXT kq7 NO-LOCK.
   END.
   CLOSE QUERY kq7.
   OUTPUT CLOSE.
   
   OPEN QUERY kq8 FOR EACH EBRPRIS WHERE EBRPRIS.ARTAL = valar NO-LOCK.
   GET FIRST kq8 NO-LOCK.
   DO WHILE AVAILABLE(EBRPRIS):
      DO TRANSACTION:
         CREATE ebrpristemp.
         BUFFER-COPY EBRPRIS TO ebrpristemp.
      END.  
      GET NEXT kq8 NO-LOCK.
   END.
   CLOSE QUERY kq8.

   OPEN QUERY kq88 FOR EACH SEBRPRIS WHERE SEBRPRIS.ARTAL = valar NO-LOCK.
   GET FIRST kq88 NO-LOCK.
   DO WHILE AVAILABLE(SEBRPRIS):
      DO TRANSACTION:
         CREATE sebrpristemp.
         BUFFER-COPY SEBRPRIS TO sebrpristemp.
      END.  
      GET NEXT kq88 NO-LOCK.
   END.
   CLOSE QUERY kq88.
   
   OPEN QUERY kq9 FOR EACH KALKBEF WHERE KALKBEF.KATAR = valar AND
   KALKBEF.KALKNR = 0 NO-LOCK.
   GET FIRST kq9 NO-LOCK.
   DO WHILE AVAILABLE(KALKBEF):
      DO TRANSACTION:
         CREATE kalkbeftemp.
         BUFFER-COPY KALKBEF TO kalkbeftemp.
      END.  
      GET NEXT kq9 NO-LOCK.
   END.
   CLOSE QUERY kq9.   
END PROCEDURE.

PROCEDURE skapaupplagg_UI :
   DEFINE INPUT PARAMETER TABLE FOR p1temp.
   DEFINE INPUT PARAMETER TABLE FOR p2temp.
   DEFINE INPUT PARAMETER TABLE FOR p3temp.
   DEFINE INPUT PARAMETER TABLE FOR p5temp.   
   DEFINE INPUT PARAMETER TABLE FOR lop1temp.
   DEFINE INPUT PARAMETER TABLE FOR lop2temp.
   DEFINE INPUT PARAMETER TABLE FOR lop3temp.
   DEFINE INPUT PARAMETER TABLE FOR lop5temp.
   DEFINE INPUT PARAMETER TABLE FOR kalkbeftemp.
   DEFINE INPUT PARAMETER TABLE FOR frekvenstemp.
   DEFINE INPUT PARAMETER TABLE FOR ebrpristemp.
   DEFINE INPUT PARAMETER TABLE FOR sebrpristemp.
   FOR EACH p1temp:
      DO TRANSACTION:
         CREATE P1.
         BUFFER-COPY p1temp TO P1.
      END.
   END.
   FOR EACH p2temp:
      DO TRANSACTION:
         CREATE P2.
         BUFFER-COPY p2temp TO P2.
      END.
   END.
   FOR EACH p3temp:
      DO TRANSACTION:
         CREATE P3.
         BUFFER-COPY p3temp TO P3.
      END.
   END.
   FOR EACH p5temp:
      DO TRANSACTION:
         CREATE P5.
         BUFFER-COPY p5temp TO P5.
      END.
   END.
   FOR EACH lop1temp:
      DO TRANSACTION:
         CREATE LOP1.
         BUFFER-COPY lop1temp TO LOP1.
      END.
   END.
   FOR EACH lop2temp:
      DO TRANSACTION:
         CREATE LOP2.
         BUFFER-COPY lop2temp TO LOP2.
      END.
   END.
   FOR EACH lop3temp:
      DO TRANSACTION:
         CREATE LOP3.
         BUFFER-COPY lop3temp TO LOP3.
      END.
   END.
   FOR EACH lop5temp:
      DO TRANSACTION:
         CREATE LOP5.
         BUFFER-COPY lop5temp TO LOP5.
      END.
   END.
   FOR EACH kalkbeftemp:
      DO TRANSACTION:
         CREATE KALKBEF.
         BUFFER-COPY kalkbeftemp TO KALKBEF.
      END.
   END.
   FOR EACH frekvenstemp:
      DO TRANSACTION:
         CREATE FREKVENS.
         BUFFER-COPY frekvenstemp TO FREKVENS.
      END.
   END.
   FOR EACH ebrpristemp:
      DO TRANSACTION:
         CREATE EBRPRIS.
         BUFFER-COPY ebrpristemp TO EBRPRIS.
      END.
   END.
   FOR EACH sebrpristemp:
      DO TRANSACTION:
         CREATE SEBRPRIS.
         BUFFER-COPY sebrpristemp TO SEBRPRIS.
      END.
   END.
END PROCEDURE.

PROCEDURE typval3_UI :
   DEFINE INPUT PARAMETER varbernr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER varomrade AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR felmeddtemp.
   EMPTY TEMP-TABLE felmeddtemp NO-ERROR. 
   FIND FIRST FASTSPEC WHERE FASTSPEC.KALKNR = varbernr NO-LOCK NO-ERROR.
   IF AVAILABLE FASTSPEC THEN DO:
      FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = FASTSPEC.ANVANDARE NO-LOCK NO-ERROR.
      IF AVAILABLE ANVANDARE THEN DO:
          CREATE felmeddtemp.
         ASSIGN felmeddtemp.FELMEDD = "Det finns redan en kalkyl med nr: " + STRING(varbernr) +
         ". Utfärdare är " + ANVANDARE.AV-NAMN + 
         ". Benämningen är " + FASTSPEC.BENAMNING + ". Vill Ni skriva över den kalkylen?".
         RETURN.
      END.
      ELSE DO:
         CREATE felmeddtemp.
         ASSIGN felmeddtemp.FELMEDD = "Det finns redan en kalkyl med nr: " + STRING(varbernr) +
         ". Utfärdare är " + FASTSPEC.ANVANDARE + 
         ". Benämningen är " + FASTSPEC.BENAMNING + ". Vill Ni skriva över den kalkylen?".
         RETURN.
      END.
   END.
   ELSE DO:
      CREATE felmeddtemp.
      felmeddtemp.VAL = 1.
   END.
   
END PROCEDURE.
