/*EXPIMPUAPPHD.P*/
/*ber för schakt se sEXPIMPHD.P*/
{STARTFORAPP.I}
{BEREDNINGTEMP.I}
{TTEXPIMPHD.I}
{TTEXPACCESS.I}
{EXTRATAB.I}
{LEVTEMP.I}
{HUVLEVTEMP.I}
{LEVTEMPORDNINGFUNC.I}
DEFINE VARIABLE extabh AS HANDLE NO-UNDO.
DEFINE VARIABLE hdbloblog AS LOGICAL NO-UNDO.
DEFINE TEMP-TABLE kon_grupp
   FIELD KONSKOD AS INTEGER
   FIELD BENAMNING AS CHARACTER.
FIND FIRST FORETAG NO-LOCK NO-ERROR.
PROCEDURE omrkoll_UI :
   DEFINE INPUT PARAMETER valomrade AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER okvar AS LOGICAL NO-UNDO.
   okvar = FALSE.
   FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = valomrade NO-LOCK NO-ERROR.
   IF AVAILABLE OMRADETAB THEN DO:
      okvar = TRUE.
   END.
END PROCEDURE.

PROCEDURE berhmt_UI :
   DEFINE INPUT PARAMETER valbernr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR beredningtemp.      
   EMPTY TEMP-TABLE beredningtemp NO-ERROR. 
   FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = valomrade NO-LOCK NO-ERROR.
   IF AVAILABLE OMRADETAB THEN DO:
      FIND FIRST BEREDNING WHERE BEREDNING.BERNR = valbernr AND 
      BEREDNING.OMRADE = OMRADETAB.OMRADE NO-LOCK NO-ERROR.
      IF AVAILABLE BEREDNING THEN DO:
         CREATE beredningtemp.
         BUFFER-COPY BEREDNING TO beredningtemp.
      END.
   END.
 END PROCEDURE.


PROCEDURE expupplagghd_UI :
   DEFINE INPUT  PARAMETER TOG_MTRLPRIS AS LOGICAL NO-UNDO. 
   DEFINE INPUT PARAMETER TABLE FOR kon_grupp.
   DEFINE OUTPUT PARAMETER TABLE FOR tempkonstgrupp.
   DEFINE OUTPUT PARAMETER TABLE FOR tempbbenamning.
   DEFINE OUTPUT PARAMETER TABLE FOR tempedigrupp.
   DEFINE OUTPUT PARAMETER TABLE FOR tempkonstruktion.
   DEFINE OUTPUT PARAMETER TABLE FOR tempkonstval.
   DEFINE OUTPUT PARAMETER TABLE FOR tempmtrlber.
   DEFINE OUTPUT PARAMETER TABLE FOR tempberstolp.
   DEFINE OUTPUT PARAMETER TABLE FOR tempberskap.
   DEFINE OUTPUT PARAMETER TABLE FOR tempkalkber.   
   DEFINE OUTPUT PARAMETER TABLE FOR tempforlagg.
   DEFINE OUTPUT PARAMETER TABLE FOR tempsamforlagg.  
   DEFINE OUTPUT PARAMETER TABLE FOR tempytbelagg.   
   DEFINE OUTPUT PARAMETER TABLE FOR hdhandtemp.   
   DEFINE OUTPUT PARAMETER TABLE FOR hdkkopptemp.
   
   DEFINE OUTPUT PARAMETER TABLE FOR tempersattemp.
   DEFINE OUTPUT PARAMETER TABLE FOR temputbyteslista.
   DEFINE OUTPUT PARAMETER TABLE FOR temputbyteslnamn.
   
   FOR EACH kon_grupp,
   EACH KONSTGRUPP WHERE KONSTGRUPP.KONSKOD = kon_grupp.KONSKOD NO-LOCK.
      CREATE tempkonstgrupp.
      BUFFER-COPY KONSTGRUPP TO tempkonstgrupp.      
   END.
   FOR EACH tempkonstgrupp,
   EACH BBENAMNING WHERE BBENAMNING.KONSKOD =  tempkonstgrupp.KONSKOD NO-LOCK.
      CREATE tempbbenamning.
      BUFFER-COPY BBENAMNING TO tempbbenamning.   
   END.
   
   FOR EACH tempkonstgrupp,
   EACH EDIGRUPP WHERE EDIGRUPP.KONSKOD =  tempkonstgrupp.KONSKOD NO-LOCK.
      CREATE tempedigrupp.
      BUFFER-COPY EDIGRUPP TO tempedigrupp.      
   END.
   FOR EACH tempkonstgrupp,
   EACH KONSTRUKTION WHERE KONSTRUKTION.KONSKOD =  tempkonstgrupp.KONSKOD NO-LOCK.
      CREATE tempkonstruktion.
      BUFFER-COPY KONSTRUKTION TO tempkonstruktion.
   END.
   FOR EACH tempkonstgrupp,
   EACH KONSTVAL WHERE KONSTVAL.KONSKOD =  tempkonstgrupp.KONSKOD NO-LOCK.
      CREATE tempkonstval.
      BUFFER-COPY KONSTVAL TO tempkonstval.
   END.
   FOR EACH tempkonstruktion NO-LOCK,
   EACH MTRLBER WHERE MTRLBER.KTYPKOD = tempkonstruktion.KTYPKOD NO-LOCK.
      CREATE tempmtrlber.
      BUFFER-COPY MTRLBER TO tempmtrlber.
      IF TOG_MTRLPRIS = FALSE THEN DO:
         tempmtrlber.PRIS = 0.
      END.  
   END.      
   FOR EACH BERSTOLP NO-LOCK.
      CREATE tempberstolp.
      BUFFER-COPY BERSTOLP TO tempberstolp.
      IF TOG_MTRLPRIS = FALSE THEN DO:
         tempberstolp.PRIS = 0.
      END.  
   END.
   FOR EACH BERSKAP NO-LOCK.
      CREATE tempberskap.
      BUFFER-COPY BERSKAP TO tempberskap.
      IF TOG_MTRLPRIS = FALSE THEN DO:
         tempberskap.PRIS = 0.
      END.
   END.
   EMPTY TEMP-TABLE tempforlagg NO-ERROR. 
   EMPTY TEMP-TABLE tempsamforlagg NO-ERROR. 
   EMPTY TEMP-TABLE tempytbelagg NO-ERROR. 
   EMPTY TEMP-TABLE hdhandtemp NO-ERROR. 
   EMPTY TEMP-TABLE hdkkopptemp NO-ERROR. 
   RUN FINNSTABELL.P (INPUT "HDKKOPP", OUTPUT hdbloblog).
   IF hdbloblog = TRUE THEN DO: 
      RUN EXPIMPHDEXTRA.P (INPUT 1,INPUT-OUTPUT TABLE tempforlagg, INPUT-OUTPUT TABLE tempsamforlagg, INPUT-OUTPUT TABLE tempytbelagg,
                           INPUT-OUTPUT TABLE hdhandtemp,INPUT-OUTPUT TABLE hdkkopptemp).      
   END.
   
   
   
   FOR EACH KALKBER WHERE  NO-LOCK.  
      CREATE tempkalkber.
      BUFFER-COPY KALKBER TO tempkalkber.
     
   END.
   
   
   
   
   FOR EACH UTBYTESLISTA NO-LOCK.
      CREATE temputbyteslista.
      BUFFER-COPY UTBYTESLISTA TO temputbyteslista.       
   END.
   
   FOR EACH UTBYTESLNAMN NO-LOCK.
      CREATE temputbyteslnamn.
      BUFFER-COPY UTBYTESLNAMN TO temputbyteslnamn.       
   END.         
   
END PROCEDURE.
          
PROCEDURE expmtrlkatlevkod_UI :
   DEFINE INPUT PARAMETER levkodvarz AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR tempmtrlaccess.
   /*FIND FIRST HUVUDLEV WHERE HUVUDLEV.DEP-NR = 999 NO-LOCK NO-ERROR.   */
   OPEN QUERY mtrlq FOR EACH MTRL WHERE MTRL.LEVKOD = levkodvarz AND MTRL.KALKNR = 0 NO-LOCK.
   GET FIRST mtrlq NO-LOCK.
   DO WHILE AVAILABLE(MTRL):
      DO TRANSACTION:      
         CREATE tempmtrl.
         BUFFER-COPY MTRL TO tempmtrl.
      END.
      GET NEXT mtrlq NO-LOCK.
   END.                  
   CLOSE QUERY mtrlq.   

   FOR EACH tempmtrl:
     CREATE tempmtrlaccess.
      BUFFER-COPY tempmtrl TO tempmtrlaccess.
   END.

END PROCEDURE.
PROCEDURE levhmt_UI :
   DEFINE OUTPUT PARAMETER TABLE FOR levtemp.
   DEFINE OUTPUT PARAMETER TABLE FOR huvlevtemp.
   FOR EACH LEVERANTOR WHERE LEVERANTOR.LEVKOD NE "0" AND LEVERANTOR.LEVKOD NE "99" AND LEVERANTOR.BORTTAG = FALSE USE-INDEX LEV NO-LOCK.
      CREATE levtemp.
      BUFFER-COPY LEVERANTOR TO levtemp.  
      {LEVTEMPORDNING.I}  
   END.  
   FIND FIRST HUVUDLEV WHERE HUVUDLEV.DEP-NR = 999 NO-LOCK NO-ERROR.  
   CREATE  huvlevtemp.
   BUFFER-COPY HUVUDLEV TO huvlevtemp.
END PROCEDURE.
PROCEDURE expmtrlkat_UI :  
   DEFINE INPUT  PARAMETER valnlevmtrlkat AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER TOG_MTRLPRIS AS LOGICAL NO-UNDO. 
   DEFINE OUTPUT PARAMETER TABLE FOR tempmtrl.
   /*
   FIND FIRST HUVUDLEV WHERE HUVUDLEV.DEP-NR = 999 NO-LOCK NO-ERROR.   
   OPEN QUERY mtrlq FOR EACH MTRL WHERE MTRL.LEVKOD = HUVUDLEV.LEVKOD AND
   */
   IF valnlevmtrlkat = "" THEN DO:
      FOR EACH LEVERANTOR WHERE LEVERANTOR.LEVKOD NE "0" AND LEVERANTOR.BORTTAG = FALSE NO-LOCK:
         IF LEVERANTOR.LEVKOD = "99" THEN.
         ELSE DO:      
            OPEN QUERY mtrlq FOR EACH MTRL WHERE MTRL.LEVKOD =  LEVERANTOR.LEVKOD AND
            MTRL.KALKNR = 0 NO-LOCK.
            GET FIRST mtrlq NO-LOCK.
            DO WHILE AVAILABLE(MTRL):
               CREATE tempmtrl.
               BUFFER-COPY MTRL TO tempmtrl.
               IF TOG_MTRLPRIS = FALSE THEN DO:
                  ASSIGN 
                  tempmtrl.NPRIS = 0
                  tempmtrl.BPRIS = 0
                  tempmtrl.KPRIS = 0
                  tempmtrl.SUMMA = 0.
               END.   
               GET NEXT mtrlq NO-LOCK.
            END.                  
            CLOSE QUERY mtrlq.
         END.   
      END.   
   END.
   ELSE DO:   
      OPEN QUERY mtrlq FOR EACH MTRL WHERE MTRL.LEVKOD = valnlevmtrlkat AND
      MTRL.KALKNR = 0 NO-LOCK.
      GET FIRST mtrlq NO-LOCK.
      DO WHILE AVAILABLE(MTRL):
         CREATE tempmtrl.
         BUFFER-COPY MTRL TO tempmtrl.
         IF TOG_MTRLPRIS = FALSE THEN DO:
            ASSIGN 
            tempmtrl.NPRIS = 0
            tempmtrl.BPRIS = 0
            tempmtrl.KPRIS = 0
            tempmtrl.SUMMA = 0.
                        
         END.   
         GET NEXT mtrlq NO-LOCK.
      END.                  
      CLOSE QUERY mtrlq.
   END.       
END PROCEDURE.

PROCEDURE skapaexport_UI :   
   DEFINE INPUT  PARAMETER singel AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER valaonr AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER prisvar AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR temp_ber.
   DEFINE OUTPUT PARAMETER TABLE FOR tempberval.
   DEFINE OUTPUT PARAMETER TABLE FOR tempberord.
   DEFINE OUTPUT PARAMETER TABLE FOR tempfrikort.
   DEFINE OUTPUT PARAMETER TABLE FOR tempberid.
   DEFINE OUTPUT PARAMETER TABLE FOR tempberkalk.
   DEFINE OUTPUT PARAMETER TABLE FOR tempbermtrl.
   DEFINE OUTPUT PARAMETER TABLE FOR tempberlinkab.
   DEFINE OUTPUT PARAMETER TABLE FOR tempkskydd.
   DEFINE OUTPUT PARAMETER TABLE FOR tempberupp.
   DEFINE OUTPUT PARAMETER TABLE FOR tempberid2.
   DEFINE OUTPUT PARAMETER TABLE FOR tempaobersing.
   DEFINE OUTPUT PARAMETER TABLE FOR tempberpunkt.
   DEFINE VARIABLE tempao AS CHARACTER NO-UNDO.
   DEFINE VARIABLE tempomr AS CHARACTER NO-UNDO.
   
   OPEN QUERY bq FOR EACH BEREDNING WHERE BEREDNING.BERAONR = valaonr AND
   BEREDNING.OMRADE = valomrade NO-LOCK.
   GET FIRST bq NO-LOCK.
   DO WHILE AVAILABLE(BEREDNING):
      DO TRANSACTION:      
         CREATE temp_ber.
         BUFFER-COPY BEREDNING TO temp_ber.
      END.
      GET NEXT bq NO-LOCK.
   END.
   CLOSE QUERY bq.
   OUTPUT CLOSE.
   OPEN QUERY kq FOR EACH BERVAL WHERE BERVAL.AONR = valaonr AND
   BERVAL.OMRADE = valomrade NO-LOCK.
   GET FIRST kq NO-LOCK.
   DO WHILE AVAILABLE(BERVAL):
      CREATE tempberval.
      BUFFER-COPY BERVAL TO tempberval.
      GET NEXT kq NO-LOCK.
   END.
   CLOSE QUERY kq.
   OPEN QUERY ordq FOR EACH BERORD WHERE BERORD.AONR = valaonr AND
   BERORD.OMRADE = valomrade USE-INDEX ORD NO-LOCK.
   GET FIRST ordq NO-LOCK.
   DO WHILE AVAILABLE(BERORD):
      CREATE tempberord.
      BUFFER-COPY BERORD TO tempberord.
      GET NEXT ordq NO-LOCK.
   END.
   CLOSE QUERY ordq.
   OPEN QUERY friq FOR EACH FRIKORT WHERE FRIKORT.AONR = valaonr AND
   FRIKORT.OMRADE = valomrade USE-INDEX OMR NO-LOCK.
   GET FIRST friq NO-LOCK.
   DO WHILE AVAILABLE(FRIKORT):
      CREATE tempfrikort.
      BUFFER-COPY FRIKORT TO tempfrikort.
      GET NEXT friq NO-LOCK.
   END.
   CLOSE QUERY friq.
   OPEN QUERY berqid FOR EACH BERID WHERE BERID.AONR = valaonr AND
   BERID.OMRADE = valomrade USE-INDEX OMR NO-LOCK.
   GET FIRST berqid NO-LOCK.
   DO WHILE AVAILABLE(BERID):
      CREATE tempberid.
      BUFFER-COPY BERID TO tempberid.
      GET NEXT berqid NO-LOCK.
   END.
   FOR EACH BERID2 WHERE BERID2.AONR = valaonr AND
   BERID2.OMRADE = valomrade NO-LOCK.
      CREATE tempberid2.
      BUFFER-COPY BERID2 TO tempberid2.     
   END.
   OPEN QUERY berqkal FOR EACH BERKALK WHERE BERKALK.AONR = valaonr AND
   BERKALK.OMRADE = valomrade USE-INDEX OMR NO-LOCK.
   GET FIRST berqkal NO-LOCK.
   DO WHILE AVAILABLE(BERKALK):
      CREATE tempberkalk.
      BUFFER-COPY BERKALK TO tempberkalk.
      GET NEXT berqkal NO-LOCK.
   END. 
   CLOSE QUERY berqkal.
   
   OPEN QUERY berqmtrl FOR EACH BERMTRL WHERE BERMTRL.AONR = valaonr AND
   BERMTRL.OMRADE = valomrade USE-INDEX OMR NO-LOCK.
   GET FIRST berqmtrl NO-LOCK.
   DO WHILE AVAILABLE(BERMTRL):
      CREATE tempbermtrl.
      IF prisvar = TRUE THEN  BUFFER-COPY BERMTRL TO tempbermtrl.
      ELSE BUFFER-COPY BERMTRL EXCEPT PRIS TO tempbermtrl.
      GET NEXT berqmtrl NO-LOCK.
   END.
   
   CLOSE QUERY berqmtrl.
   OPEN QUERY berqlin FOR EACH BERLINKAB WHERE BERLINKAB.AONR = valaonr AND
   BERLINKAB.OMRADE = valomrade USE-INDEX OMR NO-LOCK.
   GET FIRST berqlin NO-LOCK.
   DO WHILE AVAILABLE(BERLINKAB):
      CREATE tempberlinkab.
      BUFFER-COPY BERLINKAB TO tempberlinkab.
      GET NEXT berqlin NO-LOCK.
   END.
   CLOSE QUERY berqlin.
   OPEN QUERY berqskydd FOR EACH KSKYDD WHERE KSKYDD.AONR = valaonr AND
   KSKYDD.OMRADE = valomrade AND KSKYDD.BERED = TRUE
   USE-INDEX OMR NO-LOCK.
   GET FIRST berqskydd NO-LOCK.
   DO WHILE AVAILABLE(KSKYDD):
      CREATE tempkskydd.
      BUFFER-COPY KSKYDD TO tempkskydd.
      GET NEXT berqskydd NO-LOCK.
   END.
   CLOSE QUERY berqskydd.
   OPEN QUERY berqupp FOR EACH BERUPP WHERE BERUPP.AONR = valaonr AND
   BERUPP.OMRADE = valomrade USE-INDEX OMR NO-LOCK.
   GET FIRST berqupp NO-LOCK.
   DO WHILE AVAILABLE(BERUPP):
      CREATE tempberupp.
      BUFFER-COPY BERUPP TO tempberupp.
      GET NEXT berqupp NO-LOCK.
   END.
   CLOSE QUERY berqupp.
   FOR EACH BERPUNKT WHERE BERPUNKT.AONR = valaonr AND BERPUNKT.OMRADE = valomrade NO-LOCK:
      CREATE tempberpunkt.
      BUFFER-COPY BERPUNKT TO tempberpunkt.
      
   END.
   IF FORETAG.FORETAG = "VAST" THEN DO:
      /*enligt Claes Handfast skall beredning inte kunna exporteras med pris 20130916*/
      FOR EACH tempbermtrl :
         ASSIGN tempbermtrl.PRIS = 0 tempbermtrl.OPRIS = 0.
      END.
      FOR EACH tempberlinkab :
         ASSIGN tempberlinkab.PRIS = 0.
      END.
      FOR EACH tempkskydd :
         ASSIGN tempkskydd.PRIS = 0.
      END.
   END.  
   
   EMPTY TEMP-TABLE inextrakopptemp NO-ERROR. 
   EMPTY TEMP-TABLE extrakopptemp NO-ERROR. 
   EMPTY TEMP-TABLE tempaobersing NO-ERROR. 
   /* hämta koppling aobersing */
   
   IF singel THEN DO:
      RUN EXTRATABHMT.P PERSISTENT SET extabh.
      FIND FIRST temp_ber NO-ERROR.            
      
      CREATE inextrakopptemp.          
      ASSIGN
      inextrakopptemp.PROGRAM = "AOBERSING"                   
      inextrakopptemp.KOPPLACHAR1 = temp_ber.OMRADE
      inextrakopptemp.KOPPLAINT1 = temp_ber.BERNR
      inextrakopptemp.KOPPLACHAR2 = ?
      inextrakopptemp.KOPPLAINT2 =  ?.
      RUN etabhamt_UI IN extabh (INPUT TABLE inextrakopptemp,OUTPUT TABLE extrakopptemp).
      
      FIND FIRST extrakopptemp NO-LOCK NO-ERROR.
      IF AVAILABLE extrakopptemp THEN DO: /* Koppling finns mellan AO och BER */
         CREATE tempaobersing.
         ASSIGN
         tempaobersing.AONRWEB = extrakopptemp.KOPPLACHAR2
         tempaobersing.AOOMRADEWEB = extrakopptemp.SOKCHAR[1]
         tempaobersing.DELNRWEB = extrakopptemp.KOPPLAINT2
         tempaobersing.BERNRSING = temp_ber.BERNR
         tempaobersing.BEROMRADESING = extrakopptemp.KOPPLACHAR1.
      END.
      ELSE DO: /* finns ingen koppling mellan AO och BER */
         /*CREATE tempaobersing.
         ASSIGN
         tempaobersing.AONRWEB = ?
         tempaobersing.AOOMRADEWEB = ?
         tempaobersing.DELNRWEB = ?
         tempaobersing.BERNRSING = temp_ber.BERNR
         tempaobersing.BEROMRADESING = temp_ber.OMRADE.
         */         
      END.
      
      
   END.
   ELSE DO: /*ej singel, hämta från aonrtab*/
      FIND FIRST temp_ber.
            
      FIND FIRST AONRTAB WHERE AONRTAB.AONR = temp_ber.AONR NO-LOCK NO-ERROR.       
      
      IF AVAILABLE AONRTAB THEN DO:
         ASSIGN
         tempao = AONRTAB.AONR
         tempomr = AONRTAB.OMRADE.
      END.
      ELSE DO:
         tempao = ?.
         tempomr = ?.
      END.
                            
      CREATE tempaobersing.
      ASSIGN
      tempaobersing.AONRWEB = temp_ber.AONR
      tempaobersing.AOOMRADEWEB = tempomr
      tempaobersing.DELNRWEB = temp_ber.DELNR
      tempaobersing.BERNRSING = ?
      tempaobersing.BEROMRADESING = ?.
   END.                   
   /*
      KOPPLACHAR1 = BEROMRADESING
      //KOPPLACHAR2 = AONRWEB
      KOPPLAINT1 = BERNRSING
      //KOPPLAINT2 = DELNRWEB      
      //SOKCHAR[1] = AOOMRADEWEB
     */                    
END PROCEDURE.

PROCEDURE sparasing_UI :
   DEFINE INPUT PARAMETER TABLE FOR tempaobersing.
   
   RUN EXTRATABHMT.P PERSISTENT SET extabh.
      FIND FIRST tempaobersing NO-ERROR.            
      EMPTY TEMP-TABLE inextrakopptemp NO-ERROR. 
      CREATE inextrakopptemp.          
      ASSIGN
      inextrakopptemp.PROGRAM = "AOBERSING"                   
      inextrakopptemp.KOPPLACHAR1 = tempaobersing.BEROMRADESING
      inextrakopptemp.KOPPLAINT1 = tempaobersing.BERNRSING
      inextrakopptemp.KOPPLACHAR2 = tempaobersing.AONRWEB
      inextrakopptemp.KOPPLAINT2 =  tempaobersing.DELNRWEB.
      
   RUN extraspar2_UI IN extabh (INPUT TABLE inextrakopptemp).
   EMPTY TEMP-TABLE inextrakopptemp NO-ERROR. 
END PROCEDURE.

PROCEDURE skapaupplagg_UI :
   DEFINE INPUT PARAMETER TABLE FOR tempkonstgrupp.
   DEFINE INPUT PARAMETER TABLE FOR tempbbenamning.
   DEFINE INPUT PARAMETER TABLE FOR tempedigrupp.
   DEFINE INPUT PARAMETER TABLE FOR tempkonstruktion.
   DEFINE INPUT PARAMETER TABLE FOR tempkonstval.
   DEFINE INPUT PARAMETER TABLE FOR tempmtrlber.
   DEFINE INPUT PARAMETER TABLE FOR tempberstolp.
   DEFINE INPUT PARAMETER TABLE FOR tempberskap.
   DEFINE INPUT PARAMETER TABLE FOR tempkalkber.
   DEFINE INPUT PARAMETER TABLE FOR tempforlagg.
   DEFINE INPUT PARAMETER TABLE FOR tempsamforlagg.
   DEFINE INPUT PARAMETER TABLE FOR tempytbelagg.
   
   DEFINE INPUT PARAMETER TABLE FOR tempersattemp.
   DEFINE INPUT PARAMETER TABLE FOR temputbyteslista.
   DEFINE INPUT PARAMETER TABLE FOR temputbyteslnamn.

   FOR EACH tempkonstgrupp:
      DO TRANSACTION:
         CREATE KONSTGRUPP.
         BUFFER-COPY tempkonstgrupp TO KONSTGRUPP.
      END.
   END.
   FOR EACH tempbbenamning:
      DO TRANSACTION:
         CREATE BBENAMNING.
         BUFFER-COPY tempbbenamning TO BBENAMNING.
      END.
   END.
   FOR EACH tempedigrupp:
      DO TRANSACTION:
         CREATE EDIGRUPP.
         BUFFER-COPY tempedigrupp TO EDIGRUPP.
      END.
   END.
   FOR EACH tempkonstruktion:
      DO TRANSACTION:
         CREATE KONSTRUKTION.
         BUFFER-COPY tempkonstruktion TO KONSTRUKTION.
      END.
   END.
   FOR EACH tempkonstval:
      DO TRANSACTION:
         CREATE KONSTVAL.
         BUFFER-COPY tempkonstval TO KONSTVAL.
      END.
   END.
   FOR EACH tempmtrlber:
      DO TRANSACTION:
         CREATE MTRLBER.
         BUFFER-COPY tempmtrlber TO MTRLBER.
      END.
   END.
   FOR EACH tempberstolp:
      DO TRANSACTION:
         CREATE BERSTOLP.
         BUFFER-COPY tempberstolp TO BERSTOLP.
      END.
   END.
   FOR EACH tempberskap:
      DO TRANSACTION:
         CREATE BERSKAP.
         BUFFER-COPY tempberskap TO BERSKAP.
      END.
   END.
   FOR EACH tempkalkber:
      DO TRANSACTION:
         CREATE KALKBER.
         BUFFER-COPY tempkalkber TO KALKBER.
      END.
   END.

   
   FOR EACH temputbyteslista:
      DO TRANSACTION:
         CREATE UTBYTESLISTA.
         BUFFER-COPY temputbyteslista TO UTBYTESLISTA.
      END.
   END.
   FOR EACH temputbyteslnamn:
      DO TRANSACTION:
         CREATE UTBYTESLNAMN.
         BUFFER-COPY temputbyteslnamn TO UTBYTESLNAMN.
      END.
   END.   
   
   
   
   
   RUN FINNSTABELL.P (INPUT "HDKKOPP", OUTPUT hdbloblog).
   IF hdbloblog = TRUE THEN DO:
      RUN EXPIMPHDEXTRA.P (INPUT 2,INPUT-OUTPUT TABLE tempforlagg, INPUT-OUTPUT TABLE tempsamforlagg, INPUT-OUTPUT TABLE tempytbelagg,
                           INPUT-OUTPUT TABLE hdhandtemp,INPUT-OUTPUT TABLE hdkkopptemp).      .      
   END.
END PROCEDURE.
  

PROCEDURE delupplagg_UI :
   OPEN QUERY konstgq FOR EACH KONSTGRUPP NO-LOCK.
   DO TRANSACTION:
      GET FIRST konstgq EXCLUSIVE-LOCK.
      IF AVAILABLE KONSTGRUPP THEN DO:
         DELETE KONSTGRUPP.         
      END.  
   END.
   REPEAT:      
      DO TRANSACTION:
         GET NEXT konstgq EXCLUSIVE-LOCK.
         IF AVAILABLE KONSTGRUPP THEN DO:
            DELETE KONSTGRUPP.
         END.
         ELSE LEAVE.   
      END.
   END.                  
   CLOSE QUERY konstgq.

   OPEN QUERY aq FOR EACH BBENAMNING NO-LOCK.
   DO TRANSACTION:
      GET FIRST aq EXCLUSIVE-LOCK.
      IF AVAILABLE BBENAMNING THEN DO:
         DELETE BBENAMNING.         
      END.  
   END.
   REPEAT:      
      DO TRANSACTION:
         GET NEXT aq EXCLUSIVE-LOCK.
         IF AVAILABLE BBENAMNING THEN DO:
            DELETE BBENAMNING.
         END.
         ELSE LEAVE.   
      END.
   END.                  
   CLOSE QUERY aq.

   OPEN QUERY cq FOR EACH EDIGRUPP NO-LOCK.
   DO TRANSACTION:
      GET FIRST cq EXCLUSIVE-LOCK.
      IF AVAILABLE EDIGRUPP THEN DO:
         DELETE EDIGRUPP.         
      END.  
   END.
   REPEAT:      
      DO TRANSACTION:
         GET NEXT cq EXCLUSIVE-LOCK.
         IF AVAILABLE EDIGRUPP THEN DO:
            DELETE EDIGRUPP.
         END.
         ELSE LEAVE.   
      END.
   END.                  
   CLOSE QUERY cq.

   OPEN QUERY dq FOR EACH KONSTRUKTION NO-LOCK.
   DO TRANSACTION:
      GET FIRST dq EXCLUSIVE-LOCK.
      IF AVAILABLE KONSTRUKTION THEN DO:
         DELETE KONSTRUKTION.         
      END.  
   END.
   REPEAT:      
      DO TRANSACTION:
         GET NEXT dq EXCLUSIVE-LOCK.
         IF AVAILABLE KONSTRUKTION THEN DO:
            DELETE KONSTRUKTION.
         END.
         ELSE LEAVE.   
      END.
   END.                  
   CLOSE QUERY dq.

   OPEN QUERY eq FOR EACH KONSTVAL NO-LOCK.
   DO TRANSACTION:
      GET FIRST eq EXCLUSIVE-LOCK.
      IF AVAILABLE KONSTVAL THEN DO:
         DELETE KONSTVAL.         
      END.  
   END.
   REPEAT:      
      DO TRANSACTION:
         GET NEXT eq EXCLUSIVE-LOCK.
         IF AVAILABLE KONSTVAL THEN DO:
            DELETE KONSTVAL.
         END.
         ELSE LEAVE.   
      END.
   END.                  
   CLOSE QUERY eq.

   OPEN QUERY fq FOR EACH MTRLBER NO-LOCK.
   DO TRANSACTION:
      GET FIRST fq EXCLUSIVE-LOCK.
      IF AVAILABLE MTRLBER THEN DO:
         DELETE MTRLBER.         
      END.  
   END.
   REPEAT:      
      DO TRANSACTION:
         GET NEXT fq EXCLUSIVE-LOCK.
         IF AVAILABLE MTRLBER THEN DO:
            DELETE MTRLBER.
         END.
         ELSE LEAVE.   
      END.
   END.                  
   CLOSE QUERY fq.

   OPEN QUERY gq FOR EACH BERSTOLP NO-LOCK.
   DO TRANSACTION:
      GET FIRST gq EXCLUSIVE-LOCK.
      IF AVAILABLE BERSTOLP THEN DO:
         DELETE BERSTOLP.         
      END.  
   END.
   REPEAT:      
      DO TRANSACTION:
         GET NEXT gq EXCLUSIVE-LOCK.
         IF AVAILABLE BERSTOLP THEN DO:
            DELETE BERSTOLP.
         END.
         ELSE LEAVE.   
      END.
   END.                  
   CLOSE QUERY gq.

   OPEN QUERY hq FOR EACH BERSKAP NO-LOCK.
   DO TRANSACTION:
      GET FIRST hq EXCLUSIVE-LOCK.
      IF AVAILABLE BERSKAP THEN DO:
         DELETE BERSKAP.         
      END.  
   END.
   REPEAT:      
      DO TRANSACTION:
         GET NEXT hq EXCLUSIVE-LOCK.
         IF AVAILABLE BERSKAP THEN DO:
            DELETE BERSKAP.
         END.
         ELSE LEAVE.   
      END.
   END.                  
   CLOSE QUERY hq.
   
   OPEN QUERY iq FOR EACH KALKBER NO-LOCK.
   DO TRANSACTION:
      GET FIRST iq EXCLUSIVE-LOCK.
      IF AVAILABLE KALKBER THEN DO:
         DELETE KALKBER.         
      END.  
   END.
   REPEAT:      
      DO TRANSACTION:
         GET NEXT iq EXCLUSIVE-LOCK.
         IF AVAILABLE KALKBER THEN DO:
            DELETE KALKBER.
         END.
         ELSE LEAVE.   
      END.
   END.                
   CLOSE QUERY iq.
   
   
   OPEN QUERY ulq FOR EACH UTBYTESLISTA NO-LOCK.
   DO TRANSACTION:
      GET FIRST ulq EXCLUSIVE-LOCK.
      IF AVAILABLE UTBYTESLISTA THEN DO:
         DELETE UTBYTESLISTA.         
      END.  
   END.
   REPEAT:      
      DO TRANSACTION:
         GET NEXT ulq EXCLUSIVE-LOCK.
         IF AVAILABLE UTBYTESLISTA THEN DO:
            DELETE UTBYTESLISTA.
         END.
         ELSE LEAVE.   
      END.
   END.
   CLOSE QUERY ulq.
   OPEN QUERY unq FOR EACH UTBYTESLNAMN NO-LOCK.
   DO TRANSACTION:
      GET FIRST unq EXCLUSIVE-LOCK.
      IF AVAILABLE UTBYTESLNAMN THEN DO:
         DELETE UTBYTESLNAMN.         
      END.  
   END.
   REPEAT:      
      DO TRANSACTION:
         GET NEXT unq EXCLUSIVE-LOCK.
         IF AVAILABLE UTBYTESLNAMN THEN DO:
            DELETE UTBYTESLNAMN.
         END.
         ELSE LEAVE.   
      END.
   END.
   CLOSE QUERY unq.
     
   
   EMPTY TEMP-TABLE tempforlagg NO-ERROR. 
   EMPTY TEMP-TABLE tempsamforlagg NO-ERROR. 
   EMPTY TEMP-TABLE tempytbelagg NO-ERROR. 
   EMPTY TEMP-TABLE hdhandtemp NO-ERROR. 
   EMPTY TEMP-TABLE hdkkopptemp NO-ERROR. 
   RUN FINNSTABELL.P (INPUT "HDKKOPP", OUTPUT hdbloblog).
   IF hdbloblog = TRUE THEN DO:
      RUN EXPIMPHDEXTRA.P (INPUT 3,INPUT-OUTPUT TABLE tempforlagg, INPUT-OUTPUT TABLE tempsamforlagg, INPUT-OUTPUT TABLE tempytbelagg,
                           INPUT-OUTPUT TABLE hdhandtemp,INPUT-OUTPUT TABLE hdkkopptemp).      
   END.
      
   /*kablar*/
   FOR EACH EXTRADATA WHERE EXTRADATA.PROGRAM = "KABLAR":
      DELETE EXTRADATA.
   END.
   
   /*SLUT DELETE*/   
END PROCEDURE.
PROCEDURE skapamtrlkat_UI :   
   DEFINE INPUT PARAMETER TABLE FOR tempmtrl.

   FOR EACH tempmtrl:
      DO TRANSACTION:
         CREATE MTRL.
         BUFFER-COPY tempmtrl TO MTRL.
          {MTRLCREATE.I}
      END.
   END.
END PROCEDURE.

PROCEDURE delmtrl_UI :
   DEFINE INPUT PARAMETER valnlevmtrlkat AS CHARACTER NO-UNDO.
   /*FIND FIRST HUVUDLEV WHERE HUVUDLEV.DEP-NR = 999 NO-LOCK NO-ERROR.   
   FIND FIRST HUVUDLEV WHERE HUVUDLEV.DEP-NR = 999 NO-LOCK NO-ERROR.
   OPEN QUERY mtrlq FOR EACH MTRL WHERE MTRL.KALKNR = 0 AND 
   MTRL.LEVKOD = HUVUDLEV.LEVKOD USE-INDEX LEV NO-LOCK.
   
   */
   IF valnlevmtrlkat = "" THEN DO:
      FOR EACH LEVERANTOR WHERE LEVERANTOR.LEVKOD NE "0" AND LEVERANTOR.BORTTAG = FALSE NO-LOCK:
         IF LEVERANTOR.LEVKOD = "99" THEN.
         ELSE DO:      
            OPEN QUERY mtrlq FOR EACH MTRL WHERE MTRL.LEVKOD = LEVERANTOR.LEVKOD AND MTRL.KALKNR = 0 NO-LOCK.
            DO TRANSACTION:
               GET FIRST mtrlq EXCLUSIVE-LOCK.
               IF AVAILABLE MTRL THEN DO:
                  DELETE MTRL.         
               END.  
            END.
            REPEAT:      
               DO TRANSACTION:
                  GET NEXT mtrlq EXCLUSIVE-LOCK.
                  IF AVAILABLE MTRL THEN DO:
                     DELETE MTRL.
                  END.
                  ELSE LEAVE.   
               END.
            END.                  
            CLOSE QUERY mtrlq.
         END.   
      END.   
   END.
   ELSE DO:
      OPEN QUERY mtrlq FOR EACH MTRL WHERE MTRL.LEVKOD = valnlevmtrlkat AND MTRL.KALKNR = 0 NO-LOCK.
      
      DO TRANSACTION:
         GET FIRST mtrlq EXCLUSIVE-LOCK.
         IF AVAILABLE MTRL THEN DO:
            DELETE MTRL.         
         END.  
      END.
      REPEAT:      
         DO TRANSACTION:
            GET NEXT mtrlq EXCLUSIVE-LOCK.
            IF AVAILABLE MTRL THEN DO:
               DELETE MTRL.
            END.
            ELSE LEAVE.   
         END.
      END.                  
      CLOSE QUERY mtrlq.
   END.   
END PROCEDURE.

PROCEDURE skapaimp_UI :
   DEFINE INPUT PARAMETER TABLE FOR temp_ber.
   DEFINE INPUT PARAMETER TABLE FOR tempberval.
   DEFINE INPUT PARAMETER TABLE FOR tempberord.
   DEFINE INPUT PARAMETER TABLE FOR tempfrikort.
   DEFINE INPUT PARAMETER TABLE FOR tempberid.
   DEFINE INPUT PARAMETER TABLE FOR tempberkalk.
   DEFINE INPUT PARAMETER TABLE FOR tempbermtrl.
   DEFINE INPUT PARAMETER TABLE FOR tempberlinkab.
   DEFINE INPUT PARAMETER TABLE FOR tempkskydd.
   DEFINE INPUT PARAMETER TABLE FOR tempberupp.
   DEFINE INPUT PARAMETER TABLE FOR tempberid2.
   DEFINE INPUT PARAMETER TABLE FOR tempberpunkt.

   FOR EACH temp_ber:
      DO TRANSACTION:
         CREATE BEREDNING.
         BUFFER-COPY temp_ber TO BEREDNING.
      END.
   END.
   FOR EACH tempberval:
      DO TRANSACTION:
         CREATE BERVAL.
         BUFFER-COPY tempberval TO BERVAL.
      END.
   END.
   FOR EACH tempberord:
      DO TRANSACTION:
         CREATE BERORD.
         BUFFER-COPY tempberord TO BERORD.
      END.
   END.
   FOR EACH tempfrikort:
      DO TRANSACTION:
         CREATE FRIKORT.
         BUFFER-COPY tempfrikort TO FRIKORT.
      END.
   END.
   FOR EACH tempberid:
      DO TRANSACTION:
         CREATE BERID.
         BUFFER-COPY tempberid TO BERID.
      END.
   END.
   FOR EACH tempberid2:
      DO TRANSACTION:
         CREATE BERID2.
         BUFFER-COPY tempberid2 TO BERID2.
      END.
   END.
   FOR EACH tempberkalk:
      DO TRANSACTION:
         CREATE BERKALK.
         BUFFER-COPY tempberkalk TO BERKALK.
      END.
   END.
   FOR EACH tempbermtrl:
      DO TRANSACTION:
         CREATE BERMTRL.
         BUFFER-COPY tempbermtrl TO BERMTRL.
      END.
   END.
   FOR EACH tempberlinkab:
      DO TRANSACTION:
         CREATE BERLINKAB.
         BUFFER-COPY tempberlinkab TO BERLINKAB.
      END.
   END.
   FOR EACH tempkskydd:
      DO TRANSACTION:
         CREATE KSKYDD.
         BUFFER-COPY tempkskydd TO KSKYDD.
      END.
   END.
   FOR EACH tempberupp:
      DO TRANSACTION:
         CREATE BERUPP.
         BUFFER-COPY tempberupp TO BERUPP.
      END.
   END.
   FOR EACH tempberpunkt WHERE NO-LOCK:
      
      DO TRANSACTION:
         CREATE BERPUNKT.
         BUFFER-COPY tempberpunkt TO BERPUNKT.
      END.
   END.

END PROCEDURE.


PROCEDURE kexpimp_UI :
   DEFINE INPUT PARAMETER valbernr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER finns AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER finns2 AS LOGICAL NO-UNDO.
   FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = valomrade NO-LOCK NO-ERROR.
   IF AVAILABLE OMRADETAB THEN DO:
      finns2 = TRUE.
   END.
   ELSE DO:
      finns2 = FALSE.
   END.
   FIND FIRST BEREDNING WHERE BEREDNING.BERNR = valbernr AND
   BEREDNING.OMRADE = valomrade USE-INDEX BERNR NO-LOCK NO-ERROR.
   IF AVAILABLE BEREDNING THEN finns = TRUE.
   ELSE finns = FALSE.
END PROCEDURE.

PROCEDURE delberanv_UI :
   DEFINE INPUT PARAMETER beraonr AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER beromrade AS CHARACTER NO-UNDO.   
   DO TRANSACTION:
      FIND FIRST BERANV WHERE BERANV.AONR = beraonr AND 
      BERANV.OMRADE = beromrade EXCLUSIVE-LOCK NO-ERROR.
      IF AVAILABLE BERANV THEN DELETE BERANV.
   END.                     
END PROCEDURE.

PROCEDURE nybere_UI :
   DEFINE INPUT PARAMETER varomrade AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER nyttnr AS INTEGER NO-UNDO.
   FIND LAST BEREDNING WHERE BEREDNING.OMRADE = varomrade
   USE-INDEX BERNR NO-LOCK NO-ERROR.
   IF AVAILABLE BEREDNING THEN nyttnr = BEREDNING.BERNR + 1.
   ELSE nyttnr = 1. 
END PROCEDURE.

PROCEDURE delbere_UI :
   DEFINE INPUT PARAMETER varbernr AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER varomrade AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR eberedningtemp.
   EMPTY TEMP-TABLE eberedningtemp NO-ERROR. 
   /*aonr bort mm*/
   DO TRANSACTION:
      FIND BEREDNING WHERE BEREDNING.BERAONR = varbernr AND 
      BEREDNING.OMRADE = varomrade EXCLUSIVE-LOCK NO-ERROR.
      IF AVAILABLE BEREDNING THEN DO:
         CREATE eberedningtemp.
         BUFFER-COPY BEREDNING TO eberedningtemp.
         DELETE BEREDNING.
      END.
   END.   
END PROCEDURE.

PROCEDURE beranv_UI:
   DEFINE INPUT PARAMETER beraonr AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER beromrade AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER globanv2 AS CHARACTER NO-UNDO.
   DO TRANSACTION:
      FIND FIRST BERANV WHERE BERANV.AONR = beraonr AND BERANV.OMRADE = beromrade AND 
      TRIM(SUBSTRING(BERANV.ANVANDARE,1,40)) = globanv2 EXCLUSIVE-LOCK NO-ERROR.    
      IF NOT AVAILABLE BERANV THEN DO:
         CREATE BERANV.
      END.
      ASSIGN                     
      BERANV.AONR = beraonr
      BERANV.OMRADE = beromrade
      BERANV.ANVANDARE = globanv2
      SUBSTRING(BERANV.ANVANDARE,50,6) = "Export".               
      /*
      REPEAT WHILE LENGTH(BERANV.ANVANDARE) < 49:
          BERANV.ANVANDARE = BERANV.ANVANDARE + " ".                   
      END.
      */
      
   END.   
   RELEASE BERANV.   
END.

PROCEDURE typval_UI :
   DEFINE INPUT PARAMETER varomrade AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER varbernr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER typval AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER typdator AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER TOG_BER AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER globanv2 AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR felmeddtemp.
   EMPTY TEMP-TABLE felmeddtemp NO-ERROR. 
   FIND FIRST BEREDNING WHERE BEREDNING.OMRADE = varomrade AND 
   BEREDNING.BERNR = varbernr NO-LOCK NO-ERROR.
   FIND FIRST BERANV WHERE BERANV.AONR = BEREDNING.BERAONR AND 
   BERANV.OMRADE = BEREDNING.OMRADE NO-LOCK NO-ERROR.
   IF AVAILABLE BERANV THEN DO:
      IF SUBSTRING(BERANV.ANVANDARE,50,6) = "Export" THEN DO:
         IF ENTRY(1,BERANV.ANVANDARE," ") = globanv2 THEN DO:
            CREATE felmeddtemp.
            ASSIGN felmeddtemp.FELMEDD = "Beredningen är redan exporterad. Vill Ni skriva över den gamla filen?".                  
         END.
         ELSE DO:
            FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = ENTRY(1,BERANV.ANVANDARE," ")
            NO-LOCK NO-ERROR.
            IF AVAILABLE ANVANDARE THEN DO:
               CREATE felmeddtemp.
               ASSIGN felmeddtemp.FELMEDD = "Beredningen är redan exporterad. Utfärdare är " + ANVANDARE.AV-NAMN + 
               " och benämningen är: ( " + BEREDNING.BENAMNING + " ) . Vill Ni skriva över den gamla filen?".                     
            END.
            ELSE DO:
               CREATE felmeddtemp.
               ASSIGN felmeddtemp.FELMEDD = "Beredningen är redan exporterad. Utfärdare är " + ENTRY(1,BERANV.ANVANDARE," ") + 
               " och benämningen är: ( " + BEREDNING.BENAMNING + " ) . Vill Ni skriva över den gamla filen?".                     
            END.                                    
         END.
      END.
   END.         
END PROCEDURE.

PROCEDURE typval2_UI :
   DEFINE INPUT PARAMETER varomrade AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER varbernr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER TOG_BER AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_UPP2 AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR felmeddtemp.
   EMPTY TEMP-TABLE felmeddtemp NO-ERROR. 
   FIND FIRST BEREDNING WHERE BEREDNING.BERAONR = STRING(varbernr) AND 
   BEREDNING.OMRADE = varomrade NO-LOCK NO-ERROR.
   FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = BEREDNING.ANVANDARE
   NO-LOCK NO-ERROR.
   FIND FIRST BERANV WHERE BERANV.AONR = STRING(varbernr) AND BERANV.OMRADE = varomrade
   NO-LOCK NO-ERROR.
   IF AVAILABLE BERANV THEN DO:
      IF SUBSTRING(BERANV.ANVANDARE,50,6) = "Export" THEN DO:
         IF AVAILABLE ANVANDARE THEN DO: 
            CREATE felmeddtemp.
            ASSIGN felmeddtemp.FELMEDD = "Det finns redan en beredning med nr: " + STRING(varbernr) + "." + CHR(10) +
                " Beredningen är exporterad. Utfärdare är " + ANVANDARE.AV-NAMN + "." + CHR(10) +
                " Benämningen är " + BEREDNING.BENAMNING + "." + CHR(10) + 
                " Vill Ni skriva över den beredningen?"
            felmeddtemp.VAL = 1.
            RETURN.
         END.
         ELSE DO:
            CREATE felmeddtemp.
            ASSIGN felmeddtemp.FELMEDD = "Det finns redan en beredning med nr: " + STRING(varbernr) + "." + CHR(10) +
            " Beredningen är exporterad. Utfärdare är " + ENTRY(1,BERANV.ANVANDARE," ") + "." + CHR(10) +
            " Benämningen är " + BEREDNING.BENAMNING + "." + CHR(10) +
            " Vill Ni skriva över den beredningen?"
            felmeddtemp.VAL = 1.
            RETURN.
         END.
      END.
      ELSE DO:
         IF AVAILABLE ANVANDARE THEN DO:
            CREATE felmeddtemp.
            ASSIGN felmeddtemp.FELMEDD = "Det finns redan en beredning med nr: " + STRING(varbernr) + "." + CHR(10) +
            " som ej är exporterad. Utfärdare är " + ANVANDARE.AV-NAMN + "." + CHR(10) +
            " Benämningen är " + BEREDNING.BENAMNING + "." + CHR(10) +
            " Vill Ni skriva över den beredningen?"
            felmeddtemp.VAL = 2.
            RETURN.
         END.
         ELSE DO:
            CREATE felmeddtemp.
            ASSIGN felmeddtemp.FELMEDD = "Det finns redan en beredning med nr: " + STRING(varbernr) + "." + CHR(10) +
            " som ej är exporterad. Utfärdare är " + ENTRY(1,BERANV.ANVANDARE," ") + "." + CHR(10) +
            " Benämningen är " + BEREDNING.BENAMNING + "." + CHR(10) +
            " Vill Ni skriva över den beredningen?"
            felmeddtemp.VAL = 2.
            RETURN.         
         END.         
      END.
   END. 
END PROCEDURE.

PROCEDURE bortberkopp_UI :
   DEFINE INPUT PARAMETER varomrade AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER varbernr AS INTEGER NO-UNDO. 
   DEFINE INPUT PARAMETER valimpomrade AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER nyttnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER tempaonr AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER tempdelnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR felmeddtemp.
   EMPTY TEMP-TABLE felmeddtemp NO-ERROR. 
   ASSIGN
   tempaonr = ?  
   tempdelnr = ?.
   FIND FIRST BEREDNING WHERE BEREDNING.OMRADE = valimpomrade AND
   BEREDNING.BERNR = nyttnr USE-INDEX BERNR NO-LOCK NO-ERROR.
   IF AVAILABLE BEREDNING AND BEREDNING.AONR NE ? THEN DO:
      ASSIGN
      tempaonr = BEREDNING.AONR
      tempdelnr = BEREDNING.DELNR. 
      FIND FIRST BEREDNING WHERE BEREDNING.AONR = tempaonr AND
      BEREDNING.DELNR = tempdelnr AND BEREDNING.BERNR NE nyttnr 
      NO-LOCK NO-ERROR.
      IF AVAILABLE BEREDNING THEN DO TRANSACTION:
         FIND FIRST BEREDNING WHERE BEREDNING.OMRADE = valimpomrade AND
         BEREDNING.BERNR = nyttnr USE-INDEX BERNR EXCLUSIVE-LOCK NO-ERROR.
         IF AVAILABLE BEREDNING THEN DO:
            ASSIGN
            BEREDNING.AONR = ?
            BEREDNING.DELNR = ?.
            CREATE felmeddtemp.
            ASSIGN felmeddtemp.FELMEDD = "Koppling till " + LC(Guru.Konstanter:gaok)+ " har blivit borttagen.".    
         END.
      END.
   END.
   RUN delberanv_UI (INPUT nyttnr,INPUT varomrade).
END PROCEDURE.


PROCEDURE bortberkopp2_UI :
   DEFINE INPUT PARAMETER varomrade AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER varbernr AS INTEGER NO-UNDO. 
   DEFINE OUTPUT PARAMETER TABLE FOR felmeddtemp.
   EMPTY TEMP-TABLE felmeddtemp NO-ERROR.    
   FIND FIRST BEREDNING WHERE BEREDNING.OMRADE = varomrade AND
   BEREDNING.BERNR = varbernr USE-INDEX BERNR EXCLUSIVE-LOCK NO-ERROR.
   IF AVAILABLE BEREDNING THEN DO:
      ASSIGN
      BEREDNING.AONR = ?
      BEREDNING.DELNR = ?.
      CREATE felmeddtemp.
      ASSIGN felmeddtemp.FELMEDD = "Koppling till " + LC(Guru.Konstanter:gaok)+ " har blivit borttagen.".             
   END.   
END PROCEDURE.


PROCEDURE berfromao_UI :
   DEFINE INPUT  PARAMETER aonrvar AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER delnrvar AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER bernrvar AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER beromrvar AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER aofinns AS LOGICAL NO-UNDO.
   
   FIND FIRST AONRTAB WHERE AONRTAB.AONR = aonrvar AND AONRTAB.DELNR = delnrvar NO-LOCK NO-ERROR.
   
   IF NOT AVAILABLE AONRTAB THEN DO:
      aofinns = FALSE.
      bernrvar = 0.
      beromrvar = "". 
   END.
   ELSE DO:
      aofinns = TRUE.
      FIND FIRST BEREDNING WHERE BEREDNING.AONR = aonrvar AND BEREDNING.DELNR = delnrvar NO-LOCK NO-ERROR. 
   
      IF AVAILABLE BEREDNING THEN DO:
         ASSIGN
         bernrvar = BEREDNING.BERNR
         beromrvar = BEREDNING.OMRADE.   
      END.
      ELSE DO:
         bernrvar = 0.
         beromrvar = "".   
      END.   
   END.
   
   
END PROCEDURE.

PROCEDURE inkopkoll_UI :
   DEFINE INPUT PARAMETER valaonr AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER inkop AS LOGICAL NO-UNDO.
   DEFINE VARIABLE inkberh AS HANDLE NO-UNDO.
   DEFINE VARIABLE tabfinns AS LOGICAL NO-UNDO.
   FIND FIRST BERMTRL WHERE BERMTRL.OMRADE = valomrade AND BERMTRL.AONR = valaonr AND BERMTRL.INKOP = TRUE NO-LOCK NO-ERROR.
   IF AVAILABLE BERMTRL THEN inkop = TRUE.
     
   RUN FINNSTABELL.P (INPUT "INKBER", OUTPUT tabfinns).
   
   IF tabfinns THEN DO:
      RUN INKBERAPP.P PERSISTENT SET inkberh. 
      RUN inkfinnsbernr_UI IN inkberh (INPUT valaonr, INPUT valomrade, OUTPUT inkop).        
   END.
   
   IF VALID-HANDLE(inkberh) THEN DO: 
      RUN InkAvs_UI IN inkberh.
      DELETE PROCEDURE inkberh NO-ERROR.
   END.     
END PROCEDURE.

PROCEDURE typval3_UI :
   DEFINE INPUT PARAMETER varbernr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER varomrade AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR felmeddtemp.
   EMPTY TEMP-TABLE felmeddtemp NO-ERROR. 
   FIND FIRST BEREDNING WHERE BEREDNING.BERNR = varbernr AND 
   BEREDNING.OMRADE = varomrade NO-LOCK NO-ERROR.
   IF AVAILABLE BEREDNING THEN DO:                  
      FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = BEREDNING.ANVANDARE
      NO-LOCK NO-ERROR.
      IF AVAILABLE ANVANDARE THEN DO:  
         CREATE felmeddtemp.
         ASSIGN felmeddtemp.FELMEDD = "Det finns redan en beredning med nr: " + STRING(varbernr) +
         ". Utfärdare är " + ANVANDARE.AV-NAMN + 
         ". Benämningen är " + BEREDNING.BENAMNING + ". Vill Ni skriva över den beredningen?".
         RETURN.
      END.
      ELSE DO:
         CREATE felmeddtemp.
         ASSIGN felmeddtemp.FELMEDD = "Det finns redan en beredning med nr: " + STRING(varbernr) +
         ". Utfärdare är " + BEREDNING.ANVANDARE + 
         ". Benämningen är " + BEREDNING.BENAMNING + ". Vill Ni skriva över den beredningen?".
         RETURN.
      END.
   END.
   ELSE DO:
      CREATE felmeddtemp.
      felmeddtemp.VAL = 1.
   END.
END PROCEDURE.
      
PROCEDURE hamtlev_UI :
   DEFINE INPUT PARAMETER valomrade AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valbernr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER levnamnex AS CHARACTER NO-UNDO.
   DEFINE VARIABLE lkod AS CHARACTER NO-UNDO.   
   FIND FIRST BETFRIA WHERE BETFRIA.FAKTTEXT = valomrade AND
   BETFRIA.BETNR = valbernr NO-LOCK NO-ERROR. 
   IF AVAILABLE BETFRIA THEN lkod = BETFRIA.TYP.         
   ELSE lkod = "".
   
   IF lkod = "" THEN DO:
      FIND FIRST HUVUDLEV WHERE HUVUDLEV.DEP-NR = 999 NO-LOCK NO-ERROR.
      IF AVAILABLE HUVUDLEV THEN DO:
         ASSIGN  lkod = HUVUDLEV.LEVKOD.
      END.
      ELSE DO:
         FIND FIRST LEVERANTOR WHERE LEVERANTOR.LEVKOD NE "0" AND LEVERANTOR.LEVKOD NE "99"
         AND LEVERANTOR.BORTTAG = FALSE NO-LOCK NO-ERROR.
         ASSIGN  lkod = LEVERANTOR.LEVKOD.
      END.                     
   END.      
   FIND FIRST LEVERANTOR WHERE LEVERANTOR.LEVKOD = lkod NO-LOCK NO-ERROR.
   levnamnex = LEVERANTOR.LEVNAMN.
END PROCEDURE.   

