DEFINE TEMP-TABLE ao-temp NO-UNDO LIKE ANVANDARE.
DEFINE TEMP-TABLE ptemp NO-UNDO LIKE PERSONALTAB.
FOR EACH ANVANDARE NO-LOCK:
   CREATE ao-temp.
   BUFFER-COPY ANVANDARE TO ao-temp.
END.
FOR EACH PERSONALTAB NO-LOCK:
   CREATE ptemp.
   BUFFER-COPY PERSONALTAB TO ptemp.
END.

DEFINE VARIABLE hBuf AS HANDLE NO-UNDO.
DEFINE VARIABLE dynxml AS HANDLE NO-UNDO.
RUN XMLUTDYN.P PERSISTENT SET dynxml.
/*
hBuf = BUFFER ao-temp:HANDLE.
RUN xmlutstart_UI IN dynxml (INPUT hbuf,INPUT hBuf:TABLE,INPUT "start", INPUT "FOR EACH ",INPUT "C:\PROTEMP9\stest.xml").
hBuf = BUFFER ptemp:HANDLE.
RUN xmlutstart_UI IN dynxml (INPUT hbuf,INPUT hBuf:TABLE ,INPUT "", INPUT "FOR EACH ",INPUT "").


*/
DEFINE TEMP-TABLE intemp NO-UNDO
    FIELD ORGTH AS HANDLE
    FIELD NODTAB AS CHARACTER.
CREATE intemp.
ASSIGN
intemp.ORGTH = BUFFER ptemp:HANDLE. 
intemp.NODTAB = intemp.ORGTH:NAME.
CREATE intemp.
ASSIGN
intemp.ORGTH = BUFFER ao-temp:HANDLE. 
intemp.NODTAB = intemp.ORGTH:NAME.


EMPTY TEMP-TABLE ao-temp NO-ERROR. 
EMPTY TEMP-TABLE ptemp NO-ERROR. 

RUN xmlinstart_UI IN dynxml (INPUT TABLE intemp,INPUT "C:\PROTEMP9\stest.xml").
RUN xmlslut_UI IN dynxml.
FOR EACH ao-temp:
  DISP ao-temp.anvandare.
END.
FOR EACH ptemp:
   DISP ptemp.personalkod.
END.

IF VALID-HANDLE(dynxml) THEN DELETE PROCEDURE dynxml.    

RUN OPENDOC.P ("C:\PROTEMP9\stest.xml","","",NO).
