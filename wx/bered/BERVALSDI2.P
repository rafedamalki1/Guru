/*BERVALSDI2.P*/
/*
DEFINE VARIABLE logprogh AS HANDLE NO-UNDO.
RUN BORTLOGG.P PERSISTENT SET logprogh.
FILE-INFO:FILE-NAME = TRIM(SUBSTRING(PROGRA-M-NAME(1),INDEX(PROGRAM-NAME(1),"_UI") + 3)).
RUN loggskap_UI IN logprogh (INPUT 2,INPUT SUBSTRING(FILE-INFO:FILE-NAME,(R-INDEX(FILE-INFO:FILE-NAME,"\") + 1)), INPUT "WCCH2", INPUT "").
*/

&SCOPED-DEFINE NEW NEW
&SCOPED-DEFINE SHARED SHARED
{BLOB.I}
/*Anders Olsson Elpool i Umeå AB  2 okt 2018 10:05:04 
FÖR BERDS 
*/

{ORD_TEMP.I}

&SCOPED-DEFINE NEW 
&SCOPED-DEFINE SHARED 
{ALLDEF.I}
&Scoped-define SHARED SHARED 

{INKSUMBERTEMP.I}
DEFINE SHARED VARIABLE brwNrandkonst AS INTEGER NO-UNDO.
DEFINE VARIABLE BeredClasserStart AS HANDLE NO-UNDO. 
DEFINE VARIABLE KalkClasserStart AS HANDLE NO-UNDO.
DEFINE VARIABLE stoppasnabbspar  AS LOGICAL NO-UNDO.
DEFINE VARIABLE inkberh AS HANDLE NO-UNDO.
DEFINE VARIABLE blobproch AS HANDLE NO-UNDO.   
DEFINE VARIABLE snabbsparfix AS INTEGER NO-UNDO.
DEFINE VARIABLE snabbsparapagar AS LOGICAL NO-UNDO.
&Scoped-define NEW 
&Scoped-define SHARED
{GLOBVAR2DEL1.I}

{DEFSOK.I}
{pdf_StartInc.i}
{BERVALSWID.I}

{BERIDTEMP.I}
{MTTEMP.I}
{KSKBYTTEMP.I}
DEFINE VARIABLE fildir AS CHARACTER NO-UNDO.
DEFINE VARIABLE mappvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE felfil AS CHARACTER NO-UNDO.

DEFINE TEMP-TABLE sorttt NO-UNDO
    FIELD RID AS ROWID. 
DEFINE TEMP-TABLE deltemp NO-UNDO
   FIELD KONSKOD AS INTEGER
   FIELD LINJE AS CHARACTER
   FIELD ARBETA AS LOGICAL INITIAL FALSE
   INDEX KONSKOD KONSKOD
   INDEX LINJE LINJE.

DEFINE TEMP-TABLE bildkomb NO-UNDO
   FIELD NUM AS INTEGER
   FIELD BILD AS CHARACTER
   FIELD KOMB AS CHARACTER
   INDEX NUM NUM.
{BeredDS.I}   
DEFINE SHARED VARIABLE entrymtrlantalskap AS LOGICAL NO-UNDO.  
DEFINE SHARED VARIABLE slutaejnu AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE nettoh AS HANDLE NO-UNDO.
DEFINE SHARED VARIABLE btnkskapmtrlh AS HANDLE NO-UNDO.
DEFINE BUFFER linbuff FOR upp_tab2.
DEFINE BUFFER konbuff FOR kon_val.
DEFINE BUFFER idbuff FOR kon_id.
DEFINE BUFFER listbuff FOR list_mtrl.
DEFINE BUFFER konsttempbuff FOR konsttemp.
DEFINE VARIABLE berfortemph   AS HANDLE.
DEFINE VARIABLE berlinjetemph  AS HANDLE.
DEFINE VARIABLE bernattemph   AS HANDLE.
DEFINE VARIABLE berstolptemph  AS HANDLE.
DEFINE VARIABLE bildbertemph  AS HANDLE.
DEFINE VARIABLE fastanmtemph AS HANDLE.
DEFINE VARIABLE konstgrptemph  AS HANDLE.
DEFINE VARIABLE konsttemph AS HANDLE.
DEFINE VARIABLE konstvaltemph  AS HANDLE.
DEFINE VARIABLE mtrltemph AS HANDLE.
DEFINE VARIABLE soktamtrlfavoh AS HANDLE NO-UNDO.
DEFINE VARIABLE satstemph AS HANDLE.
DEFINE VARIABLE kalk_temph AS HANDLE.
DEFINE VARIABLE list_mtrlh  AS HANDLE.
DEFINE VARIABLE kon_valh  AS HANDLE.
DEFINE VARIABLE andrakon_valh  AS HANDLE.
DEFINE VARIABLE startaejmtrl AS LOGICAL NO-UNDO.
DEFINE VARIABLE numunik     AS INTEGER NO-UNDO.
DEFINE VARIABLE tab1var AS LOGICAL NO-UNDO.
DEFINE VARIABLE levinlast AS CHARACTER NO-UNDO.
DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.
DEFINE VARIABLE andrakon_rowid AS ROWID NO-UNDO.
DEFINE VARIABLE kalkbefh AS HANDLE NO-UNDO.
DEFINE VARIABLE spartidvar AS INTEGER NO-UNDO.

DEFINE VARIABLE Snabbspara AS WIDGET-HANDLE NO-UNDO.
DEFINE VARIABLE chSnabbspara AS COMPONENT-HANDLE NO-UNDO.
DEFINE TEMP-TABLE flygnrtemp NO-UNDO LIKE kon_val2 FIELD ENR AS CHARACTER.
DEFINE VARIABLE logresult AS LOGICAL NO-UNDO.
DEFINE VARIABLE senr AS CHARACTER NO-UNDO.
DEFINE VARIABLE slev AS CHARACTER NO-UNDO.
DEFINE VARIABLE spris AS DECIMAL NO-UNDO.
DEFINE VARIABLE karea AS INTEGER NO-UNDO.
DEFINE VARIABLE barea AS CHARACTER NO-UNDO.
DEFINE VARIABLE b2roworg AS DECIMAL NO-UNDO.
DEFINE VARIABLE b2colorg AS DECIMAL NO-UNDO.
DEFINE VARIABLE b4roworg AS DECIMAL NO-UNDO.
DEFINE VARIABLE b4colorg AS DECIMAL NO-UNDO.
DEFINE VARIABLE b5roworg AS DECIMAL NO-UNDO.
DEFINE VARIABLE b5colorg AS DECIMAL NO-UNDO.
DEFINE VARIABLE fb2roworg AS DECIMAL NO-UNDO.
DEFINE VARIABLE fb2colorg AS DECIMAL NO-UNDO.
DEFINE VARIABLE fb4roworg AS DECIMAL NO-UNDO.
DEFINE VARIABLE fb4colorg AS DECIMAL NO-UNDO.
DEFINE VARIABLE fb5roworg AS DECIMAL NO-UNDO.
DEFINE VARIABLE fb5colorg AS DECIMAL NO-UNDO.
DEFINE VARIABLE antalinkvar AS DECIMAL NO-UNDO.
DEFINE VARIABLE aoprio AS INTEGER NO-UNDO.
{EXTRADATA.I}
berfortemph = TEMP-TABLE  berfortemp:DEFAULT-BUFFER-HANDLE.
berlinjetemph = TEMP-TABLE  berlinjetemp:DEFAULT-BUFFER-HANDLE.
bernattemph = TEMP-TABLE  bernattemp:DEFAULT-BUFFER-HANDLE.
berstolptemph = TEMP-TABLE  berstolptemp:DEFAULT-BUFFER-HANDLE.
bildbertemph = TEMP-TABLE  bildbertemp:DEFAULT-BUFFER-HANDLE.
fastanmtemph = TEMP-TABLE  fastanmtemp:DEFAULT-BUFFER-HANDLE.
konstgrptemph = TEMP-TABLE  konstgrptemp:DEFAULT-BUFFER-HANDLE.
konsttemph = TEMP-TABLE  konsttemp:DEFAULT-BUFFER-HANDLE.
konstvaltemph = TEMP-TABLE  konstvaltemp:DEFAULT-BUFFER-HANDLE.
mtrltemph = TEMP-TABLE  mtrltemp:DEFAULT-BUFFER-HANDLE.
satstemph = TEMP-TABLE  satstemp:DEFAULT-BUFFER-HANDLE.
kalk_temph = TEMP-TABLE  kalk_temp:DEFAULT-BUFFER-HANDLE.
list_mtrlh = TEMP-TABLE  list_mtrl:DEFAULT-BUFFER-HANDLE.
kon_valh = TEMP-TABLE  kon_val:DEFAULT-BUFFER-HANDLE.
andrakon_valh = TEMP-TABLE  andrakon_val:DEFAULT-BUFFER-HANDLE.

{BERVALSEL.I}
 
framesizeh = framesizeextrah.
/*TRIGG*/
ON 'MOUSE-MENU-CLICK' OF BRW_B2 PERSISTENT RUN bildbrwb2_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_B2 PERSISTENT RUN andbrwb2_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK' OF BRW_B3 PERSISTENT RUN bildbrwb3_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_B3 PERSISTENT RUN andbrwb3_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK' OF BRW_B4 PERSISTENT RUN bildbrwb4_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK' OF BRW_B5 PERSISTENT RUN bildbrwb5_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_B5 PERSISTENT RUN andbrwb5_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK' OF BRW_B6 PERSISTENT RUN bildbrwb6_UI IN THIS-PROCEDURE.


ON 'VALUE-CHANGED' OF BRW_HLEV PERSISTENT RUN vcbhlevm_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK' OF BRW_HLEV PERSISTENT RUN dbclickbrwhlev_UI  IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK' OF BRW_SOKMTRLF  PERSISTENT RUN dbclickbrwhlev_UI  IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK' OF BRW_ANM PERSISTENT RUN btnfast_UI  IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK' OF BRW_KB2 PERSISTENT RUN bildbrwkb2_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK' OF BRW_KB3 PERSISTENT RUN bildbrwkb3_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK' OF BRW_KB4 PERSISTENT RUN bildbrwkb4_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK' OF BRW_KB5 PERSISTENT RUN bildbrwkb5_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK' OF BRW_KB6 PERSISTENT RUN bildbrwkb6_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK' OF BRW_KON PERSISTENT RUN bildbrwkon_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_KON PERSISTENT RUN brwkon_UI IN THIS-PROCEDURE.
/*
ON 'VALUE-CHANGED' OF BRW_KONANDKONST PERSISTENT RUN brwkon_UI IN THIS-PROCEDURE.
*/

ON 'MOUSE-SELECT-DBLCLICK' OF BRW_MTRL  PERSISTENT RUN bortmtrl_UI  IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_MTRL PERSISTENT RUN vbrwmtrl_UI IN THIS-PROCEDURE.
ON 'ROW-LEAVE' OF BRW_MTRL PERSISTENT RUN rowlbrwmtrl_UI IN THIS-PROCEDURE.


ON 'MOUSE-SELECT-DBLCLICK' OF BRW_SATS PERSISTENT RUN dbclickbrwsats_UI  IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK' OF BRW_STOLP PERSISTENT RUN btnover_UI  IN THIS-PROCEDURE.

ON 'VALUE-CHANGED' OF BRW_TAB1 PERSISTENT RUN tab1_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_TAB2 PERSISTENT RUN vtab2_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_TAB3 PERSISTENT RUN vtab3_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK' OF BRW_VAL PERSISTENT RUN info_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK' OF BRW_VAL PERSISTENT RUN mdval_UI IN THIS-PROCEDURE.

ON 'VALUE-CHANGED' OF BRW_VAL PERSISTENT RUN vcbrwval_UI IN THIS-PROCEDURE.
ON 'ENTRY' OF BRW_VAL PERSISTENT RUN vcbrwval_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_STOLP PERSISTENT RUN vcbrwstolp_UI IN THIS-PROCEDURE.
/*
ON 'ENTRY' OF BRW_STOLP PERSISTENT RUN vcbrwstolp_UI IN THIS-PROCEDURE.
*/
ON 'CHOOSE' OF BTN_ALLTMTRL PERSISTENT RUN alltbort_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_ANL PERSISTENT RUN btnanl_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_ANTAL PERSISTENT RUN btnant_UI IN THIS-PROCEDURE.
ON 'SELECTION' OF listmtrlantal PERSISTENT RUN sellma_UI IN THIS-PROCEDURE.
ON 'ENTRY' OF listmtrlantal PERSISTENT RUN entrylma_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF listmtrlantal PERSISTENT RUN leavemtrl_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-CLICK' OF listmtrlantal PERSISTENT RUN mlma_UI IN THIS-PROCEDURE.

ON 'CHOOSE' OF BTN_AVB PERSISTENT RUN btnavb_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_BACK PERSISTENT RUN bortmtrl_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_BORT2 PERSISTENT RUN bortkalk_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_BORTA PERSISTENT RUN btnborta_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_HMT PERSISTENT RUN btnhmt_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_KOPPANM PERSISTENT RUN btnkoppanm_UI IN THIS-PROCEDURE.  
ON 'CHOOSE' OF BTN_KOPPID PERSISTENT RUN koppid_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_NASTKONID PERSISTENT RUN nextkonstID_UI IN THIS-PROCEDURE.

ON 'CHOOSE' OF BTN_BORTKOPPID PERSISTENT RUN koppidbort_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_LEV PERSISTENT RUN btnlev_UI IN THIS-PROCEDURE. /*ÅTERHUVUDL*/
ON 'CHOOSE' OF BTN_LINKAB PERSISTENT RUN btnlink_UI IN THIS-PROCEDURE.

ON 'CHOOSE' OF BTN_NER PERSISTENT RUN btnner_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_NOLL PERSISTENT RUN btnnoll_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_NY PERSISTENT RUN btnny_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_NYA PERSISTENT RUN btnnya_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_BILDCOPY PERSISTENT RUN btncopybild_UI IN THIS-PROCEDURE.

ON 'CHOOSE' OF BTN_NYKOD PERSISTENT RUN btnnykod_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_GRUNDUPP PERSISTENT RUN btnhmtkalkkod_UI IN THIS-PROCEDURE.

ON 'CHOOSE' OF BTN_OK PERSISTENT RUN btnok_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_INK PERSISTENT RUN startaink_UI IN THIS-PROCEDURE.

ON 'CHOOSE' OF MBTN_SCHAKT PERSISTENT RUN startaschakt_UI IN THIS-PROCEDURE.

ON 'CHOOSE' OF BTN_ORDNER PERSISTENT RUN btnordner_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_ORDUPP PERSISTENT RUN btnordupp_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_OVER PERSISTENT RUN btnover_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_OVER-2 PERSISTENT RUN btnfast_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_PAR PERSISTENT RUN btnpar_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_SATS PERSISTENT RUN btnsats_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_SOLEN PERSISTENT RUN solen_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_SPEC PERSISTENT RUN btnspec_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_TEXT PERSISTENT RUN btntext_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_UPP PERSISTENT RUN vadupp_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_VISA PERSISTENT RUN btnvisa_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF CMB_AVD PERSISTENT RUN cmbavd_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF CMB_JURP PERSISTENT RUN cmbjp_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF CMB_LEV PERSISTENT RUN cmblev_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF CMB_VAL PERSISTENT RUN cmbval_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF CMB_VALANDKONST PERSISTENT RUN cmbvalandkonst_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF ED_ANM PERSISTENT RUN btnkoppanm_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_ANDORD PERSISTENT RUN fbtandord_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF FBTN_FRIKORT PERSISTENT RUN fbtfrik_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF FBTN_KOPI PERSISTENT RUN fbtnkopi_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF FBTN_KSKAP PERSISTENT RUN fbtnkskap_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF FBTN_UPPL PERSISTENT RUN btnuppl_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF FBTN_LIN PERSISTENT RUN fbtnlin_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF FBTN_SNABB PERSISTENT RUN fbtnsnabb_UI IN THIS-PROCEDURE.

ON CTRL-S OF WINDOW-3 ANYWHERE DO:
   RUN fbtnsnabb_UI IN THIS-PROCEDURE.
END.
 
ON 'ANY-KEY':U OF FILL-IN-BEN PERSISTENT RUN akben_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN-BEN PERSISTENT RUN musbendubb_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN-ENR PERSISTENT RUN akenr_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN-ENR PERSISTENT RUN musenrdubb_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN-KOD PERSISTENT RUN akkod_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN-KOD PERSISTENT RUN muskoddubb_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF FILL-IN-NR1 PERSISTENT RUN fillnr1_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF FILL-IN-NR2 PERSISTENT RUN fillnr2_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF FILL-IN-NR3 PERSISTENT RUN fillnr3_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_ANM PERSISTENT RUN mbtnanm_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_DOK PERSISTENT RUN mbtndok_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_ID PERSISTENT RUN mbtnid_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_KALK PERSISTENT RUN mbtnkalk_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_KONST PERSISTENT RUN mbtnkonst_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_LIST PERSISTENT RUN mbtnlist_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_MTRL PERSISTENT RUN mbtnmtrl_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_FLYG PERSISTENT RUN flygnr_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_ATG PERSISTENT RUN mbtnatg_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_ATERGA PERSISTENT RUN mbtnaterga_UI IN THIS-PROCEDURE.

ON 'CHOOSE' OF m_AvmarkeraB2 PERSISTENT RUN avmarkerab2_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_AvmarkeraB3 PERSISTENT RUN avmarkerab3_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_AvmarkeraB4 PERSISTENT RUN avmarkerab4_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_AvmarkeraB5 PERSISTENT RUN avmarkerab5_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_AvmarkeraB6 PERSISTENT RUN avmarkerab6_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_AvmarkeraHLEV PERSISTENT RUN avmarkeraHLEV_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_bildB2 PERSISTENT RUN bildbrwb2_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_bildB3 PERSISTENT RUN bildbrwb3_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_bildB4 PERSISTENT RUN bildbrwb4_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_bildB5 PERSISTENT RUN bildbrwb5_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_bildB6 PERSISTENT RUN bildbrwb6_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_bildKB2 PERSISTENT RUN bildbrwkb2_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_bildKB3 PERSISTENT RUN bildbrwkb3_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_bildKB4 PERSISTENT RUN bildbrwkb4_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_bildKB5 PERSISTENT RUN bildbrwkb5_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_bildKB6 PERSISTENT RUN bildbrwkb6_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_mtrlB2 PERSISTENT RUN vmtrlb2_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_mtrlB3 PERSISTENT RUN vmtrlb3_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_mtrlB4 PERSISTENT RUN vmtrlb4_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_mtrlB5 PERSISTENT RUN vmtrlb5_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_mtrlB6 PERSISTENT RUN vmtrlb6_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_mtrlKB2 PERSISTENT RUN vmtrlkb2_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_mtrlKB3 PERSISTENT RUN vmtrlkb3_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_mtrlKB4 PERSISTENT RUN vmtrlkb4_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_mtrlKB5 PERSISTENT RUN vmtrlkb5_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_mtrlKB6 PERSISTENT RUN vmtrlkb6_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_Pris_information PERSISTENT RUN mprisinfo2_UI IN THIS-PROCEDURE.

ON 'CHOOSE' OF m_Visa_bild PERSISTENT RUN bildbrwkon_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF  m_Visa_informationVAL PERSISTENT RUN info_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF  m_Visa_mtrl PERSISTENT RUN mvmtrl_UI IN THIS-PROCEDURE.

ON 'VALUE-CHANGED' OF RAD_KOMP PERSISTENT RUN rkomp_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF TOG_RATT PERSISTENT RUN togratt_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF TOG_KOMP PERSISTENT RUN togkomp_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF TOG_MARKAV PERSISTENT RUN markav_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_STANG PERSISTENT RUN btnstang_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_STANGANDKONST  PERSISTENT RUN btnstang_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_BYTANGANDKONST  PERSISTENT RUN btnbytgrp_UI IN THIS-PROCEDURE.

ON 'VALUE-CHANGED' OF TOG_VISAGRUPP PERSISTENT RUN toggrp_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF TOG_VISAKONST PERSISTENT RUN togkonst_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF RAD_MTRL PERSISTENT RUN vcradmtrl_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF RAD_VAL PERSISTENT RUN vcradval_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF TOG_A PERSISTENT RUN vctoga_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF TOG_B PERSISTENT RUN vctogb_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF TOG_C PERSISTENT RUN vctogc_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF CMB_DEL PERSISTENT RUN ledningsdel_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF FRAME-MTRL PERSISTENT RUN fixastorlek_UI IN THIS-PROCEDURE.
ON 'ANY-KEY' OF FILL-IN-IDNR2 PERSISTENT RUN ankeyidnr2_UI IN THIS-PROCEDURE.
ON 'ANY-KEY' OF FILL-IN-SUND PERSISTENT RUN ankeysund_UI IN THIS-PROCEDURE.
ON 'ANY-KEY' OF FILL-IN-KARTR PERSISTENT RUN ankeysund_UI IN THIS-PROCEDURE.
ON 'ENTRY' OF friExtra1h PERSISTENT RUN friExtra1hentry_UI  IN THIS-PROCEDURE.
ON 'LEAVE' OF friExtra1h PERSISTENT RUN friExtra1hleave_UI  IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-CLICK' OF friExtra1h PERSISTENT RUN friExtra1hdb_UI  IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_KUNDLISTA PERSISTENT RUN StolpKundl_UI IN THIS-PROCEDURE.
ASSIGN
BTN_KUNDLISTA:HIDDEN = TRUE
FILL-IN-ENRSTOLP:HIDDEN = TRUE
FILL-IN-BENSTOLP:HIDDEN = TRUE
FILL-IN-ENR:HIDDEN = TRUE
FILL-IN-BEN:HIDDEN = TRUE
RAD_SOK:HIDDEN = TRUE.
BTN_KUNDLISTA:LABEL = Guru.Konstanter:gutbytk.
MBTN_ATERGA:TOOLTIP = "Återgå till Kabelskåp/Station". 
DEFINE VARIABLE btnnovit AS HANDLE NO-UNDO. 
 
RUN main_UI.

RUN friExtra1hread_UI (TRUE).
DEFINE VARIABLE Timer  AS Guru.Timer              NO-UNDO.
IF  PROVERSION BEGINS "11" THEN DO:
   IF spartidvar > 0 THEN DO:
      Timer = NEW Guru.Timer("fbtnsnabb_UI",THIS-PROCEDURE).
      Timer:StartaTimer(spartidvar). /*Interval i milisekuder*/
      Timer:Timer:Tick:Subscribe(Timer:TimerEventRun).  
   END.    
END.   
ELSE . 

 
PROCEDURE StolpKundl_UI :
   IF Guru.GlobalaVariabler:KundListId = 0 THEN DO:
      MESSAGE "Du har inte valt någon " + LC(Guru.Konstanter:gutbytk) + " för denna beredning!"
      VIEW-AS ALERT-BOX.
   END.
   IF RAD_MTRL:SCREEN-VALUE = "2" THEN DO:   
      RUN setcolsortvar_UI IN brwproc[24] (INPUT " WHERE STOLPE = TRUE AND UID = " + STRING(Guru.GlobalaVariabler:KundListId)).
   END.   
   IF RAD_MTRL:SCREEN-VALUE = "3" THEN DO:
      RUN setcolsortvar_UI IN brwproc[24] (INPUT " WHERE STOLPE = FALSE AND UID = " + STRING(Guru.GlobalaVariabler:KundListId)).
      
   END.
   RUN openbdynspec_UI IN brwproc[24].
   IF Guru.Konstanter:globnetprissortvar = 1 THEN RUN openbdynspec_UI IN brwproc[24].   
END PROCEDURE.
PROCEDURE friExtra1hdb_UI:
   APPLY "ENTRY" TO  friExtra1h.

END PROCEDURE.       
PROCEDURE friExtra1hread_UI :
   DEFINE INPUT PARAMETER readvar AS LOGICAL NO-UNDO.
   friExtra1h:READ-ONLY = readvar.
   
END PROCEDURE.
PROCEDURE friExtra1hentry_UI:
      FIND FIRST kon_id WHERE kon_id.NUM = kon_display.NUM NO-LOCK NO-ERROR.
      IF kon_val.ID2 = "" OR kon_val.ID2 = ? THEN RUN friExtra1hread_UI (TRUE).
      ELSE  RUN friExtra1hread_UI (FALSE).
      
      RUN selectfoc_UI (INPUT 21).      
      kon_display.EXTRA1 = friExtra1h:SCREEN-VALUE.
END PROCEDURE.
PROCEDURE friExtra1hleave_UI:
   FILL-IN-SUND:SCREEN-VALUE = friExtra1h:SCREEN-VALUE.
   kon_display.EXTRA1 = friExtra1h:SCREEN-VALUE.
   RUN koppid_UI.
   
END PROCEDURE.


PROCEDURE Snabbspara.PSTimer.Tick .
   RUN fbtnsnabb_UI.
END PROCEDURE.

PROCEDURE control_load :
   DEFINE VARIABLE UIB_S    AS LOGICAL    NO-UNDO.
   DEFINE VARIABLE OCXFile  AS CHARACTER  NO-UNDO.
  
END PROCEDURE.
PROCEDURE spartidh_UI :
   DEFINE OUTPUT PARAMETER spartidout AS INTEGER NO-UNDO.
   spartidout = spartidvar * 60 * 1000. 
   /*
   FILE-INFO:FILE-NAME = TRIM(SUBSTRING(PROGRAM-NAME(1),INDEX(PROGRAM-NAME(1),"_UI") + 3)).
   RUN loggskap_UI IN logprogh (INPUT 2,INPUT SUBSTRING(FILE-INFO:FILE-NAME,(R-INDEX(FILE-INFO:FILE-NAME,"\") + 1)), INPUT "WCCH6", INPUT "").
   */
END PROCEDURE.
PROCEDURE spartid_UI :
   /*
   FILE-INFO:FILE-NAME = TRIM(SUBSTRING(PROGRAM-NAME(1),INDEX(PROGRAM-NAME(1),"_UI") + 3)).
   RUN loggskap_UI IN logprogh (INPUT 2,INPUT SUBSTRING(FILE-INFO:FILE-NAME,(R-INDEX(FILE-INFO:FILE-NAME,"\") + 1)), INPUT "WCCH7", INPUT "").
   */
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "FAVO"                   
   inextradatatemp.HUVUDCH = globanv              
   inextradatatemp.HUVUDINT =  ?.   
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:
      spartidvar = extradatatemp.SOKINT[1].
      /*
      Guru.Konstanter:globnetprissortvar = extradatatemp.SOKINT[4].
      */      
   END.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
END PROCEDURE.
PROCEDURE ankeyidnr2_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("END-ERROR") THEN  RETURN NO-APPLY. 
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN APPLY "CHOOSE" TO BTN_KOPPID.
END PROCEDURE.
PROCEDURE ankeysund_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("END-ERROR") THEN  RETURN NO-APPLY. 
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN APPLY "CHOOSE" TO BTN_KOPPID.
   
END PROCEDURE.
PROCEDURE fyllaledning_UI :
   IF CMB_DEL:HIDDEN = FALSE THEN DO:
      FOR EACH kon_id:
         FIND deltemp WHERE deltemp.LINJE = STRING(kon_id.FRI1) AND deltemp.KONSKOD = kon_id.GRUPP NO-ERROR.
         IF NOT AVAILABLE deltemp THEN DO:
            /*MESSAGE kon_id.GRUPP VIEW-AS ALERT-BOX.*/
            CREATE deltemp.
            ASSIGN
            deltemp.LINJE = STRING(kon_id.FRI1)
            deltemp.KONSKOD = kon_id.GRUPP.
         END.
      END.
   END.
END PROCEDURE.
PROCEDURE btnbytgrp_UI :
   IF RAD_KOMP:SCREEN-VALUE = "3" THEN DO:
      MESSAGE "Du kan inte byta Konstruktion i läge komplettera materiel!"
      VIEW-AS ALERT-BOX.
      RETURN.
   END.   
   MESSAGE "Obs! Bara texten byts. Materielen byts inte."
   VIEW-AS ALERT-BOX
   QUESTION BUTTONS OK-CANCEL UPDATE valk3 AS LOGICAL.       
   CASE valk3:
      WHEN TRUE THEN DO:
      END.
      WHEN FALSE THEN DO:
         RETURN NO-APPLY.  
      END.   
   END CASE.
   RUN selectfoc_UI (INPUT 27).
   IF konsttemp.BENAMNING BEGINS "-------" THEN RETURN.
   FOR EACH andrakon_val WHERE  NO-LOCK:
      andrakon_val.GRUPP =  konsttemp.KONSKOD.
      andrakon_val.F1 = konsttemp.KTYPKOD.
   END.
   FIND FIRST andrakon_val WHERE NO-LOCK NO-ERROR.
   FOR EACH kon_val WHERE kon_val.NUM = andrakon_val.NUM NO-LOCK:
      kon_val.GRUPP =  konsttemp.KONSKOD.
      kon_val.F1 = konsttemp.KTYPKOD.
   END.
   RUN openbdynspec_UI IN brwproc[brwNrandkonst].
   FIND FIRST kon_val WHERE kon_val.NUM = andrakon_val.NUM AND kon_val.KSKAP = FALSE NO-LOCK NO-ERROR.
   RUN kondisp_UI.
   RUN sokkdisp_UI.
   RUN openbdynspec_UI IN brwproc[21].
   RUN lastselectdyn_UI IN brwproc[21]. 
END PROCEDURE.
PROCEDURE fixastorlek_UI :
     /*stolp*/
   RUN cellbreddcol_UI IN brwproc[24] (INPUT 3, INPUT 9).
   /*lev mtrl*/
   RUN cellbreddcol_UI IN brwproc[22] (INPUT 4, INPUT 9).
   /*mtrl*/
   RUN cellbreddcol_UI IN brwproc[15] (INPUT 7, INPUT 7).
   IF VALID-HANDLE(btnkskapmtrlh) THEN RUN fixastorlek_UI IN btnkskapmtrlh.
   RUN buttplace_UI.
END PROCEDURE.


/* fyller beroende på konskod  när man väljer en konstruktion på skrivbordet */
PROCEDURE fyllacmbdel_UI :
   /* Om det inte finns grupper/linje-delar --> deaktivera combobox samt dess funktion */
   IF FILL-IN-IDNR1:HIDDEN = TRUE THEN CMB_DEL:HIDDEN = TRUE.
   ELSE CMB_DEL:HIDDEN = FALSE.
   
   IF CMB_DEL:HIDDEN = FALSE THEN DO:
      CMB_DEL:LIST-ITEMS = "".
      FOR EACH deltemp USE-INDEX LINJE NO-LOCK:
         IF deltemp.KONSKOD = kon_val.GRUPP THEN DO:
            CMB_DEL:ADD-LAST(deltemp.LINJE).
         END.
      END.
      
      FIND deltemp WHERE deltemp.ARBETA = TRUE AND deltemp.KONSKOD = kon_val.GRUPP NO-ERROR. /* försöka hitta arbeta-linje */
      IF AVAILABLE deltemp THEN DO:
         CMB_DEL:SCREEN-VALUE = deltemp.LINJE.
      END.
      ELSE DO: /* försöka hitta max linje */
         FIND LAST deltemp WHERE deltemp.KONSKOD = kon_val.GRUPP USE-INDEX LINJE NO-ERROR.
      END.
         
      IF AVAILABLE deltemp THEN DO:
         CMB_DEL:SCREEN-VALUE = deltemp.LINJE.
         FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM NO-ERROR. /* kollar om det finns id */
         IF NOT AVAILABLE kon_id THEN DO:
            FILL-IN-IDNR1:SCREEN-VALUE = STRING(CMB_DEL:SCREEN-VALUE).
            FOR LAST kon_id WHERE kon_id.FRI1 = integer(CMB_DEL:SCREEN-VALUE) AND kon_id.GRUPP = deltemp.KONSKOD BY kon_id.FRI2:
               FILL-IN-IDNR2:SCREEN-VALUE = STRING(kon_id.FRI2 + 1).
            END.
         END.
      END.   
   END.
END PROCEDURE.

/* när man byter ledningsdel händer detta */
PROCEDURE ledningsdel_UI :
   
   IF CMB_DEL:HIDDEN = FALSE THEN DO:
   
      FILL-IN-IDNR1:SCREEN-VALUE = STRING(CMB_DEL:SCREEN-VALUE).
      
      /* sätta arbeta vidare med till FALSE för allt */
      FOR EACH deltemp WHERE deltemp.KONSKOD = kon_id.GRUPP NO-LOCK:
         ASSIGN
         deltemp.ARBETA = FALSE.
      END.
      
      /* sätta arbeta vidare med till TRUE för valt värde */
      FIND deltemp WHERE deltemp.KONSKOD = kon_id.GRUPP AND deltemp.LINJE = CMB_DEL:SCREEN-VALUE.
      ASSIGN
      deltemp.ARBETA = TRUE.
      
      /* hittar senaste fri2 (stolpnr t.ex) för vald linje */
      FIND LAST kon_id WHERE kon_id.FRI2 NE ? AND kon_id.FRI1 = INTEGER(deltemp.LINJE) AND kon_id.GRUPP = deltemp.KONSKOD USE-INDEX FRI NO-LOCK NO-ERROR.
      IF AVAILABLE kon_id THEN DO:           
         ASSIGN         
         FILL-IN-IDNR2:SCREEN-VALUE = STRING(kon_id.FRI2 + 1).
      END.
      /*RUN vcbrwval_UI.*/   
      
   END.
END PROCEDURE.

/* Händer när man identifierar */
PROCEDURE deladd_UI :
   DEFINE VARIABLE idrow AS ROWID NO-UNDO.
   IF CMB_DEL:HIDDEN = FALSE THEN DO:
      IF AVAILABLE kon_id THEN idrow = ROWID(kon_id).
      RUN fyllaledning_UI.
      FIND FIRST  kon_id WHERE ROWID(kon_id) = idrow NO-LOCK NO-ERROR.
      IF AVAILABLE kon_id THEN DO:
         FIND deltemp WHERE deltemp.LINJE = STRING(kon_id.FRI1) NO-ERROR.
         IF AVAILABLE deltemp THEN DO:
            ASSIGN deltemp.arbeta = TRUE.
         END.
      END.
      RUN fyllacmbdel_UI.
      
   END.
END PROCEDURE.

PROCEDURE andrakonner_UI :
   
   DEFINE VARIABLE andranum AS INTEGER NO-UNDO.
   DEFINE VARIABLE andraskap AS INTEGER NO-UNDO.
   RUN selectfoc_UI (INPUT 7).
   IF AVAILABLE andrakon_val THEN DO:
      RUN inkopkoll_UI (INPUT 2, OUTPUT musz, OUTPUT antalinkvar).
      IF musz = TRUE THEN DO:            
         MESSAGE "Ni kan inte ta bort denna konstruktionsdel. Den är inköpt via inköpsrutinen!"
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         musz = FALSE.
         RETURN.
      END.      
      IF andrakon_val.KSKAP = FALSE THEN DO:
         MESSAGE "Du kan inte ta bort denna del av konstruktionen. Du måste ta bort hela den valda konstruktionen."            
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         RETURN.
      END.
      FIND FIRST del_val WHERE del_val.NUM = andrakon_val.NUM
      NO-LOCK NO-ERROR.
      IF AVAILABLE del_val THEN DO:            
         MESSAGE "Ni kan inte ta bort denna konstruktion då den valda konstruktionen är inköpt via delbeställning"
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         RETURN.
      END.         
      MESSAGE "Vill du ta bort markerad del av konstruktionen?"
      VIEW-AS ALERT-BOX
      QUESTION BUTTONS YES-NO TITLE "Ta bort?" UPDATE svar.         
      IF svar THEN DO: 
         ASSIGN 
         andranum = andrakon_val.NUM
         andraskap = andrakon_val.SKAPNUM.
         FIND FIRST konbuff WHERE konbuff.NUM = andrakon_val.NUM AND konbuff.SKAPNUM = andrakon_val.SKAPNUM NO-LOCK NO-ERROR.
         IF AVAILABLE konbuff THEN RUN andrabortkonst_UI.
         RUN kondisp_UI.
         RUN sokkdisp_UI.
         RAD_KOMP:SCREEN-VALUE = "2".
         APPLY "VALUE-CHANGED" TO RAD_KOMP.
         FIND FIRST andrakon_val WHERE andrakon_val.NUM = andranum AND andrakon_val.SKAPNUM > andraskap NO-LOCK NO-ERROR.
         IF NOT AVAILABLE andrakon_val THEN DO:
            FIND LAST andrakon_val WHERE andrakon_val.NUM = andranum AND andrakon_val.SKAPNUM < andraskap NO-LOCK NO-ERROR.
         END.
         IF AVAILABLE andrakon_val THEN RUN setlastrowid_UI IN brwproc[brwNrandkonst] (INPUT ROWID(andrakon_val)).
         RUN lastselectdyn_UI IN brwproc[brwNrandkonst].
                                                         
      END.                   
   END.
   ELSE DO:
      MESSAGE "Det finns ingen konstruktion att ta bort."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
   END.
   {musarrow.i}
END PROCEDURE.

PROCEDURE andrabortkonst_UI :
      /*
   FIND FIRST punkt_temp WHERE punkt_temp.NUM = kon_val.NUM 
   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE punkt_temp THEN DO:
      */
   DO:       
      FIND FIRST kopp_lina WHERE kopp_lina.NUM1 = andrakon_val.NUM OR 
      kopp_lina.NUM2 = andrakon_val.NUM NO-ERROR.
      IF AVAILABLE kopp_lina THEN DO:
         MESSAGE "Det är gjort linor och kablar på denna konstruktion. Det går inte att ta bort delar av konstruktionen."
         VIEW-AS ALERT-BOX.
         RETURN.
      END.  
      FIND FIRST kalk_temp WHERE kalk_temp.NUM = andrakon_val.NUM NO-ERROR.
      IF AVAILABLE kalk_temp THEN DO:
         
      END.     
      
      FOR EACH list_mtrl WHERE list_mtrl.NUM = andrakon_val.NUM AND list_mtrl.SKAPNUM = andrakon_val.SKAPNUM:      
         DELETE list_mtrl.
      END. 
      
      
      
      FOR EACH fri_temp WHERE fri_temp.NUM = andrakon_val.NUM AND fri_temp.KABNR = andrakon_val.SKAPNUM:
         DELETE fri_temp.
      END.
      
      FOR EACH markgrupp WHERE markgrupp.NUM = andrakon_val.NUM AND markgrupp.KABNR = andrakon_val.SKAPNUM:
         DELETE markgrupp.
      END.
      
      CREATE bortkon_val.
      BUFFER-COPY andrakon_val TO bortkon_val.
      FIND FIRST konbuff WHERE konbuff.NUM = andrakon_val.NUM AND konbuff.SKAPNUM = andrakon_val.SKAPNUM NO-ERROR.
      IF AVAILABLE konbuff THEN DELETE konbuff.
      DELETE andrakon_val.
      RUN selnextprevrow_UI IN brwproc[brwNrandkonst].
      RUN openbdynspec_UI IN brwproc[brwNrandkonst].     
      RUN lastselectdyn_UI IN brwproc[brwNrandkonst].                  
   END.
   /*
   ELSE DO:
      MESSAGE "Det finns schakt som utgår från denna konstruktion. Ta bort schakt och därefter konstruktion."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
   END.
   */
END PROCEDURE.

PROCEDURE btnstang_UI :
   FRAME-ANDRAK:HIDDEN = TRUE.
   FRAME-ANDKONST:HIDDEN = TRUE.
   TOG_KOMP:CHECKED = FALSE.
  /*
   RAD_KOMP:SCREEN-VALUE = "1".
   */
   APPLY "VALUE-CHANGED" TO BRW_VAL.
   
END PROCEDURE.

PROCEDURE tidigaresok_UI :
   ASSIGN
   antal_valda = BRW_HLEV:NUM-SELECTED-ROWS NO-ERROR.      
   antal_raknare = 1.
   DO WHILE antal_raknare LE antal_valda:                    
      RUN fselectfoc_UI (INPUT 22).
      IF AVAILABLE mtrltemp THEN DO:
         FIND FIRST soktamtrlfavo WHERE soktamtrlfavo.ENR = mtrltemp.ENR AND soktamtrlfavo.LEVKOD = mtrltemp.LEVKOD NO-LOCK NO-ERROR.
         IF NOT AVAILABLE soktamtrlfavo THEN DO:
            CREATE soktamtrlfavo.
            BUFFER-COPY mtrltemp TO soktamtrlfavo.
         END.                    
      END.
      antal_raknare = antal_raknare + 1.
   END. 
    
END PROCEDURE.
PROCEDURE favlaggtill_UI :
   EMPTY TEMP-TABLE emtrltemp NO-ERROR.
   ASSIGN
   antal_valda = BRW_HLEV:NUM-SELECTED-ROWS NO-ERROR.      
   antal_raknare = 1.
   DO WHILE antal_raknare LE antal_valda:                    
      RUN fselectfoc_UI (INPUT 22).
      IF AVAILABLE mtrltemp THEN DO:         
         CREATE emtrltemp.
         BUFFER-COPY mtrltemp TO emtrltemp.                             
      END.
      antal_raknare = antal_raknare + 1.
   END.     
END PROCEDURE.
PROCEDURE favlaggtillist_UI :
   EMPTY TEMP-TABLE emtrltemp NO-ERROR.
   ASSIGN
   antal_valda = BRW_MTRL:NUM-SELECTED-ROWS NO-ERROR.      
   antal_raknare = 1.
   DO WHILE antal_raknare LE antal_valda:                          
      RUN fselectfoc_UI (INPUT 15).
      IF AVAILABLE list_mtrl THEN DO:         
         CREATE emtrltemp.
         BUFFER-COPY list_mtrl TO emtrltemp.                             
      END.
      antal_raknare = antal_raknare + 1.
   END.     
END PROCEDURE.
PROCEDURE mbtnaterga_UI :
   
   IF VALID-HANDLE(Guru.GlobalaVariabler:LastDialogh) THEN RUN Movetotop_UI IN Guru.GlobalaVariabler:LastDialogh.
   ELSE DO:
      Guru.GlobalaVariabler:SkapGaTill = "".
      RUN togkomp_UI.
   END.
END PROCEDURE.
PROCEDURE togkomp_UI :
   
   DEFINE VARIABLE nummvarkabel AS INTEGER NO-UNDO.
   {MARKKABVAL.I}
   IF RAD_KOMP:SCREEN-VALUE = "3" THEN.
   ELSE IF kon_val.GRUPP = 0 OR enval = TRUE THEN DO:
      IF VALID-HANDLE(BeredClasserStart) THEN DO:
        
         TOG_RATT:CHECKED = TRUE.
         RUN togratt_UI.
         RAD_KOMP:SCREEN-VALUE = "2".
         
         FIND FIRST konstvaltemp WHERE konstvaltemp.KONSKOD = konstgrptemp.KONSKOD NO-LOCK NO-ERROR.
         IF NOT AVAILABLE konstvaltemp THEN DO:
            RUN laddatempen_UI IN bervalapph (INPUT konstgrptemp.KONSKOD, OUTPUT TABLE konstvaltemp APPEND).
         END.
         FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE list_mtrl THEN DO:                                                   
            RUN nykabstart_UI.                                          
         END.       
         /* SKA FINNAS FÖR ATT GRUND KONSTRUKTRIONEN SKA FÅ KODER*/        
          
         FIND FIRST kalk_temp WHERE kalk_temp.NUM = kon_val.NUM
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE kalk_temp THEN DO:
            RUN nykabstart2_UI.
         END.
         
         nummvarkabel = kon_val.NUM.
        
         IF snabbsparapagar = TRUE THEN.
         ELSE RUN kabeland_UI IN BeredClasserStart (INPUT konsttemp.KTYPKOD,INPUT kon_val.id2 + " " + kon_val.extra1 ,INPUT kon_val.GRUPP,INPUT-OUTPUT nummvarkabel).
         RAD_KOMP:SCREEN-VALUE = "1".
         RUN kondisp_UI.
         RUN sokkdisp_UI.
         RUN openbdynspec_UI IN brwproc[21].
         RUN lastselectdyn_UI IN brwproc[21]. 
         IF Guru.GlobalaVariabler:SkapGaTill = "" THEN DO:
            ASSIGN
            MBTN_KONST:HIDDEN = FALSE
            MBTN_ANM:HIDDEN = FALSE
            MBTN_DOK:HIDDEN = FALSE 
            FBTN_KOPI:HIDDEN = FALSE
            MBTN_ANDORD:HIDDEN = FALSE
            FBTN_UPPL:HIDDEN = FALSE
            MBTN_LIST:HIDDEN = FALSE
            MBTN_ATG:HIDDEN = FALSE
            MBTN_FLYG:HIDDEN = FALSE
            MBTN_INK:HIDDEN = TRUE.
            RUN PlaceraKnapp_UI.
            IF globforetag = "ELPA" OR globforetag = "GRAN" OR Guru.Konstanter:beresekvar[13]  = TRUE THEN DO:
               ASSIGN
               MBTN_SCHAKT:HIDDEN = FALSE.
            END.
            IF Guru.Konstanter:beresekvar[6] = TRUE THEN DO:
               IF Guru.GlobalaVariabler:plusaonr = ? THEN.
               ELSE IF Guru.GlobalaVariabler:plusaonr = "" THEN.
               ELSE DO:
                  ASSIGN
                  MBTN_INK:HIDDEN = FALSE.
               END.                            
            END.
            MBTN_ATERGA:HIDDEN = TRUE.
            RUN mbtnkonst_UI.  
         END.
         ELSE DO:
            ASSIGN
            MBTN_KONST:HIDDEN = TRUE
            MBTN_ANM:HIDDEN = TRUE
            MBTN_DOK:HIDDEN = TRUE 
            FBTN_KOPI:HIDDEN = TRUE
            MBTN_ANDORD:HIDDEN = TRUE
            FBTN_UPPL:HIDDEN = TRUE
            MBTN_LIST:HIDDEN = TRUE
            MBTN_ATG:HIDDEN = TRUE
            MBTN_FLYG:HIDDEN = TRUE
            MBTN_SCHAKT:HIDDEN = TRUE
            MBTN_INK:HIDDEN = TRUE.
            MBTN_ATERGA:HIDDEN = FALSE.
            MBTN_ATERGA:TOOLTIP = "Återgå till Kabelskåp/Station". 
            RUN PlaceraKnapp_UI.
         END.      
         IF Guru.GlobalaVariabler:SkapGaTill = "ID" THEN RUN mbtnid_UI. 
         IF Guru.GlobalaVariabler:SkapGaTill = "MTRL" THEN RUN mbtnmtrl_UI. 
         IF Guru.GlobalaVariabler:SkapGaTill = "SKAP" THEN RUN fbtnkskap_UI. 
         IF Guru.GlobalaVariabler:SkapGaTill = "KALK" THEN RUN mbtnkalk_UI. 
         RETURN.
      END.
   END.
   IF TOG_KOMP:CHECKED = TRUE THEN DO:
      RUN togkompin_UI.
   END.      
END PROCEDURE.
PROCEDURE togkompin_UI :
  
   DEFINE VARIABLE chelp AS DECIMAL NO-UNDO.
   IF TOG_KOMP:CHECKED = TRUE THEN DO:
      FRAME-ANDRAK:HIDDEN = FALSE.
      IF brwNrandkonst = 28 THEN DO:
        
         FRAME-ANDRAK:HIDDEN = TRUE.
         IF FRAME-ANDKONST:WIDTH-PIXELS < 900 THEN FRAME-ANDKONST:WIDTH-PIXELS = 900.
         IF FRAME-ANDKONST:HEIGHT-PIXELS < 200 THEN FRAME-ANDKONST:HEIGHT-PIXELS = 200.
         BRW_ANDKONST:COLUMN = 1.5.
         BRW_ANDKONST:HEIGHT-CHARS = FRAME-ANDKONST:HEIGHT-CHARS - (BRW_ANDKONST:ROW + BTN_STANGANDKONST:HEIGHT-CHARS - 0.3).  
         
         BRW_KONANDKONST:HEIGHT = BRW_ANDKONST:HEIGHT - 1 . 
         BTN_BYTANGANDKONST:ROW = BRW_KONANDKONST:ROW + BRW_KONANDKONST:HEIGHT-CHARS + 0.1.
         
         BRW_KALAKONS:HEIGHT = BRW_ANDKONST:HEIGHT - 1 . 
         BRW_KALAKONS:ROW = BRW_KONANDKONST:ROW .
         
         BTN_BYTANGANDKONST:LABEL = "Byt Konst".  
         BTN_BYTANGANDKONST:TOOLTIP = "Obs! Materielen byts inte! Bara texten på konstruktionen".
         BTN_STANGANDKONST:ROW = FRAME-ANDKONST:HEIGHT-CHARS - 0.2. 
         BTN_STANGANDKONST:COLUMN = FRAME-ANDKONST:WIDTH-CHARS - BTN_STANGANDKONST:WIDTH-CHARS. 
         CMB_VALANDKONST:COLUMN = FRAME-ANDKONST:WIDTH-CHARS - (BRW_KONANDKONST:WIDTH-CHARS).
         BRW_KONANDKONST:COLUMN = CMB_VALANDKONST:COLUMN.
         
         BRW_KALAKONS:COLUMN = CMB_VALANDKONST:COLUMN - 15.
         BTN_BYTANGANDKONST:COLUMN = CMB_VALANDKONST:COLUMN.
         
         BRW_ANDKONST:WIDTH-CHARS =  CMB_VALANDKONST:COLUMN - (BRW_ANDKONST:COLUMN + 1). 
         FRAME-ANDKONST:HIDDEN = FALSE. 
         
         /*
         FRAME-ANDKONST:ROW = FRAME-ANDRAK:ROW.
         */
         FIND FIRST konstgrptemp WHERE konstgrptemp.KONSKOD = kon_val.GRUPP NO-LOCK NO-ERROR. 
         IF AVAILABLE konstgrptemp THEN DO:
            CMB_VALANDKONST:SCREEN-VALUE = konstgrptemp.BENAMNING.
            APPLY "VALUE-CHANGED" TO CMB_VALANDKONST.
            RUN selectfoc_UI (INPUT 14).  
         END.   
      END.  
     
      EMPTY TEMP-TABLE andrakon_val NO-ERROR. 
      IF AVAILABLE kon_val THEN DO:
         FOR EACH konbuff WHERE konbuff.NUM = kon_val.NUM:
            CREATE andrakon_val.
            BUFFER-COPY konbuff TO andrakon_val.   
         END.
         FIND FIRST bbenamntemp WHERE bbenamntemp.KONSKOD = kon_val.GRUPP
         USE-INDEX KOD NO-LOCK NO-ERROR.
         /*KONLABEL.I*/            
         IF AVAILABLE bbenamntemp THEN DO:
           RUN konlabel_UI IN huvprogh 
               (INPUT "VAL",
                INPUT bbenamntemp.B1,
            INPUT bbenamntemp.B2,
            INPUT bbenamntemp.B3,
            INPUT bbenamntemp.B4,
            INPUT bbenamntemp.B5,
            INPUT bbenamntemp.B6,
            INPUT "",
            INPUT "",
            INPUT "",
            INPUT bbenamntemp.ID2). /* NY */
   
         END.
         RUN openbdynspec_UI IN brwproc[brwNrandkonst].      
         FIND FIRST andrakon_val WHERE andrakon_val.SKAPNUM = kon_val.SKAPNUM NO-LOCK NO-ERROR.
         IF AVAILABLE andrakon_val THEN DO:
            RUN setlastrowid_UI IN brwproc[brwNrandkonst] (INPUT ROWID(andrakon_val)).
            RUN lastselectdyn_UI IN brwproc[brwNrandkonst].            
         END.
         
         FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE list_mtrl THEN DO:                                                   
            RUN nykabstart_UI.                                          
         END.                  
         FIND FIRST kalk_temp WHERE kalk_temp.NUM = kon_val.NUM
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE kalk_temp THEN DO:
            RUN nykabstart2_UI.
         END.
         RUN setcolsortvar_UI IN brwproc[29] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
         RUN openbdynspec_UI IN brwproc[29].
         
      END.
      ELSE DO:
         MESSAGE "Ingen post är tillgänlig!"  VIEW-AS ALERT-BOX.
         ASSIGN
            /*
         TOG_KOMP:CHECKED = FALSE
         */
         FRAME-ANDRAK:HIDDEN = TRUE.
         FRAME-ANDKONST:HIDDEN = TRUE.
      END.
   END.
   ELSE DO:
      EMPTY TEMP-TABLE andrakon_val NO-ERROR. 
      FRAME-ANDRAK:HIDDEN = TRUE.
      FRAME-ANDKONST:HIDDEN = TRUE.
   END.
END PROCEDURE.
PROCEDURE togratt_UI :   
   TOG_KOMP:CHECKED = FALSE.
   RAD_KOMP:SCREEN-VALUE = "1".
   IF TOG_RATT:CHECKED = TRUE THEN DO:
      IF AVAILABLE kon_val THEN DO:
         kon_rowid = ROWID(kon_val).
         RUN sokkdispu_UI.
         FIND FIRST konstgrptemp WHERE konstgrptemp.KONSKOD = kon_val.GRUPP NO-ERROR. 
         IF AVAILABLE konstgrptemp THEN DO:
            CMB_VAL:SCREEN-VALUE = konstgrptemp.BENAMNING.
            IF RAD_KOMP:SCREEN-VALUE = "1"  THEN TOG_RATT:CHECKED = FALSE.
              
            APPLY "VALUE-CHANGED" TO CMB_VAL.
            
            FIND FIRST konsttemp WHERE konsttemp.KONSKOD =  kon_val.GRUPP AND konsttemp.KTYPKOD =  kon_val.F1
            NO-LOCK NO-ERROR.
            IF NOT AVAILABLE konsttemp THEN DO:
               FIND FIRST konsttemp WHERE konsttemp.KONSKOD =  kon_val.GRUPP USE-INDEX ORD
               NO-LOCK NO-ERROR.
            END.
            IF AVAILABLE konsttemp THEN DO:
               RUN setlastrowid_UI IN brwproc[14] (INPUT ROWID(konsttemp)).
               RUN lastselectdyn_UI IN brwproc[14].
               
               TOG_RATT:CHECKED = FALSE.               
               
            END.
         END.
      END.
   END.
   
END PROCEDURE.
PROCEDURE mdval_UI :
   RAD_KOMP:SCREEN-VALUE = "2".
   APPLY 'VALUE-CHANGED' TO RAD_KOMP.
END PROCEDURE.

PROCEDURE rkomp_UI :
   TOG_RATT:CHECKED = FALSE.
    
   /*
   IF RAD_KOMP:SCREEN-VALUE = "1" THEN TOG_RATT:HIDDEN = TRUE.
   ELSE DO:
      ASSIGN
      TOG_RATT:HIDDEN = FALSE.      
   END.
   */
   IF NOT AVAILABLE kon_val THEN DO:
      RAD_KOMP:SCREEN-VALUE = "1".
      ASSIGN
      BTN_ORDUPP:HIDDEN = FALSE
      BTN_ORDNER:HIDDEN = FALSE.
      RETURN.
   END.
   IF RAD_KOMP:SCREEN-VALUE = "1" THEN DO: 
      ASSIGN         
      BTN_ORDUPP:HIDDEN = FALSE
      BTN_ORDNER:HIDDEN = FALSE
      FRAME-ANDRAK:HIDDEN = TRUE
      FRAME-ANDKONST:HIDDEN = TRUE
      TOG_KOMP:HIDDEN = TRUE
      TOG_KOMP:CHECKED = FALSE.
   END.
   ELSE DO:
      /*
      ASSIGN
      TOG_KOMP:HIDDEN = FALSE.      
      */
      ASSIGN
      BTN_ORDUPP:HIDDEN = TRUE
      BTN_ORDNER:HIDDEN = TRUE.
      TOG_KOMP:CHECKED = TRUE. 
      RUN togkomp_UI.
   END.
   RUN rowcolsel_UI IN brwproc[21] (INPUT 12,INPUT INTEGER(RAD_KOMP:SCREEN-VALUE)).
END PROCEDURE.
PROCEDURE toggrp_UI :
   TOG_VISAKONST:CHECKED = FALSE.
   IF TOG_VISAGRUPP:CHECKED = FALSE THEN DO:
      ASSIGN
      BTN_ORDUPP:HIDDEN = FALSE
      BTN_ORDNER:HIDDEN = FALSE.
   END.
   ELSE DO:
      ASSIGN
      BTN_ORDUPP:HIDDEN = TRUE
      BTN_ORDNER:HIDDEN = TRUE.
   END.
   kon_rowid = ROWID(kon_val).
   RUN sokkdispu_UI.
   RUN sorterabrwval_UI.   
   RUN lastselectdyn_UI IN brwproc[21].   
   IF  RAD_KOMP:SCREEN-VALUE = "1"  THEN DO:
      ASSIGN
      FRAME-ANDRAK:HIDDEN = TRUE
      FRAME-ANDKONST:HIDDEN = TRUE
      TOG_KOMP:HIDDEN = TRUE.
   END.
   IF TOG_RATT:CHECKED = TRUE THEN DO:      
      RUN sokkdisp_UI.
      RAD_KOMP:SCREEN-VALUE = "2".  
      RUN rkomp_UI.
      TOG_RATT:CHECKED = TRUE.
   END.
   
END PROCEDURE.

PROCEDURE togkonst_UI :
   
   TOG_VISAGRUPP:CHECKED = FALSE.   
   IF TOG_VISAKONST:CHECKED = FALSE THEN DO:
      ASSIGN
      BTN_ORDUPP:HIDDEN = FALSE
      BTN_ORDNER:HIDDEN = FALSE.
   END.
   ELSE DO:
      ASSIGN
      BTN_ORDUPP:HIDDEN = TRUE
      BTN_ORDNER:HIDDEN = TRUE.
      TOG_RATT:CHECKED = TRUE.
      RUN togratt_UI.
      TOG_VISAKONST:CHECKED = TRUE.
   END.
   kon_rowid = ROWID(kon_val).
   RUN sokkdispu_UI.
   
   RUN sorterakonstbrwval_UI.   
   RUN lastselectdyn_UI IN brwproc[21].   
   IF  RAD_KOMP:SCREEN-VALUE = "1"  THEN DO:
      ASSIGN
      FRAME-ANDRAK:HIDDEN = TRUE
      FRAME-ANDKONST:HIDDEN = TRUE
      TOG_KOMP:HIDDEN = TRUE.
   END.
  
   
   
END PROCEDURE.
PROCEDURE sorterabrwval_UI :
   DEFINE VARIABLE sortvar AS CHARACTER NO-UNDO.
   sortvar = " WHERE KSKAP = FALSE ".
   IF TOG_VISAGRUPP:CHECKED = FALSE THEN DO:
      
   END.
   ELSE DO:
      FIND FIRST konstgrptemp WHERE konstgrptemp.BENAMNING = CMB_VAL:SCREEN-VALUE
      NO-LOCK NO-ERROR.      
      IF AVAILABLE konstgrptemp THEN DO:
         IF AVAILABLE kon_val THEN DO:
            kon_rowid = ROWID(kon_val).
            RUN sokkdispu_UI.
         END.   
         sortvar = sortvar + " AND kon_display.GRUPP = " + STRING(konstgrptemp.KONSKOD). 
      END.
   END.
   RUN setcolsortvar_UI IN brwproc[21] (INPUT sortvar).
   RUN openbdynspec_UI IN brwproc[21].
END PROCEDURE.
PROCEDURE sorterakonstbrwval_UI :
   DEFINE VARIABLE sortvar AS CHARACTER NO-UNDO.
   sortvar = " WHERE KSKAP = FALSE ".
   IF TOG_VISAKONST:CHECKED = FALSE THEN DO:
      
   END.
   ELSE DO:
      
      
      /*FIND FIRST konstgrptemp WHERE konstgrptemp.BENAMNING = CMB_VAL:SCREEN-VALUE
      NO-LOCK NO-ERROR.      
      IF AVAILABLE konstgrptemp THEN DO:*/
      IF AVAILABLE kon_val THEN DO:
         kon_rowid = ROWID(kon_val).
         RUN sokkdispu_UI.
         sortvar = sortvar + " AND kon_display.F1 = " + QUOTER(kon_val.F1).
         
      END.   
          

   END.
   RUN setcolsortvar_UI IN brwproc[21] (INPUT sortvar).
   RUN openbdynspec_UI IN brwproc[21].
END PROCEDURE.

PROCEDURE btnvit_UI :
   DEFINE INPUT PARAMETER btnh AS HANDLE NO-UNDO.
   DEFINE VARIABLE btnlabel AS CHARACTER NO-UNDO.
   IF btnnovit NE ? THEN DO:
      btnlabel = btnnovit:IMAGE.
      btnlabel = REPLACE(btnlabel,"_vit.gif",".gif"). 
      btnnovit:LOAD-IMAGE (btnlabel) NO-ERROR.
   END.
   btnlabel = btnh:IMAGE.
   btnlabel = REPLACE(btnlabel,".gif","_vit.gif"). 
   btnh:LOAD-IMAGE (btnlabel) NO-ERROR.
   btnnovit = btnh.   
END PROCEDURE.

PROCEDURE mlma_UI :
   
   APPLY "ENTRY" TO  listmtrlantal.
END PROCEDURE.

PROCEDURE mvmtrl_UI :
    visval = 1.
   RUN visamtrl_UI. 
END PROCEDURE.
PROCEDURE mprisinfo_UI :
   
   satsmtrl = TRUE.   
   RUN selectfoc_UI (INPUT 22). 
   IF NOT AVAILABLE mtrltemp THEN RETURN.
   {muswait.i}
   RUN SATSINNEU.W (INPUT ROWID(mtrltemp)).
   satsmtrl = FALSE.
   {musarrow.i}      
END PROCEDURE.

PROCEDURE mbtnmtrllist_UI :
   IF AVAILABLE kon_val THEN DO:
      startaejmtrl = FALSE.
      {MARKKABVAL.I}
      IF enval = TRUE THEN startaejmtrl = TRUE.
      APPLY "CHOOSE" TO MBTN_MTRL.
   END.    
   startaejmtrl = FALSE.
   RUN btnhidden_UI (INPUT "MBTN_MTRL",INPUT 1).
   RUN btnhidden_UI (INPUT "MBTN_ANDORD",INPUT 1). 
   RUN btnhidden_UI (INPUT "MBTN_KOPI",INPUT 1). 
   RUN btnhidden_UI (INPUT "MBTN_KSKAP",INPUT 1). 
   RUN btnhidden_UI (INPUT "MBTN_LIN",INPUT 1).  
           
   /*
   RUN btnhidden_UI (INPUT "MBTN_FRIKORT",INPUT 1).       
   */
   RUN btnhidden_UI (INPUT "MBTN_UPPL",INPUT 1).
   RUN btnhidden_UI (INPUT "BTN_SOLEN",INPUT 1).
   RUN btnhidden_UI (INPUT "MBTN_ANM",INPUT 1). 
   RUN btnhidden_UI (INPUT "MBTN_DOK",INPUT 1). 
   RUN btnhidden_UI (INPUT "MBTN_ID",INPUT 1). 
   IF Guru.Konstanter:hoppsekvar[3] = TRUE THEN RUN btnhidden_UI (INPUT "MBTN_KALK",INPUT 1). 
   RUN btnhidden_UI (INPUT "MBTN_KONST",INPUT 1). 
   RUN btnhidden_UI (INPUT "MBTN_LIST",INPUT 1). 
   RUN btnhidden_UI (INPUT "MBTN_ATG",INPUT 1). 
   RUN btnhidden_UI (INPUT "MBTN_FLYG",INPUT 1). 
   RUN btnhidden_UI (INPUT "BTN_OK",INPUT 1). 
   RUN btnhidden_UI (INPUT "BTN_AVB",INPUT 1). 
   RUN btnhidden_UI (INPUT "BTN_NY",INPUT 1). 
   RUN btnhidden_UI (INPUT "MBTN_INK",INPUT 1).
   RUN btnhidden_UI (INPUT "MBTN_SCHAKT",INPUT 1).
    
   /*
   RUN btnhidden_UI (INPUT "",INPUT 2). 
   */
   
   BTN_SOLEN:HIDDEN = TRUE.
   RUN PlaceraKnapp_UI.
       
END PROCEDURE.
PROCEDURE ctrlMproc_UI :
  
   RUN mbtnmtrl_UI.
END PROCEDURE.
PROCEDURE mbtnmtrl_UI :
   RUN btnvit_UI (INPUT MBTN_MTRL).
   RUN rowleave_UI.
   RAD_VAL:SCREEN-VALUE = "4".
   APPLY "VALUE-CHANGED" TO RAD_VAL.  
   RUN dselectfoc_UI (INPUT 15).  
   IF AVAILABLE kon_val THEN DO:
      
      IF startaejmtrl = FALSE THEN DO:
         {MARKKABVAL.I}
         IF enval = TRUE THEN DO:          
            RUN btnkskapmat_UI IN huvprogh.
         END.
      END.
      
   END.
   IF enval = TRUE THEN DO:
      IF VALID-HANDLE(btnkskapmtrlh) THEN DO:
         RUN eantfix_UI IN btnkskapmtrlh.
      END.
   END.
   ELSE DO:
      RUN getfirst_UI IN brwproc[15]. 
      RUN lastselectdyn_UI IN brwproc[15].
      APPLY "ENTRY" TO  listmtrlantal.
   END.
   
END PROCEDURE.

PROCEDURE mbtnatg_UI :
  
   RUN btnvit_UI (INPUT MBTN_ATG).  
   RUN rowleave_UI.
   RUN fbtnsnabb_UI.
   RUN atgarder_UI.   
END PROCEDURE.
PROCEDURE mbtnlist_UI :
   RUN btnvit_UI (INPUT MBTN_LIST).
   RUN rowleave_UI.
   RUN fbtnsnabb_UI.       
   RUN listor_UI.   
       
END PROCEDURE.
PROCEDURE mbtnlistv_UI :
   RUN btnvit_UI (INPUT MBTN_LIST).
       
END PROCEDURE.

PROCEDURE mbtnkonst_UI :
  
   RUN btnvit_UI (INPUT MBTN_KONST).
   RUN rowleave_UI.
   RAD_VAL:SCREEN-VALUE = "1".
   APPLY "VALUE-CHANGED" TO RAD_VAL.
   /* Gå till markerad konstruktion */
   TOG_RATT:CHECKED = TRUE.   
   APPLY "VALUE-CHANGED" TO TOG_RATT.
END PROCEDURE.
PROCEDURE mbtnkalk_UI :
   RUN btnvit_UI (INPUT MBTN_KALK).
   RUN rowleave_UI.
   RAD_VAL:SCREEN-VALUE = "5".
   APPLY "VALUE-CHANGED" TO RAD_VAL.
END PROCEDURE.
PROCEDURE mbtnid_UI :
   RUN btnvit_UI (INPUT MBTN_ID).
   RUN rowleave_UI.
   RAD_VAL:SCREEN-VALUE = "2".
   APPLY "VALUE-CHANGED" TO RAD_VAL.
   IF RAD_VAL:SCREEN-VALUE = "2" THEN RUN idinfo_UI.   
END PROCEDURE.
PROCEDURE mbtndok_UI :
   RUN btnvit_UI (INPUT MBTN_DOK).
   RUN rowleave_UI.
   RAD_VAL:SCREEN-VALUE = "6".
   APPLY "VALUE-CHANGED" TO RAD_VAL.
END PROCEDURE.
PROCEDURE mbtnanm_UI :
   RUN btnvit_UI (INPUT MBTN_ANM).
   RUN rowleave_UI.
   RAD_VAL:SCREEN-VALUE = "3".
   APPLY "VALUE-CHANGED" TO RAD_VAL.
END PROCEDURE.
PROCEDURE akkod_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("END-ERROR") THEN  RETURN NO-APPLY. 
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN-KOD.  
END PROCEDURE.
PROCEDURE akenr_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("END-ERROR") THEN  RETURN NO-APPLY. 
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN-ENR. 
END PROCEDURE.

PROCEDURE akben_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("END-ERROR") THEN  RETURN NO-APPLY.    
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN-BEN.   
END PROCEDURE.
PROCEDURE fbtnuppl_UI :
   RUN rowleave_UI.
   RUN btnuppl_UI. 
END PROCEDURE.
PROCEDURE fbtnlin_UI :
   RUN btnvit_UI (INPUT FBTN_LIN).
   RUN rowleave_UI.
   RUN btnlin_UI.   
END PROCEDURE.
PROCEDURE fbtnkskap_UI :
   RUN btnvit_UI (INPUT FBTN_KSKAP).
   RUN rowleave_UI.
   RUN btnkskap_UI.
   RUN btnvit_UI (INPUT FBTN_KSKAP).
END PROCEDURE.
PROCEDURE fbtnkopi_UI :
   RUN btnvit_UI (INPUT FBTN_KOPI).
   RUN rowleave_UI.
   RUN btnkopi_UI.
END PROCEDURE.
PROCEDURE fbtfrik_UI :
   RUN btnvit_UI (INPUT FBTN_FRIKORT).
   RUN rowleave_UI.
   RUN frikort_UI.
   RUN btnvit_UI (INPUT FBTN_FRIKORT).
END PROCEDURE.
PROCEDURE fbtandord_UI :
   RUN btnvit_UI (INPUT MBTN_ANDORD).
   RUN rowleave_UI.
   RUN btnandid_UI.     
END PROCEDURE.
PROCEDURE cmbavd_UI :
   {CMB_AVD11.I} 
END PROCEDURE.

PROCEDURE cmbjp_UI :
   {CMB_JURP2.I}  
END PROCEDURE.

PROCEDURE cmblev_UI :
   ASSIGN    
   lev = CMB_LEV:SCREEN-VALUE.
   IF lev NE huvudlev THEN DO:
      IF SUBSTRING(lev,1,5) = "Sats " THEN DO:
         ASSIGN                    
         BRW_SOKMTRLF:HIDDEN = TRUE  
         BRW_HLEV:HIDDEN = TRUE
         CMB_LEV:HIDDEN = TRUE
         FILL-IN-ENR:HIDDEN = TRUE
         BTN_LEV:HIDDEN = FALSE   
         BRW_SATS:HIDDEN = FALSE         
         FILL-IN-KOD:HIDDEN = FALSE 
         satsvar = TRUE
         valet = TRUE.
         RUN setorgtitle_UI IN brwproc[23] (INPUT "Satslista " + lev).         
         FIND FIRST levtemp WHERE levtemp.LEVNAMN = SUBSTRING(lev,6,20) 
         USE-INDEX LEV NO-LOCK NO-ERROR.
         vald_lev = levtemp.LEVKOD.
         APPLY "ENTRY" TO FILL-IN-KOD.
      END.
      ELSE IF SUBSTRING(lev,1,8) = "Sparade " THEN DO:
         ASSIGN                      
         BRW_SOKMTRLF:HIDDEN = FALSE                   
         BRW_HLEV:HIDDEN = TRUE
         CMB_LEV:HIDDEN = TRUE
         BRW_SATS:HIDDEN = TRUE
         FILL-IN-KOD:HIDDEN = TRUE
         FILL-IN-BEN:HIDDEN = TRUE 
         FILL-IN-ENR:HIDDEN = TRUE
         FILL-IN-ENRSTOLP:HIDDEN = TRUE
         FILL-IN-BENSTOLP:HIDDEN = TRUE 
         BTN_LEV:HIDDEN = FALSE.  
         vald_lev = lev.             
         RUN openbdynspec_UI IN brwproc[26].
      END.  
      ELSE DO:
         ASSIGN    
         BRW_SOKMTRLF:HIDDEN = TRUE                   
         BRW_HLEV:HIDDEN = FALSE         
         CMB_LEV:HIDDEN = TRUE
         BRW_SATS:HIDDEN = TRUE
         FILL-IN-KOD:HIDDEN = TRUE
         BTN_LEV:HIDDEN = FALSE               
         valet = TRUE.
         
         /*Niklas personlig spec_mtrl*/
         IF lev BEGINS globanv THEN vald_lev = "99" + Guru.Konstanter:globanv.          
         ELSE DO:
            IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN  vald_lev = CMB_LEV:SCREEN-VALUE.
            ELSE DO.
               FIND FIRST levtemp WHERE levtemp.LEVNAMN = lev 
               USE-INDEX LEV NO-LOCK NO-ERROR.
               vald_lev = levtemp.LEVKOD.
            END.    
         END.        
         levinlast = "".
         RUN levinlast_UI (INPUT vald_lev,OUTPUT levinlast).
         RUN setorgtitle_UI IN brwproc[22] (INPUT "Materiellista " + lev + levinlast).                  
         APPLY "ENTRY" TO FILL-IN-ENR.
      END.
   END.   
   ELSE DO:
      vald_lev = vald_kundlev.
      /*RUN setorgtitle_UI IN brwproc[22] (INPUT "Materiellista " + STRING(huvudlev)).       */
      levinlast = "".
      RUN levinlast_UI (INPUT vald_lev,OUTPUT levinlast).
      RUN setorgtitle_UI IN brwproc[22] (INPUT "Materiellista " + lev + levinlast).       
   END.      
   RUN vcradmtrl_UI.
END PROCEDURE.

PROCEDURE vcradmtrl_UI :
   {muswait.i}
   ASSIGN 
   BTN_KUNDLISTA:HIDDEN = TRUE
   FILL-IN-ENRSTOLP:HIDDEN = TRUE
   FILL-IN-BENSTOLP:HIDDEN = TRUE
   FILL-IN-ENR:HIDDEN = TRUE
   FILL-IN-BEN:HIDDEN = TRUE
   RAD_SOK:HIDDEN = TRUE
   FILL-IN-KOD:HIDDEN = TRUE.
   IF RAD_MTRL:SCREEN-VALUE = "1" THEN DO:
      EMPTY TEMP-TABLE mtrltemp NO-ERROR.
      IF satsvar = FALSE THEN DO:
         IF vald_lev = vald_kundlev THEN DO:
            ASSIGN
            BRW_STOLP:HIDDEN = TRUE
            BRW_HLEV:HIDDEN = FALSE
            CMB_LEV:HIDDEN = FALSE
            BRW_SATS:HIDDEN = TRUE
            BRW_SOKMTRLF:HIDDEN = TRUE
            BTN_LEV:HIDDEN = TRUE      
            FILL-IN-ENR:HIDDEN = FALSE
            FILL-IN-BEN:HIDDEN = FALSE
            RAD_SOK:HIDDEN = FALSE.
            
         END.
         ELSE IF SUBSTRING(vald_lev,1,8) = "Sparade " THEN DO:
            ASSIGN                      
            BRW_SOKMTRLF:HIDDEN = FALSE                   
            BRW_HLEV:HIDDEN = TRUE
            CMB_LEV:HIDDEN = TRUE
            BRW_SATS:HIDDEN = TRUE
            BTN_LEV:HIDDEN = FALSE.                          
         END.  
         ELSE DO:
            ASSIGN
            BRW_SOKMTRLF:HIDDEN = TRUE
            BRW_STOLP:HIDDEN = TRUE
            BRW_HLEV:HIDDEN = FALSE
            CMB_LEV:HIDDEN = TRUE
            BRW_SATS:HIDDEN = TRUE
            BTN_LEV:HIDDEN = FALSE      
            FILL-IN-ENR:HIDDEN = FALSE
            FILL-IN-BEN:HIDDEN = FALSE
            RAD_SOK:HIDDEN = FALSE.
         END.
         /*Niklas personlig spec_mtrl*/
/*          IF vald_lev = "99" THEN DO: */
         IF vald_lev BEGINS "99" THEN DO:        
            RUN initsok_UI (INPUT 2,INPUT "").
         END.  
         IF Guru.GlobalaVariabler:LastEnr NE "" THEN DO:
            FIND FIRST mtrltemp WHERE mtrltemp.LEVKOD = vald_lev AND mtrltemp.ENR = Guru.GlobalaVariabler:LastEnr AND 
            mtrltemp.KALKNR = 0 NO-LOCK NO-ERROR.
         END.
         RUN setcolsortvar_UI IN brwproc[22] (INPUT " WHERE KALKNR = 0 AND LEVKOD = '" + STRING(vald_lev) + "' USE-INDEX ENR ").
         RUN openbdynspec_UI IN brwproc[22].
         IF AVAILABLE mtrltemp THEN DO:
            RUN setlastrowid_UI IN brwproc[22] (INPUT ROWID(mtrltemp)).
            RUN lastselectdyn_UI IN brwproc[22].
         END.
      END.
      ELSE DO:
         ASSIGN
         BRW_STOLP:HIDDEN = TRUE
         BRW_HLEV:HIDDEN = TRUE
         CMB_LEV:HIDDEN = TRUE
         BRW_SATS:HIDDEN = FALSE
         BTN_LEV:HIDDEN = FALSE      
         FILL-IN-KOD:HIDDEN = FALSE.
         RUN setcolsortvar_UI IN brwproc[23] (INPUT " WHERE SATS = TRUE AND LEVKOD = '" + STRING(vald_lev) + "'").
         RUN openbdynspec_UI IN brwproc[23].
         FIND FIRST satstemp NO-LOCK NO-ERROR.
         IF AVAILABLE satstemp THEN DO:
            RUN setlastrowid_UI IN brwproc[23] (INPUT ROWID(satstemp)).
            RUN lastselectdyn_UI IN brwproc[23].
         END.
      END.
   END.
   ELSE IF RAD_MTRL:SCREEN-VALUE = "2" THEN DO:
      ASSIGN
      BTN_KUNDLISTA:HIDDEN = FALSE
      FILL-IN-ENRSTOLP:HIDDEN = FALSE
      FILL-IN-BENSTOLP:HIDDEN = FALSE
      BRW_STOLP:HIDDEN = FALSE
      BRW_HLEV:HIDDEN = TRUE
      BRW_SATS:HIDDEN = TRUE
      BRW_SOKMTRLF:HIDDEN = TRUE.
      
      FIND FIRST berstolptemp WHERE berstolptemp.STOLPE = TRUE NO-LOCK NO-ERROR.
      IF NOT AVAILABLE berstolptemp THEN DO:         
         RUN initsok_UI (INPUT 2,INPUT "").
      END.     
      RUN setcolsortvar_UI IN brwproc[24] (INPUT " WHERE STOLPE = TRUE AND LEVKOD = '" + STRING(vald_lev) + "'").
      RUN openbdynspec_UI IN brwproc[24]. 
      /*måste öppnas två gånger om sorteringen ska funka*/ 
      IF Guru.Konstanter:globnetprissortvar = 1 THEN RUN openbdynspec_UI IN brwproc[24].
   
   END.
   ELSE IF RAD_MTRL:SCREEN-VALUE = "3" THEN DO: 
      ASSIGN
      BTN_KUNDLISTA:HIDDEN = FALSE
      FILL-IN-ENRSTOLP:HIDDEN = FALSE
      FILL-IN-BENSTOLP:HIDDEN = FALSE
      BRW_STOLP:HIDDEN = FALSE
      BRW_HLEV:HIDDEN = TRUE
      BRW_SATS:HIDDEN = TRUE
      BRW_SOKMTRLF:HIDDEN = TRUE.
      FIND FIRST berstolptemp WHERE berstolptemp.STOLPE = FALSE NO-LOCK NO-ERROR.
      IF NOT AVAILABLE berstolptemp THEN DO:
         RUN initsok_UI (INPUT 2,INPUT "").
      END.      
      RUN setcolsortvar_UI IN brwproc[24] (INPUT " WHERE STOLPE = FALSE AND LEVKOD = '" + STRING(vald_lev) + "'").      
      RUN openbdynspec_UI IN brwproc[24].
       /*måste öppnas två gånger om sorteringen ska funka*/ 
      IF Guru.Konstanter:globnetprissortvar = 1 THEN RUN openbdynspec_UI IN brwproc[24].
   END.
   ELSE IF RAD_MTRL:SCREEN-VALUE = "4" THEN DO:
      ASSIGN
      BRW_STOLP:HIDDEN = TRUE
      BRW_HLEV:HIDDEN = FALSE.
      EMPTY TEMP-TABLE mtrltemp NO-ERROR. 
      /*hämta favoriter*/
      DEFINE VARIABLE ttbuffh AS HANDLE NO-UNDO.  
      tthandle = TEMP-TABLE mtrltemp:HANDLE.
      ttbuffh = tthandle:DEFAULT-BUFFER-HANDLE.
      RUN ttcopy_UI IN huvprogh (INPUT TABLE-HANDLE tthandle).
      ttbuffh:EMPTY-TEMP-TABLE() NO-ERROR.
      FIND FIRST sparaladdatemp NO-ERROR.
      IF NOT AVAILABLE sparaladdatemp THEN CREATE sparaladdatemp.
      ASSIGN
      sparaladdatemp.GLOBANV = globanv /*Användare, i detta fall ELPAO*/
      sparaladdatemp.BENAMNING = "MTRLPRISE"  /*Benämnings sufix, i detta fall ELPAO$STOR*/
      sparaladdatemp.TABVAL = "MTRL" /*Tabellnamn*/
      sparaladdatemp.FALTVALAO = "ENR" /*CHARACTER field*/
      sparaladdatemp.FALTVALDEL = "LEVKOD" /*Integer field*/
      sparaladdatemp.FALTVALDATE = "".   /*DATE field*/
      EMPTY TEMP-TABLE mtrltemp NO-ERROR. 
      RUN laddabrw_UI IN brwproc[22]  (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp). 
      RUN ttjmf_UI IN huvprogh (INPUT-OUTPUT ttbuffh).
      RUN openbdyn_UI IN brwproc[22] (INPUT "").  
       
   END.   
   {musarrow.i}
END PROCEDURE.
PROCEDURE sparaaofavoritermtrl_UI :
   RUN favlaggtill_UI.   
   RUN sparaaofavoriter_UI.       
END PROCEDURE.
PROCEDURE sparaaofavoritervmtrl_UI :
   RUN favlaggtillist_UI.  
   RUN sparaaofavoriter_UI.     
   
END PROCEDURE.
PROCEDURE sparaaofavoriter_UI :      
   DEFINE VARIABLE ttbuffh AS HANDLE NO-UNDO.
   EMPTY TEMP-TABLE mtrltemp NO-ERROR.
   FOR EACH emtrltemp  NO-LOCK:
      CREATE mtrltemp.
      BUFFER-COPY emtrltemp TO mtrltemp.            
   END.   
   tthandle = TEMP-TABLE mtrltemp:HANDLE.
   ttbuffh = tthandle:DEFAULT-BUFFER-HANDLE.
   FIND FIRST sparaladdatemp NO-ERROR.
   IF NOT AVAILABLE sparaladdatemp THEN CREATE sparaladdatemp.
   ASSIGN
   sparaladdatemp.GLOBANV = globanv /*Användare, i detta fall ELPAO*/
   sparaladdatemp.BENAMNING = "MTRLPRISE" /*Benämnings sufix, i detta fall ELPAO$STOR*/
   sparaladdatemp.TABVAL = "MTRL" /*Tabellnamn*/
   sparaladdatemp.FALTVALAO = "ENR" /*CHARACTER field*/
   sparaladdatemp.FALTVALDEL = "LEVKOD" /*Integer field*/
   sparaladdatemp.FALTVALDATE = "".   /*DATE field*/
   RUN ttcopy_UI IN huvprogh (INPUT TABLE-HANDLE tthandle).
   ttbuffh:EMPTY-TEMP-TABLE() NO-ERROR.
   RUN laddabrw_UI IN brwproc[22]  (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp).   
   RUN ttjmfPair_UI IN huvprogh (INPUT TRUE,INPUT "LEVKOD,LEVKOD,ENR,ENR",INPUT TRUE,INPUT-OUTPUT ttbuffh).
   RUN openbdyn_UI IN brwproc[22] (INPUT "").
   RUN sparabrw_UI IN brwproc[22]  (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp).  
   tthandle:EMPTY-TEMP-TABLE ().
   EMPTY TEMP-TABLE mtrltemp NO-ERROR. 
   RUN openbdyn_UI IN brwproc[22] (INPUT "").  
   RUN ttcopyhmt_UI IN huvprogh (INPUT-OUTPUT TABLE-HANDLE tthandle).
   RAD_MTRL:SCREEN-VALUE = "4".
   RUN vcradmtrl_UI.   
  
        
END PROCEDURE.

PROCEDURE cmbvalandkonst_UI :
   
   FIND FIRST konstgrptemp WHERE konstgrptemp.BENAMNING = CMB_VALANDKONST:SCREEN-VALUE NO-LOCK NO-ERROR.
   IF AVAILABLE konstgrptemp THEN DO:
      CMB_VALANDKONST:HIDDEN = FALSE.
      BRW_KONANDKONST:HIDDEN = FALSE.
      /*LENA 20191024 HIDDN = TRUE*/
      BRW_KALAKONS:HIDDEN = TRUE.      
      BTN_BYTANGANDKONST:HIDDEN = FALSE.
      FIND FIRST konstvaltemp WHERE konstvaltemp.KONSKOD = konstgrptemp.KONSKOD NO-LOCK NO-ERROR.
      IF NOT AVAILABLE konstvaltemp THEN DO:
         RUN laddatempen_UI IN bervalapph (INPUT konstgrptemp.KONSKOD, OUTPUT TABLE konstvaltemp APPEND).
      END.
      FIND FIRST konstvaltemp WHERE konstvaltemp.KONSKOD = konstgrptemp.KONSKOD NO-LOCK NO-ERROR.
      IF AVAILABLE konstvaltemp  THEN DO:
         FIND FIRST konsttemp WHERE konsttemp.KONSKOD = konstgrptemp.KONSKOD NO-LOCK NO-ERROR.
         RUN setcolsortvar_UI IN brwproc[27] (INPUT " WHERE KONSKOD = '" + STRING(konstvaltemp.KONSKOD) + "'").
         RUN openbdynspec_UI IN brwproc[27].
      END. 
      RUN setcolsortvar_UI IN brwproc[29] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
      RUN openbdynspec_UI IN brwproc[29].
      
   END.   
   ELSE DO:
      CMB_VALANDKONST:HIDDEN = TRUE.
      BRW_KONANDKONST:HIDDEN = TRUE.
      BRW_KALAKONS:HIDDEN = TRUE.
      BTN_BYTANGANDKONST:HIDDEN = TRUE.
   END.   
END PROCEDURE.

PROCEDURE cmbval_UI :
   {muswait.i}
   FIND FIRST konstgrptemp WHERE konstgrptemp.BENAMNING = CMB_VAL:SCREEN-VALUE 
   NO-LOCK NO-ERROR.      
   cmbspar = CMB_VAL:SCREEN-VALUE.   
   {MARKKABGRP.I}
   IF enval = TRUE THEN DO:            
      RUN friled_UI.
   END.
   ELSE DO:  
      RUN kskap_UI.         
   END.
   
   FIND FIRST konstvaltemp WHERE konstvaltemp.KONSKOD = konstgrptemp.KONSKOD NO-LOCK NO-ERROR.
   IF NOT AVAILABLE konstvaltemp THEN DO:
      RUN laddatempen_UI IN bervalapph (INPUT konstgrptemp.KONSKOD, OUTPUT TABLE konstvaltemp APPEND).
   END.
   RUN bytgrupp_UI. 
   /*Ny kod 20051028 niklas*/
   /*RAD_KOMP = 1.*/
   RUN rowcolsel_UI IN brwproc[21] (INPUT 12,INPUT INTEGER(RAD_KOMP:SCREEN-VALUE)).   
   RUN toggrp_UI.    
   {musarrow.i}
END PROCEDURE.

PROCEDURE kskap_UI :
   /*BRW_B2 = kabelskåp*/
   ASSIGN
   BRW_B2:HIDDEN = TRUE 
   BRW_B3:HIDDEN = TRUE 
   BRW_B4:HIDDEN = TRUE 
   BRW_B5:HIDDEN = TRUE 
   BRW_B6:HIDDEN = TRUE 
   BRW_KB2:HIDDEN = FALSE
   BRW_KB3:HIDDEN = FALSE
   BRW_KB4:HIDDEN = FALSE
   BRW_KB5:HIDDEN = FALSE
   BRW_KB6:HIDDEN = FALSE.   
   IF b2roworg NE 0 OR b2colorg NE 0 THEN DO:
      ASSIGN 
      FILL-IN-B2:ROW = fb2roworg
      FILL-IN-B2:COL = fb2colorg
      FILL-IN-B4:ROW = fb4roworg  
      FILL-IN-B4:COL = fb4colorg 
      FILL-IN-B5:ROW = fb5roworg  
      FILL-IN-B5:COL = fb5colorg.
   END.   
END PROCEDURE.

PROCEDURE esmarkk_UI :      
   IF b2roworg = 0 AND b2colorg = 0 THEN DO:      
      ASSIGN 
      b2roworg = BRW_B2:ROW
      b2colorg = BRW_B2:COL
      b4roworg = BRW_B4:ROW
      b4colorg = BRW_B4:COL
      b5roworg = BRW_B5:ROW
      b5colorg = BRW_B5:COL
      fb2roworg = FILL-IN-B2:ROW
      fb2colorg = FILL-IN-B2:COL
      fb4roworg = FILL-IN-B4:ROW
      fb4colorg = FILL-IN-B4:COL
      fb5roworg = FILL-IN-B5:ROW
      fb5colorg = FILL-IN-B5:COL.
   END.
   IF konstgrptemp.KONSKOD = 35 THEN DO:            
      ASSIGN
      BRW_B2:ROW = b4roworg
      BRW_B2:COL = b4colorg
      BRW_B4:ROW = b5roworg  
      BRW_B4:COL = b5colorg 
      BRW_B5:ROW = b2roworg  
      BRW_B5:COL = b2colorg
      FILL-IN-B2:ROW = fb4roworg
      FILL-IN-B2:COL = fb4colorg
      FILL-IN-B4:ROW = fb5roworg  
      FILL-IN-B4:COL = fb5colorg 
      FILL-IN-B5:ROW = fb2roworg  
      FILL-IN-B5:COL = fb2colorg. 
   END.
   ELSE IF konstgrptemp.KONSKOD = 0 THEN DO:
      ASSIGN
      BRW_B2:ROW = b2roworg
      BRW_B2:COL = b2colorg
      BRW_B4:ROW = b4roworg  
      BRW_B4:COL = b4colorg 
      BRW_B5:ROW = b5roworg  
      BRW_B5:COL = b5colorg
      FILL-IN-B2:ROW = fb2roworg
      FILL-IN-B2:COL = fb2colorg
      FILL-IN-B4:ROW = fb4roworg  
      FILL-IN-B4:COL = fb4colorg 
      FILL-IN-B5:ROW = fb5roworg  
      FILL-IN-B5:COL = fb5colorg. 
   END.   
      
END PROCEDURE.
PROCEDURE fomarkk_UI :      
   IF b2roworg = 0 AND b2colorg = 0 THEN DO:      
      ASSIGN 
      b2roworg = BRW_B2:ROW
      b2colorg = BRW_B2:COL
      b4roworg = BRW_B4:ROW
      b4colorg = BRW_B4:COL
      b5roworg = BRW_B5:ROW
      b5colorg = BRW_B5:COL
      fb2roworg = FILL-IN-B2:ROW
      fb2colorg = FILL-IN-B2:COL
      fb4roworg = FILL-IN-B4:ROW
      fb4colorg = FILL-IN-B4:COL
      fb5roworg = FILL-IN-B5:ROW
      fb5colorg = FILL-IN-B5:COL.
   END.
   IF konstgrptemp.KONSKOD = 33 THEN DO:            
      ASSIGN
      BRW_B2:ROW = b4roworg
      BRW_B2:COL = b4colorg
      BRW_B4:ROW = b5roworg  
      BRW_B4:COL = b5colorg 
      BRW_B5:ROW = b2roworg  
      BRW_B5:COL = b2colorg
      FILL-IN-B2:ROW = fb4roworg
      FILL-IN-B2:COL = fb4colorg
      FILL-IN-B4:ROW = fb5roworg  
      FILL-IN-B4:COL = fb5colorg 
      FILL-IN-B5:ROW = fb2roworg  
      FILL-IN-B5:COL = fb2colorg. 
   END.
   ELSE IF konstgrptemp.KONSKOD = 0 THEN DO:
      ASSIGN
      BRW_B2:ROW = b2roworg
      BRW_B2:COL = b2colorg
      BRW_B4:ROW = b4roworg  
      BRW_B4:COL = b4colorg 
      BRW_B5:ROW = b5roworg  
      BRW_B5:COL = b5colorg
      FILL-IN-B2:ROW = fb2roworg
      FILL-IN-B2:COL = fb2colorg
      FILL-IN-B4:ROW = fb4roworg  
      FILL-IN-B4:COL = fb4colorg 
      FILL-IN-B5:ROW = fb5roworg  
      FILL-IN-B5:COL = fb5colorg. 
   END.   
      
END PROCEDURE.


PROCEDURE friled_UI :
   /*BRW_kB2 = övriga*/
   ASSIGN
   BRW_B2:HIDDEN = FALSE
   BRW_B3:HIDDEN = FALSE
   BRW_B4:HIDDEN = FALSE
   BRW_B5:HIDDEN = FALSE
   BRW_B6:HIDDEN = FALSE
   BRW_KB2:HIDDEN = TRUE 
   BRW_KB3:HIDDEN = TRUE 
   BRW_KB4:HIDDEN = TRUE 
   BRW_KB5:HIDDEN = TRUE 
   BRW_KB6:HIDDEN = TRUE.
   IF globforetag = "gran"  OR globforetag = "NAEK" OR globforetag = "ELKB"  OR globforetag = "CPOMA" THEN RUN esmarkk_UI.
   IF globforetag = "cFORS" THEN RUN fomarkk_UI.
   /*forsm*/
END PROCEDURE.



PROCEDURE vadupp_UI :
   RUN selectfoc_UI (INPUT 14).
   ASSIGN
   counter = 0
   counterord = 0
   kompmtrl = FALSE.
   /*NUM*/
   FIND LAST kon_val USE-INDEX NUM NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:
      counter = kon_val.NUM + 1.      
      FIND LAST bortkon_val USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE bortkon_val THEN DO:
         IF bortkon_val.NUM + 1 >= counter THEN DO:
            counter = bortkon_val.NUM + 1.
         END.
      END.
   END.
   ELSE DO:
      counter = counter + 1.      
      FIND LAST bortkon_val USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE bortkon_val THEN DO:
         IF bortkon_val.NUM + 1 >= counter THEN DO:
            counter = bortkon_val.NUM + 1.
         END.
      END.
   END.
   /*ORDNING*/
   FIND LAST kon_val USE-INDEX ORD NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:                                   
      counterord = kon_val.ORD + 1.
      FIND LAST bortkon_val USE-INDEX ORD NO-LOCK NO-ERROR.
      IF AVAILABLE bortkon_val THEN DO:
         IF bortkon_val.ORD + 1 >= counterord THEN DO:
            counterord = bortkon_val.ORD + 1.
         END.
      END.
   END.
   ELSE DO:
      counterord = counterord + 1.
      FIND LAST bortkon_val USE-INDEX ORD NO-LOCK NO-ERROR.
      IF AVAILABLE bortkon_val THEN DO:
         IF bortkon_val.ORD + 1 >= counterord THEN DO:
            counterord = bortkon_val.ORD + 1.
         END.
      END.
   END.  
   {MARKKABGRP.I}  
   /*ny kod 20051028 niklas*/
   FIND FIRST kon_val NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:               
      RUN selectfoc_UI (INPUT 21).
      /*LAGG*/ 
      APPLY "VALUE-CHANGED" TO RAD_KOMP.
      kon_rowid = ROWID(kon_val).
      IF RAD_KOMP:SCREEN-VALUE = "2" THEN DO:
         FIND FIRST del_val WHERE del_val.NUM = kon_val.NUM
         NO-LOCK NO-ERROR.
         IF AVAILABLE del_val THEN DO:            
            MESSAGE "Ni kan ej komplettera denna konstruktion då den valda konstruktionen är inköpt via delbeställning"
            VIEW-AS ALERT-BOX TITLE "Meddelande".
            komplikoll = TRUE.
            RETURN.
         END.
      END.
      
      FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.
      IF RAD_KOMP:SCREEN-VALUE = "1" THEN newskap = TRUE.
      ELSE IF RAD_KOMP:SCREEN-VALUE = "2" THEN DO:                  
         {MARKKABVAL2.I}
         ASSIGN
         newskap = FALSE
         kon_rowid = ROWID(kon_val).             
         FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE list_mtrl THEN DO:                                                           
            RUN nykabstart_UI.                                          
         END.       
         FIND FIRST kalk_temp WHERE kalk_temp.NUM = kon_val.NUM
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE kalk_temp THEN DO:
            /*LAGG*/
            RUN nykabstart2_UI.
         END.
         IF kon_val.GRUPP NE konsttemp.KONSKOD THEN DO:                           
            MESSAGE "Annan konstruktionsgrupp, endast materiel kommer att läggas till konstruktionen." VIEW-AS ALERT-BOX
            QUESTION BUTTONS OK-CANCEL UPDATE valk1 AS LOGICAL.       
            CASE valk1:
               WHEN TRUE THEN DO:
                  ASSIGN
                  kompmtrl = TRUE               
                  kompmtrlnum = kon_val.NUM
                  spar_rowid = kon_rowid
                  newskap = TRUE.            
               END.
               WHEN FALSE THEN DO:
                  RETURN NO-APPLY.  
               END.   
            END CASE.
         END.
         ELSE DO:          
            IF konsttemp.KTYPKOD NE kon_val.F1 THEN DO:               
               MESSAGE "Annan konstruktion, endast materiel kommer att läggas till konstruktionen." VIEW-AS ALERT-BOX
               QUESTION BUTTONS OK-CANCEL  UPDATE valk2 AS LOGICAL.       
               CASE valk2:
                  WHEN TRUE THEN DO:
                     ASSIGN
                     kompmtrl = TRUE                  
                     kompmtrlnum = kon_val.NUM
                     spar_rowid = kon_rowid
                     newskap = TRUE.            
                  END.
                  WHEN FALSE THEN DO:
                     RETURN NO-APPLY. 
                  END.
               END CASE.      
            END.   
         END.      
      END.
      ELSE IF RAD_KOMP:SCREEN-VALUE = "3" THEN DO:
         /*LENA*/         
         ASSIGN
         kompmtrl = TRUE               
         kompmtrlnum = kon_val.NUM
         spar_rowid = kon_rowid
         newskap = TRUE.
         IF kon_val.GRUPP NE konsttemp.KONSKOD THEN DO:                           
            MESSAGE "Annan konstruktionsgrupp, endast materiel kommer att läggas till konstruktionen." VIEW-AS ALERT-BOX.                           
         END.
         ELSE IF konsttemp.KTYPKOD NE kon_val.F1 THEN DO:               
            MESSAGE "Annan konstruktion, endast materiel kommer att läggas till konstruktionen." VIEW-AS ALERT-BOX.               
         END.
         ELSE DO:                
            IF enval = TRUE THEN DO:
               MESSAGE "Samma konstruktion, gå på Komplettera konstruktion istället!"
               VIEW-AS ALERT-BOX.
               RETURN NO-APPLY. 
            END.   
       
            MESSAGE "Endast materiel kommer att läggas till konstruktionen." VIEW-AS ALERT-BOX.
         END.
      END.   
      
   END.
   ELSE DO:
      newskap = TRUE.
   END. 
   FIND FIRST bbenamntemp WHERE bbenamntemp.KONSKOD = gruppkod NO-LOCK NO-ERROR.   
   
   DEFINE VARIABLE radkompvar AS INTEGER NO-UNDO.
   radkompvar = INTEGER(RAD_KOMP:SCREEN-VALUE). 
   andrakon_rowid = ?.
   
   IF enval = TRUE THEN DO:   
      /*kabekskåp ovh ndet som står i   MARKKABGRP.I*/  
      /*LAGG*/    
      RUN upp_UI.     
      FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.                      
   END.
   ELSE DO:
      RUN upp2_UI.     
   END.
   
   
   RUN kondisp_UI.
   RUN sokkdisp_UI.
   RAD_KOMP:SCREEN-VALUE = STRING(radkompvar).
   APPLY "VALUE-CHANGED" TO RAD_KOMP.
   IF andrakon_rowid = ? THEN.
   ELSE FIND kon_val WHERE ROWID(kon_val) = andrakon_rowid NO-LOCK NO-ERROR.   
   IF NOT AVAILABLE kon_val THEN DO:
      FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.
   END.
   IF RAD_KOMP:SCREEN-VALUE = "2" THEN DO:
      FIND FIRST andrakon_val WHERE andrakon_val.NUM = counter AND andrakon_val.SKAPNUM = counter2 NO-LOCK NO-ERROR.
      IF AVAILABLE andrakon_val THEN RUN setlastrowid_UI IN brwproc[brwNrandkonst] (INPUT ROWID(andrakon_val)).
      RUN lastselectdyn_UI IN brwproc[brwNrandkonst].
      
      IF komplikoll = FALSE THEN BELL.               
   END.
   komplikoll = FALSE.
   RUN togkomp_UI.
   
  
   /*
   RUN openbdynspec_UI IN brwproc[21]. 
   RUN sokkdisp_UI.
   */
END PROCEDURE.

PROCEDURE upp_UI :
   
   /*KABELSKÅP MM*/
   IF newskap = TRUE THEN DO:
      CREATE kon_val.
      ASSIGN 
      kon_val.ANDRAD = "AND"
      kon_val.NUM = counter                         
      kon_val.GRUPP = gruppkod
      kon_val.F1 = konsttemp.KTYPKOD
      kon_val.TYP = 1
      kon_val.ORD = counterord.
      andrakon_rowid = ROWID(kon_val).
      kon_rowid = ROWID(kon_val).
      CREATE kon_val.
      ASSIGN 
      kon_val.ANDRAD = "AND"
      kon_val.NUM = counter                         
      kon_val.GRUPP = gruppkod
      kon_val.F1 = konsttemp.KTYPKOD         
      kon_val.KSKAP = TRUE
      kon_val.TYP = 1
      kon_val.SKAPNUM = 1. 
   END.
   ELSE DO:        
      RUN selectfoc_UI (INPUT 21).      
      FIND kon_val  WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.
      RUN extraf_UI (INPUT 2).        
      FIND LAST kon_val WHERE kon_val.NUM = counter USE-INDEX NUM2 NO-LOCK NO-ERROR.
      IF AVAILABLE kon_val THEN DO:                                   
         counter2 = kon_val.SKAPNUM + 1.
      END.
      ELSE DO:    
         ASSIGN
         counter2 = 0
         counter2 = counter2 + 1.
      END.           
      CREATE kon_val.
      ASSIGN 
      kon_val.ANDRAD = "AND"
      kon_val.NUM = counter                         
      kon_val.GRUPP = gruppkod
      kon_val.F1 = konsttemp.KTYPKOD         
      kon_val.KSKAP = TRUE
      kon_val.TYP = 1
      kon_val.SKAPNUM = counter2.         
   END.   
   IF bbenamntemp.B2 NE " " THEN DO:
      ASSIGN      
      antal_valda = BRW_B2:NUM-SELECTED-ROWS 
      antal_raknare = 1.            
      DO WHILE antal_raknare LE antal_valda:
         RUN fselectfoc_UI (INPUT 2).
         IF AVAILABLE konstvaltemp THEN kon_val.F2 = konstvaltemp.KVALKOD.
         antal_raknare = antal_raknare + 1.
      END.                                            
   END. 
   ELSE DO:
      ASSIGN
      BRW_B2:HIDDEN  = TRUE
      FILL-IN-B2:HIDDEN  = TRUE.
   END.   
   IF bbenamntemp.B3 NE " " THEN DO:
      ASSIGN      
      antal_valda = BRW_B3:NUM-SELECTED-ROWS 
      antal_raknare = 1.            
      DO WHILE antal_raknare LE antal_valda:
         RUN fselectfoc_UI (INPUT 3).
         IF AVAILABLE konstvaltemp THEN kon_val.F3 = konstvaltemp.KVALKOD.
         antal_raknare = antal_raknare + 1.
      END.        
   END.  
   ELSE DO: 
      ASSIGN
      BRW_B3:HIDDEN  = TRUE
      FILL-IN-B3:HIDDEN  = TRUE.
   END.  
   IF bbenamntemp.B4 NE " " THEN DO:
      ASSIGN      
      antal_valda = BRW_B4:NUM-SELECTED-ROWS 
      antal_raknare = 1.            
      DO WHILE antal_raknare LE antal_valda:
         RUN fselectfoc_UI (INPUT 4).
         IF AVAILABLE konstvaltemp THEN kon_val.F4 = konstvaltemp.KVALKOD.
         antal_raknare = antal_raknare + 1.
      END.  
         
   END.
   ELSE DO: 
      ASSIGN
      BRW_B4:HIDDEN  = TRUE
      FILL-IN-B4:HIDDEN  = TRUE.
   END.    
   IF bbenamntemp.B5 NE " " THEN DO:
      ASSIGN      
      antal_valda = BRW_B5:NUM-SELECTED-ROWS 
      antal_raknare = 1.            
      DO WHILE antal_raknare LE antal_valda:
         RUN fselectfoc_UI (INPUT 5).
         IF AVAILABLE konstvaltemp THEN kon_val.F5 = konstvaltemp.KVALKOD.
         antal_raknare = antal_raknare + 1.
      END.  
      
   END.       
   ELSE DO:
      ASSIGN
      BRW_B5:HIDDEN  = TRUE
      FILL-IN-B5:HIDDEN  = TRUE.
   END. 
   IF bbenamntemp.B6 NE " " THEN DO:
      ASSIGN      
      antal_valda = BRW_B6:NUM-SELECTED-ROWS 
      antal_raknare = 1.            
      DO WHILE antal_raknare LE antal_valda:
         RUN fselectfoc_UI (INPUT 6).
         IF AVAILABLE konstvaltemp THEN kon_val.F6 = konstvaltemp.KVALKOD.
         antal_raknare = antal_raknare + 1.
      END.        
   END. 
   ELSE DO:
      ASSIGN
      BRW_B6:HIDDEN = TRUE
      FILL-IN-B6:HIDDEN = TRUE.
   END. 
   IF newskap = TRUE THEN DO:
     
      /*komplettera mtrl på konstruktion med endast mtrl*/
      IF kompmtrl = TRUE THEN DO:         
         FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE list_mtrl THEN DO:                                                   
            RUN nykabstart_UI.                                          
         END.                  
         FIND FIRST kalk_temp WHERE kalk_temp.NUM = kon_val.NUM
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE kalk_temp THEN DO:
            RUN nykabstart2_UI.
         END.
         FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM:
            FIND FIRST listbuff WHERE listbuff.ENR = list_mtrl.ENR AND 
            listbuff.NUM = kompmtrlnum NO-LOCK NO-ERROR.
            IF NOT AVAILABLE listbuff THEN DO:
               BUFFER-COPY list_mtrl TO listbuff.
               ASSIGN
               listbuff.NUM = kompmtrlnum               
               listbuff.SKAPNUM = 0.
            END.
            DELETE list_mtrl.
         END.
         FOR EACH konbuff WHERE konbuff.NUM = kon_val.NUM AND
         konbuff.KSKAP = TRUE:
            DELETE konbuff.
         END.
         DELETE kon_val.
         kon_rowid = spar_rowid.
      END.
      RUN sorterabrwval_UI.       
      RUN sokkdisp_UI.
      IF kompmtrl = TRUE THEN DO:               
         kompmtrl = FALSE.
         APPLY "VALUE-CHANGED" TO RAD_KOMP.
      END.
   END.
   ELSE DO:
      FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM
      NO-LOCK NO-ERROR.
      IF AVAILABLE list_mtrl THEN DO:         
         kon_rowid = ROWID(kon_val).    
         RUN nykabu_UI.        
      END.
      ELSE DO:
         kon_rowid = ROWID(kon_val).    
         RUN nykabstart_UI.
      END.
      FIND FIRST kalk_temp WHERE kalk_temp.NUM = kon_val.NUM
      NO-LOCK NO-ERROR.
      IF AVAILABLE kalk_temp THEN DO:
         kon_rowid = ROWID(kon_val).   
         RUN nykab2u_UI.             
      END.
      ELSE DO:
         kon_rowid = ROWID(kon_val).    
         RUN nykabstart2_UI.
      END.           
   END.  
   RUN kondisp_UI.
   RUN sokkdisp_UI.
END PROCEDURE.

PROCEDURE upp2_UI :
   IF newskap = TRUE THEN DO:
      CREATE kon_val.
      ASSIGN 
      kon_val.ANDRAD = "AND"
      kon_val.NUM = counter                         
      kon_val.GRUPP = gruppkod
      kon_val.F1 = konsttemp.KTYPKOD   
      kon_rowid = ROWID(kon_val)
      kon_val.ORD = counterord.
   END.
   ELSE DO:        
      RUN selectfoc_UI (INPUT 21).      
      FIND kon_val  WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.
      RUN extraf_UI (INPUT 2).                     
   END.  
   IF bbenamntemp.B2 NE " " THEN DO:               
      ASSIGN      
      antal_valda =  BRW_KB2:NUM-SELECTED-ROWS
      antal_raknare = 1.            
      DO WHILE antal_raknare LE antal_valda:
         RUN kb2_UI. 
        
         antal_raknare = antal_raknare + 1.
      END.                    
   END.        
   ELSE DO:
      ASSIGN
      BRW_KB2:HIDDEN  = TRUE
      FILL-IN-B2:HIDDEN  = TRUE.
   END.   
   IF bbenamntemp.B3 NE " " THEN DO:
      ASSIGN      
      antal_valda = BRW_KB3:NUM-SELECTED-ROWS
      antal_raknare = 1.      
      DO WHILE antal_raknare LE antal_valda:          
         RUN kb3_UI.
         antal_raknare = antal_raknare + 1.
      END.   
   END.  
   ELSE DO: 
      ASSIGN
      BRW_KB3:HIDDEN  = TRUE
      FILL-IN-B3:HIDDEN  = TRUE.
   END.  
   IF bbenamntemp.B4 NE " " THEN DO:
      ASSIGN      
      antal_valda = BRW_KB4:NUM-SELECTED-ROWS
      antal_raknare = 1.     
      DO WHILE antal_raknare LE antal_valda:
         RUN kb4_UI.
                           
         antal_raknare = antal_raknare + 1.               
      END.   
   END.
   ELSE DO: 
      ASSIGN
      BRW_KB4:HIDDEN  = TRUE
      FILL-IN-B4:HIDDEN  = TRUE.
   END.    
   IF bbenamntemp.B5 NE " " THEN DO:
      ASSIGN
      antal_valda = BRW_KB5:NUM-SELECTED-ROWS
      antal_raknare = 1.      
      DO WHILE antal_raknare LE antal_valda:         
         RUN kb5_UI.
         antal_raknare = antal_raknare + 1.               
      END.   
   END.       
   ELSE DO:
      ASSIGN
      BRW_KB5:HIDDEN  = TRUE
      FILL-IN-B5:HIDDEN  = TRUE.
   END. 
   IF bbenamntemp.B6 NE " " THEN DO:
      ASSIGN       
      antal_valda = BRW_KB6:NUM-SELECTED-ROWS
      antal_raknare = 1.   
      DO WHILE antal_raknare LE antal_valda:
         RUN kb6_UI.
         antal_raknare = antal_raknare + 1.               
      END.   
   END. 
   ELSE DO:
      ASSIGN
      BRW_KB6:HIDDEN  = TRUE
      FILL-IN-B6:HIDDEN  = TRUE.
   END.                                     
   
   FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.   
   FIND FIRST konbuff WHERE konbuff.NUM = kon_val.NUM AND
   konbuff.KSKAP = TRUE USE-INDEX NUM NO-LOCK NO-ERROR.
   IF AVAILABLE konbuff THEN DO:
      FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-ERROR.
      IF kompmtrl = FALSE THEN RUN extraf_UI (INPUT 2).      
   END.
   
   IF newskap = TRUE THEN DO:
      /*ny kod 20051028 niklas*/
      IF kompmtrl = TRUE THEN DO:                  
         FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE list_mtrl THEN DO:                                                   
            RUN nykabstart_UI.                                          
         END.                  
         FIND FIRST kalk_temp WHERE kalk_temp.NUM = kon_val.NUM
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE kalk_temp THEN DO:
            RUN nykabstart2_UI.
         END.
         FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM:
            FIND FIRST listbuff WHERE listbuff.ENR = list_mtrl.ENR AND 
            listbuff.NUM = kompmtrlnum NO-LOCK NO-ERROR.
            IF NOT AVAILABLE listbuff THEN DO:
               BUFFER-COPY list_mtrl TO listbuff.
               ASSIGN
               listbuff.NUM = kompmtrlnum               
               listbuff.SKAPNUM = 0.
            END.
            DELETE list_mtrl.
         END.
         FOR EACH konbuff WHERE konbuff.NUM = kon_val.NUM AND
         konbuff.KSKAP = TRUE:
            DELETE konbuff.
         END.
         DELETE kon_val.
         kon_rowid = spar_rowid.
      END.
      RUN sorterabrwval_UI.
      RUN sokkdisp_UI.
         
      IF kompmtrl = TRUE THEN DO:               
         kompmtrl = FALSE.
         APPLY "VALUE-CHANGED" TO RAD_KOMP.
      END.
   END.
   
END PROCEDURE.

PROCEDURE kb2_UI :
   RUN fselectfoc_UI (INPUT 9).
   IF newskap = FALSE THEN DO:
      FIND FIRST konbuff WHERE konbuff.NUM = counter AND
      konbuff.F2 = konstvaltemp.KVALKOD NO-LOCK NO-ERROR.
      IF AVAILABLE konbuff THEN DO:
         MESSAGE konstvaltemp.BB + ":" + konstvaltemp.KVALKOD + " finns redan lagrat på konstruktionen."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         komplikoll = TRUE.
         RETURN.
      END.   
   END.
   RUN kb_UI.               
   kon_val.F2 = konstvaltemp.KVALKOD.

   RUN newskap_UI.   
END PROCEDURE.

PROCEDURE kb3_UI :
   RUN fselectfoc_UI (INPUT 10).
   IF newskap = FALSE THEN DO:
      FIND FIRST konbuff WHERE konbuff.NUM = counter AND
      konbuff.F3 = konstvaltemp.KVALKOD NO-LOCK NO-ERROR.
      IF AVAILABLE konbuff THEN DO:
         MESSAGE konstvaltemp.KVALKOD + " finns redan lagrat på konstruktionen."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         komplikoll = TRUE.
         RETURN.
      END.   
   END.
   RUN kb_UI.               
   kon_val.F3 = konstvaltemp.KVALKOD.
   RUN newskap_UI.   
END PROCEDURE.

PROCEDURE kb4_UI :
   RUN fselectfoc_UI (INPUT 11).
   IF newskap = FALSE THEN DO:
      FIND FIRST konbuff WHERE konbuff.NUM = counter AND
      konbuff.F4 = konstvaltemp.KVALKOD NO-LOCK NO-ERROR.
      IF AVAILABLE konbuff THEN DO:
         MESSAGE konstvaltemp.KVALKOD + " finns redan lagrat på konstruktionen."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         komplikoll = TRUE.
         RETURN.
      END.   
   END.
   RUN kb_UI.             
   kon_val.F4 = konstvaltemp.KVALKOD.  
   RUN newskap_UI.
END PROCEDURE.

PROCEDURE kb5_UI :
   RUN fselectfoc_UI (INPUT 12).
   IF newskap = FALSE THEN DO:
      FIND FIRST konbuff WHERE konbuff.NUM = counter AND
      konbuff.F5 = konstvaltemp.KVALKOD NO-LOCK NO-ERROR.
      IF AVAILABLE konbuff THEN DO:
         MESSAGE konstvaltemp.KVALKOD + " finns redan lagrat på konstruktionen."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         komplikoll = TRUE.
         RETURN.
      END.   
   END.      
   RUN kb_UI.                             
   kon_val.F5 = konstvaltemp.KVALKOD.   
   RUN newskap_UI.
END PROCEDURE.

PROCEDURE kb6_UI :
   RUN fselectfoc_UI (INPUT 13).
   IF newskap = FALSE THEN DO:
      FIND FIRST konbuff WHERE konbuff.NUM = counter AND
      konbuff.F6 = konstvaltemp.KVALKOD NO-LOCK NO-ERROR.
      IF AVAILABLE konbuff THEN DO:
         MESSAGE konstvaltemp.KVALKOD + " finns redan lagrat på konstruktionen."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         komplikoll = TRUE.
         RETURN.
      END.   
   END.      
   RUN kb_UI.      
   kon_val.F6 = konstvaltemp.KVALKOD.   
   RUN newskap_UI.
END PROCEDURE.

PROCEDURE newskap_UI :
   IF newskap = FALSE THEN DO:
      /*KOMPLETTERA MATERIAL*/
      FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM
      NO-LOCK NO-ERROR.
      IF AVAILABLE list_mtrl THEN DO:         
         kon_rowid = ROWID(kon_val).    
         RUN nykabu_UI.             
      END.
      ELSE DO:         
         kon_rowid = ROWID(kon_val).    
         RUN nykabstart_UI.
      END.
      FIND FIRST kon_val  WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.
      FIND FIRST kalk_temp WHERE kalk_temp.NUM = kon_val.NUM
      NO-LOCK NO-ERROR.
      IF AVAILABLE kalk_temp THEN DO:
         kon_rowid = ROWID(kon_val). 
          
         RUN nykab2u_UI.             
      END.
      ELSE DO:
         kon_rowid = ROWID(kon_val).    
         RUN nykabstart2_UI.
      END. 
      FIND FIRST kon_val WHERE kon_val.NUM = valnum AND kon_val.KSKAP = FALSE 
      NO-LOCK NO-ERROR.   
   END.
END PROCEDURE.
PROCEDURE KabelAndnykab2u_UI :
   DEFINE INPUT PARAMETER TABLE FOR sparakon_val.
   FIND FIRST sparakon_val  WHERE NO-LOCK NO-ERROR.
  
   IF Guru.GlobalaVariabler:KorBerDS = TRUE THEN DO:
      RUN KalkKoderhmt_UI IN Guru.GlobalaVariabler:BerDSapph 
      (INPUT valnum,INPUT TABLE sparakon_val,OUTPUT TABLE kalk_temp APPEND).
      EMPTY TEMP-TABLE sparakon_val NO-ERROR.
   END.
   ELSE DO:
      IF Guru.Konstanter:appcon THEN DO:  
         RUN NYKABU2.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
         (INPUT valaonr, INPUT valomrade,INPUT sparakon_val.NUM, INPUT sparakon_val.SKAPNUM, INPUT TABLE sparakon_val,OUTPUT TABLE kalk_temp APPEND).
      END.
      ELSE DO:
         RUN NYKABU2.P
         (INPUT valaonr, INPUT valomrade,INPUT sparakon_val.NUM, INPUT sparakon_val.SKAPNUM, INPUT TABLE sparakon_val,OUTPUT TABLE kalk_temp APPEND).
      END.   
   END.
   EMPTY TEMP-TABLE sparakon_val NO-ERROR.        
END PROCEDURE.
PROCEDURE nykab2u_UI :
   FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-ERROR.  
   ASSIGN
   valnum = kon_val.NUM
   valskapnum = kon_val.SKAPNUM.
    /*hämtar kalkylkoder*/
   EMPTY TEMP-TABLE sparakon_val NO-ERROR. 
   IF Guru.GlobalaVariabler:KorBerDS = TRUE THEN DO:
      CREATE sparakon_val.
      BUFFER-COPY kon_val TO sparakon_val.
      RUN KalkKoderhmt_UI IN Guru.GlobalaVariabler:BerDSapph 
      (INPUT valnum,INPUT TABLE sparakon_val,OUTPUT TABLE kalk_temp APPEND).
      EMPTY TEMP-TABLE sparakon_val NO-ERROR.
   END.
   ELSE DO:
      CREATE sparakon_val.
      BUFFER-COPY kon_val TO sparakon_val.
      IF Guru.Konstanter:appcon THEN DO:  
         RUN NYKABU2.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
         (INPUT valaonr, INPUT valomrade,INPUT valnum, INPUT valskapnum, INPUT TABLE sparakon_val,OUTPUT TABLE kalk_temp APPEND).
      END.
      ELSE DO:
         RUN NYKABU2.P
         (INPUT valaonr, INPUT valomrade,INPUT valnum, INPUT valskapnum, INPUT TABLE sparakon_val,OUTPUT TABLE kalk_temp APPEND).
      END.   
   END.
   EMPTY TEMP-TABLE sparakon_val NO-ERROR.             
END PROCEDURE.

PROCEDURE nykabu_UI :
   
   FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-ERROR.  
   ASSIGN
   valnum = kon_val.NUM
   valskapnum = kon_val.SKAPNUM.
   EMPTY TEMP-TABLE sparakon_val NO-ERROR. 
   CREATE sparakon_val.
   BUFFER-COPY kon_val TO sparakon_val.
  
   IF Guru.Konstanter:appcon THEN DO:                           
      RUN NYKABUA.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
      (INPUT INTEGER(valaonr), INPUT valomrade,INPUT valnum, INPUT valskapnum, INPUT xtillyvar, INPUT TABLE sparakon_val, OUTPUT TABLE list_mtrl APPEND).
   END.
   ELSE DO:
      RUN NYKABUA.P                                                                                
      (INPUT INTEGER(valaonr), INPUT valomrade,INPUT valnum, INPUT valskapnum, INPUT xtillyvar, INPUT TABLE sparakon_val, OUTPUT TABLE list_mtrl APPEND).
   END.
   {NETTOMARK.I}
   EMPTY TEMP-TABLE sparakon_val NO-ERROR.          
END PROCEDURE.


PROCEDURE kb_UI :
   FIND LAST kon_val WHERE kon_val.NUM = counter USE-INDEX NUM2 NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN counter2 = kon_val.SKAPNUM + 1.   
   ELSE DO:    
      ASSIGN
      counter2 = 0
      counter2 = counter2 + 1.
   END.              
   CREATE kon_val.
   ASSIGN 
   kon_val.ANDRAD = "AND"
   kon_val.NUM = counter                         
   kon_val.GRUPP = gruppkod
   kon_val.F1 = konsttemp.KTYPKOD   
   kon_val.KSKAP = TRUE
   kon_val.TYP = 1
   kon_val.SKAPNUM = counter2.
END PROCEDURE.

PROCEDURE btntext_UI :
   musz = FALSE.
   {muswait.i}
   ASSIGN
   antal_valda = BRW_MTRL:NUM-SELECTED-ROWS 
   antal_raknare = 1.
   DO WHILE antal_raknare LE antal_valda:
      RUN fselectfoc_UI (INPUT 15).
      IF AVAILABLE list_mtrl THEN DO:
         RUN inkopkoll_UI (INPUT 5, OUTPUT musz, OUTPUT antalinkvar).
         IF musz = TRUE THEN DO:            
            MESSAGE "Ni kan inte ändra texten på detta materiel." list_mtrl.ENR " Det är inköpt via inköpsrutinen!"
            VIEW-AS ALERT-BOX TITLE "Meddelande".
            musz = FALSE.      
         END.
         ELSE RUN MTEXTU.W (INPUT ROWID(list_mtrl)).
      END.       
      antal_raknare = antal_raknare + 1.
   END.
   {musarrow.i}
END PROCEDURE.

PROCEDURE solen_UI :
   RUN rowleave_UI.
   RUN btnsolen_UI.
END PROCEDURE.
PROCEDURE btnover_UI :
   RUN rowleave_UI.
   RUN stolp_UI.  
   APPLY "ENTRY" TO  listmtrlantal.
END PROCEDURE.

PROCEDURE stolp_UI :
   {muswait.i}
   antal_valda = BRW_VAL:NUM-SELECTED-ROWS.
   IF antal_valda = 0 THEN DO:
      MESSAGE "Markera den konstruktion du vill lägga till materiel för." 
      VIEW-AS ALERT-BOX.
      RETURN.
   END.
   ELSE DO:
      RUN selectfoc_UI (INPUT 21).      
      kon_rowid = ROWID(kon_val).
   END.   
   IF RAD_MTRL:SCREEN-VALUE = "1" OR RAD_MTRL:SCREEN-VALUE = "4" THEN DO:
      IF BRW_SOKMTRLF:HIDDEN = FALSE THEN DO:
         ASSIGN
         antal_valda = BRW_SOKMTRLF:NUM-SELECTED-ROWS
         antal_raknare = 1.
         DO WHILE antal_raknare LE antal_valda:                                   
            RUN fselectfoc_UI (INPUT 26).                                   
            /*Niklas personlig spec_mtrl*/
            IF AVAILABLE soktamtrlfavo  THEN DO:
               FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
               list_mtrl.ENR = soktamtrlfavo.ENR AND list_mtrl.LEVKOD = soktamtrlfavo.LEVKOD
               EXCLUSIVE-LOCK NO-ERROR.
               IF AVAILABLE list_mtrl THEN DO:
                  ASSIGN
                  mtrl_rowid = ROWID(list_mtrl).            
               END.
               ELSE DO:
                  CREATE list_mtrl.
                  ASSIGN
                  list_mtrl.NUM = kon_val.NUM
                  list_mtrl.ENR = soktamtrlfavo.ENR
                  list_mtrl.BENAMNING = soktamtrlfavo.BENAMNING
                  list_mtrl.ANTAL = 1
                  list_mtrl.ENHET = LC(soktamtrlfavo.ENHET)
                  list_mtrl.PRIS = soktamtrlfavo.NPRIS                
                  list_mtrl.LINKAB = FALSE
                  mtrl_rowid = ROWID(list_mtrl).
                  /*Niklas personlig spec_mtrl*/
                  list_mtrl.LEVKOD = soktamtrlfavo.LEVKOD.           
                  FIND FIRST satstemp WHERE satstemp.SATS = TRUE AND satstemp.KOD = list_mtrl.ENR AND
                  satstemp.LEVKOD = list_mtrl.LEVKOD USE-INDEX KOD NO-LOCK NO-ERROR.
                  IF AVAILABLE satstemp THEN list_mtrl.SATS = TRUE.
                  ELSE list_mtrl.SATS = FALSE.
                  
               END.  
               
               IF Guru.Konstanter:varforetypval[29] = 1  THEN DO:                 
                  /*nettopris beredning inköp*/
                  FIND FIRST kmtrltemp WHERE kmtrltemp.LEVKOD = mtrltemp.LEVKOD AND kmtrltemp.ENR = soktamtrlfavo.ENR AND kmtrltemp.KALKNR = 0
                  NO-LOCK NO-ERROR.
                  IF NOT AVAILABLE kmtrltemp THEN DO:                        
                     CREATE kmtrltemp.
                     BUFFER-COPY soktamtrlfavo TO kmtrltemp.                                    
                  END.
                  IF Guru.Konstanter:varforetypval[37] NE 0 THEN DO:
                     EMPTY TEMP-TABLE ekmtrltemp NO-ERROR. 
                     CREATE ekmtrltemp.
                     BUFFER-COPY kmtrltemp TO ekmtrltemp.
                     RUN kommentar_UI IN nettoh (INPUT-OUTPUT TABLE ekmtrltemp).            
                     FIND FIRST ekmtrltemp NO-LOCK NO-ERROR.
                     FIND FIRST kmtrltemp WHERE kmtrltemp.LEVKOD = soktamtrlfavo.LEVKOD AND kmtrltemp.ENR = soktamtrlfavo.ENR AND kmtrltemp.KALKNR = 0 NO-ERROR.
                     BUFFER-COPY ekmtrltemp TO kmtrltemp.
                  END.
               END.   
            END.
            antal_raknare = antal_raknare + 1.                                 
         END.         
         RUN setcolsortvar_UI IN brwproc[15] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
         RUN openbdynspec_UI IN brwproc[15].
         FIND FIRST list_mtrl WHERE ROWID(list_mtrl) = mtrl_rowid NO-LOCK NO-ERROR.
         IF AVAILABLE list_mtrl THEN DO:
            RUN setlastrowid_UI IN brwproc[15] (INPUT ROWID(list_mtrl)).
            RUN lastselectdyn_UI IN brwproc[15].  
            
         END.         
         RUN title_UI IN brwproc[15].
      END.      
      
      ELSE IF satsvar = FALSE THEN DO:
         ASSIGN
         antal_valda = BRW_HLEV:NUM-SELECTED-ROWS
         antal_raknare = 1.
         DO WHILE antal_raknare LE antal_valda:                                   
            RUN fselectfoc_UI (INPUT 22).                                   
            /*Niklas personlig spec_mtrl*/
            IF AVAILABLE mtrltemp THEN DO:
               IF mtrltemp.LEVKOD BEGINS "99" THEN DO:        
                  FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
                  list_mtrl.ENR = mtrltemp.ENR AND list_mtrl.LEVKOD = "99"
                  EXCLUSIVE-LOCK NO-ERROR.
               END.
               ELSE DO:
                  FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
                  list_mtrl.ENR = mtrltemp.ENR AND list_mtrl.LEVKOD = mtrltemp.LEVKOD
                  EXCLUSIVE-LOCK NO-ERROR.
               END.            
               IF AVAILABLE list_mtrl THEN DO:
                  ASSIGN
                  mtrl_rowid = ROWID(list_mtrl).            
               END.
               ELSE DO:
                  CREATE list_mtrl.
                  ASSIGN
                  list_mtrl.NUM = kon_val.NUM
                  list_mtrl.ENR = mtrltemp.ENR
                  list_mtrl.BENAMNING = mtrltemp.BENAMNING
                  list_mtrl.ANTAL = 1
                  list_mtrl.ENHET = LC(mtrltemp.ENHET)
                  list_mtrl.PRIS = mtrltemp.NPRIS                
                  list_mtrl.LINKAB = FALSE
                  mtrl_rowid = ROWID(list_mtrl).
                  /*Niklas personlig spec_mtrl*/
                  IF mtrltemp.LEVKOD BEGINS "99" THEN list_mtrl.LEVKOD = "99".           
                  ELSE list_mtrl.LEVKOD = mtrltemp.LEVKOD.           
                  FIND FIRST satstemp WHERE satstemp.SATS = TRUE AND satstemp.KOD = list_mtrl.ENR AND
                  satstemp.LEVKOD = list_mtrl.LEVKOD USE-INDEX KOD NO-LOCK NO-ERROR.
                  IF AVAILABLE satstemp THEN list_mtrl.SATS = TRUE.
                  ELSE list_mtrl.SATS = FALSE.
               END.  
               IF Guru.Konstanter:varforetypval[29] = 1  THEN DO:                 
                  /*nettopris beredning inköp*/
                  FIND FIRST kmtrltemp WHERE kmtrltemp.LEVKOD = mtrltemp.LEVKOD AND kmtrltemp.ENR = mtrltemp.ENR AND kmtrltemp.KALKNR = 0
                  NO-LOCK NO-ERROR.
                  IF NOT AVAILABLE kmtrltemp THEN DO:                        
                     CREATE kmtrltemp.
                     BUFFER-COPY mtrltemp TO kmtrltemp.                                    
                  END.
                  IF Guru.Konstanter:varforetypval[37] NE 0 THEN DO:
                     EMPTY TEMP-TABLE ekmtrltemp NO-ERROR. 
                     CREATE ekmtrltemp.
                     BUFFER-COPY kmtrltemp TO ekmtrltemp.
                     RUN kommentar_UI IN nettoh (INPUT-OUTPUT TABLE ekmtrltemp).            
                     FIND FIRST ekmtrltemp NO-LOCK NO-ERROR.
                     FIND FIRST kmtrltemp WHERE kmtrltemp.LEVKOD = mtrltemp.LEVKOD AND kmtrltemp.ENR = mtrltemp.ENR AND kmtrltemp.KALKNR = 0 NO-ERROR.
                     BUFFER-COPY ekmtrltemp TO kmtrltemp.
                  END.
   
               END.
            END.
            antal_raknare = antal_raknare + 1.                                 
         END.         
         RUN setcolsortvar_UI IN brwproc[15] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
         RUN openbdynspec_UI IN brwproc[15].
         FIND FIRST list_mtrl WHERE ROWID(list_mtrl) = mtrl_rowid NO-LOCK NO-ERROR.
         IF AVAILABLE list_mtrl THEN DO:
            RUN setlastrowid_UI IN brwproc[15] (INPUT ROWID(list_mtrl)).
            RUN lastselectdyn_UI IN brwproc[15].  
            
         END.         
         RUN title_UI IN brwproc[15].
      END.
      ELSE DO:
         ASSIGN
         antal_valda = BRW_SATS:NUM-SELECTED-ROWS
         antal_raknare = 1.
         DO WHILE antal_raknare LE antal_valda:                                   
            RUN fselectfoc_UI (INPUT 23).     
            FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
            list_mtrl.ENR = satstemp.ENR AND list_mtrl.LEVKOD = satstemp.LEVKOD
            EXCLUSIVE-LOCK NO-ERROR.
            IF AVAILABLE list_mtrl THEN DO:
               ASSIGN
               mtrl_rowid = ROWID(list_mtrl).            
            END.
            ELSE DO:
               CREATE list_mtrl.
               ASSIGN
               list_mtrl.NUM = kon_val.NUM
               list_mtrl.ENR = satstemp.ENR
               list_mtrl.BENAMNING = satstemp.BENAMNING
               list_mtrl.ANTAL = 1
               list_mtrl.ENHET = LC(satstemp.ENHET)
               list_mtrl.PRIS = satstemp.PRIS 
               list_mtrl.LEVKOD = satstemp.LEVKOD           
               list_mtrl.LINKAB = FALSE
               list_mtrl.SATS = TRUE
               mtrl_rowid = ROWID(list_mtrl).
            END.      
            antal_raknare = antal_raknare + 1.                                 
         END.         
         RUN setcolsortvar_UI IN brwproc[15] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
         RUN openbdynspec_UI IN brwproc[15].
         FIND FIRST list_mtrl WHERE ROWID(list_mtrl) = mtrl_rowid NO-LOCK NO-ERROR.
         IF AVAILABLE list_mtrl THEN DO:
            RUN setlastrowid_UI IN brwproc[15] (INPUT ROWID(list_mtrl)).
            RUN lastselectdyn_UI IN brwproc[15]. 
            
         END.         
         RUN title_UI IN brwproc[15].
      END.
   END.
   ELSE DO:                        
      ASSIGN
      antal_valda = BRW_STOLP:NUM-SELECTED-ROWS
      antal_raknare = 1.
      DO WHILE antal_raknare LE antal_valda:   
         RUN fselectfoc_UI (INPUT 24).    
         ASSIGN
         senr = "" 
         slev = ""         
         spris = 0.
         IF xtillyvar NE "" THEN DO:         
            /*lena byt även stolpar till rätt lev*/ 
            IF Guru.Konstanter:varforetypval[59] = 1 THEN DO:       
               /*RUN stolpaltlevUtb_UI IN bervalapph (INPUT valomrade, INPUT INTEGER(valaonr) , INPUT berstolptemp.ENR,INPUT berstolptemp.LEVKOD,INPUT xtillyvar,OUTPUT senr, OUTPUT slev,OUTPUT spris).*/
            END.
            ELSE IF berstolptemp.LEVKOD NE xtillyvar THEN DO:
               RUN stolpaltlev_UI IN bervalapph (INPUT berstolptemp.ENR,INPUT berstolptemp.LEVKOD,INPUT xtillyvar,OUTPUT senr, OUTPUT slev,OUTPUT spris).
            END.
         END.
         FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
         list_mtrl.ENR = berstolptemp.ENR EXCLUSIVE-LOCK NO-ERROR.
         IF AVAILABLE list_mtrl THEN DO:
            ASSIGN
            mtrl_rowid = ROWID(list_mtrl)
            list_mtrl.ANTAL = list_mtrl.ANTAL + 1.
         END.
         ELSE DO:
            CREATE list_mtrl.
            ASSIGN
            list_mtrl.NUM = kon_val.NUM
            list_mtrl.ENR = berstolptemp.ENR
            list_mtrl.BENAMNING = berstolptemp.BENAMNING
            list_mtrl.ANTAL = 1
            list_mtrl.ENHET = LC(berstolptemp.ENHET)
            list_mtrl.PRIS = berstolptemp.PRIS 
            list_mtrl.LEVKOD = berstolptemp.LEVKOD           
            list_mtrl.LINKAB = FALSE
            mtrl_rowid = ROWID(list_mtrl).
            IF slev NE "" AND senr NE "" THEN DO:
               ASSIGN
               list_mtrl.ENR = senr
               list_mtrl.LEVKOD = slev
               list_mtrl.PRIS = spris.                
            END.
         END.      
         antal_raknare = antal_raknare + 1.                                 
      END.         
      RUN setcolsortvar_UI IN brwproc[15] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
      RUN openbdynspec_UI IN brwproc[15].
      FIND FIRST list_mtrl WHERE ROWID(list_mtrl) = mtrl_rowid NO-LOCK NO-ERROR.
      IF AVAILABLE list_mtrl THEN DO:
         RUN setlastrowid_UI IN brwproc[15] (INPUT ROWID(list_mtrl)).
         RUN lastselectdyn_UI IN brwproc[15].   
         
      END.     
      RUN title_UI IN brwproc[15].
   END.
   
   {musarrow.i}
END PROCEDURE.
PROCEDURE startaink_UI :
   startaannatpro = "INK".
   RUN btnok_UI.
END PROCEDURE.
PROCEDURE startaschakt_UI :
   startaannatpro = "schakt".
   RUN btnok_UI.
END PROCEDURE.

PROCEDURE btnok_UI :
   IF ED_ANM:VISIBLE = TRUE THEN RUN btnkoppanm_UI.
   RUN fbtnok_UI.
   RUN avsluta_UI IN huvprogh. 
   
END PROCEDURE.

PROCEDURE fbtnok_UI :
   RUN rowleave_UI.
   IF appprogok = TRUE THEN DO:
      RUN assklar_UI.
      IF musz = TRUE THEN RETURN NO-APPLY.      
   END.
   RUN ok_UI.       
END PROCEDURE.

PROCEDURE ok_UI :
   
   DEFINE VARIABLE tempnykomp AS INTEGER NO-UNDO.
   /*ELPOOL SKA EJ SPARA OM MAN ÄR INNE OCH TITTAR PÅ EN BEREDNING
   SOM NÅGON ANNAN HAR UPPE*/   
    {muswait.i}
    tempnykomp = INTEGER(RAD_KOMP:SCREEN-VALUE).
   
    IF ejanv = TRUE THEN DO:
       musz = musz. 
    END.
    ELSE DO:   
       IF nyvar = TRUE THEN DO:     
          nyvar = FALSE.
       END.
       RUN linkoll_UI.            
       RUN skapa_UI.
    
      
    END.   
   

    APPLY "VALUE-CHANGED" TO BRW_VAL.
   
    RAD_KOMP:SCREEN-VALUE = STRING(tempnykomp).
    APPLY "VALUE-CHANGED" TO RAD_KOMP.
       
   {musarrow.i}
END PROCEDURE.

PROCEDURE skapa_UI :
   globanv2 = Guru.Konstanter:globanv.
   IF Guru.SharedVariable:singel = TRUE  THEN DO:
      SUBSTRING(globanv2,132,1) = "1".
   END.
   IF Guru.GlobalaVariabler:KorBerDS = TRUE THEN RUN Sparafalt_Ui.
   ELSE DO:
      IF Guru.Konstanter:appcon THEN DO:                           
         RUN BERSPARKONMTR.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
         (INPUT Guru.Konstanter:varforetypchar[48],
          INPUT valaonr,                                             
          INPUT valomrade,
          INPUT valdelnr,
          INPUT-OUTPUT datvar,                                             
      /*    INPUT kalkvar,*/           
          INPUT Guru.Konstanter:globanv2,
          INPUT xtillyvar,
          INPUT TABLE kon_val,                                       
          INPUT TABLE list_mtrl,                             
          INPUT TABLE bortkon_val,       
          INPUT TABLE kon_id,    
          INPUT TABLE kopp_lina, 
          INPUT TABLE fri_temp,  
          /*
          INPUT TABLE punkt_temp,
          
          INPUT TABLE schakt_temp,
          INPUT TABLE skydd_temp,
          
          INPUT TABLE kab_temp,
          */  
          INPUT TABLE kalk_temp,
          INPUT TABLE bildbertemp,
          INPUT TABLE berid2temp,
          INPUT-OUTPUT skapamtrl).                                         
      END.                                                      
      ELSE DO:
         
         RUN BERSPARKONMTR.P                                           
         (INPUT Guru.Konstanter:varforetypchar[48],
          INPUT valaonr,                                                      
          INPUT valomrade,                                                    
          INPUT valdelnr,                                                     
          INPUT-OUTPUT datvar,                                                       
      /*    INPUT kalkvar,*/                                                      
          INPUT Guru.Konstanter:globanv2, 
          INPUT xtillyvar,
          INPUT TABLE kon_val,                                                
          INPUT TABLE list_mtrl,                                                                                                                        
          INPUT TABLE bortkon_val,                                            
          INPUT TABLE kon_id,                                                 
          INPUT TABLE kopp_lina,                                              
          INPUT TABLE fri_temp,                                               
          /*
          INPUT TABLE punkt_temp,  
                                                    
          INPUT TABLE schakt_temp,                                            
          INPUT TABLE skydd_temp,
                                                       
          INPUT TABLE kab_temp,
          */                                               
          INPUT TABLE kalk_temp,  
          INPUT TABLE bildbertemp,
          INPUT TABLE berid2temp,
          INPUT-OUTPUT skapamtrl).                                         
      END.
   
      FOR EACH markgrupp WHERE  :
         IF markgrupp.GRUPP = "" AND markgrupp.ABONNENT = "" THEN DO:
            DELETE markgrupp.
         END.   
      END.
      FIND FIRST markgrupp NO-ERROR.
      IF AVAILABLE markgrupp THEN DO:
         RUN markstngrspar_UI  IN frikortapph (INPUT valaonr, INPUT valomrade, INPUT TABLE markgrupp).
      END.     
   END.
   /* 
   IF Guru.Konstanter:appcon THEN DO:                                 
      RUN SPARDELINK.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT                                           
      (INPUT valaonr, INPUT valomrade, INPUT TABLE del_val).
   END.                                                      
   ELSE DO:
      RUN SPARDELINK.P                                           
      (INPUT valaonr, INPUT valomrade, INPUT TABLE del_val).
   END.
   */
   EMPTY TEMP-TABLE bortkon_val NO-ERROR.    
   FOR EACH kon_val WHERE kon_val.ANDRAD = "AND":
      kon_val.ANDRAD = "".
   END.
   
END PROCEDURE.

PROCEDURE linkoll_UI :
   EMPTY TEMP-TABLE upp_tab NO-ERROR. 
   EMPTY TEMP-TABLE upp_tab2 NO-ERROR. 
   EMPTY TEMP-TABLE upp_tab3 NO-ERROR. 
   FIND FIRST kopp_lina WHERE kopp_lina.TOTMETER NE 0 NO-LOCK NO-ERROR.
   IF AVAILABLE kopp_lina THEN DO:               
      FOR EACH kopp_lina WHERE kopp_lina.KORTKOD = ? AND kopp_lina.TOTMETER = 0
      AND kopp_lina.METER > 0:          
         CREATE upp_tab.
         ASSIGN              
         upp_tab.ENR = kopp_lina.ENR
         upp_tab.BENAMNING = kopp_lina.BENAMNING 
         upp_tab.ENHET = kopp_lina.ENHET  
         upp_tab.LEVKOD = kopp_lina.LEVKOD
         upp_tab.PRIS = kopp_lina.PRIS              
         upp_tab.METER = kopp_lina.METER * kopp_lina.LEDARE.
      END.               
      FOR EACH kopp_lina WHERE kopp_lina.TOTMETER NE 0:           
         CREATE upp_tab2.
         ASSIGN 
         upp_tab2.ENR = kopp_lina.ENR
         upp_tab2.BENAMNING = kopp_lina.BENAMNING 
         upp_tab2.ENHET = kopp_lina.ENHET 
         upp_tab2.LEVKOD = kopp_lina.LEVKOD
         upp_tab2.PRIS = kopp_lina.PRIS
         upp_tab2.METER = kopp_lina.METER
         upp_tab2.TOTMETER = kopp_lina.TOTMETER
         upp_tab2.UPPLAG = kopp_lina.UPPLAG.
      END.  
      FOR EACH upp_tab BREAK BY upp_tab.ENR BY upp_tab.LEVKOD:                                      
         ACCUMULATE upp_tab.METER (TOTAL BY upp_tab.ENR BY upp_tab.LEVKOD).       
         IF LAST-OF(upp_tab.LEVKOD) THEN DO TRANSACTION:
            CREATE upp_tab3.
            ASSIGN 
            upp_tab3.ENR = upp_tab.ENR
            upp_tab3.BENAMNING = upp_tab.BENAMNING 
            upp_tab3.ENHET = upp_tab.ENHET
            upp_tab3.LEVKOD = upp_tab.LEVKOD 
            upp_tab3.PRIS = upp_tab.PRIS
            upp_tab3.METER = (ACCUM TOTAL upp_tab.METER) - summeter 
            upp_tab3.TOTMETER = (ACCUM TOTAL upp_tab.METER) - summeter 
            summeter = ACCUM TOTAL upp_tab.METER.                       
         END.     
      END.      
   END. 
   FOR EACH upp_tab3:          
      FIND FIRST upp_tab2 WHERE upp_tab2.ENR = upp_tab3.ENR AND 
      upp_tab2.LEVKOD = upp_tab3.LEVKOD AND upp_tab2.UPPLAG = ? NO-ERROR.
      IF AVAILABLE upp_tab2 THEN DO:         
         upp_tab2.METER = upp_tab3.METER.
      END.
   END.   
   FOR EACH upp_tab2:
      FIND FIRST upp_tab3 WHERE upp_tab3.ENR = upp_tab2.ENR AND
      upp_tab3.LEVKOD = upp_tab2.LEVKOD NO-ERROR.
      IF NOT AVAILABLE upp_tab3 THEN DELETE upp_tab2.
   END.  
   FOR EACH kopp_lina WHERE kopp_lina.TOTMETER NE 0:
      DELETE kopp_lina.
   END. 
   FOR EACH upp_tab2:      
      CREATE kopp_lina.
      ASSIGN      
      kopp_lina.ENR = upp_tab2.ENR
      kopp_lina.BENAMNING = upp_tab2.BENAMNING
      kopp_lina.PRIS = upp_tab2.PRIS
      kopp_lina.ENHET = upp_tab2.ENHET  
      kopp_lina.LEVKOD = upp_tab2.LEVKOD
      kopp_lina.METER = upp_tab2.METER 
      kopp_lina.TOTMETER = upp_tab2.TOTMETER 
      kopp_lina.UPPLAG = upp_tab2.UPPLAG                     
      kopp_lina.KORTKOD = ?.  
      DELETE upp_tab2.   
   END.                                      
END PROCEDURE.



PROCEDURE assklar_UI :
   IF apphandklar:COMPLETE = FALSE THEN DO: 
      MESSAGE "Du måste vänta lite innan du kan köra denna funktion!" VIEW-AS ALERT-BOX.
      musz = TRUE.
      RETURN.
   END.              
END PROCEDURE.
PROCEDURE nextkonstID_UI :
   DEFINE VARIABLE ornrva AS INTEGER NO-UNDO.
   ornrva = kon_val.ORD.
  
   FIND FIRST kon_display WHERE kon_display.ORD > ornrva NO-LOCK NO-ERROR.
   IF NOT AVAILABLE kon_display THEN DO:
      ornrva = 0.
      FIND FIRST kon_display  WHERE kon_display.ORD >= ornrva NO-LOCK NO-ERROR.
   END. 
   RUN setlastrowid_UI IN brwproc[21] (INPUT ROWID(kon_display)). 
   RUN lastselectdyn_UI IN brwproc[21].
END PROCEDURE.
PROCEDURE nextkonst_UI :
  
   DEFINE VARIABLE ornrva AS INTEGER NO-UNDO.
   ornrva = kon_val.ORD.
  
   FIND FIRST kon_display WHERE kon_display.ORD > ornrva NO-LOCK NO-ERROR.
   IF NOT AVAILABLE kon_display THEN DO:
      ornrva = 0.
      FIND FIRST kon_display  WHERE kon_display.ORD >= ornrva NO-LOCK NO-ERROR.
   END. 
   RUN setlastrowid_UI IN brwproc[21] (INPUT ROWID(kon_display)). 
   RUN lastselectdyn_UI IN brwproc[21].
   RUN mbtnmtrl_UI.
  
END PROCEDURE.
PROCEDURE bortkonst_UI :
   FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.   
/*
   FIND FIRST punkt_temp WHERE punkt_temp.NUM = kon_val.NUM 
   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE punkt_temp THEN DO:
      */
   DO:       
      FOR EACH kon_id WHERE kon_id.NUM = kon_val.NUM USE-INDEX NUM:
         DELETE kon_id.
      END.     
      FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM USE-INDEX NUM:
         DELETE list_mtrl.
      END. 
      FOR EACH kalk_temp WHERE kalk_temp.NUM = kon_val.NUM USE-INDEX NUM:
         DELETE kalk_temp.
      END.   
      FOR EACH kopp_lina WHERE kopp_lina.NUM1 = kon_val.NUM OR 
      kopp_lina.NUM2 = kon_val.NUM USE-INDEX NUM:
         DELETE kopp_lina.
      END.  
      FOR EACH fri_temp WHERE fri_temp.NUM = kon_val.NUM USE-INDEX NUM:
         DELETE fri_temp.
      END.
      FOR EACH markgrupp WHERE markgrupp.NUM = kon_val.NUM USE-INDEX NUM:
         DELETE markgrupp.
      END.
      deletenum = kon_val.NUM.
      CREATE bortkon_val.
      BUFFER-COPY kon_val TO bortkon_val.
      DELETE kon_val.
      DELETE kon_display.
      RUN selnextprevrow_UI IN brwproc[21].

      FOR EACH kon_val WHERE kon_val.NUM = deletenum USE-INDEX NUM:
         CREATE bortkon_val.
         BUFFER-COPY kon_val TO bortkon_val.
         DELETE kon_val.
         FIND FIRST kon_display WHERE kon_display.NUM = deletenum NO-LOCK NO-ERROR.
         IF AVAILABLE kon_display THEN DELETE kon_display.
      END.         
      RUN sorterabrwval_UI.
      RUN lastselectdyn_UI IN brwproc[21].   
      IF aonrrow2 = kon_rowid THEN musz = musz.
      ELSE DO:
         kon_rowid = aonrrow2.                   
      END.  
      IF AVAILABLE kon_val THEN DO:
         kon_rowid = ROWID(kon_val).
         RUN sokkdisp_UI.
      END.
   END.
   /*
   ELSE DO:
      MESSAGE "Det finns schakt som utgår från denna konstruktion. Ta bort schakt och därefter konstruktion."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
   END.
   */
END PROCEDURE.

PROCEDURE brwav_UI :
  
   /*
   RUN addmenuitem_UI IN brwproc[2] (INPUT BRW_B3:HANDLE,INPUT "Avmarkera",INPUT "avmark_UI").
   RUN addmenuitem_UI IN brwproc[3] (INPUT BRW_B4:HANDLE,INPUT "Avmarkera",INPUT "avmark_UI").
   RUN addmenuitem_UI IN brwproc[4] (INPUT BRW_B5:HANDLE,INPUT "Avmarkera",INPUT "avmark_UI").
   RUN addmenuitem_UI IN brwproc[5] (INPUT BRW_B6:HANDLE,INPUT "Avmarkera",INPUT "avmark_UI").
   DEFINE INPUT PARAMETER brwh AS HANDLE NO-UNDO.
   DEFINE VARIABLE labelvar AS CHARACTER NO-UNDO.
   DEFINE VARIABLE temph AS HANDLE NO-UNDO.
   labelvar = "AVmarkera".
   CREATE MENU-ITEM temph.
   temph:LABEL = labelvar.
   temph:PARENT = brwh:POPUP-MENU.
   
   ON CHOOSE OF temph MESSAGE "1" VIEW-AS ALERT-BOX.
   
   status-ok = BRW_KB2:DESELECT-ROWS() NO-ERROR.
   */
END PROCEDURE.

PROCEDURE btnandid_UI :
   {muswait.i} 
   DEFINE VARIABLE lrow AS ROWID NO-UNDO.
   FIND FIRST kon_id NO-LOCK NO-ERROR.
   IF AVAILABLE kon_id THEN DO: 
      lrow = ?.
      IF RAD_VAL:SCREEN-VALUE = "4" THEN DO:
         IF AVAILABLE list_mtrl THEN DO:
            lrow = ROWID(list_mtrl).           
         END.         
      END.
      RUN btnord_UI IN huvprogh.
      RUN refreshbrw_UI IN brwproc[21].
      RUN lastselectdyn_UI IN brwproc[21].  
      IF lrow = ? THEN lrow = ?.
      ELSE DO:
         RUN setlastrowid_UI IN brwproc[15] (INPUT lrow).       
         RUN lastselectdyn_UI IN brwproc[15].  
      END.     
      RUN title_UI IN brwproc[15].
   END.
   ELSE DO:
      RUN btnord_UI IN huvprogh.
      /*
      MESSAGE "Det finns inga konstruktioner att ändra ordning på."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      */
   END.  
   APPLY "VALUE-CHANGED" TO RAD_KOMP.
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnfast_UI :
   RUN selectfoc_UI (INPUT 1).
   IF status-ok = FALSE THEN RETURN.
   IF AVAILABLE fastanmtemp THEN DO:
      IF ED_ANM:SCREEN-VALUE = "" THEN ED_ANM:SCREEN-VALUE = fastanmtemp.ANMARK.
      ELSE DO:
         IF TOG_ANM:CHECKED = TRUE THEN ED_ANM:SCREEN-VALUE = ED_ANM:SCREEN-VALUE + " " + fastanmtemp.ANMARK.
         ELSE ED_ANM:SCREEN-VALUE = ED_ANM:SCREEN-VALUE + CHR(10) + fastanmtemp.ANMARK.
      END.
      APPLY "CHOOSE" TO BTN_KOPPANM.   
   END.
END PROCEDURE.

PROCEDURE btnhidden_UI :    
   DEFINE INPUT PARAMETER btnvar AS CHARACTER NO-UNDO.      
   DEFINE INPUT PARAMETER vad AS INTEGER NO-UNDO.
   IF vad = 1 THEN DO:
      FIND FIRST widgettemp WHERE widgettemp.WIDGETNAMN = btnvar NO-ERROR.
      IF AVAILABLE widgettemp THEN DO:
         IF widgettemp.WIDGETHAND:HIDDEN = FALSE THEN DO:
            widgettemp.ANDHIDDEN = 1.
            widgettemp.WIDGETHAND:HIDDEN = TRUE.
         END.   
         
      END.
   END.
   IF vad = 2 THEN DO:
      IF btnvar NE "" THEN DO:
         FIND FIRST widgettemp WHERE widgettemp.WIDGETNAMN = btnvar NO-ERROR.
         IF AVAILABLE widgettemp THEN DO:
            widgettemp.ANDHIDDEN = 0.
            widgettemp.WIDGETHAND:HIDDEN = FALSE.
         END.
      END.
      ELSE DO:
         FOR EACH widgettemp WHERE widgettemp.ANDHIDDEN = 1:
            widgettemp.ANDHIDDEN = 0.
            widgettemp.WIDGETHAND:HIDDEN = FALSE.
         END.
      END.
   END.
   IF vad = 3 THEN DO:
      FOR EACH widgettemp WHERE widgettemp.ANDHIDDEN = 1:
         widgettemp.WIDGETHAND:HIDDEN = TRUE.         
      END.
   END.
   IF vad = 4 THEN DO:
      FIND FIRST widgettemp WHERE widgettemp.WIDGETNAMN = btnvar NO-ERROR.
      IF AVAILABLE widgettemp THEN DO:
         widgettemp.ANDHIDDEN = 0.
         widgettemp.WIDGETHAND:HIDDEN = TRUE.
      END.
   END.
   FBTN_FRIKORT:HIDDEN = TRUE.
END PROCEDURE.

PROCEDURE flygnr_UI :
   DEFINE VARIABLE radvalspar AS INTEGER NO-UNDO.
   DEFINE VARIABLE flyrowid AS ROWID NO-UNDO.
   
   /*
   RUN btnvit_UI (INPUT MBTN_FLYG).  
   */
   RUN rowleave_UI.
   RUN fbtnsnabb_UI.
   
   {AVBGOM2.I}       
   
   RUN FLYGNRSKYLT.W (OUTPUT TABLE flygnrtemp).
   
   IF musz = TRUE THEN DO:
      EMPTY TEMP-TABLE flygnrtemp NO-ERROR. 
      musz = FALSE.
      {AVBFRAM2.I} 
      RETURN. 
   END.
   radvalspar = INTEGER(RAD_VAL:SCREEN-VALUE).
   IF AVAILABLE kon_val THEN flyrowid = ROWID(kon_val).
   RAD_VAL:SCREEN-VALUE = "4".
   FOR EACH flygnrtemp WHERE flygnrtemp.ENR = "":
      DELETE flygnrtemp.
   END.
   FOR EACH flygnrtemp:
      FIND FIRST kon_val WHERE kon_val.NUM = flygnrtemp.NUM AND kon_val.KSKAP = FALSE  NO-LOCK NO-ERROR.
      IF AVAILABLE kon_val THEN DO:
         kon_rowid = ROWID(kon_val).
         RUN sokkdisp_UI.
         RUN vcbrwval_UI.
      END.
      EMPTY TEMP-TABLE mtrltemp NO-ERROR. 
      RUN initsok_UI (INPUT 3,INPUT flygnrtemp.ENR).
      FIND FIRST mtrltemp WHERE mtrltemp.ENR = flygnrtemp.ENR NO-LOCK NO-ERROR.
      IF AVAILABLE mtrltemp THEN DO:
         FIND FIRST list_mtrl WHERE  list_mtrl.NUM = flygnrtemp.NUM AND list_mtrl.ENR = mtrltemp.ENR NO-LOCK NO-ERROR.
         IF NOT AVAILABLE list_mtrl THEN DO:
            CREATE list_mtrl.
            ASSIGN
            list_mtrl.NUM = flygnrtemp.NUM
            list_mtrl.ENR = mtrltemp.ENR
            list_mtrl.BENAMNING = mtrltemp.BENAMNING
            list_mtrl.ANTAL = 1
            list_mtrl.ENHET = LC(mtrltemp.ENHET)
            list_mtrl.PRIS = mtrltemp.NPRIS                
            list_mtrl.LINKAB = FALSE
            mtrl_rowid = ROWID(list_mtrl).
            IF mtrltemp.LEVKOD BEGINS "99" THEN list_mtrl.LEVKOD = "99".           
            ELSE list_mtrl.LEVKOD = mtrltemp.LEVKOD.           
            FIND FIRST satstemp WHERE satstemp.SATS = TRUE AND satstemp.KOD = list_mtrl.ENR AND
            satstemp.LEVKOD = list_mtrl.LEVKOD USE-INDEX KOD NO-LOCK NO-ERROR.
            IF AVAILABLE satstemp THEN list_mtrl.SATS = TRUE.
            ELSE list_mtrl.SATS = FALSE.
            /*IF globforetag = "ELPA" {GLOBVES.I} THEN DO:
               IF list_mtrl.LEVKOD = "11" THEN DO:
                  FIND FIRST satstemp WHERE satstemp.SATS = TRUE AND satstemp.KOD = list_mtrl.ENR AND
                  satstemp.LEVKOD = "1" USE-INDEX KOD NO-LOCK NO-ERROR.
               END.
               ELSE DO:
                  FIND FIRST satstemp WHERE satstemp.SATS = TRUE AND satstemp.KOD = list_mtrl.ENR AND
                  satstemp.LEVKOD = list_mtrl.LEVKOD USE-INDEX KOD NO-LOCK NO-ERROR.
               END.                  
               IF AVAILABLE satstemp THEN list_mtrl.SATS = TRUE.
               ELSE list_mtrl.SATS = FALSE.
            END.
            ELSE DO:
               FIND FIRST satstemp WHERE satstemp.SATS = TRUE AND satstemp.KOD = list_mtrl.ENR AND
               satstemp.LEVKOD = list_mtrl.LEVKOD USE-INDEX KOD NO-LOCK NO-ERROR.
               IF AVAILABLE satstemp THEN list_mtrl.SATS = TRUE.
               ELSE list_mtrl.SATS = FALSE.
            END.               */
         END.
      END.
      DELETE flygnrtemp.
   END.
   EMPTY TEMP-TABLE mtrltemp NO-ERROR. 
   RUN openbdynspec_UI IN brwproc[22].
   RAD_VAL:SCREEN-VALUE = STRING(radvalspar).
   APPLY "VALUE-CHANGED" TO RAD_VAL.
   FIND kon_val WHERE ROWID(kon_val) = flyrowid NO-LOCK NO-ERROR.  
   RUN kondisp_UI.
   kon_rowid = flyrowid.
   RUN sokkdispu_UI.
   RUN openbdynspec_UI IN brwproc[21].            
   RUN lastselectdyn_UI IN brwproc[21].
   RUN vcbrwval_UI.  
   {AVBFRAM2.I} 
END PROCEDURE.
PROCEDURE btnkopi_UI :
   
   DEFINE VARIABLE valkop AS INTEGER NO-UNDO.
   FIND FIRST kon_val NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:  
      RUN selectfoc_UI (INPUT 21).
      ASSIGN
      valnum = kon_val.NUM.   
      RUN VALKOP.W (OUTPUT valkop).
      IF musz = TRUE THEN DO:
         musz = FALSE.
         RETURN.
      END.
      EMPTY TEMP-TABLE ekon_val NO-ERROR. 
      EMPTY TEMP-TABLE list_mtrl2 NO-ERROR.
      IF valkop = 1 THEN DO:
         RUN kopikonst_UI.
         RUN fbtnsnabb_UI.   
         RETURN.
      END.   
   END.    
      
   RUN fbtnsnabb_UI.
      
   /*berid copy*/
   
   Guru.GlobalaVariabler:copyfriid =   FALSE.
   Guru.GlobalaVariabler:copyfrikort = FALSE.
   RUN KOPIKONSTFRAGA.w.    
      
   EMPTY TEMP-TABLE ekalk_temp NO-ERROR. 
    {AVBGOM2.I}
   RUN VALKONKOP.W  (INPUT FALSE,OUTPUT TABLE ekon_val,OUTPUT TABLE list_mtrl2,OUTPUT TABLE beridtemp,OUTPUT TABLE eberid2temp, OUTPUT TABLE ekalk_temp2, OUTPUT TABLE efri_temp).
  
  
   {AVBFRAM2.I}       
   IF musz = TRUE THEN DO:
      EMPTY TEMP-TABLE ekon_val NO-ERROR. 
      EMPTY TEMP-TABLE list_mtrl2 NO-ERROR. 
      musz = FALSE.
      RETURN.
   END.
  {muswait.i}
  
   ASSIGN 
   counter = 0
   counterord = 0.
   FOR EACH ekon_val BY ekon_val.NUM BY ekon_val.ORD:
      ASSIGN
      ekon_val.BERAONR = valaonr
      ekon_val.OMRADE  = valomrade.
      IF ekon_val.KSKAP = FALSE THEN DO:
       
         RUN kopikonsten_UI.
         FOR EACH list_mtrl2 WHERE list_mtrl2.NUM = ekon_val.NUM NO-LOCK.
            CREATE list_mtrl.
            BUFFER-COPY list_mtrl2 TO list_mtrl.
            ASSIGN
            list_mtrl.NUM = counter.
            list_mtrl.ENHET = LC(list_mtrl.ENHET).
         END.
         FOR EACH ekalk_temp2 WHERE ekalk_temp2.NUM = ekon_val.NUM NO-LOCK:
            CREATE kalk_temp.
            BUFFER-COPY ekalk_temp2 TO kalk_temp.
            ASSIGN
            kalk_temp.NUM = counter.      
         END.
         
           /*berid copy*/
          
         IF Guru.GlobalaVariabler:copyfriid = TRUE THEN DO:
            IF Guru.Konstanter:varforetypval[32] = 1 OR Guru.Konstanter:varforetypval[32] = 2 THEN DO:
               FOR EACH beridtemp WHERE beridtemp.NUM = ekon_val.NUM NO-LOCK.
                  FIND LAST idbuff WHERE USE-INDEX FRI2 NO-LOCK NO-ERROR.
                  IF AVAILABLE idbuff THEN beridtemp.FRI2 = idbuff.FRI2 + 1.
                  FIND FIRST kon_id WHERE kon_id.NUM = counter NO-LOCK NO-ERROR.
                  IF NOT AVAILABLE kon_id THEN DO:
                     CREATE kon_id.
                     BUFFER-COPY beridtemp TO kon_id.
                     ASSIGN
                     kon_id.NUM = counter.
                     ekon_val.EXTRA1 = (beridtemp.FRI3).          
                     ekon_val.ID2 = STRING(beridtemp.FRI2).
                  END.   
                                                      
               END.   
               
            END.
            ELSE IF Guru.Konstanter:varforetypval[32] = 4 THEN DO:
               FOR EACH beridtemp WHERE beridtemp.NUM = ekon_val.NUM NO-LOCK.
                  FIND LAST idbuff WHERE idbuff.FRI2 NE ? USE-INDEX FRI NO-LOCK NO-ERROR.
                  IF AVAILABLE idbuff THEN beridtemp.FRI2 = idbuff.FRI2 + 1.
                  FIND FIRST kon_id WHERE kon_id.NUM = counter NO-LOCK NO-ERROR.
                  IF NOT AVAILABLE kon_id THEN DO:
                     CREATE kon_id.
                     BUFFER-COPY beridtemp TO kon_id.
                     ASSIGN
                     kon_id.NUM = counter.
                     ekon_val.EXTRA1 = (beridtemp.FRI3).          
                     ekon_val.ID2 = STRING(beridtemp.FRI2).
                  END.   
               END.   
            END.         
            ELSE DO:
               FOR EACH beridtemp WHERE beridtemp.NUM = ekon_val.NUM NO-LOCK.
                  
                  FIND LAST idbuff WHERE idbuff.GRUPP = ekon_val.GRUPP AND
                  idbuff.FRI1 = beridtemp.FRI1 AND  
                  idbuff.FRI2 NE ? USE-INDEX FRI NO-LOCK NO-ERROR.
                  IF AVAILABLE idbuff THEN beridtemp.FRI2 = idbuff.FRI2 + 1.
                  FIND FIRST kon_id WHERE kon_id.NUM = counter NO-LOCK NO-ERROR.
                  IF NOT AVAILABLE kon_id THEN DO:
                     CREATE kon_id.
                     BUFFER-COPY beridtemp TO kon_id.
                     ASSIGN
                     kon_id.GRUPP = ekon_val.GRUPP
                     kon_id.NUM = counter.
                     ekon_val.EXTRA1 = (beridtemp.FRI3).          
                     ekon_val.ID2 = STRING(beridtemp.FRI2).
                  END.   
               END.               
                    
            END.
            FOR EACH eberid2temp WHERE eberid2temp.NUM = ekon_val.NUM NO-LOCK:
               FIND FIRST berid2temp WHERE berid2temp.NUM = counter NO-LOCK NO-ERROR.
               IF NOT AVAILABLE berid2temp THEN DO:
                  CREATE berid2temp.
                  BUFFER-COPY eberid2temp TO berid2temp.
                  ASSIGN
                  berid2temp.NUM = counter
                  berid2temp.AONR = valaonr
                  berid2temp.OMRADE = valomrade.
               END.               
            END.   
         END.
         
         IF Guru.GlobalaVariabler:copyfrikort = TRUE THEN DO:
            FOR EACH efri_temp WHERE efri_temp.NUM = ekon_val.NUM NO-LOCK:
               CREATE fri_temp.
               BUFFER-COPY efri_temp TO fri_temp.
               fri_temp.NUM = counter.
               DELETE efri_temp.
            END.
         END.  
         
      END.
      
     
      ekon_val.NUM = counter.
      IF ekon_val.KSKAP = FALSE THEN ekon_val.ORD = counterord.
      ELSE ekon_val.ORD = 0.
      CREATE kon_val.
      BUFFER-COPY ekon_val TO kon_val.
      kon_val.ANDRAD = "AND".
      kon_rowid = ROWID(kon_val).
      RUN kondisp_UI.
      RUN sokkdisp_UI. 
      DELETE ekon_val.
   END.
   Guru.GlobalaVariabler:copyfriid =   FALSE.
   Guru.GlobalaVariabler:copyfrikort = FALSE. 
   EMPTY TEMP-TABLE beridtemp NO-ERROR. 
   {musarrow.i}         
   RUN sorterabrwval_UI.
   FIND FIRST kon_val WHERE kon_val.NUM = counter AND kon_val.KSKAP = FALSE
   NO-LOCK NO-ERROR.
   
   IF AVAILABLE kon_val THEN DO:
      kon_rowid = ROWID(kon_val).
      RUN kondisp_UI.
      RUN sokkdisp_UI.                      
   END.
   APPLY "VALUE-CHANGED" TO BRW_VAL.
   APPLY "VALUE-CHANGED" TO RAD_KOMP.
   RUN fbtnsnabb_UI. 
END PROCEDURE.

PROCEDURE btnkskap_UI :
   {muswait.i}    
   RUN selectfoc_UI (INPUT 21).
   IF NOT AVAILABLE kon_val THEN DO:
      MESSAGE "Det finns inga kabelskåp." VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.
   kon_rowid = ROWID(kon_val). 
         
   FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM NO-LOCK NO-ERROR.
   FIND FIRST konstvaltemp WHERE konstvaltemp.KONSKOD = kon_val.GRUPP NO-LOCK NO-ERROR.
   IF NOT AVAILABLE konstvaltemp THEN RUN laddatempen_UI IN bervalapph (INPUT kon_val.GRUPP, OUTPUT TABLE konstvaltemp APPEND).         
   RUN btnkskap_UI IN huvprogh.         
   RUN sorterabrwval_UI.
   FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:
      RUN kondisp_UI.
      RUN sokkdisp_UI.             
   END.
   APPLY "VALUE-CHANGED" TO RAD_KOMP.

   {musarrow.i}
END PROCEDURE.

PROCEDURE btnlin_UI :
   EMPTY TEMP-TABLE elist_mtrl NO-ERROR. 
   {muswait.i} 
   FIND FIRST kon_id NO-LOCK NO-ERROR.
   IF AVAILABLE kon_id THEN DO:
      RUN selectfoc_UI (INPUT 21).
      ASSIGN
      kon_rowid = ROWID(kon_val).       
      IF AVAILABLE list_mtrl THEN DO:
         CREATE elist_mtrl.
         BUFFER-COPY list_mtrl TO elist_mtrl.
      END.       
      RUN btnlin_UI IN huvprogh.            
      RUN setcolsortvar_UI IN brwproc[15] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").     
      FIND FIRST elist_mtrl NO-LOCK NO-ERROR.
      IF AVAILABLE elist_mtrl THEN DO:
         FIND FIRST list_mtrl WHERE 
         list_mtrl.ENR = elist_mtrl.ENR AND 
         list_mtrl.NUM = elist_mtrl.NUM AND
         list_mtrl.LEVKOD = elist_mtrl.LEVKOD AND
         list_mtrl.SKAPNUM = elist_mtrl.SKAPNUM 
         NO-LOCK NO-ERROR.
         IF AVAILABLE list_mtrl THEN DO:
            RUN setlastrowid_UI IN brwproc[15] (INPUT ROWID(list_mtrl)).       
            RUN openbdynspec_UI IN brwproc[15].
            RUN lastselectdyn_UI IN brwproc[15].  
         END.
      END.   
      ELSE RUN openbdynspec_UI IN brwproc[15].
      
      RUN title_UI IN brwproc[15].
      EMPTY TEMP-TABLE elist_mtrl NO-ERROR. 
   END.
   ELSE DO:
      MESSAGE "Det fins inga identifierade konstruktioner."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
   END.                   
   APPLY "VALUE-CHANGED" TO RAD_KOMP.
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnner_UI :
   IF brwNrandkonst = 28 THEN DO:
      IF FRAME-ANDKONST:HIDDEN = FALSE AND TOG_KOMP:CHECKED = TRUE THEN DO:
         /*dela av konst*/
         RUN andrakonner_UI.
         RETURN.
      END.
   END.
   ELSE IF FRAME-ANDRAK:HIDDEN = FALSE AND TOG_KOMP:CHECKED = TRUE THEN DO:
      /*dela av konst*/
      RUN andrakonner_UI.
      RETURN.
   END.
       
   {muswait.i}
   RUN selectfoc_UI (INPUT 21).
   /*hela konst*/
   IF AVAILABLE kon_val THEN DO: 
      RUN inkopkoll_UI (INPUT 1, OUTPUT musz, OUTPUT antalinkvar).
      IF musz = TRUE THEN DO:            
         MESSAGE "Ni kan inte ta bort denna konstruktion. Den är inköpt via inköpsrutinen!"
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         musz = FALSE.
         RETURN.
      END.
      kon_rowid = ROWID(kon_val).           
      FIND FIRST del_val WHERE del_val.NUM = kon_val.NUM
      NO-LOCK NO-ERROR.
      IF AVAILABLE del_val THEN DO:            
         MESSAGE "Ni kan inte ta bort denna konstruktion då den valda konstruktionen är inköpt via delbeställning"
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         RETURN.
      END.         
      MESSAGE "Vill du ta bort markerad konstruktion?"
      VIEW-AS ALERT-BOX
      QUESTION BUTTONS YES-NO TITLE "Ta bort?" UPDATE svar.         
      IF svar THEN DO:  
         RUN bortkonst_UI.                  
         RAD_KOMP:SCREEN-VALUE = "1".
      END.                   
   END.
   ELSE DO:
      MESSAGE "Det finns ingen konstruktion att ta bort."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
   END.
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnnoll_UI :
   {muswait.i}   
   MESSAGE "Vill du ta bort allt materiel med antal 0?" VIEW-AS ALERT-BOX
   QUESTION BUTTONS YES-NO TITLE "Ta bort?" UPDATE svar.         
   IF svar THEN DO:
      FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM:
         IF list_mtrl.LINKAB = FALSE THEN DO:
            IF list_mtrl.ANTAL = 0 THEN DELETE list_mtrl.
         END.
      END.   
      RUN refreshbrw_UI IN brwproc[15].
      RUN title_UI IN brwproc[15].
   END.   
   {musarrow.i}
END PROCEDURE.
PROCEDURE btnvisa_UI :
   DEFINE VARIABLE resid AS INTEGER NO-UNDO.
   DEFINE VARIABLE hjfilvar AS CHARACTER NO-UNDO.
   RUN selectfoc_UI (INPUT 25).
   IF AVAILABLE bildbertemp THEN DO:                  
      IF INDEX(bildbertemp.FILNAMN,"\") = 0 AND INDEX(bildbertemp.FILNAMN,":") = 0 THEN DO:
         {FINNSDYNBLOB.I}
         RUN blobfil_UI IN blobproch (INPUT bildbertemp.FILNAMN, OUTPUT resid).
         IF resid = ? THEN DO: 
            DEFINE VARIABLE sokbild AS CHARACTER NO-UNDO.
            sokbild = hjfilvar.
            hjfilvar = SEARCH(sokbild).
         END.
         ELSE DO:
            FIND FIRST blobinfotemp WHERE blobinfotemp.ID = resid NO-LOCK NO-ERROR.
            RUN blobopen_UI IN blobproch (INPUT blobinfotemp.FILNAMN, OUTPUT hjfilvar).
         END.
         IF hjfilvar NE ? THEN DO: 
            RUN OPENDOC.P (hjfilvar,"","",NO).
         END.
         ELSE DO:
            MESSAGE "Det finns ingen fil kopplad till bild/Dokument"
            VIEW-AS ALERT-BOX TITLE "Meddelande".
         END.
            
      END.
      ELSE DO:
         FILE-INFO:FILE-NAME = bildbertemp.FILNAMN.
         IF SEARCH(FILE-INFO:FULL-PATHNAME) = ? THEN DO:
            MESSAGE bildbertemp.FIL " finns inte. Det är troligen ett sekretessproblem. Kontakta Elpool. Filtyp " 
            VIEW-AS ALERT-BOX.
            RETURN.
         END.
         RUN OPENDOC.P (bildbertemp.FILNAMN,"","",NO).
      END.      
   END.
   ELSE DO:
      MESSAGE "Det finns ingen bild/Dokument att visa."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN.
   END.  
END PROCEDURE.

PROCEDURE btncopybild_UI :
/*
   MESSAGE "ss"
   VIEW-AS ALERT-BOX.
   IF NOT VALID-HANDLE(blobproch) THEN  RUN DYNBLOBB.P PERSISTENT SET blobproch.
   RUN blobcheck_UI IN blobproch (INPUT fildir, OUTPUT blobid).    
   RUN blobskapa_UI IN blobproch (INPUT fildir, INPUT-OUTPUT blobid, INPUT "PROG",
                                  INPUT exeinfovar,INPUT vartvar,INPUT vartvarwc, OUTPUT felmedd).
                                  */  
                                  
                                  
    
   DEFINE VARIABLE numvar AS INTEGER NO-UNDO.
   numvar = kon_val.NUM. 
   kon_rowid = ROWID(kon_val). 
   FIND FIRST konsttemp WHERE 
   konsttemp.KONSKOD =  kon_val.GRUPP AND konsttemp.KTYPKOD =  kon_val.F1 NO-LOCK NO-ERROR.
   IF konsttemp.BILD = "B" THEN DO:
      RUN berbildhmt_UI IN bervalapph (INPUT konsttemp.KTYPKOD,OUTPUT TABLE berbildtemp).
      RUN skapbild_UI.
   END.
    
   FIND FIRST konstvaltemp WHERE konstvaltemp.KONSKOD = kon_val.GRUPP NO-LOCK NO-ERROR.
   IF NOT AVAILABLE konstvaltemp THEN RUN laddatempen_UI IN bervalapph (INPUT kon_val.GRUPP, OUTPUT TABLE konstvaltemp APPEND).
   FOR EACH kon_val WHERE kon_val.NUM = numvar NO-LOCK:
      IF kon_val.F2 NE "" THEN DO:
         RUN bildskap_UI(INPUT kon_val.F2).
      END.
      IF kon_val.F3 NE "" THEN DO:
         RUN bildskap_UI(INPUT kon_val.F3).
      END.
      IF kon_val.F4 NE "" THEN DO:
         RUN bildskap_UI(INPUT kon_val.F4).
      END.
      IF kon_val.F5 NE "" THEN DO:
         RUN bildskap_UI(INPUT kon_val.F5).
      END.
      IF kon_val.F6 NE "" THEN DO:
         RUN bildskap_UI(INPUT kon_val.F6).
      END.  
   END.       
   FIND FIRST kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.                       
   RUN setcolsortvar_UI IN brwproc[25] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
   RUN openbdynspec_UI IN brwproc[25].
   FIND FIRST bildbertemp WHERE ROWID(bildbertemp) = bild_rowid NO-LOCK NO-ERROR.
   IF AVAILABLE bildbertemp THEN DO:
      RUN setlastrowid_UI IN brwproc[25] (INPUT ROWID(bildbertemp)).
      RUN lastselectdyn_UI IN brwproc[25].        
   END.
   
   RUN kondisp_UI.
   RUN sokkdispu_UI.
   RUN openbdynspec_UI IN brwproc[21].
   RUN lastselectdyn_UI IN brwproc[21].                              
END PROCEDURE.
PROCEDURE skapbild_UI :
   SUBSTRING(kon_val.EXTRA3,3,1) = "B".
   FOR EACH berbildtemp: 
      FIND FIRST bildbertemp WHERE bildbertemp.NUM = kon_val.NUM AND
      bildbertemp.FILNAMN = berbildtemp.FILNAMN USE-INDEX NUM NO-LOCK NO-ERROR.
      IF NOT AVAILABLE bildbertemp THEN DO:      
         CREATE bildbertemp.
         ASSIGN
         bildbertemp.NUM = kon_val.NUM
         bildbertemp.NAMN = ""
         bildbertemp.FILNAMN = berbildtemp.FILNAM
         bild_rowid = ROWID(bildbertemp).
      END.
   END.
END PROCEDURE.
PROCEDURE bildskap_UI :
        
   DEFINE INPUT  PARAMETER sokkon AS CHARACTER NO-UNDO.
   FIND FIRST konstvaltemp WHERE konstvaltemp.KONSKOD = kon_val.GRUPP AND konstvaltemp.KTYPKOD = kon_val.F1 AND 
   konstvaltemp.KVALKOD = sokkon NO-LOCK NO-ERROR.
   IF konstvaltemp.BILD = "B" THEN DO:
      RUN berbildhmt_UI IN bervalapph (INPUT konstvaltemp.KVALKOD,OUTPUT TABLE berbildtemp).
      RUN skapbild_UI.   
   END.
END PROCEDURE.



PROCEDURE btnnya_UI :
   SYSTEM-DIALOG GET-FILE filnamn
   TITLE          "Välj fil"
   FILTERS        "All Files (*.*)"  "*.*"
   INITIAL-DIR    dirnamn
   MUST-EXIST         
   USE-FILENAME
   UPDATE OKvald.
   IF OKvald = TRUE THEN DO: 
      {muswait.i} 
      IF VALID-HANDLE(h_PDFinc) THEN DELETE PROCEDURE h_PDFinc NO-ERROR. 
      h_PDFinc = ?.
      IF NOT VALID-HANDLE(h_PDFinc) THEN DO:
         RUN SETh_PDFinc.
      END.    
      /*RUN etttpdf_UI IN h_PDFinc.*/    
      DEFINE VARIABLE h AS DECIMAL NO-UNDO.
      DEFINE VARIABLE w AS DECIMAL NO-UNDO.
      DEFINE VARIABLE startpos AS INTEGER NO-UNDO.
      DEFINE VARIABLE utfil AS CHARACTER NO-UNDO.
      DEFINE VARIABLE com AS CHARACTER NO-UNDO.
      DEFINE VARIABLE filvar AS CHARACTER NO-UNDO.
      DEFINE VARIABLE pos AS INTEGER NO-UNDO.
      DEFINE VARIABLE pos2 AS INTEGER NO-UNDO.           
      DEFINE VARIABLE fil AS CHARACTER NO-UNDO.
      utfil = SESSION:TEMP-DIRECTORY.
      {SESSIONTEMPDIR.I}
      IF SESSION:CLIENT-TYPE = "WEBCLIENT" THEN utfil = webclienttempdir.
      utfil = utfil + STRING(TIME) + "temp.pdf".
      filvar = REPLACE(filnamn,"\","/").
      startpos = INDEX(filvar,".",LENGTH(filvar) - 5).
      
      pos = 0.
      REPEAT :
         pos2 = pos.
         pos = pos + 1.
         pos = INDEX(filvar,"/",pos).                                        
         IF pos = 0 THEN LEAVE.
      END.
      pos = pos2 + 1.
      IF pos GE 0 THEN fil = SUBSTRING(filvar,pos,LENGTH(filvar)).
      ELSE fil = "".
      w = 0.   
      IF SUBSTRING(filvar,startpos,LENGTH(filvar)) = ".jpg" OR
      SUBSTRING(filvar,startpos,LENGTH(filvar)) = ".jpeg" THEN DO:
         RUN pdf_new IN h_PDFinc ("Spdf",utfil).
         RUN pdf_load_image IN h_PDFinc ("Spdf","ProSysLogo",filvar).
         w = pdf_ImageDim ("Spdf","ProSysLogo","WIDTH").
         /*
         IF w > 620 THEN DO:
            MESSAGE "Bilden är visuellt för stor. Minska bredden till max 620 pixlar." VIEW-AS ALERT-BOX.
            musz = TRUE.
         END.
         */
         com = "del " + utfil.
         OS-COMMAND SILENT VALUE(com).
         IF musz = TRUE THEN DO:
            musz = FALSE.
            RETURN.
         END.
      END.
      IF VALID-HANDLE(h_PDFinc) THEN DELETE PROCEDURE h_PDFinc NO-ERROR. 
      h_PDFinc = ?.
      RUN minne_UI.
      FIND FIRST bildbertemp WHERE bildbertemp.NUM = kon_val.NUM AND
      bildbertemp.FILNAMN = filnamn USE-INDEX NUM NO-LOCK NO-ERROR.
      IF NOT AVAILABLE bildbertemp THEN DO:      
         CREATE bildbertemp.
         ASSIGN
         bildbertemp.NUM = kon_val.NUM
         bildbertemp.NAMN = fil
         bildbertemp.FILNAMN = filnamn
         bild_rowid = ROWID(bildbertemp).
         RUN setcolsortvar_UI IN brwproc[25] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
         RUN openbdynspec_UI IN brwproc[25].
         FIND FIRST bildbertemp WHERE ROWID(bildbertemp) = bild_rowid NO-LOCK NO-ERROR.
         IF AVAILABLE bildbertemp THEN DO:
            RUN setlastrowid_UI IN brwproc[25] (INPUT ROWID(bildbertemp)).
            RUN lastselectdyn_UI IN brwproc[25].        
         END.
         SUBSTRING(kon_val.EXTRA3,3,1) = "B".
         RUN kondisp_UI.
         RUN sokkdispu_UI.
         RUN openbdynspec_UI IN brwproc[21].
         RUN lastselectdyn_UI IN brwproc[21]. 
      END.
      ELSE MESSAGE "Detta filnamn finns redan kopplat mot konstruktionen" VIEW-AS ALERT-BOX.      
      {musarrow.i} 
   END.   
   
END PROCEDURE.

PROCEDURE btnhmtkalkkod_UI :
   RUN fbtnsnabb_UI.
   IF Guru.Konstanter:appcon THEN DO:
      RUN BERKALKSTOPP.P  ON Guru.Konstanter:apphand TRANSACTION DISTINCT (INPUT INTEGER(valaonr),INPUT valomrade,INPUT kon_val.NUM, INPUT "LAGGAUPP").
   END.
   ELSE DO:
      RUN BERKALKSTOPP.P  (INPUT INTEGER(valaonr),INPUT valomrade,INPUT kon_val.NUM, INPUT "LAGGAUPP").
   END. 
   FIND FIRST kalk_temp WHERE kalk_temp.NUM = kon_val.NUM
   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE kalk_temp THEN RUN nykabstart2_UI.
   IF Guru.Konstanter:appcon THEN DO:
      RUN BERKALKSTOPP.P  ON Guru.Konstanter:apphand TRANSACTION DISTINCT (INPUT INTEGER(valaonr),INPUT valomrade,INPUT kon_val.NUM, INPUT "").
   END.
   ELSE DO:
      RUN BERKALKSTOPP.P  (INPUT INTEGER(valaonr),INPUT valomrade,INPUT kon_val.NUM, INPUT "").
   END. 
   APPLY "VALUE-CHANGED" TO BRW_VAL.
END PROCEDURE.

PROCEDURE btnnykod_UI :
   DEFINE VARIABLE arbkodvar AS CHARACTER NO-UNDO.
   DEFINE VARIABLE lopnrvar AS INTEGER NO-UNDO.
   {muswait.i} 
   antal_valda = BRW_VAL:NUM-SELECTED-ROWS.
   IF antal_valda = 0 THEN DO:
      MESSAGE "Markera den konstruktion du vill lägga till P2/P3-kod för." 
      VIEW-AS ALERT-BOX.
   END.
   ELSE DO: 
      ASSIGN
      arbkodvar = ""
      lopnrvar = 0.
      RUN selectfoc_UI (INPUT 8).
      kon_rowid = ROWID(kon_val).
      {AVBGOM2.I}         
      IF AVAILABLE kalk_temp THEN DO:
         ASSIGN
         arbkodvar = kalk_temp.ARBKOD
         lopnrvar = kalk_temp.LOPNR.
      END.
      IF NOT VALID-HANDLE(KalkClasserStart) THEN DO:
         RUN Modules\Kalkyl\KalkClasserStart.P PERSISTENT SET KalkClasserStart.
          Guru.GlobalaVariabler:plusaonr = Guru.GlobalaVariabler:plusaonr. 
         Guru.GlobalaVariabler:plusdnr = Guru.GlobalaVariabler:plusdnr.  
      END.
      Guru.GlobalaVariabler:NyBerKalkyl = FALSE.
      RUN NyBerKalkyl_UI IN KalkClasserStart (INPUT INTEGER(valaonr), INPUT valomrade).
      RUN fbtnsnabb_UI.
     
      IF ejanv = TRUE THEN DO:
         MESSAGE "Du kan inte gå in i kalkyl om beredningen är låst!"
         VIEW-AS ALERT-BOX.
         {AVBFRAM2.I}
         RETURN.  
      END.
      IF Guru.GlobalaVariabler:retvalkoll = TRUE THEN DO:
         RUN SetDefaultCursors IN Guru.Konstanter:hpApi.
         Guru.GlobalaVariabler:retvalkoll = FALSE.
      END.
      stoppasnabbspar = TRUE.
     
      RUN KalkyleraiBeredning_UI IN KalkClasserStart (INPUT INTEGER(valaonr), INPUT valomrade,INPUT kon_val.NUM,INPUT 0, INPUT FALSE).
      Guru.GlobalaVariabler:NyBerKalkyl = FALSE.
      EMPTY TEMP-TABLE kalk_temp NO-ERROR.   
      stoppasnabbspar = FALSE.  
      EMPTY TEMP-TABLE list_mtrl NO-ERROR. 
      RUN nykabstart2_UI.
       
      FIND kon_val WHERE ROWID(kon_val) = kon_rowid EXCLUSIVE-LOCK NO-ERROR.            
      {AVBFRAM2.I}
      IF musz = FALSE THEN DO:      
         IF AVAILABLE kon_val THEN DO:
            RUN kondisp_UI.
            RUN sokkdisp_UI.
            RUN setcolsortvar_UI IN brwproc[8] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
            RUN openbdynspec_UI IN brwproc[8].
            FIND FIRST kalk_temp WHERE kalk_temp.NUM = valnum AND kalk_temp.ARBKOD = arbkodvar AND kalk_temp.LOPNR = lopnrvar NO-LOCK NO-ERROR.
            IF AVAILABLE kalk_temp THEN DO:
               RUN setlastrowid_UI IN brwproc[8] (INPUT ROWID(kalk_temp)).
               RUN lastselectdyn_UI IN brwproc[8].
            END.         
         END.
      END.
      musz = FALSE.
   END.   
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnny_UI :
   {muswait.i}
   antal_valda = BRW_VAL:NUM-SELECTED-ROWS.
   IF antal_valda = 0 THEN DO:
      MESSAGE "Markera den konstruktion du vill lägga till materiel för."
      VIEW-AS ALERT-BOX.
   END.
   ELSE DO:
      kon_rowid = ROWID(kon_val).
      {AVBGOM2.I}
      RUN KOPIMTRLU.W.
      {AVBFRAM2.I}
      RUN setcolsortvar_UI IN brwproc[15] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
      RUN openbdynspec_UI IN brwproc[15].
      RUN title_UI IN brwproc[15].
      APPLY "ENTRY" TO BRW_MTRL.
   END.
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnordner_UI :
   {muswait.i}
   /*FIND FIRST kon_val NO-LOCK NO-ERROR.*/
   RUN selectfoc_UI (INPUT 21).
   
   IF AVAILABLE kon_display THEN DO:
      FIND FIRST kon_val WHERE kon_val.KSKAP = FALSE AND kon_val.NUM = kon_display.NUM  NO-LOCK NO-ERROR.
      ASSIGN
      kon_val.ANDRAD = "AND"
      frannr = kon_val.ORD
      till_rowid = ROWID(kon_val).
      RUN nselectfoc_UI (INPUT 21) .
      IF status-ok = TRUE THEN DO:
         ASSIGN         
         kon_val.ANDRAD = "AND"
         tillnr = kon_val.ORD
         kon_val.ORD = frannr. 
         kon_display.ORD = frannr.  
         FIND kon_val WHERE ROWID(kon_val) = till_rowid NO-ERROR.
         kon_val.ORD = tillnr.
         RUN kondisp_UI.
         RUN sorterabrwval_UI.
         RUN sokkdisp_UI.         
      END.   
   END.
   /*
   IF AVAILABLE kon_val THEN DO:
      ASSIGN
      kon_val.ANDRAD = "AND"
      frannr = kon_val.ORD
      till_rowid = ROWID(kon_val).
      RUN nselectfoc_UI (INPUT 21) .
      IF status-ok = TRUE THEN DO:
         
         ASSIGN         
         kon_val.ANDRAD = "AND"
         tillnr = kon_val.ORD
         kon_val.ORD = frannr.   
         FIND kon_val WHERE ROWID(kon_val) = till_rowid NO-ERROR.
         kon_val.ORD = tillnr.
         RUN kondisp_UI.
         RUN sorterabrwval_UI.
         RUN sokkdisp_UI.         
      END.   
   END.
   */
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnordupp_UI :
   {muswait.i}
   RUN selectfoc_UI (INPUT 21).
   IF AVAILABLE kon_display THEN DO:
      ASSIGN
      kon_val.ANDRAD = "AND"
      frannr = kon_val.ORD
      till_rowid = ROWID(kon_val).
      RUN pselectfoc_UI (INPUT 21).
      IF status-ok = TRUE THEN DO:
         ASSIGN
         kon_val.ANDRAD = "AND"
         tillnr = kon_val.ORD
         kon_val.ORD = frannr.
         kon_display.ORD = frannr.    
         FIND kon_val WHERE ROWID(kon_val) = till_rowid NO-ERROR.
         kon_val.ORD = tillnr.
         RUN kondisp_UI.
         RUN sorterabrwval_UI.
         RUN sokkdisp_UI.
      END.   
   END.   
   /*
   IF AVAILABLE kon_val THEN DO:
      ASSIGN
      kon_val.ANDRAD = "AND"
      frannr = kon_val.ORD
      till_rowid = ROWID(kon_val).
      RUN pselectfoc_UI (INPUT 21).
      IF status-ok = TRUE THEN DO:
         ASSIGN
         kon_val.ANDRAD = "AND"
         tillnr = kon_val.ORD
         kon_val.ORD = frannr.   
         FIND kon_val WHERE ROWID(kon_val) = till_rowid NO-ERROR.
         kon_val.ORD = tillnr.
         RUN kondisp_UI.
         RUN sorterabrwval_UI.
         RUN sokkdisp_UI.
      END.   
   END.
   */   
   {musarrow.i}   
END PROCEDURE.

PROCEDURE btnpar_UI :
   {muswait.i}         
   ASSIGN
   antal_valda = BRW_MTRL:NUM-SELECTED-ROWS
   antal_raknare = 1
   skapapar = FALSE.
   DO WHILE antal_raknare LE antal_valda:
      RUN fselectfoc_UI (INPUT 15).
      IF AVAILABLE list_mtrl THEN DO:
         RUN VALPARU.W (INPUT ROWID(list_mtrl)).         
         
         RUN setlastrowid_UI IN brwproc[15] (INPUT ROWID(list_mtrl)).      
      END.
      antal_raknare = antal_raknare + 1.  
   END.       
   IF skapapar = FALSE THEN DO:
      RUN refreshbrw_UI IN brwproc[15].
   END.
   ELSE DO:   
      skapapar = FALSE.
      RUN setcolsortvar_UI IN brwproc[15] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
      RUN openbdynspec_UI IN brwproc[15].
   END.      
   RUN lastselectdyn_UI IN brwproc[15].
   RUN title_UI IN brwproc[15].
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnsats_UI :
   {muswait.i}     
   ASSIGN
   antal_valda = BRW_MTRL:NUM-SELECTED-ROWS
   antal_raknare = 1
   satsinn = FALSE.
   DO WHILE antal_raknare LE antal_valda:
      RUN fselectfoc_UI (INPUT 15).
      IF AVAILABLE list_mtrl THEN DO:
         RUN SATSINNEU.W (INPUT ROWID(list_mtrl)). 
         RUN setlastrowid_UI IN brwproc[15] (INPUT ROWID(list_mtrl)).         
      END.
      antal_raknare = antal_raknare + 1.  
   END. 
   IF satsinn = TRUE THEN DO:      
      RUN setcolsortvar_UI IN brwproc[15] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
      RUN openbdynspec_UI IN brwproc[15].
      satsinn = FALSE.
   END.   
   RUN lastselectdyn_UI IN brwproc[15]. 
   RUN title_UI IN brwproc[15].
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnimpenr_UI :
  
  /*DEFINE VARIABLE oversatt AS LOGICAL NO-UNDO.
  oversatt = FALSE.
   oversatt = TRUE.
   
   IF Guru.Konstanter:globniv = 0 OR Guru.Konstanter:globniv = 1 THEN DO:
      MESSAGE  "Ska importen gå via översättningslistan?"   VIEW-AS ALERT-BOX
      QUESTION BUTTONS YES-NO-CANCEL UPDATE svar AS LOGICAL.
      CASE svar:
         WHEN TRUE THEN.
         WHEN FALSE THEN.  
         OTHERWISE RETURN.
      END CASE.       
      IF svar = FALSE THEN oversatt = FALSE. 
   END.*/   
   DEFINE VARIABLE OKvald AS LOGICAL NO-UNDO.
   EMPTY TEMP-TABLE mttemp NO-ERROR. 
   EMPTY TEMP-TABLE felmex NO-ERROR. 
   fildir = SESSION:TEMP-DIRECTORY.
   {SESSIONTEMPDIR.I}
   IF SESSION:CLIENT-TYPE = "WEBCLIENT" THEN fildir = webclienttempdir.
   OS-CREATE-DIR VALUE(fildir) NO-ERROR.
   mappvar = fildir.
   SYSTEM-DIALOG GET-FILE fildir
   TITLE          "Välj den excelfil som Ni vill läsa in"
   FILTERS        "All Files (*.xls;*.xlsx)"  "*.xls;*.xlsx"   
   INITIAL-DIR    mappvar
   UPDATE OKvald.      
   IF OKvald = TRUE THEN DO:                      
      {muswait.i}             
      RUN MTRLEXELIN.P (INPUT fildir,INPUT vald_lev, OUTPUT TABLE mttemp ).               
      RUN enrvalexc_UI.
      
      RUN setcolsortvar_UI IN brwproc[15] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
      RUN openbdynspec_UI IN brwproc[15].  
      RUN title_UI IN brwproc[15].
      FIND FIRST felmex NO-ERROR.
      IF AVAILABLE felmex THEN DO:
         felfil = SESSION:TEMP-DIR + STRING(TIME) + ".txt". 
         {AMERICANEUROPEAN.I}      
         OUTPUT TO VALUE(felfil).         
         PUT "Dessa enr blev ej inlästa från excel . Var god kontrollera!" AT 6.         
         PUT SKIP.         
         FOR EACH felmex:           
            PUT UNFORMATTED felmex.ENR AT 6 felmex.ANTAL AT 19 SUBSTRING(felmex.LEVKOD,1,3) AT 32 SUBSTRING(felmex.LEVNAMN,1,20) AT 42 SUBSTRING(felmex.BENAMNING,1,20) AT 65.  
            PUT SKIP.
         END.
         OUTPUT CLOSE.
         {EUROPEANAMERICAN.I}
         RUN OPENDOC.P (felfil,"","",NO).         
      END.   
   END.               
   {musarrow.i}  

END PROCEDURE.
PROCEDURE enrvalexc_UI :
   DEFINE VARIABLE vlevnamn  AS CHARACTER NO-UNDO.
   DEFINE VARIABLE lnamn  AS CHARACTER NO-UNDO.
   DEFINE VARIABLE vlev AS CHARACTER NO-UNDO.
   RUN kollev_UI IN kopimtrlapph (INPUT vald_lev,OUTPUT vlevnamn).
   FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR. 
   FOR EACH mttemp:        
      RUN kollev_UI IN kopimtrlapph (INPUT mttemp.LEVKOD,OUTPUT lnamn).       
      IF lnamn = "" THEN DO:
         ASSIGN
          vlev = vald_lev
          mttemp.LEVKOD = vald_lev          
          mttemp.LEVNAMN = vlevnamn.
      END.
      ELSE DO: 
         ASSIGN
         vlev = mttemp.LEVKOD.
         mttemp.LEVNAMN = lnamn.
      END.
      EMPTY TEMP-TABLE eimlist_mtrl NO-ERROR.                
      RUN hmtskapuovers_UI IN kopimtrlapph (INPUT mttemp.ENR,INPUT vlev,OUTPUT TABLE eimlist_mtrl).
     
      FIND FIRST eimlist_mtrl NO-LOCK NO-ERROR.
      IF AVAILABLE eimlist_mtrl THEN DO:         
         FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
         list_mtrl.ENR = eimlist_mtrl.ENR AND list_mtrl.LEVKOD = eimlist_mtrl.LEVKOD  EXCLUSIVE-LOCK NO-ERROR.                          
         IF AVAILABLE list_mtrl THEN DO:
            ASSIGN
            mtrl_rowid = ROWID(list_mtrl).            
         END.
         ELSE DO:
            CREATE list_mtrl.
            ASSIGN
            list_mtrl.NUM = kon_val.NUM
            list_mtrl.ENR = eimlist_mtrl.ENR
            list_mtrl.BENAMNING = eimlist_mtrl.BENAMNING
            list_mtrl.ANTAL = INTEGER(mttemp.ANTAL)
            list_mtrl.ENHET = LC(eimlist_mtrl.ENHET)
            list_mtrl.PRIS = eimlist_mtrl.PRIS                
            list_mtrl.LINKAB = FALSE
            mtrl_rowid = ROWID(eimlist_mtrl).                                 
            list_mtrl.LEVKOD = eimlist_mtrl.LEVKOD.                       
         END.  
         IF Guru.Konstanter:varforetypval[29] = 1  THEN DO:                 
            /*nettopris beredning inköp*/
            FIND FIRST kmtrltemp WHERE kmtrltemp.LEVKOD = eimlist_mtrl.LEVKOD AND kmtrltemp.ENR = eimlist_mtrl.ENR AND kmtrltemp.KALKNR = 0
            NO-LOCK NO-ERROR.
            IF NOT AVAILABLE kmtrltemp THEN DO:                        
               CREATE kmtrltemp.
               BUFFER-COPY eimlist_mtrl TO kmtrltemp.                                    
            END.
            IF Guru.Konstanter:varforetypval[37] NE 0 THEN DO:
               EMPTY TEMP-TABLE ekmtrltemp NO-ERROR. 
               CREATE ekmtrltemp.
               BUFFER-COPY kmtrltemp TO ekmtrltemp.
               RUN kommentar_UI IN nettoh (INPUT-OUTPUT TABLE ekmtrltemp).            
               FIND FIRST ekmtrltemp NO-LOCK NO-ERROR.
               FIND FIRST kmtrltemp WHERE kmtrltemp.LEVKOD = eimlist_mtrl.LEVKOD AND kmtrltemp.ENR = eimlist_mtrl.ENR AND kmtrltemp.KALKNR = 0 NO-ERROR.
               BUFFER-COPY ekmtrltemp TO kmtrltemp.
            END.

         END.

      END.
      ELSE DO:               
         CREATE felmex.       
         ASSIGN 
         felmex.ENR = mttemp.ENR
         felmex.ANTAL = mttemp.ANTAL
         felmex.LEVKOD = mttemp.LEVKOD
         felmex.LEVNAMN = mttemp.LEVNAMN                 
         felmex.BENAMNING = mttemp.BENAMNING.                          
      END.  
   END.   
END PROCEDURE.


PROCEDURE btnsolen_UI :
   MESSAGE "Nu startar vi solen" VIEW-AS ALERT-BOX.  
END PROCEDURE.

PROCEDURE btnspec_UI :
   /*Niklas personlig spec_mtrl*/
   {muswait.i}
   {AVBGOM2.I}
   kon_rowid = ROWID(kon_val).
   RUN BERSPECANV.W (INPUT 1).
   {AVBFRAM2.I}   
   IF musz = FALSE THEN DO:      
      RUN setcolsortvar_UI IN brwproc[15] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
      RUN openbdynspec_UI IN brwproc[15].
      FIND FIRST list_mtrl WHERE ROWID(list_mtrl) = mtrl_rowid NO-LOCK NO-ERROR.
      IF AVAILABLE list_mtrl THEN DO:
         RUN setlastrowid_UI IN brwproc[15] (INPUT ROWID(list_mtrl)).
         RUN lastselectdyn_UI IN brwproc[15].
      END.
      RUN title_UI IN brwproc[15].
   END.
   musz = FALSE.
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnlink_UI :
   RUN rowleave_UI.
   RUN btnlinkab_UI. 
END PROCEDURE.

PROCEDURE btnlinkab_UI :
   antal_valda = BRW_MTRL:NUM-SELECTED-ROWS.
   antal_raknare = 1.    
   DO WHILE antal_raknare LE antal_valda:   
      RUN selectfoc_UI (INPUT 15).
      IF AVAILABLE list_mtrl THEN DO:
         IF list_mtrl.LINKAB = FALSE THEN DO:
            musz = FALSE. 
            RUN TRUELINU2.W (INPUT ROWID(list_mtrl)).                       
            RUN setlastrowid_UI IN brwproc[15] (INPUT ROWID(list_mtrl)).               
         END.
         ELSE DO:
            ASSIGN
            list_mtrl.LINKAB = FALSE
            list_mtrl.DIAMETER = 0.  
         END.   
      END.
      antal_raknare = antal_raknare + 1.   
   END.   
   RUN refreshbrw_UI IN brwproc[15].
   RUN lastselectdyn_UI IN brwproc[15].   
   RUN title_UI IN brwproc[15].
   {musarrow.i}
END PROCEDURE.


PROCEDURE btnlev_UI :
   IF SUBSTRING(huvudlev,1,5) = "Sats " THEN satsvar = TRUE.   
   ELSE satsvar = FALSE.   
   IF satsvar = FALSE THEN DO:
      FIND FIRST mtrltemp WHERE mtrltemp.LEVKOD = vald_lev
      AND mtrltemp.KALKNR = 0 NO-LOCK NO-ERROR.
      IF AVAILABLE mtrltemp THEN RUN dselectfoc_UI (INPUT 22).
      ASSIGN 
      BTN_LEV:HIDDEN = TRUE
      BRW_SATS:HIDDEN = TRUE
      BRW_SOKMTRLF:HIDDEN = TRUE
      FILL-IN-KOD:HIDDEN = TRUE
      CMB_LEV:HIDDEN = FALSE
      BRW_HLEV:HIDDEN = FALSE 
      CMB_LEV:SCREEN-VALUE = huvudlev
      vald_lev = vald_kundlev
      valet = FALSE
      satsvar = FALSE.       
      levinlast = "".
      RUN levinlast_UI (INPUT vald_lev,OUTPUT levinlast).
      RUN setorgtitle_UI IN brwproc[22] (INPUT "Materiellista " + huvudlev + levinlast).       

      RUN setcolsortvar_UI IN brwproc[22] (INPUT " WHERE KALKNR = 0 AND LEVKOD = '" + STRING(vald_lev) + "' USE-INDEX ENR ").
      RUN openbdynspec_UI IN brwproc[22].
   END.
   ELSE DO:
      FIND FIRST satstemp WHERE satstemp.LEVKOD = vald_lev AND
      satstemp.SATS = TRUE NO-LOCK NO-ERROR.
      IF AVAILABLE satstemp THEN RUN dselectfoc_UI (INPUT 23).       
      ASSIGN 
      BTN_LEV:HIDDEN = TRUE
      BRW_SATS:HIDDEN = FALSE
      FILL-IN-KOD:HIDDEN = FALSE
      CMB_LEV:HIDDEN = FALSE
      BRW_HLEV:HIDDEN = TRUE 
      CMB_LEV:SCREEN-VALUE = huvudlev
      vald_lev = vald_kundlev
      valet = FALSE
      satsvar = TRUE. 
      RUN setorgtitle_UI IN brwproc[23] (INPUT "Satslista " + huvudlev).         
   END.    
   RUN vcradmtrl_UI.
   APPLY "ENTRY" TO FILL-IN-ENR.
   IF RAD_MTRL:SCREEN-VALUE = "2" OR RAD_MTRL:SCREEN-VALUE = "3" THEN  APPLY "ENTRY" TO FILL-IN-ENRSTOLP.
   
END PROCEDURE.


PROCEDURE koppidbort_UI :
   DEFINE VARIABLE rcid AS RECID NO-UNDO.
   DEFINE VARIABLE rnum AS INTEGER NO-UNDO.
   IF stoppasnabbspar = TRUE THEN RETURN.
   rcid = RECID(kon_val).
   rnum = kon_val.NUM.
   FIND FIRST berid2temp WHERE berid2temp.NUM = kon_val.NUM NO-LOCK NO-ERROR.
   IF AVAILABLE berid2temp THEN DELETE berid2temp.
   FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM  NO-LOCK NO-ERROR.            
   IF AVAILABLE kon_id THEN DELETE kon_id.             
   FOR EACH kon_val WHERE kon_val.NUM = rnum NO-LOCK:
      kon_val.ID = FALSE.
      kon_val.ID1 = "".
      kon_val.ID2 = "".
      kon_val.EXTRA1 = "".
   END.
   FIND FIRST kon_val  WHERE RECID(kon_val) = rcid NO-LOCK NO-ERROR.
   IF ejanv = TRUE THEN.
   ELSE DO:
      RUN BeridBort_UI IN bervalapph (INPUT valaonr, INPUT valomrade, INPUT kon_val.NUM).
      RUN ok_UI.
   END.          
   RUN kondisp_UI.
   RUN sokkdisp_UI. 
END PROCEDURE.
PROCEDURE koppid_UI :
   
   RUN selectfoc_UI (INPUT 21). 
  
   kon_rowid = ROWID(kon_val). 
   {muswait.i}  
   IF AVAILABLE bbenamntemp THEN DO:
      IF bbenamntemp.ID1 NE "" THEN DO:        
         IF FILL-IN-IDNR1:SCREEN-VALUE = ? THEN DO:          
            MESSAGE "Ni har angett ett ogiltigt värde i fältet för " bbenamntemp.ID1 + "."
            VIEW-AS ALERT-BOX TITLE "Meddelande".
            APPLY "ENTRY" TO FILL-IN-IDNR1.
            RETURN NO-APPLY.
         END.
      END.  
      IF bbenamntemp.ID2 NE "" THEN DO:  
         IF FILL-IN-IDNR2:SCREEN-VALUE = ? OR FILL-IN-IDNR2:SCREEN-VALUE = "" THEN DO:
            MESSAGE "Ni har angett ett ogiltigt värde i fältet för " bbenamntemp.ID2 + "."
            VIEW-AS ALERT-BOX TITLE "Meddelande".
            APPLY "ENTRY" TO FILL-IN-IDNR2.
            RETURN NO-APPLY.
         END.
      END.                
   END.
   /*FOREID*/
   
   RUN berid2_UI (INPUT 1).
   FIND kon_val WHERE ROWID(kon_val) = kon_rowid EXCLUSIVE-LOCK NO-ERROR.
   
   IF Guru.Konstanter:varforetypval[32] = 1 OR Guru.Konstanter:varforetypval[32] = 2 OR Guru.Konstanter:varforetypval[32] = 4 THEN DO:     
      IF kon_val.ID = FALSE THEN DO:
         FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM NO-LOCK NO-ERROR.
         IF NOT AVAILABLE kon_id THEN DO:
            FIND kon_val WHERE ROWID(kon_val) = kon_rowid EXCLUSIVE-LOCK NO-ERROR.            
            FIND LAST kon_id WHERE kon_id.FRI2 = INTEGER(FILL-IN-IDNR2:SCREEN-VALUE) USE-INDEX FRI NO-LOCK NO-ERROR.            
            IF NOT AVAILABLE kon_id THEN DO:               
               CREATE kon_id.
               ASSIGN
               kon_id.NUM = kon_val.NUM 
               kon_id.GRUPP = kon_val.GRUPP
               kon_id.FORNR = " "
               kon_id.LINNR = " "
               kon_id.NATNR = " " 
               kon_id.FRI1 = 0
               kon_id.FRI2 = INTEGER(FILL-IN-IDNR2:SCREEN-VALUE)
               kon_id.FRI3 = FILL-IN-SUND:SCREEN-VALUE
               kon_val.ID = TRUE               
               kon_val.ID2 = STRING(kon_id.FRI2)               
               kon_id.A = TOG_A:CHECKED
               kon_id.B = TOG_B:CHECKED
               kon_id.C = TOG_C:CHECKED.
               RUN extraf_UI (INPUT 1).
               RUN sparid_UI.               
            END.
            ELSE DO: 
               FIND FIRST konstgrptemp WHERE konstgrptemp.KONSKOD = kon_val.GRUPP NO-LOCK NO-ERROR.
               IF AVAILABLE konstgrptemp THEN DO:
                  MESSAGE "Det finns redan en " + konstgrptemp.BENAMNING + " med denna identifikation." VIEW-AS ALERT-BOX TITLE "Meddelande".
                  RETURN NO-APPLY.
               END.
               felmedd = "".
               RUN koppcheck_UI IN bervalapph (INPUT kon_val.GRUPP,OUTPUT felmedd).
               IF felmedd NE "" THEN DO:
                  MESSAGE felmedd VIEW-AS ALERT-BOX TITLE "Meddelande".
                  RETURN NO-APPLY.
               END.               
            END.            
         END.
         ELSE DO:         
            FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.
            IF  kon_val.GRUPP = ? THEN DO:
               FIND LAST kon_id WHERE kon_id.FRI2 = INTEGER(FILL-IN-IDNR2:SCREEN-VALUE) USE-INDEX FRI NO-LOCK NO-ERROR.
            END.
            ELSE DO:
               FIND LAST kon_id WHERE kon_id.FRI2 = INTEGER(FILL-IN-IDNR2:SCREEN-VALUE) AND kon_id.GRUPP = kon_val.GRUPP USE-INDEX FRI NO-LOCK NO-ERROR.
            END.
            IF NOT AVAILABLE kon_id THEN DO:             
               FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM EXCLUSIVE-LOCK NO-ERROR.           
               ASSIGN 
               kon_id.GRUPP = kon_val.GRUPP   
               kon_id.FORNR = " "
               kon_id.LINNR = " "
               kon_id.NATNR = " "
               kon_id.FRI1 = 0
               kon_id.FRI2 = INTEGER(FILL-IN-IDNR2:SCREEN-VALUE)
               kon_id.FRI3 = FILL-IN-SUND:SCREEN-VALUE
               kon_id.ENDKOMB = FALSE
               kon_val.ID = TRUE            
               kon_val.ID2 = STRING(kon_id.FRI2)               
               kon_id.A = TOG_A:CHECKED
               kon_id.B = TOG_B:CHECKED
               kon_id.C = TOG_C:CHECKED.
               RUN extraf_UI (INPUT 1).
               RUN sparid_UI.
            END.
            ELSE DO:              
               FIND FIRST konstgrptemp WHERE konstgrptemp.KONSKOD = kon_val.GRUPP NO-LOCK NO-ERROR.
               IF AVAILABLE konstgrptemp THEN DO:
                  MESSAGE "Det finns redan en " + konstgrptemp.BENAMNING + " med denna identifikation." VIEW-AS ALERT-BOX TITLE "Meddelande".
                  RETURN NO-APPLY.
               END.
               felmedd = "".
               RUN koppcheck_UI IN bervalapph (INPUT kon_val.GRUPP,OUTPUT felmedd).
               IF felmedd NE "" THEN DO:
                  MESSAGE felmedd VIEW-AS ALERT-BOX TITLE "Meddelande".
                  RETURN NO-APPLY.
               END.             
            END.                                   
         END.
      END.
      ELSE DO:        
         IF kon_id.FRI1 = ? THEN kon_id.FRI1 = 0.
         IF INTEGER(FILL-IN-IDNR2:SCREEN-VALUE) NE sparfri2 THEN RUN andra_UI. 
         ELSE DO:            
            ASSIGN
            kon_id.FRI3 = FILL-IN-SUND:SCREEN-VALUE
            kon_id.A = TOG_A:CHECKED
            kon_id.B = TOG_B:CHECKED
            kon_id.C = TOG_C:CHECKED.
         END.
         RUN extraf_UI (INPUT 1).
      END.      
   END.
   ELSE DO: 
      IF kon_val.ID = FALSE THEN DO:
         FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.
         FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM NO-LOCK NO-ERROR.
         IF NOT AVAILABLE kon_id THEN DO:
            FIND FIRST kon_id WHERE kon_id.GRUPP = kon_val.GRUPP AND 
            kon_id.FORNR = FILL-IN-NR1:SCREEN-VALUE AND kon_id.LINNR = FILL-IN-NR2:SCREEN-VALUE AND 
            kon_id.NATNR = FILL-IN-NR3:SCREEN-VALUE AND kon_id.FRI1 = INTEGER(FILL-IN-IDNR1:SCREEN-VALUE) AND 
            kon_id.FRI2 = INTEGER(FILL-IN-IDNR2:SCREEN-VALUE) NO-LOCK NO-ERROR.
            IF NOT AVAILABLE kon_id THEN DO:
               FIND kon_val WHERE ROWID(kon_val) = kon_rowid EXCLUSIVE-LOCK NO-ERROR.            
               CREATE kon_id.
               ASSIGN
               kon_id.NUM = kon_val.NUM 
               kon_id.GRUPP = kon_val.GRUPP
               kon_id.FORNR = FILL-IN-NR1:SCREEN-VALUE
               kon_id.LINNR = FILL-IN-NR2:SCREEN-VALUE
               kon_id.NATNR = FILL-IN-NR3:SCREEN-VALUE
               kon_id.FRI1 = INTEGER(FILL-IN-IDNR1:SCREEN-VALUE)
               kon_id.FRI2 = INTEGER(FILL-IN-IDNR2:SCREEN-VALUE)
               kon_id.FRI3 = FILL-IN-SUND:SCREEN-VALUE
               kon_id.A = TOG_A:CHECKED
               kon_id.B = TOG_B:CHECKED
               kon_id.C = TOG_C:CHECKED
               kon_val.ID = TRUE.
               IF kon_id.FRI2 = ? THEN kon_val.ID2 = kon_id.NATNR.
               ELSE kon_val.ID2 = STRING(kon_id.FRI2).              
               RUN extraf_UI (INPUT 1). 
               RUN sparid_UI.
            END.
            ELSE DO:                   
               FIND FIRST konstgrptemp WHERE konstgrptemp.KONSKOD = kon_val.GRUPP NO-LOCK NO-ERROR.
               IF AVAILABLE konstgrptemp THEN DO:
                  MESSAGE "Det finns redan en " + konstgrptemp.BENAMNING + " med denna identifikation." VIEW-AS ALERT-BOX TITLE "Meddelande".
                  RETURN NO-APPLY.
               END.
               felmedd = "".
               RUN koppcheck_UI IN bervalapph (INPUT kon_val.GRUPP,OUTPUT felmedd).
               IF felmedd NE "" THEN DO:
                  MESSAGE felmedd VIEW-AS ALERT-BOX TITLE "Meddelande".
                  RETURN NO-APPLY.
               END.             
            END.            
         END.
         ELSE DO:         
            FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.
            FIND FIRST kon_id WHERE kon_id.GRUPP = kon_val.GRUPP AND 
            kon_id.FORNR = FILL-IN-NR1:SCREEN-VALUE AND kon_id.LINNR = FILL-IN-NR2:SCREEN-VALUE AND 
            kon_id.NATNR = FILL-IN-NR3:SCREEN-VALUE AND kon_id.FRI1 = INTEGER(FILL-IN-IDNR1:SCREEN-VALUE) AND 
            kon_id.FRI2 = INTEGER(FILL-IN-IDNR2:SCREEN-VALUE) NO-LOCK NO-ERROR.
            IF NOT AVAILABLE kon_id THEN DO:             
               FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM EXCLUSIVE-LOCK NO-ERROR.           
               ASSIGN 
               kon_id.GRUPP = kon_val.GRUPP   
               kon_id.FORNR = FILL-IN-NR1:SCREEN-VALUE
               kon_id.LINNR = FILL-IN-NR2:SCREEN-VALUE
               kon_id.NATNR = FILL-IN-NR3:SCREEN-VALUE
               kon_id.FRI1 = INTEGER(FILL-IN-IDNR1:SCREEN-VALUE)
               kon_id.FRI2 = INTEGER(FILL-IN-IDNR2:SCREEN-VALUE)
               kon_id.FRI3 = FILL-IN-SUND:SCREEN-VALUE
               kon_id.ENDKOMB = FALSE
               kon_id.A = TOG_A:CHECKED
               kon_id.B = TOG_B:CHECKED
               kon_id.C = TOG_C:CHECKED
               kon_val.ID = TRUE.
               IF kon_id.FRI2 = ? THEN kon_val.ID2 = kon_id.NATNR.
               ELSE kon_val.ID2 = STRING(kon_id.FRI2).
               RUN extraf_UI (INPUT 1).
               RUN sparid_UI.
            END.
            ELSE DO:                   
               FIND FIRST konstgrptemp WHERE konstgrptemp.KONSKOD = kon_val.GRUPP NO-LOCK NO-ERROR.
               IF AVAILABLE konstgrptemp THEN DO:
                  MESSAGE "Det finns redan en " + konstgrptemp.BENAMNING + " med denna identifikation." VIEW-AS ALERT-BOX TITLE "Meddelande".
                  RETURN NO-APPLY.
               END.
               felmedd = "".
               RUN koppcheck_UI IN bervalapph (INPUT kon_val.GRUPP,OUTPUT felmedd).
               IF felmedd NE "" THEN DO:
                  MESSAGE felmedd VIEW-AS ALERT-BOX TITLE "Meddelande".
                  RETURN NO-APPLY.
               END.             
            END.                                   
         END.   
      END.
      ELSE DO:
         IF FILL-IN-NR1:SCREEN-VALUE NE sparfor THEN RUN andra_UI.      
         ELSE IF FILL-IN-NR2:SCREEN-VALUE NE sparlin THEN RUN andra_UI.
         ELSE IF FILL-IN-NR3:SCREEN-VALUE NE sparnat THEN RUN andra_UI.
         ELSE IF INTEGER(FILL-IN-IDNR1:SCREEN-VALUE) NE sparfri1 THEN RUN andra_UI.
         ELSE IF INTEGER(FILL-IN-IDNR2:SCREEN-VALUE) NE sparfri2 THEN RUN andra_UI. 
         ELSE DO:              
            ASSIGN
            kon_id.FRI3 = FILL-IN-SUND:SCREEN-VALUE
            kon_id.A = TOG_A:CHECKED
            kon_id.B = TOG_B:CHECKED
            kon_id.C = TOG_C:CHECKED.
         END.
         RUN extraf_UI (INPUT 1).
      END.     
   END. 
   RUN autosortfind_UI.
   IF AVAILABLE kon_val THEN DO:
      RUN kondisp_UI.
      RUN sokkdisp_UI.              
   END.

   /* combo för linje-del */
   
   RUN deladd_UI.

   {musarrow.i}
END PROCEDURE.
PROCEDURE autosortfind_UI :
   DEFINE VARIABLE forvar AS CHARACTER NO-UNDO.
   DEFINE VARIABLE linvar AS CHARACTER NO-UNDO.
   DEFINE VARIABLE natvar AS CHARACTER NO-UNDO.
   DEFINE VARIABLE gruppvar AS INTEGER NO-UNDO. 
   DEFINE VARIABLE numvar AS INTEGER NO-UNDO.   
   DEFINE VARIABLE numvar2 AS INTEGER NO-UNDO.
   DEFINE VARIABLE id2var AS INTEGER NO-UNDO.
   DEFINE VARIABLE foresok AS LOGICAL NO-UNDO.
   
   IF TOG_AS:CHECKED = FALSE THEN RETURN.
   ASSIGN
   forvar = kon_id.FORNR 
   linvar = kon_id.LINNR
   natvar = kon_id.NATNR
   gruppvar = kon_id.GRUPP
   numvar = kon_id.FRI1
   numvar2 = kon_id.FRI2.
   DEFINE VARIABLE uppvar AS LOGICAL NO-UNDO.
   DEFINE VARIABLE frannr AS INTEGER NO-UNDO.
   DEFINE VARIABLE tillnr AS INTEGER NO-UNDO.
   DEFINE VARIABLE till_rowid AS ROWID NO-UNDO.
  
   till_rowid = ROWID(kon_val). 
   /* 1 = byggnr
    2 = umeå byggnr
    3 = ej byggnr visar övrigt ej brw
    4 = byggnr med nätstation mm
    5 = ej byggnr visar övrig + nätsation ej brw
    */
    
   IF Guru.Konstanter:varforetypval[32] = 1 OR Guru.Konstanter:varforetypval[32] = 2 OR Guru.Konstanter:varforetypval[32] = 4 THEN DO:  
      id2var = 0.      
      FIND FIRST kon_display WHERE INTEGER(kon_display.ID2) < INTEGER(kon_val.ID2) AND kon_display.ID2 NE " " NO-LOCK NO-ERROR.
      IF AVAILABLE kon_display THEN DO:
         foresok = FALSE.
         FOR EACH kon_display WHERE INTEGER(kon_display.ID2) < INTEGER(kon_val.ID2) AND kon_display.ID2 NE " " NO-LOCK BY kon_display.ID2:
            IF id2var < INTEGER(kon_display.ID2) THEN DO:
               id2var = INTEGER(kon_display.ID2).
               till_rowid = ROWID(kon_display).
            END.   
         END.
         FIND FIRST kon_display  WHERE ROWID(kon_display) = till_rowid NO-LOCK NO-ERROR.
      END.   
      ELSE DO: 
         foresok = TRUE.
         FIND FIRST kon_display WHERE INTEGER(kon_display.ID2) > INTEGER(kon_val.ID2) AND kon_display.ID2 NE " " USE-INDEX ID2 NO-LOCK NO-ERROR. 
         IF AVAILABLE kon_display THEN DO: 
            IF id2var < INTEGER(kon_display.ID2) THEN DO:
               id2var = INTEGER(kon_display.ID2).
               till_rowid = ROWID(kon_display).
            END.
         END.    
      END.
      IF id2var = 0 THEN RETURN. 
      FIND FIRST konbuff WHERE konbuff.NUM = kon_display.NUM AND konbuff.KSKAP = FALSE  NO-LOCK NO-ERROR.
      till_rowid = ROWID(kon_val). 
   END.
   ELSE DO:   
      id2var = 0.  
      FIND FIRST kon_id WHERE kon_id.GRUPP = gruppvar AND kon_id.FRI1 = numvar AND 
      kon_id.FRI2 < numvar2 AND kon_id.ENDKOMB = FALSE NO-LOCK NO-ERROR.
      IF AVAILABLE kon_id THEN DO:
         foresok = FALSE.
         FOR EACH kon_id WHERE kon_id.GRUPP = gruppvar AND kon_id.FRI1 = numvar AND 
         kon_id.FRI2 < numvar2 AND kon_id.ENDKOMB = FALSE:
          
            IF id2var < INTEGER(kon_id.FRI2) THEN DO:
               id2var = INTEGER(kon_id.FRI2).
               till_rowid = ROWID(kon_id).
            END.  
         END.
      END.
      ELSE DO:
         foresok = TRUE. 
         FIND FIRST kon_id WHERE kon_id.GRUPP = gruppvar AND kon_id.FRI1 = numvar AND 
         kon_id.FRI2 > numvar2 AND kon_id.ENDKOMB = FALSE NO-LOCK NO-ERROR.
         IF AVAILABLE kon_id THEN DO: 
            IF id2var < INTEGER(kon_id.FRI2) THEN DO:
               id2var = INTEGER(kon_id.FRI2).
               till_rowid = ROWID(kon_id).
            END.  
         END.
      END.      
      IF id2var = 0 THEN RETURN. 
      FIND FIRST kon_id  WHERE ROWID(kon_id) = till_rowid NO-LOCK NO-ERROR.  
      FIND FIRST konbuff WHERE konbuff.NUM = kon_id.NUM AND konbuff.KSKAP = FALSE  NO-LOCK NO-ERROR.
      till_rowid = ROWID(kon_val). 
   END.
  
   IF AVAILABLE konbuff THEN RUN autosort_UI (INPUT till_rowid , INPUT foresok). 
 END PROCEDURE.
 
 PROCEDURE autosort_UI :
    DEFINE INPUT  PARAMETER till_rowid AS ROWID NO-UNDO.
    DEFINE INPUT  PARAMETER foresok AS LOGICAL NO-UNDO.
    DEFINE VARIABLE till_rowid2 AS ROWID NO-UNDO.
    DEFINE VARIABLE ordvar AS INTEGER NO-UNDO.
    DEFINE VARIABLE ordauto AS INTEGER NO-UNDO.
    IF NOT AVAILABLE konbuff THEN DO:
       RETURN.
    END.
    
    EMPTY TEMP-TABLE sorttt NO-ERROR. 
    FIND FIRST kon_val WHERE ROWID(kon_val) = till_rowid NO-LOCK NO-ERROR. 
    IF foresok = FALSE THEN kon_val.ORD = konbuff.ORD + 1.
    ELSE kon_val.ORD = konbuff.ORD - 1.
   
    ordauto = kon_val.ORD.
    kon_val.ANDRAD = "AND".
    FIND FIRST kon_val WHERE kon_val.KSKAP = FALSE USE-INDEX ORD NO-LOCK NO-ERROR .
    ordvar = 1.
    FOR EACH kon_val WHERE kon_val.KSKAP = FALSE NO-LOCK BY ORD:
       FIND FIRST sorttt WHERE sorttt.RID = ROWID(kon_val) NO-LOCK NO-ERROR.
      
       
       IF NOT AVAILABLE sorttt THEN DO:
           CREATE sorttt.
           sorttt.RID = ROWID(kon_val).
           IF ROWID(kon_val) = till_rowid THEN DO:
              kon_val.ANDRAD = "AND".
           END.  
           ELSE IF kon_val.ORD = ordauto THEN DO:
              kon_val.ANDRAD = "AND".
              kon_val.ORD = ordvar + 1.
           END.
           ELSE IF kon_val.ORD < ordauto THEN DO:
           END.
           ELSE DO:
              kon_val.ANDRAD = "AND".
              kon_val.ORD = ordvar.
           END.
           ordvar = ordvar + 1. 
       END.
        kon_val.ANDRAD = "AND".
    END.  
    FIND FIRST kon_val  WHERE ROWID(kon_val) = till_rowid NO-LOCK NO-ERROR. 
    IF kon_val.ORD = 0 THEN kon_val.ORD = 1.
    RUN kondispstart_UI.
    RUN openbdynspec_UI IN brwproc[21].
    FIND FIRST kon_val  WHERE ROWID(kon_val) = till_rowid NO-LOCK NO-ERROR.  
 END PROCEDURE.            
  
PROCEDURE berid2_UI :
   DEFINE INPUT PARAMETER vad AS INTEGER NO-UNDO.
   IF vad = 1 THEN DO:
      FIND FIRST berid2temp WHERE berid2temp.NUM = kon_val.NUM NO-LOCK NO-ERROR.
      IF NOT AVAILABLE berid2temp THEN DO:
         CREATE berid2temp.
         ASSIGN

         berid2temp.AONR = valaonr
         berid2temp.OMRADE = valomrade
         berid2temp.NUM = kon_val.NUM.
      END.
      berid2temp.STOLPNR = FILL-IN-KARTR:SCREEN-VALUE.
   END.
   ELSE IF vad = 2 THEN DO:
      FIND FIRST berid2temp WHERE berid2temp.NUM = kon_val.NUM NO-LOCK NO-ERROR.
      IF AVAILABLE berid2temp THEN DO:
         FILL-IN-KARTR:SCREEN-VALUE = berid2temp.STOLPNR.
      END.
      ELSE DO:
         FILL-IN-KARTR:SCREEN-VALUE = "".
      END.
   END.
END PROCEDURE.

PROCEDURE andra_UI :
   FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.
   /*FOREID*/
   RUN berid2_UI (INPUT 1).
   IF Guru.Konstanter:varforetypval[32] = 1 OR Guru.Konstanter:varforetypval[32] = 2 OR Guru.Konstanter:varforetypval[32] = 4 THEN DO:
      FIND LAST kon_id WHERE kon_id.FRI2 = INTEGER(FILL-IN-IDNR2:SCREEN-VALUE) USE-INDEX FRI NO-LOCK NO-ERROR.    
   END.
   ELSE DO:   
      FIND FIRST kon_id WHERE kon_id.GRUPP = kon_val.GRUPP AND 
      kon_id.FORNR = FILL-IN-NR1:SCREEN-VALUE AND kon_id.LINNR = FILL-IN-NR2:SCREEN-VALUE AND 
      kon_id.NATNR = FILL-IN-NR3:SCREEN-VALUE AND kon_id.FRI1 = INTEGER(FILL-IN-IDNR1:SCREEN-VALUE) AND 
      kon_id.FRI2 = INTEGER(FILL-IN-IDNR2:SCREEN-VALUE) NO-LOCK NO-ERROR.
   END.   
   IF NOT AVAILABLE kon_id THEN DO:
      FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM EXCLUSIVE-LOCK NO-ERROR.
      /*FOREID*/
      IF Guru.Konstanter:varforetypval[32] = 1 OR Guru.Konstanter:varforetypval[32] = 2  THEN DO:
         ASSIGN
         kon_id.FRI2 = INTEGER(FILL-IN-IDNR2:SCREEN-VALUE)
         kon_id.FRI3 = FILL-IN-SUND:SCREEN-VALUE       
         kon_val.ID2 = STRING(kon_id.FRI2)
         kon_id.A = TOG_A:CHECKED
         kon_id.B = TOG_B:CHECKED
         kon_id.C = TOG_C:CHECKED.
         RUN extraf_UI (INPUT 1).
         RUN sparid_UI.
      END.
      ELSE IF Guru.Konstanter:varforetypval[32] = 4 THEN DO:         
         ASSIGN    
         kon_id.FORNR = FILL-IN-NR1:SCREEN-VALUE
         kon_id.LINNR = FILL-IN-NR2:SCREEN-VALUE
         kon_id.NATNR = FILL-IN-NR3:SCREEN-VALUE
         kon_id.FRI2 = INTEGER(FILL-IN-IDNR2:SCREEN-VALUE)
         kon_id.FRI3 = FILL-IN-SUND:SCREEN-VALUE       
         kon_val.ID2 = STRING(kon_id.FRI2)
         kon_id.A = TOG_A:CHECKED
         kon_id.B = TOG_B:CHECKED
         kon_id.C = TOG_C:CHECKED.
         RUN extraf_UI (INPUT 1).
         RUN sparid_UI.
      END.
      ELSE DO:           
         ASSIGN    
         kon_id.FORNR = FILL-IN-NR1:SCREEN-VALUE
         kon_id.LINNR = FILL-IN-NR2:SCREEN-VALUE
         kon_id.NATNR = FILL-IN-NR3:SCREEN-VALUE
         kon_id.FRI1 = INTEGER(FILL-IN-IDNR1:SCREEN-VALUE)
         kon_id.FRI2 = INTEGER(FILL-IN-IDNR2:SCREEN-VALUE)
         kon_id.FRI3 = FILL-IN-SUND:SCREEN-VALUE
         kon_id.A = TOG_A:CHECKED
         kon_id.B = TOG_B:CHECKED
         kon_id.C = TOG_C:CHECKED.
         IF kon_id.FRI2 = ? THEN kon_val.ID2 = kon_id.NATNR.
         ELSE kon_val.ID2 = STRING(kon_id.FRI2).        
         RUN extraf_UI (INPUT 1).
         RUN sparid_UI.
      END.   
   END.
   ELSE DO:                   
      FIND FIRST konstgrptemp WHERE konstgrptemp.KONSKOD = kon_val.GRUPP NO-LOCK NO-ERROR.
      IF AVAILABLE konstgrptemp THEN DO:
         MESSAGE "Det finns redan en " + konstgrptemp.BENAMNING + " med denna identifikation." 
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         RETURN NO-APPLY.
      END.
/*       RETURN ERROR. */
      felmedd = "".      
      RUN koppcheck_UI IN bervalapph (INPUT kon_val.GRUPP,OUTPUT felmedd).
      IF felmedd NE "" THEN DO:
         MESSAGE felmedd VIEW-AS ALERT-BOX TITLE "Meddelande".
         RETURN NO-APPLY.
      END.             
   END.
   
END PROCEDURE.

PROCEDURE extraf_UI :
   DEFINE INPUT PARAMETER vad AS INTEGER NO-UNDO.
   
   IF vad = 1 THEN DO:
      /*
      IF SUBSTRING(kon_val.EXTRA,1,1) = "+" THEN kon_val.EXTRA = "+" + " " + kon_id.FRI3.      
      ELSE kon_val.EXTRA = "  " + kon_id.FRI3.
      */      
      kon_val.EXTRA = "  " + kon_id.FRI3.
      ASSIGN
      kon_val.EXTRA1 = SUBSTRING(kon_val.EXTRA,3)
      kon_val.EXTRA2 = SUBSTRING(kon_val.EXTRA,1,1).
      SUBSTRING(kon_val.EXTRA3,1,1) = kon_val.EXTRA2.
   END.
   ELSE IF vad = 2 THEN DO:      
    /*  kon_rowid = ROWID(kon_val).        */
      /*
      IF LENGTH(kon_val.EXTRA) > 1 THEN kon_val.EXTRA = "+" + " " + SUBSTRING(kon_val.EXTRA,3).      
      ELSE kon_val.EXTRA = "+".
      */      
      ASSIGN
      counter = kon_val.NUM
      kon_val.EXTRA1 = SUBSTRING(kon_val.EXTRA,3)
      kon_val.EXTRA2 = SUBSTRING(kon_val.EXTRA,1,1). 
      SUBSTRING(kon_val.EXTRA3,1,1) = kon_val.EXTRA2.
      BRW_VAL:REFRESH() NO-ERROR.
      RUN rkomp_UI.
      RUN dselectfoc_UI (INPUT 21).      
   END.  
   RUN kondisp_UI.    
END PROCEDURE.



PROCEDURE btnkoppanm_UI :
   {muswait.i}           
   RUN anmark_UI.   
   {musarrow.i}
END PROCEDURE.

PROCEDURE anmark_UI :
   FIND kon_val WHERE ROWID(kon_val) = kon_rowid EXCLUSIVE-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:
      ASSIGN
      kon_val.ANMARK = ED_ANM:SCREEN-VALUE.  
      
   END.
END PROCEDURE.

PROCEDURE btnhmt_UI :
   kommando = "".
   IF CMB_JURP:SCREEN-VALUE NE "alla" THEN DO:
      FIND FIRST jurperstemp WHERE jurperstemp.NAMN = CMB_JURP:SCREEN-VALUE NO-LOCK NO-ERROR.
      kommando = " berfortemp.JUDID = '" + jurperstemp.JUDID + "'".      
   END.
   IF CMB_AVD:SCREEN-VALUE NE "alla" THEN DO:
      IF kommando NE " " THEN kommando = kommando + " AND ".
      FIND FIRST avdtemp WHERE avdtemp.AVDELNINGNAMN = CMB_AVD:SCREEN-VALUE NO-LOCK NO-ERROR. 
      kommando = kommando + " berfortemp.AVDNR = '" + STRING(avdtemp.AVDELNINGNR) + "'".
   END.
   IF CMB_OMR:SCREEN-VALUE NE "alla" THEN DO:
      IF kommando NE " " THEN kommando = kommando + " AND ".
      FIND FIRST omrtemp WHERE omrtemp.NAMN = CMB_OMR:SCREEN-VALUE NO-LOCK NO-ERROR.      
      kommando = kommando + "berfortemp.OMRADE = '" + omrtemp.OMRADE + "'".
   END.
   RUN setcolsortvar_UI IN brwproc[18] (INPUT kommando).
   RUN openbdynspec_UI IN brwproc[18]. 
END PROCEDURE.



PROCEDURE btnborta_UI :
   RUN selectfoc_UI (INPUT 25). 
   IF AVAILABLE bildbertemp THEN DO:         
      MESSAGE "Vill du ta bort Bild/Dokument: " + bildbertemp.NAMN + "?" VIEW-AS ALERT-BOX
      QUESTION BUTTONS YES-NO TITLE "Ta bort?" UPDATE svar.         
      IF svar THEN DO:          
         DELETE bildbertemp.
         RUN selnextprevrow_UI IN brwproc[25].
         RUN setcolsortvar_UI IN brwproc[25] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
         RUN openbdynspec_UI IN brwproc[25].   
         RUN lastselectdyn_UI IN brwproc[25].
         SUBSTRING(kon_val.EXTRA3,3,1) = "".
         RUN kondisp_UI.
         RUN sokkdispu_UI. 
         RUN openbdynspec_UI IN brwproc[21].
         RUN lastselectdyn_UI IN brwproc[21].
      END.      
   END.
   ELSE DO:
      MESSAGE "Det finns ingen Bild/Dokument att ta bort."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN.
   END.
END PROCEDURE.


PROCEDURE bortkalk_UI :
   
   ASSIGN
   antal_valda = BRW_KALK:NUM-SELECTED-ROWS
   antal_raknare = 1.
   DO WHILE antal_raknare LE antal_valda:
      RUN fselectfoc_UI (INPUT 8).
      IF AVAILABLE kalk_temp THEN DO:
         mtrl_rowid = ROWID(kalk_temp).                           
         MESSAGE "Vill du ta bort kod - " + kalk_temp.ARBKOD + " " + STRING(kalk_temp.LOPNR, Guru.Konstanter:varforetypchar[6]) + " " + kalk_temp.BENAMNING 
         VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE svar.         
         IF svar THEN DO:
            RUN enrensakalkbefb_UI IN nettoh (INPUT valaonr,INPUT valomrade, INPUT kalk_temp.ARBKOD,INPUT kalk_temp.LOPNR ).
            FIND FIRST kalk_temp WHERE ROWID(kalk_temp) = mtrl_rowid EXCLUSIVE-LOCK NO-ERROR.         
            DELETE kalk_temp.                     
         END.
         RUN valrattright_UI IN brwproc[8] (INPUT antal_raknare,INPUT svar,INPUT ROWID(kalk_temp)).
      END.
      antal_raknare = antal_raknare + 1.   
   END.  
   RUN refreshbrw_UI IN brwproc[8].
   RUN lastselectdyn_UI IN brwproc[8].
END PROCEDURE.



PROCEDURE bortmtrl_UI :
   ASSIGN
   antal_valda = BRW_MTRL:NUM-SELECTED-ROWS
   antal_raknare = 1.
   IF antal_valda = 1 THEN DO:
      MESSAGE "Vill du ta bort materiel - " + list_mtrl.ENR + " " + list_mtrl.BENAMNING 
      VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE svar.         
   END.
   ELSE DO:
      MESSAGE "Vill du ta bort markerat materiel" 
      VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE svar.         
   END.
   IF svar THEN DO:
      DO WHILE antal_raknare LE antal_valda:
         RUN fselectfoc_UI (INPUT 15).
         IF AVAILABLE list_mtrl THEN DO:
            RUN inkopkoll_UI (INPUT 5, OUTPUT musz, OUTPUT antalinkvar).
            IF musz = TRUE THEN DO:            
               MESSAGE "Ni kan inte ta bort detta materiel." list_mtrl.ENR " Det är inköpt via inköpsrutinen!"
               VIEW-AS ALERT-BOX TITLE "Meddelande".
               musz = FALSE.      
            END.
            ELSE DELETE list_mtrl.
         END.   
                              
         antal_raknare = antal_raknare + 1.   
      END.     
      antal_raknare = antal_raknare - 1.   
      RUN valrattright_UI IN brwproc[15] (INPUT antal_raknare,INPUT svar,INPUT ROWID(list_mtrl)).
      RUN setcolsortvar_UI IN brwproc[15] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
      RUN openbdynspec_UI IN brwproc[15].   
      RUN lastselectdyn_UI IN brwproc[15].
      RUN title_UI IN brwproc[15].
   END.     
END PROCEDURE.

PROCEDURE btnavb_UI :
   IF appprogok = TRUE THEN RUN ASSYNAPP.P (INPUT 2,OUTPUT appprogok,INPUT-OUTPUT apphandass).   

   RUN slut_UI.   
END PROCEDURE.

PROCEDURE slut_UI :
   slutaejnu = FALSE.
   IF musz = FALSE THEN DO:
      MESSAGE "OBS! Vill du spara dina ändringar?"
      VIEW-AS ALERT-BOX
      QUESTION BUTTONS YES-NO-CANCEL TITLE "Spara ändringar?" UPDATE svar.         
      IF svar THEN DO:
         avbrytvar = TRUE.
         APPLY "CHOOSE" TO BTN_OK.         
      END.
      ELSE IF NOT svar THEN DO:                          
         RUN rensakalkbefb_UI IN nettoh (INPUT valaonr,INPUT valomrade).
         RUN avsluta_UI IN huvprogh.
      END.                    
      ELSE DO:
         Guru.Konstanter:globanv = Guru.Konstanter:globanv.
         slutaejnu = TRUE.
         RETURN NO-APPLY.
      END. 
   END.
   ELSE DO:        
      musz = FALSE. 
      RUN avsluta_UI IN huvprogh.
   END.
   IF VALID-HANDLE(blobproch) THEN DO: 
      RUN deleteproc_UI IN blobproch.
      DELETE PROCEDURE blobproch NO-ERROR.
   END.
   
   
   IF VALID-HANDLE(BeredClasserStart) THEN DELETE PROCEDURE BeredClasserStart NO-ERROR.
   IF VALID-HANDLE(KalkClasserStart) THEN DELETE PROCEDURE KalkClasserStart NO-ERROR.
   /*
   IF VALID-HANDLE(logprogh) THEN DELETE PROCEDURE logprogh NO-ERROR.  
    */
END PROCEDURE.
PROCEDURE vcbhlevm_UI :
   
   RUN selectfoc_UI (INPUT 22).
   IF AVAILABLE mtrltemp THEN DO:
      Guru.GlobalaVariabler:LastEnr = mtrltemp.ENR. 
   END.   
END PROCEDURE.
PROCEDURE vbrwmtrl_UI :
  
   DEFINE VARIABLE kommen AS CHARACTER NO-UNDO.
   RUN selectfoc_UI (INPUT 15).          
   IF Guru.Konstanter:varforetypval[37] NE 0 THEN DO:      
      IF Guru.Konstanter:varforetypval[37] = 10 THEN kommen = "Artikel med grönfärgad benämning har kommentar. Markera artikel så visas kommentaren".
      IF Guru.Konstanter:varforetypval[37] = 11 THEN kommen = "Artikel med turkosfärgad benämning har kommentar. Markera artikel så visas kommentaren".
      IF AVAILABLE list_mtrl THEN DO:
         FIND FIRST kmtrltemp WHERE kmtrltemp.LEVKOD = list_mtrl.LEVKOD AND kmtrltemp.ENR = list_mtrl.ENR AND kmtrltemp.KALKNR = 0 NO-LOCK NO-ERROR.        
         IF AVAILABLE kmtrltemp THEN DO:
            IF kmtrltemp.OFFERT = TRUE THEN DO:
               ASSIGN FILL-IN-KOMM:SCREEN-VALUE = kmtrltemp.BENAMNING.      
            END.
            ELSE ASSIGN FILL-IN-KOMM:SCREEN-VALUE = kommen.                  
         END.
         ELSE ASSIGN FILL-IN-KOMM:SCREEN-VALUE = kommen.         
         
         FILL-IN-KOMM:HIDDEN = FALSE.
      END.      
   END.
   ELSE FILL-IN-KOMM:HIDDEN = TRUE.
END PROCEDURE.

PROCEDURE rowlbrwmtrl_UI :
   RUN rowlbrwmtrl_UI IN huvprogh (INPUT "MTRL").   
END PROCEDURE.

PROCEDURE sellma_UI :
                /*
   APPLY "ENTRY" TO  BRW_MTRL.
   APPLY "ENTRY" TO listmtrlantal.
   */
   
     
   
END PROCEDURE.

PROCEDURE entrylma_UI : 
   IF listmtrlantal:READ-ONLY = FALSE THEN entrymtrlantal = TRUE.
   RUN selectfoc_UI (INPUT 15).
        
END PROCEDURE.

PROCEDURE lmread_UI :
   DEFINE INPUT PARAMETER readvar AS LOGICAL NO-UNDO.
   
   IF snabbsparfix = 2 THEN listmtrlantal:READ-ONLY = TRUE. 
   ELSE listmtrlantal:READ-ONLY = readvar.
  
END PROCEDURE.


PROCEDURE leavemtrl_UI :
   IF entrymtrlantal = TRUE THEN DO:
      IF AVAILABLE list_mtrl THEN DO:
         IF listmtrlantal:SCREEN-VALUE = "?" OR listmtrlantal:SCREEN-VALUE = ? THEN DO:
            MESSAGE "Felaktigt ifyllt!"
            VIEW-AS ALERT-BOX TITLE "Meddelande".                   
            RETURN NO-APPLY.
         END.  
         IF DECIMAL(listmtrlantal:SCREEN-VALUE) > 99999 THEN DO:
            MESSAGE "Antalet är väldigt stort! " STRING(listmtrlantal:SCREEN-VALUE) " Är det rätt? " VIEW-AS ALERT-BOX 
            QUESTION BUTTONS YES-NO UPDATE antval1 AS LOGICAL.       
            CASE antval1:
               WHEN TRUE THEN DO:
                  antval1 = antval1.            
               END.
               WHEN FALSE THEN DO:
                  RETURN NO-APPLY.
               END.   
            END CASE. 
         END.    
         /*MESSAGE "1" list_mtrl.enr list_mtrl.ANTAL VIEW-AS ALERT-BOX.*/
         RUN inkopkoll_UI (INPUT 6, OUTPUT musz, OUTPUT antalinkvar).
         IF musz = TRUE THEN DO:            
            musz = FALSE.
            IF DECIMAL(listmtrlantal:SCREEN-VALUE) < antalinkvar THEN DO:
               MESSAGE "Ni kan inte andra antalet till lägre än " antalinkvar "! Den är inköpt via inköpsrutinen!"
               VIEW-AS ALERT-BOX TITLE "Meddelande". 
               listmtrlantal:SCREEN-VALUE = STRING(antalinkvar).          
               RETURN NO-APPLY.
            END.   
         END.
         list_mtrl.ANTAL = DECIMAL(listmtrlantal:SCREEN-VALUE).   
         /*MESSAGE "2" list_mtrl.enr list_mtrl.ANTAL VIEW-AS ALERT-BOX.    */
      END.
   END.
   entrymtrlantal = FALSE.
   /*
   FOR EACH list_mtrl BY list_mtrl.NUM BY list_mtrl.enr.
      MESSAGE list_mtrl.NUM list_mtrl.enr list_mtrl.antal VIEW-AS ALERT-BOX.
   END.
   */
END PROCEDURE.


PROCEDURE btnant_UI :
   RUN rowleave_UI.
   RUN antalmtrl_UI.    
END PROCEDURE.

PROCEDURE antalmtrl_UI :
   ASSIGN
   antal_valda = BRW_MTRL:NUM-SELECTED-ROWS
   antal_raknare = 1.
   DO WHILE antal_raknare LE antal_valda:
      RUN fselectfoc_UI (INPUT 15).
      IF AVAILABLE list_mtrl THEN DO:
         RUN LISTANTU.W (INPUT ROWID(list_mtrl)).
         RUN inkopkoll_UI (INPUT 6, OUTPUT musz, OUTPUT antalinkvar).
         IF musz = TRUE THEN DO:            
            musz = FALSE.
            IF list_mtrl.ANTAL < antalinkvar THEN DO:
               MESSAGE "Ni kan inte andra antalet till lägre än " antalinkvar "! Den är inköpt via inköpsrutinen!"
               VIEW-AS ALERT-BOX TITLE "Meddelande". 
               list_mtrl.ANTAL = antalinkvar.                                    
            END.
         END.    
         RUN setlastrowid_UI IN brwproc[15] (INPUT ROWID(list_mtrl)).      
      END.
      antal_raknare = antal_raknare + 1.  
   END.
   RUN refreshbrw_UI IN brwproc[15].
   RUN lastselectdyn_UI IN brwproc[15]. 
   RUN title_UI IN brwproc[15].
   {musarrow.i}
END PROCEDURE.



PROCEDURE btnanl_UI :
   {muswait.i}
   berval2 = TRUE.
   {AVBGOM2.I}     
   RUN BERANNU.W (INPUT FILL-IN-NR1:SCREEN-VALUE, INPUT FILL-IN-NR2:SCREEN-VALUE, INPUT FILL-IN-NR3:SCREEN-VALUE,INPUT valomrade).
   {AVBFRAM2.I}
   brw = FALSE.
   RUN anlagg_UI.
   {musarrow.i}
END PROCEDURE.

PROCEDURE rowleave_UI :
   IF RAD_VAL:SCREEN-VALUE = "4" THEN DO:        
      IF entrymtrlantal = TRUE THEN DO:
         IF AVAILABLE list_mtrl THEN DO:   
            APPLY "LEAVE" TO listmtrlantal.          
         END.
      END.
   END.
   
   
   RUN rowlbrwmtrl_UI IN huvprogh (INPUT "SMTRL2").   
END PROCEDURE.

PROCEDURE alltbort_UI :
   
   RUN inkopkoll_UI (INPUT 1, OUTPUT musz, OUTPUT antalinkvar).
   IF musz = TRUE THEN DO:            
      MESSAGE "Ni kan inte ta bort materiel på denna konstruktion. Den är inköpt via inköpsrutinen!"
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      musz = FALSE.
      RETURN.
   END.
   {muswait.i}
   MESSAGE "Vill du ta bort allt materiel på denna konstruktion?"
   VIEW-AS ALERT-BOX
   QUESTION BUTTONS YES-NO TITLE "Meddelande" UPDATE mtrlbortvar AS LOGICAL.         
   IF mtrlbortvar THEN DO:
   
      FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM:
         DELETE list_mtrl.      
      END.   
      CREATE list_mtrl.
      ASSIGN
      list_mtrl.NUM = kon_val.NUM
      list_mtrl.ENR = ""
      list_mtrl.BENAMNING = "Inget materiel"
      list_mtrl.ANTAL = 0
      list_mtrl.ENHET = ""
      list_mtrl.PRIS = 0                
      list_mtrl.LINKAB = FALSE.
      RUN refreshbrw_UI IN brwproc[15].
      RUN title_UI IN brwproc[15].
   END.
   {musarrow.i}
END PROCEDURE.


PROCEDURE franord_UI :
  FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.  
  RUN kondisp_UI.
  RUN sokkdispu_UI.
  RUN openbdynspec_UI IN brwproc[21].            
  RUN lastselectdyn_UI IN brwproc[21].
  RUN vcbrwval_UI.
END PROCEDURE.
PROCEDURE valpostbrwval_UI :
   DEFINE INPUT  PARAMETER val AS INTEGER NO-UNDO.
   FIND FIRST kon_display WHERE kon_display.NUM = val NO-LOCK NO-ERROR.
   FIND FIRST kon_val WHERE kon_val.NUM = val NO-LOCK NO-ERROR.
   kon_rowid = ROWID(kon_val).      
   kon_val.ANDRAD = "AND".
   RUN frame_UI (INPUT "ingen").
   RAD_VAL:SCREEN-VALUE = STRING(4).
   FRAME-MTRL:HIDDEN = FALSE.    
   RUN setlastrowid_UI IN brwproc[21] (INPUT ROWID(kon_display)).
   RUN lastselectdyn_UI IN brwproc[21].  
   RUN vcbrwval_UI.   
   {MARKKABVAL.I}
   IF enval = TRUE THEN DO:
      APPLY "CHOOSE" TO MBTN_MTRL.
   END.     
   RUN Movetotop_UI.
END PROCEDURE.
PROCEDURE Movetotop_UI :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
   RUN Movetotop_UI IN huvprogh.
END PROCEDURE.
PROCEDURE AfterAnvmtrl_UI :
   MBTN_ATERGA:HIDDEN = TRUE. 
   MBTN_ATERGA:TOOLTIP = "Återgå till Kabelskåp/Station".
   RUN PlaceraKnapp_UI.
   
END PROCEDURE.
PROCEDURE vcbrwstolp_UI :
  
   status-ok = BRW_STOLP:DESELECT-ROWS() NO-ERROR.  
  /*
   RUN selectfoc_UI (INPUT 24).
   */
   BRW_STOLP:TOOLTIP = "".
   
   FIND FIRST kmtrltemp WHERE kmtrltemp.LEVKOD = berstolptemp.LEVKOD AND kmtrltemp.ENR = berstolptemp.ENR AND kmtrltemp.KALKNR = 0 NO-LOCK NO-ERROR.        
   IF AVAILABLE kmtrltemp THEN DO:
      IF kmtrltemp.OFFERT = TRUE THEN DO:
         BRW_STOLP:TOOLTIP = kmtrltemp.BENAMNING.                      
      END.
      
   END.   
   
   RUN selectfoc_UI (INPUT 24).               
END PROCEDURE.
PROCEDURE vcbrwval_UI :
   {muswait.i}     
   DEFINE BUFFER listbuffanm FOR list_mtrl.
   DEFINE VARIABLE benvar AS CHARACTER NO-UNDO.
   RUN selectfoc_UI (INPUT 21). 
   RAD_KOMP:SCREEN-VALUE = "1".
   RUN friExtra1hread_UI (TRUE). 
   IF AVAILABLE kon_val THEN DO:
      kon_rowid = ROWID(kon_val).      
      kon_val.ANDRAD = "AND".
      IF rowkonval NE ROWID(kon_val) THEN DO:
         RUN rowcolsel_UI IN brwproc[21] (INPUT 12,INPUT 3).
         rowkonval = ROWID(kon_val).         
         BRW_VAL:REFRESH() NO-ERROR.
         APPLY "VALUE-CHANGED" TO RAD_KOMP.
         FIND FIRST kon_val WHERE ROWID(kon_val) = rowkonval NO-LOCK NO-ERROR.         
      END.
      rowkonval = ROWID(kon_val).
   END.   
   IF AVAILABLE kon_val THEN DO:
      BRW_VAL:TOOLTIP = "". 
      FIND FIRST listbuffanm  WHERE listbuffanm.NUM = kon_val.NUM NO-LOCK NO-ERROR.
      IF AVAILABLE listbuffanm THEN DO:
         FOR EACH listbuffanm WHERE listbuffanm.NUM = kon_val.NUM AND listbuffanm.ANTAL > 0 NO-LOCK BY ENR.
            FIND FIRST berstolptemp WHERE berstolptemp.LEVKOD = listbuffanm.LEVKOD AND berstolptemp.ENR = listbuffanm.ENR NO-LOCK NO-ERROR.
            IF AVAILABLE berstolptemp THEN DO:
               BRW_VAL:TOOLTIP = berstolptemp.BENAMNING.
               LEAVE.
            END.
         END.   
      END.
      ELSE DO:
         RUN stolpbenhmt_UI IN bervalapph (INPUT valomrade, INPUT valaonr, INPUT kon_val.NUM, OUTPUT benvar).
         BRW_VAL:TOOLTIP = benvar.
      END.
      IF BRW_VAL:TOOLTIP = ? THEN DO:
         FIND FIRST fri_temp WHERE fri_temp.NUM = kon_val.NUM AND fri_temp.SKAP NE "" NO-ERROR.
         IF AVAILABLE fri_temp THEN DO:
            BRW_VAL:TOOLTIP = fri_temp.SKAP.
         END.
      END.      
      IF BRW_VAL:TOOLTIP = ? THEN  BRW_VAL:TOOLTIP = kon_val.ANMARK. 
      ELSE BRW_VAL:TOOLTIP = BRW_VAL:TOOLTIP + " " + kon_val.ANMARK.
      kon_rowid = ROWID(kon_val).      
      FIND FIRST bbenamntemp WHERE bbenamntemp.KONSKOD = kon_val.GRUPP
      USE-INDEX KOD NO-LOCK NO-ERROR.
      /*KONLABEL.I*/   
      IF AVAILABLE bbenamntemp THEN DO:
         RUN konlabel_UI IN huvprogh 
            (INPUT "VAL",
             INPUT bbenamntemp.B1,
         INPUT bbenamntemp.B2,
         INPUT bbenamntemp.B3,
         INPUT bbenamntemp.B4,
         INPUT bbenamntemp.B5,
         INPUT bbenamntemp.B6,
         INPUT "",
         INPUT "",
         INPUT "",
         INPUT bbenamntemp.ID2). /* NY */
      END.    
      /*SLUT KONLABEL.I*/
      {MARKKABVAL.I}
      IF kon_val.GRUPP = 0 THEN DO: 
         FBTN_KSKAP:LOAD-IMAGE("BILDER\xbtn_skap.gif") NO-ERROR.
         FBTN_KSKAP:LABEL = "Kabelskåp".         
         FBTN_KSKAP:SELECTABLE = FALSE.
      END.
      ELSE IF enval = TRUE THEN DO:            
         FBTN_KSKAP:LOAD-IMAGE("BILDER\xbtn_skap2.gif") NO-ERROR.
         FBTN_KSKAP:SELECTABLE  = FALSE.
      END.
      ELSE DO:     
         FBTN_KSKAP:SELECTABLE = TRUE.  
      END.             
   END.
   ELSE DO:      
      RUN nolabel_UI IN huvprogh.
      RUN openbdynspec_UI IN brwproc[21].
      status-mus2 = SESSION:SET-WAIT-STATE("").
      RETURN.
   END.   
   IF RAD_VAL:SCREEN-VALUE = "2" THEN DO:
      RUN friExtra1hread_UI (FALSE). 
      FRAME-ID:HIDDEN = FALSE.
      RUN id_UI.
   END.   
   IF RAD_VAL:SCREEN-VALUE = "3" THEN DO:
      RUN laddanmpen_UI IN bervalapph (INPUT "BERE",INPUT STRING(kon_val.GRUPP), OUTPUT TABLE fastanmtemp).
      RUN setcolsortvar_UI  IN brwproc[1] (INPUT " WHERE PROGRAM = 'BERE' AND OMRADE = '" + STRING(kon_val.GRUPP) + "'").
      RUN openbdynspec_UI IN brwproc[1].
      ED_ANM:SCREEN-VALUE = kon_val.ANMARK.      
   END.
   IF RAD_VAL:SCREEN-VALUE = "5" THEN DO:     
      RUN selectfoc_UI (INPUT 21). 
      ASSIGN
      kon_rowid = ROWID(kon_val).
      FIND FIRST kalk_temp WHERE kalk_temp.NUM = kon_val.NUM NO-LOCK NO-ERROR. 
      IF NOT AVAILABLE kalk_temp THEN DO:              
         RUN nykabstart2_UI.                                                     
      END.            
      RUN setcolsortvar_UI IN brwproc[8] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
      RUN openbdynspec_UI IN brwproc[8].         
   END.
   IF RAD_VAL:SCREEN-VALUE = "6" THEN DO:     
      RUN selectfoc_UI (INPUT 21). 
      ASSIGN
      kon_rowid = ROWID(kon_val).      
      RUN setcolsortvar_UI IN brwproc[25] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
      RUN openbdynspec_UI IN brwproc[25].         
   END.
   IF RAD_VAL:SCREEN-VALUE = "4" THEN DO:
      {MARKKABVAL2.I}
      gommtrl = enval.
      IF gommtrl = TRUE THEN DO:
         IF sermtrl = FALSE THEN musz = musz.
         ELSE DO:
            ASSIGN   
            FILL-IN-SKAPMTRL:HIDDEN = TRUE
            FRAME-MTRL:HIDDEN = TRUE
            RECT-22:HIDDEN  = TRUE         
            sermtrl = FALSE.
            APPLY "CHOOSE" TO MBTN_MTRL.
         END.            
      END.
      ELSE DO:  
         IF AVAILABLE list_mtrl THEN DO:
            RUN setlastrowid_UI IN brwproc[15] (INPUT ROWID(list_mtrl)).       
         END.                   
         FILL-IN-SKAPMTRL:HIDDEN = TRUE.
         ASSIGN          
         RECT-22:HIDDEN  = FALSE.            
         IF sermtrl = TRUE THEN DO:
            FIND FIRST del_val WHERE del_val.NUM = kon_val.NUM
            NO-LOCK NO-ERROR.            
            IF NOT AVAILABLE del_val THEN DO:
               ASSIGN
               BTN_NY:HIDDEN  = FALSE
               BTN_ANTAL:HIDDEN  = FALSE
               BTN_TEXT:HIDDEN  = FALSE
               BTN_NOLL:HIDDEN  = FALSE
               BTN_ALLTMTRL:HIDDEN  = FALSE
               BTN_PAR:HIDDEN  = FALSE
               BTN_OVER:HIDDEN  = FALSE
               BTN_BACK:HIDDEN  = FALSE
               BTN_SATS:HIDDEN  = FALSE
               RAD_MTRL:HIDDEN  = FALSE
               BTN_LINKAB:HIDDEN  = FBTN_LIN:HIDDEN
               BTN_SPEC:HIDDEN  = FALSE.
               RUN lmread_UI (INPUT FALSE).
            END.
            ELSE DO:
               ASSIGN
               BTN_NY:HIDDEN  = TRUE
               BTN_ANTAL:HIDDEN  = TRUE
               BTN_TEXT:HIDDEN  = TRUE
               BTN_NOLL:HIDDEN  = TRUE
               BTN_ALLTMTRL:HIDDEN  = TRUE
               BTN_PAR:HIDDEN  = TRUE
               BTN_OVER:HIDDEN  = TRUE
               BTN_BACK:HIDDEN  = TRUE
               BTN_SATS:HIDDEN  = TRUE               
               BTN_LINKAB:HIDDEN  = FBTN_LIN:HIDDEN
               BTN_SPEC:HIDDEN  = TRUE.
               RUN lmread_UI (INPUT TRUE).               
            END.
         END.
         ELSE DO:            
            IF mtrlenable = FALSE THEN DO:
               ASSIGN
               BTN_ANTAL:HIDDEN  = FALSE
               BTN_NY:HIDDEN  = FALSE 
               BTN_PAR:HIDDEN  = FALSE 
               BTN_TEXT:HIDDEN  = FALSE 
               BTN_NOLL:HIDDEN  = FALSE 
               BTN_ALLTMTRL:HIDDEN  = FALSE
               BTN_SATS:HIDDEN  = FALSE 
               BRW_HLEV:HIDDEN  = FALSE 
               CMB_LEV:HIDDEN  = FALSE 
               BRW_SATS:HIDDEN  = FALSE 
               RAD_MTRL:HIDDEN  = FALSE 
               BTN_LEV:HIDDEN  = FALSE 
               FILL-IN-ENR:HIDDEN  = FALSE 
               FILL-IN-KOD:HIDDEN  = FALSE 
               BTN_LINKAB:HIDDEN  = FBTN_LIN:HIDDEN
               BTN_SPEC:HIDDEN  = FALSE.
               ASSIGN
               mtrlenable = TRUE
               BRW_HLEV:HIDDEN  = FALSE
               CMB_LEV:HIDDEN  = FALSE      
               FILL-IN-ENR:HIDDEN  = FALSE
               BTN_LINKAB:HIDDEN  = FBTN_LIN:HIDDEN
               BTN_SPEC:HIDDEN  = FALSE
               BRW_STOLP:HIDDEN  = TRUE
               BTN_LEV:HIDDEN  = TRUE
               FILL-IN-KOD:HIDDEN  = TRUE
               BRW_SATS:HIDDEN  = TRUE.               
            END.
            ELSE DO:
               RUN vcradmtrl_UI.
            END.
            ASSIGN
            BRW_MTRL:HIDDEN  = FALSE.
            FIND FIRST del_val WHERE del_val.NUM = kon_val.NUM
            NO-LOCK NO-ERROR.            
            IF NOT AVAILABLE del_val THEN DO:
               ASSIGN
               BTN_NY:HIDDEN  = FALSE
               BTN_ANTAL:HIDDEN  = FALSE
               BTN_TEXT:HIDDEN  = FALSE
               BTN_NOLL:HIDDEN  = FALSE
               BTN_ALLTMTRL:HIDDEN  = FALSE
               BTN_PAR:HIDDEN  = FALSE
               BTN_OVER:HIDDEN  = FALSE  
               BTN_BACK:HIDDEN  = FALSE
               BTN_SATS:HIDDEN  = FALSE
               RAD_MTRL:HIDDEN  = FALSE
               BTN_LINKAB:HIDDEN  = FBTN_LIN:HIDDEN
               BTN_SPEC:HIDDEN  = FALSE.
               RUN lmread_UI (INPUT FALSE).                              
            END.
            ELSE DO:
               ASSIGN
               BTN_NY:HIDDEN  = TRUE
               BTN_ANTAL:HIDDEN  = TRUE
               BTN_TEXT:HIDDEN  = TRUE
               BTN_NOLL:HIDDEN  = TRUE
               BTN_ALLTMTRL:HIDDEN  = TRUE
               BTN_PAR:HIDDEN  = TRUE
               BTN_OVER:HIDDEN  = TRUE 
               BTN_BACK:HIDDEN  = TRUE
               BTN_SATS:HIDDEN  = TRUE               
               BTN_LINKAB:HIDDEN  = FBTN_LIN:HIDDEN
               BTN_SPEC:HIDDEN  = TRUE.
               RUN lmread_UI (INPUT TRUE).                              
            END.
            APPLY "VALUE-CHANGED" TO RAD_MTRL.
            FRAME-MTRL:HIDDEN = FALSE.
            sermtrl = TRUE.
         END.   
         
         FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM NO-LOCK NO-ERROR. 
         IF NOT AVAILABLE list_mtrl THEN DO:             
            RUN nykabstart_UI.
         END.
         FIND FIRST kalk_temp WHERE kalk_temp.NUM = kon_val.NUM NO-LOCK NO-ERROR. 
         IF NOT AVAILABLE kalk_temp THEN DO:             
            RUN nykabstart2_UI.
         END.
         RUN setcolsortvar_UI IN brwproc[15] (INPUT " WHERE NUM = '" + STRING(kon_val.NUM) + "'").
         RUN openbdynspec_UI IN brwproc[15].           
         RUN title_UI IN brwproc[15].
         FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM USE-INDEX NUM
         NO-LOCK NO-ERROR.
         IF AVAILABLE kon_id THEN DO:
            IF kon_id.A = FALSE AND kon_id.B = FALSE AND kon_id.C = FALSE
            THEN BTN_PAR:HIDDEN  = TRUE.
            ELSE BTN_PAR:HIDDEN  = FALSE.
         END.
         ELSE BTN_PAR:HIDDEN  = TRUE.         
      END.           
   END.   
   IF RAD_VAL:SCREEN-VALUE = "2" THEN RUN idinfo_UI.
   IF RAD_VAL:SCREEN-VALUE = "4" THEN DO:
      RUN dselectfoc_UI (INPUT 15).       
      RELEASE list_mtrl NO-ERROR.
      /*här blir det entry*/
      RUN lastselectdyn_UI IN brwproc[15].
   END.
   RUN btnhidden_UI (INPUT "",INPUT 3). 
   /* ny deltemp */
   RUN fyllacmbdel_UI. 
   {musarrow.i}
END PROCEDURE.
   
PROCEDURE idinfo_UI :
   IF AVAILABLE kon_val THEN DO:
      FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM NO-LOCK NO-ERROR.
      IF AVAILABLE kon_id THEN DO:
         ASSIGN
         FILL-IN-NR1:SCREEN-VALUE = kon_id.FORNR 
         FILL-IN-NR2:SCREEN-VALUE = kon_id.LINNR
         FILL-IN-NR3:SCREEN-VALUE = kon_id.NATNR.
      END.
      ELSE DO:
         FIND LAST kon_id WHERE kon_id.GRUPP = kon_val.GRUPP AND
         kon_id.FRI2 NE ? USE-INDEX FRI NO-LOCK NO-ERROR.
         IF AVAILABLE kon_id THEN DO: 
            ASSIGN 
            FILL-IN-NR1:SCREEN-VALUE = kon_id.FORNR 
            FILL-IN-NR2:SCREEN-VALUE = kon_id.LINNR
            FILL-IN-NR3:SCREEN-VALUE = kon_id.NATNR.
         END.
         ELSE DO:
            FIND LAST kon_id USE-INDEX FRI NO-LOCK NO-ERROR.
            IF AVAILABLE kon_id THEN DO:
               ASSIGN 
               FILL-IN-NR1:SCREEN-VALUE = kon_id.FORNR 
               FILL-IN-NR2:SCREEN-VALUE = kon_id.LINNR
               FILL-IN-NR3:SCREEN-VALUE = kon_id.NATNR.
            END.
            ELSE DO:
               ASSIGN
               FILL-IN-NR1:SCREEN-VALUE  = ""
               FILL-IN-NR2:SCREEN-VALUE  = ""
               FILL-IN-NR3:SCREEN-VALUE  = "".
            END.            
         END.
      END.
      /*FOREID*/ 
      IF Guru.Konstanter:varforetypval[32] = 1 OR Guru.Konstanter:varforetypval[32] = 2 OR Guru.Konstanter:varforetypval[32] = 3  THEN DO: 
         ASSIGN      
         FILL-IN-TAB1:HIDDEN = TRUE 
         FILL-IN-TAB2:HIDDEN = TRUE 
         FILL-IN-TAB3:HIDDEN = TRUE
         BTN_ANL:HIDDEN = TRUE
         FILL-IN-NR1:HIDDEN = TRUE
         FILL-IN-NR2:HIDDEN = TRUE
         FILL-IN-NR3:HIDDEN = TRUE.
      END.   
      IF Guru.Konstanter:varforetypval[32] = 5  THEN DO: 
         ASSIGN      
         FILL-IN-TAB1:HIDDEN = TRUE 
         FILL-IN-TAB2:HIDDEN = TRUE 
         BTN_ANL:HIDDEN = TRUE
         FILL-IN-NR1:HIDDEN = TRUE
         FILL-IN-NR2:HIDDEN = TRUE.         
      END.      
   END.
END PROCEDURE.


PROCEDURE initsok_UI :
   DEFINE INPUT  PARAMETER vad AS INTEGER    NO-UNDO. /*enr/ben*/
   DEFINE INPUT PARAMETER sokpa AS CHARACTER NO-UNDO.
   DEFINE VARIABLE orgfraga AS CHARACTER NO-UNDO.
   
   IF vad = 1 THEN DO:
      IF RAD_MTRL:SCREEN-VALUE = "1" THEN DO:
         IF satsvar = FALSE THEN DO:
            orgfraga = " WHERE KALKNR = " + STRING(0) + " AND LEVKOD = '" + STRING(vald_lev) + "'".
            /*orgfraga = " WHERE KALKNR = " + STRING(0) + " AND LEVKOD = '" + STRING(vald_lev) + "' USE-INDEX LEV".*/
            IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE KALKNR = " + STRING(0) + " USE-INDEX KALKNR".
            tth = TEMP-TABLE mtrltemp:HANDLE.
            EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
            CREATE valsoktemp.
            ASSIGN 
            valsoktemp.SOKCHAR[1] = "MTRL"     /*Skarp tabell*/
            valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
            valsoktemp.SOKCHAR[3] = "BENAMNING" /*sökfält*/
            valsoktemp.SOKCHAR[4] = "MTRLROW"  /*temptabells faltnamn för rowid*/
            valsoktemp.SOKCHAR[5] = sokpa.      /*sök på*/       
            RUN sokhmt_UI IN  brwproc[22] (INPUT TABLE valsoktemp). 
         END.
         ELSE DO:
            orgfraga = " WHERE SATS = TRUE AND LEVKOD = '" + STRING(vald_lev) + "'".
            IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE SATS = TRUE ".
            /*
            orgfraga = " WHERE SATS = TRUE AND LEVKOD = '" + STRING(vald_lev) + "' USE-INDEX KOD ".
            */
            tth = TEMP-TABLE satstemp:HANDLE.
            EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
            CREATE valsoktemp.
            ASSIGN 
            valsoktemp.SOKCHAR[1] = "SATS"     /*Skarp tabell*/
            valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
            valsoktemp.SOKCHAR[3] = "BENAMNING"
            valsoktemp.SOKCHAR[4] = "SATSROW"  /*temptabells faltnamn för rowid*/
            valsoktemp.SOKCHAR[5] = sokpa.      /*temptabells unika sökfaltnamn om flera skriv "aonr,delnr"*/
            RUN sokhmt_UI IN brwproc[23] (INPUT TABLE valsoktemp).                  
         END.      
      END.
      ELSE IF RAD_MTRL:SCREEN-VALUE = "2" THEN DO:
        /*SÖKER PÅ ANNAT SÄTT
         orgfraga = " WHERE STOLPE = TRUE ".
         IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE STOLPE = TRUE ".
         /*orgfraga = " WHERE STOLPE = TRUE USE-INDEX STOLPE ".*/
         tth = TEMP-TABLE berstolptemp:HANDLE.
         EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
         CREATE valsoktemp.
         ASSIGN 
         valsoktemp.SOKCHAR[1] = "berstolptemp"     /*Skarp tabell*/
         valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
         valsoktemp.SOKCHAR[3] = "BENAMNING"
         valsoktemp.SOKCHAR[4] = ""                 /*temptabells faltnamn för rowid*/
         valsoktemp.SOKCHAR[5] = sokpa.      /*temptabells unika sökfaltnamn om flera skriv "aonr,delnr"*/
         RUN sokhTT_UI IN brwproc[24] (INPUT TABLE valsoktemp).
          /*måste öppnas två gånger om sorteringen ska funka*/  
         IF Guru.Konstanter:globnetprissortvar = 1 THEN RUN openbdynspec_UI IN brwproc[24].
         */                          
      END.
      ELSE IF RAD_MTRL:SCREEN-VALUE = "3" THEN DO:
         /*SÖKER PÅ ANNAT SÄTT
         orgfraga = " WHERE STOLPE = FALSE ".
         IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE STOLPE = FALSE".
         /*orgfraga = " WHERE STOLPE = FALSE USE-INDEX STOLPE ".*/
         tth = TEMP-TABLE berstolptemp:HANDLE.
         EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
         CREATE valsoktemp.
         ASSIGN 
         valsoktemp.SOKCHAR[1] = "berstolptemp"     /*Skarp tabell*/
         valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
         valsoktemp.SOKCHAR[3] = "BENAMNING"
         valsoktemp.SOKCHAR[4] = ""                 /*temptabells faltnamn för rowid*/
         valsoktemp.SOKCHAR[5] = sokpa.      /*temptabells unika sökfaltnamn om flera skriv "aonr,delnr"*/
         RUN sokhTT_UI IN brwproc[24] (INPUT TABLE valsoktemp).
          /*måste öppnas två gånger om sorteringen ska funka*/    
         IF Guru.Konstanter:globnetprissortvar = 1 THEN RUN openbdynspec_UI IN brwproc[24].
         */                        
      END.
   END. 
   IF vad = 2 THEN DO:
      IF RAD_MTRL:SCREEN-VALUE = "1" THEN DO:
         IF satsvar = FALSE THEN DO:
            orgfraga = " WHERE KALKNR = " + STRING(0) + " AND LEVKOD = '" + STRING(vald_lev) + "'".
            IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE KALKNR = " + STRING(0) + " USE-INDEX KALKNR".   
            tth = TEMP-TABLE mtrltemp:HANDLE.
            EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
            CREATE valsoktemp.
            ASSIGN 
            valsoktemp.SOKCHAR[1] = "MTRL"     /*Skarp tabell*/
            valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
            valsoktemp.SOKCHAR[3] = "ENR" /*sökfält*/
            valsoktemp.SOKCHAR[4] = "MTRLROW"  /*temptabells faltnamn för rowid*/
            valsoktemp.SOKCHAR[5] = sokpa.      /*sök på*/       
            RUN sokhmt_UI IN  brwproc[22] (INPUT TABLE valsoktemp). 
         END.
         ELSE DO:
            orgfraga = " WHERE SATS = TRUE AND LEVKOD = '" + STRING(vald_lev) + "'".
            IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE SATS = TRUE ".            
            tth = TEMP-TABLE satstemp:HANDLE.
            EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
            CREATE valsoktemp.
            ASSIGN 
            valsoktemp.SOKCHAR[1] = "SATS"     /*Skarp tabell*/
            valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
            valsoktemp.SOKCHAR[3] = "KOD"
            valsoktemp.SOKCHAR[4] = "SATSROW"  /*temptabells faltnamn för rowid*/
            valsoktemp.SOKCHAR[5] = sokpa.      /*temptabells unika sökfaltnamn om flera skriv "aonr,delnr"*/
            RUN sokhmt_UI IN brwproc[23] (INPUT TABLE valsoktemp).                  
         END.      
      END.
      ELSE IF RAD_MTRL:SCREEN-VALUE = "2" THEN DO:
         /*SÖKER PÅ ANNAT SÄTT
         orgfraga = " WHERE STOLPE = TRUE ".
         IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE STOLPE = TRUE ".
         /*orgfraga = " WHERE STOLPE = TRUE USE-INDEX STOLPE ".*/
         tth = TEMP-TABLE berstolptemp:HANDLE.
         EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
         CREATE valsoktemp.
         ASSIGN 
         valsoktemp.SOKCHAR[1] = "berstolptemp"     /*Skarp tabell*/
         valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
         valsoktemp.SOKCHAR[3] = "ENR"
         valsoktemp.SOKCHAR[4] = ""                 /*temptabells faltnamn för rowid*/
         valsoktemp.SOKCHAR[5] = sokpa.      /*temptabells unika sökfaltnamn om flera skriv "aonr,delnr"*/
        
         RUN sokhTT_UI IN brwproc[24] (INPUT TABLE valsoktemp).
          /*måste öppnas två gånger om sorteringen ska funka*/    
         IF Guru.Konstanter:globnetprissortvar = 1 THEN RUN openbdynspec_UI IN brwproc[24].  
         */                   
      END.
      ELSE IF RAD_MTRL:SCREEN-VALUE = "3" THEN DO:
         /*SÖKER PÅ ANNAT SÄTT
         orgfraga = " WHERE STOLPE = FALSE ".
         IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE STOLPE = FALSE ".
         /*orgfraga = " WHERE STOLPE = FALSE USE-INDEX STOLPE ".*/
         tth = TEMP-TABLE berstolptemp:HANDLE.
         EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
         CREATE valsoktemp.
         ASSIGN 
         valsoktemp.SOKCHAR[1] = "berstolptemp"     /*Skarp tabell*/
         valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
         valsoktemp.SOKCHAR[3] = "ENR"
         valsoktemp.SOKCHAR[4] = ""                 /*temptabells faltnamn för rowid*/
         valsoktemp.SOKCHAR[5] = sokpa.      /*temptabells unika sökfaltnamn om flera skriv "aonr,delnr"*/
         RUN sokhTT_UI IN brwproc[24] (INPUT TABLE valsoktemp).
          /*måste öppnas två gånger om sorteringen ska funka*/                   
         IF Guru.Konstanter:globnetprissortvar = 1 THEN RUN openbdynspec_UI IN brwproc[24].
         */
      END.
   END.
   IF vad = 3 THEN DO:
      orgfraga = " WHERE KALKNR = " + STRING(0) + " AND LEVKOD = '" + STRING(vald_lev) + "'".
      IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE KALKNR = " + STRING(0) + " USE-INDEX KALKNR".
      tth = TEMP-TABLE mtrltemp:HANDLE.
      EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
      CREATE valsoktemp.
      ASSIGN 
      valsoktemp.SOKCHAR[1] = "MTRL"     /*Skarp tabell*/
      valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
      valsoktemp.SOKCHAR[3] = "ENR"      /*sökfält*/
      valsoktemp.SOKCHAR[4] = "MTRLROW"  /*temptabells faltnamn för rowid*/
      valsoktemp.SOKCHAR[5] = sokpa.      /*sök på*/       
      RUN sokhmt_UI IN  brwproc[22] (INPUT TABLE valsoktemp). 
   END.
  
   
END PROCEDURE.

PROCEDURE id_UI :
    
   FIND FIRST parstolptemp NO-LOCK NO-ERROR.
   IF AVAILABLE parstolptemp THEN DO:
      ASSIGN
      FILL-IN-A:SCREEN-VALUE = parstolptemp.A
      FILL-IN-B:SCREEN-VALUE = parstolptemp.B
      FILL-IN-C:SCREEN-VALUE = parstolptemp.C.
   END.   
   /*FOREID*/
   IF Guru.Konstanter:varforetypval[32] = 2 THEN DO: 
      ASSIGN
      FILL-IN-A:HIDDEN = TRUE
      FILL-IN-B:HIDDEN = TRUE
      FILL-IN-C:HIDDEN = TRUE.
   END.
   FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.  
   FIND FIRST bbenamntemp WHERE bbenamntemp.KONSKOD = kon_val.GRUPP NO-LOCK NO-ERROR.   
   RUN berid2_UI (INPUT 2).
   IF kon_val.ID = TRUE THEN DO: 
      FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM EXCLUSIVE-LOCK NO-ERROR.
      ASSIGN
      FILL-IN-NR1:SCREEN-VALUE = kon_id.FORNR 
      FILL-IN-NR2:SCREEN-VALUE = kon_id.LINNR
      FILL-IN-NR3:SCREEN-VALUE = kon_id.NATNR
      FILL-IN-IDNR1:SCREEN-VALUE = STRING(kon_id.FRI1)
      FILL-IN-IDNR2:SCREEN-VALUE = STRING(kon_id.FRI2)
      FILL-IN-SUND:SCREEN-VALUE = STRING(kon_id.FRI3)
      TOG_A:CHECKED = kon_id.A
      TOG_B:CHECKED = kon_id.B
      TOG_C:CHECKED = kon_id.C. 
      
      RUN sparid_UI.             
   END.
   ELSE DO:   
      /*FOREID*/
      IF Guru.Konstanter:varforetypval[32] = 1 OR Guru.Konstanter:varforetypval[32] = 2  THEN DO:
         FIND LAST kon_id WHERE kon_id.FRI2 NE ? USE-INDEX FRI NO-LOCK NO-ERROR.         
         IF AVAILABLE kon_id THEN DO:           
            ASSIGN         
            FILL-IN-IDNR2:SCREEN-VALUE = STRING(kon_id.FRI2 + 1)
            FILL-IN-SUND:SCREEN-VALUE = " ".
         END.
         ELSE DO:            
            IF bbenamntemp.ID2 NE "" THEN ASSIGN FILL-IN-IDNR2:SCREEN-VALUE = "1".              
         END.
      END.
      ELSE IF Guru.Konstanter:varforetypval[32] = 4 THEN DO:
         FIND LAST kon_id WHERE kon_id.FRI2 NE ? USE-INDEX FRI NO-LOCK NO-ERROR.         
         IF AVAILABLE kon_id THEN DO:                       
            ASSIGN 
            FILL-IN-NR1:SCREEN-VALUE = kon_id.FORNR 
            FILL-IN-NR2:SCREEN-VALUE = kon_id.LINNR
            FILL-IN-NR3:SCREEN-VALUE = kon_id.NATNR
            FILL-IN-IDNR2:SCREEN-VALUE = STRING(kon_id.FRI2 + 1)
            FILL-IN-SUND:SCREEN-VALUE = " ".
         END.
         ELSE DO:            
            IF bbenamntemp.ID2 NE "" THEN ASSIGN FILL-IN-IDNR2:SCREEN-VALUE = "1".              
         END.
      END.
      ELSE DO:            
         FIND LAST kon_id WHERE kon_id.GRUPP = kon_val.GRUPP AND
         kon_id.FRI2 NE ? USE-INDEX FRI NO-LOCK NO-ERROR.
         IF AVAILABLE kon_id THEN DO: 
            ASSIGN 
            FILL-IN-NR1:SCREEN-VALUE = kon_id.FORNR 
            FILL-IN-NR2:SCREEN-VALUE = kon_id.LINNR
            FILL-IN-NR3:SCREEN-VALUE = kon_id.NATNR
            FILL-IN-IDNR1:SCREEN-VALUE = STRING(kon_id.FRI1)
            FILL-IN-IDNR2:SCREEN-VALUE = STRING(kon_id.FRI2 + 1)
            FILL-IN-SUND:SCREEN-VALUE = " ".
         END.
         ELSE DO: 
            IF AVAILABLE bbenamntemp THEN DO:
               IF bbenamntemp.ID1 NE "" THEN ASSIGN FILL-IN-IDNR1:SCREEN-VALUE = "1".                          
               IF bbenamntemp.ID2 NE "" THEN ASSIGN FILL-IN-IDNR2:SCREEN-VALUE = "1".                 
            END.
         END.   
      END.   
   END.   
   
   FIND FIRST annamntemp NO-LOCK NO-ERROR.
   ASSIGN
   FILL-IN-TAB1:SCREEN-VALUE = annamntemp.TAB1
   FILL-IN-TAB2:SCREEN-VALUE = annamntemp.TAB2
   FILL-IN-TAB3:SCREEN-VALUE = annamntemp.TAB3.
      /*
   FILL-IN-TAB1:HIDDEN = FALSE
   FILL-IN-TAB2:HIDDEN = FALSE
   FILL-IN-TAB3:HIDDEN = FALSE
   BTN_ANL:HIDDEN = FALSE
   */
   IF AVAILABLE bbenamntemp THEN DO:
      IF bbenamntemp.ID1 = "" THEN DO:        
         ASSIGN
         FILL-IN-IDNR1:SCREEN-VALUE = ?.
         ASSIGN
         FILL-IN-IDNR1LABEL:HIDDEN = TRUE
         FILL-IN-IDNR1:HIDDEN = TRUE
         FILL-IN-ID1:HIDDEN  = TRUE.  
      END.  
      ELSE DO:   
         
         FILL-IN-ID1:SCREEN-VALUE = bbenamntemp.ID1.
         FILL-IN-IDNR1LABEL:SCREEN-VALUE = FILL-IN-ID1:SCREEN-VALUE. 
         ASSIGN
         FILL-IN-IDNR1LABEL:HIDDEN = FALSE
         FILL-IN-IDNR1:HIDDEN = FALSE
         FILL-IN-ID1:HIDDEN  = FALSE.        
      END.   
      IF bbenamntemp.ID2 = "" THEN DO:  
         ASSIGN
         FILL-IN-IDNR2:SCREEN-VALUE = ?.
         ASSIGN
         FILL-IN-IDNR2LABEL:HIDDEN = TRUE 
         FILL-IN-IDNR2:HIDDEN = TRUE
         FILL-IN-ID2:HIDDEN = TRUE.  
      END.                
      ELSE DO:   
         
         FILL-IN-ID2:SCREEN-VALUE = bbenamntemp.ID2.
         ASSIGN
         FILL-IN-IDNR2LABEL:HIDDEN = FALSE
         FILL-IN-IDNR2:HIDDEN = FALSE
         FILL-IN-ID2:HIDDEN  = FALSE.        
         
      END.    
   END.
   ASSIGN
   BRW_TAB1:HIDDEN = TRUE   
   BRW_TAB2:HIDDEN = TRUE
   BRW_TAB3:HIDDEN = TRUE
   CMB_JURP:HIDDEN = TRUE
   CMB_AVD:HIDDEN = TRUE
   CMB_OMR:HIDDEN = TRUE
   BTN_HMT:HIDDEN = TRUE.
   brw = FALSE.
   /*FOREID */  
   
   BTN_NASTKONID:COLUMN = BTN_KOPPID:COLUMN + BTN_KOPPID:WIDTH + 1.
   BTN_BORTKOPPID:COLUMN = BTN_NASTKONID:COLUMN + BTN_NASTKONID:WIDTH + 1. 
   IF Guru.Konstanter:varforetypval[32] = 1 OR Guru.Konstanter:varforetypval[32] = 2 OR Guru.Konstanter:varforetypval[32] = 3 OR Guru.Konstanter:varforetypval[32] = 4 OR Guru.Konstanter:varforetypval[32] = 5 THEN DO:
      brw = FALSE.
      DEFINE VARIABLE colvar AS DECIMAL NO-UNDO.
      colvar = 50.

      IF FILL-IN-IDNR1:COLUMN <= 100 THEN.
      ELSE DO:
        
         ASSIGN
         FILL-IN-ID1:COLUMN =  FILL-IN-TAB3:COLUMN + FILL-IN-TAB3:WIDTH + 25
         FILL-IN-ID2:COLUMN =  FILL-IN-TAB3:COLUMN + FILL-IN-TAB3:WIDTH + 25
         BTN_KOPPID:COLUMN =  FILL-IN-TAB3:COLUMN + FILL-IN-TAB3:WIDTH + 25
         BTN_NASTKONID:COLUMN = BTN_KOPPID:COLUMN + BTN_KOPPID:WIDTH + 5
         TOG_A:COLUMN     = FILL-IN-TAB3:COLUMN + FILL-IN-TAB3:WIDTH + 25
         TOG_B:COLUMN     = TOG_A:COLUMN + 5
         TOG_C:COLUMN     = TOG_B:COLUMN + 5
         TOG_AS:COLUMN     = TOG_C:COLUMN + 5
         FILL-IN-A:COLUMN = TOG_A:COLUMN 
         FILL-IN-B:COLUMN = TOG_B:COLUMN
         FILL-IN-C:COLUMN = TOG_C:COLUMN.
         BTN_BORTKOPPID:COLUMN = BTN_NASTKONID:COLUMN + BTN_NASTKONID:WIDTH + 5.
         RUN movefillin_UI (INPUT FILL-IN-IDNR1, INPUT FILL-IN-IDNR1:ROW, INPUT FILL-IN-ID1:COLUMN).
         RUN movefillin_UI (INPUT FILL-IN-IDNR2, INPUT FILL-IN-IDNR2:ROW, INPUT FILL-IN-ID2:COLUMN).
         RUN movefillin_UI (INPUT FILL-IN-SUND, INPUT FILL-IN-SUND:ROW, INPUT FILL-IN-ID2:COLUMN).
         RUN movefillin_UI (INPUT FILL-IN-KARTR, INPUT FILL-IN-KARTR:ROW, INPUT FILL-IN-ID2:COLUMN).        
         RUN WIDGETDEFVERSION.P (INPUT 3, INPUT FILL-IN-KARTR).
         RUN movefillin_UI (INPUT CMB_DEL, INPUT CMB_DEL:ROW, INPUT FILL-IN-ID2:COLUMN).  
         RUN WIDGETDEFVERSION.P (INPUT 3, INPUT CMB_DEL).
        
        
        /*Anders Olsson Elpool i Umeå AB  27 feb 2018 10:46:20 
         FILL-IN-TAB3 LÄGGER SIG ÖVER KART REF
         
         ASSIGN
         FILL-IN-ID1:COLUMN =  99 - colvar
         FILL-IN-ID2:COLUMN =  99 - colvar
         BTN_KOPPID:COLUMN =  108.25 - (colvar + 2)
         TOG_A:COLUMN     = 109.75 - (colvar + 2)
         TOG_B:COLUMN     = 113.5  - (colvar + 2)
         TOG_C:COLUMN     = 117.25 - (colvar + 2)
         TOG_AS:COLUMN     = 122.25 - (colvar + 2)
         FILL-IN-A:COLUMN = 109.75 - (colvar + 2)
         FILL-IN-B:COLUMN = 113.5  - (colvar + 2)
         FILL-IN-C:COLUMN = 117.25 - (colvar + 2).
         BTN_BORTKOPPID:COLUMN = BTN_KOPPID:COLUMN + BTN_KOPPID:WIDTH + 5. 
         RUN movefillin_UI (INPUT FILL-IN-IDNR1, INPUT FILL-IN-IDNR1:ROW, INPUT 105.75 - colvar).        
         RUN movefillin_UI (INPUT FILL-IN-IDNR2, INPUT FILL-IN-IDNR2:ROW, INPUT 105.75 - colvar).
         RUN movefillin_UI (INPUT FILL-IN-SUND, INPUT FILL-IN-SUND:ROW, INPUT 105.75 - colvar).
         RUN movefillin_UI (INPUT FILL-IN-KARTR, INPUT FILL-IN-KARTR:ROW, INPUT 105.75 - colvar).        
         RUN WIDGETDEFVERSION.P (INPUT 3, INPUT FILL-IN-KARTR).
         RUN movefillin_UI (INPUT CMB_DEL, INPUT CMB_DEL:ROW, INPUT 105.75 - colvar).  
         RUN WIDGETDEFVERSION.P (INPUT 3, INPUT CMB_DEL).
        */ 
         FILL-IN-SUNDLABEL:WIDTH = LENGTH(TRIM(FILL-IN-SUNDLABEL:SCREEN-VALUE)).         
         ASSIGN
         FILL-IN-IDNR1LABEL:COLUMN =  FILL-IN-IDNR1:COLUMN - (FILL-IN-IDNR1LABEL:WIDTH)
         FILL-IN-IDNR2LABEL:COLUMN =  FILL-IN-IDNR2:COLUMN - (FILL-IN-IDNR2LABEL:WIDTH). 
         FILL-IN-SUNDLABEL :COLUMN =  FILL-IN-SUND:COLUMN  - (FILL-IN-SUNDLABEL :WIDTH).          
         
      END.         
      
   END.
   ELSE DO:            
      RUN anlagg_UI.
   END.  
   RUN PlaceraKnapp_UI.    
END PROCEDURE.

PROCEDURE anlagg_UI :
   FIND FIRST berfortemp NO-LOCK NO-ERROR.
   IF NOT AVAILABLE berfortemp THEN DO:
      {muswait.i}
      EMPTY TEMP-TABLE berfortemp NO-ERROR. 
      EMPTY TEMP-TABLE berlinjetemp NO-ERROR. 
      EMPTY TEMP-TABLE bernattemp NO-ERROR. 
      RUN berforladda_UI IN bervalapph (OUTPUT TABLE berfortemp,
                                         OUTPUT TABLE berlinjetemp,
                                         OUTPUT TABLE bernattemp).
      {musarrow.i}
   END.
   IF brw = FALSE THEN DO:      
      FIND FIRST berfortemp NO-LOCK NO-ERROR.
      IF AVAILABLE berfortemp THEN DO:         
         ASSIGN 
         brw = TRUE
         BRW_TAB1:HIDDEN = FALSE
         BRW_TAB2:HIDDEN = FALSE
         BRW_TAB3:HIDDEN = FALSE
         CMB_JURP:HIDDEN = FALSE
         CMB_AVD:HIDDEN = FALSE
         CMB_OMR:HIDDEN = FALSE
         BTN_HMT:HIDDEN = FALSE.
         IF globforetag = "sund" OR globforetag = "SNAT" OR globforetag = "SNAT"  OR globforetag = "elpa" THEN DO:
            CMB_JURP:HIDDEN = TRUE.   
         END.
         APPLY "CHOOSE" TO BTN_HMT.
         IF AVAILABLE berfortemp THEN DO:
            RUN setcolsortvar_UI IN brwproc[19] (INPUT " WHERE FORNR = '" + STRING(berfortemp.FORNR) + "'").
            RUN openbdynspec_UI IN brwproc[19].
            FIND FIRST berlinjetemp WHERE 
            berlinjetemp.FORNR = berfortemp.FORNR USE-INDEX FORNR NO-LOCK NO-ERROR.
            IF AVAILABLE berlinjetemp THEN DO:
               RUN setcolsortvar_UI IN brwproc[20] 
               (INPUT " WHERE FORNR = '" + STRING(berfortemp.FORNR) + "' AND LINNR = '" + STRING(berlinjetemp.LINNR) + "'").
               RUN openbdynspec_UI IN brwproc[20].            
            END.
            ELSE DO:
               RUN setcolsortvar_UI IN brwproc[20] (INPUT " WHERE FORNR = '" + STRING(valford) + "' AND LINNR = '" + STRING("") + "' ").
               RUN openbdynspec_UI IN brwproc[20].           
            END.
         END.
         IF FILL-IN-NR1:SCREEN-VALUE NE " " THEN DO: 
            FIND FIRST berfortemp WHERE berfortemp.FORNR = FILL-IN-NR1:SCREEN-VALUE NO-LOCK NO-ERROR.
         END.
         ELSE DO:
            FIND FIRST berfortemp NO-LOCK NO-ERROR.
         END. 
         IF AVAILABLE berfortemp THEN DO:
            RUN setlastrowid_UI IN brwproc[18] (INPUT ROWID(berfortemp)).
            RUN lastselectdyn_UI IN brwproc[18].        
         END.                     
      END. 
      ELSE DO:
         ASSIGN
         brw = FALSE
         BRW_TAB1:HIDDEN = TRUE
         BRW_TAB2:HIDDEN = TRUE
         BRW_TAB3:HIDDEN = TRUE
         CMB_JURP:HIDDEN = TRUE
         CMB_AVD:HIDDEN = TRUE
         CMB_OMR:HIDDEN = TRUE
         BTN_HMT:HIDDEN = TRUE.
      END.     
   END.
   ELSE DO:      
      IF FILL-IN-NR1:SCREEN-VALUE NE " " THEN DO: 
         FIND FIRST berfortemp WHERE berfortemp.FORNR = FILL-IN-NR1:SCREEN-VALUE NO-LOCK NO-ERROR.
      END.
      ELSE DO:
         FIND FIRST berfortemp NO-LOCK NO-ERROR.
      END.
      IF AVAILABLE berfortemp THEN DO:
         RUN setlastrowid_UI IN brwproc[18] (INPUT ROWID(berfortemp)).
         RUN lastselectdyn_UI IN brwproc[18].
         /*APPLY "VALUE-CHANGED" TO BRW_TAB1 .*/
      END.               
   END.
END PROCEDURE.

PROCEDURE PlaceraKnapp_UI :
   Guru.Konstanter:LabelFlytt(CMB_LEV). 
   Guru.Konstanter:LabelFlytt(FILL-IN-BEN). 
   Guru.Konstanter:LabelFlytt(FILL-IN-KOD). 
   Guru.Konstanter:LabelFlytt(FILL-IN-ENR).
   
   Guru.Konstanter:LabelFlytt(FILL-IN-BENSTOLP). 
   Guru.Konstanter:LabelFlytt(FILL-IN-ENRSTOLP).
   
   Guru.Konstanter:LabelFlytt(FILL-IN-NR1).
   Guru.Konstanter:LabelFlytt(FILL-IN-NR2). 
   Guru.Konstanter:LabelFlytt(FILL-IN-NR3). 
   Guru.Konstanter:LabelFlytt(CMB_DEL).  
   FILL-IN-IDNR1:LABEL = FILL-IN-IDNR1LABEL:SCREEN-VALUE.
   FILL-IN-IDNR2:LABEL = FILL-IN-IDNR2LABEL:SCREEN-VALUE. 
   FILL-IN-SUND:LABEL = FILL-IN-SUNDLABEL:SCREEN-VALUE.
   FILL-IN-IDNR1LABEL:HIDDEN = TRUE.
   FILL-IN-IDNR2LABEL:HIDDEN = TRUE. 
   FILL-IN-SUNDLABEL:HIDDEN = TRUE.
   Guru.Konstanter:LabelFlytt(FILL-IN-IDNR1).
   Guru.Konstanter:LabelFlytt(FILL-IN-IDNR2). 
   Guru.Konstanter:LabelFlytt(FILL-IN-SUND). 
   Guru.Konstanter:LabelFlytt(FILL-IN-KARTR).  
   FILL-IN-KARTR:LABEL = Guru.Konstanter:varforetypchar[13].
             
   Guru.GlobalaVariabler:StartKolumnForKnappar = MBTN_KONST:COLUMN. 
  
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_KONST,TRUE).                   
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_ID,TRUE).          
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_ANM,TRUE).                   
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_MTRL,TRUE).                
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_DOK,TRUE).             
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_KOPI,TRUE).               
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_KSKAP,TRUE).    
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_KALK,TRUE).               
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_ANDORD,TRUE).  
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_UPPL,TRUE).  
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_list,TRUE). 
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_ATG,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_FLYG,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_INK,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_SCHAKT,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_ATERGA,TRUE).
   BTN_KUNDLISTA:ROW = CMB_LEV:ROW.  
   BTN_KUNDLISTA:COLUMN = CMB_LEV:COLUMN - (BTN_KUNDLISTA:WIDTH-CHARS + CMB_LEV:SIDE-LABEL-HANDLE:WIDTH-CHARS + 2).
     
END PROCEDURE.

PROCEDURE movefillin_UI :
   DEFINE INPUT PARAMETER fillinh AS HANDLE NO-UNDO.
   DEFINE INPUT PARAMETER rowvalue AS DECIMAL NO-UNDO.
   DEFINE INPUT PARAMETER colvalue AS DECIMAL NO-UNDO.    
   fillinh:ROW = rowvalue .
   fillinh:COLUMN = colvalue .   
   IF fillinh:SIDE-LABEL-HANDLE = ? THEN RETURN.
   Guru.Konstanter:LabelFlytt(fillinh).    
END PROCEDURE.


PROCEDURE sparid_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/
   ASSIGN
   sparfor = kon_id.FORNR 
   sparlin = kon_id.LINNR
   sparnat = kon_id.NATNR
   sparfri1 = kon_id.FRI1
   sparfri2 = kon_id.FRI2.
END PROCEDURE. 



PROCEDURE nykabstart2_UI :   
   valnum = kon_val.NUM.
   EMPTY TEMP-TABLE sparakon_val NO-ERROR. 
   FOR EACH kon_val WHERE kon_val.NUM = valnum:
      CREATE sparakon_val.
      BUFFER-COPY kon_val TO sparakon_val.
      valnum = kon_val.NUM.
   END.
   /*hämtar kalkylkoder*/
  
   IF Guru.GlobalaVariabler:KorBerDS = TRUE THEN DO:
      RUN KalkKoderhmt_UI IN Guru.GlobalaVariabler:BerDSapph 
      (INPUT valnum,INPUT TABLE sparakon_val,OUTPUT TABLE kalk_temp APPEND).
   END.
   ELSE DO:
      IF Guru.Konstanter:appcon THEN DO:                           
         RUN BERHMTKALK.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
         (INPUT Guru.Konstanter:varforetypchar[48],INPUT valaonr, INPUT valomrade,INPUT valnum,INPUT TABLE sparakon_val,OUTPUT TABLE kalk_temp APPEND).
      END.
      ELSE DO:
         RUN BERHMTKALK.P
         (INPUT Guru.Konstanter:varforetypchar[48],INPUT valaonr, INPUT valomrade,INPUT valnum,INPUT TABLE sparakon_val,OUTPUT TABLE kalk_temp APPEND).
      END. 
   END.
   EMPTY TEMP-TABLE sparakon_val NO-ERROR.          
   FIND FIRST kon_val WHERE kon_val.NUM = valnum AND kon_val.KSKAP = FALSE 
   NO-LOCK NO-ERROR.   
END PROCEDURE.

PROCEDURE levinlast_UI :
   DEFINE INPUT PARAMETER lekod AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER levinlast AS CHARACTER NO-UNDO.   
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR.
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "INLKAT"                   
   inextradatatemp.HUVUDCH = lekod.                                              
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:
      IF extradatatemp.SOKDATE[1] NE ? THEN  levinlast = " Inläst " + STRING(extradatatemp.SOKDATE[1]).      
      IF extradatatemp.SOKDATE[2] NE ? AND extradatatemp.SOKDATE[3] NE ?  THEN DO: 
              
         RUN tooltip_UI IN brwproc[22] (INPUT "Katalogen gäller från: " + STRING(extradatatemp.SOKDATE[2]) + " till: " + STRING(extradatatemp.SOKDATE[3])).          
      END.
      ELSE RUN tooltip_UI IN brwproc[22] (INPUT "").          
   END.
   ELSE RUN tooltip_UI IN brwproc[22] (INPUT "").          
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR.
   EMPTY TEMP-TABLE extradatatemp NO-ERROR.    
END PROCEDURE.


PROCEDURE nykabstartkalkoder_UI :
   DEFINE INPUT PARAMETER inrow AS ROWID NO-UNDO.
   FIND FIRST kon_val WHERE ROWID(kon_val) = inrow NO-LOCK NO-ERROR.
   RUN nykabstart_UI.
END PROCEDURE.

PROCEDURE nykabstart_UI :
   valnum = kon_val.NUM.
   EMPTY TEMP-TABLE sparakon_val NO-ERROR. 
   FOR EACH kon_val WHERE kon_val.NUM = valnum:
      CREATE sparakon_val.
      BUFFER-COPY kon_val TO sparakon_val.
      valnum = kon_val.NUM.
   END.
   /*hämtar mtrl*/
   IF Guru.GlobalaVariabler:KorBerDS = TRUE THEN DO:
      /*MTRLDS
      RUN LaddaBerMtrl_UI (INPUT valnum). 
      */ 
      RUN MtrlKonHmt_UI IN Guru.GlobalaVariabler:BerDSapph 
      (INPUT datvar,INPUT valnum, INPUT xtillyvar, INPUT TABLE sparakon_val,OUTPUT TABLE list_mtrl APPEND).
   END.
   ELSE DO:      
      IF Guru.Konstanter:appcon THEN DO:                           
         RUN BERHMTKONMTRL.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
         (INPUT valaonr, INPUT valomrade, INPUT datvar,INPUT valnum, INPUT xtillyvar, INPUT TABLE sparakon_val, 
         OUTPUT TABLE list_mtrl APPEND).
      END.
      ELSE DO:
         RUN BERHMTKONMTRL.P
         (INPUT valaonr, INPUT valomrade, INPUT datvar,INPUT valnum, INPUT xtillyvar, INPUT TABLE sparakon_val, 
         OUTPUT TABLE list_mtrl APPEND).
      END.
   END.      
   {NETTOMARK.I}
   
   EMPTY TEMP-TABLE sparakon_val NO-ERROR.          
   FIND FIRST kon_val WHERE kon_val.NUM = valnum AND kon_val.KSKAP = FALSE 
   NO-LOCK NO-ERROR.   
END PROCEDURE.


PROCEDURE info_UI :
   {muswait.i}
   RUN selectfoc_UI (INPUT 21). 
   IF NOT AVAILABLE kon_val THEN RETURN.
   kon_rowid = ROWID(kon_val).    
   FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM
   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE list_mtrl THEN RUN nykabstart_UI.                                             
   FIND FIRST kalk_temp WHERE kalk_temp.NUM = kon_val.NUM
   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE kalk_temp THEN RUN nykabstart2_UI.   
   FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM NO-LOCK NO-ERROR.
   IF AVAILABLE kon_id THEN DO:
      IF kon_id.XKORD NE ? THEN DO:
         FOR EACH idbuff WHERE idbuff.XKORD = kon_id.XKORD AND ROWID(idbuff) NE ROWID(kon_id):            
            FIND FIRST list_mtrl WHERE list_mtrl.NUM = idbuff.NUM
            NO-LOCK NO-ERROR.
            IF NOT AVAILABLE list_mtrl THEN DO:                                                   
               FIND FIRST kon_val WHERE kon_val.NUM = idbuff.NUM AND
               kon_val.KSKAP = FALSE NO-LOCK NO-ERROR.
               RUN nykabstart_UI.                                          
            END.                  
            FIND FIRST kalk_temp WHERE kalk_temp.NUM = idbuff.NUM
            NO-LOCK NO-ERROR.
            IF NOT AVAILABLE kalk_temp THEN DO:
               FIND FIRST kon_val WHERE kon_val.NUM = idbuff.NUM AND
               kon_val.KSKAP = FALSE NO-LOCK NO-ERROR.
               RUN nykabstart2_UI.
            END.
         END.
      END.
   END.
   
   FIND FIRST kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.
   FIND FIRST konstvaltemp WHERE konstvaltemp.KONSKOD = kon_val.GRUPP NO-LOCK NO-ERROR.
   IF NOT AVAILABLE konstvaltemp THEN RUN laddatempen_UI IN bervalapph (INPUT kon_val.GRUPP, OUTPUT TABLE konstvaltemp APPEND).   
   {AVBGOM2.I}
   RUN BERINFOU2.W (INPUT ROWID(kon_val)).           
  
   {AVBFRAM2.I}      
   {musarrow.i}
    APPLY "VALUE-CHANGED" TO RAD_KOMP.
END PROCEDURE.


PROCEDURE vtab3_UI :
   IF tab1var = FALSE THEN DO:
      RUN selectfoc_UI (INPUT 20). 
      IF AVAILABLE bernattemp THEN DO:
         ASSIGN
         natrow = ROWID(bernattemp)
         valnat = bernattemp.NATNR             
         FILL-IN-NR3:SCREEN-VALUE = bernattemp.NATNR.
      END.
   END.
END PROCEDURE.
PROCEDURE vtab2_UI :
   IF tab1var = FALSE THEN DO:
      RUN selectfoc_UI (INPUT 19). 
      IF AVAILABLE berlinjetemp THEN DO:   
         ASSIGN
         linjerow = ROWID(berlinjetemp)
         vallinje = berlinjetemp.LINNR
         FILL-IN-NR2:SCREEN-VALUE = berlinjetemp.LINNR.
         RUN setcolsortvar_UI IN brwproc[20] (INPUT " WHERE FORNR = '" + STRING(valford) + "' AND LINNR = '" + STRING(vallinje) + "'").
         RUN openbdynspec_UI IN brwproc[20].
      END.
   END.
END PROCEDURE.

PROCEDURE tab3_UI :
   IF AVAILABLE bernattemp THEN DO:
      ASSIGN
      natrow = ROWID(bernattemp)
      valnat = bernattemp.NATNR. 
      IF FILL-IN-NR3:SCREEN-VALUE = "" THEN FILL-IN-NR3:SCREEN-VALUE = bernattemp.NATNR.     
   END.   
END PROCEDURE.

PROCEDURE tab2_UI :
   IF AVAILABLE berlinjetemp THEN DO:         
      ASSIGN
      linjerow = ROWID(berlinjetemp)
      vallinje = berlinjetemp.LINNR.
      IF FILL-IN-NR2:SCREEN-VALUE = "" THEN FILL-IN-NR2:SCREEN-VALUE = berlinjetemp.LINNR.
      RUN setcolsortvar_UI IN brwproc[20] (INPUT " WHERE FORNR = '" + STRING(valford) + "' AND LINNR = '" + STRING(vallinje) + "'").
      RUN openbdynspec_UI IN brwproc[20].
      FIND FIRST bernattemp WHERE bernattemp.FORNR = valford AND bernattemp.LINNR = vallinje AND 
      bernattemp.NATNR = FILL-IN-NR3:SCREEN-VALUE
      NO-LOCK NO-ERROR.
      IF NOT AVAILABLE bernattemp THEN DO:
         FIND FIRST bernattemp WHERE bernattemp.FORNR = valford AND bernattemp.LINNR = vallinje 
         NO-LOCK NO-ERROR.
      END.
      IF AVAILABLE bernattemp THEN DO:
         RUN setlastrowid_UI IN brwproc[20] (INPUT ROWID(bernattemp)).
         RUN lastselectdyn_UI IN brwproc[20].         
      END.         
      ELSE DO:
         ASSIGN
         vallinje = ""
         FILL-IN-NR2:SCREEN-VALUE = "".
         RUN setcolsortvar_UI IN brwproc[20] (INPUT " WHERE FORNR = '" + STRING(valford) + "' AND LINNR = '" + STRING(vallinje) + "'").
         RUN openbdynspec_UI IN brwproc[20].
         FIND FIRST bernattemp WHERE bernattemp.FORNR = valford AND bernattemp.LINNR = vallinje NO-LOCK NO-ERROR.         
      END.
      IF AVAILABLE bernattemp THEN RUN tab3_UI.
   END.
   ELSE DO:
      ASSIGN
      vallinje = ""
      FILL-IN-NR2:SCREEN-VALUE = "".
      RUN setcolsortvar_UI IN brwproc[20] (INPUT " WHERE FORNR = '" + STRING(valford) + "' AND LINNR = '" + STRING(vallinje) + "'").
      RUN openbdynspec_UI IN brwproc[20].
      FIND FIRST bernattemp WHERE bernattemp.FORNR = valford AND bernattemp.LINNR = vallinje NO-LOCK NO-ERROR.               
      IF AVAILABLE bernattemp THEN RUN tab3_UI.
   END.
END PROCEDURE.

PROCEDURE tab1_UI :      
   tab1var = TRUE.
   RUN selectfoc_UI (INPUT 18). 
   vallinje = "".
   IF AVAILABLE berfortemp THEN DO:
      ASSIGN
      fordrow = ROWID(berfortemp)
      valford = berfortemp.FORNR 
      FILL-IN-NR1:SCREEN-VALUE = berfortemp.FORNR.
      FIND FIRST berlinjetemp WHERE berlinjetemp.FORNR = valford USE-INDEX FORNR NO-LOCK NO-ERROR.
      IF NOT AVAILABLE berlinjetemp THEN DO:
         EMPTY TEMP-TABLE berlinjetemp NO-ERROR.
         EMPTY TEMP-TABLE bernattemp NO-ERROR.
         RUN natlinjeladda_UI IN bervalapph (OUTPUT TABLE berlinjetemp,OUTPUT TABLE bernattemp).
         FIND FIRST berlinjetemp WHERE berlinjetemp.FORNR = valford USE-INDEX FORNR NO-LOCK NO-ERROR.      
      END.
      IF AVAILABLE berlinjetemp THEN vallinje = berlinjetemp.LINNR.
      RUN setcolsortvar_UI IN brwproc[19] (INPUT " WHERE FORNR = '" + STRING(valford) + "'").
      RUN openbdynspec_UI IN brwproc[19].
      IF FILL-IN-NR2:SCREEN-VALUE NE " " THEN DO:
         FIND FIRST berlinjetemp WHERE berlinjetemp.FORNR = valford AND berlinjetemp.LINNR = FILL-IN-NR2:SCREEN-VALUE
         NO-LOCK NO-ERROR.        
      END.
      IF NOT AVAILABLE berlinjetemp THEN DO:
         FIND FIRST berlinjetemp WHERE berlinjetemp.FORNR = valford NO-LOCK NO-ERROR.         
      END.
      IF AVAILABLE berlinjetemp THEN DO:
         RUN setlastrowid_UI IN brwproc[19] (INPUT ROWID(berlinjetemp)).
         RUN lastselectdyn_UI IN brwproc[19].
         RUN tab2_UI.
      END.         
   END.
   tab1var = FALSE.
END PROCEDURE.


PROCEDURE dbclickbrwsats_UI :
   RUN selectfoc_UI (INPUT 23).
   RUN btnover_UI.
   
END PROCEDURE.

PROCEDURE mprisinfo2_UI :
   
   {muswait.i}
   satstrue = TRUE.
   RUN selectfoc_UI (INPUT 23).
   RUN SATSINNEU.W (INPUT ROWID(satstemp)).
   satstrue = FALSE.
   {musarrow.i}
   
END PROCEDURE.

PROCEDURE brwkon_UI :
   TOG_RATT:CHECKED = FALSE. 
   RUN selectfoc_UI (INPUT 14). 
   ASSIGN
   typkod = konsttemp.KTYPKOD.                              
   FIND FIRST bbenamntemp WHERE bbenamntemp.KONSKOD = gruppkod NO-LOCK NO-ERROR.
   IF AVAILABLE bbenamntemp THEN DO:
      ASSIGN
      bbnamningvar[2] = bbenamntemp.B2
      bbnamningvar[3] = bbenamntemp.B3
      bbnamningvar[4] = bbenamntemp.B4
      bbnamningvar[5] = bbenamntemp.B5
      bbnamningvar[6] = bbenamntemp.B6.
   END.   
   {MARKKABGRP.I}  
   IF enval = TRUE THEN DO:            
      RUN bytkonstalla_UI (INPUT 2).         
      RUN bytkonstalla_UI (INPUT 3). 
      RUN bytkonstalla_UI (INPUT 4). 
      RUN bytkonstalla_UI (INPUT 5). 
      RUN bytkonstalla_UI (INPUT 6). 
   END.
   ELSE DO:
      RUN bytkonstalla_UI (INPUT 9).         
      RUN bytkonstalla_UI (INPUT 10). 
      RUN bytkonstalla_UI (INPUT 11). 
      RUN bytkonstalla_UI (INPUT 12). 
      RUN bytkonstalla_UI (INPUT 13). 
   END.
END PROCEDURE.


PROCEDURE andbrwb3_UI :
   DEFINE VARIABLE ansld AS CHARACTER NO-UNDO.
   
   IF globforetag = "elpa" OR globforetag = "gran" OR globforetag = "NAEK" OR globforetag = "ELKB"  OR globforetag = "FORS" OR globforetag = "krin" THEN DO:
      IF gruppkod = 0 THEN DO:      
         RUN selectfoc_UI (INPUT 3).          
         ansld = trim(konstvaltemp.KVALKOD).       
         EMPTY TEMP-TABLE ekonstvaltemp NO-ERROR. 
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  bbnamningvar[5]  NO-LOCK:
            CREATE ekonstvaltemp.
            BUFFER-COPY konstvaltemp TO ekonstvaltemp.            
         END.
         RUN bortsak_UI (INPUT ansld).
         setcolvar = " WHERE KONSKOD = '" + STRING(gruppkod) + "' AND KTYPKOD = '" + STRING(typkod) + "' AND KOPP = TRUE AND BB = '" + bbnamningvar[5] + "'".
         RUN setcolsortvar_UI IN brwproc[5] (INPUT setcolvar).
         RUN openbdynspec_UI IN brwproc[5].
         RUN dselectfoc_UI (INPUT 5).
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.BB =  bbnamningvar[5]  NO-LOCK:      
            FIND FIRST ekonstvaltemp WHERE ekonstvaltemp.KONSKOD = gruppkod AND ekonstvaltemp.KTYPKOD =  typkod  
            AND ekonstvaltemp.BB =  konstvaltemp.BB AND ekonstvaltemp.KVALKOD = konstvaltemp.KVALKOD NO-LOCK NO-ERROR.
            IF AVAILABLE ekonstvaltemp THEN DO:
               konstvaltemp.KOPP =  ekonstvaltemp.KOPP.
            END.
         END.        
      END. 
      IF globforetag = "elpa"  THEN DO:
         IF gruppkod = 12 THEN DO:
            RUN stationsakr_UI.                                
         END. 
      END.
      IF globforetag = "gran" OR globforetag = "NAEK" OR globforetag = "ELKB"  OR globforetag = "CPOMA"  THEN DO:
         IF gruppkod = 35 THEN DO:
            RUN stationsakr_UI.                          
         END. 
      END.
      IF globforetag = "fors"  THEN DO:
         IF gruppkod = 33 OR  gruppkod = 37 THEN DO:
            
            RUN stationskablsp_UI.
            RUN dselectfoc_UI (INPUT 2).   
            RUN stationsakr_UI.                       
         END. 
      END.
      IF globforetag = "KRIN"  THEN DO:
         /*Ny styrning Lena 20200828*/
         IF gruppkod = 33  THEN DO:
            
            RUN stationskablsp_UI.
            RUN dselectfoc_UI (INPUT 2).   
            RUN stationsakr_UI.                       
         END. 
      END.
      
   END.   
END PROCEDURE.

PROCEDURE stationsakr_UI :   
   DEFINE VARIABLE ansld AS CHARACTER NO-UNDO.
   RUN selectfoc_UI (INPUT 3).             
   ansld = trim(konstvaltemp.KVALKOD).         
   EMPTY TEMP-TABLE ekonstvaltemp NO-ERROR. 
   FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  bbnamningvar[4]  NO-LOCK:
      CREATE ekonstvaltemp.
      BUFFER-COPY konstvaltemp TO ekonstvaltemp.            
   END.
   RUN bortsak_UI (INPUT ansld).
   setcolvar = " WHERE KONSKOD = '" + STRING(gruppkod) + "' AND KTYPKOD = '" + STRING(typkod) + "' AND KOPP = TRUE AND BB = '" + bbnamningvar[4] + "'".
   RUN setcolsortvar_UI IN brwproc[4] (INPUT setcolvar).
   RUN openbdynspec_UI IN brwproc[4].
   RUN dselectfoc_UI (INPUT 4).
   FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.BB =  bbnamningvar[4]  NO-LOCK:      
      FIND FIRST ekonstvaltemp WHERE ekonstvaltemp.KONSKOD = gruppkod AND ekonstvaltemp.KTYPKOD =  typkod  
      AND ekonstvaltemp.BB =  konstvaltemp.BB AND ekonstvaltemp.KVALKOD = konstvaltemp.KVALKOD NO-LOCK NO-ERROR.
      IF AVAILABLE ekonstvaltemp THEN DO:
         konstvaltemp.KOPP =  ekonstvaltemp.KOPP.
      END.
   END.
END PROCEDURE.

PROCEDURE stationsakrh_UI :   
   DEFINE VARIABLE ansld AS CHARACTER NO-UNDO.
   RUN selectfoc_UI (INPUT 2).             
   ansld = trim(konstvaltemp.KVALKOD).         
   EMPTY TEMP-TABLE ekonstvaltemp NO-ERROR. 
   FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  bbnamningvar[4]  NO-LOCK:
      CREATE ekonstvaltemp.
      BUFFER-COPY konstvaltemp TO ekonstvaltemp.            
   END.
   RUN bortsakh_UI (INPUT ansld).
   setcolvar = " WHERE KONSKOD = '" + STRING(gruppkod) + "' AND KTYPKOD = '" + STRING(typkod) + "' AND KOPP = TRUE AND BB = '" + bbnamningvar[4] + "'".
   RUN setcolsortvar_UI IN brwproc[4] (INPUT setcolvar).
   RUN openbdynspec_UI IN brwproc[4].
   RUN dselectfoc_UI (INPUT 4).
   FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.BB =  bbnamningvar[4]  NO-LOCK:      
      FIND FIRST ekonstvaltemp WHERE ekonstvaltemp.KONSKOD = gruppkod AND ekonstvaltemp.KTYPKOD =  typkod  
      AND ekonstvaltemp.BB =  konstvaltemp.BB AND ekonstvaltemp.KVALKOD = konstvaltemp.KVALKOD NO-LOCK NO-ERROR.
      IF AVAILABLE ekonstvaltemp THEN DO:
         konstvaltemp.KOPP =  ekonstvaltemp.KOPP.
      END.
   END.
END PROCEDURE.


PROCEDURE andbrwb2_UI :       
   IF globforetag = "elpa" OR globforetag = "gran" OR globforetag = "NAEK" OR globforetag = "ELKB"  OR globforetag = "CPOMA" THEN DO:
      IF gruppkod = 0 THEN DO:               
         /*test kabel lena */
         RUN selectfoc_UI (INPUT 2).  
         RUN goromDec_UI (INPUT konstvaltemp.KVALKOD, OUTPUT barea).
         /*ansl*/         
         EMPTY TEMP-TABLE ekonstvaltemp NO-ERROR. 
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  bbnamningvar[3]  NO-LOCK:
            CREATE ekonstvaltemp.
            BUFFER-COPY konstvaltemp TO ekonstvaltemp.            
         END.
         karea = INTEGER(barea) NO-ERROR.
         RUN bortkabk_UI (INPUT karea, INPUT 3, INPUT "lsp").
         setcolvar = " WHERE KONSKOD = '" + STRING(gruppkod) + "' AND KTYPKOD = '" + STRING(typkod) + "' AND KOPP = TRUE AND BB = '" + bbnamningvar[3] + "'".
         RUN setcolsortvar_UI IN brwproc[3] (INPUT setcolvar).
         RUN openbdynspec_UI IN brwproc[3].
         RUN dselectfoc_UI (INPUT 3).
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.BB =  bbnamningvar[3]  NO-LOCK:      
            FIND FIRST ekonstvaltemp WHERE ekonstvaltemp.KONSKOD = gruppkod AND ekonstvaltemp.KTYPKOD =  typkod  
            AND ekonstvaltemp.BB =  konstvaltemp.BB AND ekonstvaltemp.KVALKOD = konstvaltemp.KVALKOD NO-LOCK NO-ERROR.
            IF AVAILABLE ekonstvaltemp THEN DO:
               konstvaltemp.KOPP =  ekonstvaltemp.KOPP.
            END.
         END. 
         /*/*nollklämma*/ bort 20100820 lena
         EMPTY TEMP-TABLE ekonstvaltemp NO-ERROR. 
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  bbnamningvar[4]  NO-LOCK:
            CREATE ekonstvaltemp.
            BUFFER-COPY konstvaltemp TO ekonstvaltemp.            
         END.
         karea = INTEGER(barea) NO-ERROR.
         RUN bortkabk_UI (INPUT karea, INPUT 4,INPUT "lsp").
         setcolvar = " WHERE KONSKOD = '" + STRING(gruppkod) + "' AND KTYPKOD = '" + STRING(typkod) + "' AND KOPP = TRUE AND BB = '" + bbnamningvar[4] + "'".
         RUN setcolsortvar_UI IN brwproc[4] (INPUT setcolvar).
         RUN openbdynspec_UI IN brwproc[4].
         RUN dselectfoc_UI (INPUT 4).
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.BB =  bbnamningvar[4]  NO-LOCK:      
            FIND FIRST ekonstvaltemp WHERE ekonstvaltemp.KONSKOD = gruppkod AND ekonstvaltemp.KTYPKOD =  typkod  
            AND ekonstvaltemp.BB =  konstvaltemp.BB AND ekonstvaltemp.KVALKOD = konstvaltemp.KVALKOD NO-LOCK NO-ERROR.
            IF AVAILABLE ekonstvaltemp THEN DO:
               konstvaltemp.KOPP =  ekonstvaltemp.KOPP.
            END.
         END.        */
      END.      
   END.
   IF globforetag = "gran" OR globforetag = "NAEK" OR globforetag = "ELKB"  OR globforetag = "CPOMA"  THEN DO:
      IF gruppkod = 35 THEN DO:
         RUN stationsakrh_UI.                          
      END. 
   END.
   IF globforetag = "fors"  THEN DO:
      IF gruppkod = 33 OR  gruppkod = 37 THEN DO:
         RUN stationskabhsp_UI.
         RUN dselectfoc_UI (INPUT 3).
         RUN stationsakrh_UI.                                  
      END. 
   END.
   IF globforetag = "krin"  THEN DO:
      IF gruppkod = 33 THEN DO:
         /*ny styrning Lena 20200828*/
      
         RUN stationskabhsp_UI.
         RUN dselectfoc_UI (INPUT 3).
         RUN stationsakrh_UI.                                  
      END. 
   END.
END PROCEDURE.

PROCEDURE andbrwb5_UI :    
        
   IF globforetag = "gran"  OR globforetag = "NAEK" OR globforetag = "ELKB"  OR globforetag = "CPOMA" THEN DO:
      IF gruppkod = 35 THEN RUN stationkab_UI.                                      
   END.                  
END PROCEDURE.

PROCEDURE stationskabhsp_UI:
   /*FORSM*/   
   DEFINE VARIABLE traff AS INTEGER NO-UNDO.
   EMPTY TEMP-TABLE ekonstvaltemp NO-ERROR. 
   FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  bbnamningvar[5]  NO-LOCK:
      CREATE ekonstvaltemp.
      BUFFER-COPY konstvaltemp TO ekonstvaltemp.            
   END.  
   IF globforetag = "krin" THEN DO:
      RUN selectfoc_UI (INPUT 2).             
      
      /*krin har 12-24 kv alla stationer Lena 20200828*/
      traff = INDEX(TRIM(konstvaltemp.KVALKOD),"MAG",1).
      IF traff NE 0 THEN DO:
         RUN bortkabk_UI (INPUT 0, INPUT 5,INPUT "MAG").
      END.
      ELSE DO:
         traff = INDEX(TRIM(konstvaltemp.KVALKOD),"KAP",1).
         IF traff NE 0 THEN DO:
            RUN bortkabk_UI (INPUT 0, INPUT 5,INPUT "KAP").
         END.
         ELSE DO:
            traff = INDEX(TRIM(konstvaltemp.KVALKOD),"SM",1).
            IF traff NE 0 THEN DO:
               RUN bortkabk_UI (INPUT 0, INPUT 5,INPUT "SM").
            END.
         END.   
      END.                 
       IF traff = 0 THEN RUN bortkabk_UI (INPUT 0, INPUT 5,INPUT "hsp1224").
   END.
   ELSE DO:   
      traff = INDEX(typkod,"12",1).
      IF traff NE 0 THEN DO:     
         RUN bortkabk_UI (INPUT 0, INPUT 5,INPUT "hsp12").
      END.
      ELSE DO:
          traff = INDEX(typkod,"24",1).
         IF traff NE 0 THEN DO:     
            RUN bortkabk_UI (INPUT 0, INPUT 5,INPUT "hsp24").
         END.
      END.
   END.      
   setcolvar = " WHERE KONSKOD = '" + STRING(gruppkod) + "' AND KTYPKOD = '" + STRING(typkod) + "' AND KOPP = TRUE AND BB = '" + bbnamningvar[5] + "'".
   RUN setcolsortvar_UI IN brwproc[5] (INPUT setcolvar).
   RUN openbdynspec_UI IN brwproc[5].
   RUN dselectfoc_UI (INPUT 5).
   FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.BB =  bbnamningvar[5]  NO-LOCK:      
      FIND FIRST ekonstvaltemp WHERE ekonstvaltemp.KONSKOD = gruppkod AND ekonstvaltemp.KTYPKOD =  typkod  
      AND ekonstvaltemp.BB =  konstvaltemp.BB AND ekonstvaltemp.KVALKOD = konstvaltemp.KVALKOD NO-LOCK NO-ERROR.
      IF AVAILABLE ekonstvaltemp THEN DO:
         konstvaltemp.KOPP =  ekonstvaltemp.KOPP.
      END.
   END.     
                                
END PROCEDURE.

PROCEDURE stationskablsp_UI:
   /*FORSM*/   
   DEFINE VARIABLE traff AS INTEGER NO-UNDO.
   EMPTY TEMP-TABLE ekonstvaltemp NO-ERROR. 
   FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  bbnamningvar[5]  NO-LOCK:
      CREATE ekonstvaltemp.
      BUFFER-COPY konstvaltemp TO ekonstvaltemp.            
   END.  
   RUN bortkabk_UI (INPUT 0, INPUT 5,INPUT "lsp").

   /*traff = INDEX(typkod,"12",1).
   IF traff NE 0 THEN DO:     
      RUN bortkabk_UI (INPUT 0, INPUT 5,INPUT "hsp12").
   END.
   ELSE DO:
       traff = INDEX(typkod,"24",1).
      IF traff NE 0 THEN DO:     
         RUN bortkabk_UI (INPUT 0, INPUT 5,INPUT "hsp24").
      END.
   END.*/   
   setcolvar = " WHERE KONSKOD = '" + STRING(gruppkod) + "' AND KTYPKOD = '" + STRING(typkod) + "' AND KOPP = TRUE AND BB = '" + bbnamningvar[5] + "'".
   RUN setcolsortvar_UI IN brwproc[5] (INPUT setcolvar).
   RUN openbdynspec_UI IN brwproc[5].
   RUN dselectfoc_UI (INPUT 5).
   FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.BB =  bbnamningvar[5]  NO-LOCK:      
      FIND FIRST ekonstvaltemp WHERE ekonstvaltemp.KONSKOD = gruppkod AND ekonstvaltemp.KTYPKOD =  typkod  
      AND ekonstvaltemp.BB =  konstvaltemp.BB AND ekonstvaltemp.KVALKOD = konstvaltemp.KVALKOD NO-LOCK NO-ERROR.
      IF AVAILABLE ekonstvaltemp THEN DO:
         konstvaltemp.KOPP =  ekonstvaltemp.KOPP.
      END.
   END.     
                                
END PROCEDURE.

PROCEDURE stationkab_UI :  
   DEFINE VARIABLE lsphsp AS CHARACTER NO-UNDO.
   /*test kabel lena */
   RUN selectfoc_UI (INPUT 5).  
   
   /*FIND FIRST konsttempbuff WHERE konsttempbuff.KONSKOD = 14 AND
   konsttempbuff.KTYPKOD =  LEFT-TRIM(konstvaltemp.KVALKOD) NO-LOCK NO-ERROR.
   IF AVAILABLE konsttempbuff THEN DO:
      lsphsp = "lsp".      
   END.          
   ELSE lsphsp = "hsp".*/
   /*omgjort så att det ska klassas som lsp om kabeln inte finns. Detta för att gamla lspkablar ska komma ut rätt FORS Lena 20180124*/
   lsphsp = "lsp".
   FIND FIRST konsttempbuff WHERE konsttempbuff.KTYPKOD =  LEFT-TRIM(konstvaltemp.KVALKOD) NO-LOCK NO-ERROR.
   IF AVAILABLE konsttempbuff THEN DO:
      IF konsttempbuff.KONSKOD = 14 THEN  lsphsp = "lsp".
      ELSE IF konsttempbuff.KONSKOD = 25 THEN  lsphsp = "hsp".
      ELSE IF konsttempbuff.KONSKOD = 27 THEN  lsphsp = "hsp".
      ELSE IF globforetag = "FORS" AND konsttempbuff.KONSKOD = 36 THEN  lsphsp = "hsp".
      ELSE IF globforetag = "FORS" AND konsttempbuff.KONSKOD = 35 THEN  lsphsp = "hsp".
      ELSE IF globforetag = "FORS" AND konsttempbuff.KONSKOD = 41 THEN  lsphsp = "hsp".          
   END.          
   
                 
   RUN goromDec_UI (INPUT konstvaltemp.KVALKOD, OUTPUT barea).   
            
   EMPTY TEMP-TABLE ekonstvaltemp NO-ERROR. 
   FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  bbnamningvar[3]  NO-LOCK:
      CREATE ekonstvaltemp.
      BUFFER-COPY konstvaltemp TO ekonstvaltemp.            
   END.     
   karea = INTEGER(barea) NO-ERROR.   
   RUN bortkabk_UI (INPUT karea, INPUT 3,INPUT lsphsp).
   setcolvar = " WHERE KONSKOD = '" + STRING(gruppkod) + "' AND KTYPKOD = '" + STRING(typkod) + "' AND KOPP = TRUE AND BB = '" + bbnamningvar[3] + "'".
   RUN setcolsortvar_UI IN brwproc[3] (INPUT setcolvar).
   RUN openbdynspec_UI IN brwproc[3].
   RUN dselectfoc_UI (INPUT 3).
   FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.BB =  bbnamningvar[3]  NO-LOCK:      
      FIND FIRST ekonstvaltemp WHERE ekonstvaltemp.KONSKOD = gruppkod AND ekonstvaltemp.KTYPKOD =  typkod  
      AND ekonstvaltemp.BB =  konstvaltemp.BB AND ekonstvaltemp.KVALKOD = konstvaltemp.KVALKOD NO-LOCK NO-ERROR.
      IF AVAILABLE ekonstvaltemp THEN DO:
         konstvaltemp.KOPP =  ekonstvaltemp.KOPP.
      END.
   END.     
   EMPTY TEMP-TABLE ekonstvaltemp NO-ERROR. 
   FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  bbnamningvar[2]  NO-LOCK:
      CREATE ekonstvaltemp.
      BUFFER-COPY konstvaltemp TO ekonstvaltemp.            
   END.     
   RUN bortkabk_UI (INPUT karea, INPUT 2,INPUT lsphsp).
   setcolvar = " WHERE KONSKOD = '" + STRING(gruppkod) + "' AND KTYPKOD = '" + STRING(typkod) + "' AND KOPP = TRUE AND BB = '" + bbnamningvar[2] + "'".
   RUN setcolsortvar_UI IN brwproc[2] (INPUT setcolvar).
   RUN openbdynspec_UI IN brwproc[2].
   RUN dselectfoc_UI (INPUT 2).
   FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.BB =  bbnamningvar[2]  NO-LOCK:      
      FIND FIRST ekonstvaltemp WHERE ekonstvaltemp.KONSKOD = gruppkod AND ekonstvaltemp.KTYPKOD =  typkod  
      AND ekonstvaltemp.BB =  konstvaltemp.BB AND ekonstvaltemp.KVALKOD = konstvaltemp.KVALKOD NO-LOCK NO-ERROR.
      IF AVAILABLE ekonstvaltemp THEN DO:
         konstvaltemp.KOPP =  ekonstvaltemp.KOPP.
      END.
   END.                             
END PROCEDURE.

PROCEDURE bortsak_UI:
   DEFINE INPUT PARAMETER ansld AS CHARACTER NO-UNDO.  
   DEFINE VARIABLE sakkopp AS CHARACTER  NO-UNDO.
   DEFINE VARIABLE hjbenvar AS CHARACTER NO-UNDO.
   IF gruppkod = 0 THEN hjbenvar = bbnamningvar[5].
   ELSE hjbenvar = bbnamningvar[4].
   IF globforetag = "ELKB" AND typkod = "Gevea" THEN .
   ELSE IF ansld BEGINS "sld000"  OR ansld = "KG4"  THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp =  "00/125A" THEN konstvaltemp.KOPP  = FALSE.
         ELSE IF sakkopp =  "00/160A" THEN konstvaltemp.KOPP  = FALSE.
         ELSE IF sakkopp BEGINS "00/" THEN.
         ELSE IF sakkopp BEGINS "000/" THEN.
         ELSE IF sakkopp BEGINS "C 00/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
      END.
   END.
   ELSE IF ansld BEGINS "sld 000"  THEN DO:
      /*FORS*/
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
          sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "000/" THEN.         
         ELSE konstvaltemp.KOPP  = FALSE.         
      END.
   END.
   ELSE IF ansld BEGINS  "DIN00 NR"  THEN DO:      
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
          sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "000/" THEN.
         ELSE IF sakkopp BEGINS "00/" THEN.         
         ELSE konstvaltemp.KOPP  = FALSE.         
      END.
   END.
   ELSE IF ansld = "SL00"  THEN DO:
      /*FORS GEVEA*/
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
          sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "00/" THEN.
         ELSE IF sakkopp BEGINS "000/" THEN.         
         ELSE konstvaltemp.KOPP  = FALSE.         
      END.
   END.
   ELSE IF ansld = "SL1"  THEN DO:
      /*FORS GEVEA*/
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
          sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "1/" THEN.         
         ELSE konstvaltemp.KOPP  = FALSE.         
      END.
   END.
   ELSE IF ansld = "SL2"  THEN DO:
      /*FORS GEVEA*/
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
          sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "2/" THEN.         
         ELSE konstvaltemp.KOPP  = FALSE.         
      END.
   END.   
   ELSE IF ansld BEGINS "sld00" OR ansld = "SL00G-BS" OR ansld = "JM00-4" OR ansld = "Bef.00" OR ansld = "KS00 4" THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
          sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "00/" THEN.
         ELSE IF sakkopp BEGINS "C 00/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
      END.
   END.
   ELSE IF ansld = "SLF2X63" OR ansld = "SLF3X63" OR ansld = "SLF4X63"  THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
          sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "00/" THEN.       
         ELSE konstvaltemp.KOPP  = FALSE.         
      END.
   END.
   ELSE IF ansld = "sld 00"  THEN DO:
      /*FORS*/
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
          sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "00/" THEN.
         ELSE IF sakkopp BEGINS "000/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
      END.
   END.
   ELSE IF ansld = "SLC 63"  THEN DO:
      /*FORS*/      
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
          sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "DII/" THEN.
         ELSE IF sakkopp BEGINS "DIII/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
      END.
   END.
   ELSE IF ansld BEGINS "sld1" OR ansld = "SL1G-BS" OR ansld BEGINS "sld 1" OR ansld = "KS 0-4" OR ansld = "Bef.1" OR ansld = "SLF160P"   THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
          sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "1/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
      END.
   END.
   ELSE IF ansld BEGINS "LDL63/3" OR ansld BEGINS "LDL 63/3" OR ansld BEGINS "LDL63/2" OR ansld BEGINS "SLD263" OR ansld BEGINS "Bef.DZ" OR ansld = "CEWE 3gr" OR ansld =  "CEWE 63/2K"
   OR ansld = "DZ11 DZ111"  THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "DII/" THEN.
         ELSE IF sakkopp BEGINS "DIII/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
     END.
   END.   
   ELSE IF ansld BEGINS "sld2" OR ansld = "SL2G-BS" OR ansld BEGINS "sld 2" OR ansld = "KS2 4" OR ansld = "KS  2-4" OR ansld = "Bef.2" OR ansld = "BTVC" OR ansld BEGINS "DIN2 NR" OR ansld = "SLF400P" THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
          sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "2/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
      END.
   END.   
   ELSE IF  ansld BEGINS "GLB2"  THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
          sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "1/" THEN.
         ELSE IF sakkopp BEGINS "2/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
      END.
   END.

   ELSE IF ansld BEGINS "AD300" OR ansld = "AD 300" OR ansld = "AK 25-300" OR ansld = "KA240 4" OR ansld = "KF-4" OR ansld = "KA 240-4" OR ansld BEGINS "ADI300" OR ansld BEGINS "ADI 300" THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         konstvaltemp.KOPP  = FALSE.         
      END.
   END.
   ELSE IF ansld BEGINS "AD95" OR ansld = "AD 95" OR ansld = "KA95 4" OR ansld = "KA 95-4" OR ansld BEGINS "ADI95" OR ansld BEGINS "ADI 95" THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         konstvaltemp.KOPP  = FALSE.         
      END.
   END.
   ELSE IF ansld BEGINS "FD3300" OR  ansld BEGINS "FD 3300" OR ansld = "KF 4"  THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         konstvaltemp.KOPP  = FALSE.         
      END.
   END.
   ELSE IF ansld BEGINS "AKKZ300" OR ansld = "KA 240-4" OR ansld = "AKKZ 300"    THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         konstvaltemp.KOPP  = FALSE.         
     END.
   END.
   ELSE IF ansld BEGINS "AKZD95" OR ansld = "KA 95" OR ansld = "AKZD 95"    THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         konstvaltemp.KOPP  = FALSE.         
     END.
   END.
   /*Triarca och Sitec ONE*/
   ELSE IF ansld = "ICNR 2595" OR ansld = "ICNR 95 240" OR ansld = "SAKI 240" OR ansld = "ICNR 16 35"   THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         konstvaltemp.KOPP  = FALSE.         
     END.
   END.
   
   ELSE IF ansld BEGINS "FS160" OR ansld = "KS 00-4" OR ansld = "FS 160"  OR ansld = "DIN00-4"     THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "00/" THEN.
         ELSE IF sakkopp BEGINS "C 00/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
     END.
   END.
   
   ELSE IF ansld BEGINS "XLBM00" OR ansld BEGINS "XLBM/00" OR ansld = "GB00K-4" OR ansld = "CEWE 00" OR ansld = "CEWE GB00K" OR ansld BEGINS "ZLBM00" THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "00/" THEN.
         ELSE IF globforetag = "FORS" AND sakkopp BEGINS "000/" THEN.
         ELSE IF sakkopp BEGINS "C 00/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
     END.
   END.
   ELSE IF ansld BEGINS "XLBM1" OR ansld = "KS 2_4"  OR ansld = "DIN1-4" OR ansld BEGINS "ZLBM1"  THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "1/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
     END.
   END.
   ELSE IF ansld BEGINS "XLBM2" OR ansld = "KS 2-4"  OR ansld = "DIN2-4" OR ansld BEGINS "ZLBM2"  THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "2/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
     END.
   END.
   ELSE IF ansld BEGINS "DIAZED"  THEN DO:
      /*FORS*/
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "DII" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
     END.
   END.
   ELSE IF ansld BEGINS "PRON000"  THEN DO:
      /*FORS*/
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "000/" THEN.
         ELSE IF sakkopp BEGINS "00/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
     END.
   END.
   ELSE IF ansld BEGINS "PRON2"  THEN DO:
      /*FORS*/
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "2/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
     END.
   END.
   ELSE IF ansld BEGINS "XLBM3"  OR ansld = "DIN3-4" OR ansld BEGINS "ZLBM3"  THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "3/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
     END.
   END.   
   ELSE IF ansld = "JM2-4"   THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "2/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
     END.
   END.
   ELSE IF ansld = "JM3P-4"  THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "3/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
     END.
   END.
   ELSE IF ansld = "ADB" OR ansld = "ADI 3M"  THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         konstvaltemp.KOPP  = FALSE.         
      END.
   END.   
   ELSE IF ansld = "BTVCDT00" OR ansld = "LSL00" THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "00/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
     END.
   END.
   ELSE IF ansld = "BTVCDT2" OR ansld = "LSL2" THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         IF sakkopp BEGINS "2/" THEN.
         ELSE konstvaltemp.KOPP  = FALSE.         
     END.
   END.
 END PROCEDURE.

PROCEDURE bortsakh_UI:
   DEFINE INPUT PARAMETER ansld AS CHARACTER NO-UNDO.  
   DEFINE VARIABLE sakkopp AS CHARACTER  NO-UNDO.
   DEFINE VARIABLE hjbenvar AS CHARACTER NO-UNDO.   
   hjbenvar = bbnamningvar[4].      
   IF ansld = "NALF+JK" OR ansld = "NALF+1JK" OR ansld = "SÄK.APP" OR ansld = "SÄKH" OR ansld = "Trafofack" THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         konstvaltemp.KOPP  = FALSE.
         IF sakkopp BEGINS "00/" THEN.
         ELSE IF sakkopp BEGINS "0/" THEN.
         ELSE IF sakkopp BEGINS "000/" THEN.
         ELSE IF sakkopp BEGINS "C 00/" THEN.
         ELSE IF sakkopp BEGINS "1/" THEN.
         ELSE IF sakkopp BEGINS "2/" THEN.
         ELSE IF sakkopp BEGINS "3/" THEN.
         ELSE IF sakkopp BEGINS "DII/" THEN.
         ELSE IF sakkopp BEGINS "DIII/" THEN.
         ELSE konstvaltemp.KOPP  = TRUE.         
      END.
   END.
   ELSE IF ansld BEGINS  "MAG SLF" OR ansld BEGINS "KAP SLF" OR ansld BEGINS "SM SLF" THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         sakkopp = TRIM(konstvaltemp.KVALKOD).
         konstvaltemp.KOPP  = FALSE.        
         IF sakkopp BEGINS "SIBA" THEN konstvaltemp.KOPP  = TRUE.         
         ELSE konstvaltemp.KOPP  = FALSE.         
      END.
   END.
      
   ELSE DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
          sakkopp = TRIM(konstvaltemp.KVALKOD).
         konstvaltemp.KOPP  = FALSE.         
      END.
   END.
END PROCEDURE.


PROCEDURE bortkabk_UI:
   DEFINE INPUT PARAMETER karea AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER valdbrw AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER lsphsp AS CHARACTER NO-UNDO.
   DEFINE VARIABLE anslkopp AS CHARACTER  NO-UNDO.
   DEFINE VARIABLE hjbenvar AS CHARACTER NO-UNDO.
 
   IF valdbrw = 2 THEN DO:
      IF gruppkod = 0 THEN hjbenvar = bbnamningvar[2].
      ELSE hjbenvar = bbnamningvar[2].
   END.
   IF valdbrw = 3 THEN DO:
      IF gruppkod = 0 THEN hjbenvar = bbnamningvar[3].
      ELSE hjbenvar = bbnamningvar[3].
   END.
   IF valdbrw = 4 THEN DO:
      IF gruppkod = 0 THEN hjbenvar = bbnamningvar[4].
      ELSE hjbenvar = bbnamningvar[4].
   END.
   IF valdbrw = 5 THEN DO:
      hjbenvar = bbnamningvar[5].      
   END.   
   IF valdbrw = 3 AND lsphsp = "hsp"  THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         konstvaltemp.KOPP  = FALSE.
      END.
   END.
   ELSE IF valdbrw = 2 AND lsphsp = "lsp"  THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         konstvaltemp.KOPP  = FALSE.
      END.
   END.
   ELSE IF valdbrw = 2 AND lsphsp = "hsp"  THEN DO:
      FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
         konstvaltemp.KOPP  = TRUE.
      END.
   END.
   ELSE IF valdbrw = 5  THEN DO:
      /*forsm*/
      IF lsphsp = "hsp12" THEN DO:      
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:
            konstvaltemp.KOPP  = FALSE.
            FIND FIRST konsttempbuff WHERE konsttempbuff.KONSKOD = 25 AND
            konsttempbuff.KTYPKOD =  LEFT-TRIM(konstvaltemp.KVALKOD) NO-LOCK NO-ERROR.
            IF AVAILABLE konsttempbuff THEN DO:
                konstvaltemp.KOPP  = TRUE.     
            END.
            ELSE DO:
               IF globforetag = "fors" THEN DO:
                  FIND FIRST konsttempbuff WHERE konsttempbuff.KONSKOD = 35 AND
                  konsttempbuff.KTYPKOD =  LEFT-TRIM(konstvaltemp.KVALKOD) NO-LOCK NO-ERROR.
                  IF AVAILABLE konsttempbuff THEN DO:
                      konstvaltemp.KOPP  = TRUE.     
                  END.                     
               END.
            END.                
             
         END.
      END.
      ELSE IF lsphsp = "hsp24" THEN DO:      
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:
            konstvaltemp.KOPP  = FALSE.
            FIND FIRST konsttempbuff WHERE konsttempbuff.KONSKOD = 27 AND
            konsttempbuff.KTYPKOD =  LEFT-TRIM(konstvaltemp.KVALKOD) NO-LOCK NO-ERROR.
            IF AVAILABLE konsttempbuff THEN DO:
                konstvaltemp.KOPP  = TRUE.     
            END.
            ELSE DO:
               IF globforetag = "fors" THEN DO:
                  FIND FIRST konsttempbuff WHERE konsttempbuff.KONSKOD = 36 AND
                  konsttempbuff.KTYPKOD =  LEFT-TRIM(konstvaltemp.KVALKOD) NO-LOCK NO-ERROR.
                  IF AVAILABLE konsttempbuff THEN DO:
                      konstvaltemp.KOPP  = TRUE.     
                  END.                     
                  ELSE DO:
                     FIND FIRST konsttempbuff WHERE konsttempbuff.KONSKOD = 41 AND
                     konsttempbuff.KTYPKOD =  LEFT-TRIM(konstvaltemp.KVALKOD) NO-LOCK NO-ERROR.
                     IF AVAILABLE konsttempbuff THEN DO:
                         konstvaltemp.KOPP  = TRUE.     
                     END.
                  END.                        
               END.
            END.                            
         END.
      END.
      IF lsphsp = "hsp1224" THEN DO:
         
         /*krin har 12-24 kv på alla stationer Lena 20200828*/      
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:
            konstvaltemp.KOPP  = FALSE.
            FIND FIRST konsttempbuff WHERE konsttempbuff.KONSKOD = 25 AND
            konsttempbuff.KTYPKOD =  LEFT-TRIM(konstvaltemp.KVALKOD) NO-LOCK NO-ERROR.
            IF AVAILABLE konsttempbuff THEN DO:
                konstvaltemp.KOPP  = TRUE.     
            END.
            ELSE DO:               
               FIND FIRST konsttempbuff WHERE konsttempbuff.KONSKOD = 27 AND
               konsttempbuff.KTYPKOD =  LEFT-TRIM(konstvaltemp.KVALKOD) NO-LOCK NO-ERROR.
               IF AVAILABLE konsttempbuff THEN DO:
                   konstvaltemp.KOPP  = TRUE.     
               END.                                    
            END.                                     
         END.
      END.
      ELSE IF lsphsp = "MAG" THEN DO:
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:
            IF TRIM(konstvaltemp.KVALKOD) BEGINS "MAG" THEN konstvaltemp.KOPP  = TRUE.
            ELSE konstvaltemp.KOPP  = FALSE.
         END.
      END.
      ELSE IF lsphsp = "KAP" THEN DO:
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:
            IF TRIM(konstvaltemp.KVALKOD) BEGINS "KAP" THEN konstvaltemp.KOPP  = TRUE.
            ELSE konstvaltemp.KOPP  = FALSE.
         END.
      END.
      ELSE IF lsphsp = "SM" THEN DO:
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:
            IF TRIM(konstvaltemp.KVALKOD) BEGINS "SM" THEN konstvaltemp.KOPP  = TRUE.
            ELSE konstvaltemp.KOPP  = FALSE.
         END.
      END.
      
      ELSE IF lsphsp = "lsp" THEN DO:
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:
            konstvaltemp.KOPP  = TRUE.
            FIND FIRST konsttempbuff WHERE konsttempbuff.KONSKOD = 25 AND
            konsttempbuff.KTYPKOD =  LEFT-TRIM(konstvaltemp.KVALKOD) NO-LOCK NO-ERROR.
            IF AVAILABLE konsttempbuff THEN DO:
                konstvaltemp.KOPP  = FALSE.     
            END.                
            ELSE DO:
               FIND FIRST konsttempbuff WHERE konsttempbuff.KONSKOD = 27 AND
               konsttempbuff.KTYPKOD =  LEFT-TRIM(konstvaltemp.KVALKOD) NO-LOCK NO-ERROR.
               IF AVAILABLE konsttempbuff THEN DO:
                   konstvaltemp.KOPP  = FALSE.     
               END.
               ELSE DO:
                  IF globforetag = "fors" THEN DO:
                     FIND FIRST konsttempbuff WHERE konsttempbuff.KONSKOD = 36 AND
                     konsttempbuff.KTYPKOD =  LEFT-TRIM(konstvaltemp.KVALKOD) NO-LOCK NO-ERROR.
                     IF AVAILABLE konsttempbuff THEN DO:
                         konstvaltemp.KOPP  = FALSE.     
                     END.
                     ELSE DO:
                        FIND FIRST konsttempbuff WHERE konsttempbuff.KONSKOD = 35 AND
                        konsttempbuff.KTYPKOD =  LEFT-TRIM(konstvaltemp.KVALKOD) NO-LOCK NO-ERROR.
                        IF AVAILABLE konsttempbuff THEN DO:
                            konstvaltemp.KOPP  = FALSE.     
                        END.
                        ELSE DO:
                           FIND FIRST konsttempbuff WHERE konsttempbuff.KONSKOD = 41 AND
                           konsttempbuff.KTYPKOD =  LEFT-TRIM(konstvaltemp.KVALKOD) NO-LOCK NO-ERROR.
                           IF AVAILABLE konsttempbuff THEN DO:
                               konstvaltemp.KOPP  = FALSE.     
                           END.
                        END.                           
                     END.   
                  END.   
               END.
            END.
            IF globforetag = "KRIN" THEN DO:
               IF TRIM(konstvaltemp.KVALKOD) BEGINS "MAG" THEN konstvaltemp.KOPP  = FALSE.
               IF TRIM(konstvaltemp.KVALKOD) BEGINS "KAP" THEN konstvaltemp.KOPP  = FALSE.
               IF TRIM(konstvaltemp.KVALKOD) BEGINS "SM" THEN konstvaltemp.KOPP  = FALSE.
            END.                
         END.
               
 
      END.   
   END.
   ELSE DO:
         
      IF globforetag = "ELKB" AND typkod = "Gevea" THEN .
      ELSE IF karea = 0 THEN.
      ELSE IF /*karea GE 6 AND*/ karea LE 25 THEN DO:     
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
            anslkopp = TRIM(konstvaltemp.KVALKOD).
            IF anslkopp BEGINS "AD95" OR anslkopp = "AD 95"  OR anslkopp = "KA95 4" OR anslkopp = "KF-4" OR anslkopp BEGINS "ADI95"  THEN.
            ELSE IF anslkopp BEGINS "sld000" OR anslkopp = "KG4" THEN.
            ELSE IF anslkopp BEGINS "sld00" OR anslkopp = "SL00G-BS" OR anslkopp = "JM00-4" OR anslkopp = "KS00 4" THEN.
            ELSE IF anslkopp BEGINS "AKZD95" OR anslkopp = "KA 95" OR anslkopp = "AKZD 95"   THEN.
            ELSE IF anslkopp BEGINS "LDL63/3" OR anslkopp = "CEWE 3gr"  THEN.
            ELSE IF anslkopp BEGINS "XLBM00" OR anslkopp = "CEWE 00" OR anslkopp = "CEWE GB00K" OR anslkopp BEGINS "ZLBM00"  THEN.
            ELSE IF anslkopp = "GB00K-4"  THEN.
            ELSE IF anslkopp BEGINS "LDL63/2"  OR anslkopp BEGINS "SLD263" THEN.            
            ELSE IF anslkopp BEGINS "FS160" OR anslkopp = "KS 00-4" OR anslkopp = "FS 160"   THEN.
            ELSE IF anslkopp = "DIN00-4"  THEN.
            ELSE IF anslkopp = "Bef.DZ"  THEN.            
            ELSE IF anslkopp = "DZ11 DZ111"  THEN.
            ELSE IF anslkopp = "ICNR 16 35"  THEN.
            ELSE IF anslkopp = "SLF2X63"  THEN.
            ELSE IF anslkopp = "SLF3X63"  THEN.
            ELSE IF anslkopp = "SLF4X63"  THEN.            
            ELSE konstvaltemp.KOPP  = FALSE.                     
         END.
      END.
      ELSE IF karea > 25 AND karea < 50 THEN DO:
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
            anslkopp = TRIM(konstvaltemp.KVALKOD).
            IF anslkopp BEGINS "AD95" OR anslkopp = "AD 95"  OR anslkopp = "AK 25-300" OR anslkopp = "KA95 4" OR anslkopp = "KF-4" OR anslkopp BEGINS "ADI95"  THEN.
            ELSE IF anslkopp BEGINS "sld000" OR anslkopp = "KG4" THEN.            
            ELSE IF anslkopp BEGINS "sld00" OR anslkopp = "SL00G-BS" OR anslkopp = "SL1G-BS" OR anslkopp = "SL2G-BS" OR anslkopp = "JM00-4" OR anslkopp = "KS00 4" THEN.
            ELSE IF anslkopp BEGINS "AKZD95" OR anslkopp = "KA 95" OR anslkopp = "AKZD 95"   THEN.         
            ELSE IF anslkopp BEGINS "XLBM00" OR anslkopp = "CEWE 00" OR anslkopp = "CEWE GB00K" OR anslkopp BEGINS "ZLBM00"  THEN.  
            ELSE IF anslkopp = "GB00K-4"  THEN.
            ELSE IF anslkopp BEGINS "FS160"  OR anslkopp = "KS 00-4" OR anslkopp = "FS 160"   THEN.
            ELSE IF anslkopp = "JM2-4"  THEN.
            ELSE IF anslkopp = "JM3P-4"  THEN.
            ELSE IF anslkopp = "DIN00-4" OR anslkopp = "DIN1-4" OR anslkopp = "DIN2-4" OR anslkopp = "DIN3-4"  THEN.
            ELSE IF anslkopp = "ICNR 2595" OR anslkopp = "DZ11 DZ111" OR anslkopp BEGINS "DIN00 NR" OR anslkopp = "SAKI 240"
            OR anslkopp = "SLF2X63" OR anslkopp = "SLF3X63" OR anslkopp = "SLF4X63" OR anslkopp = "ICNR 16 35"  THEN.
            ELSE DO:
               konstvaltemp.KOPP  = FALSE.
            END.         
         END.
      END.
      ELSE IF karea GE 50 AND karea LE 95 THEN DO:
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
            anslkopp = TRIM(konstvaltemp.KVALKOD).                     
            IF anslkopp BEGINS "LDL63/3" OR anslkopp BEGINS "LDL63/2"  OR anslkopp BEGINS "SLD263" OR anslkopp = "Bef.DZ" OR anslkopp = "DZ11 DZ111" OR anslkopp = "ICNR 16 35" THEN DO:         
               konstvaltemp.KOPP  = FALSE.
            END.
         END.
      END.
      ELSE IF karea > 95 AND karea LE 300 THEN DO:
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
            anslkopp = TRIM(konstvaltemp.KVALKOD).
            IF anslkopp BEGINS "AD300" OR anslkopp = "AD 300" OR anslkopp = "AK 25-300" OR anslkopp = "KA240 4" OR anslkopp BEGINS "ADI300" THEN.
            ELSE IF anslkopp BEGINS "FD3300" OR anslkopp = "KF 4"  THEN.
            ELSE IF anslkopp BEGINS "sld1" OR anslkopp = "SL1G-BS" OR anslkopp = "KS 0-4"  THEN.
            ELSE IF anslkopp BEGINS "sld2" OR anslkopp = "SL2G-BS" OR anslkopp = "KS2 4" OR anslkopp = "KS  2-4"  THEN.         
            ELSE IF anslkopp BEGINS "AKKZ300" OR anslkopp = "KA 240-4" OR anslkopp = "AKKZ 300" OR anslkopp BEGINS "ZLBM1"  THEN.
            ELSE IF anslkopp BEGINS "XLBM1" OR anslkopp = "KS 2_4" OR anslkopp BEGINS "ZLBM2"   THEN.
            ELSE IF anslkopp BEGINS "XLBM2" OR anslkopp = "KS 2-4" OR anslkopp BEGINS "ZLBM3"   THEN.
            ELSE IF anslkopp BEGINS "XLBM3"  THEN.            
            ELSE IF anslkopp BEGINS "GLB2"  THEN.
            ELSE IF anslkopp = "JM2-4"  THEN.
            ELSE IF anslkopp = "JM3P-4"  THEN.            
            ELSE IF anslkopp = "Bef.1"  THEN.
            ELSE IF anslkopp = "Bef.2"  THEN.
            ELSE IF anslkopp = "BTVC"  THEN.
            ELSE IF anslkopp = "Bef.00"  THEN.            
            ELSE IF anslkopp = "DIN1-4" OR anslkopp = "DIN2-4" OR anslkopp = "DIN3-4"  THEN.
            ELSE IF anslkopp = "ADB" OR anslkopp = "ADI 3M"  THEN.
            ELSE IF anslkopp = "ICNR 2595" OR anslkopp BEGINS "DIN2 NR" OR anslkopp = "ICNR 95 240"
            OR anslkopp = "SAKI 240" OR anslkopp = "SLF160P" OR anslkopp = "SLF400P"  THEN.
            ELSE DO:
               konstvaltemp.KOPP  = FALSE.
            END.
         END.
      END.     
      ELSE IF  karea > 300 THEN DO:
         FOR EACH konstvaltemp WHERE konstvaltemp.KONSKOD = gruppkod AND konstvaltemp.KTYPKOD =  typkod  AND konstvaltemp.KOPP = TRUE AND konstvaltemp.BB =  hjbenvar  NO-LOCK:      
            konstvaltemp.KOPP  = FALSE.
         END.
      END.
   END.
END PROCEDURE.


PROCEDURE bildbrwkon_UI :
   RUN selectfoc_UI (INPUT 14). 
   valtab = 1.
   RUN bild_UI.   
END PROCEDURE.

PROCEDURE bildbrwkb2_UI :
  RUN selectfoc_UI (INPUT 9). 
  valtab = 2.
  RUN bild_UI.   
END PROCEDURE.
PROCEDURE bildbrwkb3_UI :
   RUN selectfoc_UI (INPUT 10). 
   valtab = 2.
   RUN bild_UI.
END PROCEDURE.

PROCEDURE bildbrwkb4_UI :
 RUN selectfoc_UI (INPUT 11). 
  valtab = 2.
  RUN bild_UI.
END PROCEDURE.

PROCEDURE bildbrwkb5_UI :
  RUN selectfoc_UI (INPUT 12). 
  valtab = 2.
  RUN bild_UI.
END PROCEDURE.

PROCEDURE bildbrwkb6_UI :
  RUN selectfoc_UI (INPUT 13). 
  valtab = 2.
  RUN bild_UI.
END PROCEDURE.

PROCEDURE dbclickbrwhlev_UI :
   RUN btnover_UI.
   /*
   {muswait.i}
   satsmtrl = TRUE.   
   RUN selectfoc_UI (INPUT 22). 
   RUN SATSINNEU.W (INPUT ROWID(mtrltemp)).
   satsmtrl = FALSE.
   {musarrow.i}   
   */
END PROCEDURE.

PROCEDURE infoES_UI :
   DEFINE INPUT  PARAMETER valenr AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER brwname AS CHARACTER NO-UNDO.
   DEFINE VARIABLE valbrw AS INTEGER NO-UNDO.  
   DEFINE VARIABLE levnamnvar AS CHARACTER NO-UNDO.
   IF brwname = "BRW_MTRL" THEN valbrw = 1.  
   IF brwname = "BRW_HLEV" THEN valbrw = 2. 
   IF brwname = "BRW_SATS" THEN valbrw = 3. 
   IF brwname = "BRW_STOLP" THEN valbrw = 4.
   
   /*GÅR TILL ELEKTROSKANDIAS HEMSIDA*/      
   IF valbrw = 1 THEN DO: 
      RUN selectfoc_UI (INPUT 15). 
      IF NOT AVAILABLE list_mtrl THEN RETURN.
      valenr = list_mtrl.ENR.
      FIND FIRST levtemp WHERE levtemp.LEVKOD = list_mtrl.LEVKOD
      NO-LOCK NO-ERROR.      
   END.
   ELSE IF valbrw = 2 THEN DO:
      RUN selectfoc_UI (INPUT 22). 
      IF NOT AVAILABLE mtrltemp THEN RETURN.
      valenr = mtrltemp.ENR.
      FIND FIRST levtemp WHERE levtemp.LEVKOD = mtrltemp.LEVKOD
      NO-LOCK NO-ERROR.            
   END.
   ELSE IF valbrw = 3 THEN DO:
      RUN selectfoc_UI (INPUT 23). 
      IF NOT AVAILABLE satstemp THEN RETURN.
      valenr = satstemp.KOD.
      FIND FIRST levtemp WHERE levtemp.LEVKOD = satstemp.LEVKOD
      NO-LOCK NO-ERROR.      
   END.
   ELSE IF valbrw = 4 THEN DO:
      RUN selectfoc_UI (INPUT 24). 
      IF NOT AVAILABLE berstolptemp THEN RETURN.
      valenr = berstolptemp.ENR.
      FIND FIRST levtemp WHERE levtemp.LEVKOD = berstolptemp.LEVKOD
      NO-LOCK NO-ERROR.      
   END.
   IF status-ok THEN DO:   
      levnamnvar = levtemp.LEVNAMN.
      {LEVLANK.I}
   END.
   
END PROCEDURE.


PROCEDURE bildbrwb2_UI :
  RUN selectfoc_UI (INPUT 2). 
  valtab = 2.
  RUN bild_UI.
END PROCEDURE.

PROCEDURE bildbrwb3_UI :
   RUN selectfoc_UI (INPUT 3). 
   valtab = 2.
   RUN bild_UI.
END PROCEDURE.

PROCEDURE bildbrwb4_UI :
  RUN selectfoc_UI (INPUT 4). 
  valtab = 2.
  RUN bild_UI.
END PROCEDURE.

PROCEDURE bildbrwb5_UI :
  RUN selectfoc_UI (INPUT 5). 
  valtab = 2.
  RUN bild_UI.
END PROCEDURE.
PROCEDURE bildbrwb6_UI :
  RUN selectfoc_UI (INPUT 6). 
  valtab = 2.
  RUN bild_UI.
END PROCEDURE.


PROCEDURE bild_UI :
   IF valtab = 1 THEN DO:   
      varbild = konsttemp.KTYPKOD.
      RUN berbildhmt_UI IN bervalapph (INPUT konsttemp.KTYPKOD,OUTPUT TABLE berbildtemp).  
      FIND FIRST berbildtemp WHERE berbildtemp.KTYPKOD = konsttemp.KTYPKOD 
      USE-INDEX KOD NO-LOCK NO-ERROR.
      IF NOT AVAILABLE berbildtemp THEN DO:
         MESSAGE "Det finns ingen bild att visa för vald konstruktion."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         RETURN.
      END.   
   END.
   ELSE DO:
      varbild = konstvaltemp.KVALKOD.
      RUN berbildhmt_UI IN bervalapph (INPUT konstvaltemp.KVALKOD,OUTPUT TABLE berbildtemp).  
      FIND FIRST berbildtemp WHERE berbildtemp.KTYPKOD = konstvaltemp.KVALKOD 
      USE-INDEX KOD NO-LOCK NO-ERROR.
      IF NOT AVAILABLE berbildtemp THEN DO:
         MESSAGE "Det finns ingen bild att visa för vald konstruktion."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         RETURN.
      END.   
   END.
   {AVBGOM2.I}
   RUN BERBILDU.W.
   {AVBFRAM2.I}   
END PROCEDURE.
PROCEDURE main_UI :
   ASSIGN 
   RAD_KOMP:RADIO-BUTTONS = "Skapa ny konstruktion,1,Komplettera konstruktion,2,Komplettera med endast mtrl, 3".
   
   WINDOW-3:VIRTUAL-HEIGHT-PIXELS = SESSION:WORK-AREA-HEIGHT-PIXELS.    
   WINDOW-3:VIRTUAL-WIDTH-PIXELS = SESSION:WORK-AREA-WIDTH-PIXELS.
   {muswait.i}
   EMPTY TEMP-TABLE kmtrltemp NO-ERROR. 
   EMPTY TEMP-TABLE berstolptemp NO-ERROR. 
   {ALLSTARTDYN.I}
   EMPTY TEMP-TABLE mtrltemp NO-ERROR. 
   EMPTY TEMP-TABLE satstemp NO-ERROR. 
   EMPTY TEMP-TABLE list_mtrl NO-ERROR. 
   EMPTY TEMP-TABLE kon_val NO-ERROR. 
   EMPTY TEMP-TABLE kon_id NO-ERROR.
   EMPTY TEMP-TABLE berid2temp NO-ERROR. 
   EMPTY TEMP-TABLE kopp_lina NO-ERROR. 
   EMPTY TEMP-TABLE fri_temp NO-ERROR. 

    
    
   /*
   EMPTY TEMP-TABLE kab_temp NO-ERROR.
   EMPTY TEMP-TABLE punkt_temp NO-ERROR.
   EMPTY TEMP-TABLE schakt_temp NO-ERROR.
   EMPTY TEMP-TABLE skydd_temp NO-ERROR.
   */ 
   EMPTY TEMP-TABLE kalk_temp NO-ERROR.     
   EMPTY TEMP-TABLE markgrupp NO-ERROR. 
   TOG_MARKAV:ROW = TOG_RATT:ROW + TOG_RATT:HEIGHT + 0.1. 
   ASSIGN
   CMB_VAL:LIST-ITEMS = "".
   musz = FALSE.   
   IF globforetag = "UMEA" THEN DO:
      ASSIGN
      status-ok = RAD_MTRL:DELETE("Transf.").
      ASSIGN
      status-ok = RAD_MTRL:ADD-LAST("Kablar",3).
   END.
   status-ok = CMB_JURP:ADD-FIRST("Alla").
   FOR EACH jurperstemp:
      status-ok = CMB_JURP:ADD-LAST(jurperstemp.NAMN).
   END.
   CMB_JURP:SCREEN-VALUE = "Alla".  
   status-ok = CMB_AVD:ADD-FIRST("Alla").
   FOR EACH avdtemp:
      status-ok = CMB_AVD:ADD-LAST(avdtemp.AVDELNINGNAMN).
   END.
   CMB_AVD:SCREEN-VALUE = "Alla".  
   ASSIGN 
   status-ok = CMB_OMR:ADD-FIRST("Alla").
   CMB_OMR:SCREEN-VALUE = "Alla".
   FOR EACH omrtemp:
      status-ok = CMB_OMR:ADD-LAST(omrtemp.NAMN).
   END.
   FIND FIRST omrtemp WHERE omrtemp.OMRADE = valomrade 
   USE-INDEX OMR NO-LOCK NO-ERROR.
   IF AVAILABLE omrtemp THEN DO:
      ASSIGN CMB_OMR:SCREEN-VALUE = omrtemp.NAMN.       
   END.
   IF globforetag = "cgran" THEN DO:
      /*eon och fortum avtal*/        
      RUN hamtprio_UI IN bervalapph (INPUT Guru.GlobalaVariabler:plusaonr,INPUT Guru.GlobalaVariabler:plusdnr,OUTPUT aoprio).
      IF aoprio = 2  THEN DO:
         /*fortum*/
         FOR EACH konstgrptemp WHERE SUBSTRING(konstgrptemp.BENAMNING,1,2) = "FM"  USE-INDEX ORD NO-LOCK:
            IF musz = FALSE THEN DO:
               FIND FIRST konsttemp WHERE konsttemp.KONSKOD = konstgrptemp.KONSKOD NO-LOCK NO-ERROR.
               IF AVAILABLE konsttemp THEN DO:       
                  RUN laddacmbvalkon_UI.
                  ASSIGN
                  status-ok = CMB_VAL:ADD-LAST(konstgrptemp.BENAMNING)
                  CMB_VAL:SCREEN-VALUE = konstgrptemp.BENAMNING
                  musz = TRUE.              
               END.           
            END.
            ELSE DO:
               FIND FIRST konsttemp WHERE konsttemp.KONSKOD = konstgrptemp.KONSKOD NO-LOCK NO-ERROR.
               IF AVAILABLE konsttemp THEN DO:
                  RUN laddacmbvalkon_UI.
                  status-ok = CMB_VAL:ADD-LAST(konstgrptemp.BENAMNING).            
               END.
            END.                      
         END.
      END.
      ELSE DO:
         FOR EACH konstgrptemp WHERE SUBSTRING(konstgrptemp.BENAMNING,1,2) NE "FM"   USE-INDEX ORD NO-LOCK:
            IF musz = FALSE THEN DO:
               FIND FIRST konsttemp WHERE konsttemp.KONSKOD = konstgrptemp.KONSKOD NO-LOCK NO-ERROR.
               IF AVAILABLE konsttemp THEN DO:       
                  RUN laddacmbvalkon_UI.
                  ASSIGN
                  status-ok = CMB_VAL:ADD-LAST(konstgrptemp.BENAMNING)    
                  CMB_VAL:SCREEN-VALUE = konstgrptemp.BENAMNING
                  musz = TRUE.              
               END.           
            END.
            ELSE DO:
               FIND FIRST konsttemp WHERE konsttemp.KONSKOD = konstgrptemp.KONSKOD NO-LOCK NO-ERROR.
               IF AVAILABLE konsttemp THEN DO:
                  RUN laddacmbvalkon_UI.         
                  status-ok = CMB_VAL:ADD-LAST(konstgrptemp.BENAMNING).            
               END.
            END.                      
         END.
      END.      
   END.
   ELSE DO:   
      FOR EACH konstgrptemp USE-INDEX ORD NO-LOCK:
         IF musz = FALSE THEN DO:
            FIND FIRST konsttemp WHERE konsttemp.KONSKOD = konstgrptemp.KONSKOD NO-LOCK NO-ERROR.
            IF AVAILABLE konsttemp THEN DO:       
               RUN laddacmbvalkon_UI.
               ASSIGN
               status-ok = CMB_VAL:ADD-LAST(konstgrptemp.BENAMNING)    
               CMB_VAL:SCREEN-VALUE = konstgrptemp.BENAMNING
               musz = TRUE.              
            END.           
         END.
         ELSE DO:
            FIND FIRST konsttemp WHERE konsttemp.KONSKOD = konstgrptemp.KONSKOD NO-LOCK NO-ERROR.
            IF AVAILABLE konsttemp THEN DO:
               RUN laddacmbvalkon_UI.         
               status-ok = CMB_VAL:ADD-LAST(konstgrptemp.BENAMNING).            
            END.
         END.                      
      END.
   END.    
   IF CMB_VAL:NUM-ITEMS > 15 THEN CMB_VAL:INNER-LINES = 15.
   ELSE CMB_VAL:INNER-LINES = CMB_VAL:NUM-ITEMS.
   CMB_VALANDKONST:INNER-LINES = CMB_VAL:NUM-ITEMS.  
   ASSIGN
   CMB_JURP:LABEL = Guru.Konstanter:gjuk 
   CMB_AVD:LABEL= Guru.Konstanter:gavdk
   CMB_OMR:LABEL = Guru.Konstanter:gomrk.
   
   
   BTN_NYKOD:LOAD-IMAGE("BILDER\xbtn_kalkyl.gif") NO-ERROR.
   MBTN_KONST:LOAD-IMAGE("BILDER\xbtn_kons.gif") NO-ERROR.
   MBTN_ID:LOAD-IMAGE("BILDER\xbtn_id.gif") NO-ERROR.
   MBTN_ANM:LOAD-IMAGE("BILDER\xbtn_anm.gif") NO-ERROR.
   MBTN_MTRL:LOAD-IMAGE("BILDER\xbtn_mtrl.gif") NO-ERROR.  
   MBTN_DOK:LOAD-IMAGE("BILDER\xbtn_bild.gif") NO-ERROR.
   FBTN_KOPI:LOAD-IMAGE("BILDER\xbtn_kopikon.gif") NO-ERROR.
   FBTN_KSKAP:LOAD-IMAGE("BILDER\xbtn_skap.gif") NO-ERROR.
   FBTN_FRIKORT:LOAD-IMAGE("BILDER\xbtn_frikort.gif") NO-ERROR.
   MBTN_KALK:LOAD-IMAGE("BILDER\xbtn_kalkkod.gif") NO-ERROR.
   MBTN_ANDORD:LOAD-IMAGE("BILDER\xbtn_ord.gif") NO-ERROR.  
   FBTN_LIN:LOAD-IMAGE("BILDER\xbtn_linkab.gif") NO-ERROR.
   FBTN_UPPL:LOAD-IMAGE("BILDER\xbtn_uppl.gif") NO-ERROR.     
   MBTN_LIST:LOAD-IMAGE("BILDER\xbtn_listor.gif") NO-ERROR.  
   FBTN_SNABB:LOAD-IMAGE("BILDER\xbtn_sspara.gif") NO-ERROR.
   MBTN_ATG:LOAD-IMAGE("BILDER\xbtn_atg.gif") NO-ERROR.
   MBTN_ATERGA:LOAD-IMAGE("BILDER\Aterga.jpg") NO-ERROR.
   MBTN_FLYG:LOAD-IMAGE("BILDER\xbtn_flygvarn.gif") NO-ERROR.  
   MBTN_INK:LOAD-IMAGE("BILDER\xbtn_inkop.gif") NO-ERROR.
   MBTN_SCHAKT:LOAD-IMAGE("BILDER\berschakt.gif") NO-ERROR.
   BTN_GRUNDUPP:TOOLTIP = "Hämtar grundupplägget av Kalkylkoder.".
   FBTN_SNABB:HEIGHT-CHAR = MBTN_ATG:HEIGHT-CHAR.
   FBTN_SNABB:WIDTH-CHAR = MBTN_ATG:WIDTH-CHAR.
   MBTN_ATERGA:HIDDEN = TRUE.  
  IF Guru.Konstanter:hoppsekvar[3] = TRUE THEN DO:
      ASSIGN
      status-ok = RAD_VAL:ADD-LAST("Kalkyl",5).
      MBTN_KALK:HIDDEN = FALSE.
      IF Guru.Konstanter:kalk2sekvar[2] = TRUE THEN DO:
         BTN_NYKOD:HIDDEN = FALSE.
         BTN_GRUNDUPP:HIDDEN = FALSE.
      END.   
      ELSE DO:
         BTN_NYKOD:HIDDEN = TRUE.
         BTN_GRUNDUPP:HIDDEN = TRUE.
      END.    
   END.
   ELSE DO:
     MBTN_KALK:HIDDEN = TRUE.
     BTN_NYKOD:HIDDEN = TRUE.
     BTN_GRUNDUPP:HIDDEN = TRUE.
   END. 
     /*ska INTE köras!*/
   BTN_GRUNDUPP:HIDDEN = TRUE.  
   MBTN_INK:HIDDEN = TRUE. 
   IF Guru.Konstanter:beresekvar[6] = TRUE THEN DO:
      IF Guru.GlobalaVariabler:plusaonr = ? THEN.
      ELSE IF Guru.GlobalaVariabler:plusaonr = "" THEN.
      ELSE DO:
         ASSIGN
         MBTN_INK:HIDDEN = FALSE.
      END.                            
   END.
   MBTN_SCHAKT:HIDDEN = TRUE. 
   IF globforetag = "ELPA" OR globforetag = "GRAN" OR Guru.Konstanter:beresekvar[13]  = TRUE THEN DO:
      ASSIGN
      MBTN_SCHAKT:HIDDEN = FALSE.
                                 
   END.   
                
   status-ok = RAD_VAL:ADD-LAST("bilder",6).
   status-ok = RAD_VAL:ADD-LAST("inget",99).
   ASSIGN
   musz = FALSE
   avbrytvar = FALSE
   idenable = FALSE
   anmenable = FALSE
   bildenable = FALSE
   mtrlenable = FALSE
   kalkenable = FALSE.  
   
   IF Guru.Konstanter:globanv = CHR(69) + CHR(76) + CHR(80) + CHR(65) + CHR(79) AND globforetag = "cELPA" THEN DO:
      MESSAGE Guru.GlobalaVariabler:KorBerDS "Köra DS?"
      VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO TITLE "Meddelande" UPDATE svards AS LOGICAL.   
      Guru.GlobalaVariabler:KorBerDS = svards.
   END.    
   
   /*hämtar beredning*/
   IF Guru.GlobalaVariabler:KorBerDS = TRUE THEN DO: 
      RUN laddaBerDs_UI.
   END.            
   ELSE IF nyvar = FALSE THEN DO: 
      RUN gammal_UI.      
   END.    
   
   ASSIGN    
   counter = 0
   counter2 = 0   
   FILL-IN-TEXT:SCREEN-VALUE = "Anmärkning:". 
   RUN hmtlev_UI.   
   
   status-ok = CMB_LEV:DELETE("0").
   FIND FIRST levtemp WHERE levtemp.LEVKOD = vald_kundlev
   USE-INDEX LEV NO-LOCK NO-ERROR.
   ASSIGN
   status-ok = CMB_LEV:ADD-LAST(levtemp.LEVNAMN)
   CMB_LEV:SCREEN-VALUE = levtemp.LEVNAMN
   huvudlev = levtemp.LEVNAMN.
   FOR EACH levtemp WHERE levtemp.LEVKOD NE vald_kundlev AND
   levtemp.LEVKOD NE "0" AND levtemp.BORTTAG = FALSE USE-INDEX LEV NO-LOCK:
      /*Niklas personlig spec_mtrl*/
      IF levtemp.LEVKOD = "99" THEN DO:
         status-ok = CMB_LEV:ADD-LAST(globanv + " " + levtemp.LEVNAMN).
         status-ok = CMB_LEV:ADD-LAST(levtemp.LEVNAMN).
      END.
      ELSE DO:
         status-ok = CMB_LEV:ADD-LAST(levtemp.LEVNAMN).
      END.      
   END.
   FIND FIRST huvlevtemp WHERE huvlevtemp.DEP-NR = 999 NO-LOCK NO-ERROR.
   FOR EACH levtemp WHERE
   levtemp.LEVKOD NE "0" AND levtemp.LEVKOD NE "99" AND
   levtemp.BORTTAG = FALSE USE-INDEX LEV NO-LOCK:
      IF AVAILABLE huvlevtemp AND  huvlevtemp.LEVKOD = levtemp.LEVKOD THEN status-ok = CMB_LEV:ADD-LAST("Sats " + levtemp.LEVNAMN).
      ELSE IF levtemp.LEVKOD = vald_kundlev THEN status-ok = CMB_LEV:ADD-LAST("Sats " + levtemp.LEVNAMN).             
   END.
   /* borttaget 20210111 Lena favoriter istället
   status-ok = CMB_LEV:ADD-LAST("Sparade utsökningar").*/
   status-ok = CMB_LEV:ADD-LAST("Alla leverantörer").
   ASSIGN
   vald_lev = vald_kundlev
   valet = FALSE
   sok = FALSE
   RAD_MTRL:SCREEN-VALUE = "1"
   satsmtrl = FALSE
   satstrue = FALSE
   RAD_VAL:SCREEN-VALUE = "1".
   levinlast = "".
   RUN levinlast_UI (INPUT vald_lev,OUTPUT levinlast).
   RUN setorgtitle_UI IN brwproc[22] (INPUT "Materiellista " + huvudlev + levinlast).                  
   IF globforetag = "GRAN" OR globforetag = "NAEK" OR globforetag = "ELKB" OR globforetag = "GKAL"  OR globforetag = "CPOMA" THEN DO:
      ASSIGN      
      FILL-IN-SUNDLABEL:SCREEN-VALUE = "Littera:".
   END. 
   RUN laddadir_UI IN bervalapph (INPUT Guru.Konstanter:globanv, OUTPUT dirnamn).
   BTN_SOLEN:HIDDEN = TRUE.
   
   
    
   ASSIGN
   BRW_B2:HIDDEN = TRUE
   FILL-IN-B2:HIDDEN = TRUE
   BRW_B3:HIDDEN = TRUE
   FILL-IN-B3:HIDDEN = TRUE
   BRW_B4:HIDDEN = TRUE
   FILL-IN-B4:HIDDEN = TRUE
   BRW_B5:HIDDEN = TRUE
   FILL-IN-B5:HIDDEN = TRUE
   BRW_B6:HIDDEN = TRUE
   FILL-IN-B6:HIDDEN = TRUE.
       
   RUN bildkomb_UI IN bervalapph (INPUT valomrade, INPUT valaonr, OUTPUT TABLE bildkomb). 
   FOR EACH kon_val WHERE NO-LOCK:
      SUBSTRING(kon_val.EXTRA3,1,1) = kon_val.EXTRA2.   
   END.
   FOR EACH bildkomb,
   EACH kon_val WHERE kon_val.NUM = bildkomb.NUM:
      ASSIGN
      SUBSTRING(kon_val.EXTRA3,2,1) = bildkomb.KOMB
      SUBSTRING(kon_val.EXTRA3,3,1) = bildkomb.BILD.
   END.
   RUN kondispstart_UI.
   APPLY "VALUE-CHANGED" TO CMB_VAL .
              /*
   FBTN_KSKAP:HIDDEN  = TRUE.
                */
   
   RAD_VAL:HIDDEN = TRUE.
   APPLY "VALUE-CHANGED" TO RAD_VAL .
   RUN buttplace_UI.
   
   RUN btnvit_UI (INPUT MBTN_KONST).
   {musarrow.i}
   RUN fyllaledning_UI. /*ny för cmb_del  (ledning) */
  
END PROCEDURE.
PROCEDURE hmtlev_UI :
   RUN hamtlev_UI IN bervalapph (INPUT valomrade, INPUT valaonr, OUTPUT vald_lev).   
   IF vald_lev = "" THEN DO:
      xtillyvar = "". 
      FIND FIRST huvlevtemp WHERE huvlevtemp.DEP-NR = 999 NO-LOCK NO-ERROR.
      IF AVAILABLE huvlevtemp THEN DO:
         vald_kundlev = huvlevtemp.LEVKOD.
      END.
      ELSE DO:
         FIND FIRST levtemp WHERE levtemp.LEVKOD NE "0"
         AND levtemp.BORTTAG = FALSE NO-LOCK NO-ERROR.
         vald_kundlev = levtemp.LEVKOD.
      END.
   END.
   ELSE DO:
      ASSIGN
      xtillyvar = vald_lev
      vald_kundlev = vald_lev.
   END.
END PROCEDURE.
PROCEDURE laddacmbvalkon_UI :
   IF LOOKUP(STRING(konstgrptemp.KONSKOD),Guru.Konstanter:varforetypchar[5]) = 0 THEN DO:
      IF konstgrptemp.KONSKOD = 0 THEN.
      ELSE status-ok = CMB_VALANDKONST:ADD-LAST(konstgrptemp.BENAMNING).
   END.   
END PROCEDURE.
PROCEDURE buttplace_UI :
   Guru.GlobalaVariabler:collefth = MBTN_KONST.
   Guru.GlobalaVariabler:colrighth = MBTN_ID.           
   RUN buttcolm_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).  
   Guru.GlobalaVariabler:colrighth = MBTN_ANM.           
   RUN buttcolm_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).   
   Guru.GlobalaVariabler:colrighth = MBTN_MTRL.           
   RUN buttcolm_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).   
   Guru.GlobalaVariabler:colrighth = MBTN_DOK.           
   RUN buttcolm_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).   
   Guru.GlobalaVariabler:colrighth = FBTN_KOPI.           
   RUN buttcolm_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).   
   Guru.GlobalaVariabler:colrighth = FBTN_KSKAP.           
   RUN buttcolm_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).   
   
   /*
   Guru.GlobalaVariabler:colrighth = FBTN_FRIKORT.           
   RUN buttcolm_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).   
   */
   IF Guru.Konstanter:hoppsekvar[3] = TRUE THEN DO:
      Guru.GlobalaVariabler:colrighth = MBTN_KALK.           
      RUN buttcolm_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).   
   END.
   ELSE MBTN_KALK:HIDDEN  = TRUE.      
   Guru.GlobalaVariabler:colrighth =  MBTN_ANDORD.           
   RUN buttcolm_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   RUN finnsberlinkab_UI IN bervalapph (INPUT valomrade, INPUT valaonr, OUTPUT musz).
   
   IF musz = TRUE THEN DO:
      musz = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_LIN.           
      RUN buttcolm_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).   
   END.
   ELSE DO:
      FBTN_LIN:HIDDEN = TRUE.
      BTN_LINKAB:HIDDEN  = TRUE. 
      /*
      BTN_LINKABSM:HIDDEN = FBTN_LIN:HIDDEN.
      */
   END.    
   Guru.GlobalaVariabler:colrighth = FBTN_UPPL.           
   RUN buttcolm_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).   
   IF Guru.Konstanter:beresekvar[5] = TRUE THEN DO:
      Guru.GlobalaVariabler:colrighth = MBTN_LIST.           
      RUN buttcolm_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).   
   END.
   ELSE MBTN_LIST:HIDDEN  = TRUE.      
   Guru.GlobalaVariabler:colrighth = MBTN_ATG.           
   RUN buttcolm_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).   
   Guru.GlobalaVariabler:colrighth = MBTN_FLYG.           
   RUN buttcolm_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).   
   IF MBTN_INK:HIDDEN = TRUE THEN.
   ELSE DO:
      Guru.GlobalaVariabler:colrighth = MBTN_INK. 
      RUN buttcolm_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.   
   IF globforetag = "ELPA" OR globforetag = "GRAN" OR Guru.Konstanter:beresekvar[13]  = TRUE THEN DO:
      Guru.GlobalaVariabler:colrighth = MBTN_SCHAKT.           
      RUN buttcolm_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.       
   
  
   IF FRAME-BARABRED:WIDTH-CHARS - (Guru.GlobalaVariabler:collefth:COLUMN + 7.5 + 7.5) <  BTN_OK:WIDTH-CHARS THEN DO:
      BTN_OK:WIDTH-CHARS = FRAME-BARABRED:WIDTH-CHARS - (Guru.GlobalaVariabler:collefth:COLUMN + 7.5 + 7.5).
      BTN_OK:COLUMN = FRAME-BARABRED:WIDTH-CHARS - BTN_OK:WIDTH-CHARS.
   END.   
   ELSE DO:
      BTN_OK:WIDTH-CHARS = 14.5.
      BTN_OK:COLUMN = FRAME-BARABRED:WIDTH-CHARS - BTN_OK:WIDTH-CHARS.
   END.   
  FBTN_SNABB:COLUMN = BTN_OK:COLUMN - FBTN_SNABB:WIDTH-CHARS.
  BTN_AVB:WIDTH-CHARS = BTN_OK:WIDTH-CHARS.  
  BTN_AVB:COLUMN = BTN_OK:COLUMN.
 
END PROCEDURE.
PROCEDURE allstartbrw_UI :
   DEFINE VARIABLE kundlistnr AS INTEGER NO-UNDO.
   IF Guru.Konstanter:appcon THEN DO:
      RUN EXTRADATAHMT.P PERSISTENT SET edataapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT.                  
   END.
   ELSE DO:
      RUN EXTRADATAHMT.P PERSISTENT SET edataapph.      
   END.
   RUN spartid_UI.
   RUN spartidh_UI (OUTPUT spartidvar).
   RUN DYNBRW.P PERSISTENT SET brwproc[1] (INPUT BRW_ANM).
   RUN DYNBRW.P PERSISTENT SET brwproc[2] (INPUT BRW_B2).
   RUN dynprogextra IN brwproc[2] (INPUT "rowdispextra_UI",INPUT THIS-PROCEDURE).
   RUN rowdispextrakor IN  brwproc[2] (INPUT TRUE).
   RUN DYNBRW.P PERSISTENT SET brwproc[3] (INPUT BRW_B3).
   RUN dynprogextra IN brwproc[3] (INPUT "rowdispextra_UI",INPUT THIS-PROCEDURE).
   RUN rowdispextrakor IN  brwproc[3] (INPUT TRUE).
   RUN DYNBRW.P PERSISTENT SET brwproc[4] (INPUT BRW_B4).
   RUN DYNBRW.P PERSISTENT SET brwproc[5] (INPUT BRW_B5).
   RUN DYNBRW.P PERSISTENT SET brwproc[6] (INPUT BRW_B6).
   RUN DYNBRW.P PERSISTENT SET brwproc[7] (INPUT BRW_ANDRAK).       
   RUN wversion_UI IN brwproc[7] (INPUT 2).
   RUN DYNBRW.P PERSISTENT SET brwproc[8] (INPUT BRW_KALK).
   RUN DYNBRW.P PERSISTENT SET brwproc[9] (INPUT BRW_KB2).
   RUN dynprogextra IN brwproc[9] (INPUT "rowdispextra_UI",INPUT THIS-PROCEDURE).
   RUN rowdispextrakor IN  brwproc[9] (INPUT TRUE).
   RUN DYNBRW.P PERSISTENT SET brwproc[10](INPUT BRW_KB3).
   RUN dynprogextra IN brwproc[10] (INPUT "rowdispextra_UI",INPUT THIS-PROCEDURE).
   RUN rowdispextrakor IN  brwproc[10] (INPUT TRUE).
   RUN DYNBRW.P PERSISTENT SET brwproc[11](INPUT BRW_KB4).
   RUN DYNBRW.P PERSISTENT SET brwproc[12](INPUT BRW_KB5).
   RUN DYNBRW.P PERSISTENT SET brwproc[13](INPUT BRW_KB6).
   RUN DYNBRW.P PERSISTENT SET brwproc[14](INPUT BRW_KON).
   RUN dynprogextra IN brwproc[14] (INPUT "rowdispextra_UI",INPUT THIS-PROCEDURE).
   RUN rowdispextrakor IN  brwproc[14] (INPUT TRUE).   
  
   RUN DYNBRW.P PERSISTENT SET brwproc[15](INPUT BRW_MTRL).
   RUN dynprogextra IN brwproc[15] (INPUT "rowdispextra_UI",INPUT THIS-PROCEDURE).
   RUN rowdispextrakor IN  brwproc[15] (INPUT TRUE).   
   RUN StartSokEnrLev_UI IN brwproc[15] (INPUT THIS-PROCEDURE). 
   RUN addmenuitem_UI IN brwproc[15] (INPUT BRW_MTRL:HANDLE,INPUT "Satsinformation",INPUT "btnsats_UI").
   RUN addmenuitem_UI IN brwproc[15] (INPUT BRW_MTRL:HANDLE,INPUT "Import Excel - enr i första kolumn antal i andra kolumn leverantör i tredje kolumn(blank = vald leverantör beredning)",INPUT "btnimpenr_UI").
   RUN addmenuitem_UI IN brwproc[15] (INPUT BRW_MTRL:HANDLE,INPUT "Lägg till enr i favoriter",INPUT "sparaaofavoritervmtrl_UI"). 
   RUN DYNBRW.P PERSISTENT SET brwproc[18] (INPUT BRW_TAB1).
   RUN DYNBRW.P PERSISTENT SET brwproc[19] (INPUT BRW_TAB2).
   RUN DYNBRW.P PERSISTENT SET brwproc[20] (INPUT BRW_TAB3).
   
   RUN DYNBRW.P PERSISTENT SET brwproc[21] (INPUT BRW_VAL). 
   RUN wversion_UI IN brwproc[21] (INPUT 2).
   IF globforetag = "GRAN" THEN DO:
      RUN addmenuitem_UI IN brwproc[21] (INPUT BRW_VAL:HANDLE,INPUT "Import byte kabelskåp från mall",INPUT "KskImpMall_UI").
   END.   
   RUN DYNBRW.P PERSISTENT SET brwproc[22] (INPUT BRW_HLEV). 
   RUN StartSokEnrLev_UI IN brwproc[22] (INPUT THIS-PROCEDURE).
   /*RUN addmenuitem_UI IN brwproc[22] (INPUT BRW_HLEV:HANDLE,INPUT "Markerade poster till Sparade utsökningar",INPUT "tidigaresok_UI").*/
   RUN addmenuitem_UI IN brwproc[22] (INPUT BRW_HLEV:HANDLE,INPUT "Lägg till enr i favoriter",INPUT "sparaaofavoritermtrl_UI").
      
   IF Guru.Konstanter:globnetprissortvar = 1 THEN  RUN setcolindex_UI IN brwproc[22] (INPUT "kund DESCENDING by enr"). 
   /*
    RUN setsortvar_UI IN brwproc[22] (INPUT " by kund DESCENDING by enr").
   */
  
   
   RUN dynprogextra IN brwproc[22] (INPUT "rowdispextra_UI",INPUT THIS-PROCEDURE).
   RUN rowdispextrakor IN  brwproc[22] (INPUT TRUE).   
   RUN DYNBRW.P PERSISTENT SET brwproc[23](INPUT BRW_SATS).  
   /*
   IF Guru.Konstanter:globnetprissortvar = 1 THEN  RUN setcolindex_UI IN brwproc[23] (INPUT "kund DESCENDING by enr").
   */
   RUN StartSokEnrLev_UI IN brwproc[23] (INPUT THIS-PROCEDURE).
   RUN DYNBRW.P PERSISTENT SET brwproc[24](INPUT BRW_STOLP).
   RUN StartSokEnrLev_UI IN brwproc[24] (INPUT THIS-PROCEDURE).
   IF Guru.Konstanter:globnetprissortvar = 1 THEN  RUN setcolindex_UI IN brwproc[24] (INPUT "kund DESCENDING BY ANTAL by enr").   
   ELSE RUN setcolindex_UI IN brwproc[24] (INPUT "ANTAL  by enr ").          /*vsab lagrar trafostorlek i antal*/
   RUN dynprogextra IN brwproc[24] (INPUT "rowdispextra_UI",INPUT THIS-PROCEDURE).
   RUN rowdispextrakor IN  brwproc[24] (INPUT TRUE).   
   RUN addfillin_UI IN brwproc[24] (INPUT FILL-IN-ENRSTOLP, INPUT "ENR"). 
   RUN addfillin_UI IN brwproc[24] (INPUT FILL-IN-BENSTOLP, INPUT "BENAMNING").
   
   RUN DYNBRW.P PERSISTENT SET brwproc[25] (INPUT BRW_BILD).   
   RUN setcolindex_UI IN brwproc[23] (INPUT "KOD BY ENR BY ENR2").
   
   RUN DYNBRW.P PERSISTENT SET brwproc[26] (INPUT BRW_SOKMTRLF). 
   IF Guru.Konstanter:globnetprissortvar = 1 THEN  RUN setcolindex_UI IN brwproc[26] (INPUT "kund DESCENDING by enr"). 
   RUN dynprogextra IN brwproc[26] (INPUT "rowdispextra_UI",INPUT THIS-PROCEDURE).
   RUN rowdispextrakor IN  brwproc[26] (INPUT TRUE).
   RUN DYNBRW.P PERSISTENT SET brwproc[27](INPUT BRW_KONANDKONST).
   
   RUN DYNBRW.P PERSISTENT SET brwproc[28](INPUT BRW_ANDKONST).
   RUN wversion_UI IN brwproc[28] (INPUT 2).     
   RUN DYNBRW.P PERSISTENT SET brwproc[29](INPUT BRW_KALAKONS).
   RUN setshiftcol_UI IN brwproc[brwNrandkonst] (INPUT FALSE).
   
   RUN setshiftcol_UI IN brwproc[21] (INPUT FALSE).
   RUN setcolindex_UI IN brwproc[2] (INPUT "ORDNING"). 
   RUN setcolindex_UI IN brwproc[3] (INPUT "ORDNING"). 
   RUN setcolindex_UI IN brwproc[4] (INPUT "ORDNING"). 
   RUN setcolindex_UI IN brwproc[5] (INPUT "ORDNING"). 
   RUN setcolindex_UI IN brwproc[6] (INPUT "ORDNING"). 
   RUN setcolindex_UI IN brwproc[8] (INPUT "NUM"). 
   RUN setcolindex_UI IN brwproc[9] (INPUT "ORDNING"). 
   RUN setcolindex_UI IN brwproc[10] (INPUT "ORDNING"). 
   RUN setcolindex_UI IN brwproc[11] (INPUT "ORDNING"). 
   RUN setcolindex_UI IN brwproc[12] (INPUT "ORDNING"). 
   RUN setcolindex_UI IN brwproc[13] (INPUT "ORDNING"). 
   RUN setcolindex_UI IN brwproc[14] (INPUT "ORDNING").
    
   RUN setcolindex_UI IN brwproc[15] (INPUT "ENR").
   RUN setcolindex_UI IN brwproc[21] (INPUT "ORD").
   RUN setcolindex_UI IN brwproc[27] (INPUT "ORDNING"). 
   RUN setcolindex_UI IN brwproc[brwNrandkonst] (INPUT "SKAPNUM").
    
   RUN setcolindex_UI IN brwproc[25] (INPUT "NUM").
   RUN setpdatacolsort_UI IN brwproc[18] (INPUT "NAMN",INPUT "NAMN BY FORNR").
   RUN setpdatacolsort_UI IN brwproc[19] (INPUT "NAMN",INPUT "NAMN BY LINNR").
   RUN setpdatacolsort_UI IN brwproc[20] (INPUT "NAMN",INPUT "NAMN BY NATNR").
   RUN brwsetupstop_UI IN brwproc[2] (INPUT 1).
   RUN brwsetupstop_UI IN brwproc[3] (INPUT 1).
   RUN brwsetupstop_UI IN brwproc[4] (INPUT 1).
   RUN brwsetupstop_UI IN brwproc[5] (INPUT 1).
   RUN brwsetupstop_UI IN brwproc[6] (INPUT 1).
   RUN brwsetupstop_UI IN brwproc[brwNrandkonst] (INPUT 1).
   RUN brwsetupstop_UI IN brwproc[9] (INPUT 1).
   RUN brwsetupstop_UI IN brwproc[10] (INPUT 1).
   RUN brwsetupstop_UI IN brwproc[11] (INPUT 1).
   RUN brwsetupstop_UI IN brwproc[12] (INPUT 1).
   RUN brwsetupstop_UI IN brwproc[13] (INPUT 1).
   RUN brwsetupstop_UI IN brwproc[14] (INPUT 1).
   RUN brwsetupstop_UI IN brwproc[21] (INPUT 1).
     
   RUN setapplyvcframe IN framesizeh (INPUT FRAME-MTRL).
   IF Guru.Konstanter:appcon THEN DO:
      RUN BERVALAPPK.P PERSISTENT SET bervalapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
   END.
   ELSE DO:
      RUN BERVALAPPK.P PERSISTENT SET bervalapph.
   END.
   IF Guru.Konstanter:appcon THEN DO:
      RUN FINNSTABELL.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT (INPUT "KALKBEFB", OUTPUT logresult).
   END.
   ELSE DO:
      RUN FINNSTABELL.P (INPUT "KALKBEFB", OUTPUT logresult).
   END.
   
   IF logresult = TRUE THEN DO:
      IF Guru.Konstanter:appcon THEN DO:
         RUN KALKBPERSIST.P PERSISTENT SET kalkbefh ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
      END.
      ELSE DO:
         RUN KALKBPERSIST.P PERSISTENT SET kalkbefh.
      END.
   END.
   ELSE DO:
      IF Guru.Konstanter:appcon THEN DO:
         RUN KALKBEJPERSIST.P PERSISTENT SET kalkbefh ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
      END.
      ELSE DO:
         RUN KALKBEJPERSIST.P PERSISTENT SET kalkbefh.
      END.
   END.
   IF Guru.Konstanter:appcon THEN DO:
      RUN FRIKORTAPP.P PERSISTENT SET frikortapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
   END.
   ELSE DO:
      RUN FRIKORTAPP.P PERSISTENT SET frikortapph.
   END. 
   tthandle = TEMP-TABLE konstgrptemp:HANDLE.
   IF Guru.Konstanter:appcon THEN DO:
      RUN DYNLADDATEMP.P PERSISTENT SET laddaproch ON Guru.Konstanter:apphand TRANSACTION DISTINCT
         (INPUT-OUTPUT TABLE-HANDLE tthandle, INPUT "KONSTGRUPP", INPUT "").
   END.
   ELSE DO:
      RUN DYNLADDATEMP.P PERSISTENT SET laddaproch
         (INPUT-OUTPUT TABLE-HANDLE tthandle, INPUT "KONSTGRUPP", INPUT "").
   END.
   
   RUN addmenuitem2_UI IN brwproc[9] (INPUT BRW_KB2:HANDLE,INPUT "Avmarkera",INPUT  "avmark_UI",INPUT ?).
   RUN addmenuitem2_UI IN brwproc[10] (INPUT BRW_KB3:HANDLE,INPUT "Avmarkera",INPUT "avmark_UI",INPUT ?).
   RUN addmenuitem2_UI IN brwproc[11] (INPUT BRW_KB4:HANDLE,INPUT "Avmarkera",INPUT "avmark_UI",INPUT ?).
   RUN addmenuitem2_UI IN brwproc[12] (INPUT BRW_KB5:HANDLE,INPUT "Avmarkera",INPUT "avmark_UI",INPUT ?).
   RUN addmenuitem2_UI IN brwproc[13] (INPUT BRW_KB6:HANDLE,INPUT "Avmarkera",INPUT "avmark_UI",INPUT ?).
   
   
   tthandle = TEMP-TABLE bbenamntemp:HANDLE. 
   RUN laddatemp_UI IN laddaproch (INPUT-OUTPUT TABLE-HANDLE tthandle, INPUT "BBENAMNING", INPUT "").
   tthandle = TEMP-TABLE konsttemp:HANDLE.
   RUN laddatemp_UI IN laddaproch (INPUT-OUTPUT TABLE-HANDLE tthandle, INPUT "KONSTRUKTION", INPUT "").
   tthandle = TEMP-TABLE levtemp:HANDLE.
   
   RUN laddatemp_UI IN laddaproch (INPUT-OUTPUT TABLE-HANDLE tthandle, INPUT "LEVERANTOR", INPUT " WHERE LEVKOD NE '" + STRING(0) + "' AND BORTTAG = FALSE ").
   tthandle = TEMP-TABLE huvlevtemp:HANDLE.
   RUN laddatemp_UI IN laddaproch (INPUT-OUTPUT TABLE-HANDLE tthandle, INPUT "HUVUDLEV", INPUT "").
   tthandle = TEMP-TABLE berstolptemp:HANDLE.
   RUN laddatemp_UI IN laddaproch (INPUT-OUTPUT TABLE-HANDLE tthandle, INPUT "BERSTOLP", INPUT "").   
   tthandle = TEMP-TABLE parstolptemp:HANDLE.
   RUN laddatemp_UI IN laddaproch (INPUT-OUTPUT TABLE-HANDLE tthandle, INPUT "PARSTOLP", INPUT "").   
   tthandle = TEMP-TABLE annamntemp:HANDLE.
   RUN laddatemp_UI IN laddaproch (INPUT-OUTPUT TABLE-HANDLE tthandle, INPUT "ANNNAMN", INPUT "").   
   
   /*nettopris beredning */         
   RUN stpbnettomark_UI IN nettoh (INPUT INTEGER(valaonr), INPUT valomrade,INPUT Guru.Konstanter:varforetypval[29], INPUT-OUTPUT TABLE berstolptemp, OUTPUT TABLE kmtrltemp APPEND, OUTPUT kundlistnr).  
   Guru.GlobalaVariabler:KundListId = kundlistnr.
   FOR EACH berstolptemp NO-LOCK,
   EACH kmtrltemp WHERE kmtrltemp.Enr = berstolptemp.ENR AND kmtrltemp.LEVKOD = berstolptemp.LEVKOD:
      berstolptemp.KUND = kmtrltemp.KUND.
   END.                
      
   {INKKOLL1.I}
   IF inkopkollvar = TRUE THEN DO:
      IF Guru.GlobalaVariabler:plusaonr = ? OR Guru.GlobalaVariabler:plusaonr = "" THEN.
      ELSE DO:   
                                    
         IF Guru.Konstanter:appcon THEN DO:
            RUN INKBERAPP.P PERSISTENT SET inkberh ON Guru.Konstanter:apphand TRANSACTION DISTINCT.      
         END.                             
         ELSE DO:
            RUN INKBERAPP.P PERSISTENT SET inkberh.   
         END.
         RUN beredningskontroll_UI IN inkberh (INPUT Guru.GlobalaVariabler:plusaonr,INPUT Guru.GlobalaVariabler:plusdnr,OUTPUT TABLE sumbernum_mtrl,OUTPUT TABLE sumberskapnum_mtrl).     
         IF VALID-HANDLE(inkberh) THEN DO: 
            RUN InkAvs_UI IN inkberh.
            DELETE PROCEDURE inkberh NO-ERROR.
         END.   
      END.   
   END.
   IF Guru.Konstanter:appcon THEN DO:
      RUN KOPIMTRLAPP.P PERSISTENT SET kopimtrlapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
   END.
   ELSE DO:
      RUN KOPIMTRLAPP.P PERSISTENT SET kopimtrlapph.
   END.   
   IF NOT VALID-HANDLE(BeredClasserStart) THEN DO:
      Guru.GlobalaVariabler:BerValDI2h = THIS-PROCEDURE. 
      RUN Modules\Beredning\BeredningHelpStart.p PERSISTENT SET BeredClasserStart.
       Guru.GlobalaVariabler:plusaonr = Guru.GlobalaVariabler:plusaonr. 
      Guru.GlobalaVariabler:plusdnr = Guru.GlobalaVariabler:plusdnr.  
   END.   
END PROCEDURE.


 
PROCEDURE laddaBerDs_UI :
   DEFINE VARIABLE bdSetapph AS HANDLE NO-UNDO.
   IF Guru.Konstanter:appcon THEN DO:                           
      RUN BEREDNINGDS.P  PERSISTENT SET bdSetapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT (INPUT globforetag,INPUT Guru.Konstanter:globanv,INPUT valaonr, INPUT valomrade).
   END.
   ELSE DO:
      RUN BEREDNINGDS.P  PERSISTENT SET bdSetapph (INPUT globforetag,INPUT Guru.Konstanter:globanv,INPUT valaonr, INPUT valomrade).
   END.
   Guru.GlobalaVariabler:BerDSapph = bdSetapph.
   RUN LaddaBeredDS IN Guru.GlobalaVariabler:BerDSapph 
   (OUTPUT DATASET-HANDLE BerVDSout BIND,
    OUTPUT DATASET-HANDLE BerODSout BIND,
    OUTPUT DATASET-HANDLE BerFDSout BIND,
    OUTPUT DATASET-HANDLE BerIDSout BIND,
    OUTPUT DATASET-HANDLE BerI2DSout BIND,
    OUTPUT DATASET-HANDLE BerBildDSout BIND,
    OUTPUT DATASET-HANDLE BerMarkDSout BIND).
   
   IF VALID-HANDLE(BerVDSout) THEN berVhbuff = BerVDSout:GET-BUFFER-HANDLE(1).
   IF VALID-HANDLE(BerODSout) THEN berOhbuff = BerODSout:GET-BUFFER-HANDLE(1).
   IF VALID-HANDLE(BerFDSout) THEN berFhbuff = BerFDSout:GET-BUFFER-HANDLE(1).
   IF VALID-HANDLE(BerIDSout) THEN berIhbuff = BerIDSout:GET-BUFFER-HANDLE(1).
   IF VALID-HANDLE(BerI2DSout) THEN berI2hbuff = BerI2DSout:GET-BUFFER-HANDLE(1).
   IF VALID-HANDLE(BerBildDSout) THEN berBildhbuff = BerBildDSout:GET-BUFFER-HANDLE(1).
   IF VALID-HANDLE(BerMarkDSout) THEN berMarkhbuff = BerMarkDSout:GET-BUFFER-HANDLE(1).      
   /*fIXAR TEMPTT*/
   RUN LaddaFalt_UI.  
   RUN sorterabrwval_UI.
 
END PROCEDURE.
/*MTRLDS
PROCEDURE LaddaBerMtrl_UI :
   DEFINE INPUT  PARAMETER numnr AS INTEGER NO-UNDO.
   RUN SparafaltMtrl_UI.
   EMPTY TEMP-TABLE list_mtrl NO-ERROR. 
   RUN LaddaBerMtrl_UI IN Guru.GlobalaVariabler:BerDSapph (INPUT numnr,OUTPUT DATASET-HANDLE BerMtrlDSout BIND).
   IF VALID-HANDLE(BerMtrlDSout) THEN berMtrlhbuff = BerMtrlDSout:GET-BUFFER-HANDLE(1).
   RUN LaddaFaltMtrl_UI.
   RUN MtrlParstolpe_UI IN Guru.GlobalaVariabler:BerDSapph (INPUT-OUTPUT TABLE list_mtrl).
END PROCEDURE.

PROCEDURE BortMtrlDS_UI :
   DEFINE INPUT  PARAMETER numnr AS INTEGER NO-UNDO.
   DEFINE VARIABLE kommandoquery AS CHARACTER NO-UNDO.
   DEFINE VARIABLE qh AS HANDLE NO-UNDO.
   RUN LaddaBerMtrl_UI IN Guru.GlobalaVariabler:BerDSapph (INPUT numnr,OUTPUT DATASET-HANDLE BerMtrlDSout BIND).
   IF VALID-HANDLE(BerMtrlDSout) THEN berMtrlhbuff = BerMtrlDSout:GET-BUFFER-HANDLE(1).
   RUN BerMtrlDSTrack_UI (INPUT TRUE).
   kommandoquery = "FOR EACH " + berMtrlhbuff:TABLE + " WHERE NUM = " + STRING(numnr) + " NO-LOCK". 
   RUN CreateCustomQuery(INPUT berMtrlhbuff,INPUT kommandoquery,OUTPUT qh).
   qH:GET-FIRST().
   DO WHILE qH:QUERY-OFF-END = FALSE:
      berMtrlhbuff:BUFFER-DELETE().
      qH:GET-NEXT().
   END.
   RUN CloseCustomQuery (INPUT qH).
   RUN BerMtrlDSTrack_UI (INPUT FALSE).
   RUN SparaMtrlDs_UI. 
END PROCEDURE.

PROCEDURE SparafaltMtrl_UI :
   DEFINE VARIABLE kommandoquery AS CHARACTER NO-UNDO.
   DEFINE VARIABLE qh AS HANDLE NO-UNDO.
   RUN BerMtrlDSTrack_UI (INPUT TRUE).
   IF VALID-HANDLE(BerMtrlDSout) THEN.
   ELSE RETURN.
   kommandoquery = "FOR EACH " + berMtrlhbuff:TABLE + " NO-LOCK". 
   RUN CreateCustomQuery(INPUT berMtrlhbuff,INPUT kommandoquery,OUTPUT qh).
   qH:GET-FIRST().
   DO WHILE qH:QUERY-OFF-END = FALSE:
      FIND FIRST list_mtrl WHERE list_mtrl.NUM = berMtrlhbuff:BUFFER-FIELD("NUM"):BUFFER-VALUE AND 
      list_mtrl.NUM = berMtrlhbuff:BUFFER-FIELD("SKAPNUM"):BUFFER-VALUE AND
      list_mtrl.NUM = berMtrlhbuff:BUFFER-FIELD("ENR"):BUFFER-VALUE 
      NO-LOCK NO-ERROR. 
      IF AVAILABLE list_mtrl THEN berMtrlhbuff:BUFFER-DELETE().
      qH:GET-NEXT().
   END.
   RUN CloseCustomQuery (INPUT qH).
   FOR EACH list_mtrl WHERE  NO-LOCK:
      berMtrlhbuff:FIND-FIRST("WHERE NUM = " + STRING(list_mtrl.NUM) + " AND SKAPNUM = " + STRING(list_mtrl.SKAPNUM) + " AND ENR = " + QUOTER(list_mtrl.ENR)   ,NO-LOCK) NO-ERROR.
      IF berMtrlhbuff:AVAILABLE THEN.
      ELSE berMtrlhbuff:BUFFER-CREATE(). 
      berMtrlhbuff:BUFFER-COPY(BUFFER list_mtrl:HANDLE).
      berMtrlhbuff:BUFFER-FIELD("AONR"):BUFFER-VALUE = valaonr.
      berMtrlhbuff:BUFFER-FIELD("OMRADE"):BUFFER-VALUE = valomrade.
   END.
   RUN BerMtrlDSTrack_UI (INPUT FALSE).
   RUN SparaMtrlDs_UI. 
END PROCEDURE.
*/
PROCEDURE Sparafalt_UI :
   
   DEFINE VARIABLE kommandoquery AS CHARACTER NO-UNDO.
   DEFINE VARIABLE qh AS HANDLE NO-UNDO.
   /*OM NÅGON UNDER ÄR ÄNDRAD SÄTT HUVUDPOSTEN TILL ÄNDRAD VAR KAN DETTA SKE ?*/   
   EMPTY TEMP-TABLE sparakon_val NO-ERROR.
   FOR EACH kon_val WHERE kon_val.ANDRAD = "AND" AND kon_val.KSKAP = TRUE:
      FOR EACH konbuff WHERE konbuff.NUM = kon_val.NUM AND konbuff.ANDRAD = "" AND konbuff.KSKAP = FALSE:
         konbuff.ANDRAD = "AND".
      END.
   END.
   RUN BerDSTrack_UI (TRUE).
   EMPTY TEMP-TABLE sparakon_val NO-ERROR.
   FOR EACH kon_val WHERE kon_val.ANDRAD = "AND" NO-LOCK:
      berVhbuff:FIND-FIRST("WHERE NUM = " + STRING(kon_val.NUM) + " AND SKAPNUM = " + STRING(kon_val.SKAPNUM)  ,NO-LOCK) NO-ERROR.
      IF berVhbuff:AVAILABLE THEN.
      ELSE DO:
         berVhbuff:BUFFER-CREATE(). 
         CREATE sparakon_val.
         BUFFER-COPY kon_val TO sparakon_val.
      END.   
      berVhbuff:BUFFER-COPY(BUFFER kon_val:HANDLE).
      berVhbuff:BUFFER-FIELD("AONR"):BUFFER-VALUE = valaonr.
      berVhbuff:BUFFER-FIELD("OMRADE"):BUFFER-VALUE = valomrade.
      berVhbuff:BUFFER-FIELD("KONSKOD"):BUFFER-VALUE = kon_val.GRUPP.
      berVhbuff:BUFFER-FIELD("KTYPKOD"):BUFFER-VALUE= kon_val.F1.
      berVhbuff:BUFFER-FIELD("ANVANDARE"):BUFFER-VALUE= Guru.Konstanter:globanv.
         
      IF kon_val.KSKAP = FALSE THEN DO: 
         FIND FIRST ord_temp WHERE ord_temp.NUM = kon_val.NUM
         USE-INDEX NUM NO-LOCK NO-ERROR.
         IF AVAILABLE ord_temp THEN DO:
            ord_temp.ORD = kon_val.ORD.
         END.
         IF NOT AVAILABLE ord_temp THEN DO:
            CREATE ord_temp.
            BUFFER-COPY kon_val TO ord_temp.
         END.
      END.   
   END.
   FOR EACH ord_temp WHERE NO-LOCK:
      berOhbuff:FIND-FIRST("WHERE NUM = " + STRING(ord_temp.NUM) ,NO-LOCK) NO-ERROR.
      IF berOhbuff:AVAILABLE THEN.
      ELSE berOhbuff:BUFFER-CREATE(). 
      berOhbuff:BUFFER-COPY(BUFFER ord_temp:HANDLE).
      berOhbuff:BUFFER-FIELD("AONR"):BUFFER-VALUE = valaonr.
      berOhbuff:BUFFER-FIELD("OMRADE"):BUFFER-VALUE = valomrade.
      
   END.
   FOR EACH fri_temp WHERE NO-LOCK:
      berFhbuff:FIND-FIRST("WHERE NUM = " + STRING(fri_temp.NUM) + " AND KABNR = " + STRING(fri_temp.KABNR)  ,NO-LOCK) NO-ERROR.
      IF berFhbuff:AVAILABLE THEN.
      ELSE berFhbuff:BUFFER-CREATE().
      berFhbuff:BUFFER-COPY(BUFFER fri_temp:HANDLE).
      berFhbuff:BUFFER-FIELD("AONR"):BUFFER-VALUE = valaonr.
      berFhbuff:BUFFER-FIELD("OMRADE"):BUFFER-VALUE = valomrade.
      
   END.
   FOR EACH kon_id WHERE NO-LOCK:
      berIhbuff:FIND-FIRST("WHERE NUM = " + STRING(kon_id.NUM) ,NO-LOCK) NO-ERROR.
      IF berIhbuff:AVAILABLE THEN.
      ELSE berIhbuff:BUFFER-CREATE(). 
      berIhbuff:BUFFER-COPY(BUFFER kon_id:HANDLE).
      berIhbuff:BUFFER-FIELD("AONR"):BUFFER-VALUE = valaonr.
      berIhbuff:BUFFER-FIELD("OMRADE"):BUFFER-VALUE = valomrade.
      
   END.
   FOR EACH berid2temp WHERE NO-LOCK:
      berI2hbuff:FIND-FIRST("WHERE NUM = " + STRING(berid2temp.NUM) ,NO-LOCK) NO-ERROR.
      IF berI2hbuff:AVAILABLE THEN.
      ELSE berI2hbuff:BUFFER-CREATE(). 
      berI2hbuff:BUFFER-COPY(BUFFER berid2temp:HANDLE).
      berI2hbuff:BUFFER-FIELD("AONR"):BUFFER-VALUE = valaonr.
      berI2hbuff:BUFFER-FIELD("OMRADE"):BUFFER-VALUE = valomrade.
   END.
   FOR EACH bildbertemp WHERE NO-LOCK:
      berBildhbuff:FIND-FIRST("WHERE NUM = " + STRING(bildbertemp.NUM) + " AND FILNAMN = " + QUOTER(bildbertemp.FILNAMN) ,NO-LOCK) NO-ERROR.
      IF berBildhbuff:AVAILABLE THEN.
      ELSE berBildhbuff:BUFFER-CREATE(). 
      berBildhbuff:BUFFER-COPY(BUFFER bildbertemp:HANDLE).
      berBildhbuff:BUFFER-FIELD("BERNR"):BUFFER-VALUE = STRING(valaonr).
      berBildhbuff:BUFFER-FIELD("OMRADE"):BUFFER-VALUE = valomrade.
   END.
   FOR EACH markgrupp WHERE NO-LOCK:
      IF markgrupp.GRUPP = "" AND markgrupp.ABONNENT = "" THEN DELETE markgrupp.
      ELSE DO:
         berMarkhbuff:FIND-FIRST("WHERE NUM = " + STRING(markgrupp.NUM) + "AND KABNR = " + STRING(markgrupp.KABNR) ,NO-LOCK) NO-ERROR.
         IF berMarkhbuff:AVAILABLE THEN.
         ELSE berMarkhbuff:BUFFER-CREATE(). 
         berMarkhbuff:BUFFER-COPY(BUFFER markgrupp:HANDLE).
         berMarkhbuff:BUFFER-FIELD("AONR"):BUFFER-VALUE = valaonr.
         berMarkhbuff:BUFFER-FIELD("OMRADE"):BUFFER-VALUE = valomrade.
      END.   
   END.
   
   FOR EACH bortkon_val WHERE NO-LOCK:
      kommandoquery = "FOR EACH " + berVhbuff:TABLE + " WHERE NUM = " + STRING(bortkon_val.NUM) + " NO-LOCK". 
      RUN CreateCustomQuery(INPUT berVhbuff,INPUT kommandoquery,OUTPUT qh).
      qH:GET-FIRST().
      DO WHILE qH:QUERY-OFF-END = FALSE:
         berVhbuff:BUFFER-DELETE().
         qH:GET-NEXT().
      END.
      RUN CloseCustomQuery (INPUT qH).
      kommandoquery = "FOR EACH " + berOhbuff:TABLE + " WHERE NUM = " + STRING(bortkon_val.NUM) + " NO-LOCK". 
      RUN CreateCustomQuery(INPUT berOhbuff,INPUT kommandoquery,OUTPUT qh).
      qH:GET-FIRST().
      DO WHILE qH:QUERY-OFF-END = FALSE:
         berOhbuff:BUFFER-DELETE().
         qH:GET-NEXT().
      END.
      RUN CloseCustomQuery (INPUT qH).
      kommandoquery = "FOR EACH " + berFhbuff:TABLE + " WHERE NUM = " + STRING(bortkon_val.NUM) + " NO-LOCK". 
      RUN CreateCustomQuery(INPUT berFhbuff,INPUT kommandoquery,OUTPUT qh).
      qH:GET-FIRST().
      DO WHILE qH:QUERY-OFF-END = FALSE:
         berFhbuff:BUFFER-DELETE().
         qH:GET-NEXT().
      END.
      RUN CloseCustomQuery (INPUT qH).
      kommandoquery = "FOR EACH " + berIhbuff:TABLE + " WHERE NUM = " + STRING(bortkon_val.NUM) + " NO-LOCK". 
      RUN CreateCustomQuery(INPUT berIhbuff,INPUT kommandoquery,OUTPUT qh).
      qH:GET-FIRST().
      DO WHILE qH:QUERY-OFF-END = FALSE:
         berIhbuff:BUFFER-DELETE().
         qH:GET-NEXT().
      END.
      RUN CloseCustomQuery (INPUT qH).
      kommandoquery = "FOR EACH " + berI2hbuff:TABLE + " WHERE NUM = " + STRING(bortkon_val.NUM) + " NO-LOCK". 
      RUN CreateCustomQuery(INPUT berI2hbuff,INPUT kommandoquery,OUTPUT qh).
      qH:GET-FIRST().
      DO WHILE qH:QUERY-OFF-END = FALSE:
         berI2hbuff:BUFFER-DELETE().
         qH:GET-NEXT().
      END.
      RUN CloseCustomQuery (INPUT qH).
      /*MTRLDS
      RUN BortMtrlDS_UI (bortkon_val.NUM).
      */
   END.
   /*KOLLA OM DENNA SKAVAR KVAR*/
   RUN RensaKalkyKoder_UI IN Guru.GlobalaVariabler:BerDSapph   (INPUT TABLE bortkon_val).
   RUN BerDSTrack_UI (FALSE).
   RUN SparaBerDs_UI.
   RUN SpararMtrl_UI IN Guru.GlobalaVariabler:BerDSapph 
          (INPUT xtillyvar,INPUT-OUTPUT datvar,INPUT TABLE kon_val,INPUT TABLE list_mtrl,INPUT TABLE bortkon_val).
   /*MTRLDS
   RUN NyMtrlKon_UI IN Guru.GlobalaVariabler:BerDSapph   (INPUT xtillyvar,INPUT-OUTPUT datvar,INPUT TABLE sparakon_val).
   
   EMPTY TEMP-TABLE sparakon_val NO-ERROR.
   RUN BerDSTrack_UI (FALSE).
   RUN SparaBerDs_UI.
   RUN SparafaltMtrl_UI.
   */
   
END PROCEDURE.
/*
   DEFINE VARIABLE SPARAXML AS CHARACTER NO-UNDO.
      SPARAXML = "C:\CTest.xml". 
      chVDS:WRITE-XML("FILE", SPARAXML).
     */
PROCEDURE SparaMtrlDs_UI :
   DEFINE VARIABLE chMtDS AS HANDLE NO-UNDO.
   CREATE DATASET chMtDS.
   chMtDS:CREATE-LIKE(BerMtrlDSout).
   chMtDS:GET-CHANGES(BerMtrlDSout).
   RUN SparaDynDSstart_UI IN Guru.GlobalaVariabler:BerDSapph (INPUT "BerMtrlDS", INPUT DATASET-HANDLE chMtDS).
   chMtDS:MERGE-CHANGES(BerMtrlDSout).
END PROCEDURE.
PROCEDURE SparaBerDs_UI :
   DEFINE VARIABLE chVDS AS HANDLE NO-UNDO.
   DEFINE VARIABLE chODS AS HANDLE NO-UNDO.
   DEFINE VARIABLE chFDS AS HANDLE NO-UNDO.
   DEFINE VARIABLE chIDS AS HANDLE NO-UNDO.
   DEFINE VARIABLE chI2DS AS HANDLE NO-UNDO.
   DEFINE VARIABLE chBiDS AS HANDLE NO-UNDO.
   DEFINE VARIABLE chMDS AS HANDLE NO-UNDO. 
   
   CREATE DATASET chVDS.
   chVDS:CREATE-LIKE(BerVDSout).
   chVDS:GET-CHANGES(BerVDSout).
   RUN SparaDynDSstart_UI IN Guru.GlobalaVariabler:BerDSapph (INPUT "BerVDS", INPUT DATASET-HANDLE chVDS).
   chVDS:MERGE-CHANGES(BerVDSout).
  
   CREATE DATASET chODS.
   chODS:CREATE-LIKE(BerODSout).
   chODS:GET-CHANGES(BerODSout).
   RUN SparaDynDSstart_UI IN Guru.GlobalaVariabler:BerDSapph (INPUT "BerODS", INPUT DATASET-HANDLE chODS).
   chODS:MERGE-CHANGES(BerODSout).
  
   CREATE DATASET chFDS.
   chFDS:CREATE-LIKE(BerFDSout).
   chFDS:GET-CHANGES(BerFDSout).
   RUN SparaDynDSstart_UI IN Guru.GlobalaVariabler:BerDSapph (INPUT "BerFDS", INPUT DATASET-HANDLE chFDS).
   chFDS:MERGE-CHANGES(BerFDSout).
  
   CREATE DATASET chIDS.
   chIDS:CREATE-LIKE(BerIDSout).
   chIDS:GET-CHANGES(BerIDSout).
   RUN SparaDynDSstart_UI IN Guru.GlobalaVariabler:BerDSapph (INPUT "BerIDS", INPUT DATASET-HANDLE chIDS).
   chIDS:MERGE-CHANGES(BerIDSout).
  
   CREATE DATASET chI2DS.
   chI2DS:CREATE-LIKE(BerI2DSout).
   chI2DS:GET-CHANGES(BerI2DSout).
   RUN SparaDynDSstart_UI IN Guru.GlobalaVariabler:BerDSapph (INPUT "BerI2DS", INPUT DATASET-HANDLE chI2DS).
   chI2DS:MERGE-CHANGES(BerI2DSout).  
   
   CREATE DATASET chBiDS.
   chBiDS:CREATE-LIKE(BerBildDSout).
   chBiDS:GET-CHANGES(BerBildDSout).
   RUN SparaDynDSstart_UI IN Guru.GlobalaVariabler:BerDSapph (INPUT "BerBildDS", INPUT DATASET-HANDLE chBiDS).
   chBiDS:MERGE-CHANGES(BerBildDSout).
   
   CREATE DATASET chMDS.
   chMDS:CREATE-LIKE(BerMarkDSout).
   chMDS:GET-CHANGES(BerMarkDSout).
   RUN SparaDynDSstart_UI IN Guru.GlobalaVariabler:BerDSapph (INPUT "BerMarkDS", INPUT DATASET-HANDLE chMDS).
   chMDS:MERGE-CHANGES(BerMarkDSout).
       
END PROCEDURE.
PROCEDURE LaddaFaltMtrl_UI :
   DEFINE VARIABLE kommandoquery AS CHARACTER NO-UNDO.
   DEFINE VARIABLE qh AS HANDLE NO-UNDO.
   DEFINE VARIABLE diranv AS CHARACTER NO-UNDO.
   DEFINE VARIABLE bsok AS CHARACTER NO-UNDO.
   kommandoquery = "FOR EACH " + berMtrlhbuff:TABLE + " NO-LOCK". 
   RUN CreateCustomQuery(INPUT berMtrlhbuff,INPUT kommandoquery,OUTPUT qh).
   qH:GET-FIRST().
   DO WHILE qH:QUERY-OFF-END = FALSE:
      CREATE list_mtrl.
      BUFFER list_mtrl:HANDLE:BUFFER-COPY(berMtrlhbuff).
      qH:GET-NEXT().
   END.
   RUN CloseCustomQuery (INPUT qH).

END PROCEDURE.
PROCEDURE LaddaFalt_UI :
   DEFINE VARIABLE kommandoquery AS CHARACTER NO-UNDO.
   DEFINE VARIABLE qh AS HANDLE NO-UNDO.
   DEFINE VARIABLE diranv AS CHARACTER NO-UNDO.
   DEFINE VARIABLE bsok AS CHARACTER NO-UNDO.
   kommandoquery = "FOR EACH " + berOhbuff:TABLE + " NO-LOCK". 
   RUN CreateCustomQuery(INPUT berOhbuff,INPUT kommandoquery,OUTPUT qh).
   qH:GET-FIRST().
   DO WHILE qH:QUERY-OFF-END = FALSE:
      CREATE ord_temp.
      BUFFER ord_temp:HANDLE:BUFFER-COPY(berOhbuff).
      qH:GET-NEXT().
   END.
   RUN CloseCustomQuery (INPUT qH).
   
   
   kommandoquery = "FOR EACH " + berVhbuff:TABLE + " NO-LOCK". 
   RUN CreateCustomQuery(INPUT berVhbuff,INPUT kommandoquery,OUTPUT qh).
   qH:GET-FIRST().
   DO WHILE qH:QUERY-OFF-END = FALSE:
      CREATE kon_val.
      BUFFER kon_val:HANDLE:BUFFER-COPY(berVhbuff).
      kon_val.GRUPP = berVhbuff:BUFFER-FIELD("KONSKOD"):BUFFER-VALUE.
      kon_val.F1 = berVhbuff:BUFFER-FIELD("KTYPKOD"):BUFFER-VALUE.
      IF kon_val.KSKAP = FALSE THEN DO:     
         FIND FIRST ord_temp WHERE ord_temp.NUM = kon_val.NUM
         USE-INDEX NUM NO-LOCK NO-ERROR.
         IF AVAILABLE ord_temp THEN DO:
            kon_val.ORD = ord_temp.ORD.
         END.
      END.
      qH:GET-NEXT().
   END.
   RUN CloseCustomQuery (INPUT qH).
   
   kommandoquery = "FOR EACH " + berFhbuff:TABLE + " NO-LOCK". 
   RUN CreateCustomQuery(INPUT berFhbuff,INPUT kommandoquery,OUTPUT qh).
   qH:GET-FIRST().
   DO WHILE qH:QUERY-OFF-END = FALSE:
      CREATE fri_temp.
      BUFFER fri_temp:HANDLE:BUFFER-COPY(berFhbuff).
      IF fri_temp.ARTAL = ? THEN fri_temp.ARTAL = YEAR(TODAY).   
      qH:GET-NEXT().
   END.
   RUN CloseCustomQuery (INPUT qH).
   
   kommandoquery = "FOR EACH " + berIhbuff:TABLE + " NO-LOCK". 
   RUN CreateCustomQuery(INPUT berIhbuff,INPUT kommandoquery,OUTPUT qh).
   qH:GET-FIRST().
   DO WHILE qH:QUERY-OFF-END = FALSE:
      CREATE kon_id.
      BUFFER kon_id:HANDLE:BUFFER-COPY(berIhbuff).
      FIND FIRST kon_val WHERE kon_val.NUM = kon_id.NUM USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE kon_val THEN DO:
         kon_id.GRUPP = kon_val.GRUPP.
      END. 
      qH:GET-NEXT().
   END.
   RUN CloseCustomQuery (INPUT qH).
   
   kommandoquery = "FOR EACH " + berI2hbuff:TABLE + " NO-LOCK". 
   RUN CreateCustomQuery(INPUT berI2hbuff,INPUT kommandoquery,OUTPUT qh).
   qH:GET-FIRST().
   DO WHILE qH:QUERY-OFF-END = FALSE:
      CREATE berid2temp.
      BUFFER berid2temp:HANDLE:BUFFER-COPY(berI2hbuff).
      qH:GET-NEXT().
   END.
   RUN CloseCustomQuery (INPUT qH).
   
   kommandoquery = "FOR EACH " + berBildhbuff:TABLE + " NO-LOCK". 
   RUN CreateCustomQuery(INPUT berBildhbuff,INPUT kommandoquery,OUTPUT qh).
   qH:GET-FIRST().
   DO WHILE qH:QUERY-OFF-END = FALSE:
      CREATE bildbertemp.
      BUFFER bildbertemp:HANDLE:BUFFER-COPY(berBildhbuff).
      IF globforetag = "KRAF" THEN DO:
         IF bildbertemp.FILNAMN BEGINS "c:\users\" THEN DO:
            diranv = Guru.Konstanter:globanv.
            {MOLNETMAPPEXTRA.I}
            bsok = SUBSTRING(bildbertemp.FILNAMN,10,INDEX(bildbertemp.FILNAMN,"\",10) - 10).
            bildbertemp.FILNAMN = REPLACE(bildbertemp.FILNAMN,bsok,diranv).  
         END.   
      END.
      
      
      qH:GET-NEXT().
   END.
   RUN CloseCustomQuery (INPUT qH).
   
   FOR EACH kon_val WHERE kon_val.KSKAP = FALSE:
      IF kon_val.ID = TRUE THEN DO:
         FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM
         USE-INDEX NUM NO-LOCK NO-ERROR.
         IF AVAILABLE kon_id THEN DO:
            IF kon_id.FRI2 = ? THEN kon_val.ID2 = kon_id.NATNR.
            ELSE kon_val.ID2 = STRING(kon_id.FRI2).    
            FIND FIRST konbuff WHERE konbuff.NUM = kon_val.NUM AND
            konbuff.KSKAP = TRUE NO-LOCK NO-ERROR.
            IF AVAILABLE konbuff THEN DO:
               kon_val.EXTRA = "+" + " " + kon_id.FRI3.
            END.
            ELSE DO:
               kon_val.EXTRA = "  " + kon_id.FRI3.
            END.
         END.
      END.
      ELSE DO:
         FIND FIRST konbuff WHERE konbuff.NUM = kon_val.NUM AND
         konbuff.KSKAP = TRUE NO-LOCK NO-ERROR.
         IF AVAILABLE konbuff THEN kon_val.EXTRA = "+".
      END.
      ASSIGN
      kon_val.EXTRA1 = SUBSTRING(kon_val.EXTRA,3)
      kon_val.EXTRA2 = SUBSTRING(kon_val.EXTRA,1,1).
   END.
   
END PROCEDURE.

PROCEDURE CreateCustomQuery:
   DEFINE INPUT PARAMETER tth  AS HANDLE NO-UNDO.
   DEFINE INPUT PARAMETER q AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER CustomQueryh AS HANDLE NO-UNDO.
   CREATE QUERY CustomQueryH.
   CustomQueryh:SET-BUFFERS(tth).
   CustomQueryh:QUERY-PREPARE(q).
   CustomQueryh:QUERY-OPEN().
END PROCEDURE.
   
PROCEDURE CloseCustomQuery:
   DEFINE INPUT PARAMETER CustomQueryh AS HANDLE NO-UNDO.
   CustomQueryh:QUERY-CLOSE()  NO-ERROR.
   CustomQueryh = ?.
END PROCEDURE.

PROCEDURE BerDSTrack_UI :
   DEFINE INPUT PARAMETER onoff AS LOGICAL NO-UNDO.
   IF NOT VALID-HANDLE(berVhtt) THEN berVhtt = berVhbuff:TABLE-HANDLE.
   berVhtt:TRACKING-CHANGES = onoff.
   IF NOT VALID-HANDLE(berOhtt) THEN berOhtt = berOhbuff:TABLE-HANDLE.
   berOhtt:TRACKING-CHANGES = onoff.
   IF NOT VALID-HANDLE(berFhtt) THEN berFhtt = berFhbuff:TABLE-HANDLE.
   berFhtt:TRACKING-CHANGES = onoff.
   IF NOT VALID-HANDLE(berIhtt) THEN berIhtt = berIhbuff:TABLE-HANDLE.
   berIhtt:TRACKING-CHANGES = onoff.
   IF NOT VALID-HANDLE(berI2htt) THEN berI2htt = berI2hbuff:TABLE-HANDLE.
   berI2htt:TRACKING-CHANGES = onoff.
   IF NOT VALID-HANDLE(berBildhtt) THEN berBildhtt = berBildhbuff:TABLE-HANDLE.
   berBildhtt:TRACKING-CHANGES = onoff.
   IF NOT VALID-HANDLE(berMarkhtt) THEN berMarkhtt = berMarkhbuff:TABLE-HANDLE.
   berMarkhtt:TRACKING-CHANGES = onoff.
   
END PROCEDURE.
PROCEDURE BerMtrlDSTrack_UI :
   DEFINE INPUT PARAMETER onoff AS LOGICAL NO-UNDO.
   IF VALID-HANDLE(BerMtrlDSout) THEN DO:
      IF NOT VALID-HANDLE(berMtrlhtt) THEN berMtrlhtt = berMtrlhbuff:TABLE-HANDLE.
      berMtrlhtt:TRACKING-CHANGES = onoff.
   END.
   
END PROCEDURE.  
PROCEDURE GAMMAL_UI :
   IF Guru.Konstanter:appcon THEN DO:                           
      RUN GAMBEREV.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
      (INPUT Guru.Konstanter:globanv,INPUT valaonr, INPUT valomrade, INPUT datvar, OUTPUT TABLE kon_val,
      OUTPUT TABLE kon_id, OUTPUT TABLE kopp_lina,
      OUTPUT TABLE fri_temp, /*OUTPUT TABLE punkt_temp, OUTPUT TABLE schakt_temp,
      OUTPUT TABLE skydd_temp, OUTPUT TABLE kab_temp,*/ OUTPUT TABLE bildbertemp,OUTPUT TABLE berid2temp).
   END.
   ELSE DO:
      RUN GAMBEREV.P
      (INPUT Guru.Konstanter:globanv,INPUT valaonr, INPUT valomrade, INPUT datvar, OUTPUT TABLE kon_val,
      OUTPUT TABLE kon_id, OUTPUT TABLE kopp_lina,
      OUTPUT TABLE fri_temp, /*OUTPUT TABLE punkt_temp, OUTPUT TABLE schakt_temp,
      OUTPUT TABLE skydd_temp, OUTPUT TABLE kab_temp,*/ OUTPUT TABLE bildbertemp,OUTPUT TABLE berid2temp).
   END.
  
   
   
   /*
   IF Guru.Konstanter:appcon THEN DO:                           
      RUN DELINKOLL.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT       
      (INPUT valaonr, INPUT valomrade, OUTPUT TABLE del_val).
   END.
   ELSE DO:
      RUN DELINKOLL.P     
      (INPUT valaonr, INPUT valomrade, OUTPUT TABLE del_val).
   END.
   */   
   RUN markstngrhmt_UI  IN frikortapph (INPUT valaonr, INPUT valomrade, OUTPUT TABLE markgrupp).
   RUN sorterabrwval_UI.
   
END PROCEDURE.



PROCEDURE anvbort_UI :
   {muswait.i}
   {SOKSTART.I}
   ASSIGN
   soktemp.SOKVAL = 57   
   soktemp.SOKINT[1] = 3
   soktemp.SOKINT[2] = Guru.Konstanter:globniv
   soktemp.SOKCHAR[1] = valaonr
   soktemp.SOKCHAR[2] = valomrade
   soktemp.SOKLOG[1] = ejanv.
   {SOKANROP.I}
   ejanv = soktemp.SOKLOG[1].   
   {musarrow.i}
END PROCEDURE.
PROCEDURE markav_UI :
  
   TOG_MARKAV:CHECKED = FALSE.
   RUN dselectfoc_UI (INPUT 2).
   RUN dselectfoc_UI (INPUT 3).
   RUN dselectfoc_UI (INPUT 4).
   RUN dselectfoc_UI (INPUT 5).
   RUN dselectfoc_UI (INPUT 6).
   RUN dselectfoc_UI (INPUT 9).
   RUN dselectfoc_UI (INPUT 10).
   RUN dselectfoc_UI (INPUT 11).
   RUN dselectfoc_UI (INPUT 12).
   RUN dselectfoc_UI (INPUT 13).
   
END PROCEDURE.
PROCEDURE avmarkerab2_UI :
   
   RUN dselectfoc_UI (INPUT 2).   
END PROCEDURE.
PROCEDURE avmarkerab3_UI :
   RUN dselectfoc_UI (INPUT 3).   
END PROCEDURE.
PROCEDURE avmarkerab4_UI :
   RUN dselectfoc_UI (INPUT 4).   
END PROCEDURE.

PROCEDURE avmarkerab5_UI :
   RUN dselectfoc_UI (INPUT 5).   
END PROCEDURE.

PROCEDURE avmarkerab6_UI :
   RUN dselectfoc_UI (INPUT 6).  
END PROCEDURE.

PROCEDURE avmarkeraHLEV_UI :   
   RUN dselectfoc_UI (INPUT 22).  
END PROCEDURE.

PROCEDURE beranv_UI :
   {muswait.i}
   {SOKSTART.I}
   ASSIGN
   soktemp.SOKVAL = 57   
   soktemp.SOKINT[1] = 1
   soktemp.SOKINT[2] = Guru.Konstanter:globniv
   soktemp.SOKCHAR[1] = valaonr
   soktemp.SOKCHAR[2] = valomrade
   soktemp.SOKCHAR[3] = globanv
   soktemp.SOKLOG[1] = ejanv.
   {SOKANROP.I}
   {musarrow.i}
END PROCEDURE.
PROCEDURE btnuppl_UI :
   RUN btnvit_UI (INPUT FBTN_UPPL).
   {muswait.i}    
   IF AVAILABLE kon_val THEN DO:
      kon_rowid = ROWID(kon_val).
   END.
   ELSE DO:
      FIND FIRST kon_val NO-LOCK NO-ERROR.
   END.
   IF AVAILABLE kon_val THEN DO:  
      RUN btnkopupp_UI IN huvprogh.      
   END.
   ELSE DO:
      MESSAGE "Det fins inga konstruktioner att koppla upplag mot."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN.
   END.      
   APPLY "VALUE-CHANGED" TO RAD_KOMP.
   RUN kondisp_UI.
   RUN sokkdispu_UI.
   RUN openbdynspec_UI IN brwproc[21].            
   RUN lastselectdyn_UI IN brwproc[21].
   
   {musarrow.i}
END PROCEDURE.

PROCEDURE bytgrupp_UI :
   gruppkod = konstgrptemp.KONSKOD.
   FIND FIRST bbenamntemp WHERE bbenamntemp.KONSKOD = gruppkod NO-LOCK NO-ERROR.
   IF AVAILABLE bbenamntemp THEN FILL-IN-B1:SCREEN-VALUE = bbenamntemp.B1.
   RUN setcolsortvar_UI IN brwproc[14] (INPUT " WHERE KONSKOD = '" + STRING(gruppkod) + "'").
   RUN openbdynspec_UI IN brwproc[14].
   IF TOG_RATT:CHECKED = FALSE THEN APPLY "VALUE-CHANGED" TO BRW_KON.
END PROCEDURE.

PROCEDURE bytkonstalla_UI :
   DEFINE INPUT PARAMETER browsnr AS INTEGER NO-UNDO.
   DEFINE VARIABLE browsnre AS INTEGER NO-UNDO.
   DEFINE VARIABLE rubrikvar AS CHARACTER NO-UNDO.
   browsnre = browsnr.
   IF browsnr >= 9 THEN browsnre = browsnre - 7.
   IF bbnamningvar[browsnre] = "" THEN DO:
      IF browsnr = 2 THEN DO:
         ASSIGN
         BRW_B2:HIDDEN = TRUE
         FILL-IN-B2:HIDDEN = TRUE.
      END.
      IF browsnr = 3 THEN DO:
         ASSIGN
         BRW_B3:HIDDEN = TRUE
         FILL-IN-B3:HIDDEN = TRUE.
      END.
      IF browsnr = 4 THEN DO:
         ASSIGN
         BRW_B4:HIDDEN = TRUE
         FILL-IN-B4:HIDDEN = TRUE.
      END.
      IF browsnr = 5 THEN DO:
         ASSIGN
         BRW_B5:HIDDEN = TRUE
         FILL-IN-B5:HIDDEN = TRUE.
      END.
      IF browsnr = 6 THEN DO:
         ASSIGN
         BRW_B6:HIDDEN = TRUE
         FILL-IN-B6:HIDDEN = TRUE.
      END.
      IF browsnr = 9 THEN DO:
         ASSIGN
         BRW_KB2:HIDDEN = TRUE
         FILL-IN-B2:HIDDEN = TRUE.
      END.
      IF browsnr = 10 THEN DO:
         ASSIGN
         BRW_KB3:HIDDEN = TRUE
         FILL-IN-B3:HIDDEN = TRUE.
      END.
      IF browsnr = 11 THEN DO:
         ASSIGN
         BRW_KB4:HIDDEN = TRUE
         FILL-IN-B4:HIDDEN = TRUE.
      END.
      IF browsnr = 12 THEN DO:
         ASSIGN
         BRW_KB5:HIDDEN = TRUE
         FILL-IN-B5:HIDDEN = TRUE.
      END.
      IF browsnr = 13 THEN DO:
         ASSIGN
         BRW_KB6:HIDDEN = TRUE
         FILL-IN-B6:HIDDEN = TRUE.
      END.
      RETURN.
   END.
   setcolvar = " WHERE KONSKOD = '" + STRING(gruppkod) + "' AND KTYPKOD = '" + STRING(typkod) + "' AND KOPP = TRUE AND BB = '" + bbnamningvar[browsnre] + "'".
   RUN setcolsortvar_UI IN brwproc[browsnr] (INPUT setcolvar).
   RUN openbdynspec_UI IN brwproc[browsnr].
   IF browsnr = 2 THEN DO:
      FILL-IN-B2:SCREEN-VALUE = bbnamningvar[browsnre].
      RUN dselectfoc_UI (INPUT 2).      
      ASSIGN
      BRW_B2:HIDDEN = FALSE
      FILL-IN-B2:HIDDEN = FALSE.   
   END.
   IF browsnr = 3 THEN DO:
      FILL-IN-B3:SCREEN-VALUE = bbnamningvar[browsnre].
      RUN dselectfoc_UI (INPUT 3).
      ASSIGN
      BRW_B3:HIDDEN = FALSE
      FILL-IN-B3:HIDDEN = FALSE.   
   END.
   IF browsnr = 4 THEN DO:
      FILL-IN-B4:SCREEN-VALUE = bbnamningvar[browsnre].
      RUN dselectfoc_UI (INPUT 4).
      ASSIGN
      BRW_B4:HIDDEN = FALSE
      FILL-IN-B4:HIDDEN = FALSE.   
   END.
   IF browsnr = 5 THEN DO:
      FILL-IN-B5:SCREEN-VALUE = bbnamningvar[browsnre].
      RUN dselectfoc_UI (INPUT 5).
      ASSIGN
      BRW_B5:HIDDEN = FALSE
      FILL-IN-B5:HIDDEN = FALSE.   
   END.
   IF browsnr = 6 THEN DO:
      FILL-IN-B6:SCREEN-VALUE = bbnamningvar[browsnre].
      RUN dselectfoc_UI (INPUT 6).
      ASSIGN
      BRW_B6:HIDDEN = FALSE
      FILL-IN-B6:HIDDEN = FALSE.   
   END.
   IF browsnr = 9 THEN DO:
      FILL-IN-B2:SCREEN-VALUE = bbnamningvar[browsnre].
      RUN dselectfoc_UI (INPUT 9).
      ASSIGN
      BRW_KB2:HIDDEN = FALSE
      FILL-IN-B2:HIDDEN = FALSE.   
   END.
   IF browsnr = 10 THEN DO:
      FILL-IN-B3:SCREEN-VALUE = bbnamningvar[browsnre].
      RUN dselectfoc_UI (INPUT 10).
      ASSIGN
      BRW_KB3:HIDDEN = FALSE
      FILL-IN-B3:HIDDEN = FALSE.   
   END.
   IF browsnr = 11 THEN DO:
      FILL-IN-B4:SCREEN-VALUE = bbnamningvar[browsnre].
      RUN dselectfoc_UI (INPUT 11).
      ASSIGN
      BRW_KB4:HIDDEN = FALSE
      FILL-IN-B4:HIDDEN = FALSE.   
   END.       
   IF browsnr = 12 THEN DO:
      FILL-IN-B5:SCREEN-VALUE = bbnamningvar[browsnre].
      RUN dselectfoc_UI (INPUT 12).
      ASSIGN
      BRW_KB5:HIDDEN = FALSE
      FILL-IN-B5:HIDDEN = FALSE.   
   END.
   IF browsnr = 13 THEN DO:
      FILL-IN-B6:SCREEN-VALUE = bbnamningvar[browsnre].
      RUN dselectfoc_UI (INPUT 13).
      ASSIGN
      BRW_KB6:HIDDEN = FALSE
      FILL-IN-B6:HIDDEN = FALSE.   
   END.
END PROCEDURE.

PROCEDURE chbstate_UI :
   /*
   IF RAD_VAL:SCREEN-VALUE = "1" THEN MBTN_KONST:LOAD-IMAGE("BILDER\btn_konst_over.gif") NO-ERROR.             
   ELSE IF RAD_VAL:SCREEN-VALUE = "2" THEN MBTN_ID:LOAD-IMAGE ("BILDER\btn_id_over.gif") NO-ERROR.             
   ELSE IF RAD_VAL:SCREEN-VALUE = "3" THEN MBTN_ANM:LOAD-IMAGE ("BILDER\btn_anm_over.gif") NO-ERROR.             
   ELSE IF RAD_VAL:SCREEN-VALUE = "4" THEN MBTN_MTRL:LOAD-IMAGE ("BILDER\btn_mtrl_over.gif") NO-ERROR.             
   ELSE IF RAD_VAL:SCREEN-VALUE = "5" THEN MBTN_KALK:LOAD-IMAGE ("BILDER\btn_kalkyl_over.gif") NO-ERROR.             
   ELSE IF RAD_VAL:SCREEN-VALUE = "6" THEN MBTN_DOK:LOAD-IMAGE ("BILDER\btn_berbild_over.gif") NO-ERROR.             
   IF radspar NE INTEGER(RAD_VAL:SCREEN-VALUE) THEN DO:
      IF radspar = 1 THEN MBTN_KONST:LOAD-IMAGE ("BILDER\btn_konst.gif") NO-ERROR.
      IF radspar = 2 THEN MBTN_ID:LOAD-IMAGE ("BILDER\btn_id.gif") NO-ERROR.
      IF radspar = 3 THEN MBTN_ANM:LOAD-IMAGE ("BILDER\btn_anm.gif") NO-ERROR.
      IF radspar = 4 THEN MBTN_MTRL:LOAD-IMAGE ("BILDER\btn_mtrl.gif") NO-ERROR.
      IF radspar = 5 THEN MBTN_KALK:LOAD-IMAGE ("BILDER\btn_kalkyl.gif") NO-ERROR.
      IF radspar = 6 THEN MBTN_DOK:LOAD-IMAGE ("BILDER\btn_berbild.gif") NO-ERROR.
   END.
   */
   radspar = INTEGER(RAD_VAL:SCREEN-VALUE).
END PROCEDURE.

PROCEDURE fbtnsnabb_UI :
   snabbsparapagar = TRUE. 
   DEFINE VARIABLE muspl AS INTEGER NO-UNDO.
   IF stoppasnabbspar = TRUE THEN RETURN.
   IF entrymtrlantal = TRUE THEN snabbsparfix = 1.
   ELSE DO:
      RUN lmread_UI (TRUE).
      snabbsparfix = 2.
   END.
   
   IF FRAME-ID:VISIBLE THEN DO:
      APPLY "CHOOSE" TO BTN_KOPPID. 
   END.    
   IF ED_ANM:VISIBLE = TRUE THEN DO:
      muspl = ED_ANM:CURSOR-OFFSET.
      RUN btnkoppanm_UI.
   END.   
   {muswait.i}
   RUN rowleave_UI.
   listmtrlantal:READ-ONLY = TRUE.
   
   IF VALID-HANDLE(BeredClasserStart) THEN RUN kskspara_UI IN BeredClasserStart .
 
   RUN ok_UI.
     
   IF ED_ANM:VISIBLE = TRUE THEN DO:
      IF muspl > 0 THEN ED_ANM:CURSOR-OFFSET = muspl.
      /*APPLY "VALUE-CHANGED" TO BRW_VAL.*/ /* i ok_UI */
   END. 
    
  
  snabbsparfix = 0.
  RUN lmread_UI (FALSE).
       
   snabbsparapagar = FALSE.   
   {musarrow.i}
END PROCEDURE.

PROCEDURE fillnr1_UI :
   IF FILL-IN-NR1:SCREEN-VALUE NE " " THEN DO: 
      IF globforetag = "SUND" OR globforetag = "SNAT"  THEN RUN leave1_UI.                   
   END.   
END PROCEDURE.

PROCEDURE fillnr2_UI :
   IF FILL-IN-NR2:SCREEN-VALUE NE " " THEN DO:  
      IF globforetag = "SUND" OR globforetag = "SNAT" THEN RUN leave2_UI.                       
   END.   
END PROCEDURE.

PROCEDURE fillnr3_UI :
   IF FILL-IN-NR2:SCREEN-VALUE NE " " THEN DO:
      IF FILL-IN-NR3:SCREEN-VALUE NE " " THEN DO:
         IF globforetag = "SUND" OR globforetag = "SNAT" THEN RUN leave3_UI.                                 
      END.   
   END.   
END PROCEDURE.

PROCEDURE frikort_UI :
   {muswait.i}    
   FIND FIRST kon_val NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:  
      RUN selectfoc_UI (INPUT 21).      
      ASSIGN
      valnum = kon_val.NUM.         
      FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM NO-LOCK NO-ERROR.
      IF NOT AVAILABLE kon_id THEN DO:
         MESSAGE "Konstruktionen ej identifierad. Funktionen ej möjlig att utföra."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
      END.
      ELSE DO:
         kon_rowid = ROWID(kon_val). 
             
         FIND FIRST konstvaltemp WHERE konstvaltemp.KONSKOD = 0 NO-LOCK NO-ERROR.
         IF NOT AVAILABLE konstvaltemp THEN RUN laddatempen_UI IN bervalapph (INPUT 0, OUTPUT TABLE konstvaltemp APPEND).         
         kabkortvar = FALSE.
         RUN btnfri_UI IN huvprogh.
         
      END.
   END.
   ELSE DO:
      MESSAGE "Det fins ingen konstruktion att utföra frikort för."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
   END.      
   APPLY "VALUE-CHANGED" TO RAD_KOMP.
   {musarrow.i}
END PROCEDURE.

PROCEDURE hide_UI :
   RUN chbstate_UI.
   ASSIGN    
   RECT-22:HIDDEN = TRUE.   
   ASSIGN    
   FRAME-KONST:HIDDEN = TRUE
   FRAME-ID:HIDDEN = TRUE
   FRAME-ANM:HIDDEN = TRUE
   FRAME-MTRL:HIDDEN = TRUE
   FRAME-KALK:HIDDEN = TRUE
   FRAME-BILD:HIDDEN = TRUE.
   IF RAD_VAL:SCREEN-VALUE = "1" THEN DO:      
      {VIEWKON1.I} 
      FRAME-KONST:HIDDEN = FALSE.
      APPLY "VALUE-CHANGED" TO CMB_VAL.      
   END.
   ELSE IF RAD_VAL:SCREEN-VALUE = "2" THEN DO:  
      IF AVAILABLE kon_val THEN DO:         
         {VIEWID1.I} 
         FRAME-ID:HIDDEN = FALSE.
         kon_rowid = ROWID(kon_val).
         RUN id_UI.
      END. 
      ELSE DO:
         MESSAGE "Det finns inga konstruktioner att identifiera."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
      END.                 
   END.
   ELSE IF RAD_VAL:SCREEN-VALUE = "3" THEN DO: 
      IF AVAILABLE kon_val THEN DO: 
         IF anmenable = FALSE THEN DO:
            ASSIGN
            ED_ANM:HIDDEN = FALSE 
            FILL-IN-TEXT:HIDDEN = FALSE 
            BRW_ANM:HIDDEN = FALSE 
            BTN_OVER-2:HIDDEN = FALSE
            anmenable = TRUE.
         END.
         ASSIGN   
         ED_ANM:HIDDEN = FALSE
      /*    BTN_KOPPANM:HIDDEN = FALSE */
         FILL-IN-TEXT:HIDDEN = FALSE
         BRW_ANM:HIDDEN = FALSE
         BTN_OVER-2:HIDDEN = FALSE. 
         FRAME-ANM:HIDDEN = FALSE.
         APPLY "VALUE-CHANGED" TO BRW_VAL.
      END.     
      ELSE DO:
         MESSAGE "Det finns inga konstruktioner att ange anmärkning för."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
      END.        
   END.
   ELSE IF RAD_VAL:SCREEN-VALUE = "4" THEN DO: 
      sermtrl = FALSE. 
      IF AVAILABLE kon_val THEN APPLY "VALUE-CHANGED" TO BRW_VAL.      
      ELSE DO:
         MESSAGE "Det finns inga konstruktioner att editera materiel för."
         VIEW-AS ALERT-BOX TITLE "Meddelande".         
      END.        
      {musarrow.i}
   END.    
   ELSE IF RAD_VAL:SCREEN-VALUE = "5" THEN DO: 
      IF AVAILABLE kon_val THEN DO: 
         {VIEWKALK1.I} 
         IF Guru.Konstanter:hoppsekvar[3] = TRUE THEN DO:
            IF Guru.Konstanter:kalk2sekvar[2] = TRUE THEN DO.
               BTN_NYKOD:HIDDEN = FALSE.
               BTN_GRUNDUPP:HIDDEN = FALSE.
            END.   
            ELSE DO:
               BTN_NYKOD:HIDDEN = TRUE.
               BTN_GRUNDUPP:HIDDEN = TRUE.
            END.    
         END.
         ELSE DO:
           BTN_NYKOD:HIDDEN = TRUE.
           BTN_GRUNDUPP:HIDDEN = TRUE.
         END. 
           /*ska INTE köras!*/
         BTN_GRUNDUPP:HIDDEN = TRUE.  
         FRAME-KALK:HIDDEN = FALSE.
         APPLY "VALUE-CHANGED" TO BRW_VAL.
      END.     
      ELSE DO:
         MESSAGE "Det finns inga konstruktioner att editera kalkykoder för."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
      END.
   END.
   ELSE IF RAD_VAL:SCREEN-VALUE = "6" THEN DO: 
      IF AVAILABLE kon_val THEN DO: 
         IF bildenable = FALSE THEN DO:
            ASSIGN
            BRW_BILD:HIDDEN = FALSE
            BTN_NYA:HIDDEN = FALSE  
            BTN_BILDCOPY:HIDDEN = FALSE
            BTN_BORTA:HIDDEN = FALSE
            BTN_VISA:HIDDEN = FALSE.            
            bildenable = TRUE.
         END.
         ASSIGN   
         BRW_BILD:HIDDEN = FALSE
      /*    BTN_KOPPANM:HIDDEN = FALSE */         
         BTN_NYA:HIDDEN = FALSE
         BTN_BILDCOPY:HIDDEN = FALSE         
         BTN_BORTA:HIDDEN = FALSE
         BTN_VISA:HIDDEN = FALSE. 
         FRAME-BILD:HIDDEN = FALSE.
         APPLY "VALUE-CHANGED" TO BRW_VAL.
      END.     
      ELSE DO:
         MESSAGE "Det finns inga konstruktioner att koppla bild(er)/dokument till."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
      END.                  
   END.
END PROCEDURE.

PROCEDURE kopikonsten_UI :
   ASSIGN
   counter = 0
   counterord = 0.
   FIND LAST kon_val USE-INDEX NUM NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:
      counter = kon_val.NUM + 1.      
      FIND LAST bortkon_val USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE bortkon_val THEN DO:
         IF bortkon_val.NUM + 1 >= counter THEN counter = bortkon_val.NUM + 1.         
      END.
   END.
   ELSE DO:
      counter = counter + 1.      
      FIND LAST bortkon_val USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE bortkon_val THEN DO:
         IF bortkon_val.NUM + 1 >= counter THEN counter = bortkon_val.NUM + 1.         
      END.
   END.
   FIND LAST kon_val USE-INDEX ORD NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:                                   
      counterord = kon_val.ORD + 1.
      FIND LAST bortkon_val USE-INDEX ORD NO-LOCK NO-ERROR.
      IF AVAILABLE bortkon_val THEN DO:
         IF bortkon_val.ORD + 1 >= counterord THEN counterord = bortkon_val.ORD + 1.         
      END.
   END.
   ELSE DO:
      counterord = counterord + 1.
      FIND LAST bortkon_val USE-INDEX ORD NO-LOCK NO-ERROR.
      IF AVAILABLE bortkon_val THEN DO:
         IF bortkon_val.ORD + 1 >= counterord THEN counterord = bortkon_val.ORD + 1.         
      END.
   END.
END PROCEDURE.

PROCEDURE kopikonst_UI :
   RUN kopikonsten_UI.
   FIND FIRST kon_val WHERE kon_val.NUM = valnum AND kon_val.KSKAP = FALSE 
   NO-LOCK NO-ERROR.
  /*
   MESSAGE "Bilder och kombinationer kopieras inte!" SKIP 
           "Egna kalkylkoder kopieras inte!"
      VIEW-AS ALERT-BOX.
   */
   FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM
   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE list_mtrl THEN RUN nykabstart_UI.   
   FIND FIRST kalk_temp WHERE kalk_temp.NUM = kon_val.NUM
   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE kalk_temp THEN RUN nykabstart2_UI.   
   valnum = kon_val.NUM.
   RUN kopikon_UI.  
   RUN sorterabrwval_UI.
   
   FIND FIRST kon_val WHERE kon_val.NUM = counter AND kon_val.KSKAP = FALSE
   NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:
      kon_rowid = ROWID(kon_val).
      RUN kondisp_UI.
      RUN sokkdisp_UI.      
   END.
   APPLY "VALUE-CHANGED" TO BRW_VAL.
END PROCEDURE.

PROCEDURE kopikon_UI :
   DEFINE BUFFER konbuff FOR kon_val.
   DEFINE BUFFER listbuff FOR list_mtrl.
   DEFINE BUFFER kalkbuff FOR kalk_temp.   
   FOR EACH kon_val WHERE kon_val.NUM = valnum NO-LOCK.
      CREATE konbuff.
      ASSIGN
      konbuff.NUM = counter
      konbuff.GRUPP = kon_val.GRUPP
      konbuff.F1 = kon_val.F1
      konbuff.F2 = kon_val.F2
      konbuff.F3 = kon_val.F3
      konbuff.F4 = kon_val.F4
      konbuff.F5 = kon_val.F5
      konbuff.F6 = kon_val.F6
      konbuff.KSKAP = kon_val.KSKAP
      konbuff.TYP = kon_val.TYP
      konbuff.SKAPNUM = kon_val.SKAPNUM
      konbuff.ANMARK = kon_val.ANMARK
      konbuff.EXTRA = SUBSTRING(kon_val.EXTRA,1,1)
      konbuff.EXTRA2 = kon_val.EXTRA2
      konbuff.EXTRA3 = SUBSTRING(kon_val.EXTRA3,1,1)
      konbuff.ANDRAD = "AND"
      konbuff.MTRLFINNS = kon_val.MTRLFINNS
      konbuff.KALKFINNS = kon_val.KALKFINNS.
      

      IF kon_val.KSKAP = FALSE THEN konbuff.ORD = counterord.
   END.
   FOR EACH list_mtrl WHERE list_mtrl.NUM = valnum NO-LOCK.
      CREATE listbuff.
      BUFFER-COPY list_mtrl TO listbuff.
      ASSIGN
      listbuff.NUM = counter.
   END.
   FOR EACH kalk_temp WHERE kalk_temp.NUM = valnum NO-LOCK.
      IF kalk_temp.ARBKOD = "EGEN" THEN.
      ELSE DO:
         CREATE kalkbuff.
         BUFFER-COPY kalk_temp TO kalkbuff.
         ASSIGN
         kalkbuff.NUM = counter.      
      END.   
   END.    
END PROCEDURE.

PROCEDURE leave1_UI :                                                     
   FIND FIRST berfortemp WHERE berfortemp.FORNR = FILL-IN-NR1:SCREEN-VALUE NO-LOCK NO-ERROR.
   IF NOT AVAILABLE berfortemp THEN DO:
      MESSAGE "Det finns ingen " + annamntemp.TAB1 + " med Nr: " + FILL-IN-NR1:SCREEN-VALUE + ". Vill du skapa en ny?"
      VIEW-AS ALERT-BOX
      QUESTION BUTTONS YES-NO TITLE "Meddelande" UPDATE svar.         
      IF svar THEN DO:
         {muswait.i}
         ASSIGN 
         musz = FALSE 
         siff = 1
         id = TRUE
         nyttidnr = FILL-IN-NR1:SCREEN-VALUE.
         
         RUN NYANNU.W.
         
         IF musz = FALSE THEN DO: 
            /*RUN setcolsortvar_UI IN brwproc[18] (INPUT "").            
            RUN openbdynspec_UI IN brwproc[18].
            */
            APPLY "CHOOSE" TO BTN_HMT.
            FIND FIRST berfortemp WHERE berfortemp.FORNR = FILL-IN-NR1:SCREEN-VALUE 
            NO-LOCK NO-ERROR.
            IF AVAILABLE berfortemp THEN DO:
               RUN setlastrowid_UI IN brwproc[18] (INPUT ROWID(berfortemp)).
               RUN lastselectdyn_UI IN brwproc[18].   
               valford = FILL-IN-NR1:SCREEN-VALUE.
               /*APPLY "VALUE-CHANGED" TO BRW_TAB1.                */
            END.   
         END.
         ELSE DO:           
            musz = FALSE.    
            APPLY "VALUE-CHANGED" TO BRW_TAB1.
            RETURN NO-APPLY.                                 
         END.   
         {musarrow.i}       
      END.
      ELSE DO:
         APPLY "VALUE-CHANGED" TO BRW_TAB1.
         RETURN NO-APPLY.
      END.         
   END.
   ELSE DO: 
      RUN setlastrowid_UI IN brwproc[18] (INPUT ROWID(berfortemp)).
      RUN lastselectdyn_UI IN brwproc[18].   
      valford = FILL-IN-NR1:SCREEN-VALUE.
      /*APPLY "VALUE-CHANGED" TO BRW_TAB1.*/
   END.  
END PROCEDURE.

PROCEDURE leave2_UI :
   FIND FIRST berlinjetemp WHERE berlinjetemp.FORNR = FILL-IN-NR1:SCREEN-VALUE AND
   berlinjetemp.LINNR = FILL-IN-NR2:SCREEN-VALUE NO-LOCK NO-ERROR.
   IF NOT AVAILABLE berlinjetemp THEN DO:
      MESSAGE "Det finns ingen " + annamntemp.TAB2 + " med Nr: " + FILL-IN-NR2:SCREEN-VALUE + " kopplad till " + annamntemp.TAB1 + " med Nr: "+ FILL-IN-NR1:SCREEN-VALUE + ". Vill du skapa en ny?"
      VIEW-AS ALERT-BOX
      QUESTION BUTTONS YES-NO TITLE "Meddelande" UPDATE svar.         
      IF svar THEN DO:
         {muswait.i}
         ASSIGN 
         musz = FALSE 
         siff = 2
         id = TRUE
         nyttidnr = FILL-IN-NR2:SCREEN-VALUE
         valford = FILL-IN-NR1:SCREEN-VALUE.
         
         RUN NYANNU.W. 
         
         IF musz = FALSE THEN DO:             
            RUN setcolsortvar_UI IN brwproc[19] (INPUT " WHERE FORNR = '" + STRING(valford) + "'").
            RUN openbdynspec_UI IN brwproc[19]. 
             FIND FIRST berlinjetemp WHERE berlinjetemp.FORNR = valford AND
             berlinjetemp.LINNR = FILL-IN-NR2:SCREEN-VALUE NO-LOCK NO-ERROR.
             IF AVAILABLE berlinjetemp THEN DO:
                RUN setlastrowid_UI IN brwproc[19] (INPUT ROWID(berlinjetemp)).
                RUN lastselectdyn_UI IN brwproc[19].   
                vallinje = FILL-IN-NR2:SCREEN-VALUE.
                /*APPLY "VALUE-CHANGED" TO BRW_TAB2.   */
             END.   
         END.   
         ELSE DO:
            musz = FALSE.
            RUN setcolsortvar_UI IN brwproc[19] (INPUT " WHERE FORNR = '" + STRING(valford) + "'").
            RUN openbdynspec_UI IN brwproc[19].
            APPLY "VALUE-CHANGED" TO BRW_TAB2.
            RETURN NO-APPLY.
         END.
         {musarrow.i}       
      END.    
      ELSE DO:
         RUN setcolsortvar_UI IN brwproc[19] (INPUT " WHERE FORNR = '" + STRING(valford) + "'").
         RUN openbdynspec_UI IN brwproc[19].
         APPLY "VALUE-CHANGED" TO BRW_TAB2.
         RETURN NO-APPLY.
      END.     
   END.    
   ELSE DO:        
      RUN setlastrowid_UI IN brwproc[19] (INPUT ROWID(berlinjetemp)).
      RUN lastselectdyn_UI IN brwproc[19].   
      vallinje = FILL-IN-NR2:SCREEN-VALUE.
      /*APPLY "VALUE-CHANGED" TO BRW_TAB2.*/
   END.  
END PROCEDURE.

PROCEDURE leave3_UI :
   FIND FIRST bernattemp WHERE bernattemp.FORNR = FILL-IN-NR1:SCREEN-VALUE AND
   bernattemp.LINNR = FILL-IN-NR2:SCREEN-VALUE AND bernattemp.NATNR = FILL-IN-NR3:SCREEN-VALUE NO-LOCK NO-ERROR.
   IF NOT AVAILABLE bernattemp THEN DO:
      MESSAGE "Det finns ingen " + annamntemp.TAB3 + " med Nr: " + FILL-IN-NR3:SCREEN-VALUE + " kopplad till " + annamntemp.TAB2 + " med Nr: "+ FILL-IN-NR2:SCREEN-VALUE + ". Vill du skapa en ny?"
      VIEW-AS ALERT-BOX
      QUESTION BUTTONS YES-NO TITLE "Meddelande" UPDATE svar.         
      IF svar THEN DO:
         {muswait.i}
         ASSIGN 
         musz = FALSE 
         siff = 3
         id = TRUE
         nyttidnr = FILL-IN-NR3:SCREEN-VALUE
         valford = FILL-IN-NR1:SCREEN-VALUE
         vallinje = FILL-IN-NR2:SCREEN-VALUE.
         
         RUN NYANNU.W. 
         
         IF musz = FALSE THEN DO:
            RUN setcolsortvar_UI IN brwproc[20] (INPUT " WHERE FORNR = '" + STRING(valford) + "' AND LINNR = '" + STRING(vallinje) + "'").
            RUN openbdynspec_UI IN brwproc[20].
            FIND FIRST bernattemp WHERE bernattemp.FORNR = valford AND
            bernattemp.LINNR = vallinje AND bernattemp.NATNR = FILL-IN-NR3:SCREEN-VALUE
            NO-LOCK NO-ERROR.
            IF AVAILABLE bernattemp THEN DO:
               RUN setlastrowid_UI IN brwproc[20] (INPUT ROWID(bernattemp)).
               RUN lastselectdyn_UI IN brwproc[20].   
               valnat = FILL-IN-NR3:SCREEN-VALUE.
               /*APPLY "VALUE-CHANGED" TO BRW_TAB3.     */
            END.   
         END.  
         ELSE DO:
            musz = FALSE.
            RUN setcolsortvar_UI IN brwproc[20] (INPUT " WHERE FORNR = '" + STRING(valford) + "' AND LINNR = '" + STRING(vallinje) + "'").
            RUN openbdynspec_UI IN brwproc[20].
            /*APPLY "VALUE-CHANGED" TO BRW_TAB3.*/
            RETURN NO-APPLY.
         END. 
         {musarrow.i}       
      END.
      ELSE DO:
         RUN setcolsortvar_UI IN brwproc[20] (INPUT " WHERE FORNR = '" + STRING(valford) + "' AND LINNR = '" + STRING(vallinje) + "'").
         RUN openbdynspec_UI IN brwproc[20].
         APPLY "VALUE-CHANGED" TO BRW_TAB3.
         RETURN NO-APPLY.
      END.           
   END.                  
   ELSE DO:
      RUN setlastrowid_UI IN brwproc[20] (INPUT ROWID(bernattemp)).
      RUN lastselectdyn_UI IN brwproc[20].   
      valnat = FILL-IN-NR3:SCREEN-VALUE.
      /*APPLY "VALUE-CHANGED" TO BRW_TAB3.*/
   END.  
END PROCEDURE.

PROCEDURE atgarder_UI :
   RUN selectfoc_UI (INPUT 21).
   IF NOT AVAILABLE kon_val THEN DO:
      MESSAGE "Det finns inga konstruktioner att åtgärda!" VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.
   numunik = kon_val.NUM.
   {muswait.i}  
   {SOKSTART.I}
   ASSIGN
   soktemp.SOKVAL = 59   
   soktemp.SOKINT[1] = 1
   soktemp.SOKLOG[1] = FALSE
   soktemp.SOKCHAR[1] = valaonr
   soktemp.SOKCHAR[2] = valomrade.
   {SOKANROP.I}
   IF soktemp.SOKLOG[1] = TRUE THEN DO:
      MESSAGE soktemp.SOKCHAR[3] VIEW-AS ALERT-BOX TITLE "Meddelande".       
   END.
   ELSE DO:
      APPLY "CHOOSE" TO FBTN_SNABB.
      RUN btnatg_UI IN huvprogh.      
      EMPTY TEMP-TABLE list_mtrl NO-ERROR.
      EMPTY TEMP-TABLE kalk_temp NO-ERROR. 
   END.
   
   {musarrow.i}
END PROCEDURE.


PROCEDURE listor_UI :
   RUN selectfoc_UI (INPUT 21).
   IF NOT AVAILABLE kon_val THEN DO:
      MESSAGE "Det finns inga konstruktioner att visa!" VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.
   RUN btnlistor_UI IN huvprogh.
   numunik = kon_val.NUM.
   {muswait.i}  
   {SOKSTART.I}
   ASSIGN
   soktemp.SOKVAL = 59   
   soktemp.SOKINT[1] = 2
   soktemp.SOKLOG[1] = FALSE
   soktemp.SOKCHAR[1] = valaonr
   soktemp.SOKCHAR[2] = valomrade.
   {SOKANROP.I}
   IF soktemp.SOKLOG[1] = TRUE THEN DO:
      APPLY "CHOOSE" TO FBTN_SNABB.
      RUN btnlistor_UI IN huvprogh.      
   END.
   ELSE DO:
      MESSAGE "Det finns inga konstruktioner i den valda i beredningen. Du måste spara först."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN.
   END.     
   
   {musarrow.i}
END PROCEDURE.

PROCEDURE listhelp_UI :
   RUN sorterabrwval_UI.
   FIND FIRST kon_val WHERE kon_val.NUM = numunik AND kon_val.KSKAP = FALSE NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:
      RUN kondisp_UI.
      RUN sokkdisp_UI.            
   END.
END PROCEDURE.


PROCEDURE minne_UI :
   RUN DIRNAMN.P (INPUT filnamn, OUTPUT dirnamn).
   RUN sparadir_UI IN bervalapph (INPUT Guru.Konstanter:globanv, INPUT dirnamn).
END PROCEDURE.

PROCEDURE musbendubb_UI :
   {muswait.i}
   {BENHMT2M.I}      
   RUN initsok_UI (INPUT 1,INPUT aosok).
   RUN levnamn_UI (22).
   {musarrow.i}
END PROCEDURE.

PROCEDURE musenrdubb_UI :
   {muswait.i}
   {ENRHMT2M.I}
   
   RUN initsok_UI (INPUT 2,INPUT posok).
   {musarrow.i}
   RUN levnamn_UI (22).
END PROCEDURE.
PROCEDURE muskoddubb_UI :
   {muswait.i}
   {ENRHMT3M.I}
   RUN initsok_UI (INPUT 2,INPUT posok).
   
   {musarrow.i}
END PROCEDURE.

PROCEDURE levnamn_UI :
   DEFINE INPUT  PARAMETER brw AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwantal AS INTEGER NO-UNDO.
   FOR EACH levtemp,
   EACH mtrltemp WHERE mtrltemp.LEVKOD = levtemp.LEVKOD AND mtrltemp.LEVNAMN = "":
      mtrltemp.LEVNAMN = levtemp.LEVNAMN.
   END.   
   RUN openbdynspec_UI IN brwproc[brw].
   RUN getnumresult_UI IN brwproc[brw] (OUTPUT brwantal).
   RUN title_UI IN brwproc[brw].  
   IF brwantal = 1 THEN DO:
      RUN getfirst_UI IN brwproc[brw].
      RUN lastselectdyn_UI IN brwproc[brw].
   END.   
END PROCEDURE.

PROCEDURE rowdispextra_UI :
   DEFINE INPUT PARAMETER TABLE FOR coltemp.
   DEFINE INPUT PARAMETER brwh AS HANDLE NO-UNDO.
  
   IF brwh:NAME = "BRW_KON" THEN RUN rowdbrwkon_UI IN huvprogh. 
   IF brwh:NAME = "BRW_B2" THEN RUN rowdbrwunder_UI IN huvprogh (INPUT 2).
   IF brwh:NAME = "BRW_B3" THEN RUN rowdbrwunder_UI IN huvprogh (INPUT 3). 
   IF brwh:NAME = "BRW_KB2" THEN RUN rowdbrwunder_UI IN huvprogh (INPUT 12).
   IF brwh:NAME = "BRW_KB3" THEN RUN rowdbrwunder_UI IN huvprogh (INPUT 13). 
   IF brwh:NAME = "BRW_HLEV" THEN RUN rowdispmtrl_UI IN huvprogh (INPUT 1). 
   IF brwh:NAME = "BRW_MTRL" THEN RUN rowdispmtrl_UI IN huvprogh (INPUT 3). 
   IF brwh:NAME = "BRW_STOLP" THEN RUN rowdispmtrl_UI IN huvprogh (INPUT 5).
   IF brwh:NAME = "BRW_STOLPSM" THEN RUN rowdispmtrl_UI IN huvprogh (INPUT 6).
   IF brwh:NAME = "BRW_SOKMTRLF" THEN RUN rowdispmtrl_UI IN huvprogh (INPUT 7). 
   
END PROCEDURE.

PROCEDURE radval_UI :
   DEFINE INPUT PARAMETER vad AS INTEGER NO-UNDO.
   RAD_VAL:SCREEN-VALUE = STRING(vad).
END PROCEDURE.

PROCEDURE vcradval_UI :
   DELETE OBJECT tth NO-ERROR.
   RUN frameh_UI IN huvprogh (INPUT TRUE).
   tth = ?.  
   RUN friExtra1hread_UI (TRUE). 
   RAD_KOMP:SCREEN-VALUE = "1".   
   IF RAD_VAL:SCREEN-VALUE NE "3" AND radspar = 3 THEN DO:      
      APPLY "CHOOSE" TO BTN_KOPPANM.
   END.
   RUN rowcolsel_UI IN brwproc[21] (INPUT 12,INPUT RAD_KOMP:SCREEN-VALUE).
  /*
   IF RAD_VAL:SCREEN-VALUE = "2" THEN DO:
      RUN lastselectdyn_UI IN brwproc[21].      
   END.
   ELSE DO:
      RUN lastselectdyn_UI IN brwproc[21].     
   END.
   */
   IF RAD_VAL:SCREEN-VALUE = "1" THEN DO:
      RUN kondispstart_UI.
      RUN openbdynspec_UI IN brwproc[21].
   END.  
   IF RAD_VAL:SCREEN-VALUE = "2" THEN DO:
      RUN friExtra1hread_UI (FALSE).
      RUN kondispstart_UI.
      RUN openbdynspec_UI IN brwproc[21].
   END.   
   
   RUN lastselectdyn_UI IN brwproc[21]. 
   RUN hide_UI. 
   RUN PlaceraKnapp_UI.
END PROCEDURE.

PROCEDURE vctoga_UI :
   IF kon_val.ID = TRUE THEN DO:
      IF TOG_A:CHECKED = FALSE THEN DO:
         FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND
         list_mtrl.PAR = 1 NO-LOCK NO-ERROR.
         IF AVAILABLE list_mtrl THEN DO:
            MESSAGE "Det finns artiklar kopplade till parstolpe: " + parstolptemp.AFORKL + 
            ". Ta bort dessa innan du förändrar identiteten."
            VIEW-AS ALERT-BOX TITLE "Meddelande".
            TOG_A:CHECKED = TRUE.
         END.
      END.
   END.   
END PROCEDURE.

PROCEDURE vctogb_UI :
   IF kon_val.ID = TRUE THEN DO:
      IF TOG_B:CHECKED = FALSE THEN DO:
         FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND
         list_mtrl.PAR = 2 NO-LOCK NO-ERROR.
         IF AVAILABLE list_mtrl THEN DO:
            MESSAGE "Det finns artiklar kopplade till parstolpe: " + parstolptemp.BFORKL + 
            ". Ta bort dessa innan du förändrar identiteten."
            VIEW-AS ALERT-BOX TITLE "Meddelande".
            TOG_B:CHECKED = TRUE.            
         END.
      END.
   END.
END PROCEDURE.

PROCEDURE vctogc_UI :
   IF kon_val.ID = TRUE THEN DO:
      IF TOG_C:CHECKED = FALSE THEN DO:
         FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND
         list_mtrl.PAR = 3 NO-LOCK NO-ERROR.
         IF AVAILABLE list_mtrl THEN DO:
            MESSAGE "Det finns artiklar kopplade till parstolpe: " + parstolptemp.CFORKL + 
            ". Ta bort dessa innan du förändrar identiteten."
            VIEW-AS ALERT-BOX TITLE "Meddelande".
            TOG_C:CHECKED = TRUE.            
         END.
      END.
   END.
END PROCEDURE.

PROCEDURE visamtrl_UI :
   RUN selectfoc_UI (INPUT 14).
   EMPTY TEMP-TABLE visamtrl NO-ERROR.   
   RUN visamtrlhmt_UI IN bervalapph (INPUT konsttemp.KTYPKOD, INPUT vismtrl, INPUT visval,
                                    OUTPUT TABLE visamtrl).     
   Guru.GlobalaVariabler:fonsteHojd = CURRENT-WINDOW:HEIGHT-PIXELS.
   RUN BERVISAMTRL.W (INPUT konsttemp.KTYPKOD, INPUT vismtrl, INPUT visval, INPUT TABLE visamtrl).   
   
END PROCEDURE.



PROCEDURE vmtrlb2_UI :
  RUN selectfoc_UI (INPUT 2).  
  IF status-ok = TRUE THEN DO:  
     ASSIGN
     vismtrl = konstvaltemp.KVALKOD
     visval = 2.
     RUN visamtrl_UI.
  END. 
END PROCEDURE.

PROCEDURE vmtrlb3_UI :
  RUN selectfoc_UI (INPUT 3).
  IF status-ok = TRUE THEN DO:  
     ASSIGN
     vismtrl = konstvaltemp.KVALKOD
     visval = 3.
     RUN visamtrl_UI.
  END. 
END PROCEDURE.

PROCEDURE vmtrlb4_UI :
  RUN selectfoc_UI (INPUT 4). 
  IF status-ok = TRUE THEN DO:  
     ASSIGN
     vismtrl = konstvaltemp.KVALKOD
     visval = 4.
     RUN visamtrl_UI.
  END. 
END PROCEDURE.

PROCEDURE vmtrlb5_UI :
  RUN selectfoc_UI (INPUT 5).
  IF status-ok = TRUE THEN DO:  
     ASSIGN
     vismtrl = konstvaltemp.KVALKOD
     visval = 5.
     RUN visamtrl_UI.
  END. 
END PROCEDURE.

PROCEDURE vmtrlb6_UI :
  RUN selectfoc_UI (INPUT 6).
  IF status-ok = TRUE THEN DO:  
     ASSIGN
     vismtrl = konstvaltemp.KVALKOD
     visval = 6.
     RUN visamtrl_UI.
  END. 
END PROCEDURE.

PROCEDURE vmtrlkb2_UI :
  RUN selectfoc_UI (INPUT 9).
  IF status-ok = TRUE THEN DO:  
     ASSIGN
     vismtrl = konstvaltemp.KVALKOD
     visval = 2.
     RUN visamtrl_UI.
  END. 
END PROCEDURE.
PROCEDURE vmtrlkb3_UI :
  RUN selectfoc_UI (INPUT 10).
  IF status-ok = TRUE THEN DO:  
     ASSIGN
     vismtrl = konstvaltemp.KVALKOD
     visval = 3.
     RUN visamtrl_UI.
  END. 
END PROCEDURE.

PROCEDURE vmtrlkb4_UI :
  RUN selectfoc_UI (INPUT 11).
  IF status-ok = TRUE THEN DO:  
     ASSIGN
     vismtrl = konstvaltemp.KVALKOD
     visval = 4.
     RUN visamtrl_UI.
  END. 
END PROCEDURE.

PROCEDURE vmtrlkb5_UI :
  RUN selectfoc_UI (INPUT 12).
  IF status-ok = TRUE THEN DO:  
     ASSIGN
     vismtrl = konstvaltemp.KVALKOD
     visval = 5.
     RUN visamtrl_UI.
  END. 
END PROCEDURE.

PROCEDURE vmtrlkb6_UI :
  RUN selectfoc_UI (INPUT 13).
  IF status-ok = TRUE THEN DO:  
     ASSIGN
     vismtrl = konstvaltemp.KVALKOD
     visval = 6.
     RUN visamtrl_UI.
  END. 
END PROCEDURE.
PROCEDURE inkopkoll_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/  
  {INKOLLFINNS.I}   
   
          
END PROCEDURE.
PROCEDURE sokkdisp_UI :
   FIND FIRST kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:
      FIND FIRST kon_display WHERE kon_display.NUM = kon_val.NUM NO-LOCK NO-ERROR.
      IF NOT AVAILABLE kon_display THEN DO:
         RUN kondisp_UI.
      END.
      IF AVAILABLE kon_display THEN DO:     
         RUN setlastrowid_UI IN brwproc[21] (INPUT ROWID(kon_display)).
         RUN lastselectdyn_UI IN brwproc[21]. 
      END.          
   END.
END PROCEDURE.
PROCEDURE sokkdispu_UI :
   FIND FIRST kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:
      FIND FIRST kon_display WHERE kon_display.NUM = kon_val.NUM NO-LOCK NO-ERROR.
      IF AVAILABLE kon_display THEN DO:
         RUN setlastrowid_UI IN brwproc[21] (INPUT ROWID(kon_display)).
      END.                
   END.
END PROCEDURE.


PROCEDURE kondisp_UI :
   DEFINE VARIABLE ny AS LOGICAL NO-UNDO.
   DEFINE BUFFER kdisp FOR kon_val.
   IF AVAILABLE kon_val THEN DO:
      FIND FIRST kon_display WHERE kon_display.NUM = kon_val.NUM NO-LOCK NO-ERROR.
      IF NOT AVAILABLE kon_display THEN DO:
         CREATE kon_display.
         ny = TRUE.
      END.   
      IF kon_val.KSKAP = FALSE THEN DO:
         BUFFER-COPY kon_val TO kon_display.
         kon_rowid = ROWID(kon_val).         
      END.    
      {MARKKABVAL.I}
      IF enval = TRUE THEN DO:
         FIND FIRST kdisp WHERE kdisp.NUM = kon_val.NUM AND kdisp.F2 NE "" USE-INDEX NUM2 NO-LOCK NO-ERROR.
         IF AVAILABLE kdisp THEN DO:
            IF kon_display.F1 = "" THEN kon_display.F1 = kdisp.F1.
            IF kon_display.F2 = "" THEN kon_display.F2 = kdisp.F2.
            IF kon_display.F3 = "" THEN kon_display.F3 = kdisp.F3.
            IF kon_display.F4 = "" THEN kon_display.F4 = kdisp.F4.
            IF kon_display.F5 = "" THEN kon_display.F5 = kdisp.F5.
            IF kon_display.F6 = "" THEN kon_display.F6 = kdisp.F6.
            kon_display.KSKAP = FALSE.              
         END.
         ELSE DO:
            FOR EACH kdisp WHERE kdisp.NUM = kon_display.NUM USE-INDEX NUM2 NO-LOCK:
               IF kon_display.F1 = "" THEN kon_display.F1 = kdisp.F1.
               IF kon_display.F2 = "" THEN kon_display.F2 = kdisp.F2.
               IF kon_display.F3 = "" THEN kon_display.F3 = kdisp.F3.
               IF kon_display.F4 = "" THEN kon_display.F4 = kdisp.F4.
               IF kon_display.F5 = "" THEN kon_display.F5 = kdisp.F5.
               IF kon_display.F6 = "" THEN kon_display.F6 = kdisp.F6.
               kon_display.KSKAP = FALSE.               
            END.
         END.   
      END.
      ELSE DO:     
         FOR EACH kdisp WHERE kdisp.NUM = kon_display.NUM AND kdisp.KSKAP = TRUE USE-INDEX NUM2 NO-LOCK:
            IF kon_display.F1 = "" THEN kon_display.F1 = kdisp.F1.
            IF kon_display.F2 = "" THEN kon_display.F2 = kdisp.F2.
            IF kon_display.F3 = "" THEN kon_display.F3 = kdisp.F3.
            IF kon_display.F4 = "" THEN kon_display.F4 = kdisp.F4.
            IF kon_display.F5 = "" THEN kon_display.F5 = kdisp.F5.
            IF kon_display.F6 = "" THEN kon_display.F6 = kdisp.F6.                         
         END.
      END.
      enval = FALSE.   
   END. 
   IF ny = TRUE THEN  RUN openbdynspec_UI IN brwproc[21].
   ny = FALSE.          
END PROCEDURE.

PROCEDURE kondispstart_UI :
   
   DEFINE BUFFER kdisp FOR kon_val.
   FOR EACH kon_val WHERE kon_val.KSKAP = FALSE:
      FIND FIRST kon_display WHERE kon_display.NUM = kon_val.NUM NO-LOCK NO-ERROR.
      IF NOT AVAILABLE kon_display THEN CREATE kon_display.
      BUFFER-COPY kon_val TO kon_display.         
   END.
   FOR EACH kon_val WHERE kon_val.KSKAP = TRUE USE-INDEX NUM2 ,
   EACH kon_display WHERE kon_display.NUM = kon_val.NUM:
      {MARKKABVAL.I}
      IF enval = TRUE THEN DO:
         IF kon_val.GRUPP = 0 THEN
         FIND FIRST kdisp WHERE kdisp.NUM = kon_val.NUM AND kdisp.F2 NE  "" USE-INDEX NUM2 NO-LOCK NO-ERROR.
         ELSE DO:
            FIND FIRST kdisp WHERE kdisp.NUM = kon_val.NUM AND kdisp.F2 NE "" USE-INDEX NUM2 NO-LOCK NO-ERROR.
            IF NOT AVAILABLE kdisp THEN DO:
               FIND FIRST kdisp WHERE kdisp.NUM = kon_val.NUM AND kdisp.F5 NE "" USE-INDEX NUM2 NO-LOCK NO-ERROR.
            END.
         END.   
         IF AVAILABLE kdisp THEN DO:
            IF kon_display.F1 = "" THEN kon_display.F1 = kdisp.F1.
            IF kon_display.F2 = "" THEN kon_display.F2 = kdisp.F2.
            IF kon_display.F3 = "" THEN kon_display.F3 = kdisp.F3.
            IF kon_display.F4 = "" THEN kon_display.F4 = kdisp.F4.
            IF kon_display.F5 = "" THEN kon_display.F5 = kdisp.F5.
            IF kon_display.F6 = "" THEN kon_display.F6 = kdisp.F6.
            kon_display.KSKAP = FALSE.                         
         END.
         ELSE DO:
            FOR EACH kdisp WHERE kdisp.NUM = kon_display.NUM USE-INDEX NUM2 NO-LOCK:
               IF kon_display.F1 = "" THEN kon_display.F1 = kdisp.F1.
               IF kon_display.F2 = "" THEN kon_display.F2 = kdisp.F2.
               IF kon_display.F3 = "" THEN kon_display.F3 = kdisp.F3.
               IF kon_display.F4 = "" THEN kon_display.F4 = kdisp.F4.
               IF kon_display.F5 = "" THEN kon_display.F5 = kdisp.F5.
               IF kon_display.F6 = "" THEN kon_display.F6 = kdisp.F6. 
               kon_display.KSKAP = FALSE.              
            END.
         END.   
      END.
      ELSE DO:              
         IF kon_display.F1 = "" THEN kon_display.F1 = kon_val.F1. 
         IF kon_display.F2 = "" THEN kon_display.F2 = kon_val.F2.
         IF kon_display.F3 = "" THEN kon_display.F3 = kon_val.F3.
         IF kon_display.F4 = "" THEN kon_display.F4 = kon_val.F4.
         IF kon_display.F5 = "" THEN kon_display.F5 = kon_val.F5.
         IF kon_display.F6 = "" THEN kon_display.F6 = kon_val.F6.
      END.   
      enval = FALSE.
   END.            
END PROCEDURE.

PROCEDURE goromDec_UI :
   DEFINE INPUT PARAMETER kvarde AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER barea AS CHARACTER NO-UNDO.
   DEFINE VARIABLE ascivarde AS INTEGER NO-UNDO.   
   DEFINE VARIABLE vardearray AS CHARACTER EXTENT 50 NO-UNDO.
   DEFINE VARIABLE vlangd AS INTEGER NO-UNDO.
   DEFINE VARIABLE ivar AS INTEGER NO-UNDO.
   DEFINE VARIABLE hjarea AS CHARACTER NO-UNDO.
   ivar = 1.
   vlangd = LENGTH(kvarde).
   DO WHILE ivar <= (vlangd):
      vardearray[ivar] = SUBSTRING(kvarde,1, 1).
      kvarde = SUBSTRING(kvarde,2).
      ivar = ivar + 1.
   END.
   ASSIGN
   kvarde = ""  barea = "" hjarea = "" ivar = 1.
   DO WHILE ivar <= vlangd:
      ascivarde = ASC(vardearray[ivar]).      
      /*siffror*/
      IF ascivarde >= 48 AND ascivarde <= 57 THEN barea = barea  + vardearray[ivar].      
      ELSE barea = "".      
      ivar = ivar + 1.   
      IF barea NE "" THEN hjarea = barea.   
  END.      
  IF barea = "" THEN barea = hjarea.
  IF LENGTH(barea) = 4 THEN barea = substring(barea,2).
  IF LENGTH(barea) = 5 THEN barea = substring(barea,3).
END PROCEDURE.

PROCEDURE KskImpMall_UI :
  DEFINE VARIABLE fildir  AS CHARACTER                         NO-UNDO.
   DEFINE VARIABLE globanv AS CHARACTER                         NO-UNDO.
   DEFINE VARIABLE OKvald  AS LOGICAL                           NO-UNDO.
   DEFINE VARIABLE res     AS System.Windows.Forms.DialogResult NO-UNDO.
   DEFINE VARIABLE counterbygg AS INTEGER NO-UNDO.
   Guru.Konstanter:globanv = Guru.Konstanter:globanv.
   fildir = SESSION:TEMP-DIRECTORY.
   {SESSIONTEMPDIR.I}
   IF SESSION:CLIENT-TYPE = "WEBCLIENT" THEN fildir = webclienttempdir.
   OS-CREATE-DIR VALUE(fildir) NO-ERROR.
   SYSTEM-DIALOG GET-FILE fildir
      TITLE          "Välj den kabelskåpsmall i excel som Ni vill läsa in"
      FILTERS        "All Files (*.xls;*.xlsx)"  "*.xls;*.xlsx"   
         INITIAL-DIR    fildir
         UPDATE OKvald.      
      IF OKvald = FALSE THEN RETURN.
      RUN fbtnsnabb_UI.
      
      ASSIGN
      counter = 0
      counterord = 0.      
      counterbygg = 1.
      IF Guru.Konstanter:varforetypval[32] = 1 OR Guru.Konstanter:varforetypval[32] = 2  THEN DO:
         FIND LAST kon_id WHERE kon_id.FRI2 NE ? USE-INDEX FRI NO-LOCK NO-ERROR.         
         IF AVAILABLE kon_id THEN DO:           
            counterbygg = kon_id.FRI2 + 1.
         END.
      END.               
      /*NUM*/
      FIND LAST kon_val USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE kon_val THEN DO:
         counter = kon_val.NUM + 1.            
      END.
      ELSE counter = counter + 1.      
      /*ORDNING*/
      FIND LAST kon_val USE-INDEX ORD NO-LOCK NO-ERROR.
      IF AVAILABLE kon_val THEN DO:                                   
         counterord = kon_val.ORD + 1.      
      END.
      ELSE counterord = counterord + 1.
      felmedd = "".            
      RUN KSKBYTEEXELIN.P (INPUT fildir, OUTPUT TABLE kskbyttemp ).
      RUN impkskbyt_UI IN bervalapph (INPUT valaonr, INPUT valomrade, INPUT counter, INPUT  counterord, INPUT counterbygg, INPUT TABLE kskbyttemp, OUTPUT felmedd).
      IF felmedd NE "" THEN DO:
         MESSAGE felmedd VIEW-AS ALERT-BOX TITLE "Meddelande".
         RETURN NO-APPLY.
      END.  
      RUN gammal_UI.
      RUN kondispstart_UI.
      RUN openbdynspec_UI IN brwproc[21].            
      RUN lastselectdyn_UI IN brwproc[21].
END PROCEDURE.



PROCEDURE frame_UI :
   DEFINE INPUT PARAMETER vad AS CHARACTER NO-UNDO.
   RUN frame_UI IN huvprogh (INPUT vad).
END PROCEDURE.
PROCEDURE borthand_UI :
   /*Anders Olsson Elpool i Umeå AB  8 okt 2018 14:50:55 
   
   ska in här 
   */
   EMPTY TEMP-TABLE kskkon_val NO-ERROR. 
   IF VALID-HANDLE(BeredClasserStart) THEN DELETE PROCEDURE BeredClasserStart NO-ERROR.
   IF VALID-HANDLE(KalkClasserStart) THEN DELETE PROCEDURE KalkClasserStart NO-ERROR.
   Guru.GlobalaVariabler:BerValDI2h = ?.
   berfortemph:EMPTY-TEMP-TABLE() NO-ERROR.
   berlinjetemph:EMPTY-TEMP-TABLE() NO-ERROR.
   bernattemph:EMPTY-TEMP-TABLE() NO-ERROR.
   berstolptemph:EMPTY-TEMP-TABLE() NO-ERROR.
   bildbertemph:EMPTY-TEMP-TABLE() NO-ERROR.
   fastanmtemph:EMPTY-TEMP-TABLE() NO-ERROR.
   konstgrptemph:EMPTY-TEMP-TABLE() NO-ERROR.
   konsttemph:EMPTY-TEMP-TABLE() NO-ERROR.
   konstvaltemph:EMPTY-TEMP-TABLE() NO-ERROR.
   mtrltemph:EMPTY-TEMP-TABLE() NO-ERROR.
   satstemph:EMPTY-TEMP-TABLE() NO-ERROR.
   kalk_temph:EMPTY-TEMP-TABLE() NO-ERROR.
   list_mtrlh:EMPTY-TEMP-TABLE() NO-ERROR.
   kon_valh:EMPTY-TEMP-TABLE() NO-ERROR.
   andrakon_valh:EMPTY-TEMP-TABLE() NO-ERROR.
   soktamtrlfavoh:EMPTY-TEMP-TABLE() NO-ERROR.
   {TIMERSLUT.I}
   
   IF VALID-HANDLE(soktamtrlfavoh) THEN   DELETE OBJECT soktamtrlfavoh  NO-ERROR.
   IF VALID-HANDLE(berfortemph  ) THEN   DELETE OBJECT berfortemph   NO-ERROR.
   IF VALID-HANDLE(berlinjetemph) THEN   DELETE OBJECT berlinjetemph NO-ERROR.
   IF VALID-HANDLE(bernattemph  ) THEN   DELETE OBJECT bernattemph   NO-ERROR.
   IF VALID-HANDLE(berstolptemph) THEN   DELETE OBJECT berstolptemph NO-ERROR.
   IF VALID-HANDLE(bildbertemph ) THEN   DELETE OBJECT bildbertemph  NO-ERROR.
   IF VALID-HANDLE(fastanmtemph ) THEN   DELETE OBJECT fastanmtemph  NO-ERROR.
   IF VALID-HANDLE(konstgrptemph) THEN   DELETE OBJECT konstgrptemph NO-ERROR.
   IF VALID-HANDLE(konsttemph   ) THEN   DELETE OBJECT konsttemph    NO-ERROR.
   IF VALID-HANDLE(konstvaltemph) THEN   DELETE OBJECT konstvaltemph NO-ERROR.
   IF VALID-HANDLE(mtrltemph    ) THEN   DELETE OBJECT mtrltemph     NO-ERROR.
   IF VALID-HANDLE(satstemph    ) THEN   DELETE OBJECT satstemph     NO-ERROR.
   IF VALID-HANDLE(kalk_temph   ) THEN   DELETE OBJECT kalk_temph    NO-ERROR.
   IF VALID-HANDLE(list_mtrlh   ) THEN   DELETE OBJECT list_mtrlh    NO-ERROR.
   IF VALID-HANDLE(kon_valh     ) THEN   DELETE OBJECT kon_valh      NO-ERROR.
   IF VALID-HANDLE(andrakon_valh     ) THEN   DELETE OBJECT andrakon_valh      NO-ERROR.
   IF VALID-HANDLE(frikortapph) THEN DELETE PROCEDURE frikortapph NO-ERROR.
   IF VALID-HANDLE(kopimtrlapph) THEN DELETE PROCEDURE kopimtrlapph NO-ERROR.
   kopimtrlapph = ?.
   frikortapph = ?.
   IF VALID-HANDLE(inkberh) THEN DO: 
      RUN InkAvs_UI IN inkberh.
      DELETE PROCEDURE inkberh NO-ERROR.
   END. 
   ASSIGN
   BeredClasserStart = ?
   KalkClasserStart = ?
   soktamtrlfavoh = ?
   berfortemph  = ?  
   berlinjetemph  = ?
   bernattemph     = ?
   berstolptemph   = ?
   bildbertemph    = ?
   fastanmtemph    = ?
   konstgrptemph   = ?
   konsttemph      = ?
   konstvaltemph   = ?
   mtrltemph       = ?
   satstemph       = ?
   kalk_temph      = ?
   list_mtrlh      = ?
   kon_valh        = ?
   andrakon_valh        = ?.

   {BORTBRWPROC.I}   
      
   IF VALID-HANDLE(kalkbefh) THEN DELETE PROCEDURE kalkbefh NO-ERROR.   
   kalkbefh = ?.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph NO-ERROR. 
   edataapph = ?.  
   IF VALID-HANDLE(laddaproch) THEN DELETE PROCEDURE laddaproch NO-ERROR.   
   laddaproch = ?.
   IF VALID-HANDLE(bervalapph) THEN DELETE PROCEDURE bervalapph NO-ERROR. 
   bervalapph = ?.  
   IF VALID-HANDLE(apphandklar) THEN DELETE PROCEDURE apphandklar NO-ERROR. 
   apphandklar = ?.
   IF VALID-HANDLE(tthandle) THEN DELETE PROCEDURE tthandle NO-ERROR.
   tthandle = ?.
   IF VALID-HANDLE(tth) THEN DELETE PROCEDURE tth NO-ERROR.
   tth = ?.
   IF VALID-HANDLE(procasynch) THEN DELETE PROCEDURE procasynch NO-ERROR.
   procasynch = ?.
   IF VALID-HANDLE(h_PDFinc) THEN DELETE PROCEDURE h_PDFinc NO-ERROR. 
   h_PDFinc = ?.
   

END PROCEDURE.

