/*VISKONAPP.P*/

{STARTFORAPP.I}
{KONVALTEMP.I}
{KONID.I}
{LISTMTRL.I}
{KOPPLINA.I}
{KALKTEMP2.I}
{ANMARKD.I}

DEFINE VARIABLE prisvar AS INTEGER NO-UNDO.
DEFINE VARIABLE musz AS LOGICAL NO-UNDO.         
DEFINE VARIABLE valaonr AS CHARACTER NO-UNDO.
DEFINE VARIABLE valomrade AS CHARACTER NO-UNDO.  
DEFINE VARIABLE katvar AS INTEGER NO-UNDO.
DEFINE VARIABLE kalkvar AS LOGICAL NO-UNDO.

DEFINE VARIABLE arrhjsum AS DECIMAL NO-UNDO.    
DEFINE VARIABLE str AS CHARACTER FORMAT "X(130)" NO-UNDO.
DEFINE VARIABLE str0 AS CHARACTER FORMAT "X(130)" NO-UNDO.
DEFINE VARIABLE str1 AS CHARACTER FORMAT "X(130)" NO-UNDO. 
DEFINE VARIABLE str2 AS CHARACTER FORMAT "X(130)" NO-UNDO. 
DEFINE VARIABLE str3 AS CHARACTER FORMAT "X(130)" NO-UNDO.
DEFINE VARIABLE totalt AS DECIMAL NO-UNDO. 
DEFINE VARIABLE sumpris AS DECIMAL NO-UNDO.    
DEFINE VARIABLE sumkonstr AS DECIMAL NO-UNDO.    
DEFINE VARIABLE totalsum AS DECIMAL NO-UNDO.
DEFINE VARIABLE sumantal AS INTEGER NO-UNDO.
DEFINE VARIABLE xkordvar AS INTEGER NO-UNDO. 
DEFINE VARIABLE stopvar AS LOGICAL NO-UNDO. 
DEFINE VARIABLE bytgrupp AS CHARACTER NO-UNDO. 
DEFINE VARIABLE finns AS LOGICAL NO-UNDO.    
DEFINE VARIABLE fyra AS LOGICAL NO-UNDO.
DEFINE VARIABLE sex AS LOGICAL NO-UNDO.
DEFINE VARIABLE numvar AS INTEGER NO-UNDO.
DEFINE VARIABLE forsta AS LOGICAL NO-UNDO.
DEFINE VARIABLE utrow AS ROWID NO-UNDO.
DEFINE VARIABLE utrow2 AS ROWID NO-UNDO.
DEFINE VARIABLE kon_rowid AS ROWID NO-UNDO.
DEFINE VARIABLE kant AS INTEGER NO-UNDO.
DEFINE VARIABLE tant AS INTEGER NO-UNDO.
DEFINE VARIABLE uppvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE sidlangd AS INTEGER NO-UNDO.
DEFINE VARIABLE sumrow AS ROWID NO-UNDO.
DEFINE VARIABLE mat2 AS LOGICAL NO-UNDO.
DEFINE VARIABLE mat3 AS LOGICAL NO-UNDO.
DEFINE VARIABLE mat4 AS LOGICAL NO-UNDO.
DEFINE VARIABLE tiduttyp AS INTEGER NO-UNDO.
DEFINE VARIABLE mtextvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE skapad AS LOGICAL NO-UNDO.
DEFINE VARIABLE TOG_ANM    AS LOGICAL NO-UNDO.
DEFINE VARIABLE TOG_ID     AS LOGICAL NO-UNDO.
DEFINE VARIABLE TOG_KOMB   AS LOGICAL NO-UNDO.
DEFINE VARIABLE TOG_MTRL   AS LOGICAL NO-UNDO.
DEFINE VARIABLE TOG_P3     AS LOGICAL NO-UNDO.
DEFINE VARIABLE TOG_UPP    AS LOGICAL NO-UNDO.
DEFINE VARIABLE TOG_SPANN  AS LOGICAL NO-UNDO.
DEFINE VARIABLE TOG_TEXT   AS LOGICAL NO-UNDO.
DEFINE VARIABLE summont AS DECIMAL NO-UNDO.
DEFINE VARIABLE summask AS DECIMAL NO-UNDO.
DEFINE VARIABLE delningsvar AS INTEGER NO-UNDO. /*sätts till 1 om F9 värde = 0 och 100 om F9 värde = 1*/
{TIDUTTT.I} 
   
DEFINE TEMP-TABLE tidut2
   FIELD UT AS CHARACTER FORMAT "X(132)".
   
DEFINE TEMP-TABLE tidut3
   FIELD UT AS CHARACTER FORMAT "X(132)".
   
DEFINE TEMP-TABLE tidut4
   FIELD UT AS CHARACTER FORMAT "X(132)".                 
   
DEFINE TEMP-TABLE mtrl_temp 
{MTRLTEMPTT.I}
   
DEFINE TEMP-TABLE mtrl_temp2 
   FIELD NUM AS INTEGER    
   FIELD ENR AS CHARACTER
   FIELD BENAMNING AS CHARACTER
   FIELD ENHET AS CHARACTER
   FIELD ANTAL AS INTEGER
   FIELD PRIS AS DECIMAL 
   FIELD TOTPRIS AS DECIMAL
   FIELD LEVKOD AS CHARACTER   
   FIELD UPPLAG AS INTEGER 
   FIELD GRUPP AS INTEGER 
   FIELD XKORD AS INTEGER
   FIELD FORNR AS CHARACTER
   FIELD LINNR AS CHARACTER
   FIELD NATNR AS CHARACTER
   FIELD FRI1 AS INTEGER
   FIELD FRI2 AS INTEGER
   FIELD PAR AS INTEGER
   INDEX ENR IS PRIMARY ENR ASCENDING   
   INDEX LISTA UPPLAG GRUPP FORNR LINNR NATNR FRI1 FRI2 PAR
   INDEX LISTA2 UPPLAG FORNR LINNR NATNR FRI1 FRI2 PAR
   INDEX ENRX ENR UPPLAG XKORD
   INDEX ENRN ENR UPPLAG NUM.         
{UPPLAGTEMP.I}   
   
DEFINE TEMP-TABLE grupp_temp
   FIELD KONSKOD AS INTEGER
   FIELD BENAMNING AS CHARACTER
   FIELD ORDNING AS INTEGER
   INDEX ORD IS PRIMARY ORDNING ASCENDING.       

DEFINE TEMP-TABLE grupp_temp2
   FIELD KONSKOD AS INTEGER
   FIELD BENAMNING AS CHARACTER
   FIELD ORDNING AS INTEGER
   INDEX ORD IS PRIMARY ORDNING ASCENDING.     
   
DEFINE TEMP-TABLE id_temp  
   FIELD NUM AS INTEGER 
   FIELD GRUPP AS INTEGER  
   FIELD FORNR AS CHARACTER
   FIELD LINNR AS CHARACTER
   FIELD NATNR AS CHARACTER
   FIELD FRI1 AS INTEGER
   FIELD FRI2 AS INTEGER 
   FIELD XKORD AS INTEGER
   FIELD ENDKOMB AS LOGICAL
   FIELD FRI3 AS CHARACTER
   INDEX NUM IS PRIMARY NUM ASCENDING
   INDEX ORD FORNR LINNR NATNR FRI1 FRI2 ASCENDING. 
   
{SKAPTEMP.I}  
   
DEFINE TEMP-TABLE ber_temp
   FIELD ARBKOD AS CHARACTER
   FIELD LOPNR AS INTEGER
   FIELD BENAMNING AS CHARACTER
   FIELD ENHET AS CHARACTER    
   FIELD ANTAL AS DECIMAL
   FIELD NUM AS INTEGER
   INDEX KOD ARBKOD LOPNR ASCENDING
   INDEX NUM NUM ARBKOD LOPNR ASCENDING.
   
DEFINE TEMP-TABLE ber_temp2
   FIELD ARBKOD AS CHARACTER
   FIELD LOPNR AS INTEGER
   FIELD BENAMNING AS CHARACTER
   FIELD ENHET AS CHARACTER    
   FIELD ANTAL AS DECIMAL
   FIELD NUM AS INTEGER
   INDEX KOD ARBKOD LOPNR ASCENDING
   INDEX NUM NUM ARBKOD LOPNR ASCENDING. 
   
DEFINE VARIABLE totea AS DECIMAL NO-UNDO.
DEFINE VARIABLE totarb AS DECIMAL NO-UNDO.
DEFINE VARIABLE totmask AS DECIMAL NO-UNDO.
DEFINE VARIABLE totmtrl AS DECIMAL NO-UNDO.
DEFINE VARIABLE totovr AS DECIMAL NO-UNDO.
DEFINE VARIABLE arbtim AS DECIMAL NO-UNDO.
DEFINE VARIABLE msktim AS DECIMAL NO-UNDO.
DEFINE VARIABLE bertim AS DECIMAL NO-UNDO.
DEFINE VARIABLE eavar AS DECIMAL NO-UNDO.
DEFINE VARIABLE arbvar AS DECIMAL NO-UNDO.
DEFINE VARIABLE mskvar AS DECIMAL NO-UNDO.
DEFINE VARIABLE faktvar AS DECIMAL NO-UNDO.
DEFINE VARIABLE kontroll AS LOGICAL NO-UNDO.
DEFINE VARIABLE prisvar2 AS DECIMAL NO-UNDO.
DEFINE VARIABLE sumea AS DECIMAL NO-UNDO.     
   
DEFINE TEMP-TABLE kalk_temp2
   {KALKTEMPTAB.I}
DEFINE INPUT  PARAMETER inglobsids AS INTEGER NO-UNDO.  
globsids = inglobsids. 
DEFINE BUFFER idbuff FOR kon_id.
DEFINE BUFFER konbuff FOR kon_val.

PROCEDURE skapalista_UI :
   DEFINE INPUT PARAMETER katvar2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER prisvar2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER kalkvar2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_ANM2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_ID2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_KOMB2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_MTRL2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_P32 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_UPP2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_SPANN2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_TEXT2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER konvalnum AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER konvalskap AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER valaonr2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade2 AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER musz2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR kon_val.
   DEFINE INPUT PARAMETER TABLE FOR kon_id.
   DEFINE INPUT PARAMETER TABLE FOR list_mtrl.
   DEFINE INPUT PARAMETER TABLE FOR kopp_lina.
   DEFINE INPUT PARAMETER TABLE FOR kalk_temp.
   DEFINE OUTPUT PARAMETER TABLE FOR tidut.
   EMPTY TEMP-TABLE tidut NO-ERROR. 
   EMPTY TEMP-TABLE mtrl_temp NO-ERROR. 
   EMPTY TEMP-TABLE mtrl_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE id_temp NO-ERROR. 
   EMPTY TEMP-TABLE grupp_temp NO-ERROR.
   EMPTY TEMP-TABLE grupp_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE uppl_temp NO-ERROR.
   ASSIGN
   katvar  = katvar2
   prisvar = prisvar2
   kalkvar = kalkvar2
   TOG_ANM   = TOG_ANM2 
   TOG_ID    = TOG_ID2 
   TOG_KOMB  = TOG_KOMB2
   TOG_MTRL  = TOG_MTRL2
   TOG_P3    = TOG_P32 
   TOG_UPP   = TOG_UPP2 
   TOG_SPANN = TOG_SPANN2
   TOG_TEXT  = TOG_TEXT2
   valaonr =  valaonr2   
   valomrade = valomrade2. 

   IF TOG_P3 = TRUE THEN DO:
      FIND FIRST BEREDNING WHERE BEREDNING.BERAONR = valaonr AND
      BEREDNING.OMRADE = valomrade NO-LOCK NO-ERROR.   
      katvar = BEREDNING.KATAR.
   END.   
   FIND FIRST PARSTOLP NO-LOCK NO-ERROR. 
   FIND kon_val WHERE kon_val.NUM = konvalnum AND 
   kon_val.KSKAP = konvalskap NO-LOCK NO-ERROR.
   kon_rowid = ROWID(kon_val).
   FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = kon_val.GRUPP 
   USE-INDEX KOD NO-LOCK NO-ERROR.
   FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM USE-INDEX NUM
   NO-LOCK NO-ERROR.
   ASSIGN
   forsta = FALSE
   tant = 0
   sidlangd = globsids - 3.
   RUN huvud_UI.   
   IF musz = FALSE THEN RUN summa_UI.
   musz2 = musz.
   RETURN.


END PROCEDURE.

PROCEDURE huvud_UI :
   /*HUVUD*/ 
   DO TRANSACTION:         
      IF musz = TRUE THEN musz = musz.   
      ELSE DO:                   
         ASSIGN
         str3 =
"===================================================================================="   
         str1 =
"************************************************************************************"        
         str0 =
"------------------------------------------------------------------------------------".
      END.
   END.                    
END PROCEDURE.

PROCEDURE anm2_UI :
   DEFINE VARIABLE nyanm AS CHARACTER NO-UNDO.
   IF INDEX (BERUPP.ANMARK,"$") > 0 THEN nyanm = SUBSTRING(BERUPP.ANMARK,1,INDEX(BERUPP.ANMARK,"$") - 1).
   ELSE nyanm = BERUPP.ANMARK. 
   CREATE tidut.      
   ASSIGN
   SUBSTRING(tidut.UT,1) = "ANMÄRKNING"
   tant = tant + 1
   retvar = 1
   ednum = 1
   ednum3 = LENGTH(nyanm)
   retvar = INDEX(nyanm,CHR(10),ednum)
   edtecken = 50
   edtext = nyanm
   tidtext = "".  
   {ANMARK2.I}   
END PROCEDURE.

PROCEDURE anm3_UI :
   CREATE tidut.
   CREATE tidut.       
   ASSIGN
   kant = kant + 2
   SUBSTRING(tidut.UT,1) = "Anmärkning"
   retvar = 1
   ednum = 1
   ednum3 = LENGTH(konbuff.ANMARK)
   retvar = INDEX(konbuff.ANMARK,CHR(10),ednum)
   edtecken = 50
   edtext = konbuff.ANMARK
   tidtext = "".  
   {ANMARK2.I}   
END PROCEDURE.

PROCEDURE anmark_UI :

   DEFINE INPUT PARAMETER anmark AS INTEGER NO-UNDO. 
   IF anmark = 2 THEN DO:                
      ASSIGN            
      SUBSTRING(tidut.UT,21) = ":"   
      SUBSTRING(tidut.UT,22) = tidtext.
      CREATE tidut.
   END. 
   IF uppvar = TRUE THEN tant = tant + 1.   
   ELSE kant = kant + 1.
END PROCEDURE.

PROCEDURE anm_UI :

   CREATE tidut.   
   CREATE tidut.          
   ASSIGN
   kant = kant + 2
   SUBSTRING(tidut.UT,1) = "Anmärkning" 
   retvar = 1 
   ednum = 1    
   ednum3 = LENGTH(kon_val.ANMARK)      
   retvar = INDEX(kon_val.ANMARK,CHR(10),ednum)
   edtecken = 50   
   edtext = kon_val.ANMARK
   tidtext = "".        
   {ANMARK2.I}   
END PROCEDURE.

PROCEDURE bryt_UI :

   IF kant > sidlangd THEN tant = (kant - (sidlangd - tant)).
   ELSE DO:
      IF kant > sidlangd - tant THEN DO:         
         FIND tidut WHERE ROWID(tidut) = utrow NO-LOCK NO-ERROR.
         DELETE tidut.
         kant = kant - 1.
         FIND tidut WHERE ROWID(tidut) = utrow2 NO-LOCK NO-ERROR.
         ASSIGN
         SUBSTRING(tidut.UT,132) = "$"
         tant = kant.
      END.
      ELSE DO:
         tant = tant + kant.
         IF tant = sidlangd THEN tant = 0.
      END.
   END.   
END PROCEDURE.

PROCEDURE ett_UI :

   IF TOG_ID = TRUE THEN DO:
      FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.
      FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM USE-INDEX NUM
      NO-LOCK NO-ERROR.                                                                                                
      RUN id_UI.       
   END.      
   RUN val_UI.
   IF TOG_SPANN = TRUE THEN DO:
      RUN spann_UI.
   END.   
   IF TOG_ANM = TRUE THEN DO:
      RUN anm_UI.      
   END.
   IF TOG_KOMB = TRUE THEN DO:
      RUN komb_UI.
   END.      
   IF TOG_MTRL = TRUE THEN DO:
      RUN rubrik_UI.
      RUN par_UI.     
      FOR EACH mtrl_temp2 USE-INDEX ENR:          
         IF mtrl_temp2.ANTAL = 0 THEN DO:
            musz = musz.
            DELETE mtrl_temp2.
         END.   
         ELSE DO:
            IF mtrl_temp2.NUM = numvar THEN DO:
               IF mtrl_temp2.PAR = 0 THEN RUN materiel_UI.
               IF mtrl_temp2.PAR = 1 THEN RUN materiel2_UI.
               IF mtrl_temp2.PAR = 2 THEN RUN materiel3_UI.
               IF mtrl_temp2.PAR = 3 THEN RUN materiel4_UI.
               DELETE mtrl_temp2.
            END.
            ELSE DO:
               RUN materiel_UI.
               DELETE mtrl_temp2.
            END.   
         END.            
      END.  
   END.     
   IF prisvar = 1 AND sumkonstr > 0 THEN DO:      
      CREATE tidut.
      ASSIGN
      kant = kant + 1
      SUBSTRING(tidut.UT,75) = "==========".
      CREATE tidut.
      ASSIGN
      kant = kant + 1
      SUBSTRING(tidut.UT,75) = STRING(sumkonstr,">>>>>>9.99").
   END.
   RUN par2_UI.
   
   IF TOG_P3 = TRUE THEN DO:
      CREATE tidut.
      CREATE tidut.
      kant = kant + 2.
      RUN rubrik3_UI.
      FOR EACH kalk_temp2 BY kalk_temp2.ARBKOD BY kalk_temp2.LOPNR: 
         IF kalk_temp2.ANTAL = 0 THEN DO:
            musz = musz.
            DELETE kalk_temp2.
         END.   
         ELSE DO:         
            RUN utkalk3_UI.
            DELETE kalk_temp2.         
         END.   
      END.
      CREATE tidut.
      ASSIGN SUBSTRING(tidut.UT,67) = "======="
      SUBSTRING(tidut.UT,78) = "=======".
      CREATE tidut.
      ASSIGN
      SUBSTRING(tidut.UT,64) = STRING(summont,">>>>>>9.99")
      SUBSTRING(tidut.UT,75) = STRING(summask,">>>>>>9.99").
      kant = kant + 2.
   END.   
   CREATE tidut.
   CREATE tidut.      
   kant = kant + 2.  
   RUN bryt_UI.       

END PROCEDURE.

PROCEDURE id_UI :
  
   CREATE tidut.
   ASSIGN
   utrow = ROWID(tidut).
   CREATE tidut. 
   ASSIGN
   SUBSTRING(tidut.UT,1) = str1 
   utrow2 = ROWID(tidut)  
   kant = 2.
   IF Guru.Konstanter:globforetag = "SUND" OR Guru.Konstanter:globforetag = "SNAT" THEN.
   ELSE DO:   
      CREATE tidut.           
      ASSIGN    
      kant = kant + 1                                                                                       
      SUBSTRING(tidut.UT,1) = SUBSTRING(ANNNAMN.TAB1,1,20)
      SUBSTRING(tidut.UT,21) = ":".
      IF AVAILABLE kon_id THEN
      SUBSTRING(tidut.UT,22) = kon_id.FORNR.
      ASSIGN
      SUBSTRING(tidut.UT,40) = SUBSTRING(ANNNAMN.TAB2,1,20)
      SUBSTRING(tidut.UT,61) = ":".
      IF AVAILABLE kon_id THEN
      SUBSTRING(tidut.UT,62) = kon_id.LINNR.
      CREATE tidut.
      ASSIGN
      kant = kant + 1
      SUBSTRING(tidut.UT,1) = SUBSTRING(ANNNAMN.TAB3,1,20)
      SUBSTRING(tidut.UT,21) = ":".
      IF AVAILABLE kon_id THEN
      SUBSTRING(tidut.UT,22) = kon_id.NATNR.
   END.   
   CREATE tidut.
   kant = kant + 1.
   FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = kon_val.GRUPP 
   USE-INDEX KOD NO-LOCK NO-ERROR.
   IF BBENAMNING.ID1 NE "" THEN DO:
      ASSIGN
      SUBSTRING(tidut.UT,1) = BBENAMNING.ID1
      SUBSTRING(tidut.UT,21) = ":".
      IF AVAILABLE kon_id THEN
      SUBSTRING(tidut.UT,22) = STRING(kon_id.FRI1).
   END.   
   IF Guru.Konstanter:globforetag = "SUND" OR Guru.Konstanter:globforetag = "SNAT" THEN DO:
      IF BBENAMNING.ID2 NE "" THEN DO:
         ASSIGN
         SUBSTRING(tidut.UT,1) = BBENAMNING.ID2
         SUBSTRING(tidut.UT,21) = ":".
         IF AVAILABLE kon_id THEN DO:
            SUBSTRING(tidut.UT,22) = STRING(kon_id.FRI2).
            FIND FIRST mtrl_temp2 WHERE mtrl_temp2.NUM = mtrl_temp2.NUM AND
            mtrl_temp2.PAR = 1 NO-LOCK NO-ERROR.
            IF AVAILABLE mtrl_temp2 THEN SUBSTRING(tidut.UT,69) = PARSTOLP.A.
            FIND FIRST mtrl_temp2 WHERE mtrl_temp2.NUM = mtrl_temp2.NUM AND
            mtrl_temp2.PAR = 2 NO-LOCK NO-ERROR.
            IF AVAILABLE mtrl_temp2 THEN SUBSTRING(tidut.UT,71) = PARSTOLP.B.             
            FIND FIRST mtrl_temp2 WHERE mtrl_temp2.NUM = mtrl_temp2.NUM AND
            mtrl_temp2.PAR = 3 NO-LOCK NO-ERROR.
            IF AVAILABLE mtrl_temp2 THEN SUBSTRING(tidut.UT,73) = PARSTOLP.C.
         END.                                                         
      END.
   END.
   ELSE DO:
      IF BBENAMNING.ID2 NE "" THEN DO:
         ASSIGN
         SUBSTRING(tidut.UT,40) = BBENAMNING.ID2
         SUBSTRING(tidut.UT,61) = ":".
         IF AVAILABLE kon_id THEN DO:
            SUBSTRING(tidut.UT,62) = STRING(kon_id.FRI2).
            FIND FIRST mtrl_temp2 WHERE mtrl_temp2.NUM = mtrl_temp2.NUM AND
            mtrl_temp2.PAR = 1 NO-LOCK NO-ERROR.
            IF AVAILABLE mtrl_temp2 THEN SUBSTRING(tidut.UT,69) = PARSTOLP.A.
            FIND FIRST mtrl_temp2 WHERE mtrl_temp2.NUM = mtrl_temp2.NUM AND
            mtrl_temp2.PAR = 2 NO-LOCK NO-ERROR.
            IF AVAILABLE mtrl_temp2 THEN SUBSTRING(tidut.UT,71) = PARSTOLP.B.
            FIND FIRST mtrl_temp2 WHERE mtrl_temp2.NUM = mtrl_temp2.NUM AND
            mtrl_temp2.PAR = 3 NO-LOCK NO-ERROR.
            IF AVAILABLE mtrl_temp2 THEN SUBSTRING(tidut.UT,73) = PARSTOLP.C.
         END.   
      END. 
   END.      
   IF AVAILABLE kon_id THEN DO:
      IF kon_id.FRI3 NE "" THEN DO:
         CREATE tidut.
         ASSIGN
         kant = kant + 1.
         IF Guru.Konstanter:globforetag = "GRAN" OR Guru.Konstanter:globforetag = "NAEK"  OR Guru.Konstanter:globforetag = "CPOMA" OR Guru.Konstanter:globforetag = "GKAL" THEN DO:
            ASSIGN
            SUBSTRING(tidut.UT,1) = "Littera"
            SUBSTRING(tidut.UT,21) = ":".
            SUBSTRING(tidut.UT,22) = STRING(kon_id.FRI3).
         END.
         ELSE DO:
            ASSIGN
            SUBSTRING(tidut.UT,1) = "Fri ID"
            SUBSTRING(tidut.UT,21) = ":".
            SUBSTRING(tidut.UT,22) = STRING(kon_id.FRI3).
         END.         
      END.   
   END.                     
END PROCEDURE.

PROCEDURE kalk_UI :

   FIND FIRST EBRPRIS WHERE EBRPRIS.ARTAL = katvar
   USE-INDEX AR NO-LOCK NO-ERROR.
   FIND FIRST KALKBEF WHERE KALKBEF.KALKNR = 0 AND KALKBEF.KATAR = katvar
   USE-INDEX ARTAL NO-LOCK NO-ERROR.   
   
   FOR EACH kalk_temp WHERE kalk_temp.NUM = kon_val.NUM 
   USE-INDEX NUM NO-LOCK:         
      CREATE ber_temp.
      ASSIGN
      ber_temp.ARBKOD = kalk_temp.ARBKOD
      ber_temp.LOPNR = kalk_temp.LOPNR
      ber_temp.BENAMNING = kalk_temp.BENAMNING
      ber_temp.ENHET = kalk_temp.ENHET
      ber_temp.ANTAL = kalk_temp.ANTAL
      ber_temp.NUM = kalk_temp.NUM.      
   END.
   
   IF TOG_KOMB = TRUE THEN DO:
      FOR EACH idbuff WHERE idbuff.XKORD = kon_id.XKORD AND                        
      ROWID(idbuff) NE ROWID(kon_id)
      NO-LOCK:
         FOR EACH kalk_temp WHERE kalk_temp.NUM = idbuff.NUM USE-INDEX NUM
         NO-LOCK:
            CREATE ber_temp.
            ASSIGN
            ber_temp.ARBKOD = kalk_temp.ARBKOD
            ber_temp.LOPNR = kalk_temp.LOPNR
            ber_temp.BENAMNING = kalk_temp.BENAMNING
            ber_temp.ENHET = kalk_temp.ENHET
            ber_temp.ANTAL = kalk_temp.ANTAL
            ber_temp.NUM = kalk_temp.NUM.
         END.
      END.   
   END.
   
   ASSIGN   
   sumantal = 0.
   FOR EACH ber_temp BREAK BY ber_temp.ARBKOD BY ber_temp.LOPNR:        
      ACCUMULATE ber_temp.ANTAL (TOTAL BY ber_temp.ARBKOD BY ber_temp.LOPNR).       
      IF LAST-OF(ber_temp.LOPNR) THEN DO TRANSACTION:
         CREATE ber_temp2.
         ASSIGN                        
         ber_temp2.ARBKOD = ber_temp.ARBKOD 
         ber_temp2.LOPNR = ber_temp.LOPNR 
         ber_temp2.ENHET = ber_temp.ENHET
         ber_temp2.BENAMNING = ber_temp.BENAMNING
         ber_temp2.NUM = ber_temp.NUM          
         ber_temp2.ANTAL = (ACCUM TOTAL BY ber_temp.LOPNR ber_temp.ANTAL).                                         
      END.     
   END.
   FOR EACH ber_temp2 USE-INDEX KOD:
      FIND FIRST LOP3 WHERE LOP3.ARBKOD = ber_temp2.ARBKOD AND
      LOP3.LOPNR = ber_temp2.LOPNR AND LOP3.KATAR = katvar 
      USE-INDEX AR NO-LOCK NO-ERROR.
      IF AVAILABLE LOP3 THEN RUN skapa_UI.
      ELSE RUN skapa2_UI.      
   END.     
END PROCEDURE.


PROCEDURE komb_UI :

   CREATE tidut.
   ASSIGN
   kant = kant + 1
   SUBSTRING(tidut.UT,1) ="Kombinerad med".
   FOR EACH idbuff WHERE idbuff.XKORD = kon_id.XKORD AND                        
   ROWID(idbuff) NE ROWID(kon_id):                                
      CREATE tidut.
      kant = kant + 1.
      FIND FIRST konbuff WHERE konbuff.NUM = idbuff.NUM USE-INDEX NUM
      NO-LOCK NO-ERROR.
      FIND FIRST KONSTGRUPP WHERE KONSTGRUPP.KONSKOD = konbuff.GRUPP
      USE-INDEX KOD NO-LOCK NO-ERROR.
      SUBSTRING(tidut.UT,1) = KONSTGRUPP.BENAMNING. 
      FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = konbuff.GRUPP 
      USE-INDEX KOD NO-LOCK NO-ERROR.                     
      IF idbuff.FRI2 NE ? THEN DO:
         CREATE tidut.         
         ASSIGN 
         kant = kant + 1
         SUBSTRING(tidut.UT,1) = BBENAMNING.ID2
         SUBSTRING(tidut.UT,21) = ":"
         SUBSTRING(tidut.UT,22) = STRING(idbuff.FRI2).
      END.   
      ELSE DO:
         IF BBENAMNING.ID2 NE "" THEN DO:
            CREATE tidut.
            ASSIGN
            kant = kant + 1
            SUBSTRING(tidut.UT,1) = BBENAMNING.ID2
            SUBSTRING(tidut.UT,21) = ":".
         END.   
      END.   
      FIND FIRST konbuff WHERE konbuff.NUM = idbuff.NUM 
      NO-LOCK NO-ERROR.
      IF AVAILABLE konbuff THEN DO:  
         CREATE tidut.
         ASSIGN            
         kant = kant + 1             
         SUBSTRING(tidut.UT,1) = BBENAMNING.B1
         SUBSTRING(tidut.UT,21) = ":"
         SUBSTRING(tidut.UT,22) = konbuff.F1. 
         IF konbuff.ANMARK NE "" THEN DO:                                   
            IF TOG_ANM = TRUE THEN RUN anm3_UI.      
         END.   
      END.                                          
   END.
END PROCEDURE.


PROCEDURE materiel2_UI :

   IF mat2 = FALSE THEN DO:       
      CREATE tidut2.
      CREATE tidut2.
      ASSIGN
      SUBSTRING(tidut2.UT,1) = PARSTOLP.AFORKL
      mat2 = TRUE
      kant = kant + 3.
      CREATE tidut2.
   END.
   CREATE tidut2.
   ASSIGN
   kant = kant + 1
   SUBSTRING(tidut2.UT,1) = mtrl_temp2.ENR
   SUBSTRING(tidut2.UT,13) = SUBSTRING(mtrl_temp2.BENAMNING,1,38) 
   SUBSTRING(tidut2.UT,52) = mtrl_temp2.ENHET
   SUBSTRING(tidut2.UT,58) = STRING(mtrl_temp2.ANTAL,">>>>9"). 
   IF prisvar = 1 THEN ASSIGN SUBSTRING(tidut2.UT,64) = STRING(mtrl_temp2.PRIS,">>>>>>9.99")
   SUBSTRING(tidut2.UT,75) = STRING(mtrl_temp2.ANTAL * mtrl_temp2.PRIS,">>>>>>9.99").
   IF TOG_TEXT = TRUE THEN DO:
      ASSIGN
      mtextvar = FALSE
      tiduttyp = 2
      skapad = FALSE.
      RUN mtextnum_UI.
      IF skapad = TRUE THEN DO:
         FIND LAST tidut2 NO-ERROR.
         DELETE tidut2.
         skapad = FALSE.
      END.
   END.
   sumpris = sumpris + mtrl_temp2.TOTPRIS.  
   sumkonstr = sumkonstr + (mtrl_temp2.ANTAL * mtrl_temp2.PRIS).  
END PROCEDURE.


PROCEDURE materiel3_UI :

   IF mat3 = FALSE THEN DO:      
      CREATE tidut3.
      CREATE tidut3.
      ASSIGN
      SUBSTRING(tidut3.UT,1) = PARSTOLP.BFORKL
      mat3 = TRUE
      kant = kant + 3.
      CREATE tidut3.
   END.
   CREATE tidut3.
   ASSIGN
   kant = kant + 1
   SUBSTRING(tidut3.UT,1) = mtrl_temp2.ENR
   SUBSTRING(tidut3.UT,13) = SUBSTRING(mtrl_temp2.BENAMNING,1,38) 
   SUBSTRING(tidut3.UT,52) = mtrl_temp2.ENHET
   SUBSTRING(tidut3.UT,58) = STRING(mtrl_temp2.ANTAL,">>>>9"). 
   IF prisvar = 1 THEN ASSIGN SUBSTRING(tidut3.UT,64) = STRING(mtrl_temp2.PRIS,">>>>>>9.99")
   SUBSTRING(tidut3.UT,75) = STRING(mtrl_temp2.ANTAL * mtrl_temp2.PRIS,">>>>>>9.99").
   IF TOG_TEXT = TRUE THEN DO:
      ASSIGN
      mtextvar = FALSE
      tiduttyp = 3
      skapad = FALSE.
      RUN mtextnum_UI.
      IF skapad = TRUE THEN DO:
         FIND LAST tidut3 NO-ERROR.
         DELETE tidut3.
         skapad = FALSE.
      END.
   END.
   sumpris = sumpris + mtrl_temp2.TOTPRIS.  
   sumkonstr = sumkonstr + (mtrl_temp2.ANTAL * mtrl_temp2.PRIS).  
END PROCEDURE.

PROCEDURE materiel4_UI :
   IF mat4 = FALSE THEN DO:      
      CREATE tidut4.
      CREATE tidut4.
      ASSIGN
      SUBSTRING(tidut4.UT,1) = PARSTOLP.CFORKL
      mat4 = TRUE
      kant = kant + 3.
      CREATE tidut4.
   END.
   CREATE tidut4.
   ASSIGN
   kant = kant + 1
   SUBSTRING(tidut4.UT,1) = mtrl_temp2.ENR
   SUBSTRING(tidut4.UT,13) = SUBSTRING(mtrl_temp2.BENAMNING,1,38) 
   SUBSTRING(tidut4.UT,52) = mtrl_temp2.ENHET
   SUBSTRING(tidut4.UT,58) = STRING(mtrl_temp2.ANTAL,">>>>9"). 
   IF prisvar = 1 THEN ASSIGN SUBSTRING(tidut4.UT,64) = STRING(mtrl_temp2.PRIS,">>>>>>9.99")
   SUBSTRING(tidut4.UT,75) = STRING(mtrl_temp2.ANTAL * mtrl_temp2.PRIS,">>>>>>9.99").
   IF TOG_TEXT = TRUE THEN DO:
      ASSIGN
      mtextvar = FALSE
      tiduttyp = 4
      skapad = FALSE.
      RUN mtextnum_UI.
      IF skapad = TRUE THEN DO:
         FIND LAST tidut4 NO-ERROR.
         DELETE tidut4.
         skapad = FALSE.
      END.
   END.
   sumpris = sumpris + mtrl_temp2.TOTPRIS.  
   sumkonstr = sumkonstr + (mtrl_temp2.ANTAL * mtrl_temp2.PRIS).  
END PROCEDURE.

PROCEDURE materiel_UI :

   CREATE tidut.
   ASSIGN
   kant = kant + 1
   SUBSTRING(tidut.UT,1) = mtrl_temp2.ENR
   SUBSTRING(tidut.UT,13) = SUBSTRING(mtrl_temp2.BENAMNING,1,38) 
   SUBSTRING(tidut.UT,52) = mtrl_temp2.ENHET
   SUBSTRING(tidut.UT,58) = STRING(mtrl_temp2.ANTAL,">>>>9"). 
   IF prisvar = 1 THEN ASSIGN SUBSTRING(tidut.UT,64) = STRING(mtrl_temp2.PRIS,">>>>>>9.99")
   SUBSTRING(tidut.UT,75) = STRING(mtrl_temp2.ANTAL * mtrl_temp2.PRIS,">>>>>>9.99").
   IF TOG_TEXT = TRUE THEN DO:
      ASSIGN
      mtextvar = FALSE
      tiduttyp = 1
      skapad = FALSE.
      RUN mtextnum_UI.
      IF skapad = TRUE THEN DO:
         FIND LAST tidut NO-ERROR.
         DELETE tidut.
         skapad = FALSE.
      END.
   END.
   sumpris = sumpris + mtrl_temp2.TOTPRIS.  
   sumkonstr = sumkonstr + (mtrl_temp2.ANTAL * mtrl_temp2.PRIS).  
END PROCEDURE.

PROCEDURE mtextnum_UI :

   FOR EACH mtrl_temp WHERE 
   mtrl_temp.ENR = mtrl_temp2.ENR:         
      IF mtrl_temp.MTRLTEXT NE "" THEN DO:
         RUN text_UI.
      END.   
      DELETE mtrl_temp.
   END.
END PROCEDURE.

PROCEDURE mtext_UI :
   IF tiduttyp = 1 THEN DO:                
      ASSIGN                  
      SUBSTRING(tidut.UT,13) = tidtext.
      CREATE tidut.
   END.
   ELSE IF tiduttyp = 2 THEN DO:                
      ASSIGN                  
      SUBSTRING(tidut2.UT,13) = tidtext.
      CREATE tidut2.
   END.
   ELSE IF tiduttyp = 3 THEN DO:                
      ASSIGN                  
      SUBSTRING(tidut3.UT,13) = tidtext.
      CREATE tidut3.
   END.
   ELSE IF tiduttyp = 4 THEN DO:                
      ASSIGN                  
      SUBSTRING(tidut4.UT,13) = tidtext.
      CREATE tidut4.
   END. 
   kant = kant + 1.
END PROCEDURE.

PROCEDURE par2_UI :

   FIND FIRST tidut2 NO-LOCK NO-ERROR.
   IF AVAILABLE tidut2 THEN DO:         
      FOR EACH tidut2:
         CREATE tidut.
         tidut.UT = tidut2.UT.
      END.   
   END.
   FIND FIRST tidut3 NO-LOCK NO-ERROR.
   IF AVAILABLE tidut3 THEN DO:         
      FOR EACH tidut3:
         CREATE tidut.
         tidut.UT = tidut3.UT.
      END.   
   END.
   FIND FIRST tidut4 NO-LOCK NO-ERROR.
   IF AVAILABLE tidut4 THEN DO:         
      FOR EACH tidut4:
         CREATE tidut.
         tidut.UT = tidut4.UT.
      END.   
   END.
END PROCEDURE.

PROCEDURE par_UI :

   ASSIGN
   mat2 = FALSE
   mat3 = FALSE
   mat4 = FALSE.  
   FOR EACH tidut2:
      DELETE tidut2.
   END.
   FOR EACH tidut3:
      DELETE tidut3.
   END.
   FOR EACH tidut4:
      DELETE tidut4.
   END.
END PROCEDURE.

PROCEDURE rubrik2_UI :

   CREATE tidut.
   ASSIGN  
   kant = kant + 1
   SUBSTRING(tidut.UT,1) = "P3-KOD"
   SUBSTRING(tidut.UT,13) = "BENÄMNING"
   SUBSTRING(tidut.UT,52) = "ENHET"
   SUBSTRING(tidut.UT,58) = "ANTAL"
   SUBSTRING(tidut.UT,66) = "EA/ENHET"
   SUBSTRING(tidut.UT,80) = "SUMMA".
   CREATE tidut.  
   kant = kant + 1. 
END PROCEDURE.

PROCEDURE rubrik3_UI :

   CREATE tidut.
   ASSIGN  
   kant = kant + 1
   SUBSTRING(tidut.UT,1) = "P3-KOD"
   SUBSTRING(tidut.UT,13) = "BENÄMNING"
   SUBSTRING(tidut.UT,52) = "ENHET"
   SUBSTRING(tidut.UT,58) = "ANTAL"
   SUBSTRING(tidut.UT,66) = "TIM MONTÖR"
   SUBSTRING(tidut.UT,80) = "TIM MASKIN".
   CREATE tidut.  
   kant = kant + 1. 
END PROCEDURE.


PROCEDURE rubrik_UI :

   CREATE tidut.
   CREATE tidut.    
   ASSIGN  
   kant = kant + 2
   SUBSTRING(tidut.UT,1) = CAPS(Guru.Konstanter:genk)
   SUBSTRING(tidut.UT,13) = "BENÄMNING"
   SUBSTRING(tidut.UT,52) = "ENHET"
   SUBSTRING(tidut.UT,58) = "ANTAL".
   IF prisvar = 1 THEN ASSIGN SUBSTRING(tidut.UT,64) = "PRIS/ENHET"
   SUBSTRING(tidut.UT,80) = "SUMMA".
   CREATE tidut.  
   kant = kant + 1. 
END PROCEDURE.

PROCEDURE skapa2_UI :

   CREATE kalk_temp2.
   ASSIGN
   kalk_temp2.ARBKOD = ber_temp2.ARBKOD
   kalk_temp2.LOPNR = ber_temp2.LOPNR
   kalk_temp2.BENAMNING = ber_temp2.BENAMNING
   kalk_temp2.ENHET = ber_temp2.ENHET
   kalk_temp2.ANTAL = ber_temp2.ANTAL  
   kalk_temp2.EA = 0
   kalk_temp2.EAST = 0
   kalk_temp2.ARBETE = 0   
   kalk_temp2.MASKINKOST = 0   
   kalk_temp2.MATERIEL = 0
   kalk_temp2.OVRIGT = 0
   kalk_temp2.NUM = ber_temp2.NUM.
END PROCEDURE.




PROCEDURE skapa_UI :

   ASSIGN
   eavar = 0
   arbvar = 0
   mskvar = 0.
   
   CREATE kalk_temp2.
   ASSIGN
   kalk_temp2.ARBKOD = LOP3.ARBKOD
   kalk_temp2.LOPNR = LOP3.LOPNR
   kalk_temp2.BENAMNING = SUBSTRING(LOP3.BENAMNING,1,49)
   kalk_temp2.ENHET = LOP3.ENHET
   kalk_temp2.ANTAL = ber_temp2.ANTAL.
   IF LOP3.F9 = 0 THEN delningsvar = 1.
   ELSE delningsvar = 100.

   IF KALKBEF.BEF1 NE "" THEN DO:           
      IF KALKBEF.EBR1 = 1 THEN prisvar2 = EBRPRIS.MONT.
      ELSE IF KALKBEF.EBR1 = 2 THEN prisvar2 = EBRPRIS.MASK1.
      ELSE prisvar2 = EBRPRIS.MASK2.        
      faktvar = 1.             
      IF KALKBEF.PERSMASK1 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F1 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA1 = TRUE THEN 
         eavar = eavar + (LOP3.F1 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F1 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA1 = TRUE THEN
         eavar = eavar + ((LOP3.F1 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / EBRPRIS.RORLIG).
      END.   
      kalk_temp2.F1 = (LOP3.F1 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.         
   IF KALKBEF.BEF2 NE "" THEN DO:               
      IF KALKBEF.EBR2 = 1 THEN prisvar2 = EBRPRIS.MONT.
      ELSE IF KALKBEF.EBR2 = 2 THEN prisvar2 = EBRPRIS.MASK1.
      ELSE prisvar2 = EBRPRIS.MASK2.        
      faktvar = 1.           
      IF KALKBEF.PERSMASK2 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F2 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA2 = TRUE THEN 
         eavar = eavar + (LOP3.F2 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F2 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA2 = TRUE THEN
         eavar = eavar + ((LOP3.F2  / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / EBRPRIS.RORLIG).
      END.   
      kalk_temp2.F2 = (LOP3.F2 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF3 NE "" THEN DO:          
      IF KALKBEF.EBR3 = 1 THEN prisvar2 = EBRPRIS.MONT.
      ELSE IF KALKBEF.EBR3 = 2 THEN prisvar2 = EBRPRIS.MASK1.
      ELSE prisvar2 = EBRPRIS.MASK2.        
      faktvar = 1.        
      IF KALKBEF.PERSMASK3 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F3 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA3 = TRUE THEN 
         eavar = eavar + (LOP3.F3 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F3 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA3 = TRUE THEN
         eavar = eavar + ((LOP3.F3 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / EBRPRIS.RORLIG).
      END.   
      kalk_temp2.F3 = (LOP3.F3 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF4 NE "" THEN DO:               
      IF KALKBEF.EBR4 = 1 THEN prisvar2 = EBRPRIS.MONT.
      ELSE IF KALKBEF.EBR4 = 2 THEN prisvar2 = EBRPRIS.MASK1.
      ELSE prisvar2 = EBRPRIS.MASK2.        
      faktvar = 1.           
      IF KALKBEF.PERSMASK4 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F4 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA4 = TRUE THEN 
         eavar = eavar + (LOP3.F4 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F4 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA4 = TRUE THEN
         eavar = eavar + ((LOP3.F4 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / EBRPRIS.RORLIG).
      END.   
      kalk_temp2.F4 = (LOP3.F4 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF5 NE "" THEN DO:           
      IF KALKBEF.EBR5 = 1 THEN prisvar2 = EBRPRIS.MONT.
      ELSE IF KALKBEF.EBR5 = 2 THEN prisvar2 = EBRPRIS.MASK1.
      ELSE prisvar2 = EBRPRIS.MASK2.        
      faktvar = 1.              
      IF KALKBEF.PERSMASK5 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F5 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA5 = TRUE THEN 
         eavar = eavar + (LOP3.F5 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F5 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA5 = TRUE THEN
         eavar = eavar + ((LOP3.F5 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / EBRPRIS.RORLIG).
      END.   
      kalk_temp2.F5 = (LOP3.F5 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF6 NE "" THEN DO:              
      IF KALKBEF.EBR6 = 1 THEN prisvar2 = EBRPRIS.MONT.
      ELSE IF KALKBEF.EBR6 = 2 THEN prisvar2 = EBRPRIS.MASK1.
      ELSE prisvar2 = EBRPRIS.MASK2.        
      faktvar = 1.             
      IF KALKBEF.PERSMASK6 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F6 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA6 = TRUE THEN 
         eavar = eavar + (LOP3.F6 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F6 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA6 = TRUE THEN
         eavar = eavar + ((LOP3.F6 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / EBRPRIS.RORLIG).
      END.   
      kalk_temp2.F6 = (LOP3.F6 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF7 NE "" THEN DO:         
      IF KALKBEF.EBR7 = 1 THEN prisvar2 = EBRPRIS.MONT.
      ELSE IF KALKBEF.EBR7 = 2 THEN prisvar2 = EBRPRIS.MASK1.
      ELSE prisvar2 = EBRPRIS.MASK2.        
      faktvar = 1.           
      IF KALKBEF.PERSMASK7 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F7 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA7 = TRUE THEN 
         eavar = eavar + (LOP3.F7 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F7 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA7 = TRUE THEN
         eavar = eavar + ((LOP3.F7 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / EBRPRIS.RORLIG).
      END.   
      kalk_temp2.F7 = (LOP3.F7 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF8 NE "" THEN DO:          
      IF KALKBEF.EBR8 = 1 THEN prisvar2 = EBRPRIS.MONT.
      ELSE IF KALKBEF.EBR8 = 2 THEN prisvar2 = EBRPRIS.MASK1.
      ELSE prisvar2 = EBRPRIS.MASK2.        
      faktvar = 1.           
      IF KALKBEF.PERSMASK8 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F8 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA8 = TRUE THEN 
         eavar = eavar + (LOP3.F8 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F8 * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA8 = TRUE THEN
         eavar = eavar + ((LOP3.F8 * prisvar2 * ber_temp2.ANTAL * faktvar) / EBRPRIS.RORLIG).
      END.   
      kalk_temp2.F8 = (LOP3.F8 * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF9 NE "" THEN DO:            
      IF KALKBEF.EBR9 = 1 THEN prisvar2 = EBRPRIS.MONT.
      ELSE IF KALKBEF.EBR9 = 2 THEN prisvar2 = EBRPRIS.MASK1.
      ELSE prisvar2 = EBRPRIS.MASK2.        
      faktvar = 1.              
      IF KALKBEF.PERSMASK9 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F9 * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA9 = TRUE THEN 
         eavar = eavar + (LOP3.F9 * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F9 * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA9 = TRUE THEN
         eavar = eavar + ((LOP3.F9 * prisvar2 * ber_temp2.ANTAL * faktvar) / EBRPRIS.RORLIG).
      END.   
      kalk_temp2.F9 = (LOP3.F9 * ber_temp2.ANTAL * faktvar).
   END.
   
   ASSIGN  
   kalk_temp2.EA = eavar
   kalk_temp2.EAST = LOP3.EA
   kalk_temp2.ARBETE = arbvar   
   kalk_temp2.MASKINKOST = mskvar   
   kalk_temp2.MATERIEL = 0
   kalk_temp2.OVRIGT = LOP3.OVRIGT * ber_temp2.ANTAL
   kalk_temp2.NUM = ber_temp2.NUM.
END PROCEDURE.


PROCEDURE spann_UI :

   musz = FALSE.   
   IF musz = FALSE THEN DO:
      FIND FIRST kopp_lina WHERE (kopp_lina.NUM1 = kon_val.NUM
      OR kopp_lina.NUM2 = kon_val.NUM) USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE kopp_lina THEN DO:            
         FOR EACH kopp_lina WHERE (kopp_lina.NUM1 = kon_val.NUM
         OR kopp_lina.NUM2 = kon_val.NUM) AND kopp_lina.KORTKOD = ? AND 
         kopp_lina.TOTMETER = 0:
            IF kopp_lina.NUM1 NE kopp_lina.NUM2 THEN DO:            
               CREATE tidut.
               ASSIGN
               kant = kant + 1
               SUBSTRING(tidut.UT,1) = "Spann/kabellängd"
               SUBSTRING(tidut.UT,22) = STRING(kopp_lina.METER) + " meter" + " " + kopp_lina.BENAMNING.
               IF kopp_lina.NUM1 = kon_val.NUM THEN DO:            
                  FIND FIRST idbuff WHERE idbuff.NUM = kopp_lina.NUM2 USE-INDEX NUM
                  NO-LOCK NO-ERROR.
               END.
               ELSE DO:
                  FIND FIRST idbuff WHERE idbuff.NUM = kopp_lina.NUM1 USE-INDEX NUM
                  NO-LOCK NO-ERROR.
               END. 
               IF AVAILABLE idbuff THEN DO:
                  FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = idbuff.GRUPP 
                  USE-INDEX KOD NO-LOCK NO-ERROR.
                  IF idbuff.FRI1 NE ? THEN DO:
                     CREATE tidut.
                     ASSIGN
                     kant = kant + 1
                     SUBSTRING(tidut.UT,1) = BBENAMNING.ID1
                     SUBSTRING(tidut.UT,21) = ":"
                     SUBSTRING(tidut.UT,22) = STRING(idbuff.FRI1)
                     SUBSTRING(tidut.UT,40) = BBENAMNING.ID2
                     SUBSTRING(tidut.UT,61) = ":"
                     SUBSTRING(tidut.UT,62) = STRING(idbuff.FRI2).                                                                  
                  END. 
                  ELSE DO:
                     IF idbuff.FRI2 NE ? THEN DO:
                        CREATE tidut.
                        ASSIGN
                        kant = kant + 1
                        SUBSTRING(tidut.UT,1) = BBENAMNING.ID2
                        SUBSTRING(tidut.UT,21) = ":"
                        SUBSTRING(tidut.UT,22) = STRING(idbuff.FRI2).                                                                  
                     END.
                     ELSE DO:
                        CREATE tidut.
                        ASSIGN
                        kant = kant + 1
                        SUBSTRING(tidut.UT,1) = ANNNAMN.TAB3
                        SUBSTRING(tidut.UT,21) = ":"
                        SUBSTRING(tidut.UT,22) = STRING(idbuff.NATNR).
                     END.
                  END.                                 
               END.                 
            END.   
            ELSE DO:
               CREATE tidut.
               ASSIGN
               kant = kant + 2
               SUBSTRING(tidut.UT,1) = "Spann/kabellängd"
               SUBSTRING(tidut.UT,22) = STRING(kopp_lina.METER) + " meter" + " " + kopp_lina.BENAMNING.
               CREATE tidut.
               SUBSTRING(tidut.UT,1) = "Intern".
            END.
         END.   
      END.   
   END.   
   ELSE DO:
      musz = FALSE.
   END.
END PROCEDURE.

PROCEDURE summa_UI :

   FOR EACH konbuff WHERE konbuff.NUM = kon_val.NUM AND
   ROWID(konbuff) NE ROWID(kon_val): 
      CREATE skap_temp.  
      ASSIGN
      skap_temp.NUM = konbuff.NUM  
      skap_temp.F1 = konbuff.F1  
      skap_temp.F2 = konbuff.F2
      skap_temp.F3 = konbuff.F3
      skap_temp.F4 = konbuff.F4
      skap_temp.F5 = konbuff.F5
      skap_temp.F6 = konbuff.F6
      skap_temp.SKAPNUM = konbuff.SKAPNUM.
   END.   
   ASSIGN
   sumpris = 0
   sumkonstr = 0
   sumantal = 0
   sumea = 0
   summont = 0
   summask = 0.
   
   FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM USE-INDEX NUM
   NO-LOCK:   
      CREATE mtrl_temp.
      ASSIGN  
      mtrl_temp.NUM = list_mtrl.NUM
      mtrl_temp.ENR = list_mtrl.ENR     
      mtrl_temp.BENAMNING = list_mtrl.BENAMNING
      mtrl_temp.ENHET = list_mtrl.ENHET
      mtrl_temp.ANTAL = list_mtrl.ANTAL
      mtrl_temp.PRIS = list_mtrl.PRIS 
      mtrl_temp.TOTPRIS = list_mtrl.PRIS * list_mtrl.ANTAL      
      mtrl_temp.LEVKOD = list_mtrl.LEVKOD
      mtrl_temp.PAR = list_mtrl.PAR
      mtrl_temp.MTRLTEXT = list_mtrl.MTRLTEXT.
   END.       
             
   IF TOG_KOMB = TRUE THEN DO:
      FOR EACH idbuff WHERE idbuff.XKORD = kon_id.XKORD AND                        
      ROWID(idbuff) NE ROWID(kon_id)
      NO-LOCK:
         FOR EACH list_mtrl WHERE list_mtrl.NUM = idbuff.NUM USE-INDEX NUM
         NO-LOCK:
            CREATE mtrl_temp.
            ASSIGN  
            mtrl_temp.NUM = list_mtrl.NUM
            mtrl_temp.ENR = list_mtrl.ENR     
            mtrl_temp.BENAMNING = list_mtrl.BENAMNING
            mtrl_temp.ENHET = list_mtrl.ENHET
            mtrl_temp.ANTAL = list_mtrl.ANTAL
            mtrl_temp.PRIS = list_mtrl.PRIS 
            mtrl_temp.TOTPRIS = list_mtrl.PRIS * list_mtrl.ANTAL      
            mtrl_temp.LEVKOD = list_mtrl.LEVKOD
            mtrl_temp.PAR = list_mtrl.PAR
            mtrl_temp.MTRLTEXT = list_mtrl.MTRLTEXT.
         END.
      END.   
   END.
      
   ASSIGN
   sumpris = 0
   sumkonstr = 0
   sumantal = 0
   sumea = 0.
     
   
   FOR EACH mtrl_temp BREAK BY mtrl_temp.ENR BY mtrl_temp.PAR:       
      ACCUMULATE mtrl_temp.ANTAL (TOTAL BY mtrl_temp.ENR BY mtrl_temp.PAR).       
      IF LAST-OF(mtrl_temp.PAR) THEN DO TRANSACTION:
         CREATE mtrl_temp2.
         ASSIGN                        
         mtrl_temp2.UPPLAG = mtrl_temp.UPPLAG 
         mtrl_temp2.GRUPP = mtrl_temp.GRUPP 
         mtrl_temp2.XKORD = mtrl_temp.XKORD
         mtrl_temp2.ENR = mtrl_temp.ENR
         mtrl_temp2.BENAMNING = mtrl_temp.BENAMNING 
         mtrl_temp2.ENHET = mtrl_temp.ENHET
         mtrl_temp2.PRIS = mtrl_temp.PRIS
         mtrl_temp2.FORNR = mtrl_temp.FORNR
         mtrl_temp2.LINNR = mtrl_temp.LINNR
         mtrl_temp2.NATNR = mtrl_temp.NATNR
         mtrl_temp2.FRI1 = mtrl_temp.FRI1
         mtrl_temp2.FRI2 = mtrl_temp.FRI2
         mtrl_temp2.PAR = mtrl_temp.PAR                        
         mtrl_temp2.ANTAL = (ACCUM TOTAL BY mtrl_temp.PAR mtrl_temp.ANTAL).                                     
      END.     
   END.   
   
   ASSIGN
   totalsum = 0
   totea = 0.   
   FIND first ANNNAMN NO-LOCK NO-ERROR.
   IF TOG_UPP = TRUE THEN DO:
      IF kon_val.UPPLAG NE ? THEN DO:
         FIND FIRST BERUPP WHERE BERUPP.AONR = valaonr AND
         BERUPP.OMRADE = valomrade AND BERUPP.UPPLAG = kon_val.UPPLAG 
         USE-INDEX OMR NO-LOCK NO-ERROR.   
         IF AVAILABLE BERUPP THEN DO:
            CREATE tidut.                                 
            ASSIGN
            SUBSTRING(tidut.UT,1) = "UPPLAG NR           :" 
            SUBSTRING(tidut.UT,22) = STRING(BERUPP.UPPLAG).
            CREATE tidut.
            ASSIGN
            SUBSTRING(tidut.UT,1) = "ADRESS              :"
            SUBSTRING(tidut.UT,22) = BERUPP.ADRESS
            tant = tant + 2.       
            IF BERUPP.ANMARK NE "" THEN DO: 
               uppvar = TRUE.        
               RUN anm2_UI.
               uppvar = FALSE.
            END.
            CREATE tidut.
            ASSIGN
            tant = tant + 1
            SUBSTRING(tidut.UT,1) = str0
            bytgrupp = "".    
         END.   
      END.
      ELSE DO:
         CREATE tidut.                                 
         ASSIGN
         SUBSTRING(tidut.UT,1) = "UPPLAG SAKNAS".
         CREATE tidut.
         ASSIGN
         SUBSTRING(tidut.UT,1) = str0.
      END.
   END.         
   RUN ett_UI.           
    
END PROCEDURE.

PROCEDURE text_UI :
   IF mtextvar = FALSE THEN DO:
      ASSIGN
      kant = kant + 1
      mtextvar = TRUE.
      IF tiduttyp = 1 THEN DO:
         CREATE tidut.            
         SUBSTRING(tidut.UT,1) = "Text".
      END. 
      ELSE IF tiduttyp = 2 THEN DO:
         CREATE tidut2.            
         SUBSTRING(tidut2.UT,1) = "Text".
      END.
      ELSE IF tiduttyp = 3 THEN DO:
         CREATE tidut3.            
         SUBSTRING(tidut3.UT,1) = "Text".
      END.
      ELSE IF tiduttyp = 4 THEN DO:
         CREATE tidut4.            
         SUBSTRING(tidut4.UT,1) = "Text".
      END.  
   END.
   ASSIGN
   skapad = TRUE       
   retvar = 1 
   ednum = 1    
   ednum3 = LENGTH(mtrl_temp.MTRLTEXT)      
   retvar = INDEX(mtrl_temp.MTRLTEXT,CHR(10),ednum)
   edtecken = 39   
   edtext = mtrl_temp.MTRLTEXT
   tidtext = "".        
   {MTRLTEXT.I}   
END PROCEDURE.

PROCEDURE utkalk_UI :
   CREATE tidut.
   ASSIGN
   kant = kant + 1
   SUBSTRING(tidut.UT,1) = kalk_temp2.ARBKOD + " " + STRING(kalk_temp2.LOPNR,Guru.Konstanter:varforetypchar[6])
   SUBSTRING(tidut.UT,13) = SUBSTRING(kalk_temp2.BENAMNING,1,38) 
   SUBSTRING(tidut.UT,52) = kalk_temp2.ENHET
   SUBSTRING(tidut.UT,58) = STRING(kalk_temp2.ANTAL,">>>>9")
   SUBSTRING(tidut.UT,64) = STRING(kalk_temp2.EAST,">>>>>>9.99").
   SUBSTRING(tidut.UT,75) = STRING(kalk_temp2.EA,">>>>>>9.99").
   sumea = sumea + kalk_temp2.EA.
END PROCEDURE.

PROCEDURE utkalk3_UI :
   CREATE tidut.
   ASSIGN
   kant = kant + 1
   SUBSTRING(tidut.UT,1) = kalk_temp2.ARBKOD + " " + STRING(kalk_temp2.LOPNR,Guru.Konstanter:varforetypchar[6])
   SUBSTRING(tidut.UT,13) = SUBSTRING(kalk_temp2.BENAMNING,1,38) 
   SUBSTRING(tidut.UT,52) = kalk_temp2.ENHET
   SUBSTRING(tidut.UT,58) = STRING(kalk_temp2.ANTAL,">>>>9")
   SUBSTRING(tidut.UT,64) = STRING(kalk_temp2.F2,">>>>>>9.99").
   SUBSTRING(tidut.UT,75) = STRING((kalk_temp2.F3 + kalk_temp2.F4),">>>>>>9.99").
   sumea = sumea + kalk_temp2.EA.
   summont = summont + kalk_temp2.F2.
   summask = summask + kalk_temp2.F3 + kalk_temp2.F4.
END PROCEDURE.


PROCEDURE val2_UI :

   IF BBENAMNING.B3 NE "" THEN DO: 
      ASSIGN
      SUBSTRING(tidut.UT,1) = BBENAMNING.B3
      SUBSTRING(tidut.UT,21) = ":"
      SUBSTRING(tidut.UT,22) = LEFT-TRIM(kon_val.F3).               
   END.   
   IF BBENAMNING.B4 NE "" THEN DO:
      ASSIGN
      SUBSTRING(tidut.UT,40) = BBENAMNING.B4
      SUBSTRING(tidut.UT,61) = ":"
      SUBSTRING(tidut.UT,62) = LEFT-TRIM(kon_val.F4).          
   END.
   CREATE tidut.
   kant = kant + 1.   
   FIND FIRST skap_temp WHERE skap_temp.NUM = kon_val.NUM AND
   skap_temp.F3 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
   IF AVAILABLE skap_temp THEN finns = TRUE.         
   ELSE finns = FALSE.
   IF finns = FALSE THEN DO:
      FIND FIRST skap_temp WHERE skap_temp.NUM = kon_val.NUM AND
      skap_temp.F4 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN finns = TRUE. 
   END.     
   DO WHILE finns = TRUE:
      FIND FIRST skap_temp WHERE skap_temp.NUM = kon_val.NUM AND
      skap_temp.F3 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN DO:
         ASSIGN            
         SUBSTRING(tidut.UT,22) = LEFT-TRIM(skap_temp.F3).
         DELETE skap_temp.
      END.
      FIND FIRST skap_temp WHERE skap_temp.NUM = kon_val.NUM AND
      skap_temp.F4 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN DO:
         ASSIGN            
         SUBSTRING(tidut.UT,62) = LEFT-TRIM(skap_temp.F4).
         DELETE skap_temp.
      END.
      FIND FIRST skap_temp WHERE skap_temp.NUM = kon_val.NUM AND
      skap_temp.F3 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN finns = TRUE.         
      ELSE finns = FALSE.
      IF finns = FALSE THEN DO:
         FIND FIRST skap_temp WHERE skap_temp.NUM = kon_val.NUM AND
         skap_temp.F4 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
         IF AVAILABLE skap_temp THEN finns = TRUE. 
      END.
      CREATE tidut.
      kant = kant + 1.
   END.   
   IF BBENAMNING.B5 NE "" THEN DO:      
      ASSIGN
      SUBSTRING(tidut.UT,1) = BBENAMNING.B5
      SUBSTRING(tidut.UT,21) = ":"
      SUBSTRING(tidut.UT,22) = LEFT-TRIM(kon_val.F5).      
   END.
   IF BBENAMNING.B6 NE "" THEN DO:      
      ASSIGN
      SUBSTRING(tidut.UT,40) = BBENAMNING.B6
      SUBSTRING(tidut.UT,61) = ":"
      SUBSTRING(tidut.UT,62) = LEFT-TRIM(kon_val.F6).                
   END.
   CREATE tidut.
   kant = kant + 1.   
   FIND FIRST skap_temp WHERE skap_temp.NUM = kon_val.NUM AND
   skap_temp.F5 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
   IF AVAILABLE skap_temp THEN finns = TRUE.         
   ELSE finns = FALSE.
   IF finns = FALSE THEN DO:
      FIND FIRST skap_temp WHERE skap_temp.NUM = kon_val.NUM AND
      skap_temp.F6 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN finns = TRUE. 
   END.      
   DO WHILE finns = TRUE:
      FIND FIRST skap_temp WHERE skap_temp.NUM = kon_val.NUM AND
      skap_temp.F5 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN DO:
         ASSIGN
         SUBSTRING(tidut.UT,22) = LEFT-TRIM(skap_temp.F5).
         DELETE skap_temp.
      END.
      FIND FIRST skap_temp WHERE skap_temp.NUM = kon_val.NUM AND
      skap_temp.F6 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN DO:
         ASSIGN            
         SUBSTRING(tidut.UT,62) = LEFT-TRIM(skap_temp.F6).
         DELETE skap_temp.
      END.
      FIND FIRST skap_temp WHERE skap_temp.NUM = kon_val.NUM AND
      skap_temp.F5 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN finns = TRUE.         
      ELSE finns = FALSE.
      IF finns = FALSE THEN DO:
         FIND FIRST skap_temp WHERE skap_temp.NUM = kon_val.NUM AND
         skap_temp.F6 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
         IF AVAILABLE skap_temp THEN finns = TRUE. 
      END.
      CREATE tidut.
      kant = kant + 1.
   END.
END PROCEDURE.

PROCEDURE val_UI :

   CREATE tidut. 
   CREATE tidut.  
   kant = kant + 2.    
   ASSIGN
   SUBSTRING(tidut.UT,1) = BBENAMNING.B1
   SUBSTRING(tidut.UT,21) = ":"
   SUBSTRING(tidut.UT,22) = LEFT-TRIM(kon_val.F1).   
   IF kon_val.GRUPP = 0 THEN DO:
      CREATE tidut.
      CREATE tidut.
      ASSIGN
      kant = kant + 2
      SUBSTRING(tidut.UT,1) = SUBSTRING(BBENAMNING.B2,1,15)
      SUBSTRING(tidut.UT,17) = SUBSTRING(BBENAMNING.B3,1,15)
      SUBSTRING(tidut.UT,34) = SUBSTRING(BBENAMNING.B4,1,15)
      SUBSTRING(tidut.UT,51) = SUBSTRING(BBENAMNING.B5,1,15)
      SUBSTRING(tidut.UT,68) = SUBSTRING(BBENAMNING.B6,1,15).
      CREATE tidut.
      ASSIGN
      kant = kant + 1
      SUBSTRING(tidut.UT,1) = LEFT-TRIM(kon_val.F2)
      SUBSTRING(tidut.UT,17) = LEFT-TRIM(kon_val.F3)
      SUBSTRING(tidut.UT,34) = LEFT-TRIM(kon_val.F4)
      SUBSTRING(tidut.UT,51) = LEFT-TRIM(kon_val.F5)
      SUBSTRING(tidut.UT,68) = LEFT-TRIM(kon_val.F6).
      CREATE tidut.
      kant = kant + 1.
      FOR EACH skap_temp WHERE skap_temp.NUM = kon_val.NUM 
      USE-INDEX NUM NO-LOCK:
         ASSIGN
         SUBSTRING(tidut.UT,1) = LEFT-TRIM(skap_temp.F2)
         SUBSTRING(tidut.UT,17) = LEFT-TRIM(skap_temp.F3)
         SUBSTRING(tidut.UT,34) = LEFT-TRIM(skap_temp.F4)
         SUBSTRING(tidut.UT,51) = LEFT-TRIM(skap_temp.F5)
         SUBSTRING(tidut.UT,68) = LEFT-TRIM(skap_temp.F6).
         CREATE tidut.
         kant = kant + 1.  
      END.
      RETURN.
   END.
   IF BBENAMNING.B2 NE "" THEN DO:
      ASSIGN
      SUBSTRING(tidut.UT,40) = BBENAMNING.B2
      SUBSTRING(tidut.UT,61) = ":"
      SUBSTRING(tidut.UT,62) = LEFT-TRIM(kon_val.F2).
      CREATE tidut.
      kant = kant + 1.
      FOR EACH skap_temp WHERE skap_temp.NUM = kon_val.NUM AND
      skap_temp.F2 NE "" USE-INDEX NUM NO-LOCK:
         SUBSTRING(tidut.UT,62) = LEFT-TRIM(skap_temp.F2).
         CREATE tidut.
         kant = kant + 1.  
      END.        
   END.        
   RUN val2_UI.         
END PROCEDURE.
