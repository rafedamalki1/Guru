/*xladda.p*/  
DEFINE TEMP-TABLE anvtemp 
   FIELD ANVANDARE LIKE ANVANDARE.ANVANDARE
   FIELD AV-NAMN LIKE ANVANDARE.AV-NAMN
   FIELD AVDELNINGNR LIKE ANVANDARE.AVDELNINGNR
   FIELD AV-LEVEL LIKE ANVANDARE.AV-LEVEL
   FIELD AV-LOSEN LIKE ANVANDARE.AV-LOSEN
   FIELD PERSONALKOD LIKE ANVANDARE.PERSONALKOD
   FIELD SKRIVARID LIKE ANVANDARE.SKRIVARID
   FIELD ALLAONR LIKE ANVANDARE.ALLAONR
   FIELD ALLPERS LIKE ANVANDARE.ALLPERS
   FIELD SIDS LIKE ANVANDARE.SIDS
   FIELD SIDL LIKE ANVANDARE.SIDL.
DEFINE TEMP-TABLE godktemp           
   FIELD PERSONALKOD LIKE ANSVARIGTAB.PERSONALKOD
   FIELD FORNAMN LIKE ANSVARIGTAB.FORNAMN
   FIELD EFTERNAMN LIKE ANSVARIGTAB.EFTERNAMN.        
DEFINE TEMP-TABLE anstemp
   FIELD FORNAMN LIKE ANSVARIGTAB.FORNAMN
   FIELD EFTERNAMN LIKE ANSVARIGTAB.EFTERNAMN
   FIELD PERSONALKOD LIKE ANSVARIGTAB.PERSONALKOD
   FIELD OMREGTID LIKE ANSVARIGTAB.OMREGTID. 
DEFINE QUERY persq FOR PERSONALTAB.     
DEFINE QUERY aonrq FOR AONRTAB.
OPEN QUERY aonrq FOR EACH AONRTAB WHERE AONRTAB.AONR > "999" NO-LOCK.    
DO TRANSACTION:   
   GET FIRST aonrq EXCLUSIVE-LOCK.
   IF AVAILABLE AONRTAB THEN DO:
      DELETE AONRTAB.
   END. 
END.             
REPEAT TRANSACTION:                    
   GET NEXT aonrq EXCLUSIVE-LOCK.          
   IF NOT AVAILABLE AONRTAB THEN LEAVE.
   ELSE DO :
      DELETE AONRTAB.      
   END.                
END.  
INPUT FROM /pro7/guru/anvadare.d convert target "iso8859-1" source "iso8859-1" NO-ECHO.
REPEAT:
   CREATE anvtemp.
   ASSIGN.
   IMPORT anvtemp.
END.             
FOR EACH anvtemp WHERE anvtemp.ANVANDARE = "":
   DELETE anvtemp.
END.      
FOR EACH anvtemp:
   FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = anvtemp.ANVANDARE 
   USE-INDEX ANDV NO-LOCK NO-ERROR.                         
   IF NOT AVAILABLE ANVANDARE THEN DO:
      CREATE ANVANDARE.
      ASSIGN
      ANVANDARE.ANVANDARE = anvtemp.ANVANDARE
      ANVANDARE.AV-NAMN = anvtemp.AV-NAMN
      ANVANDARE.AVDELNINGNR = anvtemp.AVDELNINGNR
      ANVANDARE.AV-LEVEL = anvtemp.AV-LEVEL
      ANVANDARE.AV-LOSEN = anvtemp.AV-LOSEN
      ANVANDARE.PERSONALKOD = anvtemp.PERSONALKOD
      ANVANDARE.SKRIVARID = anvtemp.SKRIVARID
      ANVANDARE.ALLAONR = anvtemp.ALLAONR
      ANVANDARE.ALLPERS = anvtemp.ALLPERS
      ANVANDARE.SIDS = anvtemp.SIDS
      ANVANDARE.SIDL = anvtemp.SIDL.
   END.
END.   
INPUT CLOSE.  
INPUT FROM /pro7/guru/pers.d convert target "iso8859-1" source "iso8859-1". 
REPEAT:
   CREATE PERSONALTAB.
   ASSIGN.
   IMPORT PERSONALTAB.
END.     
INPUT CLOSE.
INPUT FROM /pro7/guru/timtab.d convert target "iso8859-1" source "iso8859-1".
REPEAT: 
   CREATE TIMKOSTNADSTAB.
   ASSIGN.
   IMPORT TIMKOSTNADSTAB.
END. 
INPUT CLOSE.
INPUT FROM /pro7/guru/godk.d convert target "iso8859-1" source "iso8859-1".
REPEAT: 
   CREATE godktemp.
   ASSIGN.
   IMPORT godktemp.
END.       
FOR EACH godktemp WHERE godktemp.PERSONALKOD = "":
   DELETE godktemp.
END.      
FOR EACH godktemp:
   FIND FIRST GODKANNARTAB WHERE GODKANNARTAB.PERSONALKOD = godktemp.PERSONALKOD 
   USE-INDEX GODK NO-LOCK NO-ERROR.                         
   IF NOT AVAILABLE GODKANNARTAB THEN DO:
      CREATE GODKANNARTAB.  
      ASSIGN
      GODKANNARTAB.FORNAMN = godktemp.FORNAMN
      GODKANNARTAB.EFTERNAMN = godktemp.EFTERNAMN
      GODKANNARTAB.PERSONALKOD = godktemp.PERSONALKOD. 
   END.
END.  
INPUT CLOSE.   
INPUT FROM /pro7/guru/ansv.d convert target "iso8859-1" source "iso8859-1".
REPEAT: 
   CREATE anstemp.
   ASSIGN.
   IMPORT anstemp.
END.     
FOR EACH anstemp WHERE anstemp.PERSONALKOD = "":
   DELETE anstemp.
END.      
FOR EACH anstemp:
   FIND FIRST ANSVARIGTAB WHERE ANSVARIGTAB.PERSONALKOD = anstemp.PERSONALKOD 
   USE-INDEX ANSVG NO-LOCK NO-ERROR.                         
   IF NOT AVAILABLE ANSVARIGTAB THEN DO:
      CREATE ANSVARIGTAB.  
      ASSIGN
      ANSVARIGTAB.FORNAMN = anstemp.FORNAMN
      ANSVARIGTAB.EFTERNAMN = anstemp.EFTERNAMN
      ANSVARIGTAB.PERSONALKOD = anstemp.PERSONALKOD
      ANSVARIGTAB.OMREGTID = anstemp.OMREGTID. 
   END.
END.      
INPUT CLOSE. 
INPUT FROM /pro7/guru/psek.d convert target "iso8859-1" source "iso8859-1".
REPEAT: 
   CREATE PERSEK.  
   ASSIGN.     
   IMPORT PERSEK.  
END.  
INPUT FROM /pro7/guru/tsek.d convert target "iso8859-1" source "iso8859-1".
REPEAT: 
   CREATE TIDSEK.   
   ASSIGN.
   IMPORT TIDSEK.   
END. 
INPUT CLOSE.                      
OPEN QUERY persq FOR EACH PERSONALTAB USE-INDEX PERSONALKOD NO-LOCK.
GET FIRST persq NO-LOCK.
DO WHILE AVAILABLE(PERSONALTAB): 
   FOR EACH ANVANDARE USE-INDEX ANDV NO-LOCK:
      IF ANVANDARE.AV-LEVEL = 0 THEN NEXT.
      FIND FIRST PERSEK WHERE PERSEK.ANVANDARE = ANVANDARE.ANVANDARE AND
      PERSEK.PERSONALKOD = PERSONALTAB.PERSONALKOD USE-INDEX PERSEK EXCLUSIVE-LOCK NO-ERROR.
      IF NOT AVAILABLE PERSEK THEN DO:
         CREATE PERSEK. 
         ASSIGN PERSEK.PANDRA = FALSE.
      END.
      ASSIGN PERSEK.ANVANDARE = ANVANDARE.ANVANDARE      
      PERSEK.PERSONALKOD = PERSONALTAB.PERSONALKOD
      PERSEK.FORNAMN = PERSONALTAB.FORNAMN
      PERSEK.EFTERNAMN = PERSONALTAB.EFTERNAMN. 
      FIND FIRST TIDSEK WHERE TIDSEK.ANVANDARE = ANVANDARE.ANVANDARE AND
      TIDSEK.PERSONALKOD = PERSONALTAB.PERSONALKOD USE-INDEX TIDSEK EXCLUSIVE-LOCK NO-ERROR.
      IF NOT AVAILABLE TIDSEK THEN DO:
         CREATE TIDSEK. 
         ASSIGN TIDSEK.PANDRA = FALSE.
      END.
      ASSIGN TIDSEK.ANVANDARE = ANVANDARE.ANVANDARE      
      TIDSEK.PERSONALKOD = PERSONALTAB.PERSONALKOD
      TIDSEK.FORNAMN = PERSONALTAB.FORNAMN
      TIDSEK.EFTERNAMN = PERSONALTAB.EFTERNAMN. 
   END.   
   GET NEXT persq NO-LOCK.             
END.  