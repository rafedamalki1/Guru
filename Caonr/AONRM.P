/*AONRM.P*/
{AONRMWID.I}
{EXTRADATA.I}
DEFINE VARIABLE exdatah AS HANDLE NO-UNDO.
DEFINE VARIABLE KalkClasserStart AS HANDLE NO-UNDO.
DEFINE VARIABLE startrow AS DECIMAL NO-UNDO.
DEFINE VARIABLE GPLClasserStart AS HANDLE NO-UNDO.
DEFINE VARIABLE inkberh AS HANDLE NO-UNDO.
DEFINE SHARED VARIABLE omrpersanvok AS LOGICAL NO-UNDO.
DEFINE SHARED TEMP-TABLE omranvandartemp NO-UNDO LIKE anvandartemp.
DEFINE SHARED VARIABLE xmtrl AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE xtypmtrl AS INTEGER NO-UNDO.
xmtrl = FALSE.
DEFINE VARIABLE skapakalberSla AS CHARACTER  NO-UNDO.
DEFINE VARIABLE editanm AS CHARACTER FORMAT "x(68)" NO-UNDO.
DEFINE VARIABLE gatilltyp AS CHARACTER NO-UNDO.
DEFINE VARIABLE gatill1   AS CHARACTER NO-UNDO.
DEFINE VARIABLE gatill2   AS CHARACTER NO-UNDO.
DEFINE VARIABLE logformhj AS CHARACTER NO-UNDO.
DEFINE VARIABLE entrymtrlantal AS LOGICAL NO-UNDO.
DEFINE VARIABLE kalkproch AS HANDLE NO-UNDO.
DEFINE VARIABLE berapph AS HANDLE NO-UNDO.
DEFINE VARIABLE inkopvart AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE fbaonrvar AS LOGICAL NO-UNDO.
BTN_PAG:LABEL = "Gör " + LC(Guru.Konstanter:gaok) +  " pågående".
framesizeh = framesizeextrah.
RUN vh_UI.
FILL-IN-VALJBEST:SCREEN-VALUE = "Välj " + LC(Guru.Konstanter:gbestk).
FILL-IN-ecopy:HIDDEN = TRUE.

ON 'LEAVE' OF FILL-IN_AONR PERSISTENT RUN sokaonr_UI IN huvprogh.
ON 'LEAVE' OF FILL-IN_ORT PERSISTENT RUN lort_UI IN THIS-PROCEDURE.
ON 'ENTRY' OF FILL-IN_ARBANSVARIG PERSISTENT RUN entryarban_UI IN THIS-PROCEDURE (INPUT 1).
ON 'ENTRY' OF FILL-IN_BEREDARE PERSISTENT RUN entryarban_UI IN THIS-PROCEDURE (INPUT 2).
ON 'ENTRY' OF FILL-IN_STARTDAG PERSISTENT RUN entryarban_UI IN THIS-PROCEDURE (INPUT 4).
ON 'ENTRY' OF FILL-IN_UTFARDAT PERSISTENT RUN entryarban_UI IN THIS-PROCEDURE (INPUT 5).
ON 'MOUSE-SELECT-CLICK' OF FILL-IN_ARBANSVARIG PERSISTENT RUN entryarban_UI IN THIS-PROCEDURE (INPUT 1).
ON 'MOUSE-SELECT-CLICK' OF FILL-IN_BEREDARE PERSISTENT RUN entryarban_UI IN THIS-PROCEDURE (INPUT 2).
ON 'MOUSE-SELECT-CLICK' OF FILL-IN_STARTDAG PERSISTENT RUN entryarban_UI IN THIS-PROCEDURE (INPUT 4).
ON 'MOUSE-SELECT-CLICK' OF FILL-IN_UTFARDAT PERSISTENT RUN entryarban_UI IN THIS-PROCEDURE (INPUT 5).
ON 'ENTRY' OF FILL-IN_BEST PERSISTENT RUN ebest_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-CLICK' OF FILL-IN_BEST PERSISTENT RUN ebest_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF CMB_BESTAVD PERSISTENT RUN cmbbest_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_ARBAN PERSISTENT RUN brwarban_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_BERED PERSISTENT RUN brwbered_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_BEST PERSISTENT RUN brwbest_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_BESTAVD PERSISTENT RUN brwbestavd_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_PROJ PERSISTENT RUN brwproj_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_PAG PERSISTENT RUN btnpag_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_AVB PERSISTENT RUN btnavb_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_ANM PERSISTENT RUN btnanm_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_AVT PERSISTENT RUN mbtnavt_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_DOK PERSISTENT RUN btndok_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_FAK PERSISTENT RUN mbtnfak_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_KONT PERSISTENT  RUN mbtnkont_UI  IN THIS-PROCEDURE. 
ON 'CHOOSE' OF MBTN_KOPPL PERSISTENT RUN btnkop_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_OVR PERSISTENT RUN mbtnovr_UI  IN THIS-PROCEDURE. 
  
ON 'CHOOSE' OF MBTN_TIDL PERSISTENT RUN mbtntidl_UI  IN THIS-PROCEDURE. 
ON 'CHOOSE' OF MBTN_TIDPERS PERSISTENT RUN mbtnpers_UI  IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_AOPERSSEK PERSISTENT RUN btnaopers_UI  IN THIS-PROCEDURE.
ON 'CHOOSE' OF MBTN_PLIGG PERSISTENT RUN btnpligg_UI  IN THIS-PROCEDURE.

ON 'MOUSE-SELECT-CLICK' OF FILL-IN_FASTAAONR PERSISTENT RUN mfastao_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF CMB_OMR PERSISTENT RUN cmbomr_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF CMB_OMR PERSISTENT RUN vcmbomr_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_FASTTRAC PERSISTENT RUN btnfastt_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_ACCESS PERSISTENT RUN btnacc_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_Info PERSISTENT RUN minfo_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_Info-2 PERSISTENT RUN minfo2_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF refinfoh PERSISTENT RUN refinfo_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_KALKAR PERSISTENT RUN btnkalkar_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_AKTIV PERSISTENT RUN btnaktiv_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_KOPPLAAONR PERSISTENT RUN btnkoppao_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_GATILL PERSISTENT RUN btngatill_UI IN THIS-PROCEDURE (INPUT "").
ON 'CHOOSE' OF BTN_BERKALK PERSISTENT RUN btngatill_UI IN THIS-PROCEDURE (INPUT "BERKALK").
ON 'CHOOSE' OF BTN_SLAIHOPKALK PERSISTENT RUN btngatill_UI IN THIS-PROCEDURE (INPUT "SLAIHOP").

ON 'VALUE-CHANGED' OF BRW_KOPP PERSISTENT RUN vcbrwkopp_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK' OF BRW_KOPP PERSISTENT RUN mdcbrwkopp_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF FRAME-AONR PERSISTENT RUN fixastorlek_UI IN THIS-PROCEDURE.
 RUN setapplyvc IN framesizeh (INPUT FRAME-AONR).

ON 'ROW-LEAVE' OF BRW_KOPP PERSISTENT RUN rlwkopp_UI IN THIS-PROCEDURE.
ON 'ENTRY' OF GSTATUSNIV PERSISTENT RUN entrykopp_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF GSTATUSNIV PERSISTENT RUN ekopp_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-CLICK' OF GSTATUSNIV PERSISTENT RUN mlgniv_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_ANL PERSISTENT RUN vcbrwanl_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_AOTID PERSISTENT RUN vcbrwaotid_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_ARBART PERSISTENT RUN vcbrwarb_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_ARBARTOV PERSISTENT RUN vcbrwarbov_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK' OF BRW_AVTAL PERSISTENT RUN mbrwavtal_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_AVTAL PERSISTENT RUN vcbrwavtal_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK' OF BRW_AVTALDOK PERSISTENT RUN mbrwavtal2_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_AVTALDOK PERSISTENT RUN vcbrwavtal2_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_VISADOK PERSISTENT RUN btnvisadok_UI IN THIS-PROCEDURE. 
ON 'CHOOSE' OF BTN_VISATV PERSISTENT RUN btnvisaavt_UI IN THIS-PROCEDURE.  
ON 'CHOOSE' OF BTN_VISATIDL PERSISTENT RUN btnvisad_UI IN THIS-PROCEDURE.   
ON 'MOUSE-SELECT-DBLCLICK' OF BRW_DAGBOK PERSISTENT RUN mbrwdagbok_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK' OF EDITOR_ANM PERSISTENT RUN mdeditoranm_UI IN THIS-PROCEDURE.
ON 'RIGHT-MOUSE-CLICK' OF EDITOR_ANM PERSISTENT RUN mrseditoranm_UI IN THIS-PROCEDURE.

ON 'VALUE-CHANGED' OF BRW_DAGBOK PERSISTENT RUN vcbrwdagbok_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_PRIOOV PERSISTENT RUN vcbrwprioov_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_PRIO PERSISTENT RUN vcbrwprio_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_BORTDAGBOK PERSISTENT RUN btnbortadag_UI IN THIS-PROCEDURE.   
ON 'CHOOSE' OF BTN_VISADAGBOK PERSISTENT RUN btnvisdag_UI IN THIS-PROCEDURE.   
ON 'CHOOSE' OF BTN_ANDDAGBOK PERSISTENT RUN btnandadag_UI IN THIS-PROCEDURE.   
ON 'CHOOSE' OF BTN_ANDADOK PERSISTENT RUN btnandadok_UI IN THIS-PROCEDURE.   
ON 'CHOOSE' OF BTN_ANDTV PERSISTENT RUN btnandtv_UI IN THIS-PROCEDURE.                      
ON 'CHOOSE' OF BTN_BORTATIDL PERSISTENT RUN btnkoppbortl_UI IN THIS-PROCEDURE.   /*dok som är kopplad till tidl*/
ON 'CHOOSE' OF BTN_BDOCTIDTV PERSISTENT RUN btnborttv_UI IN THIS-PROCEDURE.      /*dok som är kopplad till avtal*/
ON 'CHOOSE' OF BTN_BDOCTIDDOK PERSISTENT RUN btnbortdok_UI IN THIS-PROCEDURE.    /*dok som är kopplad*/
ON 'CHOOSE' OF BTN_KOPPTIDL PERSISTENT RUN btnkopp_UI IN THIS-PROCEDURE.              
ON 'CHOOSE' OF BTN_ANMTIDL PERSISTENT RUN btnkopp2_UI IN THIS-PROCEDURE.              
ON 'CHOOSE' OF BTN_BESTTIDL PERSISTENT RUN btnkopp3_UI IN THIS-PROCEDURE.              
ON 'CHOOSE' OF BTN_MAPPDOK PERSISTENT RUN btnmapp_UI IN THIS-PROCEDURE.              
ON 'CHOOSE' OF BTN_MAPPTV PERSISTENT RUN btnmapp_UI IN THIS-PROCEDURE.              
ON 'CHOOSE' OF BTN_NYDAGBOK PERSISTENT RUN btnnydag_UI IN THIS-PROCEDURE.              
ON 'CHOOSE' OF BTN_NYADOK  PERSISTENT RUN btnnydok_UI IN THIS-PROCEDURE.              
ON 'CHOOSE' OF BTN_NYATV PERSISTENT RUN btnnytv_UI IN THIS-PROCEDURE.              
ON 'CHOOSE' OF BTN_OK PERSISTENT RUN btnok_UI IN THIS-PROCEDURE.              
ON 'VALUE-CHANGED' OF CMB_TRAK PERSISTENT RUN cmbtrak_UI IN THIS-PROCEDURE.
ON 'ENTRY' OF FILL-IN_ANLNR PERSISTENT RUN entryanl_UI IN THIS-PROCEDURE.
ON 'ENTRY' OF FILL-IN_ARBARTKOD PERSISTENT RUN entryarb_UI IN THIS-PROCEDURE.
ON 'ENTRY' OF FILL-IN_ARBARTKODOV PERSISTENT RUN entryarbov_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF FILL-IN_ARBARTKOD PERSISTENT RUN larb_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF FILL-IN_ARBARTKODOV PERSISTENT RUN larbov_UI IN THIS-PROCEDURE.
ON 'ENTRY' OF FILL-IN_PKODOV PERSISTENT RUN entrypkodov_UI IN THIS-PROCEDURE.
ON 'ENTRY' OF FILL-IN_PKOD PERSISTENT RUN entrypkod_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF FILL-IN_PKODOV PERSISTENT RUN lpkodov_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF FILL-IN_PKOD PERSISTENT RUN lpkod_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-CLICK' OF FILL-IN_UTRYCKNING PERSISTENT RUN mut_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_GATILLTIDL PERSISTENT RUN btngatilltidl_UI IN THIS-PROCEDURE.              
ON 'CHOOSE' OF BTN_GATILLANM PERSISTENT RUN btngatillanm_UI IN THIS-PROCEDURE.       
ON 'CHOOSE' OF BTN_ANDDAGBOK PERSISTENT RUN btnanddag_UI IN THIS-PROCEDURE.       
ON 'CHOOSE' OF BTN_BORTDAGBOK PERSISTENT RUN btnbortdag_UI IN THIS-PROCEDURE.       
ON 'CHOOSE' OF BTN_GATILLKONTO PERSISTENT RUN btngatillkont_UI IN THIS-PROCEDURE.       
ON 'VALUE-CHANGED' OF BRW_ANV PERSISTENT RUN vcbrwanv_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_GATILLTP PERSISTENT RUN btngatilltp_UI IN THIS-PROCEDURE. 
ON 'VALUE-CHANGED' OF BRW_HAND PERSISTENT RUN vcbrwhand_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_ANDHAND PERSISTENT RUN btnandhand_UI IN THIS-PROCEDURE. 
ON 'CHOOSE' OF BTN_BORTHAND PERSISTENT RUN btnborthand_UI IN THIS-PROCEDURE. 
ON 'CHOOSE' OF BTN_NYHAND PERSISTENT RUN btnnyhand_UI IN THIS-PROCEDURE. 
ON 'CHOOSE' OF BTN_MINDAT1HAND PERSISTENT RUN btnmin_UI IN THIS-PROCEDURE. 
ON 'CHOOSE' OF BTN_UPDAT1HAND PERSISTENT RUN btnplus_UI IN THIS-PROCEDURE. 

ON 'LEAVE' OF FILL-IN-STARTDATHAND PERSISTENT RUN lstartd_UI IN THIS-PROCEDURE. 
ON 'MOUSE-MENU-CLICK' OF FILL-IN-STARTDATHAND PERSISTENT RUN mmstartd_UI IN THIS-PROCEDURE. 
ON 'VALUE-CHANGED' OF TOG_KLAR PERSISTENT RUN togklar_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF mFILL-IN_STARTDAG PERSISTENT RUN valpers_UI IN THIS-PROCEDURE (INPUT 1). 
ON 'CHOOSE' OF mFILL-IN_BEREDARE PERSISTENT RUN valpers_UI IN THIS-PROCEDURE (INPUT 2). 
ON 'CHOOSE' OF mFILL-IN_ARBANSVARIG PERSISTENT RUN valpers_UI IN THIS-PROCEDURE (INPUT 3). 
ON 'CHOOSE' OF mFILL-IN_BEST PERSISTENT RUN valkontakt_UI IN THIS-PROCEDURE. 
ON 'CHOOSE' OF mFILL-IN_KUND PERSISTENT RUN valkontakt_UI IN THIS-PROCEDURE. 

ON 'VALUE-CHANGED' OF BRW_PERS PERSISTENT RUN vcbrwpers_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF BRW_PERS PERSISTENT RUN brwpersg_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_UPPKALK  PERSISTENT RUN kalk_UI  IN THIS-PROCEDURE (INPUT 3).           
ON 'CHOOSE' OF BTN_KALKKALK PERSISTENT RUN kalk_UI  IN THIS-PROCEDURE (INPUT 4).           
ON 'CHOOSE' OF BTN_VISKALK  PERSISTENT RUN kalk_UI  IN THIS-PROCEDURE (INPUT 5).           
ON 'CHOOSE' OF BTN_KONVKALK PERSISTENT RUN kalk_UI  IN THIS-PROCEDURE (INPUT 6).           

ON 'CHOOSE' OF BTN_UPPBER   PERSISTENT RUN ber_UI  IN THIS-PROCEDURE (INPUT 3).           
ON 'CHOOSE' OF BTN_BERBER   PERSISTENT RUN ber_UI  IN THIS-PROCEDURE (INPUT 4).           
ON 'CHOOSE' OF BTN_INKBER   PERSISTENT RUN ber_UI  IN THIS-PROCEDURE (INPUT 5).
ON 'CHOOSE' OF BTN_INKBERDIREKT PERSISTENT RUN ber_UI  IN THIS-PROCEDURE (INPUT 13).
ON 'CHOOSE' OF BTN_LASBERDIREKT PERSISTENT RUN ber_UI  IN THIS-PROCEDURE (INPUT 14).
ON 'CHOOSE' OF BTN_JMFBERINK   PERSISTENT RUN ber_UI  IN THIS-PROCEDURE (INPUT 15).
ON 'CHOOSE' OF BTN_LISTBER  PERSISTENT RUN ber_UI  IN THIS-PROCEDURE (INPUT 6).           
ON 'CHOOSE' OF BTN_ATGBER   PERSISTENT RUN ber_UI  IN THIS-PROCEDURE (INPUT 7).           
ON 'CHOOSE' OF BTN_LASBER   PERSISTENT RUN ber_UI  IN THIS-PROCEDURE (INPUT 8).           
ON 'CHOOSE' OF BTN_EXPBER   PERSISTENT RUN ber_UI  IN THIS-PROCEDURE (INPUT 9).           
ON 'CHOOSE' OF BTN_SCHAKTP  PERSISTENT RUN ber_UI  IN THIS-PROCEDURE (INPUT 10).
ON 'CHOOSE' OF BTN_KOPIBER  PERSISTENT RUN ber_UI  IN THIS-PROCEDURE (INPUT 11).
ON 'CHOOSE' OF BTN_IMPBER  PERSISTENT RUN ber_UI  IN THIS-PROCEDURE (INPUT 12).
ON 'CHOOSE' OF BTN_IMPORTBER  PERSISTENT RUN ber_UI  IN THIS-PROCEDURE (INPUT 91).           
 
ON 'CHOOSE' OF BTN_FAKFAK    PERSISTENT RUN fakt_UI  IN THIS-PROCEDURE (INPUT 3).           
ON 'CHOOSE' OF BTN_FLISTAFAK PERSISTENT RUN fakt_UI  IN THIS-PROCEDURE (INPUT 4).           
ON 'CHOOSE' OF BTN_KredFAK   PERSISTENT RUN fakt_UI  IN THIS-PROCEDURE (INPUT 5).           
ON 'CHOOSE' OF BTN_PRELBFAK  PERSISTENT RUN fakt_UI  IN THIS-PROCEDURE (INPUT 6).           
ON 'CHOOSE' OF BTN_UPPFAK    PERSISTENT RUN fakt_UI  IN THIS-PROCEDURE (INPUT 7).           
ON 'CHOOSE' OF BTN_VFAKFAK   PERSISTENT RUN fakt_UI  IN THIS-PROCEDURE (INPUT 8).           
ON 'CHOOSE' OF BTN_VISAOFAK  PERSISTENT RUN fakt_UI  IN THIS-PROCEDURE (INPUT 9).
ON 'CHOOSE' OF BTN_KOPPFAK   PERSISTENT RUN fakt_UI  IN THIS-PROCEDURE (INPUT 10).

ON 'CHOOSE' OF BTN_UPPMARK    PERSISTENT RUN mark_UI  IN THIS-PROCEDURE (INPUT 3).           
ON 'CHOOSE' OF BTN_FASTIGHETMARK PERSISTENT RUN mark_UI  IN THIS-PROCEDURE (INPUT 4).           
ON 'CHOOSE' OF BTN_VARDMARK   PERSISTENT RUN mark_UI  IN THIS-PROCEDURE (INPUT 5).           
ON 'CHOOSE' OF BTN_VISKALMARK  PERSISTENT RUN mark_UI  IN THIS-PROCEDURE (INPUT 6).           
ON 'CHOOSE' OF BTN_VISMARK    PERSISTENT RUN mark_UI  IN THIS-PROCEDURE (INPUT 7).           
ON 'CHOOSE' OF BTN_OMRAKNA   PERSISTENT RUN mark_UI  IN THIS-PROCEDURE (INPUT 8).           
ON 'CHOOSE' OF BTN_EXPMARK  PERSISTENT RUN mark_UI  IN THIS-PROCEDURE (INPUT 9).
ON 'CHOOSE' OF BTN_BEHORAND  PERSISTENT RUN btnhorand_UI  IN THIS-PROCEDURE.
IF  Guru.Konstanter:globforetag = "AKEA" THEN GSTATUSNIV:VISIBLE = FALSE.  
BTN_JMFBERINK:HIDDEN = TRUE.
DEFINE VARIABLE dokh AS HANDLE NO-UNDO.
DEFINE VARIABLE ordningnr AS INTEGER NO-UNDO.
EMPTY TEMP-TABLE whandltemp2 NO-ERROR. 

IF Guru.Konstanter:varforetypval[43] = 1 THEN DO:
   CREATE whandltemp2.
   ordningnr = 1.   
   RUN whandle_UI (INPUT-OUTPUT ordningnr,FRAME-KOPP).
   RUN whandle_UI (INPUT-OUTPUT ordningnr,CMB_DOKTYP).
   RUN whandle_UI (INPUT-OUTPUT ordningnr,CMB_DOKSTATUS).
   RUN whandle_UI (INPUT-OUTPUT ordningnr,BTN_EXPMARK).
   RUN whandle_UI (INPUT-OUTPUT ordningnr,BRW_KOPP).
    
   RUN AONRDOK.P PERSISTENT SET dokh (INPUT THIS-PROCEDURE ,INPUT framesizeh,INPUT TABLE whandltemp2). 
END.
ELSE DO:
   ASSIGN
   CMB_DOKTYP:HIDDEN = TRUE
   CMB_DOKSTATUS:HIDDEN = TRUE.
END.   

DEFINE VARIABLE btnnovit AS HANDLE NO-UNDO. 
DEFINE VARIABLE valpersval AS INTEGER NO-UNDO.
PROCEDURE fixastorlek_UI :
   IF Guru.Konstanter:beresekvar[16] = TRUE THEN DO:
      BTN_INKBERDIREKT:ROW = 1.
      BTN_LASBERDIREKT:ROW = BTN_INKBERDIREKT:ROW.
      BTN_LASBERDIREKT:COLUMNS = BTN_INKBERDIREKT:COLUMNS + BTN_INKBERDIREKT:WIDTH.         
   END.
   ELSE DO:
      BTN_INKBERDIREKT:HIDDEN = TRUE.  
      BTN_LASBERDIREKT:HIDDEN = TRUE.
   END.   
   RUN buttplace_UI IN huvprogh.
  
   IF C-WIN:HIDDEN = TRUE OR FRAME-KOPP:HIDDEN = FALSE THEN DO:
      RUN vcbrwkopp_UI.
   END.
  
END PROCEDURE.
PROCEDURE whandle_UI :
   DEFINE INPUT-OUTPUT PARAMETER ordnr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER ordh AS HANDLE NO-UNDO.
   ASSIGN
   whandltemp2.WF[ordnr] = ordh.
   ordnr = ordnr + 1.
END PROCEDURE.
PROCEDURE EDELNR_UI :
   IF Guru.Konstanter:globforetag = "GRAN" THEN DO:
      IF FILL-IN_ARBARTKOD:SCREEN-VALUE = "310" THEN  FILL-IN-EDELNR:SCREEN-VALUE = FILL-IN_ARBARTKOD:SCREEN-VALUE.
      ELSE DO:
         EMPTY TEMP-TABLE extradatatemp NO-ERROR.
         EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
         CREATE inextradatatemp.          
         ASSIGN
         inextradatatemp.PROGRAM = "AOREF"                   
         inextradatatemp.HUVUDCH = uppaonrtemp.AONR               
         inextradatatemp.HUVUDINT =  uppaonrtemp.DELNR.   
         RUN etabhamt_UI IN exdatah (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
         FIND FIRST extradatatemp WHERE NO-LOCK NO-ERROR.          
         IF AVAILABLE extradatatemp THEN DO:           
            IF extradatatemp.SOKCHAR[6] = "WorkTask" THEN  FILL-IN-EDELNR:SCREEN-VALUE = extradatatemp.SOKCHAR[7].   
         END.
         EMPTY TEMP-TABLE extradatatemp NO-ERROR.
         EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
      END. 
      IF FILL-IN-EDELNR:SCREEN-VALUE NE "" THEN DO:
         IF FILL-IN_DELNR:SCREEN-VALUE  NE  FILL-IN-EDELNR:SCREEN-VALUE THEN FILL-IN-EDELNR:HIDDEN = FALSE.
      END.  
   END.   
END PROCEDURE.
PROCEDURE brwpersg_UI : 
   BRW_PERS:HIDDEN = TRUE.  
END PROCEDURE.
PROCEDURE vcbrwpers_UI :
   RUN selectfoc_UI (INPUT 19).
   IF AVAILABLE personaltemp THEN DO:
      IF valpersval = 1 THEN DO:
         ASSIGN
         FILL-IN_STARTDAG:SCREEN-VALUE  = STRING(personaltemp.PERSONALKOD)
         FILL-IN-NAMN-1:SCREEN-VALUE  = STRING(personaltemp.FORNAMN + " " + personaltemp.EFTERNAMN) + " " + personaltemp.TELEFON + " " + SUBSTRING(personaltemp.PERSONSOK,20).
      END.
      ELSE IF valpersval = 2 THEN DO:
         FILL-IN_BEREDARE:SCREEN-VALUE  = STRING(personaltemp.PERSONALKOD).
         FILL-IN-NAMN-2:SCREEN-VALUE  = STRING(personaltemp.FORNAMN + " " + personaltemp.EFTERNAMN) + " " + personaltemp.TELEFON + " " + SUBSTRING(personaltemp.PERSONSOK,20).
      END.
      ELSE IF valpersval = 3 THEN DO:
         FILL-IN_ARBANSVARIG:SCREEN-VALUE  = STRING(personaltemp.PERSONALKOD).
         FILL-IN-NAMN-3:SCREEN-VALUE  = STRING(personaltemp.FORNAMN + " " + personaltemp.EFTERNAMN) + " " + personaltemp.TELEFON + " " + SUBSTRING(personaltemp.PERSONSOK,20).
      END.      
   END.   
END PROCEDURE.
PROCEDURE valpers_UI :
   DEFINE INPUT PARAMETER vad AS INTEGER NO-UNDO.
   valpersval = vad.
   BRW_PERS:HIDDEN = FALSE.
   BRW_PERS:MOVE-TO-TOP ().   
   /*hämta alla alltid Lena 20200226*/
   RUN allpers_UI IN nyttaoapph (OUTPUT TABLE personaltemp).        
   Guru.Konstanter:StoppaOmrSek(TEMP-TABLE personaltemp:HANDLE). 
   RUN openbdynspec_UI IN brwproc[19].
   RUN lastselectdyn_UI IN brwproc[19].
   APPLY "ENTRY" TO BRW_PERS.
END PROCEDURE.

PROCEDURE lort_UI :
   FILL-IN_ORT:SCREEN-VALUE = TRIM(FILL-IN_ORT:SCREEN-VALUE).
   RUN AONRNAMNKOLL.P (INPUT 1, INPUT FILL-IN_ORT:SCREEN-VALUE,OUTPUT musz).
   IF musz = TRUE THEN DO:
      musz = FALSE.
      RETURN NO-APPLY.
   END.      
END PROCEDURE.
PROCEDURE btnvit_UI :
   DEFINE INPUT PARAMETER btnh AS HANDLE NO-UNDO.
   DEFINE VARIABLE btnlabel AS CHARACTER NO-UNDO.
   IF btnnovit NE ? THEN DO:
      btnlabel = btnnovit:IMAGE.
      btnlabel = REPLACE(btnlabel,"_vit.gif",".gif"). 
      btnnovit:LOAD-IMAGE (btnlabel) NO-ERROR.
   END.
   btnlabel = btnh:IMAGE.
   btnlabel = REPLACE(btnlabel,".gif","_vit.gif"). 
   btnh:LOAD-IMAGE (btnlabel) NO-ERROR.
   btnnovit = btnh.   
END PROCEDURE.
PROCEDURE btnkop_UI :
   RUN btnvit_UI (INPUT MBTN_KOPPL).
   RUN frame_UI IN huvprogh (INPUT "KOPP").
END PROCEDURE.
PROCEDURE btnanm_UI :
   RUN btnvit_UI (INPUT MBTN_ANM).
   RUN frame_UI IN huvprogh (INPUT "ANM").
END PROCEDURE.
PROCEDURE btndok_UI :
   RUN btnvit_UI (INPUT MBTN_DOK).
   RUN frame_UI IN huvprogh (INPUT "DOK").
END PROCEDURE.
PROCEDURE btnaopers_UI :
   RUN btnvit_UI (INPUT MBTN_AOPERSSEK).
   RUN frame_UI IN huvprogh (INPUT "BEH").
END PROCEDURE.
PROCEDURE btnpligg_UI :
   RUN btnvit_UI (INPUT MBTN_PLIGG).
   RUN frame_UI IN huvprogh (INPUT "PLI").
   IF NOT VALID-HANDLE(GPLClasserStart) THEN DO:
      RUN Modules\Projekt\GPlHelpStart.p PERSISTENT SET GPLClasserStart.
   END.
   RUN gpl_ui IN GPLClasserStart (INPUT aonrvar,INPUT delnrvar).   
END PROCEDURE.
PROCEDURE fbaonrkoll_UI :
   DEFINE OUTPUT PARAMETER kollvar AS LOGICAL NO-UNDO.
   /*SNATFAKT*/
   IF kollvar = kollvar THEN RETURN.
   /*Bara ett aonr*/              
   DEFINE VARIABLE nivint AS INTEGER NO-UNDO.
   kollvar = FALSE.
   FIND FIRST gatill WHERE gatill.TYPCHAR = "FBAONR" AND gatill.F2 NE ? NO-LOCK NO-ERROR.
   IF AVAILABLE gatill THEN DO:
      nivint = 0.
      FOR EACH gatill WHERE gatill.TYPCHAR = "FBAONR" AND gatill.F2 NE ?:
         nivint = nivint + INTEGER(gatill.STATUSNIV).            
      END.
      IF nivint NE 100 THEN DO: 
         MESSAGE "Summan av andelarna till Faktura beställarenas " LC(Guru.Konstanter:gaok) " måste alltid bli 100%!" VIEW-AS ALERT-BOX.
         kollvar = TRUE.         
         RETURN.
      END.
   END.
   EMPTY TEMP-TABLE inextrakopptemp NO-ERROR. 
   FOR EACH gatill WHERE gatill.TYPCHAR = "FBAONR" AND gatill.F2 NE ?:
      CREATE inextrakopptemp.          
      ASSIGN
      inextrakopptemp.PROGRAM = "FBAONR"                   
      inextrakopptemp.KOPPLACHAR1 = uppaonrtemp.AONR       
      inextrakopptemp.KOPPLAINT1 =  uppaonrtemp.DELNR      
      inextrakopptemp.KOPPLACHAR2 = gatill.AONR           
      inextrakopptemp.KOPPLAINT2 =  gatill.DELNR
      inextrakopptemp.SOKINT[1] = INTEGER(gatill.STATUSNIV).      
   END.
   FIND FIRST inextrakopptemp NO-LOCK NO-ERROR.
   IF AVAILABLE inextrakopptemp THEN DO:
      RUN extraspar_UI IN fbestapph (INPUT TABLE inextrakopptemp).         
   END.
   EMPTY TEMP-TABLE inextrakopptemp NO-ERROR. 
   FOR EACH gatill WHERE gatill.TYPCHAR = "INTAONR" AND gatill.F2 NE ?:
      CREATE inextrakopptemp.          
      ASSIGN
      inextrakopptemp.PROGRAM = "INTAONR"                   
      inextrakopptemp.KOPPLACHAR1 = uppaonrtemp.AONR       
      inextrakopptemp.KOPPLAINT1 =  uppaonrtemp.DELNR      
      inextrakopptemp.KOPPLACHAR2 = gatill.AONR           
      inextrakopptemp.KOPPLAINT2 =  gatill.DELNR
      inextrakopptemp.SOKINT[1] = INTEGER(gatill.STATUSNIV).      
   END.
   FIND FIRST inextrakopptemp NO-LOCK NO-ERROR.
   IF AVAILABLE inextrakopptemp THEN DO:
      RUN extraspar_UI IN fbestapph (INPUT TABLE inextrakopptemp).         
   END.
   EMPTY TEMP-TABLE inextrakopptemp NO-ERROR. 
END PROCEDURE.
PROCEDURE lstartd_UI :                                                                              
   RUN spardat IN avtaodatapph (INPUT aonrvar,INPUT delnrvar,INPUT avtalaonrtemp.AVTID,INPUT avtalaonrtemp.ORDN,
                                INPUT TOG_KLAR:CHECKED,INPUT DATE(FILL-IN-STARTDATHAND:SCREEN-VALUE)).
   avtalaonrtemp.KLR = DATE(FILL-IN-STARTDATHAND:SCREEN-VALUE).
   RUN setlastrowid_UI IN brwproc[6] (INPUT ROWID(avtalaonrtemp)).        
   RUN openbdynspec_UI IN brwproc[6].
   RUN lastselectdyn_UI IN brwproc[6].
END PROCEDURE.
PROCEDURE togklar_UI :  
   IF TOG_KLAR:CHECKED = TRUE THEN DO:
      IF FILL-IN-STARTDATHAND:SCREEN-VALUE = ? THEN DO:
         FILL-IN-STARTDATHAND:SCREEN-VALUE = STRING(TODAY).
      END.
      ASSIGN
      FILL-IN-STARTDATHAND:HIDDEN  = FALSE
      BTN_MINDAT1HAND:HIDDEN  = FALSE
      BTN_UPDAT1HAND:HIDDEN  = FALSE
      avtalaonrtemp.KLR = DATE(FILL-IN-STARTDATHAND:SCREEN-VALUE).
   END.
   ELSE DO:
      ASSIGN
      FILL-IN-STARTDATHAND:HIDDEN  = TRUE
      BTN_MINDAT1HAND:HIDDEN  = TRUE
      BTN_UPDAT1HAND:HIDDEN  = TRUE
      FILL-IN-STARTDATHAND:SCREEN-VALUE = ?
      avtalaonrtemp.KLR = ?.
   END.
   RUN lstartd_UI.
   
END PROCEDURE.
PROCEDURE mmstartd_UI :
   ASSIGN
   Guru.GlobalaVariabler:regdatum = DATE(FILL-IN-STARTDATHAND:SCREEN-VALUE).
   RUN AlmanBtn.w. 
   FILL-IN-STARTDATHAND:SCREEN-VALUE = STRING(Guru.GlobalaVariabler:regdatum).   
   RUN lstartd_UI.
END PROCEDURE.
PROCEDURE btnplus_UI :
   FILL-IN-STARTDATHAND:SCREEN-VALUE = STRING(DATE(FILL-IN-STARTDATHAND:SCREEN-VALUE) + 1).   
   RUN lstartd_UI.
END PROCEDURE.
PROCEDURE btnmin_UI :
   FILL-IN-STARTDATHAND:SCREEN-VALUE = STRING(DATE(FILL-IN-STARTDATHAND:SCREEN-VALUE) - 1).   
   RUN lstartd_UI.
END PROCEDURE.
PROCEDURE btnnyhand_UI :
   DEFINE VARIABLE brec AS RECID NO-UNDO.
   {muswait.i}
   IF TOG_KLAR:CHECKED = FALSE THEN DO:   
      RUN NYAVTAODAT.W (INPUT ?, INPUT aonrvar, INPUT delnrvar, INPUT avtalaonrtemp.ORDN, INPUT avtalaonrtemp.AVTID, OUTPUT brec).
      IF musz = FALSE THEN DO:
         FIND FIRST avtaodattemp WHERE avtaodattemp.AVTAODATREC = brec
         NO-LOCK NO-ERROR.
         RUN setlastrowid_UI IN brwproc[18] (INPUT ROWID(avtaodattemp)).        
         RUN openbdynspec_UI IN brwproc[18].
         RUN lastselectdyn_UI IN brwproc[18]. 
      END.
      ELSE musz = FALSE.
   END.
   ELSE DO:
      MESSAGE "Det går ej att lägga upp ny händelse då markeringen 'klar' är satt."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
   END.
   {musarrow.i}
END PROCEDURE.
PROCEDURE btnborthand_UI :
   IF TOG_KLAR:CHECKED = FALSE THEN DO:
      RUN selectfoc_UI (INPUT 18).
      IF AVAILABLE avtaodattemp THEN DO:
         MESSAGE "Vill du ta bort händelse: " + avtaodattemp.ANMARK + "?" VIEW-AS ALERT-BOX
         QUESTION BUTTONS YES-NO TITLE "Ta bort?" UPDATE svar AS LOGICAL.         
         IF svar THEN DO: 
            RUN bortavtaodat IN avtaodatapph (INPUT aonrvar,
                                              INPUT delnrvar,
                                              INPUT avtalaonrtemp.AVTID).
            DELETE avtaodattemp.
            RUN selnextprevrow_UI IN brwproc[18].
            RUN openbdynspec_UI IN brwproc[18].
            RUN lastselectdyn_UI IN brwproc[18]. 
         END.
      END.
      ELSE DO:
         MESSAGE "Det finns ingen händelse att ta bort."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         RETURN NO-APPLY.
      END.
   END.
   ELSE DO:
      MESSAGE "Det går ej att ta bort händelser då markeringen 'klar' är satt."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
   END.
END PROCEDURE.
PROCEDURE btnandhand_UI :
   DEFINE VARIABLE brec AS RECID NO-UNDO.
    IF TOG_KLAR:CHECKED = FALSE THEN DO:
      RUN selectfoc_UI (INPUT 18).
      IF AVAILABLE avtaodattemp THEN DO:
         {muswait.i}
         RUN NYAVTAODAT.W (INPUT avtaodattemp.AVTAODATREC, INPUT aonrvar, INPUT delnrvar, INPUT avtalaonrtemp.ORDN, INPUT avtalaonrtemp.AVTID, OUTPUT brec).
         IF musz = FALSE THEN DO:
            FIND FIRST avtaodattemp WHERE avtaodattemp.AVTAODATREC = brec
            NO-LOCK NO-ERROR.
            RUN setlastrowid_UI IN brwproc[18] (INPUT ROWID(avtaodattemp)).        
            RUN openbdynspec_UI IN brwproc[18].
            RUN lastselectdyn_UI IN brwproc[18]. 
         END.
         musz = FALSE.             
         {musarrow.i}
      END.
      ELSE DO:
         MESSAGE "Det finns ingen händelse att ändra."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         RETURN NO-APPLY.
      END.
   END.
   ELSE DO:
      MESSAGE "Det går ej att ändra händelser då markeringen 'klar' är satt"
      VIEW-AS ALERT-BOX TITLE "Meddelande".
   END.
END PROCEDURE.
PROCEDURE vcbrwhand_UI :
   RUN selectfoc_UI (INPUT 18).
END PROCEDURE.

PROCEDURE mbtnavt_UI :
   RUN btnvit_UI (INPUT MBTN_AVT).
   RUN frame_UI IN huvprogh (INPUT "TAVT").
   IF openqkoll[7] = FALSE THEN DO:
      openqkoll[7] = TRUE.
      RUN openbdynspec_UI IN brwproc[6].       
   END.
   RUN vcbrwavtal_UI.
END PROCEDURE.

PROCEDURE btngatilltp_UI :
   {AVBGOM2.I}
   RUN btnok_UI IN huvprogh (INPUT TRUE).
   FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
   IF musz = TRUE THEN DO:
      musz = FALSE.
      {AVBFRAM2.I}   
      RETURN.
   END.
   RUN AONRTIDP.W (INPUT aonrvar,INPUT delnrvar,OUTPUT musz).  
   {AVBFRAM2.I}
   IF musz = TRUE THEN musz = FALSE.
   ELSE DO:
      RUN aonrtidpersh IN nyttaoapph (INPUT aonrvar,INPUT delnrvar,OUTPUT TABLE aonrtidperstemp).
      RUN openbdynspec_UI IN brwproc[14]. 
   END.
   RETURN.
END PROCEDURE.

PROCEDURE btnhorand_UI :
   {AVBGOM2.I}
   RUN btnok_UI IN huvprogh (input  TRUE).
   FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
   IF musz = TRUE THEN DO:
      musz = FALSE.
      {AVBFRAM2.I}   
      RETURN.
   END.
   RUN AONRBEH.W (INPUT aonrvar,INPUT delnrvar).  
   {AVBFRAM2.I}
   RUN omrhamtaao_UI IN anvapph (INPUT uppaonrtemp.AONR,INPUT uppaonrtemp.DELNR,OUTPUT TABLE omranvandartemp).
   RUN openbdynspec_UI IN brwproc[20]. 
   
   RETURN.
END PROCEDURE.
PROCEDURE mbtnpers_UI :
   RUN btnvit_UI (INPUT MBTN_TIDPERS).
   RUN frame_UI IN huvprogh (INPUT "TPERS").
   FIND FIRST aonrtidperstemp NO-LOCK NO-ERROR.
   BRW_TIDPAONR:HIDDEN = FALSE.
   IF NOT AVAILABLE aonrtidperstemp THEN DO:
      RUN aonrtidpersh IN nyttaoapph (INPUT aonrvar,INPUT delnrvar,OUTPUT TABLE aonrtidperstemp).
      RUN openbdynspec_UI IN brwproc[14]. 
   END.
END PROCEDURE.  
PROCEDURE mbtnovr_UI :
   RUN btnvit_UI (INPUT MBTN_OVR).
   RUN frame_UI IN huvprogh (INPUT "OVR").    
   /*"Övrigt"*/         
   IF openqkoll[8] = FALSE THEN DO:
      openqkoll[8] = TRUE.   
      ASSIGN
      FILL-IN-FORDEL:HIDDEN = TRUE
      FILL-IN-MONTBER:HIDDEN = TRUE
      FILL-IN-PROJEKTLED:HIDDEN = TRUE
      FILL-IN-PROJEKTOR:HIDDEN = TRUE
      FILL-IN-DOKU:HIDDEN = TRUE.
      FIND FIRST anlaggtemp WHERE NO-LOCK NO-ERROR.
      IF NOT AVAILABLE anlaggtemp THEN DO: 
         ASSIGN
         FILL-IN_ANLNR:HIDDEN = TRUE
         BRW_ANL:HIDDEN = TRUE.
      END.   
      ELSE DO:
         FIND FIRST anlaggtemp WHERE anlaggtemp.ANLNR = FILL-IN_ANLNR:SCREEN-VALUE NO-LOCK NO-ERROR.
         IF AVAILABLE anlaggtemp THEN DO: 
            RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(anlaggtemp)).
            RUN lastselectdyn_UI IN brwproc[1]. 
         END.
      END.
      FIND FIRST priotemp WHERE NO-LOCK NO-ERROR.
      IF NOT AVAILABLE priotemp THEN DO:
         ASSIGN
         FILL-IN_PKODOV:HIDDEN  = TRUE
         BRW_PRIOOV:HIDDEN = TRUE. 
      END.
      ELSE DO:
         IF Guru.Konstanter:varforetypval[45] = 1 THEN FIND FIRST priotemp WHERE priotemp.OMRADE = omrtemp.OMRADE AND priotemp.PKOD = INTEGER(FILL-IN_PKODOV:SCREEN-VALUE) USE-INDEX PRI nO-LOCK NO-ERROR.
         ELSE FIND FIRST priotemp WHERE priotemp.PKOD = INTEGER(FILL-IN_PKODOV:SCREEN-VALUE) USE-INDEX PRI nO-LOCK NO-ERROR.
         IF AVAILABLE priotemp THEN DO: 
            RUN setlastrowid_UI IN brwproc[10] (INPUT ROWID(priotemp)).
            RUN lastselectdyn_UI IN brwproc[10]. 
            RUN setlastrowid_UI IN brwproc[21] (INPUT ROWID(priotemp)).
            RUN lastselectdyn_UI IN brwproc[21]. 
         END.
      END.
      FIND FIRST arbarttemp WHERE NO-LOCK NO-ERROR.
      IF NOT AVAILABLE arbarttemp THEN DO:
         ASSIGN
         FILL-IN_ARBARTKODOV:HIDDEN = TRUE
         BRW_ARBARTOV:HIDDEN = TRUE.          
      END.
      ELSE DO:
         FIND FIRST arbarttemp WHERE arbarttemp.ARBARTKOD = INTEGER(FILL-IN_ARBARTKODOV:SCREEN-VALUE) NO-LOCK NO-ERROR.
         IF AVAILABLE arbarttemp THEN DO:
            RUN setlastrowid_UI IN brwproc[16] (INPUT ROWID(arbarttemp)).
            RUN lastselectdyn_UI IN brwproc[16]. 
         END.
      END.
      IF Guru.Konstanter:varforetypval[2] = 1 THEN DO:
         ASSIGN      
         CMB_TRAK:HIDDEN = TRUE 
         FILL-IN_UTRYCKNING:HIDDEN = TRUE.
      END.
   END.
   FIND FIRST arbarttemp WHERE arbarttemp.ARBARTKOD = INTEGER(FILL-IN_ARBARTKODOV:SCREEN-VALUE) NO-LOCK NO-ERROR.
   IF AVAILABLE arbarttemp THEN DO:
      RUN setlastrowid_UI IN brwproc[16] (INPUT ROWID(arbarttemp)).
      RUN lastselectdyn_UI IN brwproc[16]. 
   END.
END PROCEDURE.
PROCEDURE vcbrwanv_UI :
   RUN selectfoc_UI (INPUT 17).
   IF AVAILABLE anvandartemp THEN FILL-IN_ANVANDARE:SCREEN-VALUE = anvandartemp.ANVANDARE.   
END PROCEDURE.
PROCEDURE mbtnfak_UI :
   RUN btnvit_UI (INPUT MBTN_FAK).
   RUN frame_UI IN huvprogh (INPUT "FAKT").   
   IF openqkoll[17] = FALSE THEN DO:
      openqkoll[17] = TRUE.
      EMPTY TEMP-TABLE anvandartemp NO-ERROR. 
      RUN laddaanv IN nyttaoapph (OUTPUT TABLE anvandartemp).
      RUN openbdynspec_UI IN brwproc[17]. 
      FIND FIRST anvandartemp WHERE anvandartemp.ANVANDARE = uppaonrtemp.ANVANDARE NO-LOCK NO-ERROR.
      IF uppaonrtemp.ANVANDARE = "" THEN ASSIGN uppaonrtemp.ANVANDARE = Guru.Konstanter:globanv. 
      IF uppaonrtemp.FAKTTYP = "" THEN DO:
         IF Guru.Konstanter:globforetag = "cELPA" {GLOBVES.I} THEN DO:
            FIND FIRST faktyptemp WHERE faktyptemp.FAKTTYP = "Löpande räkning" NO-ERROR.
            uppaonrtemp.FAKTTYP = faktyptemp.FAKTTYP.        
         END.
         ELSE IF Guru.Konstanter:globforetag = "SNAT" THEN DO:
            FIND FIRST faktyptemp WHERE faktyptemp.FAKTTYP = "Löpande räkning" NO-ERROR.
            uppaonrtemp.FAKTTYP = faktyptemp.FAKTTYP.        
         END.
         ELSE DO:      
            FIND FIRST faktyptemp WHERE faktyptemp.FAKTTYP = "Faktureras ej" NO-ERROR.
            uppaonrtemp.FAKTTYP = faktyptemp.FAKTTYP.        
         END.
      END.
      IF Guru.Konstanter:globforetag = "ELPA" THEN DO:
         FIND FIRST anvandartemp WHERE anvandartemp.ANVANDARE = uppaonrtemp.ANVANDARE
         USE-INDEX ANV NO-LOCK NO-ERROR.      
      END.
      ELSE DO:
         FIND FIRST anvandartemp WHERE anvandartemp.AV-LEVEL NE 0 AND anvandartemp.ANVANDARE = uppaonrtemp.ANVANDARE
         USE-INDEX ANV NO-LOCK NO-ERROR.       
      END.
   
      IF AVAILABLE anvandartemp  THEN DO:
         RUN setlastrowid_UI IN brwproc[17] (INPUT ROWID(anvandartemp)).
         RUN lastselectdyn_UI IN brwproc[17]. 
         FILL-IN_ANVANDARE:SCREEN-VALUE = anvandartemp.ANVANDARE.      
      END.                                               
      ELSE DO:
         APPLY "HOME" TO BRW_ANV.
      END.
   END.
   
   FILL-IN_FAKTNR:SCREEN-VALUE = STRING(uppaonrtemp.FAKTNR).
   IF uppaonrtemp.FAKTNR = 0 THEN do:
      ASSIGN
      FILL-IN_FAKTNR:HIDDEN = TRUE.
      RUN widgeth_UI IN huvprogh (INPUT 1).
   END.
   ELSE DO:
      ASSIGN      
      FILL-IN_FAKTNR:HIDDEN = FALSE.
      RUN widgeth_UI IN huvprogh (INPUT 2).
   END.
   ASSIGN 
   FILL-IN_INTERNT:SCREEN-VALUE = STRING(uppaonrtemp.BETNR) /*- uppaonrtemp.STARTVNR*/     
   FILL-IN_EXTERNT:SCREEN-VALUE = string(uppaonrtemp.STARTVNR).      

   IF Guru.Konstanter:varforetypval[3] >= 1 AND Guru.Konstanter:varforetypval[3] < 4 THEN DO:
   END.
   ELSE DO:
      FILL-IN_FAKTNR:HIDDEN = TRUE. 
   END.
   IF Guru.Konstanter:varforetypval[10] = 1 THEN DO:
      ASSIGN
      FILL-IN_INTERNT:HIDDEN = FALSE 
      FILL-IN_EXTERNT:HIDDEN = FALSE.
   END.
   ELSE DO:
      ASSIGN
      FILL-IN_EXTERNT:HIDDEN = TRUE                       
      FILL-IN_INTERNT:LABEL = "Planerat offertpris".
      FILL-IN_INTERNT:HIDDEN = FALSE.
   END.
   FIND FIRST faktyptemp WHERE faktyptemp.FAKTTYP = uppaonrtemp.FAKTTYP NO-ERROR.
   IF Guru.Konstanter:globforetag = "ELPA" {GLOBVES.I} THEN DO:
      IF NOT AVAILABLE faktyptemp THEN DO:        
         FIND FIRST faktyptemp WHERE faktyptemp.FAKTTYP = "Löpande räkning" NO-ERROR.        
      END.
   END.
   CMB_FAK:SCREEN-VALUE = faktyptemp.VIFAKTTYP.   
END PROCEDURE.


PROCEDURE mbtnkont_UI :
   RUN btnvit_UI (INPUT MBTN_KONT).
   RUN frame_UI IN huvprogh (INPUT "KONT").
   IF openqkoll[4] = FALSE THEN DO:
      openqkoll[4] = TRUE.
      APPLY "HOME" TO BRW_AONRKTO.
   END.
   IF INTEGER(FILL-IN_DELNR:SCREEN-VALUE) NE 0 THEN DO:
      IF Guru.Konstanter:varforetypval[12] = 0 THEN BTN_GATILLKONTO:HIDDEN = TRUE.
   END.
   IF Guru.Konstanter:globanv = QUOTER({setuser.I}) THEN BTN_GATILLKONTO:HIDDEN = FALSE.
   
   IF Guru.Konstanter:globforetag = "SNAT" OR Guru.Konstanter:globforetag = "ELPA" THEN DO:
      /*HÄR SELNÄT LENA*/                      
      IF Guru.Konstanter:varforetypval[45] = 1 THEN DO:
         ASSIGN
         BRW_ARBART:HIDDEN = TRUE 
         FILL-IN_ARBARTKOD:HIDDEN = TRUE
         BRW_PRIO:HIDDEN = FALSE
         FILL-IN_PKOD:HIDDEN = FALSE.
      END.   
      ELSE DO:
         ASSIGN
         BRW_ARBART:HIDDEN = FALSE 
         FILL-IN_ARBARTKOD:HIDDEN = FALSE
         BRW_PRIO:HIDDEN = TRUE 
         FILL-IN_PKOD:HIDDEN = TRUE.
      END.                  
      FIND FIRST arbarttemp NO-LOCK NO-ERROR.
      IF NOT AVAILABLE arbarttemp THEN DO:
         ASSIGN
         FILL-IN_ARBARTKOD:HIDDEN = TRUE
         BRW_ARBART:HIDDEN = TRUE.          
      END.
      ELSE DO:
         FIND FIRST arbarttemp WHERE arbarttemp.ARBARTKOD = INTEGER(FILL-IN_ARBARTKOD:SCREEN-VALUE) NO-LOCK NO-ERROR.
         IF AVAILABLE arbarttemp THEN DO:
            RUN setlastrowid_UI IN brwproc[5] (INPUT ROWID(arbarttemp)).
            RUN lastselectdyn_UI IN brwproc[5]. 
         END.
      END.      
      FIND FIRST priotemp NO-LOCK NO-ERROR.
      IF NOT AVAILABLE priotemp THEN DO:
         ASSIGN
         FILL-IN_PKOD:HIDDEN = TRUE
         BRW_PRIO:HIDDEN = TRUE.          
      END.
      ELSE DO:               
         RUN entrypkod_UI.         
      END.   
   END.
   ELSE DO:
      ASSIGN
      BRW_ARBART:HIDDEN = TRUE 
      FILL-IN_ARBARTKOD:HIDDEN = TRUE
      BRW_PRIO:HIDDEN = TRUE 
      FILL-IN_PKOD:HIDDEN = TRUE.
   END.
END PROCEDURE.   

PROCEDURE btngatillkont_UI :
   RUN btnok_UI IN huvprogh (input  FALSE).
   IF musz = TRUE THEN DO:
      musz = FALSE.
      {AVBFRAM2.I}   
      RETURN.
   END.
   FIND FIRST omrtemp WHERE omrtemp.NAMN = CMB_OMR:SCREEN-VALUE 
   NO-LOCK NO-ERROR.         
   FIND FIRST uppaonrtemp WHERE uppaonrtemp.AONR = aonrvar AND 
   uppaonrtemp.DELNR = delnrvar NO-LOCK NO-ERROR.
   IF Guru.Konstanter:globforetag = "SNAT"  THEN DO:
      /*HÄR SELNÄT*/
      IF Guru.Konstanter:varforetypval[45] = 0 THEN DO:
         IF AVAILABLE omrtemp AND omrtemp.OMRADE BEGINS "16" THEN DO:
            IF FILL-IN_ARBARTKOD:SCREEN-VALUE = "1" THEN DO:
               MESSAGE Guru.Konstanter:gartk " får inte vara 1."
               VIEW-AS ALERT-BOX.            
               musz = TRUE.
               RETURN NO-APPLY.            
            END.         
         END.
      END.   
      IF Guru.Konstanter:varforetypval[45] = 1  THEN DO:
         /*HÄR SELNÄT*/
         FIND FIRST priotemp WHERE priotemp.OMRADE = omrtemp.OMRADE NO-ERROR.
         IF AVAILABLE priotemp THEN DO:
            IF FILL-IN_PKOD:SCREEN-VALUE = "" OR FILL-IN_PKOD:SCREEN-VALUE = "?" OR FILL-IN_PKOD:SCREEN-VALUE = "0" THEN DO:                                    
               MESSAGE Guru.Konstanter:gpriok " är obligatorisk."
               VIEW-AS ALERT-BOX.            
               musz = TRUE.
               RETURN NO-APPLY.            
            END.
         END.   
      END.          
   END.
   IF Guru.Konstanter:globforetag = "elpa" THEN DO:               
      IF AVAILABLE omrtemp AND omrtemp.OMRADE BEGINS "10" THEN DO:
         IF FILL-IN_ARBARTKOD:SCREEN-VALUE = "1" THEN DO:
            MESSAGE Guru.Konstanter:gartk " får inte vara 1."
            VIEW-AS ALERT-BOX.            
            musz = TRUE.
            RETURN NO-APPLY.            
         END.
      END.         
   END.
   ASSIGN
   uppaonrtemp.ORT = FILL-IN_ORT:SCREEN-VALUE
   uppaonrtemp.OMRADE = omrtemp.OMRADE.
   RUN hamtaorec IN nyttaoapph (INPUT aonrvar,INPUT delnrvar, OUTPUT aonrrec).
   RUN AONRKONTU.W (INPUT 1,INPUT aonrvar,INPUT delnrvar,
                    INPUT FILL-IN_ORT:SCREEN-VALUE,INPUT ?,
                    INPUT RAD_FAST,INPUT omrtemp.OMRADE).
   RUN konthmt IN nyttaoapph (INPUT aonrvar,INPUT delnrvar,INPUT-OUTPUT TABLE aonrkonttemp).
   RUN openbdynspec_UI IN brwproc[2]. 
   musz = FALSE.   
END PROCEDURE.
PROCEDURE btnbortdag_UI :
   RUN selectfoc_UI (INPUT 15).
   IF AVAILABLE dagboktemp THEN DO:
      MESSAGE "Vill du ta bort dagboksanteckningen?" VIEW-AS ALERT-BOX
      QUESTION BUTTONS YES-NO TITLE "Ta bort?" UPDATE svardag AS LOGICAL.         
      IF svardag THEN DO:                          
         DELETE dagboktemp.
         RUN selnextprevrow_UI IN brwproc[15].
         
         RUN openbdynspec_UI IN brwproc[15]. 
         RUN lastselectdyn_UI IN brwproc[15].             
      END.
   END.    
END PROCEDURE.
PROCEDURE btnanddag_UI :
   RUN selectfoc_UI (INPUT 15).
   IF AVAILABLE dagboktemp THEN DO:
      EMPTY TEMP-TABLE edagboktemp NO-ERROR. 
      CREATE edagboktemp.
      BUFFER-COPY dagboktemp TO edagboktemp.
      RUN DAGBOKREG.W (OUTPUT musz,INPUT-OUTPUT TABLE edagboktemp).
      IF musz = FALSE THEN DO:
         FIND FIRST edagboktemp NO-ERROR.
         BUFFER-COPY edagboktemp TO dagboktemp.
         RUN setlastrowid_UI IN brwproc[15] (INPUT ROWID(dagboktemp)).         
         RUN openbdynspec_UI IN brwproc[15]. 
         RUN lastselectdyn_UI IN brwproc[15]. 
      END.
   END.
   EMPTY TEMP-TABLE edagboktemp NO-ERROR. 
   musz = FALSE.        
END PROCEDURE.
PROCEDURE btngatillanm_UI :
   RUN hamtaorec IN nyttaoapph (INPUT aonrvar,INPUT delnrvar, OUTPUT aonrrec).
   FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
   uppaonrtemp.ANM[1] = EDITOR_ANM:SCREEN-VALUE.
   RUN ANMARKN.W.
   RUN hamtanm IN nyttaoapph (INPUT aonrvar,INPUT delnrvar,OUTPUT editanm).
   FIND FIRST uppaonrtemp WHERE uppaonrtemp.AONR = aonrvar AND
   uppaonrtemp.DELNR = delnrvar NO-LOCK NO-ERROR.
   ASSIGN 
   FILL-IN_UTFARDAT:SCREEN-VALUE = uppaonrtemp.UTFARDAT
   EDITOR_ANM:SCREEN-VALUE = editanm.       
END PROCEDURE.
          
PROCEDURE mbtntidl_UI :
   RUN btnvit_UI (INPUT MBTN_TIDL).
   RUN frame_UI IN huvprogh (INPUT "TIDL").
   RUN selectfoc_UI (INPUT 3).
   RUN vcbrwaotid_UI.
   IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "GRAN" OR Guru.Konstanter:globforetag = "GKAL" OR 
   Guru.Konstanter:globforetag = "LULE" OR Guru.Konstanter:globforetag = "TRAS" OR Guru.Konstanter:globforetag = "PINN" THEN DO: 
      BTN_VISATIDL:HIDDEN = FALSE.
   END.
   ELSE BTN_VISATIDL:HIDDEN = TRUE.
   
END PROCEDURE.
PROCEDURE btngatilltidl_UI :
   RUN AOTIDLAG.W (INPUT aonrvar,INPUT delnrvar).
   FIND FIRST uppaonrtemp WHERE 
   uppaonrtemp.AONR = aonrvar AND
   uppaonrtemp.DELNR = delnrvar NO-LOCK NO-ERROR.
   FIND FIRST aotidslagtemp WHERE 
   aotidslagtemp.AONR = uppaonrtemp.AONR AND
   aotidslagtemp.DELNR = uppaonrtemp.DELNR NO-LOCK NO-ERROR.
   IF AVAILABLE aotidslagtemp THEN BTN_GATILLTIDL:LABEL = "Ändra".
   ELSE BTN_GATILL:LABEL = "Ny".
   RUN openbdynspec_UI IN brwproc[3]. 
   IF AVAILABLE aotidslagtemp THEN DO:
      IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "GRAN" OR Guru.Konstanter:globforetag = "GKAL" OR 
      Guru.Konstanter:globforetag = "LULE" OR Guru.Konstanter:globforetag = "TRAS" OR Guru.Konstanter:globforetag = "PINN" THEN DO:
         ASSIGN
         FILL-IN-DOK:HIDDEN = FALSE 
         FILL-IN-ANM:HIDDEN = FALSE
         BTN_KOPPTIDL:HIDDEN = FALSE
         BTN_ANMTIDL:HIDDEN = FALSE
         BTN_BESTTIDL:HIDDEN = FALSE
         BTN_VISATIDL:HIDDEN = FALSE.        
      END.
      ELSE IF Guru.Konstanter:globforetag = "PELLE" {GLOBVES.I} THEN DO:
         ASSIGN            
         FILL-IN-ANM:HIDDEN = FALSE            
         BTN_ANMTIDL:HIDDEN = FALSE            
         BTN_BESTTIDL:HIDDEN = FALSE.        
         ASSIGN
         BTN_KOPPTIDL:HIDDEN = TRUE     
         BTN_BORTATIDL:HIDDEN = TRUE 
         BTN_VISATIDL:HIDDEN = TRUE.       
      END.
      APPLY "HOME" TO BRW_AOTID.     
   END.
   ELSE DO:
      ASSIGN
      FILL-IN-DOK:HIDDEN = TRUE
      FILL-IN-ANM:HIDDEN = TRUE
      BTN_BDOCTIDTV:HIDDEN = TRUE
      BTN_KOPPTIDL:HIDDEN = TRUE
      BTN_ANMTIDL:HIDDEN = TRUE
      BTN_BESTTIDL:HIDDEN = TRUE
      BTN_VISATIDL:HIDDEN = TRUE.
   END.
END PROCEDURE.
PROCEDURE mut_UI :
   IF FILL-IN_UTRYCKNING:SCREEN-VALUE = "Ja" THEN ASSIGN FILL-IN_UTRYCKNING:SCREEN-VALUE = "Nej".
   ELSE IF FILL-IN_UTRYCKNING:SCREEN-VALUE = "Nej" THEN ASSIGN FILL-IN_UTRYCKNING:SCREEN-VALUE = "Ja".   
END PROCEDURE.
PROCEDURE larbov_UI :
   FILL-IN_ARBARTKOD:SCREEN-VALUE = FILL-IN_ARBARTKODOV:SCREEN-VALUE.
END PROCEDURE.                      
PROCEDURE larb_UI :
   FILL-IN_ARBARTKODOV:SCREEN-VALUE = FILL-IN_ARBARTKOD:SCREEN-VALUE.
END PROCEDURE.
PROCEDURE lpkod_UI :
   FILL-IN_PKODOV:SCREEN-VALUE = FILL-IN_PKOD:SCREEN-VALUE.
   RUN entrypkodov_UI.
END PROCEDURE.
PROCEDURE lpkodov_UI :
   FILL-IN_PKOD:SCREEN-VALUE = FILL-IN_PKODOV:SCREEN-VALUE.
   RUN entrypkodov_UI.
END PROCEDURE.

PROCEDURE entrypkodov_UI :
   IF Guru.Konstanter:varforetypval[45] = 1 THEN FIND FIRST priotemp WHERE priotemp.OMRADE = omrtemp.OMRADE AND priotemp.PKOD = INTEGER(FILL-IN_PKODOV:SCREEN-VALUE) USE-INDEX PRI nO-LOCK NO-ERROR.
   ELSE FIND FIRST priotemp WHERE priotemp.PKOD = INTEGER(FILL-IN_PKODOV:SCREEN-VALUE) USE-INDEX PRI nO-LOCK NO-ERROR.
   IF AVAILABLE priotemp THEN DO:
      RUN setlastrowid_UI IN brwproc[10] (INPUT ROWID(priotemp)).
      RUN lastselectdyn_UI IN brwproc[10]. 
      RUN setlastrowid_UI IN brwproc[21] (INPUT ROWID(priotemp)).
      RUN lastselectdyn_UI IN brwproc[21].
       
   END. 
END PROCEDURE.
PROCEDURE entrypkod_UI :
   IF Guru.Konstanter:varforetypval[45] = 1 THEN FIND FIRST priotemp WHERE priotemp.OMRADE = omrtemp.OMRADE AND priotemp.PKOD = INTEGER(FILL-IN_PKOD:SCREEN-VALUE) USE-INDEX PRI nO-LOCK NO-ERROR.
   ELSE FIND FIRST priotemp WHERE priotemp.PKOD = INTEGER(FILL-IN_PKOD:SCREEN-VALUE) USE-INDEX PRI nO-LOCK NO-ERROR.
   IF AVAILABLE priotemp THEN DO:
      RUN setlastrowid_UI IN brwproc[21] (INPUT ROWID(priotemp)).
      RUN lastselectdyn_UI IN brwproc[21]. 
   END. 
END PROCEDURE.
PROCEDURE entryarbov_UI :
   FIND FIRST arbarttemp WHERE arbarttemp.ARBARTKOD = INTEGER(FILL-IN_ARBARTKODOV:SCREEN-VALUE)
   USE-INDEX ARB NO-LOCK NO-ERROR.
   IF AVAILABLE arbarttemp  THEN DO:
      RUN setlastrowid_UI IN brwproc[16] (INPUT ROWID(arbarttemp)).
      RUN lastselectdyn_UI IN brwproc[16]. 
   END.
END PROCEDURE.
PROCEDURE entryarb_UI :
   FIND FIRST arbarttemp WHERE arbarttemp.ARBARTKOD = INTEGER(FILL-IN_ARBARTKOD:SCREEN-VALUE)
   USE-INDEX ARB NO-LOCK NO-ERROR.
   IF AVAILABLE arbarttemp  THEN DO:
      RUN setlastrowid_UI IN brwproc[5] (INPUT ROWID(arbarttemp)).
      RUN lastselectdyn_UI IN brwproc[5]. 
   END.
END PROCEDURE.
PROCEDURE entryanl_UI :
   FIND FIRST anlaggtemp WHERE anlaggtemp.ANLNR = FILL-IN_ANLNR:SCREEN-VALUE 
   USE-INDEX ANL NO-LOCK NO-ERROR.
   IF AVAILABLE anlaggtemp THEN DO:
      RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(anlaggtemp)).
      RUN lastselectdyn_UI IN brwproc[1]. 
   END.   
END PROCEDURE.
PROCEDURE cmbtrak_UI :
   FILL-IN_TRAKTAMENTE:SCREEN-VALUE = CMB_TRAK:SCREEN-VALUE.
END PROCEDURE.

PROCEDURE avb_UI :
   IF VALID-HANDLE(inkberh) THEN DO: 
      RUN InkAvs_UI IN inkberh.
      DELETE PROCEDURE inkberh NO-ERROR.
   END.
   IF VALID-HANDLE(exdatah) THEN DELETE PROCEDURE exdatah NO-ERROR.
   IF VALID-HANDLE(berapph) THEN DELETE PROCEDURE berapph NO-ERROR.
   IF VALID-HANDLE(kalkproch) THEN DELETE PROCEDURE kalkproch NO-ERROR.   
   IF VALID-HANDLE(KalkClasserStart) THEN DELETE PROCEDURE KalkClasserStart NO-ERROR.
   exdatah = ?.
   IF VALID-HANDLE(GPLClasserStart) THEN DELETE PROCEDURE GPLClasserStart NO-ERROR.
END PROCEDURE.

PROCEDURE btnok_UI :
   fbaonrvar = TRUE.
   RUN btnok_UI IN huvprogh (input  TRUE).
   FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
   fbaonrvar = FALSE.
   IF musz = TRUE THEN DO:
      musz = FALSE.
      RETURN NO-APPLY.
   END.
   IF Guru.Konstanter:varforetypchar[4] NE "" THEN DO:
      RUN omrperskoll_UI IN anvapph (INPUT Guru.Konstanter:globanv,INPUT uppaonrtemp.OMRADE,OUTPUT omrpersanvok).
      IF omrpersanvok = FALSE THEN RUN aonrbehorig_UI IN anvapph (INPUT Guru.Konstanter:globanv,INPUT uppaonrtemp.AONR,INPUT uppaonrtemp.DELNR).
   END.
   RUN avb_UI.
   RUN avsluta_UI IN huvprogh.
END PROCEDURE.
PROCEDURE btnnydag_UI :
   EMPTY TEMP-TABLE edagboktemp NO-ERROR. 
   CREATE edagboktemp.
   edagboktemp.DATUM = TODAY.
   RUN DAGBOKREG.W (OUTPUT  musz,INPUT-OUTPUT TABLE edagboktemp).
   IF musz = FALSE THEN DO:
      FIND FIRST edagboktemp NO-ERROR.
      CREATE dagboktemp.
      BUFFER-COPY edagboktemp TO dagboktemp.
      RUN setlastrowid_UI IN brwproc[15] (INPUT ROWID(dagboktemp)).         
      RUN openbdynspec_UI IN brwproc[15]. 
      RUN lastselectdyn_UI IN brwproc[15]. 
   END.
   EMPTY TEMP-TABLE edagboktemp NO-ERROR. 
   musz = FALSE.     
END PROCEDURE.
PROCEDURE btnnydok_UI :
   musz = FALSE.
   ordnvar = ?.
   idvar = ?.
   ASSIGN
   mappvarhj = uppaonrtemp.AONR + STRING(uppaonrtemp.DELNR) + "\".          
   mappvar = grundmappvar +  mappvarhj.                                         
   IF grundmappvar NE "" THEN DO:
      FILE-INFO:FILE-NAME = mappvar.     
      IF FILE-INFO:FULL-PATHNAME = ? THEN DO:
         MESSAGE "Mappen " mappvar " finns inte. Det är troligen ett sekretessproblem. Kontakta Elpool." VIEW-AS ALERT-BOX.
         RETURN.
      END.
   END.  
   ELSE DO:
      MESSAGE "Ingen mappen är upplagd! Kontakta Elpool." VIEW-AS ALERT-BOX.
      RETURN.
   END.
   
   RUN NYAVTALAO.W (INPUT uppaonrtemp.AONR,INPUT uppaonrtemp.DELNR,INPUT TRUE,
                          INPUT-OUTPUT ordnvar,INPUT-OUTPUT idvar,INPUT TRUE,
                          OUTPUT mappvar).
   
   IF musz = FALSE THEN DO:
      RUN openbdynspec_UI IN brwproc[6]. 
      FIND FIRST avtalaonrtemp WHERE avtalaonrtemp.AONR = uppaonrtemp.AONR AND 
      avtalaonrtemp.DELNR = uppaonrtemp.DELNR AND avtalaonrtemp.ORDN = ordnvar AND 
      avtalaonrtemp.AVTID = idvar AND avtalaonrtemp.LNK = TRUE NO-LOCK NO-ERROR.         
      IF AVAILABLE avtalaonrtemp THEN DO:
         RUN setlastrowid_UI IN brwproc[7] (INPUT ROWID(avtalaonrtemp)).         
      END.
      RUN openbdynspec_UI IN brwproc[7]. 
      RUN lastselectdyn_UI IN brwproc[7]. 
      IF AVAILABLE avtalaonrtemp THEN DO:
         IF avtalaonrtemp.FIL NE "" THEN DO:
            RUN OPENDOC.P (avtalaonrtemp.FIL,"","",NO).
         END.         
         ELSE DO:
            MESSAGE "Det finns ingen fil kopplad till dokumentet."
            VIEW-AS ALERT-BOX TITLE "Meddelande".
         END.
      END.
   END.
   ELSE musz = FALSE.
END PROCEDURE.
PROCEDURE btnnytv_UI :
   musz = FALSE.
   ordnvar = ?.
   idvar = ?.
   ASSIGN
   mappvarhj = uppaonrtemp.AONR + STRING(uppaonrtemp.DELNR) + "\".          
   mappvar = grundmappvar +  mappvarhj.                                         
   IF grundmappvar NE "" THEN DO:
      FILE-INFO:FILE-NAME = mappvar.
      IF FILE-INFO:FULL-PATHNAME = ? THEN DO:
         MESSAGE "Mappen " mappvar " finns inte. Det är troligen ett sekretessproblem. Kontakta Elpool." VIEW-AS ALERT-BOX.
         RETURN.
      END.
   END.      
   
   RUN NYAVTALAO.W (INPUT uppaonrtemp.AONR,INPUT uppaonrtemp.DELNR,INPUT TRUE,
                          INPUT-OUTPUT ordnvar,INPUT-OUTPUT idvar,INPUT FALSE,
                          OUTPUT mappvar).
   
   IF musz = FALSE THEN DO:
      RUN openbdynspec_UI IN brwproc[7]. 
      FIND FIRST avtalaonrtemp WHERE avtalaonrtemp.AONR = uppaonrtemp.AONR AND 
      avtalaonrtemp.DELNR = uppaonrtemp.DELNR AND avtalaonrtemp.ORDN = ordnvar AND 
      avtalaonrtemp.AVTID = idvar AND avtalaonrtemp.LNK = FALSE NO-LOCK NO-ERROR.                  
      RUN setlastrowid_UI IN brwproc[6] (INPUT ROWID(avtalaonrtemp)).
      RUN openbdynspec_UI IN brwproc[6]. 
      RUN lastselectdyn_UI IN brwproc[6].         
      IF avtalaonrtemp.FIL NE "" THEN DO:         
         RUN OPENDOC.P (avtalaonrtemp.FIL,"","",NO).
      END.         
      ELSE DO:
         MESSAGE "Det finns ingen fil kopplad till Tillståndet/Avtalet."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
      END.
   END.
   ELSE musz = FALSE.    
END PROCEDURE.

PROCEDURE btnmapp_UI :
   
   ASSIGN
   mappvarhj = uppaonrtemp.AONR + STRING(uppaonrtemp.DELNR) + "\".          
   mappvar = grundmappvar +  mappvarhj.
   
   RUN VisaDokMoln_UI (INPUT-OUTPUT mappvar).   
   RUN OPENDOC.P (mappvar,"","",NO). 
END PROCEDURE.
PROCEDURE btnkopp2_UI :   
  {muswait.i}     
   RUN selectfoc_UI (INPUT 3).   
   FIND FIRST aotidkopp WHERE aotidkopp.AONR = aotidslagtemp.AONR AND
   aotidkopp.DELNR = aotidslagtemp.DELNR AND aotidkopp.IDTIDLAG = aotidslagtemp.IDTLAG
   USE-INDEX AONR NO-LOCK NO-ERROR.
   EMPTY TEMP-TABLE eaotidkopp NO-ERROR. 
   EMPTY TEMP-TABLE eaotidslagtemp NO-ERROR. 
   
   IF AVAILABLE aotidkopp THEN DO:
      CREATE eaotidkopp.
      BUFFER-COPY aotidkopp TO eaotidkopp.
   END.
   CREATE eaotidslagtemp.
   BUFFER-COPY aotidslagtemp TO eaotidslagtemp.
   RUN TIDLKOPDOK.W (INPUT-OUTPUT TABLE eaotidkopp, INPUT-OUTPUT TABLE eaotidslagtemp, INPUT 2).
   FIND FIRST eaotidslagtemp NO-LOCK NO-ERROR.
   IF AVAILABLE eaotidslagtemp THEN DO:
      BUFFER-COPY eaotidslagtemp TO aotidslagtemp.
      FIND FIRST eaotidkopp NO-LOCK NO-ERROR.
      IF AVAILABLE eaotidkopp THEN DO:
         FIND FIRST aotidkopp WHERE aotidkopp.AONR = aotidslagtemp.AONR AND
         aotidkopp.DELNR = aotidslagtemp.DELNR AND aotidkopp.IDTIDLAG = aotidslagtemp.IDTLAG
         USE-INDEX AONR NO-LOCK NO-ERROR.
         IF NOT AVAILABLE aotidkopp THEN CREATE aotidkopp.
         BUFFER-COPY eaotidkopp TO aotidkopp.    
      END.
      ELSE DO:
         FIND FIRST aotidkopp WHERE aotidkopp.AONR = aotidslagtemp.AONR AND
         aotidkopp.DELNR = aotidslagtemp.DELNR AND aotidkopp.IDTIDLAG = aotidslagtemp.IDTLAG
         USE-INDEX AONR NO-LOCK NO-ERROR.
         IF AVAILABLE aotidkopp THEN DELETE aotidkopp.
      END.
   END.
   EMPTY TEMP-TABLE eaotidkopp NO-ERROR. 
   EMPTY TEMP-TABLE eaotidslagtemp NO-ERROR. 
   IF AVAILABLE aotidkopp THEN DO:
      IF aotidkopp.ANMARK NE "" THEN RUN logform_UI (INPUT FILL-IN-ANM,INPUT TRUE, OUTPUT logformhj).
      ELSE RUN logform_UI (INPUT FILL-IN-ANM,INPUT FALSE, OUTPUT logformhj).
      FILL-IN-ANM:SCREEN-VALUE = logformhj.      
   END.
   ELSE DO:
      RUN logform_UI (INPUT FILL-IN-ANM,INPUT FALSE, OUTPUT logformhj).
   END. 
   {musarrow.i}     
END PROCEDURE.

PROCEDURE btnkopp3_UI :
   RUN selectfoc_UI (INPUT 3).   
   IF aotidslagtemp.IDTIDLAG = "MBESTÄLLT" OR aotidslagtemp.IDTIDLAG = "Materiel" THEN. 
   ELSE DO:
      FIND FIRST aotidslagtemp  WHERE aotidslagtemp.IDTIDLAG = "MBESTÄLLT" NO-LOCK NO-ERROR.  
      IF NOT AVAILABLE aotidslagtemp THEN DO:
         FIND FIRST aotidslagtemp  WHERE aotidslagtemp.IDTIDLAG = "Materiel" NO-LOCK NO-ERROR.
         IF NOT AVAILABLE aotidslagtemp THEN DO:
            MESSAGE "Det finns inget " Guru.Konstanter:gtidlk " med beställningsstatus"
            VIEW-AS ALERT-BOX.
            RETURN.
         END.
      END.
   END.
   FIND FIRST aotidkopp WHERE aotidkopp.AONR = aotidslagtemp.AONR AND
   aotidkopp.DELNR = aotidslagtemp.DELNR AND aotidkopp.IDTIDLAG = aotidslagtemp.IDTLAG
   USE-INDEX AONR NO-LOCK NO-ERROR.
   EMPTY TEMP-TABLE eaotidkopp NO-ERROR. 
   EMPTY TEMP-TABLE eaotidslagtemp NO-ERROR. 
   {muswait.i}  
   IF AVAILABLE aotidkopp THEN DO:
      CREATE eaotidkopp.
      BUFFER-COPY aotidkopp TO eaotidkopp.
   END.
   CREATE eaotidslagtemp.
   BUFFER-COPY aotidslagtemp TO eaotidslagtemp.
   RUN TIDLKOPDOK.W (INPUT-OUTPUT TABLE eaotidkopp, INPUT-OUTPUT TABLE eaotidslagtemp, INPUT 2).
   FIND FIRST eaotidslagtemp NO-LOCK NO-ERROR.
   IF AVAILABLE eaotidslagtemp THEN DO:
      BUFFER-COPY eaotidslagtemp TO aotidslagtemp.
      FIND FIRST eaotidkopp NO-LOCK NO-ERROR.
      IF AVAILABLE eaotidkopp THEN DO:
         FIND FIRST aotidkopp WHERE aotidkopp.AONR = aotidslagtemp.AONR AND
         aotidkopp.DELNR = aotidslagtemp.DELNR AND aotidkopp.IDTIDLAG = aotidslagtemp.IDTLAG
         USE-INDEX AONR NO-LOCK NO-ERROR.
         IF NOT AVAILABLE aotidkopp THEN CREATE aotidkopp.
         BUFFER-COPY eaotidkopp TO aotidkopp.    
      END.
      ELSE DO:
         FIND FIRST aotidkopp WHERE aotidkopp.AONR = aotidslagtemp.AONR AND
         aotidkopp.DELNR = aotidslagtemp.DELNR AND aotidkopp.IDTIDLAG = aotidslagtemp.IDTLAG
         USE-INDEX AONR NO-LOCK NO-ERROR.
         IF AVAILABLE aotidkopp THEN DELETE aotidkopp.
      END.
   END.
   EMPTY TEMP-TABLE eaotidkopp NO-ERROR. 
   EMPTY TEMP-TABLE eaotidslagtemp NO-ERROR. 
   IF AVAILABLE aotidkopp THEN DO:
      IF aotidkopp.ANMARK NE "" THEN RUN logform_UI (INPUT FILL-IN-ANM,INPUT TRUE, OUTPUT logformhj).
      ELSE RUN logform_UI (INPUT FILL-IN-ANM,INPUT FALSE, OUTPUT logformhj).
      FILL-IN-ANM:SCREEN-VALUE = logformhj.            
   END.
   ELSE DO:
      RUN logform_UI (INPUT FILL-IN-ANM,INPUT FALSE, OUTPUT logformhj).
      FILL-IN-ANM:SCREEN-VALUE = logformhj.      
   END.     
END PROCEDURE.

PROCEDURE btnkopp_UI :
  {muswait.i} 
   RUN selectfoc_UI (INPUT 3).   
   FIND FIRST aotidkopp WHERE aotidkopp.AONR = aotidslagtemp.AONR AND
   aotidkopp.DELNR = aotidslagtemp.DELNR AND aotidkopp.IDTIDLAG = aotidslagtemp.IDTLAG
   USE-INDEX AONR NO-LOCK NO-ERROR.
   EMPTY TEMP-TABLE eaotidkopp NO-ERROR. 
   EMPTY TEMP-TABLE eaotidslagtemp NO-ERROR. 
   
   IF AVAILABLE aotidkopp THEN DO:
      CREATE eaotidkopp.
      BUFFER-COPY aotidkopp TO eaotidkopp.
   END.
   CREATE eaotidslagtemp.
   BUFFER-COPY aotidslagtemp TO eaotidslagtemp.
   RUN TIDLKOPDOK.W (INPUT-OUTPUT TABLE eaotidkopp,INPUT-OUTPUT TABLE eaotidslagtemp, INPUT 1).
   FIND FIRST eaotidslagtemp NO-LOCK NO-ERROR.
   IF AVAILABLE eaotidslagtemp THEN DO:
      BUFFER-COPY eaotidslagtemp TO aotidslagtemp.
      FIND FIRST eaotidkopp NO-LOCK NO-ERROR.
      IF AVAILABLE eaotidkopp THEN DO:
         FIND FIRST aotidkopp WHERE aotidkopp.AONR = aotidslagtemp.AONR AND
         aotidkopp.DELNR = aotidslagtemp.DELNR AND aotidkopp.IDTIDLAG = aotidslagtemp.IDTLAG
         USE-INDEX AONR NO-LOCK NO-ERROR.
         IF NOT AVAILABLE aotidkopp THEN CREATE aotidkopp.
         BUFFER-COPY eaotidkopp TO aotidkopp.    
      END.
      ELSE DO:
         FIND FIRST aotidkopp WHERE aotidkopp.AONR = aotidslagtemp.AONR AND
         aotidkopp.DELNR = aotidslagtemp.DELNR AND aotidkopp.IDTIDLAG = aotidslagtemp.IDTLAG
         USE-INDEX AONR NO-LOCK NO-ERROR.
         IF AVAILABLE aotidkopp THEN DELETE aotidkopp.
      END.
   END.
   EMPTY TEMP-TABLE eaotidkopp NO-ERROR. 
   EMPTY TEMP-TABLE eaotidslagtemp NO-ERROR. 
   FIND FIRST aotidkopp WHERE aotidkopp.AONR = aotidslagtemp.AONR AND
   aotidkopp.DELNR = aotidslagtemp.DELNR AND aotidkopp.IDTIDLAG = aotidslagtemp.IDTLAG
   USE-INDEX AONR NO-LOCK NO-ERROR.
   IF AVAILABLE aotidkopp THEN DO:      
      IF aotidkopp.FILNAMN NE "" THEN DO:
         RUN logform_UI (INPUT FILL-IN-DOK,INPUT TRUE, OUTPUT logformhj).
         FILL-IN-DOK:SCREEN-VALUE = logformhj.      
      END.
      ELSE DO:
         RUN logform_UI (INPUT FILL-IN-DOK,INPUT FALSE, OUTPUT logformhj).
         FILL-IN-DOK:SCREEN-VALUE = logformhj.      
      END.
   END.
   ELSE DO:
      RUN logform_UI (INPUT FILL-IN-DOK,INPUT FALSE, OUTPUT logformhj).
      FILL-IN-DOK:SCREEN-VALUE = logformhj.      
   END.
   IF AVAILABLE aotidkopp THEN DO:
      IF aotidkopp.FILNAMN = "" THEN BTN_KOPPTIDL:HIDDEN = FALSE.   
      ELSE BTN_KOPPTIDL:HIDDEN = TRUE.
   END.
   ELSE BTN_KOPPTIDL:HIDDEN = FALSE.
   {musarrow.i}   
END PROCEDURE.


PROCEDURE btnhand_UI :
   FIND FIRST avtalaonrtemp WHERE avtalaonrtemp.AONR = uppaonrtemp.AONR
   AND avtalaonrtemp.DELNR = uppaonrtemp.DELNR AND avtalaonrtemp.LNK = FALSE NO-LOCK NO-ERROR.
   IF AVAILABLE avtalaonrtemp THEN DO:   
      {muswait.i}
      RUN selectfoc_UI (INPUT 6).   
      RUN setlastrowid_UI IN brwproc[6] (INPUT ROWID(avtalaonrtemp)).         
      musz = FALSE.
      RUN AVTAODATUM.W (INPUT uppaonrtemp.AONR, INPUT uppaonrtemp.DELNR, INPUT avtalaonrtemp.ORDN, INPUT avtalaonrtemp.AVTID).      
      RUN openbdynspec_UI IN brwproc[6]. 
      RUN lastselectdyn_UI IN brwproc[6].            
      {musarrow.i}
   END.
   ELSE DO:
      MESSAGE "Det finns inget tillstånd/avtal att koppla händelser till."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN.
   END.
END PROCEDURE.


PROCEDURE btnborttv_UI :
   DEFINE VARIABLE filnamnvar AS CHARACTER NO-UNDO.
   RUN selectfoc_UI (INPUT 6).   
   IF AVAILABLE avtalaonrtemp THEN DO:         
      MESSAGE "Vill du ta bort Tillstånd/Avtal: " + avtalaonrtemp.BEN + "?" VIEW-AS ALERT-BOX
      QUESTION BUTTONS YES-NO TITLE "Ta bort?" UPDATE svar AS LOGICAL.         
      IF svar THEN DO: 
         RUN bortavtal IN nyttaoapph (INPUT 1,INPUT avtalaonrtemp.AVTID,
                                      INPUT avtalaonrtemp.AONR,
                                      INPUT avtalaonrtemp.DELNR,
                                      INPUT avtalaonrtemp.ORDN). 
         MESSAGE "Vill du ta bort filen som är kopplad till Tillstånd/Avtal: " + avtalaonrtemp.BEN + "?" VIEW-AS ALERT-BOX
         QUESTION BUTTONS YES-NO TITLE "Ta bort fil?" UPDATE svar.
         IF svar THEN DO:
            RUN bortfilnamn IN nyttaoapph (INPUT avtalaonrtemp.AVTID,
                                             INPUT avtalaonrtemp.AONR,
                                             INPUT avtalaonrtemp.DELNR,
                                             INPUT avtalaonrtemp.ORDN,
                                             OUTPUT filnamnvar).
            RUN bortfil IN nyttaoejapph  (INPUT filnamnvar).                  
         END.
                        
         RUN bortavtal IN nyttaoapph (INPUT 2,INPUT avtalaonrtemp.AVTID,
                                      INPUT avtalaonrtemp.AONR,
                                      INPUT avtalaonrtemp.DELNR,
                                      INPUT avtalaonrtemp.ORDN).
         DELETE avtalaonrtemp.
         RUN selnextprevrow_UI IN brwproc[6].
         
         RUN openbdynspec_UI IN brwproc[6]. 
         RUN lastselectdyn_UI IN brwproc[6]. 
      END.      
   END.
   ELSE DO:
      MESSAGE "Det finns inget tillstånd/avtal att ta bort."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN.
   END.   
END PROCEDURE.

PROCEDURE btnbortdok_UI :
   DEFINE VARIABLE filnamnvar AS CHARACTER NO-UNDO.
   RUN selectfoc_UI (INPUT 7).   
   IF AVAILABLE avtalaonrtemp THEN DO:         
      MESSAGE "Vill du ta bort kopplingen till: " + avtalaonrtemp.BEN + "?" VIEW-AS ALERT-BOX
      QUESTION BUTTONS YES-NO TITLE "Ta bort?" UPDATE svar AS LOGICAL.         
      IF svar THEN DO:                          
         MESSAGE "Vill du även ta bort filen som är kopplad till dokument: " + avtalaonrtemp.BEN + "?" VIEW-AS ALERT-BOX
         QUESTION BUTTONS YES-NO TITLE "Ta bort fil?" UPDATE svar.
         IF svar THEN DO:
            RUN bortfilnamn IN nyttaoapph (INPUT avtalaonrtemp.AVTID,
                                             INPUT avtalaonrtemp.AONR,
                                             INPUT avtalaonrtemp.DELNR,
                                             INPUT avtalaonrtemp.ORDN,
                                             OUTPUT filnamnvar).
            RUN bortfil IN nyttaoejapph  (INPUT filnamnvar).                  
         END.
         RUN bortavtal IN nyttaoapph (INPUT 2,INPUT avtalaonrtemp.AVTID,
                                      INPUT avtalaonrtemp.AONR,
                                      INPUT avtalaonrtemp.DELNR,
                                      INPUT avtalaonrtemp.ORDN).
         DELETE avtalaonrtemp.
         RUN selnextprevrow_UI IN brwproc[7].
         RUN openbdynspec_UI IN brwproc[7]. 
         RUN lastselectdyn_UI IN brwproc[7].             
      END.      
   END.
   ELSE DO:
      MESSAGE "Det finns inget dokument att ta bort."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN.
   END.
END PROCEDURE.

PROCEDURE btnkoppbortl_UI :  
   RUN selectfoc_UI (INPUT 3).   
   IF NOT AVAILABLE aotidslagtemp THEN RETURN.
   FIND FIRST aotidkopp WHERE aotidkopp.AONR = aotidslagtemp.AONR AND
   aotidkopp.DELNR = aotidslagtemp.DELNR AND aotidkopp.IDTIDLAG = aotidslagtemp.IDTLAG
   USE-INDEX AONR NO-LOCK NO-ERROR.
   IF NOT AVAILABLE aotidkopp THEN DO:
      MESSAGE "Det finns inget dokument kopplat!" VIEW-AS ALERT-BOX.
      RETURN.
   END.
   MESSAGE "Vill du att ta bort kopplingen till dokumentet?"
   VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE doc2 AS LOGICAL.
   CASE doc2:
      WHEN TRUE THEN DO:
         musz = musz.
      END.
      WHEN FALSE THEN DO:
         musz = TRUE.
         RETURN.
      END.
   END CASE.
                                                 
   RUN bortdock IN nyttaoapph (INPUT FILL-IN_AONR:SCREEN-VALUE,INPUT INTEGER(FILL-IN_DELNR:SCREEN-VALUE),INPUT aotidslagtemp.IDTLAG).
   IF AVAILABLE aotidkopp THEN DO:
      IF AVAILABLE aotidkopp THEN aotidkopp.FILNAMN = "".
      IF aotidkopp.ANMARK = "" THEN DELETE aotidkopp.      
   END.
   RUN logform_UI (INPUT FILL-IN-DOK,INPUT FALSE, OUTPUT logformhj).
   FILL-IN-DOK:SCREEN-VALUE = logformhj.      
   BTN_KOPPTIDL:HIDDEN = FALSE.      
   {musarrow.i}   

END PROCEDURE.

PROCEDURE btnvisdag_UI :
   {AVBGOM2.I}  
   RUN btnok_UI IN huvprogh (input  TRUE).
   IF musz = TRUE THEN DO:
      musz = FALSE.
      {AVBFRAM2.I}   
      RETURN.
   END.
   RUN VISDAGBOK.W (INPUT FILL-IN_AONR:SCREEN-VALUE,INPUT INTEGER(FILL-IN_DELNR:SCREEN-VALUE)).
   {AVBFRAM2.I}  
   {musarrow.i}   
END PROCEDURE.
PROCEDURE btnbortadag_UI :
   RUN selectfoc_UI (INPUT 15).   
   IF AVAILABLE dagboktemp THEN DO:
      MESSAGE "Vill du ta bort dagboksanteckningen?" VIEW-AS ALERT-BOX
      QUESTION BUTTONS YES-NO TITLE "Ta bort?" UPDATE svardag AS LOGICAL.         
      IF svardag THEN DO:                          
         DELETE dagboktemp.
         RUN selnextprevrow_UI IN brwproc[15].
         RUN openbdynspec_UI IN brwproc[15]. 
         RUN lastselectdyn_UI IN brwproc[15].             
      END.
   END.         
END PROCEDURE.

PROCEDURE vcbrwprioov_UI :
   RUN selectfoc_UI (INPUT 10).   
   IF AVAILABLE priotemp THEN DO:
      ASSIGN FILL-IN_PKOD:SCREEN-VALUE = STRING(priotemp.PKOD). 
      ASSIGN FILL-IN_PKODOV:SCREEN-VALUE = STRING(priotemp.PKOD).
   END.      
END PROCEDURE.
PROCEDURE vcbrwprio_UI :
      
   RUN selectfoc_UI (INPUT 21).  
   IF AVAILABLE priotemp THEN DO:
      ASSIGN FILL-IN_PKOD:SCREEN-VALUE = STRING(priotemp.PKOD).
      ASSIGN FILL-IN_PKODOV:SCREEN-VALUE = STRING(priotemp.PKOD).
   END.   
END PROCEDURE.
PROCEDURE btnandadag_UI :
   IF AVAILABLE dagboktemp THEN DO:
      EMPTY TEMP-TABLE edagboktemp NO-ERROR. 
      CREATE edagboktemp.
      BUFFER-COPY dagboktemp TO edagboktemp.
      RUN DAGBOKREG.W (OUTPUT musz,INPUT-OUTPUT TABLE edagboktemp).
      IF musz = FALSE THEN DO:
         FIND FIRST edagboktemp NO-ERROR.
         BUFFER-COPY edagboktemp TO dagboktemp.
         RUN setlastrowid_UI IN brwproc[15] (INPUT ROWID(dagboktemp)).         
         RUN openbdynspec_UI IN brwproc[15]. 
         RUN lastselectdyn_UI IN brwproc[15]. 
      END.
   END.
   EMPTY TEMP-TABLE edagboktemp NO-ERROR. 
   musz = FALSE.     
END PROCEDURE.
PROCEDURE btnandadok_UI :
   FIND FIRST avtalaonrtemp WHERE avtalaonrtemp.AONR = uppaonrtemp.AONR
   AND avtalaonrtemp.DELNR = uppaonrtemp.DELNR AND avtalaonrtemp.LNK = TRUE
   NO-LOCK NO-ERROR.
   IF AVAILABLE avtalaonrtemp THEN DO:                     
      RUN selectfoc_UI (INPUT 7).   
      IF SUBSTRING(avtalaonrtemp.AVTAL,31,7) = "" THEN DO: 
         ordnvar = avtalaonrtemp.ORDN.
         idvar = avtalaonrtemp.AVTID.
         musz = FALSE.
         ASSIGN
         mappvarhj = avtalaonrtemp.AONR + STRING(avtalaonrtemp.DELNR) + "\".          
         mappvar = grundmappvar +  mappvarhj.                                         
         IF grundmappvar NE "" THEN DO:
            FILE-INFO:FILE-NAME = mappvar.
            IF FILE-INFO:FULL-PATHNAME = ? THEN DO:
               MESSAGE "Mappen " mappvar " finns inte. Det är troligen ett sekretessproblem. Kontakta Elpool." VIEW-AS ALERT-BOX.
               RETURN.
            END.
         END.
         
         RUN NYAVTALAO.W (INPUT avtalaonrtemp.AONR,INPUT avtalaonrtemp.DELNR,INPUT FALSE,
                          INPUT-OUTPUT ordnvar,INPUT-OUTPUT idvar,INPUT TRUE,
                          OUTPUT mappvar).
         
         IF musz = FALSE THEN DO: 
            RUN openbdynspec_UI IN brwproc[6]. 
            FIND FIRST avtalaonrtemp WHERE avtalaonrtemp.AONR = uppaonrtemp.AONR AND 
            avtalaonrtemp.DELNR = uppaonrtemp.DELNR AND avtalaonrtemp.AVTID = idvar AND 
            avtalaonrtemp.ORDN = ordnvar AND avtalaonrtemp.LNK = TRUE NO-LOCK NO-ERROR. 
            
            RUN setlastrowid_UI IN brwproc[7] (INPUT ROWID(avtalaonrtemp)).         
            RUN openbdynspec_UI IN brwproc[7]. 
            RUN lastselectdyn_UI IN brwproc[7].                
         END.
         ELSE musz = FALSE.       
      END.
      ELSE DO:
         MESSAGE "Dokument är inaktivt och går ej att ändra."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         RETURN.
      END.
   END.
   ELSE DO:
      MESSAGE "Det finns inget dokument att ändra."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN.
   END.
END PROCEDURE.

PROCEDURE btnandtv_UI :
   FIND FIRST avtalaonrtemp WHERE avtalaonrtemp.AONR = uppaonrtemp.AONR
   AND avtalaonrtemp.DELNR = uppaonrtemp.DELNR AND avtalaonrtemp.LNK = FALSE 
   NO-LOCK NO-ERROR.
   IF AVAILABLE avtalaonrtemp THEN DO:            
      RUN selectfoc_UI (INPUT 6).   
      IF SUBSTRING(avtalaonrtemp.AVTAL,31,7) = "" THEN DO: 
         ordnvar = avtalaonrtemp.ORDN.
         idvar = avtalaonrtemp.AVTID.
         musz = FALSE.
      
         ASSIGN
         mappvarhj = avtalaonrtemp.AONR + STRING(avtalaonrtemp.DELNR) + "\".          
         mappvar = grundmappvar +  mappvarhj.                                         
         IF grundmappvar NE "" THEN DO:
            FILE-INFO:FILE-NAME = mappvar.
            IF FILE-INFO:FULL-PATHNAME = ? THEN DO:
               MESSAGE "Mappen " mappvar " finns inte. Det är troligen ett sekretessproblem. Kontakta Elpool." VIEW-AS ALERT-BOX.
               RETURN.
            END.
         END.      
         RUN NYAVTALAO.W (INPUT avtalaonrtemp.AONR,INPUT avtalaonrtemp.DELNR,INPUT FALSE,
                          INPUT-OUTPUT ordnvar,INPUT-OUTPUT idvar,INPUT FALSE,
                          OUTPUT mappvar).
         
         IF musz = FALSE THEN DO: 
            RUN openbdynspec_UI IN brwproc[7]. 
            FIND FIRST avtalaonrtemp WHERE avtalaonrtemp.AONR = uppaonrtemp.AONR AND 
            avtalaonrtemp.DELNR = uppaonrtemp.DELNR AND avtalaonrtemp.AVTID = idvar AND 
            avtalaonrtemp.ORDN = ordnvar AND avtalaonrtemp.LNK = FALSE NO-LOCK NO-ERROR. 
            RUN setlastrowid_UI IN brwproc[6] (INPUT ROWID(avtalaonrtemp)).
            RUN openbdynspec_UI IN brwproc[6]. 
            RUN lastselectdyn_UI IN brwproc[6]. 
         END.
         ELSE musz = FALSE.   
      END.
      ELSE DO:
         MESSAGE "Detta tillstånd/avtal ligger inaktivt och går ej att ändra."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         RETURN.
      END.
   END.
   ELSE DO:
      MESSAGE "Det finns inget tillstånd/avtal att ändra."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN.
   END.   
END PROCEDURE.
PROCEDURE mrseditoranm_UI :
   DEFINE VARIABLE ecopy AS CHARACTER NO-UNDO.
   DEFINE VARIABLE etest AS LOGICAL NO-UNDO.
   IF EDITOR_ANM:SELECTION-TEXT = "" THEN.
   ELSE RUN OPENDOC.P (EDITOR_ANM:SELECTION-TEXT,"","",NO).
END PROCEDURE.
PROCEDURE mdeditoranm_UI :
   DEFINE VARIABLE ecopy AS CHARACTER NO-UNDO.
   DEFINE VARIABLE ecopystart AS CHARACTER NO-UNDO.
   DEFINE VARIABLE ecopyindex AS CHARACTER NO-UNDO.
   DEFINE VARIABLE eline AS INTEGER NO-UNDO.
   DEFINE VARIABLE ewidth AS INTEGER NO-UNDO.
   ecopystart = EDITOR_ANM:SELECTION-TEXT.
   
  
   IF EDITOR_ANM:LENGTH > EDITOR_ANM:INNER-CHARS THEN ewidth = EDITOR_ANM:LENGTH. 
   ELSE ewidth = EDITOR_ANM:INNER-CHARS.
   
   eline = EDITOR_ANM:CURSOR-LINE.
   EDITOR_ANM:SET-SELECTION(EDITOR_ANM:CONVERT-TO-OFFSET(eline, 1),EDITOR_ANM:CONVERT-TO-OFFSET(eline, ewidth)).
   ecopy = EDITOR_ANM:SELECTION-TEXT.
   IF ecopy BEGINS ecopystart THEN. 
   ELSE DO:
       ecopy = ecopystart + ecopy.
   END.
   IF INDEX(ecopy,CHR(10)) > 0 THEN DO:
       ecopyindex = SUBSTRING(ecopy,1,INDEX(ecopy,CHR(10))).
       ecopy = ecopyindex.
   END.
   EDITOR_ANM:SEARCH(ecopy,16).  
  
   
   ecopy = TRIM(ecopy).
   IF ecopy = "" THEN .
   ELSE RUN OPENDOC.P (ecopy,"","",NO).
  

  
   
END PROCEDURE.

PROCEDURE mbrwdagbok_UI :
   APPLY "CHOOSE" TO BTN_ANDDAGBOK.
END PROCEDURE.
PROCEDURE vcbrwdagbok_UI :
   RUN selectfoc_UI (INPUT 15).   
END PROCEDURE.
PROCEDURE btnvisad_UI :
   FIND FIRST aotidkopp WHERE aotidkopp.AONR = aotidslagtemp.AONR AND
   aotidkopp.DELNR = aotidslagtemp.DELNR AND aotidkopp.IDTIDLAG = aotidslagtemp.IDTLAG
   NO-LOCK NO-ERROR.
   IF AVAILABLE aotidkopp THEN DO:
      IF aotidkopp.FILNAMN NE "" THEN DO:
         RUN OPENDOC.P (aotidkopp.FILNAMN,"","",NO).
      END.
      ELSE DO:
         MESSAGE "Det finns inget dokument kopplat till " LC(Guru.Konstanter:gtidlk) "." 
         VIEW-AS ALERT-BOX TITLE "Meddelande".
      END.      
   END.
   ELSE DO:
      MESSAGE "Det finns inget dokument kopplat till " LC(Guru.Konstanter:gtidlk) "."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
   END.
END PROCEDURE.
PROCEDURE VisaDokMoln_UI :
   DEFINE INPUT-OUTPUT  PARAMETER mappvarmoln AS CHARACTER NO-UNDO.
   DEFINE VARIABLE bsok AS CHARACTER NO-UNDO.
   
   DEFINE VARIABLE diranv AS CHARACTER NO-UNDO.
   IF Guru.Konstanter:globforetag = "KRAF" THEN DO:
      diranv = Guru.Konstanter:globanv.
      {MOLNETMAPPEXTRA.I}
      IF mappvarmoln BEGINS "c:\users\" THEN DO:
         bsok = SUBSTRING(mappvarmoln,10,INDEX(mappvarmoln,"\",10) - 10).
         mappvarmoln = REPLACE(mappvarmoln,bsok,diranv).  
      END.
   END.
END PROCEDURE.
PROCEDURE btnvisadok_UI :
   RUN selectfoc_UI (INPUT 7).   
   IF AVAILABLE avtalaonrtemp THEN DO:         
      IF avtalaonrtemp.FIL = "" THEN DO:
         MESSAGE "Det finns ingen fil kopplad till dokumentet"
         VIEW-AS ALERT-BOX TITLE "Meddelande".
      END.
      ELSE DO:    
         IF avtalaonrtemp.FIL BEGINS "www." OR  avtalaonrtemp.FIL BEGINS "http://" THEN.
         ELSE DO:
            FILE-INFO:FILE-NAME = avtalaonrtemp.FIL.
            IF SEARCH(FILE-INFO:FULL-PATHNAME) = ? THEN DO:
               MESSAGE avtalaonrtemp.FIL " finns inte. Det är troligen ett sekretessproblem. Kontakta Elpool. Filtyp " 
               VIEW-AS ALERT-BOX.
               RETURN.
            END.
         END.
         RUN VisaDokMoln_UI (INPUT-OUTPUT avtalaonrtemp.FIL).
         RUN OPENDOC.P (avtalaonrtemp.FIL,"","",NO).
      END.      
   END.
   ELSE DO:
      MESSAGE "Det finns inget dokument att visa."
      VIEW-AS ALERT-BOX TITLE "Meddelande".        
      RETURN.
   END.
END PROCEDURE.
PROCEDURE btnvisaavt_UI :
   RUN selectfoc_UI (INPUT 6).   
      IF AVAILABLE avtalaonrtemp THEN DO:                  
         IF avtalaonrtemp.FIL = "" THEN DO:
            MESSAGE "Det finns ingen fil kopplad till tillståndet/avtalet"
            VIEW-AS ALERT-BOX TITLE "Meddelande".
         END.
         ELSE DO:
            FILE-INFO:FILE-NAME = avtalaonrtemp.FIL.
            IF SEARCH(FILE-INFO:FULL-PATHNAME) = ? THEN DO:
               MESSAGE avtalaonrtemp.FIL " finns inte. Det är troligen ett sekretessproblem. Kontakta Elpool. Filtyp " 
               VIEW-AS ALERT-BOX.
               RETURN.
            END.
            RUN OPENDOC.P (avtalaonrtemp.FIL,"","",NO).
         END.      
      END.
      ELSE DO:
         MESSAGE "Det finns inget tillstånd/avtal att visa."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         RETURN.
      END.   
   
END PROCEDURE.

PROCEDURE mbrwavtal2_UI :
    APPLY "CHOOSE" TO BTN_VISADOK.
END PROCEDURE.

PROCEDURE vcbrwavtal2_UI :
   RUN selectfoc_UI (INPUT 7).   
END PROCEDURE.

PROCEDURE mbrwavtal_UI :
    APPLY "CHOOSE" TO BTN_VISATV.
END PROCEDURE.
PROCEDURE vcbrwavtal_UI :
   RUN selectfoc_UI (INPUT 6).   
   IF NOT AVAILABLE avtalaonrtemp THEN DO:
      ASSIGN
      TOG_KLAR:CHECKED = FALSE
      FILL-IN-STARTDATHAND:SCREEN-VALUE = STRING(TODAY)
      FILL-IN-STARTDATHAND:HIDDEN  = TRUE
      BTN_MINDAT1HAND:HIDDEN  = TRUE
      BTN_UPDAT1HAND:HIDDEN  = TRUE
      TOG_KLAR:HIDDEN = TRUE
      FILL-IN-STARTDATHAND:HIDDEN = TRUE
      BTN_NYHAND:HIDDEN  = TRUE
      BTN_ANDHAND:HIDDEN  = TRUE
      BTN_BORTHAND:HIDDEN  = TRUE.
      RETURN.
   END.
   RUN avtaodathmt IN avtaodatapph (INPUT aonrvar,INPUT delnrvar,INPUT avtalaonrtemp.AVTID,
                                    OUTPUT TABLE avtaodattemp).
   ASSIGN
   TOG_KLAR:HIDDEN = FALSE
   BTN_NYHAND:HIDDEN  = FALSE
   BTN_ANDHAND:HIDDEN  = FALSE
   BTN_BORTHAND:HIDDEN  = FALSE.
   IF avtalaonrtemp.KLR NE ? THEN DO:
      ASSIGN
      TOG_KLAR:CHECKED = TRUE
      FILL-IN-STARTDATHAND:SCREEN-VALUE = STRING(avtalaonrtemp.KLR).
   END.
   ELSE DO:
      ASSIGN
      TOG_KLAR:CHECKED = FALSE
      FILL-IN-STARTDATHAND:SCREEN-VALUE = STRING(TODAY)
      FILL-IN-STARTDATHAND:HIDDEN  = TRUE
      BTN_MINDAT1HAND:HIDDEN  = TRUE
      BTN_UPDAT1HAND:HIDDEN  = TRUE.
   END.
   RUN openbdynspec_UI IN brwproc[18].
END PROCEDURE.
PROCEDURE vcbrwarbov_UI :
   RUN selectfoc_UI (INPUT 16).
   IF AVAILABLE arbarttemp THEN DO:
      FILL-IN_ARBARTKODOV:SCREEN-VALUE  = STRING(arbarttemp.ARBARTKOD).
      FILL-IN_ARBARTKOD:SCREEN-VALUE  = STRING(arbarttemp.ARBARTKOD).
   END.   
END PROCEDURE.
PROCEDURE vcbrwarb_UI :
   RUN selectfoc_UI (INPUT 5).
   IF AVAILABLE arbarttemp THEN DO:
      FILL-IN_ARBARTKODOV:SCREEN-VALUE  = STRING(arbarttemp.ARBARTKOD).
      FILL-IN_ARBARTKOD:SCREEN-VALUE  = STRING(arbarttemp.ARBARTKOD).
   END.   
END PROCEDURE.
PROCEDURE vcbrwaotid_UI :
   RUN selectfoc_UI (INPUT 3).
   IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "GRAN" OR Guru.Konstanter:globforetag = "GKAL" OR 
   Guru.Konstanter:globforetag = "LULE" OR Guru.Konstanter:globforetag = "PINN" {GLOBVES.I} THEN DO:   
      FIND FIRST aotidkopp WHERE aotidkopp.AONR = aotidslagtemp.AONR AND
      aotidkopp.DELNR = aotidslagtemp.DELNR AND aotidkopp.IDTIDLAG = aotidslagtemp.IDTLAG
      USE-INDEX AONR NO-LOCK NO-ERROR.
      IF AVAILABLE aotidkopp THEN DO:                  
         IF aotidkopp.ANMARK NE "" THEN RUN logform_UI (INPUT FILL-IN-ANM,INPUT TRUE, OUTPUT logformhj).
         ELSE RUN logform_UI (INPUT FILL-IN-ANM,INPUT FALSE, OUTPUT logformhj).
         FILL-IN-ANM:SCREEN-VALUE = logformhj.      
         IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "GRAN" OR Guru.Konstanter:globforetag = "GKAL" OR 
         Guru.Konstanter:globforetag = "LULE" OR Guru.Konstanter:globforetag = "PINN" THEN DO:         
            IF aotidkopp.FILNAMN NE "" THEN RUN logform_UI (INPUT FILL-IN-DOK,INPUT TRUE, OUTPUT logformhj).
            ELSE RUN logform_UI (INPUT FILL-IN-DOK,INPUT FALSE, OUTPUT logformhj).
            FILL-IN-DOK:SCREEN-VALUE = logformhj.                  
         END.
      END.
      ELSE DO:            
         RUN logform_UI (INPUT FILL-IN-DOK,INPUT FALSE, OUTPUT logformhj).
         FILL-IN-DOK:SCREEN-VALUE = logformhj. 
         RUN logform_UI (INPUT FILL-IN-ANM,INPUT FALSE, OUTPUT logformhj).
         FILL-IN-ANM:SCREEN-VALUE = logformhj.          
      END.      
      IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "GRAN" OR Guru.Konstanter:globforetag = "GKAL" OR 
         Guru.Konstanter:globforetag = "LULE" OR Guru.Konstanter:globforetag = "PINN" THEN DO:              
            
      END.
      ELSE IF Guru.Konstanter:globforetag = "PELLE" {GLOBVES.I} THEN DO:
         FILL-IN-DOK:HIDDEN = TRUE.
      END.
      ELSE DO:
         ASSIGN
         FILL-IN-ANM:HIDDEN = TRUE
         FILL-IN-DOK:HIDDEN = TRUE.
      END.
   END.
   IF nyttaovar = TRUE AND plannrvar NE ? THEN DO:
      ASSIGN            
      FILL-IN-DOK:HIDDEN = TRUE
      FILL-IN-ANM:HIDDEN = TRUE.
   END.
   IF AVAILABLE aotidkopp THEN DO:
      IF aotidkopp.FILNAMN = "" THEN BTN_KOPPTIDL:HIDDEN = FALSE.   
      ELSE BTN_KOPPTIDL:HIDDEN = TRUE.
   END.
   ELSE BTN_KOPPTIDL:HIDDEN = FALSE.
END PROCEDURE.

             
PROCEDURE vcbrwanl_UI :
   RUN selectfoc_UI (INPUT 1).
   IF AVAILABLE anlaggtemp THEN FILL-IN_ANLNR:SCREEN-VALUE  = anlaggtemp.ANLNR.   
END PROCEDURE.
PROCEDURE btngatillf_UI :
   RUN AOFAKUP.W (INPUT aonrvar,INPUT delnrvar).
   musz = FALSE.
   FIND FIRST uppaonrtemp WHERE uppaonrtemp.AONR = aonrvar AND 
   uppaonrtemp.DELNR = delnrvar NO-LOCK NO-ERROR.
   FIND FIRST faktyptemp WHERE faktyptemp.FAKTTYP = uppaonrtemp.FAKTTYP NO-ERROR.
   FILL-IN_FAKTTYP:SCREEN-VALUE = faktyptemp.VIFAKTTYP.
   ASSIGN
   FILL-IN_ANVANDARE:SCREEN-VALUE = uppaonrtemp.ANVANDARE
   FILL-IN_FAKTNR:SCREEN-VALUE = STRING(uppaonrtemp.FAKTNR)
   CMB_FAK:SCREEN-VALUE = FILL-IN_FAKTTYP:SCREEN-VALUE.
   RUN visfakupp_UI.   
END PROCEDURE.
                   
PROCEDURE btngatill_UI :
   DEFINE INPUT PARAMETER skapakalber2 AS CHARACTER NO-UNDO.
   skapakalberSla = skapakalber2.
   
   IF skapakalberSla NE "" THEN whandltemp.WF[1]:HIDDEN = FALSE NO-ERROR.   
   RUN selectfoc_UI (INPUT 9).
   IF NOT AVAILABLE gatill THEN DO:
      RETURN.
   END.
   IF skapakalber2 = "BERKALK" THEN.
   ELSE DO:
      {AVBGOM2.I}
   END.   
   ASSIGN
   gatilltyp = gatill.TYPCHAR
   gatill1   = gatill.F1
   gatill2   = gatill.F2.
   IF gatill.TYPCHAR = "BER" THEN DO:
      IF Guru.Konstanter:mtrlsekvar[5] = TRUE THEN DO:
         IF gatill.F2 = ? THEN DO:               
            IF Guru.Konstanter:beresekvar[1] = TRUE THEN DO:           
               RUN btnok_UI IN huvprogh (input  TRUE).
               FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
               IF musz = TRUE THEN DO:
                  musz = FALSE.
                  {AVBFRAM2.I}   
                  RETURN.
               END.
               FIND FIRST gatill WHERE ROWID(gatill) = rowgatill NO-LOCK NO-ERROR.
               RUN ber_UI (INPUT 1).
            END.
            ELSE DO:
               MESSAGE "Ni är inte behörig att skapa en beredning.".
               {AVBFRAM2.I}   
               RETURN.
            END.
         END.
         ELSE DO:
            RUN btnok_UI IN huvprogh (input  TRUE).
            FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
            IF musz = TRUE THEN DO:
               musz = FALSE.
               {AVBFRAM2.I}   
               RETURN.
            END.
            FIND FIRST gatill WHERE ROWID(gatill) = rowgatill NO-LOCK NO-ERROR.
            RUN ber_UI (INPUT 1).
         END.
      END.
      ELSE DO:
         MESSAGE "Ni är inte behörig att gå till beredning.".
         {AVBFRAM2.I}   
         RETURN.
      END.
   END.
   
   ELSE IF gatill.TYPCHAR = "KAL" THEN DO:
    
      IF Guru.Konstanter:hoppsekvar[3] = TRUE THEN DO:
         IF gatill.F2 = ? THEN DO:               
            IF gatill.F1 = "Kalkyl typ fri" THEN DO:
               MESSAGE "För att skapa en fri kalkyl måste du visa en vanlig kalkyl.".
               {AVBFRAM2.I}   
               RETURN.
            END.
            IF Guru.Konstanter:kalk2sekvar[1] = TRUE AND Guru.Konstanter:kalk2sekvar[2] = TRUE AND Guru.Konstanter:kalk2sekvar[4] = TRUE THEN DO:                  
               RUN btnok_UI IN huvprogh (input  TRUE).
               FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
               IF musz = TRUE THEN DO:
                  musz = FALSE.
                  {AVBFRAM2.I}   
                  RETURN.
               END.
               FIND FIRST gatill WHERE ROWID(gatill) = rowgatill NO-LOCK NO-ERROR.
               RUN kalk_UI (INPUT 1).
            END.
            ELSE DO:
               MESSAGE "Ni är inte behörig att skapa en kalkyl.".
               {AVBFRAM2.I}   
               RETURN.
            END.
         END.
         ELSE DO:
            RUN btnok_UI IN huvprogh (input  TRUE).
            FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
            IF musz = TRUE THEN DO:
               musz = FALSE.
               {AVBFRAM2.I}   
               RETURN.
            END.
            FIND FIRST gatill WHERE ROWID(gatill) = rowgatill NO-LOCK NO-ERROR.            
            RUN kalk_UI (INPUT 2).
         END.
      END.
      ELSE DO:
         MESSAGE "Ni är inte behörig att gå till kalkylering.".
         {AVBFRAM2.I}   
         RETURN.
      END.
      {AVBFRAM2.I}   
      RETURN.
   END.
   ELSE IF gatill.TYPCHAR = "ÄRENDE" THEN DO:
      IF Guru.Konstanter:hoppsekvar[16] = FALSE THEN DO:
         MESSAGE "Ni är inte behörig att gå till ärendehantering.".
         {AVBFRAM2.I}   
         RETURN.
      END.   
      RUN btnok_UI IN huvprogh (input  TRUE).
      FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
      IF musz = TRUE THEN DO:
         musz = FALSE.
         {AVBFRAM2.I}   
         RETURN.
      END.
      FIND FIRST gatill WHERE ROWID(gatill) = rowgatill NO-LOCK NO-ERROR.
      IF gatill.F2 = ? THEN RUN arende_UI (INPUT 1).
      ELSE RUN arende_UI (INPUT 2).    
   END.
   ELSE IF gatill.TYPCHAR = "FAK" THEN DO:
      IF Guru.Konstanter:hoppsekvar[10] = TRUE THEN DO:
         IF gatill.F2 = ? THEN DO:               
            RUN btnok_UI IN huvprogh (input  TRUE).
            FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
            IF musz = TRUE THEN DO:
               musz = FALSE.
               {AVBFRAM2.I}   
               RETURN.
            END.
            FIND FIRST gatill WHERE ROWID(gatill) = rowgatill NO-LOCK NO-ERROR.
            RUN fakt_UI (INPUT 1).
         END.
         ELSE DO:
            RUN btnok_UI IN huvprogh (input  TRUE).
            FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
            IF musz = TRUE THEN DO:
               musz = FALSE.
               {AVBFRAM2.I}   
               RETURN.
            END.
            FIND FIRST gatill WHERE ROWID(gatill) = rowgatill NO-LOCK NO-ERROR.
            RUN fakt_UI (INPUT 2).
         END.
      END.
      ELSE DO:
         MESSAGE "Ni är inte behörig att gå till fakturering".
         {AVBFRAM2.I}   
         RETURN.
      END.
   END.
   ELSE IF gatill.TYPCHAR = "MAR" THEN DO:
      IF Guru.Konstanter:hoppsekvar[12] = TRUE THEN DO:               
         RUN btnok_UI IN huvprogh (input  TRUE).
         FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
         IF musz = TRUE THEN DO:
            musz = FALSE.
            {AVBFRAM2.I}   
            RETURN.
         END.
         FIND FIRST gatill WHERE ROWID(gatill) = rowgatill NO-LOCK NO-ERROR.
         RUN mark_UI (INPUT 1).
      END.   
      ELSE DO:
         MESSAGE "Ni är inte behörig att gå till markvärdering.".
         {AVBFRAM2.I}   
         RETURN.
      END.         
   END.   
   EMPTY TEMP-TABLE gatill NO-ERROR. 
   RUN finnskopplingar_UI. 
   IF gatill2 = ? THEN DO:
      FIND LAST gatill WHERE gatill.TYPCHAR = gatilltyp AND
      gatill.F1  = gatill1 AND gatill.F2 NE gatill2   NO-LOCK NO-ERROR.
   END.
   ELSE DO:
      FIND FIRST gatill WHERE gatill.TYPCHAR = gatilltyp AND
      gatill.F1  = gatill1 AND gatill.F2 = gatill2   NO-LOCK NO-ERROR.
   END. 
   IF AVAILABLE gatill THEN DO:
      RUN setlastrowid_UI IN brwproc[9] (INPUT ROWID(gatill)).
      RUN lastselectdyn_UI IN brwproc[9].
   END.
   RUN vcbrwkopp_UI.
   {musarrow.i}
   {AVBFRAM2.I}   
   
END PROCEDURE.

PROCEDURE btnkoppao_UI :
   RUN btnok_UI IN huvprogh (input  TRUE).
   FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
   IF musz = TRUE THEN DO:
      musz = FALSE.
      RETURN NO-APPLY.
   END.   
   RUN kopplaaonr_UI.
   {AVBFRAM2.I}
   {musarrow.i}
END PROCEDURE.
PROCEDURE mlgniv_UI :
   APPLY "ENTRY" TO  GSTATUSNIV.
END PROCEDURE.
PROCEDURE ekopp_UI :
   IF GSTATUSNIV:SCREEN-VALUE > "999" THEN DO:
      MESSAGE "Använd bara siffror. Max värde är 100!" VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.
   IF GSTATUSNIV:SCREEN-VALUE < "0" THEN DO:
      MESSAGE "Använd bara siffror. Min värde är 0!" VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.
   IF INTEGER(GSTATUSNIV:SCREEN-VALUE) > 100 THEN DO:
      MESSAGE "Max värde är 100!" VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.
   IF INTEGER(GSTATUSNIV:SCREEN-VALUE) < 0 THEN DO:
      MESSAGE "Min värde är 0!" VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.
   IF entrymtrlantal = TRUE THEN DO:
      IF AVAILABLE gatill THEN DO:
         gatill.STATUSNIV = GSTATUSNIV:SCREEN-VALUE.            
      END.
   END.
   entrymtrlantal = FALSE.  
END PROCEDURE.

PROCEDURE entrykopp_UI :
   entrymtrlantal = TRUE.
   RUN selectfoc_UI (INPUT 9). 
END PROCEDURE.

PROCEDURE rlwkopp_UI :
   IF entrymtrlantal = TRUE THEN DO:
      RUN rlwkopp_UI IN huvprogh.
   END.
END PROCEDURE.
PROCEDURE rdwkopp_UI :
   DEFINE INPUT PARAMETER TABLE FOR coltemp.
   DEFINE INPUT PARAMETER brwh AS HANDLE NO-UNDO.
   DEFINE VARIABLE fargnr AS INTEGER NO-UNDO.
   fargnr = 0.
   IF AVAILABLE gatill THEN DO:   
      IF brwh:NAME = "BRW_KOPP" THEN RUN rowdispkopp_UI IN huvprogh (INPUT fargnr).             
   END.   
END PROCEDURE.
PROCEDURE mdcbrwkopp_UI :
   IF FILL-IN_AONRAVDATUM:SCREEN-VALUE NE STRING(01/01/91) THEN RETURN.
   RUN selectfoc_UI (INPUT 9).
   IF NOT AVAILABLE gatill THEN RETURN.
   /*NY*/
   IF BTN_GATILL:HIDDEN = FALSE THEN APPLY "CHOOSE" TO BTN_GATILL.
   /*ÄNDRA*/
   IF gatill.TYPCHAR = "KAL" THEN DO:
      IF Guru.Konstanter:hoppsekvar[3] = TRUE THEN DO:            
         IF Guru.Konstanter:kalk2sekvar[4] = TRUE OR Guru.Konstanter:globniv = 0 THEN DO:
            IF  BTN_KALKKALK:HIDDEN = FALSE THEN APPLY "CHOOSE" TO  BTN_KALKKALK.                    
         END.                
      END.
   END.
   IF gatill.TYPCHAR = "ÄRENDE" THEN DO:
      IF BTN_KALKKALK:HIDDEN = FALSE THEN APPLY "CHOOSE" TO  BTN_KALKKALK.                          
   END.   
   IF gatill.TYPCHAR = "BER" THEN DO:
       
       IF Guru.Konstanter:beresekvar[4] = TRUE OR Guru.Konstanter:globniv = 0 THEN DO:
         IF BTN_BERBER:HIDDEN = FALSE THEN APPLY "CHOOSE" TO BTN_BERBER.                    
      END.
      ELSE DO:
         IF Guru.Konstanter:beresekvar[13] = TRUE OR Guru.Konstanter:globniv = 0 THEN DO: 
            IF BTN_SCHAKTP:HIDDEN = FALSE THEN APPLY "CHOOSE" TO BTN_SCHAKTP.
         END.    
      END.   
   END.
   IF gatill.TYPCHAR = "FAK" THEN DO:
      IF Guru.Konstanter:hoppsekvar[10] = TRUE THEN DO:
         IF BTN_FAKFAK:HIDDEN = FALSE THEN APPLY "CHOOSE" TO BTN_FAKFAK.
      END.   
   END.
   IF gatill.TYPCHAR = "MAR" THEN DO:
      IF Guru.Konstanter:hoppsekvar[12] = TRUE THEN DO:
         IF BTN_VARDMARK:HIDDEN = FALSE THEN APPLY "CHOOSE" TO BTN_VARDMARK.
      END.         
   END.
END PROCEDURE.
PROCEDURE vcbrwkopp_UI :
   DEFINE VARIABLE kalknrvar AS INTEGER NO-UNDO.
  
   RUN selectfoc_UI (INPUT 9).
   IF AVAILABLE gatill THEN DO:
      
      IF gatill.TYPCHAR = "FBAONR" THEN DO:
         IF gatill.F2 = ? THEN GSTATUSNIV:READ-ONLY = TRUE.
         ELSE GSTATUSNIV:READ-ONLY = FALSE.
      END.
      ELSE GSTATUSNIV:READ-ONLY = TRUE.
      rowgatill = ROWID(gatill). 
      RUN knappar_UI (INPUT 2).
      IF gatill.TYPCHAR = "KAL" THEN DO:
         ASSIGN
         kalknrvar = INTEGER(gatill.F2)
         kalktypvar = gatill.TYP.   
         RUN arendeset_UI IN Guru.SharedVariable:btnkalkh (INPUT gatill.TYPCHAR).
      END.
      ELSE DO:        
         ASSIGN
         kalknrvar = ?
         kalktypvar = ?.         
      END.
      IF gatill.F2 = ?  THEN DO:
         IF gatill.TYPCHAR = "KAL" THEN DO:
            BTN_KOPPLAAONR:LABEL = "Koppla/Kopiera".
         END.
         ELSE BTN_KOPPLAAONR:LABEL = "Koppla".
      END.
      ELSE BTN_KOPPLAAONR:LABEL = "Koppla från".           
      IF gatill.TYPCHAR = "KAL" THEN DO:
         BTN_KOPPLAAONR:HIDDEN = FALSE.
         BTN_KALKKALK:LOAD-IMAGE("BILDER\xbtn_kalkyl.gif").
      END.
      ELSE IF gatill.TYPCHAR = "ÄRENDE" THEN DO:
         ASSIGN
         kalknrvar = INTEGER(gatill.F2)
         kalktypvar = gatill.TYP. 
         IF gatill.F2 = ?  THEN BTN_KOPPLAAONR:HIDDEN = TRUE.
         ELSE DO:
            BTN_KOPPLAAONR:LABEL = "Ta bort".
            BTN_KOPPLAAONR:HIDDEN = FALSE.
         END.   
         IF Guru.Konstanter:hoppsekvar[16] = FALSE THEN BTN_KOPPLAAONR:HIDDEN = TRUE. 
         RUN arendeset_UI IN Guru.SharedVariable:btnkalkh (INPUT gatill.TYPCHAR).
         BTN_KALKKALK:LOAD-IMAGE("BILDER\xbtn_arende1.jpg").        
                 
      END.   
      ELSE IF gatill.TYPCHAR = "FAK" THEN DO:
         BTN_KOPPLAAONR:HIDDEN = FALSE.
      END.
      ELSE IF gatill.TYPCHAR = "BER" THEN DO:
         BTN_KOPPLAAONR:HIDDEN = FALSE.
      END.
      ELSE IF gatill.TYPCHAR = "MAR" THEN DO:
         BTN_KOPPLAAONR:HIDDEN = FALSE.
      END.
      ELSE IF gatill.TYPCHAR = "FBAONR" THEN DO:
         IF gatill.F2 = ? THEN GSTATUSNIV:READ-ONLY = TRUE.
         ELSE GSTATUSNIV:READ-ONLY = FALSE.
         BTN_KOPPLAAONR:HIDDEN = FALSE.
         BTN_GATILL:HIDDEN = TRUE.       
      END.      
      ELSE IF gatill.TYPCHAR = "INTAONR" THEN DO:
         BTN_KOPPLAAONR:HIDDEN = FALSE.
         BTN_GATILL:HIDDEN = TRUE.        
      END.      
      ELSE DO:
         BTN_KOPPLAAONR:HIDDEN = TRUE.
      END.
      
      IF gatill.TYPCHAR = "FBAONR" THEN DO:
         BTN_GATILL:HIDDEN = TRUE.
      END.      
      IF gatill.TYPCHAR = "INTAONR" THEN DO:
         BTN_GATILL:HIDDEN = TRUE.
      END.      
   END.
   ELSE DO:
      BTN_IMPORTBER:HIDDEN = TRUE.
      BTN_IMPBER:HIDDEN = TRUE. 
   END.
    
   IF FILL-IN_AONRAVDATUM:SCREEN-VALUE NE STRING(01/01/91) THEN DO:
      ASSIGN
      FILL-IN_PAGAENDE:HIDDEN = TRUE
      BTN_KALKAR:HIDDEN = TRUE
      BTN_AKTIV:HIDDEN = TRUE
      BTN_KONVKALK:HIDDEN = TRUE           
      BTN_KOPPLAAONR:HIDDEN = TRUE.
   END.  
   RUN PlaceraKnapp_UI. 
END PROCEDURE.
FUNCTION pbutt RETURNS DECIMAL
  (INPUT bhnd AS HANDLE):
  DEFINE VARIABLE brad AS DECIMAL NO-UNDO. 
  brad = startrow.   
  startrow = startrow + 0.2 + bhnd:HEIGHT-CHARS.
  RETURN brad.
END FUNCTION.

PROCEDURE PlaceraKnapp_UI :   
   
   Guru.GlobalaVariabler:StartKolumnForKnappar = MBTN_KOPPL:COLUMN.   
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_KOPPL,TRUE).                   
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_TIDL,TRUE).         
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_ANM,TRUE).                   
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_KONT,TRUE).               
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_FAK,TRUE).             
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_DOK,TRUE).               
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_AVT,TRUE).                 
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_OVR,TRUE).             
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_TIDPERS,TRUE).  
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_AOPERSSEK,TRUE).  
   Guru.Konstanter:PlaceraKnapparVagratt(MBTN_PLIGG,TRUE).                 
      
   Guru.GlobalaVariabler:StartRadForKnappar = BRW_KOPP:ROW. 
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_GATILL).                   
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_KOPPLAAONR).     
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_KOPIBER).    
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_UPPBER).                 
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_BERBER).                 
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_SCHAKTP).               
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_LISTBER).               
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_INKBER).                 
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_JMFBERINK).           
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_ATGBER).                 
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_LASBER).                 
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_EXPBER).   
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_IMPORTBER).              
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_IMPBER).
   
   Guru.GlobalaVariabler:StartRadForKnappar = BRW_KOPP:ROW. 
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_GATILL).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_KOPPLAAONR).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_UPPKALK).               
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_KALKKALK).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_AKTIV).             
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_VISKALK).               
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_KALKAR).                 
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_KONVKALK).  
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_BERKALK).               
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_SLAIHOPKALK).
   
   Guru.GlobalaVariabler:StartRadForKnappar = BRW_KOPP:ROW. 
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_GATILL). 
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_KOPPLAAONR).      
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_UPPFAK).                 
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_KOPPFAK).               
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_VISAOFAK).             
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_FAKFAK).                 
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_VFAKFAK).               
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_PRELBFAK).             
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_KredFAK).               
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_FLISTAFAK).
               
   Guru.GlobalaVariabler:StartRadForKnappar = BRW_KOPP:ROW. 
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_GATILL).
    Guru.Konstanter:PlaceraKnapparLodratt(BTN_KOPPLAAONR).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_UPPMARK).               
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_FASTIGHETMARK).   
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_VARDMARK).             
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_VISKALMARK).         
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_VISMARK).               
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_OMRAKNA).               
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_EXPMARK).     
   
   
   Guru.GlobalaVariabler:StartKolumnForKnappar = FRAME-AONR:WIDTH-CHARS.  
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(BTN_OK).
   BTN_OK:ROW = 1.
   Guru.GlobalaVariabler:StartRadForKnappar = BTN_OK:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_OK).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_AVB).
   BTN_AVB:COLUMN = BTN_OK:COLUMN.
   
         
END PROCEDURE.
PROCEDURE knappar_UI :
   DEFINE INPUT PARAMETER varknapp AS INTEGER NO-UNDO. 
   
   IF varknapp = 1 THEN DO:
      /*kalk*/
      BTN_GATILL:ROW = BRW_KOPP:ROW.
      IF Guru.Konstanter:beresekvar[4] = TRUE THEN DO:
      END.
      ELSE BTN_KOPIBER:HIDDEN.
      
      IF Guru.Konstanter:globforetag = "LULE" THEN DO:
      END.
      ELSE IF Guru.Konstanter:globforetag = "GRAN" THEN DO:
      END.
      ELSE IF Guru.Konstanter:globforetag = "CGKAL" THEN DO:
      END.
      /*ELSE IF Guru.Konstanter:globanv = CHR(69) + CHR(76) + CHR(80) + CHR(65) + CHR(79)  THEN .*/
      ELSE BTN_IMPBER:HIDDEN = TRUE.
      
      IF Guru.Konstanter:kalk2sekvar[1] = FALSE  OR Guru.Konstanter:kalk2sekvar[2] = FALSE OR Guru.Konstanter:kalk2sekvar[4] = FALSE THEN DO:
         BTN_BERKALK:HIDDEN = TRUE.
         BTN_SLAIHOPKALK:HIDDEN = TRUE.
      END. 
      BTN_SLAIHOPKALK:HIDDEN = TRUE.
      ASSIGN
      BTN_AKTIV:HIDDEN = FALSE. 
      IF Guru.Konstanter:hoppsekvar[3] = TRUE THEN DO:
         BTN_UPPKALK:HIDDEN = TRUE.
         BTN_VISKALK:HIDDEN = TRUE.
         BTN_KALKAR:HIDDEN = TRUE.
         BTN_KONVKALK:HIDDEN = TRUE.
      END.
      IF Guru.Konstanter:beresekvar[2] = TRUE THEN BTN_UPPBER:HIDDEN = FALSE.
      ELSE BTN_UPPBER:HIDDEN = TRUE.     
      
      IF Guru.Konstanter:beresekvar[4] = TRUE THEN DO:
         BTN_BERBER:HIDDEN = FALSE.  
         IF Guru.Konstanter:globforetag = "CELPA" OR Guru.Konstanter:globforetag = "GRAN" OR Guru.Konstanter:beresekvar[13]  = TRUE THEN BTN_SCHAKTP:HIDDEN = FALSE.
         ELSE BTN_SCHAKTP:HIDDEN = TRUE.
      END.
      ELSE DO:
         BTN_BERBER:HIDDEN = TRUE.
         BTN_SCHAKTP:HIDDEN = TRUE. 
         IF Guru.Konstanter:beresekvar[13]  = TRUE THEN DO:
            BTN_SCHAKTP:HIDDEN = FALSE.
            Guru.GlobalaVariabler:colrighth = BTN_SCHAKTP:HANDLE.           
            RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).  
                 
         END. 
      END.   
      IF Guru.Konstanter:beresekvar[5] = TRUE THEN BTN_LISTBER:HIDDEN = FALSE.
      ELSE BTN_LISTBER:HIDDEN = TRUE.
         
      IF Guru.Konstanter:beresekvar[6] = TRUE THEN DO:
         BTN_INKBER:HIDDEN = FALSE.
         BTN_JMFBERINK:HIDDEN = FALSE.           
      END.
      ELSE DO:
         BTN_INKBER:HIDDEN = TRUE.
         BTN_JMFBERINK:HIDDEN = TRUE.
      END.   
      BTN_ATGBER:HIDDEN = FALSE.
      IF Guru.Konstanter:beresekvar[11] = TRUE THEN BTN_LASBER:HIDDEN = TRUE.
      ELSE BTN_LASBER:HIDDEN = TRUE.           
      IF Guru.Konstanter:mtrlsekvar[6] = FALSE AND Guru.Konstanter:beresekvar[2] = TRUE AND Guru.Konstanter:beresekvar[4] = TRUE THEN DO:
         BTN_EXPBER:HIDDEN = FALSE.
         BTN_IMPORTBER:HIDDEN = FALSE.
      END.
      ELSE DO:
         BTN_EXPBER:HIDDEN = TRUE.
         BTN_IMPORTBER:HIDDEN = TRUE.
      END.           
      /*fakt*/
      IF Guru.Konstanter:hoppsekvar[10] = TRUE THEN DO:
      END.
      /*mark*/
      IF Guru.Konstanter:hoppsekvar[12] = TRUE THEN DO:
      END.
   END.
   ASSIGN
   BTN_GATILL:HIDDEN = TRUE
   BTN_KOPPLAAONR:HIDDEN = TRUE           
   BTN_AKTIV:HIDDEN = TRUE           
   BTN_UPPKALK:HIDDEN = TRUE           
   BTN_KALKKALK:HIDDEN = TRUE           
   BTN_VISKALK:HIDDEN = TRUE           
   BTN_KALKAR:HIDDEN = TRUE           
   BTN_KONVKALK:HIDDEN = TRUE           
   BTN_UPPBER:HIDDEN = TRUE     
   BTN_BERBER:HIDDEN = TRUE           
   BTN_SCHAKTP:HIDDEN = TRUE           
   BTN_LISTBER:HIDDEN = TRUE           
   BTN_INKBER:HIDDEN = TRUE    
   BTN_JMFBERINK:HIDDEN = TRUE       
   BTN_ATGBER:HIDDEN = TRUE           
   BTN_LASBER:HIDDEN = TRUE           
   BTN_EXPBER:HIDDEN = TRUE
   BTN_IMPORTBER:HIDDEN = TRUE
   BTN_KOPIBER:HIDDEN = TRUE
   BTN_IMPBER:HIDDEN = TRUE.
   ASSIGN 
   BTN_BERKALK:HIDDEN = TRUE
   BTN_SLAIHOPKALK:HIDDEN = TRUE   
   BTN_UPPFAK:HIDDEN = TRUE   
   BTN_KOPPFAK:HIDDEN = TRUE  
   BTN_VISAOFAK:HIDDEN = TRUE 
   BTN_FAKFAK:HIDDEN = TRUE   
   BTN_VFAKFAK:HIDDEN = TRUE  
   BTN_PRELBFAK:HIDDEN = TRUE 
   BTN_KredFAK:HIDDEN = TRUE  
   BTN_FLISTAFAK:HIDDEN = TRUE   
   BTN_UPPMARK:HIDDEN = TRUE          
   BTN_FASTIGHETMARK:HIDDEN = TRUE    
   BTN_VARDMARK:HIDDEN = TRUE         
   BTN_VISKALMARK:HIDDEN = TRUE       
   BTN_VISMARK:HIDDEN = TRUE          
   BTN_OMRAKNA:HIDDEN = TRUE          
   BTN_EXPMARK:HIDDEN = TRUE.   
   IF varknapp = 2 THEN DO:
      IF gatill.TYPCHAR = "KAL" THEN DO:
         IF gatill.F1 = "Kalkyl typ 2" AND gatill.F2 = ? AND delnrvar = 0 THEN DO: 
            IF Guru.Konstanter:kalk2sekvar[1] = FALSE  OR Guru.Konstanter:kalk2sekvar[2] = FALSE OR Guru.Konstanter:kalk2sekvar[4] = FALSE THEN DO:
               BTN_SLAIHOPKALK:HIDDEN = TRUE.
            END.
            ELSE BTN_SLAIHOPKALK:HIDDEN = FALSE.
            BTN_SLAIHOPKALK:HIDDEN = TRUE.
         END.    
         IF gatill.F2 = ? THEN DO:
            ASSIGN
            BTN_GATILL:HIDDEN = FALSE
            BTN_KOPPLAAONR:HIDDEN = FALSE.
            /*KALKmatris*/
            FIND FIRST gatillbuff WHERE gatillbuff.TYPCHAR = "BER" NO-ERROR.
            IF AVAILABLE gatillbuff THEN DO:
               
               IF gatillbuff.F2 = ? THEN.
               ELSE DO:
                  IF Guru.Konstanter:kalk2sekvar[1] = FALSE  OR Guru.Konstanter:kalk2sekvar[2] = FALSE OR Guru.Konstanter:kalk2sekvar[4] = FALSE THEN DO:
                     BTN_BERKALK:HIDDEN = TRUE.
                  END. 
                  ELSE IF gatill.TYPCHAR = "KAL" AND gatill.F2 = ? AND gatill.F1 = "Kalkyl typ 1" AND Guru.Konstanter:varforetypval[53]  = 1 THEN DO:  
                     BTN_BERKALK:HIDDEN = FALSE.
                  END.
                  ELSE IF gatill.TYPCHAR = "KAL" AND gatill.F2 = ? AND gatill.F1 = "Kalkyl typ 2" AND Guru.Konstanter:varforetypval[53]  = 2 THEN DO:  
                     BTN_BERKALK:HIDDEN = FALSE.
                     
                  END.
                  ELSE IF gatill.TYPCHAR = "KAL" AND gatill.F2 = ? AND gatill.F1 = "Kalkyl typ 3" AND Guru.Konstanter:varforetypval[53]  = 3 THEN DO:  
                     BTN_BERKALK:HIDDEN = FALSE.
                  END.
               END.
            END.            
         END. 
         ELSE DO:
            IF Guru.Konstanter:hoppsekvar[3] = TRUE THEN DO: 
               BTN_UPPKALK:HIDDEN = TRUE.
               IF Guru.Konstanter:kalk2sekvar[4] = TRUE OR Guru.Konstanter:globniv = 0 THEN BTN_KALKKALK:HIDDEN = FALSE.
               BTN_VISKALK:HIDDEN = TRUE.
               BTN_KALKAR:HIDDEN = TRUE.
               BTN_KONVKALK:HIDDEN = TRUE.
              
            END.
         END.
         IF gatill.STATUSNIV = "" THEN DO:
            BTN_AKTIV:HIDDEN = TRUE.
            BTN_KALKAR:HIDDEN = TRUE.
         END.
         ELSE DO:
            BTN_AKTIV:HIDDEN = FALSE.
            BTN_KALKAR:HIDDEN = TRUE.
         END.
         IF gatill.F1 = "Kalkyl typ fri" THEN  BTN_KALKAR:HIDDEN = TRUE.
      END.
      ELSE IF gatill.TYPCHAR = "ÄRENDE" THEN DO:
         IF gatill.F2 = ? THEN DO:
            IF Guru.Konstanter:hoppsekvar[16] = TRUE THEN  BTN_GATILL:HIDDEN = FALSE.
         END.
         ELSE DO:
            BTN_UPPKALK:HIDDEN = TRUE.
            BTN_VISKALK:HIDDEN = TRUE.
            BTN_KALKAR:HIDDEN = TRUE.
            BTN_KONVKALK:HIDDEN = TRUE.               
            BTN_AKTIV:HIDDEN = TRUE.           
         END.
      END.   
      ELSE IF gatill.TYPCHAR = "BER" THEN DO:
         IF gatill.F2 = ? THEN DO:
            ASSIGN
            BTN_GATILL:HIDDEN = FALSE
            BTN_KOPPLAAONR:HIDDEN = FALSE.
            IF Guru.Konstanter:beresekvar[4] = TRUE THEN BTN_KOPIBER:HIDDEN = FALSE.
            IF Guru.Konstanter:beresekvar[6] = TRUE THEN BTN_JMFBERINK:HIDDEN = FALSE.      
            
            IF Guru.Konstanter:globforetag = "lule"  THEN BTN_IMPBER:HIDDEN = FALSE.
            IF Guru.Konstanter:globforetag = "gran"  THEN BTN_IMPBER:HIDDEN = FALSE.
            IF Guru.Konstanter:globforetag = "CGKAL"  THEN BTN_IMPBER:HIDDEN = FALSE.
            /*IF Guru.Konstanter:globanv = CHR(69) + CHR(76) + CHR(80) + CHR(65) + CHR(79) THEN BTN_IMPBER:HIDDEN = FALSE.*/           
            IF Guru.Konstanter:mtrlsekvar[6] = FALSE AND Guru.Konstanter:beresekvar[2] = TRUE AND Guru.Konstanter:beresekvar[4] = TRUE THEN DO:
               BTN_IMPORTBER:HIDDEN = FALSE.                  
            END.
         END.
         ELSE DO:
            IF Guru.Konstanter:beresekvar[4] = TRUE THEN DO:
               BTN_ATGBER:HIDDEN = FALSE.
            END.
            ELSE BTN_ATGBER:HIDDEN = TRUE.           
            IF Guru.Konstanter:beresekvar[2] = TRUE OR Guru.Konstanter:globniv = 0 THEN BTN_UPPBER:HIDDEN = FALSE.
            IF Guru.Konstanter:beresekvar[4] = TRUE OR Guru.Konstanter:globniv = 0 THEN DO:
               BTN_BERBER:HIDDEN = FALSE.
               IF Guru.Konstanter:globforetag = "CELPA" OR Guru.Konstanter:globforetag = "GRAN" OR Guru.Konstanter:beresekvar[13] = TRUE THEN DO:
                  BTN_SCHAKTP:HIDDEN = FALSE.
               END.
               ELSE BTN_SCHAKTP:HIDDEN = TRUE.                 
            END.
            ELSE DO:
               IF Guru.Konstanter:beresekvar[13]  = TRUE THEN BTN_SCHAKTP:HIDDEN = FALSE.
            END.            
            IF Guru.Konstanter:beresekvar[5] = TRUE OR Guru.Konstanter:globniv = 0 THEN BTN_LISTBER:HIDDEN = FALSE.                
            IF Guru.Konstanter:beresekvar[6] = TRUE OR Guru.Konstanter:globniv = 0 THEN BTN_INKBER:HIDDEN = FALSE.
            IF Guru.Konstanter:beresekvar[6] = TRUE OR Guru.Konstanter:globniv = 0 THEN BTN_JMFBERINK:HIDDEN = FALSE.
            IF Guru.Konstanter:beresekvar[11] = TRUE OR Guru.Konstanter:globniv = 0 THEN BTN_LASBER:HIDDEN = FALSE.
            IF Guru.Konstanter:mtrlsekvar[6] = FALSE AND Guru.Konstanter:beresekvar[2] = TRUE AND Guru.Konstanter:beresekvar[4] = TRUE THEN DO:
               BTN_EXPBER:HIDDEN = FALSE.                  
            END.            
         END.         
      END.
      ELSE IF gatill.TYPCHAR = "FAK" THEN DO:
         IF gatill.F2 = ? THEN DO:
            ASSIGN
            BTN_GATILL:HIDDEN = FALSE
            BTN_KOPPLAAONR:HIDDEN = FALSE.
         END.
         ELSE DO:
            IF Guru.Konstanter:hoppsekvar[10] = TRUE THEN DO: 
               ASSIGN
               BTN_UPPFAK:HIDDEN = FALSE                     
               BTN_VISAOFAK:HIDDEN = FALSE   
               BTN_FAKFAK:HIDDEN = FALSE     
               BTN_VFAKFAK:HIDDEN = FALSE    
               BTN_PRELBFAK:HIDDEN = FALSE   
               BTN_KredFAK:HIDDEN = FALSE    
               BTN_FLISTAFAK:HIDDEN = FALSE.  
            END.
         END.         
      END.
      ELSE IF gatill.TYPCHAR = "MAR" THEN DO:
         IF gatill.F2 = ? THEN DO:
            ASSIGN
            BTN_GATILL:HIDDEN = FALSE
            BTN_KOPPLAAONR:HIDDEN = FALSE.
         END.
         ELSE DO:
            IF Guru.Konstanter:hoppsekvar[12] = TRUE THEN DO: 
               ASSIGN
               BTN_UPPMARK:HIDDEN = FALSE          
               BTN_FASTIGHETMARK:HIDDEN = FALSE    
               BTN_VARDMARK:HIDDEN = FALSE         
               BTN_VISKALMARK:HIDDEN = FALSE       
               BTN_VISMARK:HIDDEN = FALSE          
               BTN_OMRAKNA:HIDDEN = FALSE          
               BTN_EXPMARK:HIDDEN = FALSE.  
            END.
         END.         
      END.
      ELSE DO:
         IF gatill.F2 = ? THEN DO:
            BTN_GATILL:LABEL = "NY".  
            BTN_GATILL:HIDDEN = FALSE.
         END.
         ELSE DO:
            BTN_GATILL:LABEL = "Gå till".         
            BTN_GATILL:HIDDEN = FALSE.
         END.
      END.
   END.
END PROCEDURE.

PROCEDURE btnaktiv_UI :
   DEFINE VARIABLE kalknralt AS INTEGER NO-UNDO.
   DEFINE VARIABLE statusnivallt AS CHARACTER NO-UNDO.
   statusnivallt = "".
   RUN selectfoc_UI (INPUT 9).
   /*KALKRUTIN*/
   IF AVAILABLE gatill THEN DO:
     ASSIGN
     gatilltyp = gatill.TYPCHAR
     gatill1   = gatill.F1
     gatill2   = gatill.F2.
   END.
   IF gatill.STATUSNIV = "UF" THEN DO:
      MESSAGE "Detta är en kalkyl för utförande!" SKIP
              "Välj den kalkyl som skall vara uppföljningskalkyl"
              VIEW-AS ALERT-BOX.
      RETURN.
   END.
   MESSAGE "Vill du att kalkylen skall vara en kalkyl för utförande? " 
   VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO-CANCEL UPDATE kval AS LOGICAL.
   CASE kval:
      WHEN TRUE THEN DO:
         FIND FIRST gabuff WHERE gabuff.STATUSNIV = "UF" 
         NO-ERROR.      
         IF AVAILABLE gabuff THEN DO:
            IF gabuff.TYP = gatill.TYP  THEN gabuff.STATUSNIV = "ALT".
            ELSE gabuff.STATUSNIV = "HUV".               
            IF Guru.Konstanter:appcon THEN DO:
               RUN KALKRUTIN.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT
               (INPUT 1, INPUT INTEGER(gabuff.F2),INPUT kalknralt,INPUT ?,INPUT ?,INPUT gabuff.STATUSNIV,INPUT statusnivallt,OUTPUT TABLE gatill APPEND).
            END.
            ELSE DO:
               RUN KALKRUTIN.P 
               (INPUT 1, INPUT INTEGER(gabuff.F2),INPUT kalknralt,INPUT ?,INPUT ?,INPUT gabuff.STATUSNIV,INPUT statusnivallt,OUTPUT TABLE gatill APPEND).
            END.               
         END.
         gatill.STATUSNIV = "UF".
         /*om någon av samma typ är huvud*/
         FIND FIRST gabuff WHERE gabuff.TYP = gatill.TYP AND gabuff.STATUSNIV = "HUV"
         NO-ERROR.      
         IF AVAILABLE gabuff THEN DO:
            gabuff.STATUSNIV = "ALT".
            IF Guru.Konstanter:appcon THEN DO:
               RUN KALKRUTIN.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT
               (INPUT 1, INPUT INTEGER(gabuff.F2),INPUT kalknralt,INPUT ?,INPUT ?,INPUT gabuff.STATUSNIV,INPUT statusnivallt,OUTPUT TABLE gatill APPEND).
            END.
            ELSE DO:
               RUN KALKRUTIN.P 
               (INPUT 1, INPUT INTEGER(gabuff.F2),INPUT kalknralt,INPUT ?,INPUT ?,INPUT gabuff.STATUSNIV,INPUT statusnivallt,OUTPUT TABLE gatill APPEND).
            END.
         END.
      END.
      WHEN FALSE THEN DO:
         IF gatill.STATUSNIV = "HUV" THEN DO:
            FIND FIRST gabuff WHERE gabuff.TYP = gatill.TYP AND gabuff.STATUSNIV = "ALT"
            NO-ERROR.      
            IF AVAILABLE gabuff THEN DO:
               ASSIGN
               gabuff.STATUSNIV = "HUV"
               gatill.STATUSNIV = "ALT".
               IF Guru.Konstanter:appcon THEN DO:
                  RUN KALKRUTIN.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT                                                                                  
                  (INPUT 1, INPUT INTEGER(gabuff.F2),INPUT kalknralt,INPUT ?,INPUT ?,INPUT gabuff.STATUSNIV,INPUT statusnivallt,OUTPUT TABLE gatill APPEND).
               END.
               ELSE DO:
                  RUN KALKRUTIN.P 
                  (INPUT 1, INPUT INTEGER(gabuff.F2),INPUT kalknralt,INPUT ?,INPUT ?,INPUT gabuff.STATUSNIV,INPUT statusnivallt,OUTPUT TABLE gatill APPEND).
               END.
            END.
         END.
         ELSE DO:
            FIND FIRST gabuff WHERE gabuff.TYP = gatill.TYP AND gabuff.STATUSNIV = "HUV"
            NO-ERROR.      
            IF AVAILABLE gabuff THEN DO:
               ASSIGN
               gabuff.STATUSNIV = "ALT"
               gatill.STATUSNIV = "HUV".               
               IF Guru.Konstanter:appcon THEN DO:
                  RUN KALKRUTIN.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT                                                                                  
                  (INPUT 1, INPUT INTEGER(gabuff.F2),INPUT kalknralt,INPUT ?,INPUT ?,INPUT gabuff.STATUSNIV,INPUT statusnivallt,OUTPUT TABLE gatill APPEND).
               END.
               ELSE DO:
                  RUN KALKRUTIN.P 
                  (INPUT 1, INPUT INTEGER(gabuff.F2),INPUT kalknralt,INPUT ?,INPUT ?,INPUT gabuff.STATUSNIV,INPUT statusnivallt,OUTPUT TABLE gatill APPEND).
               END.
            END.
            ELSE DO:
               FIND FIRST gabuff WHERE gabuff.TYP = gatill.TYP AND gabuff.STATUSNIV = "UF"
               NO-ERROR.      
               IF NOT AVAILABLE gabuff THEN DO:
                  gatill.STATUSNIV = "HUV".          
               END.
            END.
         END.
      END.
      OTHERWISE RETURN.
   END CASE.
   IF Guru.Konstanter:appcon THEN DO:
      RUN KALKRUTIN.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT
      (INPUT 1, INPUT INTEGER(gatill.F2),INPUT kalknralt,INPUT ?,INPUT ?,INPUT gatill.STATUSNIV,INPUT statusnivallt,OUTPUT TABLE gatill APPEND).
   END.
   ELSE DO:
      RUN KALKRUTIN.P 
      (INPUT 1, INPUT INTEGER(gatill.F2),INPUT kalknralt,INPUT ?,INPUT ?,INPUT gatill.STATUSNIV,INPUT statusnivallt,OUTPUT TABLE gatill APPEND).
   END.                   
   FIND FIRST gatill WHERE gatill.TYPCHAR = gatilltyp AND
   gatill.F1  = gatill1 AND gatill.F2 = gatill2   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE gatill THEN DO:
      FIND FIRST gatill WHERE gatill.TYPCHAR = gatilltyp AND
      gatill.F1  = gatill1 NO-LOCK NO-ERROR.
   END.
   IF AVAILABLE gatill THEN RUN setlastrowid_UI IN brwproc[9] (INPUT ROWID(gatill)).
   RUN openbdynspec_UI IN brwproc[9].
   RUN lastselectdyn_UI IN brwproc[9].
   RUN vcbrwkopp_UI.
END PROCEDURE.

/*kopiera*/
PROCEDURE btnkalkar_UI :
   /*ANVÄNDS EJ*/
END PROCEDURE.



PROCEDURE valkontakt_UI :
   DEFINE VARIABLE kontaktvar AS CHARACTER NO-UNDO.
   IF FILL-IN_BEST:SCREEN-VALUE = "" THEN DO:
      MESSAGE "Du måste välja " Guru.Konstanter:gbestk " först!" VIEW-AS ALERT-BOX.
   END.
   FIND FIRST bestkundallt WHERE bestkundallt.BESTNAMN = FILL-IN_BEST:SCREEN-VALUE NO-LOCK NO-ERROR.
   IF AVAILABLE bestkundallt THEN DO:
      RUN BESTINFO.W (INPUT bestkundallt.BESTID,OUTPUT kontaktvar).
   END.
   IF kontaktvar = "INGEN" THEN.
   ELSE DO:
      FILL-IN-KONAKT:SCREEN-VALUE = kontaktvar.
   END.
   
END PROCEDURE.
PROCEDURE minfo2_UI :
   DEFINE VARIABLE kontaktvar AS CHARACTER NO-UNDO.
   RUN selectfoc_UI (INPUT 13).
   RUN BESTINFO.W (INPUT bestkundextra.BESTID,OUTPUT kontaktvar).
   IF kontaktvar = "INGEN" THEN.
   ELSE DO:
      FILL-IN-KONAKT:SCREEN-VALUE = kontaktvar.
   END.
END PROCEDURE.
PROCEDURE minfo_UI :
   DEFINE VARIABLE kontaktvar AS CHARACTER NO-UNDO.
   RUN selectfoc_UI (INPUT 12).
   RUN BESTINFO.W (INPUT bestkundallt.BESTID,OUTPUT kontaktvar).  
   IF kontaktvar = "INGEN" THEN.
   ELSE DO:
      FILL-IN-KONAKT:SCREEN-VALUE = kontaktvar.
   END.
END PROCEDURE.
PROCEDURE refinfo_UI :
   DEFINE VARIABLE kontaktvar AS CHARACTER NO-UNDO.
   FIND FIRST omrtemp WHERE omrtemp.NAMN = CMB_OMR:SCREEN-VALUE 
   NO-LOCK NO-ERROR.         
   RUN BESTINFO.W (INPUT omrtemp.OMRADE,OUTPUT kontaktvar).  
   IF kontaktvar = "INGEN" THEN.
   ELSE DO:
      FILL-IN_UTFARDAT:SCREEN-VALUE = kontaktvar.
   END.
END PROCEDURE.
PROCEDURE btnacc_UI :
   {muswait.i}
   IF Guru.Konstanter:appcon THEN DO:
      RUN AC.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT
      (INPUT aonrrec, INPUT Guru.Konstanter:globforetag).
   END.
   ELSE DO:
      RUN AC.P
      (INPUT aonrrec, INPUT Guru.Konstanter:globforetag).
   END.
   {musarrow.i}
END PROCEDURE.
PROCEDURE btnfastt_UI :
   {muswait.i}   
   RUN FASTTLAG.P (INPUT aonrrec, INPUT Guru.Konstanter:globforetag).   
   {musarrow.i}
END PROCEDURE.
PROCEDURE vcmbomr_UI :
   {BESTALLTTEMPTILL.I}
   IF Guru.Konstanter:varforetypval[3] >= 1 AND nyttaovar = FALSE THEN DO:
      FIND FIRST bestkundallt WHERE bestkundallt.BESTNAMN = FILL-IN_BEST:SCREEN-VALUE NO-LOCK NO-ERROR.
      IF NOT AVAILABLE bestkundallt THEN FILL-IN_BEST:SCREEN-VALUE = CMB_OMR:SCREEN-VALUE.      
   END.
   IF nyttaovar = TRUE THEN FILL-IN_BEST:SCREEN-VALUE = CMB_OMR:SCREEN-VALUE.   
   RUN bestavd2_UI.   
   IF nyttaovar = TRUE THEN DO:   
      IF Guru.Konstanter:globforetag = "SUND"  OR Guru.Konstanter:globforetag = "SNAT" THEN DO:      
        FIND FIRST judavdtemp WHERE judavdtemp.AVDELNINGNR = omrtemp.AVDELNINGNR NO-LOCK NO-ERROR.
        IF AVAILABLE judavdtemp THEN DO:
           IF uppaonrtemp.FASTAAONR = TRUE AND judavdtemp.JUDID = "ELNÄT" THEN DO:
              FIND FIRST automregtemp WHERE
              automregtemp.PRISTYP = "EJ.KOSTN." USE-INDEX PRISTYP NO-LOCK NO-ERROR.
              ASSIGN
              CMB_DEBPR:SCREEN-VALUE = automregtemp.PRISTYP.                    
           END.
           ELSE IF uppaonrtemp.FASTAAONR = TRUE  THEN DO:
              FIND FIRST automregtemp WHERE
              automregtemp.PRISTYP = "TOT.PRIS." USE-INDEX PRISTYP NO-LOCK NO-ERROR.
              ASSIGN 
              CMB_DEBPR:SCREEN-VALUE = automregtemp.PRISTYP.                    
           END.
        END.
      END.
      IF Guru.Konstanter:globforetag = "elpa" THEN DO:               
        FIND FIRST judavdtemp WHERE judavdtemp.AVDELNINGNR = omrtemp.AVDELNINGNR NO-LOCK NO-ERROR.
        IF AVAILABLE judavdtemp THEN DO:           
           IF uppaonrtemp.FASTAAONR = TRUE AND judavdtemp.JUDID = "EL" THEN DO:
              FIND FIRST automregtemp WHERE
              automregtemp.PRISTYP = "EJ.KOSTN." USE-INDEX PRISTYP NO-LOCK NO-ERROR.
              ASSIGN 
              CMB_DEBPR:SCREEN-VALUE = automregtemp.PRISTYP.                    
           END.
           ELSE IF uppaonrtemp.FASTAAONR = TRUE  THEN DO:
              FIND FIRST automregtemp WHERE
              automregtemp.PRISTYP = "TOT.PRIS." USE-INDEX PRISTYP NO-LOCK NO-ERROR.
              ASSIGN
              CMB_DEBPR:SCREEN-VALUE = automregtemp.PRISTYP.                    
           END.
        END.        
      END.                  
   END.   
   IF Guru.Konstanter:varforetypval[45] = 1 THEN DO:                                  
      FIND FIRST omrtemp WHERE omrtemp.NAMN = CMB_OMR:SCREEN-VALUE NO-LOCK NO-ERROR.
      IF AVAILABLE omrtemp THEN   valford = 'priotemp.OMRADE = "'  + omrtemp.OMRADE + '"'.
      ELSE valford = "".
      RUN setcolsortvar_UI IN brwproc[10] (INPUT valford).
      RUN openbdynspec_UI IN brwproc[10].
      RUN setcolsortvar_UI IN brwproc[21] (INPUT valford).
      RUN openbdynspec_UI IN brwproc[21].       
   END.         
END PROCEDURE.
PROCEDURE cmbomr_UI :    
   IF CMB_OMR:SCREEN-VALUE = "" OR CMB_OMR:SCREEN-VALUE = ? THEN DO:      
      IF uppaonrtemp.FASTAAONR = TRUE AND LENGTH(FILL-IN_AONR:SCREEN-VALUE) =  3 THEN .
      ELSE IF (Guru.Konstanter:globforetag = "sund" OR Guru.Konstanter:globforetag = "snat" OR Guru.Konstanter:globforetag = "misv") AND LENGTH(FILL-IN_AONR:SCREEN-VALUE) =  3 THEN . 
      ELSE DO:      
         MESSAGE Guru.Konstanter:gomrk " kan inte vara blank!" VIEW-AS ALERT-BOX.
         RETURN NO-APPLY.
      END.      
   END.
END PROCEDURE.
PROCEDURE mfastao_UI :
   IF FILL-IN_FASTAAONR:SCREEN-VALUE = gfastkh THEN ASSIGN FILL-IN_FASTAAONR:SCREEN-VALUE = gtillkh.
   ELSE IF FILL-IN_FASTAAONR:SCREEN-VALUE = gtillkh THEN ASSIGN FILL-IN_FASTAAONR:SCREEN-VALUE = gfastkh.
   
END PROCEDURE.
PROCEDURE btnpag_UI :
    IF FILL-IN_AONRAVDATUM:HIDDEN = TRUE THEN DO: /* Ändra tillbaka till avslutat */
      ASSIGN
      FILL-IN_AONRAVDATUM:SCREEN-VALUE = STRING(sparavdat)
      BTN_PAG:LABEL = "Gör " + LC(Guru.Konstanter:gaok) +  " pågående"
      FILL-IN_PAGAENDE:HIDDEN = TRUE
      FILL-IN_AONRAVDATUM:HIDDEN = FALSE. 
   END.
   ELSE DO: /* Ändra till pågående */
      FILL-IN_AONRAVDATUM:SCREEN-VALUE = STRING(01/01/91).
      ASSIGN
      BTN_PAG:LABEL = "Avsluta " + LC(Guru.Konstanter:gaok) 
      FILL-IN_PAGAENDE:HIDDEN = FALSE
      FILL-IN_AONRAVDATUM:HIDDEN = TRUE. 
   END.
END PROCEDURE.
PROCEDURE brwbered_UI :
   IF BRW_BERED:VISIBLE = TRUE THEN RUN selectfoc_UI (INPUT 8).
   IF BRW_BERED:TITLE = "Välj " + LC(Guru.Konstanter:gberek) THEN DO:
      IF brwkoll[8] = 1 THEN DO:
         brwkoll[8] = 2.
      END.
      ELSE DO:
         ASSIGN 
         FILL-IN_BEREDARE:SCREEN-VALUE = beratemp.PERSONALKOD
         FILL-IN-NAMN-2:SCREEN-VALUE = beratemp.FORNAMN + " " + beratemp.EFTERNAMN + " " + beratemp.TELEFON + " " + beratemp.EPOST.         
      END.
      IF Guru.Konstanter:globforetag = "GKAL" THEN musz = musz.
      ELSE IF FILL-IN_ARBANSVARIG:SCREEN-VALUE = "" THEN DO:      
         ASSIGN 
         FILL-IN-NAMN-3:SCREEN-VALUE = FILL-IN-NAMN-2:SCREEN-VALUE
         FILL-IN_ARBANSVARIG:SCREEN-VALUE = FILL-IN_BEREDARE:SCREEN-VALUE.         
      END.
   END.
   ELSE IF BRW_BERED:TITLE = "Välj " + LC(Guru.Konstanter:gutfardk) THEN DO:
      ASSIGN 
      FILL-IN_UTFARDAT:SCREEN-VALUE = beratemp.FORNAMN + " " + beratemp.EFTERNAMN + " " + beratemp.TELEFON + " " + beratemp.EPOST.     
   END.
END PROCEDURE.
                   
PROCEDURE brwproj_UI :
   IF BRW_PROJ:VISIBLE = TRUE THEN RUN selectfoc_UI (INPUT 11).
   ASSIGN 
   FILL-IN_STARTDAG:SCREEN-VALUE = projtemp.PERSONALKOD
   FILL-IN-NAMN-1:SCREEN-VALUE = projtemp.FORNAMN + " " + projtemp.EFTERNAMN + " " + projtemp.TELEFON + " " + projtemp.EPOST.   
END PROCEDURE.
PROCEDURE brwbestavd_UI :
   RUN selectfoc_UI (INPUT 13).
   FIND FIRST bestkundallt WHERE bestkundallt.BESTID = bestkundextra.BESTID NO-LOCK NO-ERROR.
   IF AVAILABLE bestkundallt THEN DO:
      ASSIGN 
      FILL-IN_BEST:SCREEN-VALUE = bestkundallt.BESTNAMN.   
   END.
END PROCEDURE.
PROCEDURE brwbest_UI :
   RUN selectfoc_UI (INPUT 12).
   IF AVAILABLE bestkundallt THEN FILL-IN_BEST:SCREEN-VALUE = bestkundallt.BESTNAMN.   
END PROCEDURE.
PROCEDURE brwarban_UI :
   IF BRW_ARBAN:VISIBLE = TRUE THEN RUN selectfoc_UI (INPUT 4).
   IF brwkoll[4] = 1 THEN DO:
      brwkoll[4] = 2.
   END.
   ELSE DO:
      IF AVAILABLE ansvaraotemp THEN DO:
         ASSIGN 
         FILL-IN-NAMN-3:SCREEN-VALUE = ansvaraotemp.FORNAMN + " " + ansvaraotemp.EFTERNAMN + " " + ansvaraotemp.TELEFON + " " + ansvaraotemp.EPOST
         FILL-IN_ARBANSVARIG:SCREEN-VALUE  = ansvaraotemp.PERSONALKOD.
      END.
   END.   
END PROCEDURE.
PROCEDURE cmbbest_UI :
   RUN bestavd_UI.
END PROCEDURE.
PROCEDURE ebest_UI :
   RUN frame_UI IN huvprogh (INPUT "BEST").
   IF CMB_BESTAVD:SCREEN-VALUE = "Alla" THEN DO:
      BRW_BEST:HIDDEN = FALSE. 
      CMB_BESTAVD:HIDDEN = FALSE.        
   END.
   ELSE DO:
      CMB_BESTAVD:HIDDEN = FALSE.
      BRW_BESTAVD:HIDDEN = FALSE.          
   END.
   RUN bestavd2_UI.
END PROCEDURE.

PROCEDURE bestavd_UI :
   IF CMB_BESTAVD:SCREEN-VALUE = "Alla" THEN DO:
      BRW_BESTAVD:HIDDEN = TRUE.      
      BRW_BEST:HIDDEN = FALSE.
      RUN openbdynspec_UI IN brwproc[12].
   END. 
   ELSE DO:
      BRW_BESTAVD:HIDDEN = FALSE.
      BRW_BEST:HIDDEN = TRUE.
      IF CMB_BESTAVD:SCREEN-VALUE = "ALLMÄN" THEN DO:
         valford = 'bestkundextra.AVDELNING = "' + CMB_BESTAVD:SCREEN-VALUE + '"'.
      END.
      ELSE IF CMB_BESTAVD:SCREEN-VALUE = "ej kopplad" THEN DO:
         valford = 'bestkundextra.AVDELNING = " "'.
      END.
      ELSE DO:
         FIND FIRST avdtemp WHERE avdtemp.AVDELNINGNAMN = CMB_BESTAVD:SCREEN-VALUE NO-LOCK NO-ERROR.
         valford = 'bestkundextra.AVDELNING = "'  + STRING(avdtemp.AVDELNINGNR) + '"'.
      END.
      RUN setcolsortvar_UI IN brwproc[13] (INPUT valford).
      RUN openbdynspec_UI IN brwproc[13]. 
   END.

END PROCEDURE.



PROCEDURE bestavd2_UI :
   FIND FIRST bestkundextra WHERE bestkundextra.BESTNAMN = FILL-IN_BEST:SCREEN-VALUE NO-LOCK NO-ERROR.
   IF AVAILABLE bestkundextra THEN DO:
      IF bestkundextra.AVDELNING = ""  OR bestkundextra.AVDELNING = "Ej kopplad" THEN CMB_BESTAVD:SCREEN-VALUE = "ALLA".
      ELSE DO:
         IF bestkundextra.AVDELNING = "ALLMÄN" THEN DO:
            CMB_BESTAVD:SCREEN-VALUE = bestkundextra.AVDELNING.
            valford = 'bestkundextra.AVDELNING = "' + CMB_BESTAVD:SCREEN-VALUE + '"'.
         END.
         ELSE DO:
            FIND FIRST avdtemp WHERE STRING(avdtemp.AVDELNINGNR) = bestkundextra.AVDELNING   NO-LOCK NO-ERROR.
            IF AVAILABLE avdtemp THEN DO:
               CMB_BESTAVD:SCREEN-VALUE = avdtemp.AVDELNINGNAMN.
               valford = 'bestkundextra.AVDELNING = "'  + STRING(avdtemp.AVDELNINGNR) + '"'.
            END.
            ELSE DO:
               CMB_BESTAVD:SCREEN-VALUE = "ALLA".
            END.
         END.
      END. 
   END.
   ELSE CMB_BESTAVD:SCREEN-VALUE = "ALLA".
   /*lena ändrat för att alla lättare skall kunna byta kund 20130411*/
   IF Guru.Konstanter:globforetag = "vast" THEN CMB_BESTAVD:SCREEN-VALUE = "ALLA".
   IF CMB_BESTAVD:SCREEN-VALUE = "ALLA" THEN DO:
      IF BRW_BEST:VISIBLE = TRUE OR BRW_BESTAVD:VISIBLE = TRUE THEN DO:
         BRW_BESTAVD:HIDDEN = TRUE.
         BRW_BEST:HIDDEN = FALSE.
      END.
      CMB_BESTAVD:SCREEN-VALUE = "ALLA".
      RUN openbdynspec_UI IN brwproc[12].
      FIND FIRST bestkundallt WHERE bestkundallt.BESTNAMN = FILL-IN_BEST:SCREEN-VALUE NO-LOCK NO-ERROR.
      IF AVAILABLE bestkundallt THEN RUN selectbyrowid_UI IN brwproc[12] (INPUT ROWID(bestkundallt)).
   END.
   ELSE DO:
      IF BRW_BEST:VISIBLE = TRUE OR BRW_BESTAVD:VISIBLE = TRUE THEN DO:
         BRW_BESTAVD:HIDDEN = FALSE.
         BRW_BEST:HIDDEN = TRUE.
      END.
      RUN setcolsortvar_UI IN brwproc[13] (INPUT valford).
      RUN openbdynspec_UI IN brwproc[13].
      FIND FIRST bestkundextra WHERE bestkundextra.BESTNAMN = FILL-IN_BEST:SCREEN-VALUE NO-LOCK NO-ERROR.
      RUN setlastrowid_UI IN brwproc[13] (INPUT ROWID(bestkundextra)).
      RUN lastselectdyn_UI IN brwproc[13].
   END.

END PROCEDURE.


PROCEDURE entryarban_UI :
   DEFINE INPUT PARAMETER vad AS INTEGER NO-UNDO.
   
   ASSIGN
   BRW_ARBAN:MAX-DATA-GUESS = 300.
   IF openqkoll[10] = FALSE THEN DO:
      openqkoll[10] = TRUE.
      RUN openbdynspec_UI IN brwproc[4].      
   END.
   IF nyttaovar = TRUE AND brwkoll[4] = 0 THEN DO:                                     
      brwkoll[4] = 1.
      FIND FIRST ansvaraotemp WHERE 
      ansvaraotemp.PERSONALKOD = FILL-IN_BEREDARE:SCREEN-VALUE
      USE-INDEX PKOD NO-LOCK NO-ERROR.
      IF NOT AVAILABLE ansvaraotemp THEN DO:
         FIND FIRST ansvaraotemp WHERE 
         ansvaraotemp.PERSONALKOD = FILL-IN_ARBANSVARIG:SCREEN-VALUE 
         USE-INDEX PKOD NO-LOCK NO-ERROR.
      END.
   END.
   ELSE DO:
      FIND FIRST ansvaraotemp WHERE 
      ansvaraotemp.PERSONALKOD = FILL-IN_ARBANSVARIG:SCREEN-VALUE 
      USE-INDEX PKOD NO-LOCK NO-ERROR.
   END.
   IF AVAILABLE ansvaraotemp THEN DO:
      FILL-IN_ARBANSVARIG:SCREEN-VALUE = ansvaraotemp.PERSONALKOD.
      FILL-IN-NAMN-3:SCREEN-VALUE = ansvaraotemp.FORNAMN + " " + ansvaraotemp.EFTERNAMN + " " + ansvaraotemp.TELEFON + " " + ansvaraotemp.EPOST.
      RUN setlastrowid_UI IN brwproc[4] (INPUT ROWID(ansvaraotemp)).
      RUN lastselectdyn_UI IN brwproc[4].    
   END.          
   RUN valber_UI (INPUT 2,INPUT FILL-IN_STARTDAG:SCREEN-VALUE).
   BRW_PROJ:TITLE = "Välj " + LC(Guru.Konstanter:gprojl).   
   IF vad = 1 OR vad = 2 OR vad = 3 OR vad = 4 THEN DO:
      RUN valber_UI (INPUT 1,FILL-IN_BEREDARE:SCREEN-VALUE).
      BRW_BERED:TITLE = "Välj " + LC(Guru.Konstanter:gberek).
   END.
   IF vad = 5 THEN DO:
      RUN valber_UI (INPUT 3,INPUT "").
      BRW_BERED:TITLE = "Välj " + LC(Guru.Konstanter:gutfardk).
   END.
   RUN entryarban_UI IN huvprogh.
END PROCEDURE.
PROCEDURE valber_UI :
   DEFINE INPUT PARAMETER vad AS INTEGER NO-UNDO. 
   DEFINE INPUT PARAMETER varpkod AS CHARACTER NO-UNDO. 
   IF vad = 2 THEN DO:
      IF openqkoll[12] = FALSE THEN DO:
         openqkoll[12] = TRUE.
         RUN openbdynspec_UI IN brwproc[11].      
      END.
      FIND FIRST projtemp WHERE projtemp.PERSONALKOD = varpkod 
      NO-LOCK NO-ERROR.   
      IF AVAILABLE projtemp THEN DO:                                   
         RUN setlastrowid_UI IN brwproc[11] (INPUT ROWID(projtemp)).
         RUN lastselectdyn_UI IN brwproc[11]. 
      END.
   END.
   ELSE IF vad = 3 THEN DO:
      IF openqkoll[11] = FALSE THEN DO:
         openqkoll[11] = TRUE.
         RUN openbdynspec_UI IN brwproc[8].      
      END.
      FIND FIRST beratemp WHERE beratemp.PERSONALKOD = varpkod 
      USE-INDEX PERS NO-LOCK NO-ERROR.       
      IF AVAILABLE beratemp THEN DO:                                   
         RUN setlastrowid_UI IN brwproc[8] (INPUT ROWID(beratemp)).
         RUN lastselectdyn_UI IN brwproc[8]. 
      END.
   END.
   ELSE IF vad = 1 THEN DO:
      IF openqkoll[11] = FALSE THEN DO:
         openqkoll[11] = TRUE.
         RUN openbdynspec_UI IN brwproc[8].      
      END.
      IF nyttaovar = TRUE AND brwkoll[8] = 0 THEN DO:
         brwkoll[8] = 1.
         FIND FIRST beratemp WHERE beratemp.PERSONALKOD = FILL-IN_STARTDAG:SCREEN-VALUE 
         USE-INDEX PERS NO-LOCK NO-ERROR.   
         IF NOT AVAILABLE beratemp THEN DO:
            FIND FIRST beratemp WHERE beratemp.PERSONALKOD = varpkod 
            USE-INDEX PERS NO-LOCK NO-ERROR.   
         END.
      END.
      ELSE DO:  
         FIND FIRST beratemp WHERE beratemp.PERSONALKOD = varpkod 
         USE-INDEX PERS NO-LOCK NO-ERROR.   
      END.     
      IF AVAILABLE beratemp THEN DO:                                   
         RUN setlastrowid_UI IN brwproc[8] (INPUT ROWID(beratemp)).
         RUN lastselectdyn_UI IN brwproc[8]. 
      END.
   END.
END PROCEDURE.

PROCEDURE kopplaaonr_UI :
   DEFINE VARIABLE inkopp AS CHARACTER NO-UNDO.
   DEFINE VARIABLE kopierkoppla AS INTEGER NO-UNDO.
   DEFINE VARIABLE tabortkalknr AS INTEGER NO-UNDO.
   DEFINE VARIABLE ejbortkalkvar AS LOGICAL NO-UNDO.
   FIND FIRST uppaonrtemp WHERE uppaonrtemp.AONR = aonrvar AND 
   uppaonrtemp.DELNR = delnrvar NO-LOCK NO-ERROR.
   IF NOT AVAILABLE uppaonrtemp THEN DO:
      RETURN.
   END.
   FIND FIRST gatill WHERE ROWID(gatill) = rowgatill NO-LOCK NO-ERROR.
   inkopp = gatill.TYPCHAR.
   IF BTN_KOPPLAAONR:LABEL = "Koppla" OR BTN_KOPPLAAONR:LABEL = "Koppla/Kopiera" THEN DO:      
      {AVBGOM2.I}
      IF inkopp = "KAL" THEN DO: 
         ASSIGN
         gatilltyp = gatill.TYPCHAR
         gatill1   = gatill.F1
         gatill2   = gatill.F2.
        
         {AVBFRAM2.I}
         RUN KOPKOP.W (OUTPUT kopierkoppla).           
         IF kopierkoppla = ? THEN kopierkoppla = kopierkoppla. 
         ELSE DO:
            {AVBGOM2.I}
            RUN KOPKALK.W 
            (INPUT kopierkoppla, INPUT uppaonrtemp.AONR,INPUT uppaonrtemp.DELNR,INPUT gatill.TYP,
             INPUT uppaonrtemp.OMRADE,INPUT uppaonrtemp.BESTID,INPUT ?,INPUT ?).
            {AVBFRAM2.I}
         END.
      END.
      ELSE IF gatill.TYPCHAR = "FAK" THEN DO: 
         ASSIGN
         gatilltyp = gatill.TYPCHAR
         gatill1   = gatill.F1
         gatill2   = gatill.F2.
         RUN faktkoll_UI.
         IF musz = TRUE THEN DO:
            musz = FALSE.            
            RETURN.
         END.
         EMPTY TEMP-TABLE faktintemp NO-ERROR. 
         CREATE faktintemp.
         ASSIGN
         faktintemp.OMRADE  = uppaonrtemp.OMRADE
         faktintemp.BESTID = uppaonrtemp.BESTID
         faktintemp.FAKTTYP = uppaonrtemp.FAKTTYP
         faktintemp.ORT  = uppaonrtemp.ORT
         faktintemp.AONR = uppaonrtemp.AONR    
         faktintemp.DELNR = uppaonrtemp.DELNR
         faktintemp.FAKTNR = 0.
         IF uppaonrtemp.FAKTNR NE 0 THEN faktintemp.FAKTTYP = "Fri fakturering".
         
         RUN menyfakt_UI IN Guru.SharedVariable:btnfakth (INPUT 5, INPUT uppaonrtemp.AONR, INPUT uppaonrtemp.DELNR, INPUT TABLE faktintemp).
         RUN wingom_UI  IN Guru.SharedVariable:btnfakth.
         FOR EACH gatill WHERE gatill.TYPCHAR = inkopp:
            DELETE gatill.
         END. 
         /*   hämta den rätta*/
         RUN gatillhamt_UI (INPUT "FAK").
         FIND FIRST faktintemp WHERE faktintemp.FAKTTYP NE "Fri fakturering" NO-LOCK NO-ERROR.
         IF AVAILABLE faktintemp THEN DO:
            gatill2 = STRING(faktintemp.FAKTNR).
            IF faktintemp.FAKTNR NE ? THEN DO:
               uppaonrtemp.FAKTNR = faktintemp.FAKTNR.
               FILL-IN_FAKTNR:SCREEN-VALUE = STRING(faktintemp.FAKTNR).                     
            END.
         END.
         ELSE DO:
            ASSIGN
            gatill2 = ?
            uppaonrtemp.FAKTNR = 0
            FILL-IN_FAKTNR:SCREEN-VALUE = "0".         
         END.
      END.
      ELSE IF gatill.TYPCHAR = "BER" THEN DO:     
         RUN KOPBEREDN.W (INPUT aonrvar,INPUT delnrvar).
         RUN berhmt IN nyttaoapph (INPUT aonrvar,INPUT delnrvar,INPUT-OUTPUT TABLE beredningtemp).         
         FIND FIRST beredningtemp WHERE NO-LOCK NO-ERROR.
         IF AVAILABLE beredningtemp THEN gatill2 = STRING(beredningtemp.BERNR).
      END.
      ELSE IF gatill.TYPCHAR = "MAR" THEN DO:
         RUN KOPAOMARK2.W (INPUT aonrvar,INPUT delnrvar).         
         RUN markhmt IN nyttaoapph (INPUT aonrvar,INPUT delnrvar,INPUT-OUTPUT TABLE varderingtemp).         
         FIND FIRST varderingtemp WHERE NO-LOCK NO-ERROR.
         IF AVAILABLE varderingtemp THEN gatill2 = STRING(varderingtemp.VARDNR).
      END.
      ELSE IF gatill.TYPCHAR = "FBAONR" THEN DO:
         ASSIGN
         gatilltyp = gatill.TYPCHAR
         gatill1   = gatill.F1
         gatill2   = gatill.F2.
         RUN FBAONR.W (INPUT aonrvar,INPUT delnrvar,INPUT gatill.TYPCHAR). 
         IF gatill2 = ? THEN DO:
            FIND FIRST gatill WHERE gatill.TYPCHAR = gatilltyp AND
            gatill.F1  = gatill1 AND gatill.F2 NE ? NO-LOCK NO-ERROR.
            IF AVAILABLE gatill THEN gatill2 = gatill.F2.
         END.
      END.
      ELSE IF gatill.TYPCHAR = "INTAONR" THEN DO:
         ASSIGN
         gatilltyp = gatill.TYPCHAR
         gatill1   = gatill.F1
         gatill2   = gatill.F2.
         RUN FBAONR.W (INPUT aonrvar,INPUT delnrvar,INPUT gatill.TYPCHAR). 
         IF gatill2 = ? THEN DO:
            FIND FIRST gatill WHERE gatill.TYPCHAR = gatilltyp AND
            gatill.F1  = gatill1 AND gatill.F2 NE ? NO-LOCK NO-ERROR.
            IF AVAILABLE gatill THEN gatill2 = gatill.F2.
         END.
      END.
      FOR EACH gatill:
         DELETE gatill.
      END.
      RUN finnskopplingar_UI.
      FIND FIRST gatill WHERE gatill.TYPCHAR = gatilltyp AND
      gatill.F1  = gatill1 AND gatill.F2 = gatill2   NO-LOCK NO-ERROR.
      IF NOT AVAILABLE gatill THEN DO:
         FIND FIRST gatill WHERE gatill.TYPCHAR = gatilltyp AND
         gatill.F1  = gatill1 NO-LOCK NO-ERROR.
      END.
      IF AVAILABLE gatill THEN RUN setlastrowid_UI IN brwproc[9] (INPUT ROWID(gatill)).
      RUN openbdynspec_UI IN brwproc[9].
      RUN lastselectdyn_UI IN brwproc[9].
      RUN vcbrwkopp_UI.      
   END.
   ELSE IF gatill.TYPCHAR = "ÄRENDE" AND BTN_KOPPLAAONR:LABEL = "Ta bort" THEN DO:               
      RETURN.
   END.       
   ELSE IF BTN_KOPPLAAONR:LABEL = "Koppla från" THEN DO:
      IF gatill.TYPCHAR = "KAL" THEN DO:     
         MESSAGE "Vill du ta bort kopplingen?"
         VIEW-AS ALERT-BOX
         QUESTION BUTTONS YES-NO-CANCEL TITLE "Koppling" UPDATE svarkopp AS LOGICAL.         
         CASE svarkopp:
            WHEN TRUE THEN DO:
               {SOKSTART.I}
               IF gatill.TYPCHAR = "KAL" THEN DO:
                  IF gatill.STATUSNIV = "UF" THEN DO:
                     FIND FIRST gatillbuff WHERE gatillbuff.TYPCHAR = "KAL" AND
                     gatillbuff.STATUSNIV = "HUV" NO-ERROR.
                     IF NOT AVAILABLE gatillbuff THEN DO:
                        FIND FIRST gatillbuff WHERE gatillbuff.TYPCHAR = "KAL" AND
                        gatillbuff.STATUSNIV = "ALT" NO-ERROR.
                     END.
                     IF AVAILABLE gatillbuff THEN DO:
                        MESSAGE "Du kan inte ta bort en utförandekalkyl. Ändra status på kalkylen först."
                        VIEW-AS ALERT-BOX.
                        RETURN.
                     END.
                  END.
                  IF gatill.STATUSNIV = "HUV" THEN DO:
                     FIND FIRST gatillbuff WHERE gatillbuff.TYPCHAR = "KAL" AND
                     gatillbuff.STATUSNIV = "ALT" AND gatillbuff.TYP = gatill.TYP NO-ERROR.
                     IF AVAILABLE gatillbuff THEN DO:
                        MESSAGE "Du kan inte ta bort en huvudkalkyl. Ändra status på kalkylen först."
                        VIEW-AS ALERT-BOX.
                        RETURN.
                     END.
                  END.
                  soktemp.SOKVAL = 46.
               END.
               ASSIGN
               soktemp.SOKINT[1] = INTEGER(gatill.F2)
               soktemp.SOKINT[2] = 0.      
               {SOKANROP.I}  
               MESSAGE "Vill du även ta bort kalkylen från Guru?"
               VIEW-AS ALERT-BOX
               QUESTION BUTTONS YES-NO TITLE "Ta bort" UPDATE svarkoppk AS LOGICAL.         
               CASE svarkoppk:
                  WHEN TRUE THEN DO:
                     tabortkalknr = INTEGER(gatill.F2).
                     RUN bortkalkyl_UI IN KalkClasserStart (INPUT tabortkalknr,  OUTPUT ejbortkalkvar).
                  END.
               END CASE.
               DELETE gatill.
               RUN selnextprevrow_UI IN brwproc[9].
               RUN openbdynspec_UI IN brwproc[9]. 
               RUN lastselectdyn_UI IN brwproc[9]. 
               RUN vcbrwkopp_UI.               
               RUN lastselectdyn_UI IN brwproc[9]. 
               /*SÄTT OM UF MM*/
            END.
            WHEN FALSE THEN DO:
               RETURN.
            END.      
         END CASE.         
         RETURN.
      END.
         
      ELSE IF gatill.TYPCHAR = "BER" THEN DO:     
         MESSAGE "Vill du ta bort kopplingen?"
         VIEW-AS ALERT-BOX
         QUESTION BUTTONS YES-NO-CANCEL TITLE "Koppling" UPDATE svarkopp1 AS LOGICAL.         
         CASE svarkopp1:
            WHEN TRUE THEN DO:
               {SOKSTART.I}
               ASSIGN
               soktemp.SOKVAL = 56
               soktemp.SOKINT[1] = 2
               soktemp.SOKINT[2] = uppaonrtemp.DELNR
               soktemp.SOKCHAR[1] = uppaonrtemp.AONR
               soktemp.SOKCHAR[2] = uppaonrtemp.OMRADE
               soktemp.SOKCHAR[3] = "".
               {SOKANROP.I}
               IF soktemp.SOKCHAR[3] = "" THEN DO:
                  FIND FIRST beredningtemp WHERE beredningtemp.AONR = aonrvar AND
                  beredningtemp.DELNR = delnrvar NO-LOCK NO-ERROR.
                  IF AVAILABLE beredningtemp THEN DELETE beredningtemp.
                  ASSIGN
                  gatill.F2 = ?               
                  gatill.F3 = ""
                  gatill.STATUSNIV = "".
                  ASSIGN
                  gatilltyp = gatill.TYPCHAR
                  gatill1   = gatill.F1
                  gatill2   = gatill.F2.
                  EMPTY TEMP-TABLE gatill NO-ERROR.                   
               END.
               ELSE DO:
                  MESSAGE soktemp.SOKCHAR[3] VIEW-AS ALERT-BOX.
                  RETURN.
               END.
               MESSAGE "Vill du även ta bort beredningen från Guru?"
               VIEW-AS ALERT-BOX
               QUESTION BUTTONS YES-NO TITLE "Ta bort" UPDATE svarkoppb AS LOGICAL.         
               CASE svarkoppb:
                  WHEN TRUE THEN DO:
                     FIND FIRST valsoktemp NO-LOCK NO-ERROR.
                     IF NOT AVAILABLE valsoktemp THEN CREATE valsoktemp.
                     ASSIGN
                     valsoktemp.SOKVAL = 3
                     valsoktemp.SOKINT[1] = soktemp.SOKINT[5]
                     valsoktemp.SOKINT[2] = Guru.Konstanter:globniv
                     valsoktemp.SOKCHAR[1] = soktemp.SOKCHAR[5].                     
                     
                     RUN bort_UI IN berapph (INPUT-OUTPUT TABLE valsoktemp).   
                     FIND FIRST valsoktemp NO-LOCK NO-ERROR.
                     IF valsoktemp.SOKINT[10] = 1 THEN DO:
                        MESSAGE valsoktemp.SOKCHAR[10] VIEW-AS ALERT-BOX.
                        RETURN.
                     END.
                     IF Guru.Konstanter:appcon THEN DO:                           
                        RUN DELBERE.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
                        (INPUT STRING(soktemp.SOKINT[5]), INPUT soktemp.SOKCHAR[5]).
                     END.
                     ELSE DO:
                        RUN DELBERE.P
                        (INPUT STRING(soktemp.SOKINT[5]), INPUT soktemp.SOKCHAR[5]).
                     END.              
                  END.
               END CASE.
            END.
            WHEN FALSE THEN DO:
               RETURN.
            END.      
         END CASE.         
      END.
      ELSE IF gatill.TYPCHAR = "MAR" THEN DO:     
         MESSAGE "Vill du ta bort kopplingen?"
         VIEW-AS ALERT-BOX
         QUESTION BUTTONS YES-NO-CANCEL TITLE "Koppling" UPDATE svarkoppm AS LOGICAL.         
         CASE svarkoppM:
            WHEN TRUE THEN DO:
               {SOKSTART.I}
               ASSIGN
               soktemp.SOKVAL = 69
               soktemp.SOKINT[1] = uppaonrtemp.DELNR
               soktemp.SOKCHAR[1] = uppaonrtemp.AONR.               
               {SOKANROP.I}
               FIND FIRST varderingtemp WHERE varderingtemp.AONR = aonrvar AND
               varderingtemp.DELNR = delnrvar NO-LOCK NO-ERROR.
               IF AVAILABLE varderingtemp THEN DELETE varderingtemp.
               ASSIGN
               gatill.F2 = ?               
               gatill.F3 = ""
               gatill.STATUSNIV = "".
               ASSIGN
               gatilltyp = gatill.TYPCHAR
               gatill1   = gatill.F1
               gatill2   = gatill.F2.
               FOR EACH gatill:
                  DELETE gatill.
               END.               
            END.
            WHEN FALSE THEN DO:
               RETURN.
            END.      
         END CASE.         
      END.
      ELSE IF gatill.TYPCHAR = "FAK" THEN DO:     
         MESSAGE "Vill du ta bort kopplingen?"
         VIEW-AS ALERT-BOX
         QUESTION BUTTONS YES-NO-CANCEL TITLE "Koppling" UPDATE svarkoppfak AS LOGICAL.         
         CASE svarkoppfak:
            WHEN TRUE THEN DO:
               EMPTY TEMP-TABLE faktintemp NO-ERROR. 
               
               CREATE faktintemp.
               ASSIGN
               faktintemp.OMRADE  = uppaonrtemp.OMRADE
               faktintemp.BESTID = uppaonrtemp.BESTID
               faktintemp.FAKTTYP = uppaonrtemp.FAKTTYP
               faktintemp.ORT  = uppaonrtemp.ORT
               faktintemp.AONR = uppaonrtemp.AONR    
               faktintemp.DELNR = uppaonrtemp.DELNR
               faktintemp.FAKTNR = INTEGER(gatill.F2).
               RUN menyfaktval_UI IN Guru.SharedVariable:btnfakth (INPUT 11,INPUT 4, INPUT uppaonrtemp.AONR, INPUT uppaonrtemp.DELNR, INPUT TABLE faktintemp).
               RUN wingom_UI  IN Guru.SharedVariable:btnfakth.
               FOR EACH gatill WHERE gatill.TYPCHAR = inkopp:
                  DELETE gatill.
               END.
               RUN gatillhamt_UI (INPUT inkopp).
               ASSIGN
               gatilltyp = gatill.TYPCHAR
               gatill1   = gatill.F1
               gatill2   = gatill.F2.
               FOR EACH gatill:
                  DELETE gatill.
               END.
               FIND FIRST faktintemp WHERE faktintemp.FAKTTYP NE "Fri fakturering" NO-LOCK NO-ERROR.
               IF AVAILABLE faktintemp THEN DO:
                  IF faktintemp.FAKTNR NE ? THEN DO:
                     uppaonrtemp.FAKTNR = faktintemp.FAKTNR.
                     FILL-IN_FAKTNR:SCREEN-VALUE = STRING(faktintemp.FAKTNR).         
                  END.     
               END.  
               ELSE DO:
                  ASSIGN
                  uppaonrtemp.FAKTNR = 0
                  FILL-IN_FAKTNR:SCREEN-VALUE = "0".         
               END.                              
            END.
            WHEN FALSE THEN DO:
               RETURN.
            END.      
         END CASE.         
      END.
      ELSE IF gatill.TYPCHAR = "FBAONR" THEN DO: 
         ASSIGN
         gatilltyp = gatill.TYPCHAR
         gatill1   = gatill.F1
         gatill2   = gatill.F2.
         MESSAGE "Vill du ta bort kopplingen?"
         VIEW-AS ALERT-BOX
         QUESTION BUTTONS YES-NO-CANCEL TITLE "Koppling" UPDATE svarkoppfb AS LOGICAL.         
         CASE svarkoppfb:
            WHEN TRUE THEN DO:
               FOR EACH inextrakopptemp WHERE inextrakopptemp.PROGRAM = "FBAONR":
                  DELETE inextrakopptemp.
               END.
               CREATE inextrakopptemp.          
               ASSIGN
               inextrakopptemp.PROGRAM = "FBAONR"   
               inextrakopptemp.KOPPLACHAR1 = uppaonrtemp.AONR
               inextrakopptemp.KOPPLAINT1 =  uppaonrtemp.DELNR
               inextrakopptemp.KOPPLACHAR2 = gatill.AONR
               inextrakopptemp.KOPPLAINT2 =  gatill.DELNR.
               RUN exbort_UI IN fbestapph (INPUT TABLE inextrakopptemp).
               DELETE gatill.
               /*Bara ett aonr*/         
               FIND FIRST gatill WHERE gatill.TYPCHAR = "FBAONR" AND gatill.F2 = ? NO-LOCK NO-ERROR.               
               IF NOT AVAILABLE gatill THEN DO:
                  CREATE gatill.
                  ASSIGN
                  gatill.TYPCHAR = "FBAONR"
                  gatill.F1 = "Faktura beställares " + Guru.Konstanter:gaok
                  gatill.F2 = ?      
                  gatill.F3 = ""
                  gatill.STATUSNIV = "".                                 
               END.
               ASSIGN
               gatilltyp = gatill.TYPCHAR
               gatill1   = gatill.F1
               gatill2   = gatill.F2.
               EMPTY TEMP-TABLE gatill NO-ERROR.                
            END.
            WHEN FALSE THEN DO:
               RETURN.
            END.      
         END CASE.         
      END.
      ELSE IF gatill.TYPCHAR = "INTAONR" THEN DO: 
         ASSIGN
         gatilltyp = gatill.TYPCHAR
         gatill1   = gatill.F1
         gatill2   = gatill.F2.
         MESSAGE "Vill du ta bort kopplingen?"
         VIEW-AS ALERT-BOX
         QUESTION BUTTONS YES-NO-CANCEL TITLE "Koppling" UPDATE svarkoppint AS LOGICAL.         
         CASE svarkoppint:
            WHEN TRUE THEN DO:
               FOR EACH inextrakopptemp WHERE inextrakopptemp.PROGRAM = "INTAONR":
                  DELETE inextrakopptemp.
               END.
               CREATE inextrakopptemp.          
               ASSIGN
               inextrakopptemp.PROGRAM = "INTAONR"   
               inextrakopptemp.KOPPLACHAR1 = uppaonrtemp.AONR
               inextrakopptemp.KOPPLAINT1 =  uppaonrtemp.DELNR
               inextrakopptemp.KOPPLACHAR2 = gatill.AONR
               inextrakopptemp.KOPPLAINT2 =  gatill.DELNR.
               RUN exbort_UI IN fbestapph (INPUT TABLE inextrakopptemp).
               DELETE gatill.
               /*Bara ett aonr*/                        
               FIND FIRST gatill WHERE gatill.TYPCHAR = "INTAONR" NO-LOCK NO-ERROR.
               IF NOT AVAILABLE gatill THEN DO:
                  CREATE gatill.
                  ASSIGN
                  gatill.TYPCHAR = "INTAONR"
                  gatill.F1 = "Intäkts " + Guru.Konstanter:gaok
                  gatill.F2 = ?      
                  gatill.F3 = ""
                  gatill.STATUSNIV = "".                                 
               END.
               ASSIGN
               gatilltyp = gatill.TYPCHAR
               gatill1   = gatill.F1
               gatill2   = gatill.F2.
               EMPTY TEMP-TABLE gatill NO-ERROR.                
            END.
            WHEN FALSE THEN DO:
               RETURN.
            END.      
         END CASE.         
      END.
      RUN finnskopplingar_UI.
      IF gatill2 = ? THEN DO:
         FIND FIRST gatill WHERE gatill.TYPCHAR = gatilltyp AND
         gatill.F1  = gatill1 AND gatill.F2 NE ? NO-LOCK NO-ERROR.
         IF AVAILABLE gatill THEN gatill2 = gatill.F2.
      END.
      FIND FIRST gatill WHERE gatill.TYPCHAR = gatilltyp AND
      gatill.F1  = gatill1 AND gatill.F2 = gatill2   NO-LOCK NO-ERROR.
      IF AVAILABLE gatill THEN RUN setlastrowid_UI IN brwproc[9] (INPUT ROWID(gatill)).
      RUN openbdynspec_UI IN brwproc[9]. 
      RUN lastselectdyn_UI IN brwproc[9].
      RUN vcbrwkopp_UI.
   END.     
END PROCEDURE.

PROCEDURE mark_UI :
   DEFINE INPUT PARAMETER markvart AS INTEGER NO-UNDO.
   {AVBGOM2.I}
   IF markvart > 2 THEN DO:
      RUN btnok_UI IN huvprogh (input  TRUE).
      FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
      IF musz = TRUE THEN DO:
         musz = FALSE.
         {AVBFRAM2.I}   
         RETURN.
      END.
      FIND FIRST gatill WHERE ROWID(gatill) = rowgatill NO-LOCK NO-ERROR.
      ASSIGN
      gatilltyp = gatill.TYPCHAR
      gatill1   = gatill.F1
      gatill2   = gatill.F2.
   END.
   aonrrec2 = aonrrec.
   FIND FIRST uppaonrtemp WHERE uppaonrtemp.AONR = aonrvar AND 
   uppaonrtemp.DELNR = delnrvar NO-LOCK NO-ERROR.
   EMPTY TEMP-TABLE markintemp NO-ERROR. 
   CREATE markintemp.
   BUFFER-COPY uppaonrtemp TO markintemp.
   FIND FIRST valdaao WHERE valdaao.AONR = uppaonrtemp.AONR AND
   valdaao.DELNR = uppaonrtemp.DELNR NO-LOCK NO-ERROR.
   RAD_FAST = uppaonrtemp.FASTAAONR.
   IF gatill.F2 = ? THEN DO:               
      RUN menymarkval_UI IN Guru.SharedVariable:btnmarkh (INPUT markvart,INPUT 3,INPUT aonrvar,INPUT delnrvar,INPUT TABLE markintemp).     
   END.
   ELSE DO:
      RUN menymarkval_UI IN Guru.SharedVariable:btnmarkh (INPUT markvart,INPUT 2,INPUT aonrvar,INPUT delnrvar,INPUT TABLE markintemp).
   END.
   RUN wingom_UI  IN Guru.SharedVariable:btnmarkh.
   FOR EACH gatill WHERE gatill.TYPCHAR = "MAR":
      DELETE gatill.
   END.
   RUN markhmt IN nyttaoapph (INPUT aonrvar,INPUT delnrvar,INPUT-OUTPUT TABLE varderingtemp).
   RUN gatillhamt_UI (INPUT "MAR").
   RUN openbdynspec_UI IN brwproc[9].

   EMPTY TEMP-TABLE markintemp NO-ERROR.    
   RUN openbdynspec_UI IN brwproc[9].
   FIND FIRST gatill WHERE gatill.TYPCHAR = gatilltyp AND
   gatill.F1  = gatill1 AND gatill.F2 = gatill2   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE gatill THEN DO:
      FIND FIRST gatill WHERE gatill.TYPCHAR = gatilltyp NO-ERROR.      
   END.
   IF AVAILABLE gatill THEN DO:
      RUN setlastrowid_UI IN brwproc[9] (INPUT ROWID(gatill)).
      RUN lastselectdyn_UI IN brwproc[9].
   END.
   {AVBFRAM2.I} 
   RUN openbdynspec_UI IN brwproc[9].
   RUN lastselectdyn_UI IN brwproc[9].
   {musarrow.i}


END PROCEDURE.

PROCEDURE faktkoll_UI :
   /*SNATFAKT*/
   IF Guru.Konstanter:globforetag = "SNAT" THEN.
   ELSE IF CMB_OMR:SCREEN-VALUE = FILL-IN_BEST:SCREEN-VALUE THEN DO:
      MESSAGE Guru.Konstanter:gbestk " är ej rätt för fakturering!" VIEW-AS ALERT-BOX.
      musz = TRUE.
      RETURN.
   END.
   IF CMB_FAK:SCREEN-VALUE = "Faktureras ej" THEN DO:
      MESSAGE "Felaktiga fakturatyp" VIEW-AS ALERT-BOX.
      musz = TRUE.
      RETURN.
   END.
   FIND FIRST uppaonrtemp WHERE uppaonrtemp.AONR = aonrvar AND 
   uppaonrtemp.DELNR = delnrvar NO-LOCK NO-ERROR.
   IF uppaonrtemp.FAKTTYP = "Faktureras ej" THEN DO:
      MESSAGE "Fel fakturakategori!" VIEW-AS ALERT-BOX.
      musz = TRUE.
      RETURN.
   END.
   FIND FIRST aonrkonttemp WHERE aonrkonttemp.AONR = uppaonrtemp.AONR AND aonrkonttemp.DELNR = uppaonrtemp.DELNR  
   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE aonrkonttemp THEN DO:
      MESSAGE "Saknar konto!" VIEW-AS ALERT-BOX.
      musz = TRUE.
      RETURN.
   END.
   ELSE DO:
      
   END.   
   
END PROCEDURE.

PROCEDURE fakt_UI :
   DEFINE INPUT PARAMETER faktvar AS INTEGER NO-UNDO.
   
   RUN faktkoll_UI.
   IF musz = TRUE THEN DO:
      musz = FALSE.
      RETURN.
   END.
   
   {AVBGOM2.I}
   IF faktvar > 2 THEN DO:
      RUN btnok_UI IN huvprogh (input  TRUE).
      FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
      IF musz = TRUE THEN DO:
         musz = FALSE.
         {AVBFRAM2.I}   
         RETURN.
      END.
      FIND FIRST gatill WHERE ROWID(gatill) = rowgatill NO-LOCK NO-ERROR.
      ASSIGN
      gatilltyp = gatill.TYPCHAR
      gatill1   = gatill.F1
      gatill2   = gatill.F2.
   END.
   EMPTY TEMP-TABLE faktintemp NO-ERROR.   
   CREATE faktintemp.
   ASSIGN
   faktintemp.OMRADE  = uppaonrtemp.OMRADE
   faktintemp.BESTID = uppaonrtemp.BESTID
   faktintemp.FAKTTYP = uppaonrtemp.FAKTTYP
   faktintemp.ORT  = uppaonrtemp.ORT
   faktintemp.AONR = uppaonrtemp.AONR    
   faktintemp.DELNR = uppaonrtemp.DELNR
   faktintemp.FAKTNR = INTEGER(gatill.F2).
   IF faktvar = 1 AND Guru.Konstanter:globforetag = "SNAT" THEN faktintemp.BESTID = "1".
  
   /*SNATFAKT*/
   /*GÅ TILL SKAPA */            
   IF faktintemp.FAKTNR = ? THEN DO:
      RUN menyfaktval_UI IN Guru.SharedVariable:btnfakth (INPUT faktvar,INPUT 3, INPUT uppaonrtemp.AONR, INPUT uppaonrtemp.DELNR, INPUT TABLE faktintemp).
          
   END.
   ELSE DO:
      RUN menyfaktval_UI IN Guru.SharedVariable:btnfakth (INPUT faktvar,INPUT 2, INPUT uppaonrtemp.AONR, INPUT uppaonrtemp.DELNR, INPUT TABLE faktintemp).
   END.
   RUN wingom_UI  IN Guru.SharedVariable:btnfakth.          
   FOR EACH gatill WHERE gatill.TYPCHAR = "FAK":
      DELETE gatill.
   END.   
   RUN gatillhamt_UI (INPUT "FAK").   
   FIND FIRST faktintemp WHERE faktintemp.FAKTTYP NE "Fri fakturering" NO-LOCK NO-ERROR.
   IF AVAILABLE faktintemp THEN DO:
      IF faktintemp.FAKTNR NE ? THEN DO:
         ASSIGN
         uppaonrtemp.FAKTNR = faktintemp.FAKTNR
         FILL-IN_FAKTNR:SCREEN-VALUE = STRING(faktintemp.FAKTNR).         
      END.     
   END.
   ELSE DO:
      ASSIGN
      uppaonrtemp.FAKTNR = 0
      FILL-IN_FAKTNR:SCREEN-VALUE = "0".         
   END.  
   RUN openbdynspec_UI IN brwproc[9].
   FIND FIRST gatill WHERE gatill.TYPCHAR = gatilltyp AND
   gatill.F1  = gatill1 AND gatill.F2 = gatill2   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE gatill THEN DO:
      FIND FIRST gatill WHERE gatill.TYPCHAR = gatilltyp NO-ERROR.      
   END.
   IF AVAILABLE gatill THEN DO:
      RUN setlastrowid_UI IN brwproc[9] (INPUT ROWID(gatill)).
      RUN lastselectdyn_UI IN brwproc[9].
   END.
   {AVBFRAM2.I} 
   RUN openbdynspec_UI IN brwproc[9].
   RUN lastselectdyn_UI IN brwproc[9].

END PROCEDURE.


PROCEDURE ber_UI : 
   DEFINE INPUT PARAMETER bervart AS INTEGER NO-UNDO.
  
   IF bervart = 15 THEN DO:
      RUN Modules\Beredning\JmfBeredningInkop.p (INPUT aonrvar). 
      RETURN.
   END.
   {AVBGOM2.I}
   IF bervart > 2 THEN DO:
      RUN btnok_UI IN huvprogh (input  TRUE).
      FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
      IF musz = TRUE THEN DO:
         musz = FALSE.
         {AVBFRAM2.I}   
         RETURN.
      END.
      FIND FIRST gatill WHERE ROWID(gatill) = rowgatill NO-LOCK NO-ERROR.
      ASSIGN
      gatilltyp = gatill.TYPCHAR
      gatill1   = gatill.F1
      gatill2   = gatill.F2.
   END.
   aonrrec2 = aonrrec.   
   FIND FIRST uppaonrtemp WHERE uppaonrtemp.AONR = aonrvar AND 
   uppaonrtemp.DELNR = delnrvar NO-LOCK NO-ERROR.   
   EMPTY TEMP-TABLE berintemp NO-ERROR. 
   CREATE berintemp.
   BUFFER-COPY uppaonrtemp TO berintemp.
    
   
   FIND FIRST valdaao WHERE valdaao.AONR = uppaonrtemp.AONR AND
   valdaao.DELNR = uppaonrtemp.DELNR NO-LOCK NO-ERROR.
   RAD_FAST = uppaonrtemp.FASTAAONR.
   
   IF bervart = 1 THEN DO:
      RUN menyberval_UI IN Guru.SharedVariable:btnberh (INPUT bervart,INPUT 3, INPUT aonrvar, INPUT delnrvar, INPUT TABLE berintemp,INPUT-OUTPUT inkopvart).
          
   END.
   
   ELSE IF bervart = 11 THEN DO:
      RUN BERKOP.W (INPUT aonrvar, INPUT delnrvar).
          
   END.
   ELSE IF bervart = 12 THEN DO:
      DEFINE VARIABLE globanv AS CHARACTER NO-UNDO.
      DEFINE VARIABLE OKvald AS LOGICAL NO-UNDO.
      DEFINE VARIABLE fildir AS CHARACTER NO-UNDO.
      DEFINE VARIABLE mappvar AS CHARACTER NO-UNDO.
      DEFINE VARIABLE felfil AS CHARACTER NO-UNDO.
      EMPTY TEMP-TABLE dppowtemp NO-ERROR. 
      EMPTY TEMP-TABLE felmex NO-ERROR. 
      fildir = SESSION:TEMP-DIRECTORY.
      {SESSIONTEMPDIR.I}
      IF SESSION:CLIENT-TYPE = "WEBCLIENT" THEN fildir = webclienttempdir.
      OS-CREATE-DIR VALUE(fildir) NO-ERROR.
      mappvar = fildir.
      SYSTEM-DIALOG GET-FILE fildir
      TITLE          "Välj den excelfil som Ni vill läsa in"
      FILTERS        "All Files (*.xls;*.xlsx;*.xlsb)"  "*.xls;*.xlsx;*.xlsb"   
      INITIAL-DIR    mappvar
      UPDATE OKvald.      
      IF OKvald = TRUE THEN DO:                      
         {muswait.i}             
         IF Guru.Konstanter:globforetag = "LULE" OR Guru.Konstanter:globforetag = "GRAN" THEN DO:
            RUN BERLULEEXELIN.P (INPUT fildir, OUTPUT TABLE dppowtemp ).      
            RUN impber_UI IN berapph (INPUT Guru.Konstanter:globanv, INPUT aonrvar, INPUT delnrvar, INPUT TABLE dppowtemp , OUTPUT TABLE felmex).   
            DEBUGGER:SET-BREAK().                
            FIND FIRST felmex NO-ERROR.
            IF AVAILABLE felmex THEN DO:
               felfil = SESSION:TEMP-DIR + STRING(TIME) + ".txt". 
               {AMERICANEUROPEAN.I}      
               OUTPUT TO VALUE(felfil).         
               PUT "Dessa enr blev ej inlästa från excel . Var god kontrollera!" AT 6.         
               PUT SKIP.         
               FOR EACH felmex:           
                  PUT UNFORMATTED felmex.ENR AT 1 SUBSTRING(felmex.BENAMNING,1,20) AT 10 felmex.ANTAL AT 35 felmex.ENHET AT 45  SUBSTRING(felmex.FRIID,1,20) AT 50 .  
                  PUT SKIP.
               END.
               OUTPUT CLOSE.
               {EUROPEANAMERICAN.I}
               RUN OPENDOC.P (felfil,"","",NO).         
            END.
         END.
         ELSE IF Guru.Konstanter:globforetag = "GKAL" THEN DO:
            /*RUN BERTRIMBLEEXELIN.P (INPUT fildir, OUTPUT TABLE trimbletemp ).      
            RUN impber_UI IN berapph (INPUT Guru.Konstanter:globanv, INPUT aonrvar, INPUT delnrvar, INPUT TABLE dppowtemp , OUTPUT TABLE felmex).   
            DEBUGGER:SET-BREAK().                
            FIND FIRST felmex NO-ERROR.
            IF AVAILABLE felmex THEN DO:
               felfil = SESSION:TEMP-DIR + STRING(TIME) + ".txt". 
               {AMERICANEUROPEAN.I}      
               OUTPUT TO VALUE(felfil).         
               PUT "Dessa enr blev ej inlästa från excel . Var god kontrollera!" AT 6.         
               PUT SKIP.         
               FOR EACH felmex:           
                  PUT UNFORMATTED felmex.ENR AT 1 SUBSTRING(felmex.BENAMNING,1,20) AT 10 felmex.ANTAL AT 35 felmex.ENHET AT 45  SUBSTRING(felmex.FRIID,1,20) AT 50 .  
                  PUT SKIP.
               END.
               OUTPUT CLOSE.
               {EUROPEANAMERICAN.I}
               RUN OPENDOC.P (felfil,"","",NO).         
            END.*/
         END.   
               
      END.               
      {musarrow.i}  
   END.   
   ELSE IF bervart = 13 THEN DO:
      IF (Guru.Konstanter:globforetag = "CELPA" OR Guru.Konstanter:globforetag = "GRAN") THEN inkopvart = "AONRM".
      ELSE inkopvart = "".     
      Guru.GlobalaVariabler:InkDirekt = TRUE.
      Guru.GlobalaVariabler:DirektAo = aonrvar.
      Guru.GlobalaVariabler:DirektDelnr = delnrvar.
      RUN menyberval_UI IN Guru.SharedVariable:btnberh (INPUT 5,INPUT 2, INPUT aonrvar, INPUT delnrvar, INPUT TABLE berintemp,INPUT-OUTPUT inkopvart).
      Guru.GlobalaVariabler:DirektAo = ?.
      Guru.GlobalaVariabler:DirektDelnr = ?.
      Guru.GlobalaVariabler:InkDirekt = FALSE.  
      inkopvart = "".     
   END.
   ELSE IF bervart = 14 THEN DO:
      IF NOT VALID-HANDLE(inkberh) THEN DO:
         IF Guru.Konstanter:appcon THEN DO:
            RUN INKBERAPP.P PERSISTENT SET inkberh ON Guru.Konstanter:apphand TRANSACTION DISTINCT.      
          END.                             
          ELSE DO:
            RUN INKBERAPP.P PERSISTENT SET inkberh.   
         END.
      END. 
      MESSAGE "Vill du att ta bort låsningen på detta inköp?"
      VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE doc3 AS LOGICAL.
      CASE doc3:
         WHEN TRUE THEN DO:
            globanv = Guru.Konstanter:globanv.
            RUN InkDirektAnv_UI IN inkberh (INPUT 3,INPUT aonrvar, INPUT delnrvar, INPUT-OUTPUT globanv, OUTPUT doc3).
            
         END.
         WHEN FALSE THEN DO:
       
         END.
      END CASE.      
   END.   
   ELSE DO:
      IF bervart = 5 AND (Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "GRAN") THEN inkopvart = "AONRM".
      ELSE inkopvart = "".     
      RUN menyberval_UI IN Guru.SharedVariable:btnberh (INPUT bervart,INPUT 2, INPUT aonrvar, INPUT delnrvar, INPUT TABLE berintemp,INPUT-OUTPUT inkopvart).
      IF inkopvart = "MAONR" THEN DO:         
         RUN btnok_UI. 
         RETURN.
      END.
      ELSE inkopvart = "".     
   END.
   RUN wingom_UI  IN Guru.SharedVariable:btnberh.
   FOR EACH gatill WHERE gatill.TYPCHAR = "BER":
      DELETE gatill.
   END.
   RUN berhmt IN nyttaoapph (INPUT aonrvar,INPUT delnrvar,INPUT-OUTPUT TABLE beredningtemp).
   RUN gatillhamt_UI (INPUT "BER").  
   EMPTY TEMP-TABLE berintemp NO-ERROR.
   RUN openbdynspec_UI IN brwproc[9].
   FIND FIRST gatill WHERE gatill.TYPCHAR = gatilltyp AND
   gatill.F1  = gatill1 AND gatill.F2 = gatill2   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE gatill THEN DO:
      FIND FIRST gatill WHERE gatill.TYPCHAR = gatilltyp NO-ERROR.      
   END.
   IF AVAILABLE gatill THEN DO:
      RUN setlastrowid_UI IN brwproc[9] (INPUT ROWID(gatill)).
      RUN lastselectdyn_UI IN brwproc[9].
   END.
   {AVBFRAM2.I} 
   RUN openbdynspec_UI IN brwproc[9].
   RUN lastselectdyn_UI IN brwproc[9].
END PROCEDURE.

PROCEDURE kalk_UI :
   DEFINE INPUT PARAMETER kalvart AS INTEGER NO-UNDO.
   DEFINE VARIABLE felmedd  AS CHARACTER NO-UNDO.
   DEFINE VARIABLE kalknrvar AS INTEGER NO-UNDO.
   DEFINE VARIABLE outanvanv AS CHARACTER NO-UNDO.
   DEFINE VARIABLE outdatornamn AS CHARACTER NO-UNDO.
  
   IF gatill.TYPCHAR = "ÄRENDE" THEN DO:
      RETURN.
   END. 
   
   {AVBGOM2.I}
   
   IF skapakalberSla NE "" THEN whandltemp.WF[1]:HIDDEN = TRUE NO-ERROR.
   IF kalvart > 2 THEN DO:
      RUN btnok_UI IN huvprogh (input  TRUE).
      FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
      IF musz = TRUE THEN DO:
         {AVBFRAM2.I} 
         RETURN.
      END.
      RUN selectfoc_UI (INPUT 9).
      IF NOT AVAILABLE gatill THEN DO:
         RETURN.
      END.
      FIND FIRST gatill WHERE ROWID(gatill) = rowgatill NO-LOCK NO-ERROR.
      ASSIGN
      gatilltyp = gatill.TYPCHAR
      gatill1   = gatill.F1
      gatill2   = gatill.F2.
   END.   
   kalknrvar = INTEGER(gatill.F2).
   EMPTY TEMP-TABLE kalkintemp NO-ERROR. 
   EMPTY TEMP-TABLE kalkinmtemp NO-ERROR. 
   FIND FIRST uppaonrtemp WHERE uppaonrtemp.AONR = aonrvar AND 
   uppaonrtemp.DELNR = delnrvar NO-LOCK NO-ERROR.
   CREATE kalkinmtemp.
   ASSIGN
   kalkinmtemp.AONR = uppaonrtemp.AONR    
   kalkinmtemp.DELNR = uppaonrtemp.DELNR
   kalkinmtemp.REPO = TRUE.
   RUN GetKalkUpp_UI IN KalkClasserStart (INPUT kalknrvar,OUTPUT xtypmtrl).
   IF xtypmtrl NE 3 THEN xmtrl = FALSE.    
   RUN INLOAPI.P (OUTPUT outanvanv, OUTPUT outdatornamn).  
   IF skapakalberSla = "BERKALK" THEN RUN menykalkval_UI IN Guru.SharedVariable:btnkalkh (INPUT kalvart, INPUT 22, INPUT kalknrvar, INPUT kalktypvar, INPUT TABLE kalkinmtemp).   
   ELSE IF skapakalberSla = "SLAIHOP" THEN DO:
      IF Guru.GlobalaVariabler:retvalkoll = TRUE THEN DO:
         RUN SetDefaultCursors IN Guru.Konstanter:hpApi.
         Guru.GlobalaVariabler:retvalkoll = FALSE.
      END.
     
      RUN SlaIhopUF_UI IN KalkClasserStart (INPUT aonrvar, OUTPUT felmedd).
      Guru.GlobalaVariabler:retvalkoll = TRUE.
      IF Guru.GlobalaVariabler:retvalkoll = TRUE THEN DO:
         RUN SetDefaultCursors IN Guru.Konstanter:hpApi.
         Guru.GlobalaVariabler:retvalkoll = FALSE.
      END.
      IF felmedd NE "" THEN RETURN.
      
   END.   
   ELSE RUN menykalkval_UI IN Guru.SharedVariable:btnkalkh (INPUT kalvart, INPUT 2, INPUT kalknrvar, INPUT kalktypvar, INPUT TABLE kalkinmtemp).
   skapakalberSla = "".   
   RUN wingom_UI  IN Guru.SharedVariable:btnkalkh.
   EMPTY TEMP-TABLE kalkintemp NO-ERROR.
   EMPTY TEMP-TABLE kalkinmtemp NO-ERROR. 
   FOR EACH gatill WHERE gatill.TYPCHAR = "KAL":
      DELETE gatill.
   END.
   RUN gatillhamt_UI (INPUT "KAL").   
   kalknrvar  = ?.
   kalktypvar = ?.
   musz = FALSE.
   RUN openbdynspec_UI IN brwproc[9].
  
   IF gatill2 = ? THEN DO:
      FIND LAST gatill WHERE gatill.TYPCHAR = gatilltyp AND
      gatill.F1  = gatill1 AND gatill.F2 NE gatill2   NO-LOCK NO-ERROR.
   END.
   ELSE DO:
      FIND FIRST gatill WHERE gatill.TYPCHAR = gatilltyp AND
      gatill.F1  = gatill1 AND gatill.F2 = gatill2   NO-LOCK NO-ERROR.
   END.   
   IF NOT AVAILABLE gatill THEN DO:
      FIND FIRST gatill WHERE gatill.TYPCHAR = gatilltyp NO-ERROR.      
   END.
   IF AVAILABLE gatill THEN DO:
      gatill2 = gatill.F2. 
      RUN setlastrowid_UI IN brwproc[9] (INPUT ROWID(gatill)).
      RUN lastselectdyn_UI IN brwproc[9].
   END.
   RUN vcbrwkopp_UI.
   {AVBFRAM2.I}   
    {musarrow.i}
END PROCEDURE.

PROCEDURE finnskopplingar_UI :
   /*KALKRUTIN*/
   EMPTY TEMP-TABLE gatill NO-ERROR. 
   RUN gatillhamt_UI (INPUT "FAK").
   RUN gatillhamt_UI (INPUT "KAL"). 
   RUN gatillhamt_UI (INPUT "ÄRENDE").              
   RUN gatillhamt_UI (INPUT "BER").
   RUN gatillhamt_UI (INPUT "MAR").       
   RUN gatillhamt_UI (INPUT "FBAONR").
   RUN gatillhamt_UI (INPUT "INTAONR").
   /*dummy fix*/
   FOR EACH gatill NO-LOCK:
      gatill.F1 = gatill.F1.
   END.
   RUN openbdynspec_UI IN brwproc[9].
   RUN vcbrwkopp_UI.
END PROCEDURE.

PROCEDURE gatillhamt_UI :
   DEFINE INPUT PARAMETER vartvar AS CHARACTER NO-UNDO.
   IF vartvar = "ÄRENDE" THEN DO:
      
   END.   
   IF vartvar = "KAL" THEN DO:
      IF Guru.Konstanter:hoppsekvar[3] = FALSE THEN RETURN.
      RUN arendeset_UI IN Guru.SharedVariable:btnkalkh (INPUT vartvar).
      RUN aonrhmtkalk_UI IN KalkClasserStart (INPUT uppaonrtemp.AONR, INPUT uppaonrtemp.DELNR,INPUT TRUE,OUTPUT TABLE gatill APPEND).
      IF Guru.Konstanter:varforetypval[1] = 1 OR Guru.Konstanter:varforetypval[1] = 3 THEN DO:
         IF FILL-IN_AONRAVDATUM:SCREEN-VALUE = STRING(01/01/91) THEN DO:
            CREATE gatill.
            ASSIGN
            gatill.TYPCHAR = "KAL"
            gatill.TYP = 1
            gatill.F1 = "Kalkyl typ 1"
            gatill.F2 = ?         
            gatill.F3 = ""
            gatill.STATUSNIV = "".
            CREATE gatill.
            ASSIGN
            gatill.TYPCHAR = "KAL"
            gatill.TYP = 2
            gatill.F1 = "Kalkyl typ 2"
            gatill.F2 = ?         
            gatill.F3 = ""
            gatill.STATUSNIV = "".  
            CREATE gatill.
            ASSIGN
            gatill.TYPCHAR = "KAL"
            gatill.TYP = 3
            gatill.F1 = "Kalkyl typ 3"
            gatill.F2 = ?         
            gatill.F3 = ""
            gatill.STATUSNIV = "".
         END.
      END.
      /*KALKFOR*/
      IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "GRAN" {GLOBVES.I} THEN DO: 
         IF FILL-IN_AONRAVDATUM:SCREEN-VALUE = STRING(01/01/91)  THEN DO:
            CREATE gatill.
            ASSIGN
            gatill.TYPCHAR = "KAL"
            gatill.TYP = 5
            gatill.F1 = "Kalkyl Sam B/F"
            gatill.F2 = ?         
            gatill.F3 = ""
            gatill.STATUSNIV = "".
         END.
      END.
      IF Guru.Konstanter:varforetypval[1] = 1 OR Guru.Konstanter:varforetypval[1] = 2 THEN DO:          
      END.     
   END.
   ELSE IF vartvar = "BER" THEN DO:
      IF Guru.Konstanter:mtrlsekvar[5] = TRUE THEN DO:
         FIND FIRST beredningtemp WHERE beredningtemp.AONR = uppaonrtemp.AONR AND 
         beredningtemp.DELNR = uppaonrtemp.DELNR USE-INDEX AONR NO-LOCK NO-ERROR.
         IF AVAILABLE beredningtemp THEN DO:
            FIND FIRST gatill WHERE gatill.TYPCHAR = "BER" NO-LOCK NO-ERROR.
            IF NOT AVAILABLE gatill THEN CREATE gatill.
            ASSIGN
            gatill.TYPCHAR = "BER"
            gatill.F1 = "Beredning" 
            gatill.F2 = STRING(beredningtemp.BERNR)               
            gatill.F3 = beredningtemp.BENAMNING
            gatill.STATUSNIV = "".
         END.
         ELSE DO:
            IF FILL-IN_AONRAVDATUM:SCREEN-VALUE = STRING(01/01/91)  THEN DO:
               FIND FIRST gatill WHERE gatill.TYPCHAR = "BER" NO-LOCK NO-ERROR.
               IF NOT AVAILABLE gatill THEN CREATE gatill.
               ASSIGN
               gatill.TYPCHAR = "BER"
               gatill.F1 = "Beredning" 
               gatill.F2 = ?               
               gatill.F3 = ""
               gatill.STATUSNIV = "".
            END.
         END.
      END.
   END.
   ELSE IF vartvar = "MAR" THEN DO: 
      IF Guru.Konstanter:hoppsekvar[12] = TRUE THEN DO:
         FIND FIRST varderingtemp WHERE varderingtemp.AONR = uppaonrtemp.AONR AND
         varderingtemp.DELNR = uppaonrtemp.DELNR USE-INDEX AONR NO-LOCK NO-ERROR.
         IF AVAILABLE varderingtemp THEN DO:
            CREATE gatill.
            ASSIGN
            gatill.TYPCHAR = "MAR"
            gatill.F1 = "Markvärdering" 
            gatill.F2 = STRING(varderingtemp.VARDNR)      
            gatill.F3 = varderingtemp.BENAMNING
            gatill.STATUSNIV = "".
         END.
         ELSE DO:
            IF FILL-IN_AONRAVDATUM:SCREEN-VALUE = STRING(01/01/91)  THEN DO:
               CREATE gatill.
               ASSIGN
               gatill.TYPCHAR = "MAR"
               gatill.F1 = "Markvärdering" 
               gatill.F2 = ?      
               gatill.F3 = ""
               gatill.STATUSNIV = "".
            END.
         END.
      END.
   END.                
   
   ELSE IF vartvar = "FAK" THEN DO:   
      
      IF Guru.Konstanter:varforetypval[3] = 2 THEN DO:
         RUN aofakt IN nyttaoapph (INPUT FILL-IN_AONR:SCREEN-VALUE,INPUT INTEGER(FILL-IN_DELNR:SCREEN-VALUE),OUTPUT TABLE faktintemp).
         FOR EACH faktintemp:
            CREATE gatill.
            ASSIGN
            gatill.TYPCHAR = "FAK"
            gatill.F1 = "Faktura plan" 
            gatill.F2 = STRING(faktintemp.FAKTNR)      
            gatill.F3 = faktintemp.NAMN
            gatill.STATUSNIV = "".
            IF gatill.F3 = " " THEN gatill.F3 = faktyp(faktintemp.FAKTTYP).
            ELSE gatill.F3 = faktintemp.NAMN + " " + faktyp(faktintemp.FAKTTYP). 
         END.
         IF FILL-IN_AONRAVDATUM:SCREEN-VALUE = STRING(01/01/91)  THEN DO:
            FIND FIRST faktyptemp WHERE faktyptemp.FAKTTYP = "Fri fakturering" NO-LOCK NO-ERROR.
            IF AVAILABLE faktyptemp THEN DO:
               CREATE gatill.
               ASSIGN
               gatill.TYPCHAR = "FAK"
               gatill.F1 = "Faktura plan" 
               gatill.F2 = ?      
               gatill.F3 = ""
               gatill.STATUSNIV = "".
            END.
         END.         
      END.
   END.
   ELSE IF vartvar = "FBAONR" THEN DO: 
      /*FAKTFOR*/
      IF Guru.Konstanter:globforetag = "SUND" OR Guru.Konstanter:globforetag = "SNAT" OR Guru.Konstanter:globforetag = "ELPA" THEN DO:
         EMPTY TEMP-TABLE inextrakopptemp NO-ERROR. 
         CREATE inextrakopptemp.          
         ASSIGN
         inextrakopptemp.PROGRAM = "FBAONR"                   
         inextrakopptemp.KOPPLACHAR1 = uppaonrtemp.AONR       
         inextrakopptemp.KOPPLAINT1 =  uppaonrtemp.DELNR      
         inextrakopptemp.KOPPLACHAR2 = ?            
         inextrakopptemp.KOPPLAINT2 =  ?.
         RUN etabhamt_UI IN fbestapph (INPUT TABLE inextrakopptemp,OUTPUT TABLE extrakopptemp).        
         FOR EACH extrakopptemp:
            CREATE gatill.
            ASSIGN
            gatill.TYPCHAR = extrakopptemp.PROGRAM
            gatill.F1 = "Faktura beställares " + Guru.Konstanter:gaok  
            gatill.F2 = extrakopptemp.KOPPLACHAR2 + " " + STRING(extrakopptemp.KOPPLAINT2,">99")
            gatill.F3 = extrakopptemp.SOKCHAR[1]
            gatill.AONR = extrakopptemp.KOPPLACHAR2
            gatill.DELNR = extrakopptemp.KOPPLAINT2
            gatill.STATUSNIV = STRING(extrakopptemp.SOKINT[1]).
            IF FILL-IN-REF:SCREEN-VALUE = "" THEN FILL-IN-REF:SCREEN-VALUE = gatill.F2.            
         END.
         IF FILL-IN_AONRAVDATUM:SCREEN-VALUE = STRING(01/01/91)  THEN DO:
            /*Bara ett aonr*/
            FIND FIRST gatill WHERE gatill.TYPCHAR = "FBAONR" AND gatill.F2 = ? NO-LOCK NO-ERROR.      
            IF NOT AVAILABLE gatill THEN DO:
               CREATE gatill.
               ASSIGN
               gatill.TYPCHAR = "FBAONR"
               gatill.F1 = "Faktura beställares " + Guru.Konstanter:gaok
               gatill.F2 = ?      
               gatill.F3 = ""
               gatill.STATUSNIV = "".                                 
            END.
         END.       
      END.      
   END.
   ELSE IF vartvar = "INTAONR" THEN DO: 
      /*aonrsund*/
      /*FAKTFOR*/
      /* Stäng enligt Ingrid 20091222 Lena*/
      IF Guru.Konstanter:globforetag = "cSUND" OR Guru.Konstanter:globforetag = "CELPA" THEN DO:
         IF uppaonrtemp.AONR BEGINS "65" THEN DO:
            EMPTY TEMP-TABLE inextrakopptemp NO-ERROR. 
            CREATE inextrakopptemp.          
            ASSIGN
            inextrakopptemp.PROGRAM = "INTAONR"                   
            inextrakopptemp.KOPPLACHAR1 = uppaonrtemp.AONR       
            inextrakopptemp.KOPPLAINT1 =  uppaonrtemp.DELNR      
            inextrakopptemp.KOPPLACHAR2 = ?            
            inextrakopptemp.KOPPLAINT2 =  ?.
            RUN etabhamt_UI IN fbestapph (INPUT TABLE inextrakopptemp,OUTPUT TABLE extrakopptemp).        
            FOR EACH extrakopptemp:
               CREATE gatill.
               ASSIGN
               gatill.TYPCHAR = extrakopptemp.PROGRAM
               gatill.F1 = "Intäkts " + Guru.Konstanter:gaok
               gatill.F2 = extrakopptemp.KOPPLACHAR2 + " " + STRING(extrakopptemp.KOPPLAINT2,">99")
               gatill.F3 = extrakopptemp.SOKCHAR[1]
               gatill.AONR = extrakopptemp.KOPPLACHAR2
               gatill.DELNR = extrakopptemp.KOPPLAINT2
               gatill.STATUSNIV = "".               
            END.
            IF FILL-IN_AONRAVDATUM:SCREEN-VALUE = STRING(01/01/91)  THEN DO:
               /*Bara ett aonr*/               
               FIND FIRST gatill WHERE gatill.TYPCHAR = "INTAONR" NO-LOCK NO-ERROR.              
               IF NOT AVAILABLE gatill THEN DO:
                  CREATE gatill.
                  ASSIGN
                  gatill.TYPCHAR = "INTAONR"
                  gatill.F1 = "Intäkts " + Guru.Konstanter:gaok
                  gatill.F2 = ?      
                  gatill.F3 = ""
                  gatill.STATUSNIV = "".                                 
               END.
            END.       
         END.      
      END.
   END.
   IF mainvar = FALSE THEN DO:
      RUN laddaaotid IN nyttaoapph (INPUT aonrvar,INPUT delnrvar,OUTPUT TABLE aotidslagtemp).
      openqkoll[2] = FALSE.
   END.
END PROCEDURE.

PROCEDURE visfakupp_UI :
   ASSIGN
   FILL-IN_INTERNT:SCREEN-VALUE = STRING(uppaonrtemp.BETNR) /*- uppaonrtemp.STARTVNR     */
   FILL-IN_EXTERNT:SCREEN-VALUE = STRING(uppaonrtemp.STARTVNR).  
   IF Guru.Konstanter:varforetypval[10] = 1 THEN DO:     
   END.
   ELSE DO:
      ASSIGN
      FILL-IN_EXTERNT:HIDDEN = TRUE
      FILL-IN_INTERNT:LABEL = "Planerat offertpris".
      
   END.
   IF Guru.Konstanter:varforetypval[3] >= 1 AND Guru.Konstanter:varforetypval[3] < 4 THEN DO:
      FILL-IN_FAKTNR:HIDDEN = FALSE.
   END.
   ELSE DO:
      ASSIGN 
      FILL-IN_FAKTNR:HIDDEN = TRUE.      
   END.   
END PROCEDURE.

PROCEDURE btnavb_UI :
   RUN fbaonrkoll_UI (OUTPUT musz). 
   IF musz = TRUE THEN DO:
      musz = FALSE.
      RETURN.
   END.
   RUN avb_UI.
   RUN avb_UI IN huvprogh.
END PROCEDURE.

PROCEDURE omrsek_UI :
   
END PROCEDURE.
PROCEDURE main_UI :
   {muswait.i}
   {ALLSTARTDYN.I}
   FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
   IF Guru.Konstanter:varforetypchar[4] NE "" THEN DO:
      IF Guru.Konstanter:appcon THEN DO:
         IF NOT VALID-HANDLE(anvapph) THEN RUN ANVDYNAPP.P PERSISTENT SET anvapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
      END.
      ELSE DO:
         IF NOT VALID-HANDLE(anvapph) THEN RUN ANVDYNAPP.P PERSISTENT SET anvapph.      
      END.  
      
   END.
   IF Guru.Konstanter:varforetypchar[4] NE "" THEN DO:
      RUN omrperskoll_UI IN anvapph (INPUT Guru.Konstanter:globanv,INPUT uppaonrtemp.OMRADE,OUTPUT omrpersanvok).
      RUN omrhamtaao_UI IN anvapph (INPUT uppaonrtemp.AONR,INPUT uppaonrtemp.DELNR,OUTPUT TABLE omranvandartemp).
   END.
   RUN finnskopplingar_UI.
   {musarrow.i}
   RUN openbdynspec_UI IN brwproc[1]. 
   RUN openbdynspec_UI IN brwproc[2]. 
   RUN openbdynspec_UI IN brwproc[3]. 
   RUN openbdynspec_UI IN brwproc[5].
   RUN openbdynspec_UI IN brwproc[6].
   RUN openbdynspec_UI IN brwproc[7].
   RUN openbdynspec_UI IN brwproc[9].
   RUN openbdynspec_UI IN brwproc[10]. 
   RUN openbdynspec_UI IN brwproc[14]. 
   RUN openbdynspec_UI IN brwproc[15]. 
   RUN openbdynspec_UI IN brwproc[16].   
   RUN openbdynspec_UI IN brwproc[20].
   
   RUN openbdynspec_UI IN brwproc[21]. 
  
   IF Guru.Konstanter:varforetypval[45] = 1 THEN DO:
      IF CMB_OMR:SCREEN-VALUE NE "" THEN DO:                                  
         FIND FIRST omrtemp WHERE omrtemp.NAMN = CMB_OMR:SCREEN-VALUE NO-LOCK NO-ERROR.
         IF AVAILABLE omrtemp THEN valford = 'priotemp.OMRADE = "'  + omrtemp.OMRADE + '"'.
         ELSE valford = "".
         RUN setcolsortvar_UI IN brwproc[10] (INPUT valford).
         RUN openbdynspec_UI IN brwproc[10].
         RUN setcolsortvar_UI IN brwproc[21] (INPUT valford).
         RUN openbdynspec_UI IN brwproc[21].
      END.          
   END.
   RUN knappar_UI (INPUT 1).
   RUN vcbrwkopp_UI.
   IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "cGRAN" THEN DO:
      ASSIGN
      BTN_ACCESS:HIDDEN = FALSE
      BTN_FASTTRAC:HIDDEN = FALSE.
   END.          
   ELSE DO:
      ASSIGN
      BTN_ACCESS:HIDDEN = TRUE
      BTN_FASTTRAC:HIDDEN = TRUE.
   END.
   RUN btnvit_UI (INPUT MBTN_KOPPL).
   BRW_PERS:HIDDEN = TRUE.
   IF Guru.Konstanter:globforetag = "GRAN" THEN DO:
      IF Guru.Konstanter:globanv = QUOTER({setuser.I}) THEN.
      ELSE IF Guru.Konstanter:globniv = 1 THEN.
      ELSE IF Guru.Konstanter:aonrsekvar[1] = TRUE THEN.
      ELSE DO:
         FILL-IN_ORT:READ-ONLY = TRUE.
         FILL-IN_UTFARDAT:READ-ONLY = TRUE.
      END.
      
   END.
   RUN EDELNR_UI.
END PROCEDURE.
PROCEDURE allstartbrw_UI :  
   IF Guru.Konstanter:hoppsekvar[3] = TRUE THEN DO:
      IF NOT VALID-HANDLE(KalkClasserStart) THEN RUN Modules\Kalkyl\KalkClasserStart.P PERSISTENT SET KalkClasserStart.
   END.   
   IF Guru.Konstanter:appcon THEN DO:
      IF NOT VALID-HANDLE(kalkproch) THEN   RUN KALKAPP1.P PERSISTENT SET kalkproch ON Guru.Konstanter:apphand TRANSACTION DISTINCT.     
      IF NOT VALID-HANDLE(berapph) THEN RUN MENYBERAPP.P PERSISTENT SET berapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
      IF NOT VALID-HANDLE(exdatah) THEN RUN EXTRADATAHMT.P PERSISTENT SET exdatah ON Guru.Konstanter:apphand TRANSACTION DISTINCT.     
   END.
   ELSE DO:
      IF NOT VALID-HANDLE(kalkproch) THEN  RUN KALKAPP1.P PERSISTENT SET kalkproch.     
      IF NOT VALID-HANDLE(berapph) THEN RUN MENYBERAPP.P PERSISTENT SET berapph.
      IF NOT VALID-HANDLE(exdatah) THEN RUN EXTRADATAHMT.P PERSISTENT SET exdatah.  
   END. 
   RUN anvglob_UI IN kalkproch (INPUT Guru.Konstanter:globanv).
   RUN anvglob_UI IN berapph (INPUT Guru.Konstanter:globanv).
   IF NOT VALID-HANDLE(brwproc[1]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[1] (INPUT BRW_ANL).
   IF NOT VALID-HANDLE(brwproc[2]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[2] (INPUT BRW_AONRKTO).
   IF NOT VALID-HANDLE(brwproc[3]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[3] (INPUT BRW_AOTID).
   IF Guru.Konstanter:globforetag = "CELPA" OR Guru.Konstanter:globforetag = "GKAL" THEN DO:
      RUN setcolindex_UI IN brwproc[3] (INPUT "aotidslagtemp.DAT1 DESCENDING").
   END.
   ELSE DO:         
     RUN setcolindex_UI IN brwproc[3] (INPUT "aotidslagtemp.TIDLAGE").           
   END.
   IF NOT VALID-HANDLE(brwproc[4]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[4] (INPUT BRW_ARBAN).
   IF NOT VALID-HANDLE(brwproc[5]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[5] (INPUT BRW_ARBART).
   IF NOT VALID-HANDLE(brwproc[6]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[6] (INPUT BRW_AVTAL).
   IF NOT VALID-HANDLE(brwproc[7]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[7] (INPUT BRW_AVTALDOK).
   IF NOT VALID-HANDLE(brwproc[8]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[8] (INPUT BRW_BERED).
   IF NOT VALID-HANDLE(brwproc[9]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[9] (INPUT BRW_KOPP).
   RUN brwsetupstop_UI IN brwproc[9] (INPUT 1).
   RUN setcolindex_UI IN brwproc[9] (INPUT "gatill.F1 BY gatill.F2").
   IF NOT VALID-HANDLE(brwproc[10]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[10] (INPUT BRW_PRIOOV).  
   IF NOT VALID-HANDLE(brwproc[11]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[11] (INPUT BRW_PROJ).
   IF NOT VALID-HANDLE(brwproc[12]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[12] (INPUT BRW_BEST).
   IF NOT VALID-HANDLE(brwproc[13]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[13] (INPUT BRW_BESTAVD).
   IF NOT VALID-HANDLE(brwproc[14]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[14] (INPUT BRW_TIDPAONR).
   IF NOT VALID-HANDLE(brwproc[15]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[15] (INPUT BRW_DAGBOK).
   IF NOT VALID-HANDLE(brwproc[16]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[16] (INPUT BRW_ARBARTOV).
   IF NOT VALID-HANDLE(brwproc[17]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[17] (INPUT BRW_ANV).
   IF NOT VALID-HANDLE(brwproc[18]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[18] (INPUT BRW_HAND).
   IF NOT VALID-HANDLE(brwproc[19]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[19] (INPUT BRW_PERS).
   IF NOT VALID-HANDLE(brwproc[20]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[20] (INPUT BRW_ANVOMR).
   IF NOT VALID-HANDLE(brwproc[21]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[21] (INPUT BRW_PRIO).
            
   RUN setcolindex_UI IN brwproc[15] (INPUT "DATUM").
   RUN setcolsortvar_UI IN brwproc[6] (INPUT " avtalaonrtemp.LNK = FALSE").
   RUN setcolsortvar_UI IN brwproc[7] (INPUT " avtalaonrtemp.LNK = TRUE").
   RUN dynprogextra IN brwproc[9]  (INPUT "rdwkopp_UI",INPUT THIS-PROCEDURE).
   RUN rowdispextrakor IN  brwproc[9] (INPUT TRUE).

   IF Guru.Konstanter:varforetypval[33] = 0 THEN DO:
      FILL-IN_FASTAAONR:VISIBLE = FALSE.
      FILL-IN_PAGAENDE:VISIBLE = FALSE.

   END.
   
END PROCEDURE.

PROCEDURE vh_UI :
   IF NOT VALID-HANDLE(anlaggtemph)    THEN  anlaggtemph  = TEMP-TABLE anlaggtemp:DEFAULT-BUFFER-HANDLE.  
   IF NOT VALID-HANDLE(aonrkonttemph)  THEN  aonrkonttemph  = TEMP-TABLE aonrkonttemp:DEFAULT-BUFFER-HANDLE.  
   IF NOT VALID-HANDLE(aotidslagtemph) THEN  aotidslagtemph  = TEMP-TABLE aotidslagtemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(arbarttemph)    THEN     arbarttemph     = TEMP-TABLE arbarttemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(avtalaonrtemph) THEN  avtalaonrtemph  = TEMP-TABLE avtalaonrtemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(priotemph)      THEN  priotemph  = TEMP-TABLE priotemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(aonrtidperstemph) THEN  aonrtidperstemph = TEMP-TABLE aonrtidperstemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(dagboktemph)    THEN       dagboktemph      = TEMP-TABLE dagboktemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(anvandartemph)    THEN       anvandartemph      = TEMP-TABLE anvandartemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(arbarttemph)    THEN       arbarttemph =      TEMP-TABLE arbarttemp:DEFAULT-BUFFER-HANDLE.   
   IF NOT VALID-HANDLE(gatillh )       THEN  gatillh  = TEMP-TABLE gatill:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(ansvaraotemph ) THEN  ansvaraotemph  = TEMP-TABLE ansvaraotemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(beratemph     ) THEN  beratemph      = TEMP-TABLE beratemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(bestkundallth ) THEN  bestkundallth  = TEMP-TABLE bestkundallt:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(bestkundextrah) THEN  bestkundextrah = TEMP-TABLE bestkundextra:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(projtemph     ) THEN  projtemph      = TEMP-TABLE projtemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(avtaodattemph     ) THEN  avtaodattemph      = TEMP-TABLE avtaodattemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(personaltemph) THEN  personaltemph      = TEMP-TABLE personaltemp:DEFAULT-BUFFER-HANDLE.
END PROCEDURE.

PROCEDURE ff_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER brwrowid AS ROWID NO-UNDO.
   IF brwvald = 1 THEN FIND FIRST anlaggtemp  WHERE ROWID(anlaggtemp ) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 2 THEN FIND FIRST aonrkonttemp  WHERE ROWID(aonrkonttemp ) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 3 THEN FIND FIRST aotidslagtemp  WHERE ROWID(aotidslagtemp ) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 4 THEN FIND FIRST ansvaraotemp  WHERE ROWID(ansvaraotemp ) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 5 THEN FIND FIRST arbarttemp  WHERE ROWID(arbarttemp ) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 6 THEN FIND FIRST avtalaonrtemp  WHERE ROWID(avtalaonrtemp ) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 7 THEN FIND FIRST avtalaonrtemp  WHERE ROWID(avtalaonrtemp ) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 8 THEN FIND FIRST beratemp      WHERE ROWID(beratemp     ) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 9 THEN FIND FIRST gatill      WHERE ROWID(gatill     ) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 10 THEN FIND FIRST priotemp      WHERE ROWID(priotemp     ) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 11 THEN FIND FIRST projtemp      WHERE ROWID(projtemp     ) = brwrowid NO-LOCK NO-ERROR.     
   IF brwvald = 12 THEN FIND FIRST bestkundallt  WHERE ROWID(bestkundallt ) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 13 THEN FIND FIRST bestkundextra WHERE ROWID(bestkundextra) = brwrowid NO-LOCK NO-ERROR.
   IF brwvald = 14 THEN FIND FIRST aonrtidperstemp      WHERE ROWID(aonrtidperstemp     ) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 15 THEN FIND FIRST dagboktemp      WHERE ROWID(dagboktemp     ) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 16 THEN FIND FIRST arbarttemp  WHERE ROWID(arbarttemp ) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 17 THEN FIND FIRST anvandartemp  WHERE ROWID(anvandartemp ) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 18 THEN FIND FIRST avtaodattemp  WHERE ROWID(avtaodattemp ) = brwrowid NO-LOCK NO-ERROR.     
   IF brwvald = 19 THEN FIND FIRST personaltemp  WHERE ROWID(personaltemp ) = brwrowid NO-LOCK NO-ERROR.
   IF brwvald = 21 THEN FIND FIRST priotemp      WHERE ROWID(priotemp     ) = brwrowid NO-LOCK NO-ERROR.     
END PROCEDURE.
PROCEDURE pselectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   RUN vh_UI.
   RUN pselectrowid_UI IN brwproc[brwvald] (OUTPUT brwrowid).
   RUN ff_UI (INPUT brwvald,INPUT brwrowid).    
END PROCEDURE.
PROCEDURE nselectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   RUN vh_UI.
   RUN nselectrowid_UI IN brwproc[brwvald] (OUTPUT brwrowid).
   RUN ff_UI (INPUT brwvald,INPUT brwrowid).       
END PROCEDURE.
PROCEDURE selectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.      
   RUN vh_UI.
   RUN selectrowid_UI IN brwproc[brwvald] (OUTPUT brwrowid).
   RUN ff_UI (INPUT brwvald,INPUT brwrowid).       
END PROCEDURE.
PROCEDURE fselectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   RUN vh_UI.
   RUN fetrowid_UI IN brwproc[brwvald] (INPUT antal_raknare,OUTPUT brwrowid) .
   RUN ff_UI (INPUT brwvald,INPUT brwrowid).       
END PROCEDURE.
PROCEDURE dselectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   RUN dselectfoc_UI IN brwproc[brwvald].      
END PROCEDURE.

PROCEDURE logform_UI :
   DEFINE INPUT PARAMETER formlog AS HANDLE NO-UNDO.
   DEFINE INPUT PARAMETER tf AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER svar AS CHARACTER NO-UNDO.
   IF tf = TRUE THEN svar = SUBSTRING(STRING(formlog:FORMAT),1,INDEX(formlog:FORMAT,"/") - 1). 
   ELSE svar = SUBSTRING(STRING(formlog:FORMAT),INDEX(formlog:FORMAT,"/") + 1). 
END PROCEDURE.

PROCEDURE borthand_UI :
   aonrtidperstemph:EMPTY-TEMP-TABLE() NO-ERROR.
   beratemph:EMPTY-TEMP-TABLE() NO-ERROR.
   gatillh:EMPTY-TEMP-TABLE() NO-ERROR.       
   anlaggtemph:EMPTY-TEMP-TABLE() NO-ERROR.   
   aonrkonttemph:EMPTY-TEMP-TABLE() NO-ERROR. 
   aotidslagtemph:EMPTY-TEMP-TABLE() NO-ERROR.
   arbarttemph:EMPTY-TEMP-TABLE() NO-ERROR.   
   avtalaonrtemph:EMPTY-TEMP-TABLE() NO-ERROR.
   priotemph:EMPTY-TEMP-TABLE() NO-ERROR.     
   aonrtidperstemph:EMPTY-TEMP-TABLE() NO-ERROR.
   dagboktemph:EMPTY-TEMP-TABLE() NO-ERROR.   
   avtaodattemph:EMPTY-TEMP-TABLE() NO-ERROR.      
   IF VALID-HANDLE(ansvaraotemph ) THEN   DELETE OBJECT ansvaraotemph NO-ERROR.
   IF VALID-HANDLE(beratemph     ) THEN   DELETE OBJECT beratemph     NO-ERROR.
   IF VALID-HANDLE(bestkundallth ) THEN   DELETE OBJECT bestkundallth NO-ERROR.
   IF VALID-HANDLE(bestkundextrah) THEN   DELETE OBJECT bestkundextrah NO-ERROR.
   IF VALID-HANDLE(projtemph     ) THEN   DELETE OBJECT projtemph     NO-ERROR.   
   IF VALID-HANDLE(gatillh          ) THEN   DELETE OBJECT  gatillh         NO-ERROR. 
   IF VALID-HANDLE(anlaggtemph      ) THEN   DELETE OBJECT  anlaggtemph     NO-ERROR. 
   IF VALID-HANDLE(aonrkonttemph    ) THEN   DELETE OBJECT  aonrkonttemph   NO-ERROR. 
   IF VALID-HANDLE(aotidslagtemph   ) THEN   DELETE OBJECT  aotidslagtemph   NO-ERROR.
   IF VALID-HANDLE(arbarttemph      ) THEN   DELETE OBJECT  arbarttemph     NO-ERROR. 
   IF VALID-HANDLE(avtalaonrtemph   ) THEN   DELETE OBJECT  avtalaonrtemph  NO-ERROR. 
   IF VALID-HANDLE(priotemph        ) THEN   DELETE OBJECT  priotemph       NO-ERROR. 
   IF VALID-HANDLE(aonrtidperstemph  ) THEN   DELETE OBJECT  aonrtidperstemph NO-ERROR. 
   IF VALID-HANDLE(dagboktemph      ) THEN   DELETE OBJECT  dagboktemph      NO-ERROR.
   IF VALID-HANDLE(anvandartemph      ) THEN   DELETE OBJECT  anvandartemph      NO-ERROR.
   IF VALID-HANDLE(avtaodattemph      ) THEN   DELETE OBJECT  avtaodattemph      NO-ERROR.
   IF VALID-HANDLE(personaltemph      ) THEN   DELETE OBJECT  personaltemph      NO-ERROR.
   
   ASSIGN
   personaltemph   = ?
   avtaodattemph   = ?
   ansvaraotemph   = ?
   beratemph       = ?
   bestkundallth   = ?
   bestkundextrah  = ?
   projtemph       = ?
   gatillh         = ?
   anlaggtemph     = ?
   aonrkonttemph   = ?
   aotidslagtemph  = ?
   arbarttemph     = ?
   avtalaonrtemph  = ?
   priotemph       = ?
   aonrtidperstemph = ?
   dagboktemph     = ?
   anvandartemph   = ?.
   {BORTBRWPROC.I}   
   IF VALID-HANDLE(anvapph) THEN DO:
      RUN avs_UI IN anvapph.
      DELETE PROCEDURE anvapph NO-ERROR.
   END.         
   IF VALID-HANDLE(bortaoapph) THEN DELETE PROCEDURE bortaoapph.      
   IF VALID-HANDLE(fbestapph) THEN DELETE PROCEDURE fbestapph.      
   IF VALID-HANDLE(nyttaoapph) THEN DO:
      RUN borthandle_UI IN nyttaoapph.
      DELETE PROCEDURE nyttaoapph NO-ERROR.
      nyttaoapph = ?. 
   END.      
   IF VALID-HANDLE(nyttaoejapph) THEN DELETE PROCEDURE nyttaoejapph NO-ERROR.   
   IF VALID-HANDLE(avtaodatapph) THEN DELETE PROCEDURE avtaodatapph NO-ERROR.   
   
END PROCEDURE.

