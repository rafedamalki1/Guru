/*IFSWEBSINFRA.P*/

{INFRAIFSTEMP.I}
DEFINE TEMP-TABLE meddtemp NO-UNDO
   FIELD SDATUM AS DATE
   FIELD EMOTAGET AS LOGICAL
   FIELD MEDD AS CHARACTER
   FIELD MOTTAGARE AS CHARACTER
   FIELD SANDARE AS CHARACTER
   INDEX SANDARE SANDARE.




PROCEDURE aonrin_UI :
   DEFINE INPUT PARAMETER TABLE FOR WORK_ORDER.
   DEFINE OUTPUT PARAMETER resultvar AS CHARACTER NO-UNDO.
   DO ON ERROR UNDO, LEAVE:
           
      FOR EACH WORK_ORDER:
         FIND FIRST OMRADETAB WHERE OMRADETAB.ORGIDNUM  = WORK_ORDER.ORG_CODE NO-LOCK NO-ERROR.
         
         IF AVAILABLE OMRADETAB THEN DO:
            FIND FIRST AONRTAB WHERE AONRTAB.AONR = WORK_ORDER.WO_NO AND AONRTAB.DELNR = 0 EXCLUSIVE-LOCK NO-ERROR.
            IF NOT AVAILABLE AONRTAB THEN DO:
               CREATE AONRTAB.
               ASSIGN
               AONRTAB.AONR          = WORK_ORDER.WO_NO 
               AONRTAB.DELNR         = 0
               AONRTAB.OMRADE        = OMRADETAB.OMRADE. 
               AONRTAB.BESTID        = AONRTAB.OMRADE.
               RUN beredare_UI.
            END.
            WORK_ORDER.WO_DESCR = REPLACE(WORK_ORDER.WO_DESCR,"\","").
            WORK_ORDER.WO_DESCR = REPLACE(WORK_ORDER.WO_DESCR,"/","").
            WORK_ORDER.WO_DESCR = REPLACE(WORK_ORDER.WO_DESCR,":","").
            WORK_ORDER.WO_DESCR = REPLACE(WORK_ORDER.WO_DESCR,"*","x").
            WORK_ORDER.WO_DESCR = REPLACE(WORK_ORDER.WO_DESCR,">","").
            WORK_ORDER.WO_DESCR = REPLACE(WORK_ORDER.WO_DESCR,"<","").
            WORK_ORDER.WO_DESCR = REPLACE(WORK_ORDER.WO_DESCR,"|","").
            ASSIGN
            AONRTAB.ORT           = WORK_ORDER.WO_DESCR
            AONRTAB.OMRADE        = OMRADETAB.OMRADE.
            IF WORK_ORDER.STATE = "FINISHED" THEN DO:
               IF AONRTAB.AONRAVDATUM NE 01/01/91 THEN.
               ELSE DO:
                  AONRTAB.AONRAVDATUM = TODAY.
                  RUN ejavslut_UI (INPUT FALSE).
                  RUN TLAGAUTO.P (INPUT "AUTOMATISKT", INPUT RECID(AONRTAB), INPUT "AONRAVSL").
               END.      
            END.
            ELSE IF WORK_ORDER.STATE = "RELEASED" THEN DO:
               IF AONRTAB.AONRAVDATUM = 01/01/91 THEN.
               ELSE DO:
                  AONRTAB.AONRAVDATUM = 01/01/91. 
                  RUN ejavslut_UI (INPUT TRUE).
                  RUN TLAGAUTO.P (INPUT "AUTOMATISKT", INPUT RECID(AONRTAB), INPUT "AONRAVSL").
               END.      
            END.
            RUN TLAGAUTO.P (INPUT "AUTOMATISKT", INPUT RECID(AONRTAB), INPUT WORK_ORDER.STATE).          
         END.
         ELSE DO:
            IF resultvar = "" THEN resultvar = "Finns inte i Guru:".
            resultvar = resultvar + " " + WORK_ORDER.ORG_CODE.
         END.
      END.   
      IF resultvar = "" THEN resultvar = "OK!".
      
      CATCH err AS Progress.Lang.Error :
    	 resultvar = "Kunde ej läsa in, kontrollera SOAP meddelandet.Fel i aonrin_UI".
      END CATCH.
       
   END.
END PROCEDURE.

PROCEDURE tidlagekoll_UI :
   DEFINE INPUT  PARAMETER tlagevar AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER tlagenamn AS CHARACTER NO-UNDO.
   FIND FIRST TIDSLAGEN WHERE TIDSLAGEN.IDTIDLAG = tlagevar NO-LOCK NO-ERROR.
   IF NOT AVAILABLE TIDSLAGEN THEN DO:
      CREATE TIDSLAGE.
      ASSIGN
      TIDSLAGEN.AKTIVITET1 = "Ja"
      TIDSLAGEN.IDTIDLAG = tlagevar
      TIDSLAGEN.TIDLAGE = tlagenamn.
   END.
END PROCEDURE.

PROCEDURE  beredare_UI :
   FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = WORK_ORDER.WORK_LEADER_SIGN NO-LOCK NO-ERROR.   
   IF AVAILABLE ANVANDARE THEN DO:
      FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = ANVANDARE.PERSONALKOD NO-LOCK NO-ERROR.             
   END.
   IF NOT AVAILABLE PERSONALTAB THEN DO:
      FIND FIRST PERSONALTAB NO-LOCK NO-ERROR.
   END.
   IF AVAILABLE PERSONALTAB THEN DO:
      ASSIGN       
      AONRTAB.STARTDAG = PERSONALTAB.PERSONALKOD
      AONRTAB.BEREDARE   = PERSONALTAB.PERSONALKOD
      AONRTAB.ARBANSVARIG = PERSONALTAB.PERSONALKOD. 
   END.
   RELEASE PERSONALTAB NO-ERROR.
END PROCEDURE.

PROCEDURE ejavslut_UI : 
   DEFINE INPUT PARAMETER aktivvar AS LOGICAL NO-UNDO.
   FOR EACH KALKAONR WHERE KALKAONR.AONR = AONRTAB.AONR AND KALKAONR.DELNR = AONRTAB.DELNR NO-LOCK,
   EACH FASTSPEC WHERE FASTSPEC.KALKNR = KALKAONR.KALKNR EXCLUSIVE-LOCK.
      FASTSPEC.AKTIV = aktivvar.         
   END.
   FOR EACH KALKSPEC WHERE KALKSPEC.AONR = AONRTAB.AONR AND KALKSPEC.DELNR = AONRTAB.DELNR USE-INDEX AONR EXCLUSIVE-LOCK.
      KALKSPEC.AKTIV = aktivvar.         
   END.
   FOR EACH KALKAONR WHERE KALKAONR.AONR = AONRTAB.AONR AND KALKAONR.DELNR = AONRTAB.DELNR USE-INDEX AONR EXCLUSIVE-LOCK.
      KALKAONR.AKTIV = aktivvar.
   END.
   DO TRANSACTION:
      FIND FIRST BEREDNING WHERE BEREDNING.AONR = AONRTAB.AONR AND BEREDNING.DELNR = AONRTAB.DELNR 
      USE-INDEX AONR EXCLUSIVE-LOCK NO-ERROR.
      IF AVAILABLE BEREDNING THEN BEREDNING.AKTIV = aktivvar.  
      FIND FIRST AOVARD WHERE AOVARD.AONR = AONRTAB.AONR AND AOVARD.DELNR = AONRTAB.DELNR
      USE-INDEX AONR NO-LOCK NO-ERROR.
      IF AVAILABLE AOVARD THEN DO:
         IF AOVARD.VARDNR = ? THEN.
         ELSE DO:
            FIND FIRST VARDERING WHERE VARDERING.VARDNR = AOVARD.VARDNR USE-INDEX VARDNR
            EXCLUSIVE-LOCK NO-ERROR.
            IF AVAILABLE VARDERING THEN DO:
               ASSIGN VARDERING.AKTIV = aktivvar.
            END.
         END.
      END.            
   END.
   RELEASE KALKSPEC NO-ERROR.
   RELEASE FASTSPEC NO-ERROR.
   RELEASE KALKAONR NO-ERROR.
   RELEASE BEREDNING NO-ERROR.
   RELEASE VARDERING NO-ERROR.
END PROCEDURE.

PROCEDURE sendwork_UI:
   DEFINE INPUT PARAMETER TABLE FOR RECEIVED_ORDER.
   DEFINE OUTPUT PARAMETER resultvar AS CHARACTER NO-UNDO.
   DEFINE VARIABLE inkberh AS HANDLE NO-UNDO.
   DEFINE VARIABLE orderanv AS CHARACTER NO-UNDO.
   DEFINE VARIABLE ifsmedd AS CHARACTER NO-UNDO.
   DO ON ERROR UNDO, LEAVE:
      FIND FIRST RECEIVED_ORDER.
   
      RUN INKBERAPP.P PERSISTENT SET inkberh. 
      FOR EACH RECEIVED_ORDER WHERE RECEIVED_ORDER.STATE = "FAILED":
         RUN infraahlejok_UI IN inkberh (INPUT RECEIVED_ORDER.WO_NO,INPUT 0,INPUT RECEIVED_ORDER.GURU_ORDER_NO,
         INPUT RECEIVED_ORDER.INMESSAGE,OUTPUT resultvar,OUTPUT orderanv).
         IF orderanv NE "" THEN  RUN gurumed_UI (INPUT orderanv,INPUT RECEIVED_ORDER.WO_NO + " " + RECEIVED_ORDER.GURU_ORDER_NO + " " + RECEIVED_ORDER.INMESSAGE).     
      END.
      FOR EACH RECEIVED_ORDER WHERE RECEIVED_ORDER.STATE = "CREATED":
         RUN infraahlok_UI IN inkberh (INPUT RECEIVED_ORDER.WO_NO,INPUT 0,INPUT RECEIVED_ORDER.GURU_ORDER_NO,
         INPUT RECEIVED_ORDER.REQUISITION_NO, INPUT "",OUTPUT resultvar,OUTPUT orderanv).
         IF orderanv NE "" THEN  RUN gurumed_UI (INPUT orderanv,INPUT RECEIVED_ORDER.WO_NO + " " + RECEIVED_ORDER.GURU_ORDER_NO + " " + RECEIVED_ORDER.INMESSAGE).
      END.  
      RUN skapmed_UI. 
      IF VALID-HANDLE(inkberh) THEN DO: 
         RUN InkAvs_UI IN inkberh.
         DELETE PROCEDURE inkberh NO-ERROR.
      END.   
      CATCH err AS Progress.Lang.Error :        
         resultvar = "Kunde ej läsa in, kontrollera SOAP meddelandet. Fel i sendwork_UI".	
      END CATCH.
      
   END.      
END PROCEDURE.

PROCEDURE skapmed_UI :
   FOR EACH meddtemp:
      DO TRANSACTION:
         CREATE MEDDELANDE.
         BUFFER-COPY meddtemp TO MEDDELANDE.         
      END.
   END.   
   RELEASE MEDDELANDE NO-ERROR.
END PROCEDURE.

PROCEDURE gurumed_UI :
   DEFINE INPUT  PARAMETER orderanv AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER inmedd AS CHARACTER NO-UNDO.
   FIND FIRST meddtemp WHERE meddtemp.MOTTAGARE = orderanv NO-LOCK NO-ERROR.
   IF NOT AVAILABLE meddtemp THEN CREATE meddtemp.
   ASSIGN 
   meddtemp.SDATUM = TODAY
   meddtemp.EMOTAGET = FALSE
   meddtemp.MEDD = meddtemp.MEDD  + CHR(10) + inmedd 
   meddtemp.MOTTAGARE = orderanv 
   meddtemp.SANDARE = "IFSresponse".
   
END PROCEDURE.
PROCEDURE sendresponse_UI :
   DEFINE INPUT PARAMETER TABLE FOR CREATED_PURCHASE_ORDER.
   DEFINE OUTPUT PARAMETER resultvar AS CHARACTER NO-UNDO.
   DEFINE VARIABLE resultvarhj AS CHARACTER NO-UNDO.
   DEFINE VARIABLE inkberh AS HANDLE NO-UNDO.
   DEFINE VARIABLE orderanv AS CHARACTER NO-UNDO.
   DO ON ERROR UNDO, LEAVE:
      FIND FIRST CREATED_PURCHASE_ORDER.
      
      RUN INKBERAPP.P PERSISTENT SET inkberh.
      FOR EACH CREATED_PURCHASE_ORDER :
         RUN infraahlok_UI IN inkberh 
         (INPUT CREATED_PURCHASE_ORDER.WO_NO,
         INPUT 0,
         INPUT CREATED_PURCHASE_ORDER.GURU_ORDER_NO,
         INPUT "", 
         INPUT CREATED_PURCHASE_ORDER.PURCHASE_ORDER_NO,
         OUTPUT resultvarhj,OUTPUT orderanv).
         resultvar = resultvarhj + " " + resultvar.
      END.
      FOR EACH CREATED_PURCHASE_ORDER :
         RUN infraahmail_UI IN inkberh (INPUT CREATED_PURCHASE_ORDER.WO_NO,INPUT 0,INPUT CREATED_PURCHASE_ORDER.GURU_ORDER_NO, OUTPUT resultvarhj).
         resultvar = resultvarhj + " " + resultvar.
      END.
      IF VALID-HANDLE(inkberh) THEN DO: 
         RUN InkAvs_UI IN inkberh.
         DELETE PROCEDURE inkberh NO-ERROR.
      END.   
      
      CATCH err AS Progress.Lang.Error :
         resultvar = "Kunde ej läsa in, kontrollera SOAP meddelandet. Fel i sendresponse_UI".
      END CATCH.
      
   END.   
END PROCEDURE.


