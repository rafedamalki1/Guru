/*BESTUMEAAPP.P*/
{STARTFORAPP.I}
{ANMARKD.I}
{DEFBESTU.I} 
{KONVALTEMP.I}
DEFINE TEMP-TABLE mtrl_temp3 NO-UNDO LIKE mtrl_temp2
   FIELD MTRLTEXT AS CHARACTER
   INDEX MTRLTEXT MTRLTEXT.
DEFINE VARIABLE priset AS LOGICAL NO-UNDO.
DEFINE VARIABLE detvar AS LOGICAL NO-UNDO. 
DEFINE VARIABLE datvar AS DATE NO-UNDO.  
DEFINE VARIABLE leveransdatum AS DATE FORMAT "9999-99-99" NO-UNDO.
DEFINE VARIABLE alla AS LOGICAL NO-UNDO.  
DEFINE VARIABLE vald_lev AS CHARACTER NO-UNDO.  
DEFINE VARIABLE anmark AS CHARACTER NO-UNDO.
DEFINE VARIABLE epost AS CHARACTER NO-UNDO.
DEFINE VARIABLE skrivut AS LOGICAL NO-UNDO.
DEFINE VARIABLE musz AS LOGICAL NO-UNDO. 
DEFINE VARIABLE valaonr AS CHARACTER NO-UNDO.
DEFINE VARIABLE valdelnr AS INTEGER NO-UNDO.
DEFINE VARIABLE valort AS CHARACTER NO-UNDO. 
DEFINE VARIABLE valomrade AS CHARACTER NO-UNDO.   
DEFINE VARIABLE musz2 AS LOGICAL NO-UNDO.
DEFINE VARIABLE kalkrow AS ROWID NO-UNDO.
DEFINE VARIABLE mailvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE edivar AS LOGICAL NO-UNDO.
DEFINE VARIABLE EDITOR_MEDD AS CHARACTER  VIEW-AS EDITOR SCROLLBAR-VERTICAL SIZE 53 BY 9 FONT 25 NO-UNDO.
DEFINE VARIABLE status-ok AS LOGICAL NO-UNDO.        
DEFINE VARIABLE arrhjsum AS DECIMAL NO-UNDO.    
DEFINE VARIABLE str AS CHARACTER FORMAT "X(130)" NO-UNDO. 
DEFINE VARIABLE str1 AS CHARACTER FORMAT "X(130)" NO-UNDO.
DEFINE VARIABLE str2 AS CHARACTER FORMAT "X(130)" NO-UNDO. 
DEFINE VARIABLE str0 AS CHARACTER FORMAT "X(130)" NO-UNDO.
DEFINE VARIABLE totalt AS DECIMAL NO-UNDO. 
DEFINE VARIABLE totalt2 AS DECIMAL NO-UNDO. 
DEFINE VARIABLE leverant AS CHARACTER NO-UNDO.
DEFINE VARIABLE lev AS CHARACTER NO-UNDO.  
DEFINE VARIABLE sumpris AS DECIMAL NO-UNDO.    
DEFINE VARIABLE totalsum AS DECIMAL NO-UNDO.
DEFINE VARIABLE sumantal AS INTEGER NO-UNDO.
DEFINE VARIABLE xkordvar AS INTEGER NO-UNDO. 
DEFINE VARIABLE stopvar AS LOGICAL NO-UNDO. 
DEFINE VARIABLE prisvar AS INTEGER NO-UNDO.
DEFINE VARIABLE antvar AS INTEGER NO-UNDO. 
DEFINE VARIABLE antvar2 AS INTEGER NO-UNDO.  
DEFINE VARIABLE firstlev AS CHARACTER NO-UNDO.   
DEFINE VARIABLE mtrlrak AS INTEGER NO-UNDO.  
DEFINE VARIABLE mtrlrak2 AS INTEGER NO-UNDO.
DEFINE VARIABLE radrak AS INTEGER NO-UNDO.   
DEFINE VARIABLE langd AS INTEGER NO-UNDO.  
DEFINE VARIABLE upp AS LOGICAL NO-UNDO.            
DEFINE VARIABLE prognamn AS CHARACTER FORMAT "X(41)" NO-UNDO.
DEFINE VARIABLE prognamn2 AS CHARACTER FORMAT "X(41)" NO-UNDO.
DEFINE VARIABLE skick AS LOGICAL NO-UNDO.
DEFINE VARIABLE efel AS CHARACTER FORMAT "X(30)" NO-UNDO.
DEFINE VARIABLE bytgrupp AS CHARACTER NO-UNDO. 
DEFINE VARIABLE enrvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE utrec AS RECID NO-UNDO.
DEFINE VARIABLE utrec2 AS RECID NO-UNDO.
DEFINE VARIABLE kant AS INTEGER NO-UNDO.
DEFINE VARIABLE tant AS INTEGER NO-UNDO.
DEFINE VARIABLE uppvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE sidlangd AS INTEGER NO-UNDO.
DEFINE VARIABLE ediraknare AS INTEGER NO-UNDO.
DEFINE VARIABLE anmlangd AS INTEGER NO-UNDO.
DEFINE VARIABLE idvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE numsok AS LOGICAL NO-UNDO.
DEFINE VARIABLE byggnr AS INTEGER NO-UNDO.
DEFINE VARIABLE skapkab AS INTEGER NO-UNDO.
DEFINE VARIABLE bestoff AS CHARACTER NO-UNDO.
DEFINE VARIABLE delbest AS LOGICAL NO-UNDO.
DEFINE VARIABLE aonrvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE prognamnvar AS CHARACTER FORMAT "X(50)" NO-UNDO.                
DEFINE VARIABLE prognamnkopia AS CHARACTER NO-UNDO. 
DEFINE VARIABLE loggfil AS CHARACTER NO-UNDO.
DEFINE VARIABLE filnamnstart AS CHARACTER NO-UNDO.
DEFINE VARIABLE kommando AS CHARACTER NO-UNDO.
DEFINE VARIABLE kommandoprog AS CHARACTER NO-UNDO.
DEFINE VARIABLE utvar AS CHARACTER NO-UNDO.

DEFINE VARIABLE aovar AS CHARACTER NO-UNDO.
DEFINE VARIABLE extra AS LOGICAL NO-UNDO.
DEFINE VARIABLE nextvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE datvar2 AS DATE NO-UNDO.

DEFINE TEMP-TABLE prev_temp    
    FIELD ENR AS CHARACTER
    FIELD BENAMNING AS CHARACTER
    FIELD ENHET AS CHARACTER
    FIELD PRIS AS DECIMAL       
    FIELD ANTAL AS INTEGER     
    FIELD BESTANT AS INTEGER    
    FIELD LEVKOD AS CHARACTER 
    FIELD BERLEV AS CHARACTER        
    FIELD DBEST AS CHARACTER
    FIELD DATUM AS DATE    
    INDEX DATUM DATUM ASCENDING   
    INDEX LEV ENR LEVKOD ASCENDING
    INDEX ENR IS PRIMARY ENR ASCENDING. 
 
DEFINE TEMP-TABLE next_temp    
    FIELD ENR AS CHARACTER
    FIELD BENAMNING AS CHARACTER
    FIELD ENHET AS CHARACTER
    FIELD PRIS AS DECIMAL       
    FIELD ANTAL AS INTEGER     
    FIELD BESTANT AS INTEGER    
    FIELD LEVKOD AS CHARACTER 
    FIELD BERLEV AS CHARACTER        
    FIELD DBEST AS CHARACTER
    FIELD DATUM AS DATE    
    INDEX DATUM DATUM ASCENDING  
    INDEX LEV ENR LEVKOD ASCENDING
    INDEX ENR IS PRIMARY ENR ASCENDING.            
    
    
DEFINE TEMP-TABLE lin_next    
    FIELD ENR AS CHARACTER
    FIELD BENAMNING AS CHARACTER
    FIELD ENHET AS CHARACTER
    FIELD PRIS AS DECIMAL       
    FIELD ANTAL AS INTEGER     
    FIELD BESTANT AS INTEGER    
    FIELD LEVKOD AS CHARACTER 
    FIELD BERLEV AS CHARACTER        
    FIELD DBEST AS CHARACTER
    FIELD DATUM AS DATE    
    INDEX DATUM DATUM ASCENDING  
    INDEX LEV ENR LEVKOD ASCENDING
    INDEX ENR IS PRIMARY ENR ASCENDING.            
    
DEFINE TEMP-TABLE lin_prev    
    FIELD ENR AS CHARACTER
    FIELD BENAMNING AS CHARACTER
    FIELD ENHET AS CHARACTER
    FIELD PRIS AS DECIMAL       
    FIELD ANTAL AS INTEGER     
    FIELD BESTANT AS INTEGER    
    FIELD LEVKOD AS CHARACTER 
    FIELD BERLEV AS CHARACTER        
    FIELD DBEST AS CHARACTER
    FIELD DATUM AS DATE    
    INDEX DATUM DATUM ASCENDING  
    INDEX LEV ENR LEVKOD ASCENDING
    INDEX ENR IS PRIMARY ENR ASCENDING. 

DEFINE BUFFER ebestbuff FOR ebest_mtrl.


loggfil     = "D:\delad\PRO9S\autotid.txt". 
prognamnvar = "D:\delad\PRO9S\EXPORT_XAL\". 
prognamnkopia = "D:\delad\PRO9s\EXKOPIA\".
filnamnstart = "XALBEST" + STRING(TODAY,"99999999") + STRING(TIME) + ".TXT".
FIND FIRST FORETAG WHERE NO-LOCK NO-ERROR.
IF FORETAG.FORETAG = "ELPA" THEN DO:
   ASSIGN
   loggfil     = "C:\autotid.txt"
   prognamnvar = "\\PC112\DELAD\PRO9\GURU\EXPORT\"
   prognamnkopia = "\\PC112\DELAD\PRO9\GURU\EXKOPIA\".
END.
DEFINE TEMP-TABLE lin_temp    
    FIELD ENR LIKE BERLINKAB.ENR
    FIELD BENAMNING LIKE BERLINKAB.BENAMNING
    FIELD ENHET LIKE BERLINKAB.ENHET
    FIELD PRIS LIKE BERLINKAB.PRIS       
    FIELD METER LIKE BERLINKAB.METER
    FIELD TOTMETER LIKE BERLINKAB.TOTMETER
    FIELD LEDARE LIKE BERLINKAB.LEDARE
    FIELD UPPLAG LIKE BERLINKAB.UPPLAG             
    FIELD LEVKOD LIKE BERLINKAB.LEVKOD     
    FIELD DATUM LIKE BERLINKAB.DATUM    
    FIELD FORNR AS CHARACTER
    FIELD LINNR AS CHARACTER
    INDEX ENR IS PRIMARY ENR ASCENDING.   


DEFINE QUERY mtrlprisq FOR BERMTRL.
DEFINE QUERY upplq FOR BERVAL.
DEFINE QUERY berq FOR BERUPP.
DEFINE QUERY gruppq FOR KONSTGRUPP.
DEFINE QUERY beridq FOR BERID.
DEFINE QUERY skyddq FOR KSKYDD.

DEFINE BUFFER idbuff FOR id_temp.
DEFINE BUFFER mtrlbuff FOR mtrl_temp3. 
DEFINE BUFFER gruppbuff FOR grupp_temp.
DEFINE BUFFER linbuff FOR lin_upp.
DEFINE BUFFER skyddbuff FOR skydd_temp2.

DEFINE TEMP-TABLE Body1
   FIELD UT AS CHARACTER.
   
DEFINE TEMP-TABLE Body2
   FIELD UT AS CHARACTER.    


PROCEDURE skapalista_UI.
   DEFINE INPUT PARAMETER bestoff2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER vald_lev2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER kalkrow2 AS ROWID NO-UNDO.
   DEFINE INPUT PARAMETER valaonr2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER detvar2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER mailvar2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER edivar2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER priset2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER alla2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER datvar2 AS DATE NO-UNDO.
   DEFINE OUTPUT PARAMETER musz2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR kon_val.
   DEFINE INPUT PARAMETER delbest2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER levdat AS DATE FORMAT "9999-99-99" NO-UNDO.
   DEFINE INPUT PARAMETER anmark2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER epost2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER globanv2 AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR tidut.
   EMPTY TEMP-TABLE mtrl_temp NO-ERROR. 
   EMPTY TEMP-TABLE mtrl_temp3 NO-ERROR. 
   EMPTY TEMP-TABLE uppl_temp NO-ERROR. 
   EMPTY TEMP-TABLE grupp_temp NO-ERROR. 
   EMPTY TEMP-TABLE grupp_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE lin_upp NO-ERROR. 
   EMPTY TEMP-TABLE skydd_temp NO-ERROR. 
   EMPTY TEMP-TABLE skydd_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE tidut NO-ERROR. 
   ASSIGN
   Guru.Konstanter:globanv = globanv2
   bestoff = bestoff2
   vald_lev = vald_lev2
   kalkrow = kalkrow2
   valaonr =  valaonr2  
   valomrade = valomrade2
   priset =   priset2   
   detvar =   detvar2   
   mailvar =  mailvar2  
   edivar =   edivar2
   alla = alla2
   datvar = datvar2
   delbest = delbest2
   leveransdatum = levdat
   epost = REPLACE(epost2,"|"," ")
   anmark = REPLACE(anmark2,"|"," ").     
   
   
   
   str="=====". 
   str1 ="*****".  
   str0 = "-----".     


   /*RUN huvud_UI.*/

   IF musz = FALSE THEN RUN klar_UI.
   /*
   RUN skapa_UI.
   RUN summa_UI.                                 
   */
   musz2 = musz.
END PROCEDURE.

PROCEDURE klar_UI :
     
   mtrlrak = 1.
   mtrlrak2 = 0.
   radrak = 0.   
   IF delbest = TRUE THEN DO:
      FOR EACH kon_val:       
         OPEN QUERY mq FOR EACH BERMTRL WHERE BERMTRL.AONR = kon_val.BERAONR AND BERMTRL.OMRADE = kon_val.OMRADE
         AND BERMTRL.NUM = kon_val.NUM NO-LOCK.
         GET FIRST mq NO-LOCK.
         DO WHILE AVAILABLE(BERMTRL):
            IF BERMTRL.ANTAL > 0 THEN DO:         
               CREATE mtrl_temp.
               ASSIGN
               mtrl_temp.FORNR = BERMTRL.AONR /*BEREDNINGSNUMMER*/
               mtrl_temp.LINNR = BERMTRL.OMRADE /*OMRÅDE*/
               mtrl_temp.ENR = BERMTRL.ENR
               mtrl_temp.BENAMNING = BERMTRL.BENAMNING
               mtrl_temp.ENHET = BERMTRL.ENHET         
               mtrl_temp.PRIS = BERMTRL.PRIS
               mtrl_temp.ANTAL = BERMTRL.ANTAL                 
               mtrl_temp.LEVKOD = BERMTRL.LEVKOD
               mtrl_temp.MTRLTEXT = BERMTRL.MTRLTEXT.                
            END.
            GET NEXT mq NO-LOCK.
         END.
         CLOSE QUERY mq.
      END.
      FOR EACH mtrl_temp BREAK BY mtrl_temp.FORNR BY mtrl_temp.ENR BY mtrl_temp.MTRLTEXT:                
         ACCUMULATE mtrl_temp.ANTAL (TOTAL BY mtrl_temp.FORNR BY mtrl_temp.ENR BY mtrl_temp.MTRLTEXT).       
         IF LAST-OF(mtrl_temp.ENR) THEN DO:
            CREATE mtrl_temp3.
            ASSIGN 
            mtrl_temp3.FORNR = mtrl_temp.FORNR /*BEREDNINGSNUMMER*/
            mtrl_temp3.LINNR = mtrl_temp.LINNR /*OMRÅDE*/
            mtrl_temp3.ENR = mtrl_temp.ENR
            mtrl_temp3.BENAMNING = mtrl_temp.BENAMNING 
            mtrl_temp3.ENHET = mtrl_temp.ENHET 
            mtrl_temp3.LEVKOD = mtrl_temp.LEVKOD                        
            mtrl_temp3.MTRLTEXT = mtrl_temp.MTRLTEXT
            mtrl_temp3.ANTAL = (ACCUM TOTAL BY mtrl_temp.MTRLTEXT mtrl_temp.ANTAL).            
         END.     
      END.                     
      FOR EACH mtrl_temp3:
         FIND FIRST BEREDNING WHERE BEREDNING.BERAONR = mtrl_temp3.FORNR AND 
         BEREDNING.OMRADE = mtrl_temp3.LINNR NO-LOCK NO-ERROR.
         ASSIGN
         mtrl_temp3.NATNR = BEREDNING.AONR /*AONR*/
         mtrl_temp3.FRI1 = BEREDNING.DELNR. /*DELNR*/
      END.
   END.
   ELSE DO:
      IF detvar = TRUE THEN DO:         
         FIND FIRST BEREDNING WHERE BEREDNING.BERAONR = valaonr AND BEREDNING.OMRADE = valomrade
         NO-LOCK NO-ERROR.
         FIND LAST BERMTRL WHERE BERMTRL.AONR = valaonr AND 
         BERMTRL.OMRADE = valomrade AND BERMTRL.INKOP = FALSE 
         USE-INDEX DATUM NO-LOCK NO-ERROR.
         IF AVAILABLE BERMTRL THEN DO:
            datvar = BERMTRL.DATUM.
         END.
         aonrvar = BEREDNING.AONR.
         FOR EACH BEREDNING WHERE BEREDNING.AONR = aonrvar NO-LOCK: 
            FIND LAST BERMTRL WHERE BERMTRL.AONR = BEREDNING.BERAONR AND 
            BERMTRL.OMRADE = BEREDNING.OMRADE AND BERMTRL.INKOP = FALSE 
            USE-INDEX DATUM NO-LOCK NO-ERROR.
            IF AVAILABLE BERMTRL THEN DO:
               IF BERMTRL.DATUM > datvar THEN datvar = BERMTRL.DATUM.
            END.
         END.
         FOR EACH BEREDNING WHERE BEREDNING.AONR = aonrvar NO-LOCK: 
            valaonr = BEREDNING.BERAONR.
            RUN bermtrl_UI.
            RUN kskydd_UI.
            RUN berlinkab_UI.
         END.
         RUN sumlin_UI.
         RUN summa_UI.  
         FOR EACH mtrl_temp3:
            FIND FIRST BEREDNING WHERE BEREDNING.BERAONR = mtrl_temp3.FORNR AND 
            BEREDNING.OMRADE = mtrl_temp3.LINNR NO-LOCK NO-ERROR.
            ASSIGN
            mtrl_temp3.NATNR = BEREDNING.AONR /*AONR*/
            mtrl_temp3.FRI1 = BEREDNING.DELNR. /*DELNR*/
         END.
      END.
      ELSE DO:      
         RUN komplett_UI.
      END.
   END.
   OUTPUT TO VALUE(prognamnvar + filnamnstart) APPEND.
   PUT "GURUMATERIELBESTÄLLNING" AT 1 SKIP.
   FOR EACH mtrl_temp3 BY mtrl_temp3.ENR:       
      RUN utskap_UI.
      PUT UNFORMATTED utvar AT 1 SKIP.      
      
   END.
   OUTPUT CLOSE.
   OUTPUT TO VALUE(prognamnkopia + filnamnstart) APPEND.
   PUT TODAY AT 1 "NY BEST"  SKIP.
   FOR EACH mtrl_temp3 BY mtrl_temp3.ENR:       
      RUN utskap_UI.      
      PUT UNFORMATTED utvar AT 1 SKIP.      
   END.
   OUTPUT CLOSE.
     
END PROCEDURE.

PROCEDURE utskap_UI :
   DEFINE VARIABLE datchar AS CHARACTER FORMAT "X(10)" NO-UNDO.
   datchar = STRING(YEAR(leveransdatum),"9999").
   datchar = datchar + "-" + STRING(MONTH(leveransdatum),"99").
   datchar = datchar + "-" + STRING(DAY(leveransdatum),"99").


   ASSIGN          
   utvar = STRING(RIGHT-TRIM(mtrl_temp3.NATNR)).
   IF mtrl_temp3.FRI1 = 1 THEN utvar = utvar + "HSP" + "|".
   ELSE IF mtrl_temp3.FRI1 = 2 THEN utvar = utvar + "LSP" + "|".
   ELSE IF mtrl_temp3.FRI1 = 3 THEN utvar = utvar + "STN" + "|".
   ELSE utvar = utvar + "|".
   utvar = utvar + STRING(RIGHT-TRIM(mtrl_temp3.ENR)) + "|" + TRIM(STRING(mtrl_temp3.ANTAL)) + "|" + datchar + "|".           
   utvar = utvar + STRING(RIGHT-TRIM(mtrl_temp3.MTRLTEXT)) + "|" + STRING(RIGHT-TRIM(globanv)).
   /*STRING(RIGHT-TRIM(mtrl_temp3.BENAMNING)) + "|" + */      
   /*STRING(RIGHT-TRIM(mtrl_temp3.ENHET)) + "|" +        */       
END PROCEDURE.

PROCEDURE mtrl_UI :
   CREATE mtrl_temp.
   ASSIGN
   mtrl_temp.MTRLTEXT = BERMTRL.MTRLTEXT
   mtrl_temp.FORNR = BERMTRL.AONR /*BEREDNINGSNUMMER*/
   mtrl_temp.LINNR = BERMTRL.OMRADE /*OMRÅDE*/
   mtrl_temp.ENR = BERMTRL.ENR
   mtrl_temp.BENAMNING = BERMTRL.BENAMNING
   mtrl_temp.ENHET = BERMTRL.ENHET         
   mtrl_temp.PRIS = BERMTRL.PRIS
   mtrl_temp.ANTAL = BERMTRL.ANTAL                 
   mtrl_temp.LEVKOD = BERMTRL.LEVKOD.  
   IF globforetag = "ELPA" {GLOBVES.I} THEN DO:
      IF BERMTRL.LEVKOD = "12" OR BERMTRL.LEVKOD = "13"  THEN mtrl_temp.LEVKOD = "16".
   END.
   ELSE IF globforetag = "UMEA" THEN DO:
      mtrl_temp.LEVKOD = "1".
   END.
END PROCEDURE.

PROCEDURE skydd_UI :
   CREATE mtrl_temp.
   ASSIGN
   mtrl_temp.FORNR = KSKYDD.AONR /*BEREDNINGSNUMMER*/
   mtrl_temp.LINNR = KSKYDD.OMRADE /*OMRÅDE*/
   mtrl_temp.ENR = KSKYDD.ENR
   mtrl_temp.BENAMNING = KSKYDD.BENAMNING
   mtrl_temp.ENHET = KSKYDD.ENHET         
   mtrl_temp.PRIS = KSKYDD.PRIS
   mtrl_temp.ANTAL = KSKYDD.ANTAL * KSKYDD.METER    
   mtrl_temp.LEVKOD = KSKYDD.LEVKOD.   
   IF globforetag = "ELPA" {GLOBVES.I} THEN DO:
      IF KSKYDD.LEVKOD = "12" OR KSKYDD.LEVKOD = "13"  THEN mtrl_temp.LEVKOD = "16".
   END.
   ELSE IF globforetag = "UMEA" THEN DO:
      mtrl_temp.LEVKOD = "1".
   END.
END PROCEDURE.

PROCEDURE summa_UI : 
   FOR EACH mtrl_temp BREAK BY mtrl_temp.FORNR BY mtrl_temp.ENR BY mtrl_temp.MTRLTEXT:                
      ACCUMULATE mtrl_temp.ANTAL (TOTAL BY mtrl_temp.FORNR BY mtrl_temp.ENR BY mtrl_temp.MTRLTEXT).       
      IF LAST-OF(mtrl_temp.ENR) THEN DO:
         CREATE mtrl_temp3.
         ASSIGN 
         mtrl_temp3.FORNR = mtrl_temp.FORNR /*BEREDNINGSNUMMER*/
         mtrl_temp3.LINNR = mtrl_temp.LINNR /*OMRÅDE*/
         mtrl_temp3.ENR = mtrl_temp.ENR
         mtrl_temp3.BENAMNING = mtrl_temp.BENAMNING 
         mtrl_temp3.ENHET = mtrl_temp.ENHET 
         mtrl_temp3.LEVKOD = mtrl_temp.LEVKOD                        
         mtrl_temp3.MTRLTEXT = mtrl_temp.MTRLTEXT
         mtrl_temp3.ANTAL = (ACCUM TOTAL BY mtrl_temp.MTRLTEXT mtrl_temp.ANTAL).            
      END.     
   END.
END PROCEDURE.

PROCEDURE linor_UI :
   CREATE lin_temp.
   ASSIGN
   lin_temp.FORNR = BERLINKAB.AONR /*BEREDNINGSNUMMER*/
   lin_temp.LINNR = BERLINKAB.OMRADE /*OMRÅDE*/
   lin_temp.ENR = BERLINKAB.ENR
   lin_temp.BENAMNING = BERLINKAB.BENAMNING
   lin_temp.ENHET = BERLINKAB.ENHET         
   lin_temp.PRIS = BERLINKAB.PRIS
   lin_temp.METER = BERLINKAB.METER  
   lin_temp.LEDARE = BERLINKAB.LEDARE
   lin_temp.TOTMETER = BERLINKAB.TOTMETER     
   lin_temp.LEVKOD = BERLINKAB.LEVKOD
   lin_temp.UPPLAG = BERLINKAB.UPPLAG.   
   IF globforetag = "ELPA" {GLOBVES.I} THEN DO:
      IF BERLINKAB.LEVKOD = "12" OR BERLINKAB.LEVKOD = "13"  THEN lin_temp.LEVKOD = "16".
   END.
   ELSE IF globforetag = "UMEA" THEN DO:
      lin_temp.LEVKOD = "1".
   END.
END PROCEDURE.

PROCEDURE sumlin_UI :
   FOR EACH lin_temp WHERE lin_temp.TOTMETER > 0 AND
   lin_temp.UPPLAG = ?:
      DELETE lin_temp.
   END.
   FOR EACH lin_temp WHERE lin_temp.UPPLAG NE ? AND lin_temp.TOTMETER > 0:
      FOR EACH linbuff WHERE linbuff.ENR = lin_temp.ENR AND 
      linbuff.LEVKOD = lin_temp.LEVKOD AND linbuff.TOTMETER = 0:
         DELETE linbuff.
      END.
   END. 
   FOR EACH lin_temp WHERE lin_temp.UPPLAG = ?:
      lin_temp.TOTMETER = lin_temp.METER * lin_temp.LEDARE.
   END. 
   FOR EACH lin_temp BREAK BY lin_temp.FORNR BY lin_temp.ENR:                
      ACCUMULATE lin_temp.TOTMETER (TOTAL BY lin_temp.FORNR BY lin_temp.ENR).       
      IF LAST-OF(lin_temp.ENR) THEN DO:
         CREATE mtrl_temp.
         ASSIGN 
         mtrl_temp.FORNR = mtrl_temp.FORNR /*BEREDNINGSNUMMER*/
         mtrl_temp.LINNR = mtrl_temp.LINNR /*OMRÅDE*/
         mtrl_temp.ENR = mtrl_temp.ENR
         mtrl_temp.BENAMNING = mtrl_temp.BENAMNING 
         mtrl_temp.ENHET = mtrl_temp.ENHET 
         mtrl_temp.LEVKOD = mtrl_temp.LEVKOD                        
         mtrl_temp.ANTAL = (ACCUM TOTAL BY lin_temp.ENR lin_temp.TOTMETER).            
      END.     
   END.       
END PROCEDURE.
PROCEDURE bermtrl_UI :
   OPEN QUERY mtrlq FOR EACH BERMTRL WHERE BERMTRL.AONR = valaonr AND 
   BERMTRL.OMRADE = valomrade USE-INDEX OMR NO-LOCK.
   GET FIRST mtrlq NO-LOCK.
   DO WHILE AVAILABLE(BERMTRL):
      IF BERMTRL.ANTAL > 0 THEN DO:
         RUN mtrl_UI.
      END.      
      GET NEXT mtrlq NO-LOCK.     
   END.      
   CLOSE QUERY mtrlq.
END PROCEDURE.

PROCEDURE kskydd_UI :
   OPEN QUERY skyddq FOR EACH KSKYDD WHERE KSKYDD.AONR = valaonr AND 
   KSKYDD.OMRADE = valomrade AND KSKYDD.BERED = TRUE USE-INDEX OMR NO-LOCK.
   GET FIRST skyddq NO-LOCK.
   DO WHILE AVAILABLE(KSKYDD):      
      RUN skydd_UI.            
      GET NEXT skyddq NO-LOCK.     
   END.      
   CLOSE QUERY skyddq.
END PROCEDURE.

PROCEDURE berlinkab_UI :
   /*Linor/kablar*/
   OPEN QUERY linq FOR EACH BERLINKAB WHERE BERLINKAB.AONR = valaonr AND 
   BERLINKAB.OMRADE = valomrade AND BERLINKAB.KORTKOD = ? USE-INDEX OMR NO-LOCK.
   GET FIRST linq NO-LOCK.
   DO WHILE AVAILABLE(BERLINKAB):      
      RUN linor_UI.      
      GET NEXT linq NO-LOCK.     
   END.      
   CLOSE QUERY linq.
END PROCEDURE.

PROCEDURE komplett_UI :
   FIND FIRST BEREDNING WHERE BEREDNING.BERAONR = valaonr AND BEREDNING.OMRADE = valomrade
   NO-LOCK NO-ERROR.
   ASSIGN   
   aovar = BEREDNING.AONR
   extra = FALSE.   
   FIND LAST BERMTRL WHERE BERMTRL.AONR = BEREDNING.BERAONR AND 
   BERMTRL.OMRADE = BEREDNING.OMRADE AND BERMTRL.INKOP = TRUE AND
   BERMTRL.KLAR = TRUE USE-INDEX DATUM NO-LOCK NO-ERROR.
   datvar = BERMTRL.DATUM.
   FOR EACH BEREDNING WHERE BEREDNING.AONR = aovar NO-LOCK:      
      FIND FIRST BERMTRL WHERE BERMTRL.AONR = BEREDNING.BERAONR AND 
      BERMTRL.OMRADE = BEREDNING.OMRADE AND BERMTRL.INKOP = FALSE AND
      BERMTRL.DATUM > datvar USE-INDEX DATUM NO-LOCK NO-ERROR.
      IF AVAILABLE BERMTRL THEN DO:
         EMPTY TEMP-TABLE prev_temp NO-ERROR. 
         EMPTY TEMP-TABLE next_temp NO-ERROR. 
         EMPTY TEMP-TABLE lin_prev NO-ERROR. 
         EMPTY TEMP-TABLE lin_next NO-ERROR. 
         EMPTY TEMP-TABLE mtrl_temp NO-ERROR. 
         EMPTY TEMP-TABLE lin_temp NO-ERROR.         
         extra = TRUE.                     
         nextvar = TRUE.       
         OPEN QUERY nyq FOR EACH BERMTRL WHERE BERMTRL.AONR = BEREDNING.BERAONR AND 
         BERMTRL.OMRADE = valomrade AND BERMTRL.INKOP = FALSE AND
         BERMTRL.DATUM > datvar USE-INDEX DATUM NO-LOCK.
         GET FIRST nyq NO-LOCK.
         DO WHILE AVAILABLE(BERMTRL):
            IF BERMTRL.ANTAL > 0 THEN DO:               
               RUN mtrl_UI.
            END.      
            GET NEXT nyq NO-LOCK.
         END.          
         CLOSE QUERY nyq. 
   
         OPEN QUERY skyddq FOR EACH KSKYDD WHERE KSKYDD.AONR = BEREDNING.BERAONR AND 
         KSKYDD.OMRADE = valomrade AND KSKYDD.BERED = TRUE AND
         KSKYDD.DATUM > datvar USE-INDEX OMR NO-LOCK.
         GET FIRST skyddq NO-LOCK.
         DO WHILE AVAILABLE(KSKYDD):             
            RUN skydd_UI.           
            GET NEXT skyddq NO-LOCK.
         END.          
         CLOSE QUERY skyddq.
         RUN summa2_UI. 
         nextvar = FALSE.   
         FOR EACH mtrl_temp:
            DELETE mtrl_temp.
         END.   


         FIND LAST BERMTRL WHERE BERMTRL.AONR = BEREDNING.BERAONR AND 
         BERMTRL.OMRADE = valomrade AND BERMTRL.INKOP = FALSE AND 
         BERMTRL.DATUM <= datvar
         USE-INDEX DATUM NO-LOCK NO-ERROR.
         IF AVAILABLE BERMTRL THEN DO:
            datvar2 = BERMTRL.DATUM.         
            OPEN QUERY nyq FOR EACH BERMTRL WHERE BERMTRL.AONR = BEREDNING.BERAONR AND 
            BERMTRL.OMRADE = valomrade AND BERMTRL.INKOP = FALSE AND
            BERMTRL.DATUM = datvar2 USE-INDEX DATUM NO-LOCK.
            GET FIRST nyq NO-LOCK.
            DO WHILE AVAILABLE(BERMTRL):
               IF BERMTRL.ANTAL > 0 THEN DO:
                  RUN mtrl_UI.
               END.      
               GET NEXT nyq NO-LOCK.
            END.          
            CLOSE QUERY nyq.   
            OPEN QUERY skyddq FOR EACH KSKYDD WHERE KSKYDD.AONR = BEREDNING.BERAONR AND 
            KSKYDD.OMRADE = valomrade AND KSKYDD.BERED = TRUE AND
            KSKYDD.DATUM = datvar2 USE-INDEX OMR NO-LOCK.
            GET FIRST skyddq NO-LOCK.
            DO WHILE AVAILABLE(KSKYDD):             
               RUN skydd_UI.           
               GET NEXT skyddq NO-LOCK.
            END.          
            CLOSE QUERY skyddq.
            RUN summa2_UI. 
         END.
         nextvar = TRUE.
         FOR EACH lin_temp:
            DELETE lin_temp.
         END.
         OPEN QUERY nylinq FOR EACH BERLINKAB WHERE BERLINKAB.AONR = BEREDNING.BERAONR AND 
         BERLINKAB.OMRADE = valomrade AND BERLINKAB.DATUM > datvar AND BERLINKAB.KORTKOD = ?
         USE-INDEX INKOP NO-LOCK.
         GET FIRST nylinq NO-LOCK.
         DO WHILE AVAILABLE(BERLINKAB):
            IF BERLINKAB.METER > 0 THEN DO:
               RUN linor_UI.
            END.      
            GET NEXT nylinq NO-LOCK.
         END.          
         CLOSE QUERY nylinq.
         RUN sumlin2_UI.  
         nextvar = FALSE.
         FOR EACH lin_temp:
            DELETE lin_temp.
         END.  
         OPEN QUERY nylinq FOR EACH BERLINKAB WHERE BERLINKAB.AONR = BEREDNING.BERAONR AND 
         BERLINKAB.OMRADE = valomrade AND BERLINKAB.DATUM = datvar2 AND 
         BERLINKAB.KORTKOD = ?
         USE-INDEX INKOP NO-LOCK.
         GET FIRST nylinq NO-LOCK.
         DO WHILE AVAILABLE(BERLINKAB):
            IF BERLINKAB.METER > 0 THEN DO:
               RUN linor_UI.
            END.      
            GET NEXT nylinq NO-LOCK.
         END.          
         CLOSE QUERY nylinq. 
         RUN sumlin2_UI.       
         FIND FIRST next_temp NO-ERROR.
         IF AVAILABLE next_temp THEN DO:         
            datvar2 = next_temp.DATUM.
            FOR EACH next_temp:
               FIND FIRST prev_temp WHERE prev_temp.ENR = next_temp.ENR AND
               prev_temp.LEVKOD = next_temp.LEVKOD USE-INDEX LEV NO-ERROR.
               IF AVAILABLE prev_temp THEN DO:
                  IF next_temp.ANTAL > prev_temp.ANTAL THEN DO:
                     CREATE best_mtrl.
                     ASSIGN    
                     best_mtrl.BERLEV = BEREDNING.BERAONR /*BEREDNINGS NUMMER*/
                     best_mtrl.ENR = next_temp.ENR
                     best_mtrl.BENAMNING = next_temp.BENAMNING 
                     best_mtrl.ENHET = next_temp.ENHET   
                     best_mtrl.PRIS = next_temp.PRIS
                     best_mtrl.LEVKOD = next_temp.LEVKOD   
                     best_mtrl.PRIS = next_temp.PRIS
                     best_mtrl.OPRIS = next_temp.PRIS
                     best_mtrl.DATUM = datvar2                         
                     best_mtrl.ANTAL = next_temp.ANTAL - prev_temp.ANTAL.                     
                  END.  
                  ELSE IF next_temp.ANTAL < prev_temp.ANTAL THEN DO:
                     CREATE best_mtrl.
                     ASSIGN                                 
                     best_mtrl.BERLEV = BEREDNING.BERAONR /*BEREDNINGS NUMMER*/
                     best_mtrl.ENR = next_temp.ENR
                     best_mtrl.BENAMNING = next_temp.BENAMNING 
                     best_mtrl.ENHET = next_temp.ENHET   
                     best_mtrl.PRIS = next_temp.PRIS
                     best_mtrl.LEVKOD = next_temp.LEVKOD   
                     best_mtrl.PRIS = next_temp.PRIS 
                     best_mtrl.OPRIS = next_temp.PRIS
                     best_mtrl.DATUM = datvar2 
                     best_mtrl.DBEST = "RETUR"                        
                     best_mtrl.ANTAL = prev_temp.ANTAL - next_temp.ANTAL.                     
                  END.
                  ELSE DO: 
                     musz2 = musz2.                 
                  END.                 
                  DELETE prev_temp.       
               END.         
               ELSE DO:  
                  CREATE best_mtrl.
                  ASSIGN                                 
                  best_mtrl.BERLEV = BEREDNING.BERAONR /*BEREDNINGS NUMMER*/
                  best_mtrl.ENR = next_temp.ENR
                  best_mtrl.BENAMNING = next_temp.BENAMNING 
                  best_mtrl.ENHET = next_temp.ENHET   
                  best_mtrl.PRIS = next_temp.PRIS
                  best_mtrl.LEVKOD = next_temp.LEVKOD   
                  best_mtrl.PRIS = next_temp.PRIS  
                  best_mtrl.OPRIS = next_temp.PRIS
                  best_mtrl.DATUM = datvar2                         
                  best_mtrl.ANTAL = next_temp.ANTAL.                  
               END.
            END.
            FOR EACH prev_temp: 
               CREATE best_mtrl.
               ASSIGN                                 
               best_mtrl.BERLEV = BEREDNING.BERAONR /*BEREDNINGS NUMMER*/
               best_mtrl.ENR = prev_temp.ENR
               best_mtrl.BENAMNING = prev_temp.BENAMNING 
               best_mtrl.ENHET = prev_temp.ENHET   
               best_mtrl.PRIS = prev_temp.PRIS
               best_mtrl.LEVKOD = prev_temp.LEVKOD   
               best_mtrl.PRIS = prev_temp.PRIS 
               best_mtrl.OPRIS = prev_temp.PRIS
               best_mtrl.DATUM = datvar2 
               best_mtrl.DBEST = "RETUR"                        
               best_mtrl.ANTAL = prev_temp.ANTAL.               
            END.               
         END.                  
      END.
   END.

   /* NÅGRA RETURER GÅR EJ ATT SKICKA TILL XAL*/
   FOR EACH best_mtrl WHERE best_mtrl.DBEST NE "RETUR":
      FIND FIRST BEREDNING WHERE BEREDNING.BERAONR = best_mtrl.BERLEV AND 
      BEREDNING.OMRADE = valomrade NO-LOCK NO-ERROR.
      CREATE mtrl_temp3.
      ASSIGN
      mtrl_temp3.NATNR = BEREDNING.AONR /*AONR*/
      mtrl_temp3.FRI1 = BEREDNING.DELNR /*DELNR*/
      mtrl_temp3.ENR = best_mtrl.ENR
      mtrl_temp3.BENAMNING = best_mtrl.BENAMNING 
      mtrl_temp3.ENHET = best_mtrl.ENHET 
      mtrl_temp3.LEVKOD = best_mtrl.LEVKOD                              
      mtrl_temp3.ANTAL = best_mtrl.ANTAL.
   END.
   
   /*
   FIND LAST best_mtrl USE-INDEX DATUM NO-LOCK NO-ERROR.
   IF AVAILABLE best_mtrl THEN DO:
      datvar2 = best_mtrl.DATUM.
      FOR EACH best_mtrl BREAK BY best_mtrl.LEVKOD BY best_mtrl.ENR BY best_mtrl.DBEST:                
         ACCUMULATE best_mtrl.ANTAL (TOTAL BY best_mtrl.LEVKOD BY best_mtrl.ENR BY best_mtrl.DBEST).       
         IF LAST-OF(best_mtrl.DBEST) THEN DO:
            CREATE ebest_mtrl.
            ASSIGN 
            ebest_mtrl.ENR = best_mtrl.ENR
            ebest_mtrl.BENAMNING = best_mtrl.BENAMNING 
            ebest_mtrl.ENHET = best_mtrl.ENHET 
            ebest_mtrl.LEVKOD = best_mtrl.LEVKOD
            ebest_mtrl.PRIS = best_mtrl.PRIS
            ebest_mtrl.OPRIS = best_mtrl.PRIS
            ebest_mtrl.DATUM = datvar2
            ebest_mtrl.ANTAL = (ACCUM TOTAL BY best_mtrl.DBEST best_mtrl.ANTAL).            
         END.     
      END.
   END.


   FOR EACH ebest_mtrl WHERE ebest_mtrl.DBEST = "RETUR":
      FIND FIRST ebestbuff WHERE ebestbuff.ENR = ebest_mtrl.ENR AND
      ebestbuff.DBEST NE "RETUR" NO-LOCK NO-ERROR.
      IF AVAILABLE ebestbuff THEN DO:
         IF ebestbuff.ANTAL >= ebest_mtrl.ANTAL THEN DO:
            ebestbuff.ANTAL = ebestbuff.ANTAL - ebest_mtrl.ANTAL.
            DELETE ebest_mtrl.
         END.
         ELSE ebest_mtrl.ANTAL = ebest_mtrl.ANTAL - ebestbuff.ANTAL.
      END.
   END.
   */  
END PROCEDURE.


PROCEDURE summa2_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/  
   sumantal = 0.
   FOR EACH mtrl_temp BREAK BY mtrl_temp.LEVKOD BY mtrl_temp.ENR:      
   ACCUMULATE mtrl_temp.ANTAL (TOTAL BY mtrl_temp.LEVKOD BY mtrl_temp.ENR).       
      IF LAST-OF(mtrl_temp.ENR) THEN DO: 
         IF nextvar = TRUE THEN DO:
            CREATE next_temp.
            ASSIGN                                 
            next_temp.ENR = mtrl_temp.ENR
            next_temp.BENAMNING = mtrl_temp.BENAMNING 
            next_temp.ENHET = mtrl_temp.ENHET   
            next_temp.PRIS = mtrl_temp.PRIS
            next_temp.LEVKOD = mtrl_temp.LEVKOD   
            next_temp.PRIS = mtrl_temp.PRIS                             
            next_temp.ANTAL = (ACCUM TOTAL BY mtrl_temp.ENR mtrl_temp.ANTAL).            
         END.
         ELSE DO: 
            CREATE prev_temp.
            ASSIGN                                 
            prev_temp.ENR = mtrl_temp.ENR
            prev_temp.BENAMNING = mtrl_temp.BENAMNING 
            prev_temp.ENHET = mtrl_temp.ENHET   
            prev_temp.PRIS = mtrl_temp.PRIS
            prev_temp.LEVKOD = mtrl_temp.LEVKOD   
            prev_temp.PRIS = mtrl_temp.PRIS            
            prev_temp.ANTAL = (ACCUM TOTAL BY mtrl_temp.ENR mtrl_temp.ANTAL).            
         END.      
      END.     
   END.
END PROCEDURE.

PROCEDURE sumlin2_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/  
   FOR EACH lin_temp WHERE lin_temp.TOTMETER > 0 AND
   lin_temp.UPPLAG = ?:
      DELETE lin_temp.
   END.
   FOR EACH lin_temp WHERE lin_temp.UPPLAG NE ? AND lin_temp.TOTMETER > 0:
      FOR EACH linbuff WHERE linbuff.ENR = lin_temp.ENR AND 
      linbuff.LEVKOD = lin_temp.LEVKOD AND linbuff.TOTMETER = 0:
         DELETE linbuff.
      END.
   END. 
   FOR EACH lin_temp WHERE lin_temp.UPPLAG = ?:
      lin_temp.TOTMETER = lin_temp.METER * lin_temp.LEDARE.
   END.              
   sumantal = 0.
   FOR EACH lin_temp BREAK BY lin_temp.LEVKOD BY lin_temp.ENR:      
   ACCUMULATE lin_temp.TOTMETER (TOTAL BY lin_temp.LEVKOD BY lin_temp.ENR).       
      IF LAST-OF(lin_temp.ENR) THEN DO:
         IF nextvar = TRUE THEN DO:
            CREATE next_temp.
            ASSIGN                                 
            next_temp.ENR = lin_temp.ENR
            next_temp.BENAMNING = lin_temp.BENAMNING 
            next_temp.ENHET = lin_temp.ENHET   
            next_temp.PRIS = lin_temp.PRIS
            next_temp.LEVKOD = lin_temp.LEVKOD   
            next_temp.PRIS = lin_temp.PRIS
            next_temp.DATUM = lin_temp.DATUM                         
            next_temp.ANTAL = (ACCUM TOTAL BY lin_temp.ENR lin_temp.TOTMETER).            
         END.
         ELSE DO:
            CREATE prev_temp.
            ASSIGN                                 
            prev_temp.ENR = lin_temp.ENR
            prev_temp.BENAMNING = lin_temp.BENAMNING 
            prev_temp.ENHET = lin_temp.ENHET   
            prev_temp.PRIS = lin_temp.PRIS
            prev_temp.LEVKOD = lin_temp.LEVKOD   
            prev_temp.PRIS = lin_temp.PRIS
            prev_temp.DATUM = lin_temp.DATUM                         
            prev_temp.ANTAL = (ACCUM TOTAL BY lin_temp.ENR lin_temp.TOTMETER).            
         END.   
      END.     
   END.
END PROCEDURE.


