/*BERLISTAPPU4.P*/
DEFINE INPUT  PARAMETER classerkoll AS CHARACTER NO-UNDO.
DEFINE INPUT  PARAMETER inglobanv AS CHARACTER NO-UNDO.
DEFINE INPUT  PARAMETER sidotexexcel AS LOGICAL NO-UNDO.
DEFINE VARIABLE LocalAppServerExtraHandle AS HANDLE NO-UNDO.
DEFINE VARIABLE gurubilder AS CHARACTER NO-UNDO.
DEFINE VARIABLE link AS CHARACTER NO-UNDO.
DEFINE VARIABLE kalkvisabaraantal AS LOGICAL NO-UNDO.




/*
IF classerkoll NE "" THEN DO: 
   RUN KALKBERAPPDSEXTRA.p PERSISTENT SET LocalAppServerExtraHandle (INPUT inglobanv).
END.
*/   
{STARTFORAPP.I}
{ANMARKD.I}
{LISTDEF.I}
{KONVALTEMP.I}


IF varforetypval[36] = 1 THEN kalkvisabaraantal = TRUE.
IF classerkoll NE "" THEN kalkvisabaraantal = TRUE.
DEFINE VARIABLE edmedd    AS CHARACTER NO-UNDO.       
DEFINE VARIABLE valkonst  AS LOGICAL NO-UNDO.
DEFINE VARIABLE prisvar   AS INTEGER NO-UNDO.
DEFINE VARIABLE bryt      AS LOGICAL NO-UNDO.
DEFINE VARIABLE skrivut   AS LOGICAL NO-UNDO.
DEFINE VARIABLE musz      AS LOGICAL NO-UNDO.         
DEFINE VARIABLE valaonr   AS CHARACTER NO-UNDO.
DEFINE VARIABLE valdelnr  AS INTEGER NO-UNDO.
DEFINE VARIABLE valort    AS CHARACTER NO-UNDO. 
DEFINE VARIABLE valomrade AS CHARACTER NO-UNDO.  
DEFINE VARIABLE katvar AS INTEGER NO-UNDO.
DEFINE VARIABLE kalkvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE upppris AS DECIMAL NO-UNDO.
DEFINE VARIABLE seluppvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE arrhjsum AS DECIMAL NO-UNDO.    
DEFINE VARIABLE bytgrupp AS CHARACTER NO-UNDO. 
DEFINE VARIABLE deltidut AS LOGICAL NO-UNDO.
DEFINE VARIABLE deltidutex AS LOGICAL NO-UNDO.
DEFINE VARIABLE edvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE finns AS LOGICAL NO-UNDO.    
DEFINE VARIABLE forsta AS LOGICAL NO-UNDO.
DEFINE VARIABLE fyra AS LOGICAL NO-UNDO.
DEFINE VARIABLE kant AS INTEGER NO-UNDO.
DEFINE VARIABLE lage AS INTEGER NO-UNDO.
DEFINE VARIABLE mat2 AS LOGICAL NO-UNDO.
DEFINE VARIABLE mat3 AS LOGICAL NO-UNDO.
DEFINE VARIABLE mat4 AS LOGICAL NO-UNDO.
DEFINE VARIABLE mtextvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE numsok AS LOGICAL NO-UNDO.
DEFINE VARIABLE numvar AS INTEGER NO-UNDO.
DEFINE VARIABLE sex AS LOGICAL NO-UNDO.
DEFINE VARIABLE sidlangd AS INTEGER NO-UNDO.
DEFINE VARIABLE sidlangdex AS INTEGER NO-UNDO.
DEFINE VARIABLE skapad AS LOGICAL NO-UNDO.
DEFINE VARIABLE stopvar AS LOGICAL NO-UNDO. 
DEFINE VARIABLE str AS CHARACTER FORMAT "X(130)" NO-UNDO.
DEFINE VARIABLE str0 AS CHARACTER FORMAT "X(130)" NO-UNDO.
DEFINE VARIABLE str1 AS CHARACTER FORMAT "X(130)" NO-UNDO. 
DEFINE VARIABLE str2 AS CHARACTER FORMAT "X(130)" NO-UNDO. 
DEFINE VARIABLE str3 AS CHARACTER FORMAT "X(130)" NO-UNDO.
DEFINE VARIABLE sumantal AS INTEGER NO-UNDO.
DEFINE VARIABLE sumpris AS DECIMAL NO-UNDO.    
DEFINE VARIABLE sumrec AS ROWID NO-UNDO.
DEFINE VARIABLE tant AS INTEGER NO-UNDO.
DEFINE VARIABLE totant AS INTEGER NO-UNDO.
DEFINE VARIABLE temptant AS INTEGER NO-UNDO.
DEFINE VARIABLE tiduttyp AS INTEGER NO-UNDO.
DEFINE VARIABLE totalsum AS DECIMAL NO-UNDO.
DEFINE VARIABLE totalt AS DECIMAL NO-UNDO. 
DEFINE VARIABLE upput AS LOGICAL NO-UNDO.
DEFINE VARIABLE uppvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE utnr AS INTEGER EXTENT 50 NO-UNDO.
DEFINE VARIABLE utrow AS ROWID EXTENT 8 NO-UNDO.
DEFINE VARIABLE utrow1 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow2 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow3 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow4 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow5 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow6 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow7 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow8 AS ROWID NO-UNDO.
DEFINE VARIABLE forstakonst AS LOGICAL NO-UNDO.
DEFINE VARIABLE xkordvar AS INTEGER NO-UNDO. 
DEFINE VARIABLE rowspar AS INTEGER NO-UNDO.
DEFINE VARIABLE vfontname    AS CHARACTER NO-UNDO. 
DEFINE VARIABLE vfontsize    AS INTEGER NO-UNDO.   
DEFINE VARIABLE vfonttype    AS LOGICAL NO-UNDO.   
DEFINE VARIABLE vfontheight  AS INTEGER NO-UNDO.   
DEFINE VARIABLE vfontcolor   AS INTEGER NO-UNDO.   
DEFINE VARIABLE sidraknare AS INTEGER NO-UNDO.
DEFINE VARIABLE sparlangd AS INTEGER NO-UNDO.
DEFINE VARIABLE kvaravsidan    AS INTEGER NO-UNDO.
DEFINE VARIABLE exkant        AS INTEGER NO-UNDO.
DEFINE VARIABLE extant        AS INTEGER NO-UNDO.
DEFINE VARIABLE forstaanmark AS LOGICAL NO-UNDO.
DEFINE VARIABLE totea AS DECIMAL NO-UNDO.
DEFINE VARIABLE totarb AS DECIMAL NO-UNDO.
DEFINE VARIABLE totmask AS DECIMAL NO-UNDO.
DEFINE VARIABLE totmtrl AS DECIMAL NO-UNDO.
DEFINE VARIABLE totovr AS DECIMAL NO-UNDO.
DEFINE VARIABLE arbtim AS DECIMAL NO-UNDO.
DEFINE VARIABLE msktim AS DECIMAL NO-UNDO.
DEFINE VARIABLE bertim AS DECIMAL NO-UNDO.
DEFINE VARIABLE eavar AS DECIMAL NO-UNDO.
DEFINE VARIABLE arbvar AS DECIMAL NO-UNDO.
DEFINE VARIABLE mskvar AS DECIMAL NO-UNDO.
DEFINE VARIABLE faktvar AS DECIMAL NO-UNDO.
DEFINE VARIABLE kontroll AS LOGICAL NO-UNDO.
DEFINE VARIABLE prisvar2 AS DECIMAL NO-UNDO.
DEFINE VARIABLE sumea AS DECIMAL NO-UNDO.
DEFINE VARIABLE summont AS DECIMAL NO-UNDO.
DEFINE VARIABLE summask AS DECIMAL NO-UNDO.
DEFINE VARIABLE skrivbord AS LOGICAL NO-UNDO.
DEFINE VARIABLE fetstil AS LOGICAL NO-UNDO.
DEFINE VARIABLE stolpval AS INTEGER NO-UNDO.
DEFINE VARIABLE baral AS LOGICAL NO-UNDO.
DEFINE VARIABLE enkabval AS LOGICAL NO-UNDO.
DEFINE VARIABLE delningsvar AS INTEGER NO-UNDO. /*sätts till 1 om F9 värde = 0 och 100 om F9 värde = 1*/
DEFINE VARIABLE TOG_ANM AS LOGICAL INITIAL no 
     LABEL "Anmärkning" .

DEFINE VARIABLE TOG_ID AS LOGICAL INITIAL no 
     LABEL "Identitet" .

DEFINE VARIABLE TOG_SPANN AS LOGICAL INITIAL no 
     LABEL "Spann/kabellängd" .

DEFINE VARIABLE TOG_MTRL AS LOGICAL INITIAL no 
     LABEL "Materiel" .

DEFINE VARIABLE TOG_P3 AS LOGICAL INITIAL no 
     LABEL "P3-koder" .
     
DEFINE VARIABLE TOG_TEXT AS LOGICAL INITIAL no 
     LABEL "Mtrl text" .     

DEFINE VARIABLE TOG_UPP AS LOGICAL INITIAL no 
     LABEL "Upplag" .
     
DEFINE VARIABLE TOG_VAL AS LOGICAL INITIAL no 
     LABEL "Konstruktionsval". 
     
DEFINE VARIABLE TOG_EGEN AS LOGICAL INITIAL no 
     LABEL "Egenkontroll" .
     


DEFINE TEMP-TABLE temp_upp NO-UNDO
   FIELD UPPLAG AS INTEGER
   FIELD ADRESS AS CHARACTER
   FIELD ANMARK AS CHARACTER
   INDEX OMR UPPLAG ASCENDING.

{TIDUTTTNEW.I}
  
DEFINE TEMP-TABLE tidut2 NO-UNDO
   FIELD UT AS CHARACTER FORMAT "X(132)".
   
DEFINE TEMP-TABLE tidut3 NO-UNDO
   FIELD UT AS CHARACTER FORMAT "X(132)".
   
DEFINE TEMP-TABLE tidut4 NO-UNDO
   FIELD UT AS CHARACTER FORMAT "X(132)".                 
   
   
DEFINE TEMP-TABLE mtrl_temp2 NO-UNDO 
   FIELD NUM AS INTEGER    
   FIELD ENR AS CHARACTER
   FIELD BENAMNING AS CHARACTER
   FIELD ENHET AS CHARACTER
   FIELD ANTAL AS INTEGER
   FIELD PRIS AS DECIMAL 
   FIELD TOTPRIS AS DECIMAL
   FIELD LEVKOD AS CHARACTER   
   FIELD UPPLAG AS INTEGER 
   FIELD GRUPP AS INTEGER 
   FIELD XKORD AS INTEGER
   FIELD FORNR AS CHARACTER
   FIELD LINNR AS CHARACTER
   FIELD NATNR AS CHARACTER
   FIELD FRI1 AS INTEGER
   FIELD FRI2 AS INTEGER
   FIELD PAR AS INTEGER
   FIELD ORD AS INTEGER
   INDEX ENR IS PRIMARY ENR ASCENDING   
   INDEX LISTA UPPLAG GRUPP FORNR LINNR NATNR FRI1 FRI2 PAR
   INDEX LISTA2 UPPLAG FORNR LINNR NATNR FRI1 FRI2 PAR
   INDEX ENRX ENR UPPLAG XKORD
   INDEX ENRN UPPLAG NUM
   INDEX ORD UPPLAG ORD PAR.   
{UPPLAGTEMP.I}  
   
DEFINE TEMP-TABLE ord_temp NO-UNDO
   FIELD NUM AS INTEGER 
   FIELD ORD AS INTEGER
   INDEX NUM IS PRIMARY NUM ASCENDING.   
   
DEFINE TEMP-TABLE grupp_temp NO-UNDO
   FIELD KONSKOD AS INTEGER
   FIELD BENAMNING AS CHARACTER
   FIELD ORDNING AS INTEGER
   INDEX ORD IS PRIMARY ORDNING ASCENDING.       

DEFINE TEMP-TABLE grupp_temp2 NO-UNDO
   FIELD KONSKOD AS INTEGER
   FIELD BENAMNING AS CHARACTER
   FIELD ORDNING AS INTEGER
   INDEX ORD IS PRIMARY ORDNING ASCENDING.     
   
DEFINE TEMP-TABLE id_temp NO-UNDO 
   FIELD NUM AS INTEGER 
   FIELD GRUPP AS INTEGER  
   FIELD FORNR AS CHARACTER
   FIELD LINNR AS CHARACTER
   FIELD NATNR AS CHARACTER
   FIELD FRI1 AS INTEGER
   FIELD FRI2 AS INTEGER 
   FIELD XKORD AS INTEGER
   FIELD ENDKOMB AS LOGICAL
   FIELD FRI3 AS CHARACTER
   FIELD ORD AS INTEGER
   INDEX NUM IS PRIMARY NUM ASCENDING
   INDEX ORD FORNR LINNR NATNR FRI1 FRI2 ASCENDING
   INDEX ORD2 ORD ASCENDING. 
   
DEFINE TEMP-TABLE skap_temp NO-UNDO
   FIELD NUM AS INTEGER 
   FIELD F1 AS CHARACTER 
   FIELD F2 AS CHARACTER 
   FIELD F3 AS CHARACTER
   FIELD F4 AS CHARACTER
   FIELD F5 AS CHARACTER
   FIELD F6 AS CHARACTER
   FIELD SKAPNUM AS INTEGER   
   INDEX NUM IS PRIMARY NUM SKAPNUM ASCENDING.   
   
DEFINE TEMP-TABLE ber_temp  NO-UNDO
   FIELD ARBKOD AS CHARACTER
   FIELD LOPNR AS INTEGER
   FIELD BENAMNING AS CHARACTER
   FIELD ENHET AS CHARACTER    
   FIELD ANTAL AS DECIMAL
   FIELD NUM AS INTEGER
   INDEX KOD ARBKOD LOPNR ASCENDING
   INDEX NUM NUM ARBKOD LOPNR ASCENDING.
   
DEFINE TEMP-TABLE ber_temp2  NO-UNDO
   FIELD ARBKOD AS CHARACTER
   FIELD LOPNR AS INTEGER
   FIELD BENAMNING AS CHARACTER
   FIELD ENHET AS CHARACTER    
   FIELD ANTAL AS DECIMAL
   FIELD NUM AS INTEGER
   INDEX KOD ARBKOD LOPNR ASCENDING
   INDEX NUM NUM ARBKOD LOPNR ASCENDING. 
   
DEFINE TEMP-TABLE kalk_temp  NO-UNDO
   {KALKTEMPTAB.I}
   
DEFINE TEMP-TABLE kalk_temp2  NO-UNDO LIKE kalk_temp. 
  

/*skrivbord*/
DEFINE TEMP-TABLE upptemp   NO-UNDO
   FIELD NUM AS INTEGER       
   FIELD UPPLAG AS INTEGER    
   FIELD XKORD AS INTEGER.

DEFINE {&NEW} {&SHARED} TEMP-TABLE extemp NO-UNDO
   {EXTEMPDEF.I}

DEFINE {&NEW} {&SHARED} TEMP-TABLE excoltemp  NO-UNDO
   FIELD COLNAME AS CHARACTER
   FIELD COLNUM AS INTEGER
   FIELD WDTH AS INTEGER.

{FLERBER.I}
DEFINE TEMP-TABLE hid NO-UNDO
   FIELD BERAONR    AS CHARACTER
   FIELD OMRADE     AS CHARACTER
   FIELD NUM        AS INTEGER
   FIELD ORD AS INTEGER
   INDEX NUM BERAONR OMRADE ORD.
DEFINE QUERY kalkq FOR BERKALK.

DEFINE QUERY mtrlprisq FOR BERMTRL.
DEFINE QUERY upplq FOR BERVAL.
DEFINE QUERY berq FOR BERUPP.
DEFINE QUERY gruppq FOR KONSTGRUPP.
DEFINE QUERY beridq FOR BERID.

DEFINE BUFFER idbuff FOR id_temp.
DEFINE BUFFER mtrlbuff FOR mtrl_temp2.
DEFINE BUFFER gruppbuff FOR grupp_temp.
DEFINE BUFFER uppbuff FOR uppl_temp.
/*
DEFINE BUFFER skapbuff FOR skap_temp.
*/
DEFINE BUFFER kalkbuff FOR kalk_temp2.

   ASSIGN
   utnr[1] = 1
   utnr[2] = 12
   utnr[3] = 28
   utnr[4] = 43
   utnr[5] = 53
   utnr[6] = 60
   utnr[7] = 69
   utnr[8] = 77.

PROCEDURE skrivhmt_UI :
   DEFINE INPUT PARAMETER printername AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER globsidl AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER globsids AS INTEGER NO-UNDO.
   FIND FIRST SKRIVARDEF WHERE SKRIVARDEF.SKRIVARID = printername NO-LOCK NO-ERROR.
   IF AVAILABLE SKRIVARDEF THEN DO TRANSACTION:
      ASSIGN
      globsidl = SKRIVARDEF.BREDD
      globsids = SKRIVARDEF.SIDA. 
   END.   
END PROCEDURE.

PROCEDURE skapalista2_UI :
   DEFINE INPUT PARAMETER stolpval2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER TOG_ANM2   AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_ID2    AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_SPANN2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_MTRL2  AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_P32    AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_TEXT2  AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_UPP2   AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_VAL2   AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_EGEN2  AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER globforetag2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER globanvpkod2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER seluppvar2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER edmedd2   AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valkonst2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER prisvar2  AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER bryt2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER skrivut2  AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER valaonr2  AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valdelnr2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER valort2   AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER katvar2   AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER kalkvar2  AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER globsids2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER skrivbord2  AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER musz2 AS LOGICAL NO-UNDO.   
   DEFINE INPUT PARAMETER TABLE FOR kon_val.
   DEFINE INPUT PARAMETER TABLE FOR felmeddtemp.
   DEFINE OUTPUT PARAMETER TABLE FOR tidut.
   DEFINE OUTPUT PARAMETER TABLE FOR extemp. 
   ASSIGN

   TOG_ANM   = TOG_ANM2  
   TOG_ID    =  TOG_ID2   
   TOG_SPANN =  TOG_SPANN2
   TOG_MTRL  =  TOG_MTRL2 
   TOG_P3    =  TOG_P32   
   TOG_TEXT  =  TOG_TEXT2 
   TOG_UPP   =  TOG_UPP2  
   TOG_VAL   =  TOG_VAL2  
   TOG_EGEN  =  TOG_EGEN2 
   globforetag = globforetag2
   globanvpkod = globanvpkod2
   seluppvar = seluppvar2
   edmedd   =  edmedd2    
   valkonst =  valkonst2 
   prisvar  =  prisvar2  
   bryt     =  bryt2     
   skrivut  =  skrivut2  
   musz     =  musz2     
   valaonr  =  valaonr2  
   valdelnr =  valdelnr2 
   valort   =  valort2   
   valomrade = valomrade2
   katvar    = katvar2   
   kalkvar   = kalkvar2
   globsids = globsids2
   skrivbord = skrivbord2
   stolpval = stolpval2.  
   EMPTY TEMP-TABLE tidut NO-ERROR. 
   EMPTY TEMP-TABLE mtrl_temp NO-ERROR. 
   EMPTY TEMP-TABLE mtrl_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE id_temp NO-ERROR. 
   EMPTY TEMP-TABLE grupp_temp NO-ERROR. 
   EMPTY TEMP-TABLE grupp_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE uppl_temp NO-ERROR. 
   edvar = FALSE.
   FIND FIRST PARSTOLP NO-LOCK NO-ERROR.
   /*Om anv. har valt btn_skriv i berlista, då har skrivval redan körts*/
   IF globsids = 0  THEN globsids = 73.
   musz = FALSE.
   ASSIGN
   forsta = FALSE
   fetstil = FALSE
   tant = 0
   totant = 0
   kvaravsidan = 0
   exkant = 0
   extant = 0
   sidlangdex = 56  /*56*/
   sidlangd = globsids - 3
   forstaanmark = FALSE.
   RUN huvud_UI.

   IF musz = FALSE THEN RUN summa_UI.
   musz2 = musz.
   RETURN.
END PROCEDURE.

PROCEDURE anm2_UI :
   CREATE tidut.
   ASSIGN
   tant = tant + 1
   extant = extant + 1
   totant = totant + 1.  
   ASSIGN                         
   SUBSTRING(tidut.UT,utnr[1],utnr[2] - utnr[1]) = "Anmärkning"
   retvar = 1
   ednum = 1
   ednum3 = LENGTH(temp_upp.ANMARK)
   retvar = INDEX(temp_upp.ANMARK,CHR(10),ednum)
   edtecken = 50
   edtext = temp_upp.ANMARK
   tidtext = "". 
   RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1],utnr[2] - utnr[1]),INPUT 1,INPUT ?).
   {ANMARK2.I}    
END PROCEDURE.

PROCEDURE anm3_UI :
   CREATE tidut.
   totant = totant + 1.
   RUN tom_UI (INPUT ?).
   CREATE tidut.       
   totant = totant + 1.
   RUN tom_UI (INPUT ?).
   ASSIGN
   kant = kant + 2
   exkant = exkant + 2
   SUBSTRING(tidut.UT,utnr[1],utnr[2] - utnr[1]) = "Anmärkning"
   retvar = 1
   ednum = 1
   ednum3 = LENGTH(uppbuff.ANMARK)
   retvar = INDEX(uppbuff.ANMARK,CHR(10),ednum)
   edtecken = 50
   edtext = uppbuff.ANMARK
   tidtext = "". 
   RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1],utnr[2] - utnr[1]),INPUT 0,INPUT ?).
   {ANMARK2.I}    
END PROCEDURE.

PROCEDURE anm4_UI : 
   CREATE tidut. 
   ASSIGN
   totant = totant + 1
   tant = tant + 1
   extant = extant + 1.
   ASSIGN
   SUBSTRING(tidut.UT,utnr[1],utnr[2] - utnr[1]) = "Anmärkning"
   retvar = 1
   ednum = 1
   ednum3 = LENGTH(edmedd)
   retvar = INDEX(edmedd,CHR(10),ednum)
   edtecken = 48
   edtext = edmedd
   tidtext = "".  
   RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1],utnr[2] - utnr[1]),INPUT 1,INPUT ?).                                 
   {ANMARK2.I}    
END PROCEDURE.

PROCEDURE anmark_UI :          
   DEFINE INPUT PARAMETER anmark AS INTEGER NO-UNDO. 
   IF anmark = 2 THEN DO:                
      IF edvar = FALSE THEN DO:      
         ASSIGN            
         /*SUBSTRING(tidut.UT,utnr[1]1) = ":"*/   
         SUBSTRING(tidut.UT,utnr[3]) = /*":" +*/ tidtext.
      END.
      ELSE DO:
         ASSIGN                     
         SUBSTRING(tidut.UT,utnr[3]) = /*":" +*/ tidtext.
      END.

      /*GG den 31/1 2006*/
      IF fetstil = TRUE THEN DO: 
         IF SUBSTRING(tidut.UT,1,12) = "            " THEN RUN data_UI (INPUT TRUE,INPUT "A",INPUT totant,INPUT "",INPUT 1,INPUT ?).          
         RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).          
      END.                                                                                                   
      ELSE DO:                                                                                               
         RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?). 
      END.     
/*       IF forstaanmark = FALSE THEN DO:                                                                          */
/*          RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).    */
/*          forstaanmark = TRUE.                                                                                   */
/*       END.                                                                                                      */
/*       ELSE DO:                                                                                                  */
/*          IF fetstil = TRUE THEN DO:                                                                             */
/*             RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?). */
/*          END.                                                                                                   */
/*          ELSE DO:                                                                                               */
/*             RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?). */
/*          END.                                                                                                   */
/*       END.                                                                                                      */
   END. 
   CREATE tidut.
   IF uppvar = TRUE THEN DO:
      ASSIGN
      tant = tant + 1
      extant = extant + 1.   
   END.
   ELSE DO:
      ASSIGN
      kant = kant + 1.
      exkant = exkant + 1.
   END.
   totant = totant + 1.
   RUN tom_UI (INPUT ?).
END PROCEDURE.

PROCEDURE anm_UI :
     
   CREATE tidut.   
   totant = totant + 1.
   RUN tom_UI (INPUT ?).
   CREATE tidut.       
   ASSIGN
   totant = totant + 1
   kant = kant + 2
   exkant = exkant + 2
   SUBSTRING(tidut.UT,1) = "Anmärkning"
   retvar = 1 
   ednum = 1    
   ednum3 = LENGTH(uppl_temp.ANMARK)      
   retvar = INDEX(uppl_temp.ANMARK,CHR(10),ednum)
   edtecken = 50   
   edtext = uppl_temp.ANMARK
   tidtext = "".  
   RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT TRUE).
   {ANMARK2.I}  
   forstaanmark = TRUE.
END PROCEDURE.

PROCEDURE anmstolpmin_UI : 
   
   SUBSTRING(tidut.UT,utnr[8]) = mtrl_temp.MTRLTEXT.      
   RUN data_UI (INPUT FALSE,INPUT "H",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[8]),INPUT 0,INPUT TRUE).
   
END PROCEDURE. 
PROCEDURE bryt_UI :
 
   RUN brytex_UI.

          /* sidlangd = anlat rader som ryms på en sida.
          kant = antal rader som ska skrivas ut för konstruktion
          tant = rest från föregående sida.
          */
                                                         
   IF bryt = FALSE THEN DO:     
     
      /*ryms konstruktionen på sidan*/
      IF kant > (sidlangd - tant) THEN DO:
         FIND tidut WHERE ROWID(tidut) = utrow1 NO-LOCK NO-ERROR.
         IF AVAILABLE tidut THEN DO:
            DELETE tidut.
         END.   
         kant = kant - 1.
         FIND tidut WHERE ROWID(tidut) = utrow2 NO-LOCK NO-ERROR.
         ASSIGN
         SUBSTRING(tidut.UT,132,1) = "$".
         /*mer än sida*/
         IF kant > sidlangd THEN DO:
            tant = kant - sidlangd.
            
            temptant = tant.
            /*flera sidor*/
            REPEAT WHILE temptant >= sidlangd:
               tant = temptant - sidlangd.
               temptant = tant.
            END.
            
         END.
         ELSE tant = kant.
      END.
      ELSE DO:
         tant = tant + kant.
      END.
      
   END.
   ELSE DO:
      FIND tidut WHERE ROWID(tidut) = utrow1 NO-LOCK NO-ERROR.
      DELETE tidut.
      ASSIGN
      kant = kant - 1.
      FIND tidut WHERE ROWID(tidut) = utrow2 NO-LOCK NO-ERROR.
      ASSIGN
      SUBSTRING(tidut.UT,132) = "$"
      tant = kant.
   END.
   
END PROCEDURE.

PROCEDURE brytex_UI :

   /*Ej en konstruktion/sida, räkna ut brytpunkter*/ 
   IF bryt = FALSE THEN DO:      
      /*FOREBILDER*/
      /*
      
      MESSAGE kvaravsidan sidlangdex extant
      VIEW-AS ALERT-BOX.
      */
      IF globforetag = "cELPA" OR globforetag = "BORL" THEN DO:
         IF kvaravsidan = 0 THEN DO:
            /*Ge procedurvariabler värden första gången */
            ASSIGN
            kvaravsidan = sidlangdex - extant.
         END.
         ELSE DO:
            /*Uppdatera konstruktionsantal*/
            ASSIGN
            kvaravsidan = sidlangdex - (extant - 6).
         END.
         IF exkant > kvaravsidan THEN DO:        
            FIND FIRST extemp WHERE extemp.EXROW = utrow[1] NO-LOCK NO-ERROR.
            IF AVAILABLE extemp THEN DO:
               DELETE extemp.
               exkant = exkant - 1.
            END.           
            FIND FIRST extemp WHERE extemp.EXROW = utrow[2] NO-LOCK NO-ERROR.
            IF AVAILABLE extemp THEN DO:
               ASSIGN SUBSTRING(extemp.DATA,131,1) = "£".
            END.
            IF exkant > sidlangdex THEN DO: 
               extant = exkant - sidlangdex.
               kvaravsidan = extant.
               REPEAT WHILE kvaravsidan >= sidlangdex:
                  extant = kvaravsidan - sidlangdex.
                  kvaravsidan = extant.
               END.
            END.
            ELSE extant = exkant.
         END.
         ELSE DO:
            FIND FIRST extemp WHERE extemp.EXROW = utrow[3] NO-LOCK NO-ERROR.
            IF AVAILABLE extemp THEN DO:
               DELETE extemp.
               FIND FIRST extemp WHERE extemp.EXROW = utrow[4] NO-LOCK NO-ERROR.
               IF AVAILABLE extemp THEN DELETE extemp.
               FIND FIRST extemp WHERE extemp.EXROW = utrow[5] NO-LOCK NO-ERROR.
               IF AVAILABLE extemp THEN DELETE extemp.
               FIND FIRST extemp WHERE extemp.EXROW = utrow[6] NO-LOCK NO-ERROR.
               IF AVAILABLE extemp THEN DELETE extemp.
               FIND FIRST extemp WHERE extemp.EXROW = utrow[7] NO-LOCK NO-ERROR.
               IF AVAILABLE extemp THEN DELETE extemp.
               FIND FIRST extemp WHERE extemp.EXROW = utrow[8] NO-LOCK NO-ERROR.
               IF AVAILABLE extemp THEN DELETE extemp.
               exkant = exkant - 6.
            END.
            extant = extant + exkant.
         END.
      END.   
      ELSE IF globforetag = "cELPA" {GLOBVES.I} THEN DO:
         IF kvaravsidan = 0 THEN DO:
            ASSIGN 
            kvaravsidan = sidlangdex - extant. /*cccc*/
         END.
         ELSE DO: 
            ASSIGN kvaravsidan = (sidlangdex - (extant - 4)). /*Utrymme för logga*/
         END.
         IF exkant > kvaravsidan THEN DO:         
            FIND FIRST extemp WHERE extemp.EXROW = utrow[1] NO-LOCK NO-ERROR.
            IF AVAILABLE extemp THEN DO:
               DELETE extemp.
               exkant = exkant - 1.
            END.
            FIND FIRST extemp WHERE extemp.EXROW = utrow[2] NO-LOCK NO-ERROR.
            IF AVAILABLE extemp THEN DO:
               ASSIGN SUBSTRING(extemp.DATA,131,1) = "£".
            END.
            IF exkant > sidlangdex THEN DO: 
               extant = exkant - sidlangdex.
               kvaravsidan = extant.
               REPEAT WHILE kvaravsidan >= sidlangdex:
                  extant = kvaravsidan - sidlangdex.
                  kvaravsidan = extant.
               END.
            END.
            ELSE extant = exkant.
         END.
         ELSE DO:                      
            FIND FIRST extemp WHERE extemp.EXROW = utrow[3] NO-LOCK NO-ERROR.
            IF AVAILABLE extemp THEN DO:
               DELETE extemp.
               FIND FIRST extemp WHERE extemp.EXROW = utrow[4] NO-LOCK NO-ERROR.
               IF AVAILABLE extemp THEN DELETE extemp.
               FIND FIRST extemp WHERE extemp.EXROW = utrow[5] NO-LOCK NO-ERROR.
               IF AVAILABLE extemp THEN DELETE extemp.
               FIND FIRST extemp WHERE extemp.EXROW = utrow[6] NO-LOCK NO-ERROR.
               IF AVAILABLE extemp THEN DELETE extemp.
               ASSIGN
               exkant = exkant - 4.               
            END.
            extant = extant + exkant.
         END.
      END.
      ELSE DO: /* Sätt brytpunkt för excel utan logga */   
         
         IF exkant > (sidlangdex - extant) THEN DO:         
            FIND FIRST extemp WHERE extemp.EXROW = utrow[1] NO-LOCK NO-ERROR.
            IF AVAILABLE extemp THEN DO:
               DELETE extemp.
               exkant = exkant - 1.
            END.
            FIND FIRST extemp WHERE extemp.EXROW = utrow[2] NO-LOCK NO-ERROR.
            IF AVAILABLE extemp THEN DO:
               ASSIGN SUBSTRING(extemp.DATA,131,1) = "£".
            END.
            IF exkant > sidlangdex THEN DO: 
               extant = exkant - sidlangdex.
               kvaravsidan = extant.
               REPEAT WHILE kvaravsidan >= sidlangdex:
                  extant = kvaravsidan - sidlangdex.
                  kvaravsidan = extant.
               END.
            END.
            ELSE extant = exkant.
         END.
         ELSE DO:
            extant = extant + exkant.
         END.
         
      END.      
   END.   
   ELSE DO:
      /*En konstruktion/sida*/
      FIND FIRST extemp WHERE extemp.EXROW = utrow[1] NO-LOCK NO-ERROR.
      IF AVAILABLE extemp THEN DO:
         DELETE extemp.
         exkant = exkant - 1.
      END.
      FIND FIRST extemp WHERE extemp.EXROW = utrow[2] NO-LOCK NO-ERROR.
      IF AVAILABLE extemp THEN DO:
         ASSIGN SUBSTRING(extemp.DATA,131,1) = "£".
      END.
      extant = exkant.     
   END. 
END PROCEDURE.
             
PROCEDURE egenkontroll_UI :
 
   CREATE tidut. 
   totant = totant + 1.
   RUN tom_UI (INPUT ?).
   CREATE tidut.  
   ASSIGN
   kant = kant + 2
   exkant = exkant + 2
   totant = totant + 1.
   ASSIGN
   SUBSTRING(tidut.UT,utnr[1]) = "EGENKONTROLL ENLIGT OVAN".
   RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
   CREATE tidut.
   totant = totant + 1.
   RUN tom_UI (INPUT ?).
   CREATE tidut.
   ASSIGN 
   kant = kant + 2
   exkant = exkant + 2
   totant = totant + 1.
   IF globforetag = "cELPA" OR globforetag = "BORL" THEN DO: 
      ASSIGN SUBSTRING(tidut.UT,utnr[1]) = "Anm_____________________________________________________Datum:_____________Sign:____________".
   END.
   ELSE IF globforetag = "cELPA" {GLOBVES.I} THEN DO:                                             
      ASSIGN SUBSTRING(tidut.UT,utnr[1]) = "Anm__________________________________________Datum:__________Sign:________".
   END.
   ELSE DO:
      ASSIGN SUBSTRING(tidut.UT,utnr[1]) = "Anm__________________________________________Datum:__________Sign:________".
   END.
   RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
   
END PROCEDURE.

 
PROCEDURE ett_UI :

   IF mtrl_temp2.XKORD NE ? THEN DO:                
      ASSIGN
      xkordvar = mtrl_temp2.XKORD
      sumpris = 0
      sumea = 0
      summont = 0
      summask = 0
      stopvar = FALSE.                
      FIND FIRST id_temp WHERE id_temp.XKORD = xkordvar AND
      id_temp.ENDKOMB = FALSE
      USE-INDEX ORD2 NO-LOCK NO-ERROR.
      IF AVAILABLE id_temp THEN DO: 
         ASSIGN
         numvar = id_temp.NUM
         stopvar = TRUE.                
         FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = mtrl_temp2.GRUPP 
         USE-INDEX KOD NO-LOCK NO-ERROR. 
         IF NOT AVAILABLE BBENAMNING THEN DO:
            FIND FIRST BBENAMNING USE-INDEX KOD NO-LOCK NO-ERROR.
         END.
         RUN id_UI. 
         IF skrivbord = TRUE THEN DO:
            FIND FIRST upptemp WHERE upptemp.XKORD = xkordvar AND
            upptemp.UPPLAG NE ? NO-LOCK NO-ERROR.
         END.
         IF TOG_UPP = TRUE THEN RUN upput_UI.
         FIND FIRST uppl_temp WHERE uppl_temp.NUM = id_temp.NUM 
         NO-LOCK NO-ERROR.
         IF AVAILABLE uppl_temp THEN DO:
                                       
            RUN val_UI.
            IF TOG_SPANN = TRUE THEN RUN spann_UI.
            IF uppl_temp.ANMARK NE "" THEN DO: 
               IF TOG_ANM = TRUE THEN RUN anm_UI.      
            END.
         END.
         FIND FIRST idbuff WHERE idbuff.XKORD = xkordvar AND                     
         ROWID(idbuff) NE ROWID(id_temp) NO-ERROR. 
         IF AVAILABLE idbuff THEN DO: 
            RUN komb_UI.
         END.               
      END.
      ELSE DO:   
         musz = musz.
      END.
      
      IF TOG_MTRL = TRUE THEN DO:        
         IF globforetag = "Celpa" OR globforetag = "GRAN"  THEN RUN sign_UI.
         RUN rubrik_UI.
         RUN par_UI.
         numsok = FALSE.     
         FOR EACH mtrlbuff WHERE mtrlbuff.UPPLAG = temp_upp.UPPLAG AND 
         mtrlbuff.XKORD = xkordvar USE-INDEX ENRX: 
            IF mtrlbuff.ANTAL = 0 THEN DO:
               musz = musz.
               DELETE mtrlbuff.
            END.   
            ELSE DO:
               IF mtrlbuff.NUM = numvar THEN DO:
                  /*ingen par*/
                  IF mtrlbuff.PAR = 0 THEN RUN materiel_UI.
                  /*väsnter*/
                  IF mtrlbuff.PAR = 1 THEN RUN materiel2_UI.
                  /*mitten*/
                  IF mtrlbuff.PAR = 2 THEN RUN materiel3_UI.
                  /*höger*/
                  IF mtrlbuff.PAR = 3 THEN RUN materiel4_UI.
                  DELETE mtrlbuff.
               END.
               ELSE DO:
                  RUN materiel_UI.
                  DELETE mtrlbuff.
               END.   
            END.   
         END.  
         IF prisvar = 1 /*AND upppris > 0*/  THEN DO:
            totant = totant + 1.
            CREATE tidut. 
            SUBSTRING(tidut.UT,utnr[2]) = "Kostnad för konstruktion".
            RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                           
            SUBSTRING(tidut.UT,utnr[7]) = STRING(upppris,">>>>>>>>9"). 
            RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                                    
            upppris = 0.
            CREATE tidut.
         END.
         RUN par2_UI.
      END.   
      ELSE DO:
         FOR EACH mtrlbuff WHERE mtrlbuff.UPPLAG = temp_upp.UPPLAG AND 
         mtrlbuff.XKORD = xkordvar USE-INDEX ENRX:
            DELETE mtrlbuff.
         END.
      END.
      
      /*
      IF varforetypval[36] = 1 THEN.
      ELSE
      */ 
      IF kalkvar = TRUE THEN DO:
         IF TOG_P3 = TRUE THEN DO:
            CREATE tidut.
            totant = totant + 1.
            RUN tom_UI (INPUT ?).
            CREATE tidut.
            ASSIGN
            kant = kant + 2
            exkant = exkant + 2
            totant = totant + 1.           
            RUN tom_UI (INPUT ?).
            RUN rubrik2_UI.
            
            FOR EACH kalkbuff WHERE kalkbuff.UPPLAG = temp_upp.UPPLAG AND 
            kalkbuff.XKORD = xkordvar: 
               IF kalkbuff.ANTAL = 0 THEN DO:
                  musz = musz.
                  DELETE kalkbuff.
               END.   
               ELSE DO:         
                  RUN utkalk_UI.
                  DELETE kalkbuff.         
               END.   
            END.
            IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I} THEN DO:
               CREATE tidut.              
               totant = totant + 1.
               RUN tom_UI (INPUT ?).
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  CREATE tidut.
                  ASSIGN
                  totant = totant + 1
                  SUBSTRING(tidut.UT,utnr[1]) = "SUMMA:".
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                  SUBSTRING(tidut.UT,utnr[6]) = STRING(summont,">>>>>>>>9.999").
                  RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(summask,">>>>>>>>9.999").
                  RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
               END.   
               ASSIGN                                                
               kant = kant + 2
               exkant = exkant + 2.               
            END.
            ELSE DO:
               CREATE tidut.
               ASSIGN
               totant = totant + 1.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[7]) = "---------".
                  RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
               END.
               CREATE tidut.
               totant = totant + 1.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(sumea,">>>>>>>>9").
                  RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
               END.
               ASSIGN 
               kant = kant + 2
               exkant = exkant + 2.               
            END.            
         END.   
         ELSE DO:
            FOR EACH kalkbuff WHERE kalkbuff.UPPLAG = temp_upp.UPPLAG AND 
            kalkbuff.XKORD = xkordvar: 
               DELETE kalkbuff.
            END.   
         END.
      END.   
      IF TOG_EGEN = TRUE THEN DO:
         RUN egenkontroll_UI.
      END.
      CREATE tidut.
      totant = totant + 1.
      RUN tom_UI (INPUT ?).
      CREATE tidut.      
      ASSIGN
      kant = kant + 2
      exkant = exkant + 2
      totant = totant + 1.
      RUN tom_UI (INPUT ?).
      
      RUN bryt_UI.  
   END.
   ELSE DO:   
      ASSIGN            
      sumpris = 0
      sumea = 0
      summont = 0
      summask = 0.                                      
      FIND FIRST id_temp WHERE id_temp.NUM = mtrl_temp2.NUM NO-LOCK NO-ERROR.                                                                                                                      
      FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = mtrl_temp2.GRUPP 
      USE-INDEX KOD NO-LOCK NO-ERROR.
      IF NOT AVAILABLE BBENAMNING THEN DO:
         FIND FIRST BBENAMNING USE-INDEX KOD NO-LOCK NO-ERROR.
      END.
      RUN id_UI.
      IF skrivbord = TRUE THEN DO:
         FIND FIRST upptemp WHERE upptemp.NUM = mtrl_temp2.NUM AND
         upptemp.UPPLAG NE ? NO-LOCK NO-ERROR.
      END.
      IF TOG_UPP = TRUE THEN RUN upput_UI.                                          
      FIND FIRST uppl_temp WHERE uppl_temp.NUM = mtrl_temp2.NUM 
      NO-LOCK NO-ERROR.
      IF AVAILABLE uppl_temp THEN DO:
         
         RUN val_UI.
         IF TOG_SPANN = TRUE THEN RUN spann_UI.
         IF uppl_temp.ANMARK NE "" THEN DO:
            IF TOG_ANM = TRUE THEN RUN anm_UI.
         END.
      END.          
      ASSIGN
      numvar = mtrl_temp2.NUM.
      IF TOG_MTRL = TRUE THEN DO:                                
         IF globforetag = "Celpa" OR globforetag = "GRAN" THEN RUN sign_UI.
         RUN rubrik_UI.      
         RUN par_UI.
         numsok = TRUE.           
         
         FOR EACH mtrlbuff WHERE mtrlbuff.UPPLAG = temp_upp.UPPLAG AND 
         mtrlbuff.NUM = mtrl_temp2.NUM USE-INDEX ENRN BY mtrlbuff.ENR: 
            IF mtrlbuff.ANTAL = 0 THEN DO:
               musz = musz.
               DELETE mtrlbuff.
            END.   
            ELSE DO:
               IF mtrlbuff.PAR = 0 THEN RUN materiel_UI.
               IF mtrlbuff.PAR = 1 THEN RUN materiel2_UI.
               IF mtrlbuff.PAR = 2 THEN RUN materiel3_UI.
               IF mtrlbuff.PAR = 3 THEN RUN materiel4_UI.
               DELETE mtrlbuff.
            END.   
         END.     
         
         IF prisvar = 1 /*AND upppris > 0*/  THEN DO:
            totant = totant + 1.
            CREATE tidut. 
            SUBSTRING(tidut.UT,utnr[2]) = "Kostnad för konstruktion".
            RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                           
            SUBSTRING(tidut.UT,utnr[7]) = STRING(upppris,">>>>>>>>9"). 
            RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                                    
            upppris = 0.
            CREATE tidut.
         END.
         RUN par2_UI.     
      END.
      ELSE DO:
         FOR EACH mtrlbuff WHERE mtrlbuff.UPPLAG = temp_upp.UPPLAG AND 
         mtrlbuff.NUM = mtrl_temp2.NUM USE-INDEX ENRN BY mtrlbuff.ENR:
            DELETE mtrlbuff.
         END.
      END.  
      /*
      IF varforetypval[36] = 1 THEN.
      ELSE 
      */
      IF kalkvar = TRUE THEN DO:    
         IF TOG_P3 = TRUE THEN DO:
            CREATE tidut.
            totant = totant + 1.
            RUN tom_UI (INPUT ?).
            CREATE tidut.
            ASSIGN
            kant = kant + 2
            exkant = exkant + 2
            totant = totant + 1.
            RUN tom_UI (INPUT ?).
            RUN rubrik2_UI.
            
            FOR EACH kalkbuff WHERE kalkbuff.UPPLAG = temp_upp.UPPLAG AND 
            kalkbuff.NUM = numvar: 
               IF kalkbuff.ANTAL = 0 THEN DO:
                  musz = musz.
                  DELETE kalkbuff.
               END.   
               ELSE DO:         
                  RUN utkalk_UI.
                  DELETE kalkbuff.         
               END.   
            END.
            IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I} THEN DO:
               CREATE tidut.  
               totant = totant + 1.
               RUN tom_UI (INPUT ?).
               CREATE tidut.
               totant = totant + 1.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[1]) = "SUMMA:".
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                  SUBSTRING(tidut.UT,utnr[6]) = STRING(summont,">>>>>>>>9.999").
                  RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(summask,">>>>>>>>9.999").
                  RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
               END.
               ASSIGN
               kant = kant + 2
               exkant = exkant + 2.
               
            END.
            ELSE DO:
               CREATE tidut.
               ASSIGN
               totant = totant + 1.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[7]) = "---------".
                  RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
               END.
               CREATE tidut.
               ASSIGN
               totant = totant + 1.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(sumea,">>>>>>>>9").
                  RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
               END.
               ASSIGN
               kant = kant + 2
               exkant = exkant + 2.
            END.
         END.   
         ELSE DO:
            FOR EACH kalkbuff WHERE kalkbuff.UPPLAG = temp_upp.UPPLAG AND 
            kalkbuff.NUM = numvar:
               DELETE kalkbuff.
            END.
         END.
      END. 
      IF TOG_EGEN = TRUE THEN DO:
         RUN egenkontroll_UI.
      END.
      CREATE tidut.
      totant = totant + 1.
      RUN tom_UI (INPUT ?).
      CREATE tidut.
      ASSIGN
      totant = totant + 1
      kant = kant + 2
      exkant = exkant + 2.    
      RUN tom_UI (INPUT ?).
      
      RUN bryt_UI. 
   END.   
   ASSIGN
   totalsum = totalsum + sumpris
   totea = totea + sumea
   arbtim = arbtim + summont
   msktim = msktim + summask.
END PROCEDURE.

PROCEDURE bildfinns_UI :
   DEFINE INPUT PARAMETER linkvar AS CHARACTER NO-UNDO.
   link = linkvar.
END PROCEDURE.
PROCEDURE huvud_UI :
   /*HUVUD*/ 
   
   RUN flerber_UI.  
   DO TRANSACTION:         
      IF musz = TRUE THEN musz = musz.   
      ELSE DO:  
         IF globforetag = "cELPA" OR globforetag = "BORL" THEN DO:           
            totant = totant + 1.
            RUN tom_UI (INPUT ?).
            totant = totant + 1.
            RUN tom_UI (INPUT ?).
            totant = totant + 1.
            RUN tom_UI (INPUT ?).
            totant = totant + 1.
            RUN tom_UI (INPUT ?).
            totant = totant + 1.
            RUN tom_UI (INPUT ?).
            totant = totant + 1.
            RUN tom_UI (INPUT ?).
            totant = totant + 1.
            RUN tom_UI (INPUT ?). 
            extant = extant + 7.
            CREATE tidut.
            ASSIGN
            extant = extant + 1
            tant = tant + 1
            totant = totant + 1
            SUBSTRING(tidut.UT,utnr[1]) = seluppvar.
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                            
            SUBSTRING(tidut.UT,utnr[4]) = STRING(TODAY).
            RUN data_UI (INPUT TRUE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 1,INPUT ?).                            
            SUBSTRING(tidut.UT,utnr[5]) = STRING(TIME,"HH:MM:SS").                                                               
            RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 1,INPUT ?).                            
            CREATE tidut.      
            ASSIGN
            totant = totant + 1
            tant = tant + 1
            extant = extant + 1.
            RUN tom_UI (INPUT ?).
            CREATE tidut.       
            ASSIGN         
            tant = tant + 1
            extant = extant + 1
            totant = totant + 1
            SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gaonamnk.
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                            
            SUBSTRING(tidut.UT,utnr[3]) = ":" + valort.
            RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                            
            RUN telfon_UI.
            FIND FIRST BEREDNING WHERE BEREDNING.BERNR = INTEGER(valaonr) AND 
            BEREDNING.OMRADE = valomrade USE-INDEX BERNR NO-LOCK NO-ERROR.        
            IF BEREDNING.AONR NE ? THEN DO:
               FIND FIRST AONRTAB WHERE AONRTAB.AONR = BEREDNING.AONR AND
               AONRTAB.DELNR = BEREDNING.DELNR USE-INDEX AONR NO-LOCK NO-ERROR.
               IF AVAILABLE AONRTAB THEN DO:
                  CREATE tidut.
                  ASSIGN
                  tant = tant + 1
                  extant = extant + 1
                  totant = totant + 1
                  SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gaok.
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                              
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + AONRTAB.AONR + " Delnr:" +
                  STRING(AONRTAB.DELNR,Guru.Konstanter:varforetypchar[1]).                 
                  RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                                   
               END.
               ELSE DO:
                  CREATE tidut.
                  ASSIGN
                  tant = tant + 1
                  extant = extant + 1
                  totant = totant + 1
                  SUBSTRING(tidut.UT,utnr[1]) = "Beredning nr".
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).          
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(BEREDNING.BERNR).
                  RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                                    
               END.
            END.
         END.
         ELSE DO:           
            IF link NE ? THEN DO:
               totant = totant + 1.
               RUN tom_UI (INPUT ?).
               RUN tombild_UI.
               totant = totant + 1.
               RUN tom_UI (INPUT ?).
               RUN tombild_UI.
               totant = totant + 1.
               RUN tom_UI (INPUT ?).
               RUN tombild_UI.
               totant = totant + 1.
               RUN tom_UI (INPUT ?).
               RUN tombild_UI.
               totant = totant + 1.
               RUN tom_UI (INPUT ?). 
               RUN tombild_UI.
               extant = extant + 5.
            END.
            
            CREATE tidut.
            ASSIGN
            tant = tant + 1
            extant = extant + 1
            totant = totant + 1
            SUBSTRING(tidut.UT,utnr[1]) = seluppvar.
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                               
            SUBSTRING(tidut.UT,utnr[4]) = STRING(TODAY).
            RUN data_UI (INPUT TRUE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 1,INPUT ?).                                   
            IF globforetag = "CELPA" {GLOBVES.I} THEN DO: 
               /*Ingen tid för Vesab*/
            END.
            ELSE DO:
               SUBSTRING(tidut.UT,utnr[5]) = STRING(TIME,"HH:MM:SS").   
               RUN data_UI (INPUT TRUE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 1,INPUT ?).                                 
            END.
            CREATE tidut.      
            totant = totant + 1.
            RUN tom_UI (INPUT ?).
            CREATE tidut.       
            ASSIGN
            totant = totant + 1
            tant = tant + 2
            extant = extant + 2
               
            SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gaonamnk.
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                                  
            SUBSTRING(tidut.UT,utnr[3]) = ":" + valort.           
            RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?). 
            FOR EACH flerbertemp:
               IF valort = flerbertemp.BENAMNING THEN.
               ELSE DO:
                  CREATE tidut.
                  ASSIGN
                  totant = totant + 1
                  tant = tant + 2
                  extant = extant + 2
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + flerbertemp.BENAMNING.
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT "",INPUT 1,INPUT ?).                                  
                  RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?). 
               END.               
            END.
            RUN telfon_UI.
            CREATE tidut.  
            ASSIGN         
            tant = tant + 1                                                      
            extant = extant + 1
            totant = totant + 1
            SUBSTRING(tidut.UT,utnr[1]) = "Beredning nr".
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                                  
            SUBSTRING(tidut.UT,utnr[3]) = ":" + valaonr.
            RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                                    
            FOR EACH flerbertemp:
               IF valaonr = flerbertemp.BERAONR THEN.
               ELSE DO:
                  CREATE tidut. 
                  ASSIGN         
                  tant = tant + 1                                                      
                  extant = extant + 1
                  totant = totant + 1
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + flerbertemp.BERAONR.
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT "",INPUT 1,INPUT ?). 
                  RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?). 
               END.               
            END.
            CREATE tidut.  
            ASSIGN
            tant = tant + 1
            extant = extant + 1
            totant = totant + 1.
            FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = valomrade USE-INDEX OMR
            NO-LOCK NO-ERROR.
            IF AVAILABLE OMRADETAB THEN DO:
               ASSIGN                                                               
               SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gomrk.
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                                   
               SUBSTRING(tidut.UT,utnr[3]) = ":" + OMRADETAB.NAMN.  
               RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                            

            END. 
            FOR EACH flerbertemp:
               FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = flerbertemp.OMRADE USE-INDEX OMR
               NO-LOCK NO-ERROR.
               IF AVAILABLE OMRADETAB THEN DO:
                  IF valomrade = flerbertemp.OMRADE THEN.
                  ELSE DO:
                     CREATE tidut.  
                     ASSIGN
                     tant = tant + 1
                     extant = extant + 1
                     totant = totant + 1.
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + OMRADETAB.NAMN.
                     RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT "",INPUT 1,INPUT ?). 
                     RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?). 
                  END.
               END.
            END.
            FIND FIRST BEREDNING WHERE BEREDNING.BERNR = INTEGER(valaonr) AND 
            BEREDNING.OMRADE = valomrade USE-INDEX BERNR NO-LOCK NO-ERROR.
            /*
            IF globforetag = "ELPA" OR globforetag = "UMEA" THEN DO:
               IF BEREDNING.AONR = ? THEN DO:           
                  FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = BEREDNING.ANVANDARE
                  USE-INDEX ANDV NO-LOCK NO-ERROR.
                  IF AVAILABLE ANVANDARE THEN DO:            
                     FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = ANVANDARE.PERSONALKOD
                     USE-INDEX PERSONALKOD NO-LOCK NO-ERROR.
                  END.   
               END.
               ELSE DO: 
                  FIND FIRST AONRTAB WHERE AONRTAB.AONR = BEREDNING.AONR AND
                  AONRTAB.DELNR = BEREDNING.DELNR USE-INDEX AONR NO-LOCK NO-ERROR.
                  FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = AONRTAB.BEREDARE
                  USE-INDEX PERSONALKOD NO-LOCK NO-ERROR.
               END.                
               IF AVAILABLE PERSONALTAB THEN DO:                        
                  CREATE tidut.
                  ASSIGN
                  tant = tant + 1                
                  extant = extant + 1
                  totant = totant + 1
                  SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gberel.
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                                   
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + PERSONALTAB.FORNAM +                
                  " " + PERSONALTAB.EFTERNAMN + "     " + PERSONALTAB.TELEFON + 
                  "     " + PERSONALTAB.MOBILTEL.
                  RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                                                      
               END.
            END.  
            */
            IF BEREDNING.AONR NE ? THEN DO:
               FIND FIRST AONRTAB WHERE AONRTAB.AONR = BEREDNING.AONR AND
               AONRTAB.DELNR = BEREDNING.DELNR USE-INDEX AONR NO-LOCK NO-ERROR.
               IF AVAILABLE AONRTAB THEN DO:
                  CREATE tidut.
                  ASSIGN
                  tant = tant + 1                     
                  extant = extant + 1
                  totant = totant + 1
                  SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gaok.
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + AONRTAB.AONR + " Delnr:" + STRING(AONRTAB.DELNR,Guru.Konstanter:varforetypchar[1]).
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT "",INPUT 1,INPUT ?).                                    
                  RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                                    
               END.
            END.
            FOR EACH flerbertemp:
               IF AVAILABLE AONRTAB THEN DO:
                  IF flerbertemp.AONR = AONRTAB.AONR AND flerbertemp.DELNR = AONRTAB.DELNR THEN.
                  ELSE DO:
                     IF flerbertemp.AONR NE "" THEN DO:
                        CREATE tidut.
                        ASSIGN
                        tant = tant + 1                     
                        extant = extant + 1
                        totant = totant + 1
                        SUBSTRING(tidut.UT,utnr[3]) = ":" + flerbertemp.AONR + " Delnr:" + STRING(flerbertemp.DELNR,Guru.Konstanter:varforetypchar[1]).
                        RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT "",INPUT 1,INPUT ?).                                    
                        RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                                    
                     END.
                  END.               
               END.
               ELSE DO:
                  IF flerbertemp.AONR NE "" THEN DO:
                     CREATE tidut.
                     ASSIGN
                     tant = tant + 1                     
                     extant = extant + 1
                     totant = totant + 1
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + flerbertemp.AONR + " Delnr:" + STRING(flerbertemp.DELNR,Guru.Konstanter:varforetypchar[1]).
                     RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT "",INPUT 1,INPUT ?).                                    
                     RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                                    
                  END.
               END.
            END.
         END.
         IF edmedd NE "" THEN DO:
            ASSIGN
            uppvar = TRUE
            edvar = TRUE.
            RUN anm4_UI.
            ASSIGN
            edvar = FALSE
            uppvar = FALSE.
         END.
         IF prisvar = 1 THEN DO:
            IF TOG_MTRL = TRUE THEN DO:
               CREATE tidut.
               ASSIGN
               tant = tant + 1               
               extant = extant + 1
               totant = totant + 1
               SUBSTRING(tidut.UT,utnr[1]) = "Total summa".
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                                  
               SUBSTRING(tidut.UT,utnr[3]) = ":".
               sumrec = ROWID(tidut).
               rowspar = totant.
               RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                                     
            END.   
         END. 
         /*
         IF varforetypval[36] = 1 THEN.
         ELSE
         */ 
         IF kalkvar = TRUE THEN DO:
            IF prisvar = 1 THEN DO: 
               IF TOG_P3 = TRUE THEN DO:          
                  IF TOG_MTRL = TRUE THEN DO:               
                     IF globforetag = "GRAN" AND globforetag = "GKAL" AND globforetag = "ELPA" AND globforetag = "VAST" THEN DO:
                     END.
                     ELSE DO:
                        IF kalkvisabaraantal = TRUE THEN.
                        ELSE DO:
                           RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT "",INPUT 1,INPUT ?).
                           SUBSTRING(tidut.UT,utnr[3]) = "Totalt EA".
                           RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                             
                        END.
                     END.
                  END.
                  ELSE DO:
                     CREATE tidut.
                     totant = totant + 1.
                     IF globforetag = "GRAN" AND globforetag = "GKAL" AND globforetag = "ELPA" AND globforetag = "VAST" THEN DO:
                     END.
                     ELSE DO:
                        IF kalkvisabaraantal = TRUE THEN.
                        ELSE DO:
                           ASSIGN
                           SUBSTRING(tidut.UT,utnr[1]) = "Totalt EA".                        
                           RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                                   
                        END.
                     END.
                     ASSIGN                     
                     tant = tant + 1
                     extant = extant + 1
                     sumrec = ROWID(tidut).
                     rowspar = totant.
                  END.   
               END.   
            END.
            ELSE DO:
               IF TOG_P3 = TRUE THEN DO:
                  CREATE tidut.
                  totant = totant + 1.
                  IF globforetag NE "GRAN" AND globforetag NE "GKAL" AND globforetag NE "ELPA" AND globforetag NE "VAST" THEN DO:
                     IF kalkvisabaraantal = TRUE THEN.
                     ELSE DO:
                        SUBSTRING(tidut.UT,utnr[1]) = "Totalt EA".
                        RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
                     END.                                      
                  END.

                  ASSIGN                  
                  tant = tant + 1
                  extant = extant + 1
                  sumrec = ROWID(tidut).
                  rowspar = totant.                  
               END.   
            END.   
         END.
         IF globforetag = "SUND" OR globforetag = "SNAT" OR globforetag = "CELPA" THEN DO:
            CREATE tidut.     
            totant = totant + 1.
            RUN tom_UI (INPUT ?).
            CREATE tidut.      
            ASSIGN  
            totant = totant + 1
            SUBSTRING(tidut.UT,utnr[1]) = CAPS(Guru.Konstanter:genk).
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 2,INPUT ?).                                  
            SUBSTRING(tidut.UT,utnr[2]) = "BENÄMNING".
            RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 2,INPUT ?).                                   
            SUBSTRING(tidut.UT,utnr[4]) = "ENH".
            RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 2,INPUT ?).                                  
            SUBSTRING(tidut.UT,utnr[5]) = " ANTAL".                                 
            RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 2,INPUT ?).                                   
            IF prisvar = 1 THEN DO:
               ASSIGN 
               SUBSTRING(tidut.UT,utnr[6]) = " PRIS/ENH".
               RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 2,INPUT ?).                                    
               SUBSTRING(tidut.UT,utnr[7]) = "    SUMMA".
               RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 2,INPUT ?).                                     
            END.
            
            CREATE tidut.
            ASSIGN
            totant = totant + 1.
            /*
             str =                                
   "==========.==============================.=========.========.==========.==========" 
             str2 =                                                
   "==========.==============================.=========.========".
            IF prisvar = 1 THEN DO:      
               SUBSTRING(tidut.UT,utnr[1]) = str.
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                                   
            END.
            ELSE DO:  
               SUBSTRING(tidut.UT,utnr[1]) = str2. 
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                                   
            END.
            */ 
            RUN sund_UI.           
            CREATE tidut.
            ASSIGN
            totant = totant + 1
            SUBSTRING(tidut.UT,131) = "£".
            SUBSTRING(tidut.UT,132) = "$".
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT tidut.UT,INPUT 0,INPUT ?).                                  
            tant = 0.
            EMPTY TEMP-TABLE mtrl_temp NO-ERROR. 
            EMPTY TEMP-TABLE mtrl_temp2 NO-ERROR. 
            EMPTY TEMP-TABLE id_temp NO-ERROR. 
            EMPTY TEMP-TABLE grupp_temp NO-ERROR. 
            EMPTY TEMP-TABLE grupp_temp2 NO-ERROR. 
            EMPTY TEMP-TABLE uppl_temp NO-ERROR.            
         END.
         ASSIGN 
         str3 =
"======================================================================================="   
         str1 =
"***************************************************************************************"        
         str0 =
"---------------------------------------------------------------------------------------".
      END.
   END.                    
   RELEASE BEREDAONR NO-ERROR.
END PROCEDURE.


PROCEDURE telfon_UI :
   /*
   FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = globanvpkod  
   NO-LOCK NO-ERROR.
   */
   FIND FIRST BEREDNING WHERE BEREDNING.BERNR = INTEGER(valaonr) AND 
   BEREDNING.OMRADE = valomrade USE-INDEX BERNR NO-LOCK NO-ERROR.
   IF globforetag = "ELPA" OR globforetag = "UMEA" THEN DO:
      IF BEREDNING.AONR = ? THEN DO:           
         FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = BEREDNING.ANVANDARE
         USE-INDEX ANDV NO-LOCK NO-ERROR.
         IF AVAILABLE ANVANDARE THEN DO:            
            FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = ANVANDARE.PERSONALKOD
            USE-INDEX PERSONALKOD NO-LOCK NO-ERROR.
         END.   
      END.
      ELSE DO: 
         FIND FIRST AONRTAB WHERE AONRTAB.AONR = BEREDNING.AONR AND
         AONRTAB.DELNR = BEREDNING.DELNR USE-INDEX AONR NO-LOCK NO-ERROR.
         FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = AONRTAB.BEREDARE
         USE-INDEX PERSONALKOD NO-LOCK NO-ERROR.
      END.                
      IF AVAILABLE PERSONALTAB THEN DO:                        
         CREATE tidut.
         ASSIGN
         tant = tant + 1                
         extant = extant + 1
         totant = totant + 1
         SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gberel.
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                                   
         SUBSTRING(tidut.UT,utnr[3]) = ":" + PERSONALTAB.FORNAM +                
         " " + PERSONALTAB.EFTERNAMN + "     " + PERSONALTAB.TELEFON + 
         "     " + PERSONALTAB.MOBILTEL.
         RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                                                      
      END.
   END. 
   ELSE DO:
      FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = BEREDNING.ANVANDARE NO-LOCK NO-ERROR.
      IF NOT AVAILABLE ANVANDARE THEN DO:
         FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = globanvpkod  
         NO-LOCK NO-ERROR.
      END.
      ELSE DO:
         FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = ANVANDARE.PERSONALKOD  
         NO-LOCK NO-ERROR. 
      END.  
      IF NOT AVAILABLE ANVANDARE THEN DO:
         FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = globanvpkod  
         NO-LOCK NO-ERROR.
      END. 
      IF AVAILABLE PERSONALTAB THEN DO:            
         FIND FIRST BEREDAONR WHERE BEREDAONR.PERSONALKOD = PERSONALTAB.PERSONALKOD 
         USE-INDEX PERSONALKOD NO-LOCK NO-ERROR.   
         IF NOT AVAILABLE BEREDAONR THEN DO:
            CREATE BEREDAONR.
            ASSIGN 
            BEREDAONR.PERSONALKOD = PERSONALTAB.PERSONALKOD
            BEREDAONR.FORNAMN = PERSONALTAB.FORNAMN
            BEREDAONR.EFTERNAMN = PERSONALTAB.EFTERNAMN.
         END.
         CREATE tidut.
         ASSIGN
         tant = tant + 1 
         extant = extant + 1
         totant = totant + 1
         SUBSTRING(tidut.UT,utnr[1]) = "Utfärdare".
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                            
         SUBSTRING(tidut.UT,utnr[3]) = ":" + PERSONALTAB.FORNAMN +                
         " " + PERSONALTAB.EFTERNAMN + "     " + PERSONALTAB.TELEFON + "     " + PERSONALTAB.MOBILTEL.              
         RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                                   
      END.
   END.   

END PROCEDURE.


PROCEDURE id_UI :
   DEBUGGER:SET-BREAK().
   CREATE tidut.
   ASSIGN
   utrow1 = ROWID(tidut).
   totant = totant + 1.
   RUN tom_UI (INPUT 1).
   CREATE tidut. 
   ASSIGN
   totant = totant + 1
   SUBSTRING(tidut.UT,utnr[1]) = str1 
   utrow2 = ROWID(tidut)
   kant = 2
   exkant = 2.
   RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT 2). 
   /*FOREBILDER*/
   IF link NE ? THEN DO:
      IF globforetag = "CELPA" OR globforetag = "UMEA" {GLOBVES.I} THEN DO:              
         ASSIGN
         totant = totant + 1.
         RUN tom_UI (INPUT 3).      
         RUN tombild_UI.
         totant = totant + 1.
         RUN tom_UI (INPUT 4).      
         RUN tombild_UI.
         totant = totant + 1.
         RUN tom_UI (INPUT 5).      
         RUN tombild_UI.
         totant = totant + 1.
         RUN tom_UI (INPUT 6).        
         RUN tombild_UI.
         ASSIGN
         kant = 5  /* eg. 6 men för vattenfall kommer str1 att tas bort i visa i excel */ 
         exkant = 5.
      END.
      ELSE DO:
         totant = totant + 1.
         RUN tom_UI (INPUT 3).      
         RUN tombild_UI.
         totant = totant + 1.
         RUN tom_UI (INPUT 4).      
         RUN tombild_UI.
         totant = totant + 1.
         RUN tom_UI (INPUT 5).      
         RUN tombild_UI.
         totant = totant + 1.
         RUN tom_UI (INPUT 6).      
         RUN tombild_UI.
         totant = totant + 1.
         /*
         RUN tom_UI (INPUT 7).      
         totant = totant + 1.
         RUN tom_UI (INPUT 8).        
         */
         ASSIGN
         /*
         kant = 8  /* Borlänge lägger in en linje */
         */
         kant = 2  /*anders 20131008*/
         exkant = 8.
         
      END.     
   END.   
   ELSE DO:
      ASSIGN
      kant = 2
      exkant = 2.         
   END.
/*    IF globforetag = "cELPA" OR globforetag = "BORL" THEN DO:                           */
/*       CREATE tidut.                                                                    */
/*       ASSIGN                                                                           */
/*       utrow3 = ROWID(tidut)                                                            */
/*       totant = totant + 1.                                                             */
/*       RUN tom_UI (INPUT 3).                                                            */
/*       CREATE tidut.                                                                    */
/*       ASSIGN                                                                           */
/*       utrow4 = ROWID(tidut)                                                            */
/*       totant = totant + 1.                                                             */
/*       RUN tom_UI (INPUT 4).                                                            */
/*       CREATE tidut.                                                                    */
/*       ASSIGN                                                                           */
/*       utrow5 = ROWID(tidut)                                                            */
/*       totant = totant + 1.                                                             */
/*       RUN tom_UI (INPUT 5).                                                            */
/*       CREATE tidut.                                                                    */
/*       ASSIGN                                                                           */
/*       utrow6 = ROWID(tidut)                                                            */
/*       totant = totant + 1.                                                             */
/*       RUN tom_UI (INPUT 6).                                                            */
/*       CREATE tidut.                                                                    */
/*       ASSIGN                                                                           */
/*       utrow7 = ROWID(tidut)                                                            */
/*       totant = totant + 1.                                                             */
/*       RUN tom_UI (INPUT 7).                                                            */
/*       CREATE tidut.                                                                    */
/*       ASSIGN                                                                           */
/*       utrow8 = ROWID(tidut)                                                            */
/*       totant = totant + 1.                                                             */
/*       RUN tom_UI (INPUT 8).                                                            */
/*       ASSIGN                                                                           */
/*       kant = 8  /* Borlänge lägger in en linje */                                      */
/*       exkant = 8.                                                                      */
/*    END.                                                                                */
/*    ELSE IF globforetag = "cELPA" {GLOBVES.I} THEN DO:                                  */
/*       CREATE tidut.                                                                    */
/*       ASSIGN                                                                           */
/*       utrow3 = ROWID(tidut)                                                            */
/*       totant = totant + 1.                                                             */
/*       RUN tom_UI (INPUT 3).                                                            */
/*       CREATE tidut.                                                                    */
/*       ASSIGN                                                                           */
/*       utrow4 = ROWID(tidut)                                                            */
/*       totant = totant + 1.                                                             */
/*       RUN tom_UI (INPUT 4).                                                            */
/*       CREATE tidut.                                                                    */
/*       ASSIGN                                                                           */
/*       utrow5 = ROWID(tidut)                                                            */
/*       totant = totant + 1.                                                             */
/*       RUN tom_UI (INPUT 5).                                                            */
/*       CREATE tidut.                                                                    */
/*       ASSIGN                                                                           */
/*       utrow6 = ROWID(tidut)                                                            */
/*       totant = totant + 1.                                                             */
/*       RUN tom_UI (INPUT 6).                                                            */
/*       ASSIGN                                                                           */
/*       kant = 5  /* eg. 6 men för vattenfall kommer str1 att tas bort i visa i excel */ */
/*       exkant = 5.                                                                      */
/*    END.                                                                                */
/*    ELSE DO:                                                                            */
/*       ASSIGN                                                                           */
/*       kant = 2                                                                         */
/*       exkant = 2.                                                                      */
/*    END.                                                                                */
   IF TOG_ID = TRUE THEN DO:
      IF globforetag = "SUND" OR globforetag = "SNAT" THEN DO:
         musz = musz.
      END.
      ELSE DO: 
         IF AVAILABLE id_temp THEN DO:
            IF id_temp.FORNR NE "" THEN DO:  
               CREATE tidut.           
               ASSIGN    
               totant = totant + 1
               kant = kant + 1
               exkant = exkant + 1
               lage = 2   
               SUBSTRING(tidut.UT,utnr[1]) = SUBSTRING(ANNNAMN.TAB1,1,20).
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?). 
               ASSIGN
               SUBSTRING(tidut.UT,utnr[3]) = ":" + id_temp.FORNR.
               RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                         
            END.
            ELSE DO:
               lage = 1.   
            END.
            
            IF id_temp.LINNR NE "" THEN DO:
               IF lage = 1 THEN DO:
                  CREATE tidut.           
                  ASSIGN    
                  totant = totant + 1
                  kant = kant + 1
                  exkant = exkant + 1
                  lage = 2
                  SUBSTRING(tidut.UT,utnr[1]) = SUBSTRING(ANNNAMN.TAB2,1,20).
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).          
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + id_temp.LINNR.
                  RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                            
               END.   
               ELSE DO:
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[4]) = SUBSTRING(ANNNAMN.TAB2,1,20).
                  RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).  
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[6]) = ":" + id_temp.LINNR.
                  lage = 1.
                  RUN data_UI (INPUT TRUE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                            
               END. 
            END.
            IF id_temp.NATNR NE "" THEN DO:
               IF lage = 1 THEN DO:              
                  CREATE tidut.
                  ASSIGN
                  kant = kant + 1                                
                  exkant = exkant + 1
                  totant = totant + 1
                     
                  SUBSTRING(tidut.UT,utnr[1]) = SUBSTRING(ANNNAMN.TAB3,1,20).
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                  FIND FIRST BERNAT WHERE BERNAT.FORNR = id_temp.FORNR AND BERNAT.LINNR = id_temp.LINNR AND BERNAT.NATNR = id_temp.NATNR NO-LOCK NO-ERROR.
                  IF AVAILABLE BERNAT THEN DO:
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + id_temp.NATNR + " " + BERNAT.NAMN.                  
                  END.
                  ELSE SUBSTRING(tidut.UT,utnr[3]) = ":" + id_temp.NATNR.
                  RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                            
               END.
               ELSE DO:
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[4]) = SUBSTRING(ANNNAMN.TAB3,1,20).
                  RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).
                  FIND FIRST BERNAT WHERE BERNAT.FORNR = id_temp.FORNR AND BERNAT.LINNR = id_temp.LINNR AND BERNAT.NATNR = id_temp.NATNR NO-LOCK NO-ERROR.
                  IF AVAILABLE BERNAT THEN DO:
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + id_temp.NATNR + " " + BERNAT.NAMN.                  
                  END.
                  ELSE SUBSTRING(tidut.UT,utnr[6]) = ":" + id_temp.NATNR.
                  RUN data_UI (INPUT TRUE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                            
               END.   
            END.   
         END.   
      END.   
      CREATE tidut. 
      ASSIGN
      totant = totant + 1
      kant = kant + 1
      exkant = exkant + 1.
      DEBUGGER:SET-BREAK().  
      IF AVAILABLE BBENAMNING THEN DO:
         IF BBENAMNING.ID1 NE "" THEN DO:
            ASSIGN
            SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.ID1.         
             /*GG den 31/1 2006*/
            IF globforetag = "cELPA" {GLOBVES.I} THEN DO:
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
               IF AVAILABLE id_temp THEN 
               SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(id_temp.FRI1).
               ELSE SUBSTRING(tidut.UT,utnr[3]) = ":".
               RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                      
            END.              
            ELSE DO:              
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).          
               IF AVAILABLE id_temp THEN 
               SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(id_temp.FRI1).
               ELSE SUBSTRING(tidut.UT,utnr[3]) = ":".
               RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).          
            END.         
         END.   
      END.
      IF AVAILABLE BBENAMNING THEN DO:
         IF globforetag = "SUND" OR globforetag = "SNAT" THEN DO:
            IF BBENAMNING.ID2 NE "" THEN DO:
               ASSIGN
               SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.ID2.
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                           
               IF AVAILABLE id_temp THEN DO:
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(id_temp.FRI2).
                  RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                           
                  FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                  mtrlbuff.PAR = 1 NO-LOCK NO-ERROR.
                  IF AVAILABLE mtrlbuff THEN DO:
                     SUBSTRING(tidut.UT,utnr[5] + 7) = PARSTOLP.A.
                     RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5] + 7),INPUT 0,INPUT ?).                                       
                  END.
                  FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                  mtrlbuff.PAR = 2 NO-LOCK NO-ERROR.
                  IF AVAILABLE mtrlbuff THEN DO:
                     SUBSTRING(tidut.UT,utnr[5] + 9) = PARSTOLP.B.             
                     RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5] + 9),INPUT 0,INPUT ?).                                      
                  END.
                  FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                  mtrlbuff.PAR = 3 NO-LOCK NO-ERROR.
                  IF AVAILABLE mtrlbuff THEN DO: 
                     SUBSTRING(tidut.UT,utnr[5] + 11) = PARSTOLP.C.
                     RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5] + 11),INPUT 0,INPUT ?).                           
                  END.
               END.                                                         
               ELSE SUBSTRING(tidut.UT,utnr[3]) = ":".
               RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).          
            END.
         END.
         ELSE DO:
            IF BBENAMNING.ID2 NE "" THEN DO:
               IF globforetag = "GKAL" THEN DO:
                  IF BBENAMNING.ID1 = " " THEN RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT "",INPUT 3,INPUT ?).
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[4]) = BBENAMNING.ID2.
                  RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 3,INPUT ?).
                  IF AVAILABLE id_temp THEN DO:
                     SUBSTRING(tidut.UT,utnr[6]) = ":" + STRING(id_temp.FRI2).
                     RUN data_UI (INPUT TRUE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 3,INPUT ?).                           
                     FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                     mtrlbuff.PAR = 1 NO-LOCK NO-ERROR.
                     IF AVAILABLE mtrlbuff THEN DO:
                        SUBSTRING(tidut.UT,utnr[6] + 7) = PARSTOLP.A.
                        RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6] + 7),INPUT 3,INPUT ?).                                               
                     END.
                     FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                     mtrlbuff.PAR = 2 NO-LOCK NO-ERROR.
                     IF AVAILABLE mtrlbuff THEN DO:
                        SUBSTRING(tidut.UT,utnr[6] + 9) = PARSTOLP.B.
                        RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6] + 9),INPUT 3,INPUT ?).                                              
                     END.
                     FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                     mtrlbuff.PAR = 3 NO-LOCK NO-ERROR.
                     IF AVAILABLE mtrlbuff THEN DO:
                        SUBSTRING(tidut.UT,utnr[6] + 11) = PARSTOLP.C.
                        RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6] + 11),INPUT 3,INPUT ?).                                             
                     END.
                  END.     
               END.
               ELSE DO:
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[4]) = BBENAMNING.ID2.                                 
                  IF globforetag = "cELPA" {GLOBVES.I} THEN DO:
                     IF BBENAMNING.ID1 = " " THEN RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT "",INPUT 1,INPUT ?).
                     RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 1,INPUT ?).                                       
                     IF AVAILABLE id_temp THEN DO:
                        SUBSTRING(tidut.UT,utnr[6]) = ":" + STRING(id_temp.FRI2).
                        RUN data_UI (INPUT TRUE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 1,INPUT ?).                           
                        FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                        mtrlbuff.PAR = 1 NO-LOCK NO-ERROR.
                        IF AVAILABLE mtrlbuff THEN DO:
                           SUBSTRING(tidut.UT,utnr[6] + 7) = PARSTOLP.A.
                           RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6] + 7),INPUT 1,INPUT ?).                                                  
                        END.
                        FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                        mtrlbuff.PAR = 2 NO-LOCK NO-ERROR.
                        IF AVAILABLE mtrlbuff THEN DO:
                           SUBSTRING(tidut.UT,utnr[6] + 9) = PARSTOLP.B.
                           RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6] + 9),INPUT 1,INPUT ?).                                                 
                        END.
                        FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                        mtrlbuff.PAR = 3 NO-LOCK NO-ERROR.
                        IF AVAILABLE mtrlbuff THEN DO:
                           SUBSTRING(tidut.UT,utnr[6] + 11) = PARSTOLP.C.
                           RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6] + 11),INPUT 1,INPUT ?).                                                
                        END.
                     END.   
                  END.
                      
                  ELSE DO:
                     IF AVAILABLE id_temp AND globforetag = "ORBI" THEN DO:
                        IF id_temp.FRI3 NE "" THEN tidut.UT = "".
                        ELSE RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).
                     END.    
                     ELSE RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                                       
                     IF AVAILABLE id_temp THEN DO:
                        IF globforetag = "ORBI" AND id_temp.FRI3 NE "" THEN DO:
                           
                        END.
                        ELSE DO:
                           SUBSTRING(tidut.UT,utnr[6]) = ":" + STRING(id_temp.FRI2).
                           RUN data_UI (INPUT TRUE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).
                        END.                              
                     END.
                     FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                     mtrlbuff.PAR = 1 NO-LOCK NO-ERROR.
                     IF AVAILABLE mtrlbuff THEN DO:
                        SUBSTRING(tidut.UT,utnr[6] + 7) = PARSTOLP.A.
                        RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6] + 7),INPUT 0,INPUT ?).                          
                     END.
                     FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                     mtrlbuff.PAR = 2 NO-LOCK NO-ERROR.
                     IF AVAILABLE mtrlbuff THEN DO:
                        SUBSTRING(tidut.UT,utnr[6] + 9) = PARSTOLP.B.
                        RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6] + 9),INPUT 0,INPUT ?).                         
                     END.
                     FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                     mtrlbuff.PAR = 3 NO-LOCK NO-ERROR.
                     IF AVAILABLE mtrlbuff THEN DO:
                        SUBSTRING(tidut.UT,utnr[6] + 11) = PARSTOLP.C.
                        RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6] + 11),INPUT 0,INPUT ?).                        
                     END.                  
                  END.
               END.
            END. 
         END.
      END.
               
      IF AVAILABLE id_temp THEN DO:
         IF id_temp.FRI3 NE "" THEN DO:
            CREATE tidut.
            ASSIGN
            totant = totant + 1
            kant = kant + 1
            exkant = exkant + 1.
            IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "elpa" THEN DO:
               SUBSTRING(tidut.UT,utnr[4]) = "Littera".
               IF globforetag = "GKAL" THEN DO:
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT "",INPUT 3,INPUT ?).
                  RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 3,INPUT ?).                                             
               END.
               ELSE RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                           
               SUBSTRING(tidut.UT,utnr[6]) = ":" + STRING(id_temp.FRI3).
               IF globforetag = "GKAL" THEN DO:
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT "",INPUT 3,INPUT ?).
                  RUN data_UI (INPUT TRUE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 3,INPUT ?).                           
               END.
               ELSE RUN data_UI (INPUT TRUE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                           
            END.
            ELSE DO:
               IF globforetag = "ALTE" {GLOBVES.I} THEN DO:
/*                   RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT "",INPUT 1,INPUT ?). */
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                           
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(id_temp.FRI3).
                  RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                                             
               END.
               ELSE IF globforetag = "ORBI" THEN DO:
                  IF id_temp.GRUPP = 32 THEN SUBSTRING(tidut.UT,utnr[4]) = "Stnnr".
                  ELSE IF id_temp.GRUPP = 0 THEN SUBSTRING(tidut.UT,utnr[4]) = "Skåpnr".
                  ELSE SUBSTRING(tidut.UT,utnr[4]) = "Byggnr".
                  RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                           
                  SUBSTRING(tidut.UT,utnr[6]) = ":" + STRING(id_temp.FRI3).
                  RUN data_UI (INPUT TRUE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                           
               END.
               ELSE DO:
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[4]) = "Fri ID".
                  RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                           
                  SUBSTRING(tidut.UT,utnr[6]) = ":" + STRING(id_temp.FRI3).
                  RUN data_UI (INPUT TRUE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                           
               END.
            END.
         END.   
      END.                     
   END.  
   
   /* vattenfall vill inte ha med konstruktionsgrupp, konstruktion om Konstruktionsval urbockad*/
   IF globforetag = "vast" AND TOG_VAL = FALSE THEN.
   ELSE DO:    
      FIND FIRST KONSTGRUPP WHERE KONSTGRUPP.KONSKOD = id_temp.GRUPP NO-LOCK NO-ERROR.                
      IF valkonst = FALSE THEN DO:
         IF AVAILABLE KONSTGRUPP THEN DO:
            ASSIGN
            totant = totant + 1
            kant = kant + 1
            exkant = exkant + 1.
            CREATE tidut.                    
            SUBSTRING(tidut.UT,utnr[1]) =  KONSTGRUPP.BENAMNING.
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT tidut.UT,INPUT 0,INPUT ?).
         END.
         FIND FIRST BERID2 WHERE BERID2.AONR = valaonr AND BERID2.OMRADE = valomrade AND BERID2.NUM = id_temp.NUM NO-LOCK NO-ERROR.
         IF AVAILABLE BERID2 THEN DO:         
            IF BERID2.STOLPNR NE "" THEN DO: 
               SUBSTRING(tidut.UT,utnr[4]) = "Kartref. " + BERID2.STOLPNR.
               RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).    
               RUN kartrefbgc_UI.
            END.                          
         END.
      END.
      ELSE DO:
         FIND FIRST hid WHERE /*hid.BERAONR = valaonr AND hid.OMRADE = valomrade AND*/ hid.ORD = id_temp.NUM NO-LOCK NO-ERROR.
         IF AVAILABLE hid THEN DO:
            IF AVAILABLE KONSTGRUPP THEN DO:
               ASSIGN
               totant = totant + 1
               kant = kant + 1
               exkant = exkant + 1.
               CREATE tidut.             
               SUBSTRING(tidut.UT,utnr[1]) =  KONSTGRUPP.BENAMNING.
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
            END.         
            FIND FIRST BERID2 WHERE BERID2.AONR = hid.BERAONR AND BERID2.OMRADE = hid.OMRADE AND BERID2.NUM = hid.NUM NO-LOCK NO-ERROR.
            IF AVAILABLE BERID2 THEN DO:
               IF BERID2.STOLPNR NE "" THEN DO: 
                  SUBSTRING(tidut.UT,utnr[4]) = "Kartref. " + BERID2.STOLPNR.
                  RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).  
                  RUN kartrefbgc_UI.
               END.                            
            END.
         END.
      END.
   END.
      
END PROCEDURE.

PROCEDURE kalk_UI :
   /*kalkår*/
    
   IF varforetypval[35] = 1 THEN DO:
      RUN kalkarstart2_UI (INPUT katvar).
   END.
   ELSE DO:
      hjkatvar[1] = katvar. 
      FIND FIRST EBRPRIS WHERE EBRPRIS.ARTAL = hjkatvar[1]
      USE-INDEX AR NO-LOCK NO-ERROR.
      IF AVAILABLE EBRPRIS THEN DO:
         ASSIGN
         hjkatprisvar[1] = EBRPRIS.MONT
         hjkatmask1var[1] = EBRPRIS.MASK1
         hjkatmask2var[1] = EBRPRIS.MASK2
         hjkatrorligvar[1] = EBRPRIS.RORLIG.
      END.
   END.
   

   RUN LISTKALKU.P
      (INPUT valaonr, INPUT valomrade, INPUT valkonst, INPUT TABLE kon_val, 
      OUTPUT TABLE ber_temp).
     
   ASSIGN   
   sumantal = 0.
   
   FOR EACH ber_temp BREAK BY ber_temp.NUM BY ber_temp.ARBKOD BY ber_temp.LOPNR:        
      ACCUMULATE ber_temp.ANTAL (TOTAL BY ber_temp.NUM BY ber_temp.ARBKOD BY ber_temp.LOPNR).       
      IF LAST-OF(ber_temp.LOPNR) THEN DO:
         CREATE ber_temp2.
         ASSIGN                        
         ber_temp2.ARBKOD = ber_temp.ARBKOD 
         ber_temp2.LOPNR = ber_temp.LOPNR 
         ber_temp2.ENHET = ber_temp.ENHET
         ber_temp2.BENAMNING = ber_temp.BENAMNING
         ber_temp2.NUM = ber_temp.NUM 
         
         ber_temp2.ANTAL = (ACCUM TOTAL BY ber_temp.LOPNR ber_temp.ANTAL).
                                         
         /*ber_temp2.ANTAL = (ACCUM TOTAL ber_temp.ANTAL) - sumantal * sumantal = ACCUM TOTAL ber_temp.ANTAL.*/                       
      END.     
   END.
   
   IF classerkoll NE "" THEN DO: 
      FOR EACH ber_temp2 USE-INDEX KOD:
         RUN skapaKalkKlasser_UI.
      END.   
   END.  
   ELSE DO:
      FIND FIRST KALKBEF WHERE KALKBEF.KALKNR = 0 AND KALKBEF.KATAR = hjkatvar[1]
      USE-INDEX ARTAL NO-LOCK NO-ERROR.
      IF kalkvisabaraantal = TRUE THEN DO:
         FOR EACH ber_temp2 USE-INDEX KOD:
            FIND FIRST LOP2 WHERE LOP2.ARBKOD = ber_temp2.ARBKOD AND
            LOP2.LOPNR = ber_temp2.LOPNR AND LOP2.KATAR = hjkatvar[1] 
            USE-INDEX AR NO-LOCK NO-ERROR.
            IF AVAILABLE LOP2 THEN RUN skapaP2_UI.
         END.
      END.
      ELSE DO:
         FOR EACH ber_temp2 USE-INDEX KOD:
            FIND FIRST LOP3 WHERE LOP3.ARBKOD = ber_temp2.ARBKOD AND
            LOP3.LOPNR = ber_temp2.LOPNR AND LOP3.KATAR = hjkatvar[1] 
            USE-INDEX AR NO-LOCK NO-ERROR.
            IF AVAILABLE LOP3 THEN RUN skapa_UI.
         END.
      END.
   END.   
   FOR EACH kalk_temp USE-INDEX NUM:      
      FIND FIRST uppl_temp WHERE uppl_temp.NUM = kalk_temp.NUM
      USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE uppl_temp THEN DO: 
         ASSIGN
         kalk_temp.UPPLAG = uppl_temp.UPPLAG
         kalk_temp.GRUPP = uppl_temp.GRUPP.
         IF TOG_UPP = FALSE THEN kalk_temp.UPPLAG = ?.
      END.
      ELSE DO:
         kalk_temp.UPPLAG = ?.
      END.
      FIND FIRST id_temp WHERE id_temp.NUM = kalk_temp.NUM
      USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE id_temp THEN DO:  
         IF id_temp.ENDKOMB = FALSE THEN DO:
            ASSIGN            
            kalk_temp.XKORD = id_temp.XKORD.
         END.
         ELSE DO:
            FIND FIRST idbuff WHERE idbuff.XKORD = id_temp.XKORD AND
            ROWID(idbuff) NE ROWID(id_temp) NO-LOCK NO-ERROR.
            ASSIGN                           
            kalk_temp.XKORD = idbuff.XKORD.
         END.   
      END.
      ELSE DO:
         kalk_temp.XKORD = ?.
      END.
   END.    
   ASSIGN
   sumpris = 0
   sumantal = 0
   sumea = 0
   summont = 0
   summask = 0.
   FOR EACH kalk_temp WHERE kalk_temp.XKORD NE ? BREAK BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.XKORD: 
      ACCUMULATE kalk_temp.EA (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.XKORD). 
      ACCUMULATE kalk_temp.F2 (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.XKORD). 
      ACCUMULATE kalk_temp.F3 (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.XKORD). 
      ACCUMULATE kalk_temp.F4 (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.XKORD). 
      ACCUMULATE kalk_temp.ANTAL (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.XKORD).       
      IF LAST-OF(kalk_temp.XKORD) THEN DO:
         CREATE kalk_temp2.
         ASSIGN                        
         kalk_temp2.UPPLAG = kalk_temp.UPPLAG 
         kalk_temp2.GRUPP = kalk_temp.GRUPP 
         kalk_temp2.XKORD = kalk_temp.XKORD
         kalk_temp2.ARBKOD = kalk_temp.ARBKOD
         kalk_temp2.LOPNR = kalk_temp.LOPNR
         kalk_temp2.BENAMNING = kalk_temp.BENAMNING 
         kalk_temp2.ENHET = kalk_temp.ENHET 
         kalk_temp2.EAST = kalk_temp.EAST        
         kalk_temp2.EA = (ACCUM TOTAL BY kalk_temp.XKORD kalk_temp.EA) 
         kalk_temp2.F2 = (ACCUM TOTAL BY kalk_temp.XKORD kalk_temp.F2)
         kalk_temp2.F3 = (ACCUM TOTAL BY kalk_temp.XKORD kalk_temp.F3)
         kalk_temp2.F4 = (ACCUM TOTAL BY kalk_temp.XKORD kalk_temp.F4)
         kalk_temp2.ANTAL = (ACCUM TOTAL BY kalk_temp.XKORD kalk_temp.ANTAL).         
      END.     
   END.  
   ASSIGN
   sumpris = 0
   sumantal = 0
   sumea = 0
   summont = 0
   summask = 0.    
   FOR EACH kalk_temp WHERE kalk_temp.XKORD = ? BREAK BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.NUM: 
      ACCUMULATE kalk_temp.EA (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.NUM). 
      ACCUMULATE kalk_temp.F2 (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.NUM). 
      ACCUMULATE kalk_temp.F3 (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.NUM). 
      ACCUMULATE kalk_temp.F4 (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.NUM). 
      ACCUMULATE kalk_temp.ANTAL (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.NUM).       
      IF LAST-OF(kalk_temp.NUM) THEN DO:
         CREATE kalk_temp2.
         ASSIGN                        
         kalk_temp2.UPPLAG = kalk_temp.UPPLAG 
         kalk_temp2.GRUPP = kalk_temp.GRUPP 
         kalk_temp2.XKORD = kalk_temp.XKORD 
         kalk_temp2.NUM = kalk_temp.NUM
         kalk_temp2.ARBKOD = kalk_temp.ARBKOD
         kalk_temp2.LOPNR = kalk_temp.LOPNR
         kalk_temp2.BENAMNING = kalk_temp.BENAMNING 
         kalk_temp2.ENHET = kalk_temp.ENHET
         kalk_temp2.EAST = kalk_temp.EAST
         kalk_temp2.EA = (ACCUM TOTAL BY kalk_temp.NUM kalk_temp.EA) 
         kalk_temp2.F2 = (ACCUM TOTAL BY kalk_temp.NUM kalk_temp.F2)
         kalk_temp2.F3 = (ACCUM TOTAL BY kalk_temp.NUM kalk_temp.F3)
         kalk_temp2.F4 = (ACCUM TOTAL BY kalk_temp.NUM kalk_temp.F4)
         kalk_temp2.ANTAL = (ACCUM TOTAL BY kalk_temp.NUM kalk_temp.ANTAL).                                
      END.     
   END.
END PROCEDURE.

PROCEDURE komb_UI :

   CREATE tidut.
   ASSIGN
   totant = totant + 1
   kant = kant + 1
   exkant = exkant + 1
   SUBSTRING(tidut.UT,utnr[1]) ="Kombinerad med".
   RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                           
   FOR EACH idbuff WHERE idbuff.XKORD = xkordvar AND                        
   ROWID(idbuff) NE ROWID(id_temp):                                
      CREATE tidut.
      ASSIGN
      totant = totant + 1
      kant = kant + 1
      exkant = exkant + 1.
      FIND FIRST grupp_temp2 WHERE grupp_temp2.KONSKOD = idbuff.GRUPP.
      ASSIGN SUBSTRING(tidut.UT,utnr[1]) = grupp_temp2.BENAMNING. 
      RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                           
      FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = idbuff.GRUPP 
      USE-INDEX KOD NO-LOCK NO-ERROR.  
      IF NOT AVAILABLE BBENAMNING THEN DO:
         FIND FIRST BBENAMNING USE-INDEX KOD NO-LOCK NO-ERROR.  
      END.
      IF idbuff.FRI2 NE ? THEN DO:
         CREATE tidut.         
         ASSIGN 
         totant = totant + 1
         kant = kant + 1
         exkant = exkant + 1
         SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.ID2.
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                           
         SUBSTRING(tidut.UT,utnr[4]) = ":" + STRING(idbuff.FRI2).
         RUN data_UI (INPUT TRUE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                           
      END.   
      ELSE DO:
         IF BBENAMNING.ID2 NE "" THEN DO:
            CREATE tidut.
            ASSIGN
            totant = totant + 1
            kant = kant + 1
            exkant = exkant + 1
            SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.ID2.
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                           
            SUBSTRING(tidut.UT,utnr[4]) = ":".
            RUN data_UI (INPUT TRUE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                           
         END.   
      END.   
      FIND FIRST uppbuff WHERE uppbuff.NUM = idbuff.NUM 
      NO-LOCK NO-ERROR.
      IF AVAILABLE uppbuff THEN DO:  
         CREATE tidut.
         ASSIGN       
         totant = totant + 1
         kant = kant + 1 
         exkant = exkant + 1
         SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.B1.
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                           
         SUBSTRING(tidut.UT,utnr[4]) = ":" + uppbuff.F1. 
         RUN data_UI (INPUT TRUE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                           
         IF uppbuff.ANMARK NE "" THEN DO:                                   
            IF TOG_ANM = TRUE THEN RUN anm3_UI.      
         END.
         IF TOG_SPANN = TRUE THEN RUN spann2_UI.   
      END.                                          
   END.
END PROCEDURE.

PROCEDURE materiel2_UI :
   IF mat2 = FALSE THEN DO:       
      CREATE tidut2.
      RUN tom_UI (INPUT ?).
      CREATE tidut2.
      ASSIGN
      SUBSTRING(tidut2.UT,utnr[1]) = PARSTOLP.AFORKL
      mat2 = TRUE
      kant = kant + 3
      exkant = exkant + 3.
      RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut2.UT,utnr[1]),INPUT 0,INPUT ?).
      CREATE tidut2.
      RUN tom_UI (INPUT ?).
   END.
   CREATE tidut2.
   ASSIGN
   kant = kant + 1
   exkant = exkant + 1
   SUBSTRING(tidut2.UT,utnr[1]) = mtrlbuff.ENR.
   RUN data_UI (INPUT TRUE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut2.UT,utnr[1]),INPUT 0,INPUT ?).
   SUBSTRING(tidut2.UT,utnr[2]) = SUBSTRING(mtrlbuff.BENAMNING,1,30).
   RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut2.UT,utnr[2]),INPUT 0,INPUT ?).
   SUBSTRING(tidut2.UT,utnr[4]) = mtrlbuff.ENHET.
   RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut2.UT,utnr[4]),INPUT 0,INPUT ?).
   SUBSTRING(tidut2.UT,utnr[5]) = STRING(mtrlbuff.ANTAL,">>>>>9"). 
   RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut2.UT,utnr[5]),INPUT 0,INPUT ?).
   IF prisvar = 1 THEN  DO:
      ASSIGN 
      SUBSTRING(tidut2.UT,utnr[6]) = STRING(mtrlbuff.PRIS,">>>>>>>>9").
      RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut2.UT,utnr[6]),INPUT 0,INPUT ?).
      SUBSTRING(tidut2.UT,utnr[7]) = STRING(mtrlbuff.TOTPRIS,">>>>>>>>9").      
      RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut2.UT,utnr[7]),INPUT 0,INPUT ?).
   END.
   upppris = upppris + mtrlbuff.TOTPRIS. 
   sumpris = sumpris + mtrlbuff.TOTPRIS.  
   IF TOG_TEXT = TRUE THEN DO:
      ASSIGN
      mtextvar = FALSE
      tiduttyp = 2
      skapad = FALSE.      
      IF numsok = FALSE THEN DO:
         RUN mtextxkord_UI.
      END.
      ELSE DO:
         RUN mtextnum_UI.
      END.
      IF skapad = TRUE THEN DO:
         FIND LAST tidut2 NO-ERROR.
         DELETE tidut2.
         skapad = FALSE.
      END.
   END.
END PROCEDURE.

PROCEDURE materiel3_UI :

   IF mat3 = FALSE THEN DO:      
      CREATE tidut3.
      RUN tom_UI (INPUT ?).
      CREATE tidut3.
      ASSIGN
      SUBSTRING(tidut3.UT,utnr[1]) = PARSTOLP.BFORKL
      mat3 = TRUE
      kant = kant + 3
      exkant = exkant + 3.
      RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut3.UT,utnr[1]),INPUT 0,INPUT ?).
      CREATE tidut3.      
      RUN tom_UI (INPUT ?).
   END.
   CREATE tidut3.
   ASSIGN
   kant = kant + 1
   exkant = exkant + 1
   SUBSTRING(tidut3.UT,utnr[1]) = mtrlbuff.ENR.
   RUN data_UI (INPUT TRUE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut3.UT,utnr[1]),INPUT 0,INPUT ?).
   SUBSTRING(tidut3.UT,utnr[2]) = SUBSTRING(mtrlbuff.BENAMNING,1,30).
   RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut3.UT,utnr[2]),INPUT 0,INPUT ?).
   SUBSTRING(tidut3.UT,utnr[4]) = mtrlbuff.ENHET.
   RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut3.UT,utnr[4]),INPUT 0,INPUT ?).
   SUBSTRING(tidut3.UT,utnr[5]) = STRING(mtrlbuff.ANTAL,">>>>>9").   
   RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut3.UT,utnr[5]),INPUT 0,INPUT ?).
   IF prisvar = 1 THEN DO:
      ASSIGN 
      SUBSTRING(tidut3.UT,utnr[6]) = STRING(mtrlbuff.PRIS,">>>>>>>>9").
      RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut3.UT,utnr[6]),INPUT 0,INPUT ?).
      SUBSTRING(tidut3.UT,utnr[7]) = STRING(mtrlbuff.TOTPRIS,">>>>>>>>9").      
      RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut3.UT,utnr[7]),INPUT 0,INPUT ?).
   END.
   upppris = upppris + mtrlbuff.TOTPRIS. 
   sumpris = sumpris + mtrlbuff.TOTPRIS.  
   IF TOG_TEXT = TRUE THEN DO:
      ASSIGN
      mtextvar = FALSE
      tiduttyp = 3
      skapad = FALSE.
      IF numsok = FALSE THEN DO:
         RUN mtextxkord_UI.
      END.
      ELSE DO:
         RUN mtextnum_UI.
      END.
      IF skapad = TRUE THEN DO:
         FIND LAST tidut3 NO-ERROR.
         DELETE tidut3.
         skapad = FALSE.
      END.
   END.
END PROCEDURE.

PROCEDURE materiel4_UI :

   IF mat4 = FALSE THEN DO:      
      CREATE tidut4.
      RUN tom_UI (INPUT ?).
      CREATE tidut4.
      ASSIGN
      SUBSTRING(tidut4.UT,utnr[1]) = PARSTOLP.CFORKL
      mat4 = TRUE
      kant = kant + 3
      exkant = exkant + 3.
      RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut4.UT,utnr[1]),INPUT 0,INPUT ?).
      CREATE tidut4.
      RUN tom_UI (INPUT ?).
   END.
   CREATE tidut4.
   ASSIGN
   kant = kant + 1
   exkant = exkant + 1
   SUBSTRING(tidut4.UT,utnr[1]) = mtrlbuff.ENR.
   RUN data_UI (INPUT TRUE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut4.UT,utnr[1]),INPUT 0,INPUT ?).
   SUBSTRING(tidut4.UT,utnr[2]) = SUBSTRING(mtrlbuff.BENAMNING,1,30).
   RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut4.UT,utnr[2]),INPUT 0,INPUT ?).
   SUBSTRING(tidut4.UT,utnr[4]) = mtrlbuff.ENHET.
   RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut4.UT,utnr[4]),INPUT 0,INPUT ?).
   ASSIGN
   SUBSTRING(tidut4.UT,utnr[5]) = STRING(mtrlbuff.ANTAL,">>>>>9"). 
   RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut4.UT,utnr[5]),INPUT 0,INPUT ?).
   IF prisvar = 1 THEN DO:
      ASSIGN 
      SUBSTRING(tidut4.UT,utnr[6]) = STRING(mtrlbuff.PRIS,">>>>>>>>9").
      RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut4.UT,utnr[6]),INPUT 0,INPUT ?).
      SUBSTRING(tidut4.UT,utnr[7]) = STRING(mtrlbuff.TOTPRIS,">>>>>>>>9").
      RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut4.UT,utnr[7]),INPUT 0,INPUT ?).
   END.
   upppris = upppris + mtrlbuff.TOTPRIS. 
   sumpris = sumpris + mtrlbuff.TOTPRIS.
   IF TOG_TEXT = TRUE THEN DO:
      ASSIGN
      mtextvar = FALSE
      tiduttyp = 4
      skapad = FALSE.
      IF numsok = FALSE THEN DO:
         RUN mtextxkord_UI.
      END.
      ELSE DO:
         RUN mtextnum_UI.
      END.
      IF skapad = TRUE THEN DO:
         FIND LAST tidut4 NO-ERROR.
         DELETE tidut4.
         skapad = FALSE.
      END.
   END.
END PROCEDURE.

PROCEDURE materiel_UI :

   CREATE tidut.
   ASSIGN
   totant = totant + 1
   kant = kant + 1
   exkant = exkant + 1
   SUBSTRING(tidut.UT,utnr[1]) = mtrlbuff.ENR.
   RUN data_UI (INPUT TRUE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
   SUBSTRING(tidut.UT,utnr[2]) = SUBSTRING(mtrlbuff.BENAMNING,1,30).
   RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).
   SUBSTRING(tidut.UT,utnr[4]) = mtrlbuff.ENHET.
   RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).
   SUBSTRING(tidut.UT,utnr[5]) = STRING(mtrlbuff.ANTAL,">>>>>9").     
   RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).
   IF prisvar = 1 THEN DO:
      ASSIGN 
      SUBSTRING(tidut.UT,utnr[6]) = STRING(mtrlbuff.PRIS,">>>>>>>>9").
      RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).
      SUBSTRING(tidut.UT,utnr[7]) = STRING(mtrlbuff.TOTPRIS,">>>>>>>>9").
      RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
      sumpris = sumpris + mtrlbuff.TOTPRIS.             
   END.
   upppris = upppris + mtrlbuff.TOTPRIS. 
   IF TOG_TEXT = TRUE THEN DO:
      ASSIGN
      mtextvar = FALSE
      tiduttyp = 1
      skapad = FALSE.
      IF numsok = FALSE THEN DO:
         RUN mtextxkord_UI.
      END.
      ELSE DO:
         RUN mtextnum_UI.            
      END.
      IF skapad = TRUE THEN DO:
         FIND LAST tidut NO-ERROR.
         DELETE tidut.
         skapad = FALSE.
      END.
   END.
END PROCEDURE.

PROCEDURE mtextnum_UI :

   FOR EACH mtrl_temp WHERE mtrl_temp.NUM = mtrlbuff.NUM AND
   mtrl_temp.ENR = mtrlbuff.ENR:
              
      IF mtrl_temp.MTRLTEXT NE "" THEN DO:
         RUN text_UI.
      END.   
      DELETE mtrl_temp.
   END.
END PROCEDURE.

PROCEDURE mtextxkord_UI :

   FOR EACH mtrl_temp WHERE mtrl_temp.XKORD = mtrlbuff.XKORD AND
   mtrl_temp.ENR = mtrlbuff.ENR:
      
      IF mtrl_temp.MTRLTEXT NE "" THEN DO:
         RUN text_UI.
      END.   
      DELETE mtrl_temp.
   END.
END PROCEDURE.

PROCEDURE par2_UI :
   FIND FIRST tidut2 NO-LOCK NO-ERROR.
   IF AVAILABLE tidut2 THEN DO:         
      FOR EACH tidut2:
         CREATE tidut.
         ASSIGN
         exkant = exkant + 1
         kant = kant + 1.
         tidut.UT = tidut2.UT.
      END.   
   END.
   FIND FIRST tidut3 NO-LOCK NO-ERROR.
   IF AVAILABLE tidut3 THEN DO:         
      FOR EACH tidut3:
         CREATE tidut.
         ASSIGN
         exkant = exkant + 1
         kant = kant + 1.
         tidut.UT = tidut3.UT.
      END.   
   END.
   FIND FIRST tidut4 NO-LOCK NO-ERROR.
   IF AVAILABLE tidut4 THEN DO:         
      FOR EACH tidut4:
         CREATE tidut.
         ASSIGN
         exkant = exkant + 1
         kant = kant + 1.
         tidut.UT = tidut4.UT.
      END.   
   END.
END PROCEDURE.

PROCEDURE par_UI :
   ASSIGN
   mat2 = FALSE
   mat3 = FALSE
   mat4 = FALSE. 
   EMPTY TEMP-TABLE tidut2 NO-ERROR. 
   EMPTY TEMP-TABLE tidut3 NO-ERROR. 
   EMPTY TEMP-TABLE tidut4 NO-ERROR.      
END PROCEDURE.

PROCEDURE rubrik2_UI :
   IF globforetag = "GRAN" OR globforetag = "NAEK" OR globforetag = "GKAL" OR globforetag = "ELPA" OR globforetag = "CPOMA" {GLOBVES.I} THEN DO:
      CREATE tidut.
      ASSIGN  
      totant = totant + 1
      kant = kant + 1
      exkant = exkant + 1.
      IF kalkvisabaraantal = TRUE THEN SUBSTRING(tidut.UT,utnr[1]) = "P2-KOD".
      ELSE SUBSTRING(tidut.UT,utnr[1]) = "P3-KOD".
      RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 2,INPUT ?).                           
      SUBSTRING(tidut.UT,utnr[2]) = "BENÄMNING".
      RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 2,INPUT ?).                            
      SUBSTRING(tidut.UT,utnr[4]) = "ENH".
      RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 2,INPUT ?).                            
      SUBSTRING(tidut.UT,utnr[5]) = "ANTAL".
      RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 2,INPUT ?).
      IF kalkvisabaraantal = TRUE THEN.
      ELSE DO:
         SUBSTRING(tidut.UT,utnr[6]) = "MONTÖR".
         RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 2,INPUT ?).                            
         SUBSTRING(tidut.UT,utnr[7]) = "MASKIN".                    
         RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 2,INPUT ?).
      END.                               
      CREATE tidut.  
      ASSIGN
      totant = totant + 1
      kant = kant + 1
      exkant = exkant + 1.
      RUN tom_UI (INPUT ?).
   END.
   ELSE DO:
      CREATE tidut.
      ASSIGN  
      totant = totant + 1
      kant = kant + 1
      exkant = exkant + 1.
      IF kalkvisabaraantal = TRUE THEN SUBSTRING(tidut.UT,utnr[1]) = "P2-KOD".
      ELSE SUBSTRING(tidut.UT,utnr[1]) = "P3-KOD".
      RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 2,INPUT ?).                            
      SUBSTRING(tidut.UT,utnr[2]) = "BENÄMNING".
      RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 2,INPUT ?).                            
      SUBSTRING(tidut.UT,utnr[4]) = "ENH".
      RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 2,INPUT ?).                            
      SUBSTRING(tidut.UT,utnr[5]) = " ANTAL".
      RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 2,INPUT ?).
      IF kalkvisabaraantal = TRUE THEN.
      ELSE DO:
         SUBSTRING(tidut.UT,utnr[6]) = "   EA/ENH".
         RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 2,INPUT ?).                            
         SUBSTRING(tidut.UT,utnr[7]) = "    SUMMA".                                                                         
         RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 2,INPUT ?).                            
      END.
      CREATE tidut.  
      ASSIGN
      totant = totant + 1
      kant = kant + 1
      exkant = exkant + 1.
      RUN tom_UI (INPUT ?).
   END.   
END PROCEDURE.


PROCEDURE rubrik_UI :

   CREATE tidut.
   totant = totant + 1.
   RUN tom_UI (INPUT ?).
   CREATE tidut.    
   ASSIGN  
   totant = totant + 1
   kant = kant + 2
   exkant = exkant + 2
   SUBSTRING(tidut.UT,utnr[1]) = CAPS(Guru.Konstanter:genk).
   RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                              
   SUBSTRING(tidut.UT,utnr[2]) = "BENÄMNING".
   RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).                                                      
   SUBSTRING(tidut.UT,utnr[4]) = "ENH".
   RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 1,INPUT ?).                                                    
   SUBSTRING(tidut.UT,utnr[5]) = " ANTAL".
   RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 1,INPUT ?).                                                    
   IF prisvar = 1 THEN DO:
      ASSIGN 
      SUBSTRING(tidut.UT,utnr[6]) = " PRIS/ENH".
      RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 1,INPUT ?).                                                      
      SUBSTRING(tidut.UT,utnr[7]) = "    SUMMA".
      RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 1,INPUT ?).                               
   END.
   CREATE tidut.  
   ASSIGN
   totant = totant + 1
   kant = kant + 1
   exkant = exkant + 1. 
   RUN tom_UI (INPUT ?).
END PROCEDURE.


PROCEDURE sign_UI :
   
   IF AVAILABLE tidut AND tidut.UT NE "" THEN DO:   
      CREATE tidut.
      totant = totant + 1.
      RUN tom_UI (INPUT ?).
   END.
   CREATE tidut.    
   ASSIGN  
   totant = totant + 1
   kant = kant + 2
   exkant = exkant + 2                 
   SUBSTRING(tidut.UT,utnr[1]) = "Datum:________________".
   
   RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                           
                                   
   SUBSTRING(tidut.UT,utnr[4])  = "Sign:__________________________".
   RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 1,INPUT ?).                                                    
   /*CREATE tidut.  
   ASSIGN
   totant = totant + 1
   kant = kant + 1
   exkant = exkant + 1. 
   RUN tom_UI (INPUT ?).*/
   
END PROCEDURE.


PROCEDURE rubrikstolp_UI :

   CREATE tidut.
   totant = totant + 1.
   RUN tom_UI (INPUT ?).
   CREATE tidut.    
   ASSIGN  
   totant = totant + 1
   kant = kant + 2
   exkant = exkant + 2
   SUBSTRING(tidut.UT,utnr[1]) = CAPS(Guru.Konstanter:genk).
   
   RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 2,INPUT ?).                              
   SUBSTRING(tidut.UT,utnr[2]) = "BENÄMNING".
   RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 2,INPUT ?).                                                      
   SUBSTRING(tidut.UT,utnr[4]) = "ANTAL".
   RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 2,INPUT ?).                                                    
   SUBSTRING(tidut.UT,utnr[5]) = " ENHET".
   RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 2,INPUT ?).                                                             
   SUBSTRING(tidut.UT,utnr[6]) = " BYGGNR".
   RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 2,INPUT ?).                                                             
   SUBSTRING(tidut.UT,utnr[7]) = " LITTRA".
   RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 2,INPUT ?). 
   IF TOG_ANM = TRUE THEN DO:
      SUBSTRING(tidut.UT,utnr[8]) = "ANMÄRKNING".
      RUN data_UI (INPUT FALSE,INPUT "H",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[8]),INPUT 2,INPUT ?). 
   END.                                                           
   CREATE tidut.  
   ASSIGN
   totant = totant + 1
   kant = kant + 1
   exkant = exkant + 1. 
   RUN tom_UI (INPUT ?).
END PROCEDURE.

PROCEDURE skapa2_UI :

   CREATE kalk_temp.
   ASSIGN
   kalk_temp.ARBKOD = ber_temp2.ARBKOD
   kalk_temp.LOPNR = ber_temp2.LOPNR
   kalk_temp.BENAMNING = ber_temp2.BENAMNING
   kalk_temp.ENHET = ber_temp2.ENHET
   kalk_temp.ANTAL = ber_temp2.ANTAL  
   kalk_temp.EA = 0
   kalk_temp.EAST = 0
   kalk_temp.ARBETE = 0   
   kalk_temp.MASKINKOST = 0   
   kalk_temp.MATERIEL = 0
   kalk_temp.OVRIGT = 0
   kalk_temp.NUM = ber_temp2.NUM.
END PROCEDURE.
PROCEDURE skapaKalkKlasser_UI :
   CREATE kalk_temp.
   ASSIGN
   kalk_temp.ARBKOD = ber_temp2.ARBKOD
   kalk_temp.LOPNR = ber_temp2.LOPNR
   kalk_temp.BENAMNING = ber_temp2.BENAMNING
   kalk_temp.ENHET = ber_temp2.ENHET
   kalk_temp.ANTAL = ber_temp2.ANTAL  
   kalk_temp.EA = 0
   kalk_temp.EAST = 0
   kalk_temp.ARBETE = 0   
   kalk_temp.MASKINKOST = 0   
   kalk_temp.MATERIEL = 0
   kalk_temp.OVRIGT = 0
   kalk_temp.NUM = ber_temp2.NUM.
END PROCEDURE.
PROCEDURE skapa_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/
   ASSIGN
   eavar = 0
   arbvar = 0
   mskvar = 0.
   
   CREATE kalk_temp.
   ASSIGN
   kalk_temp.ARBKOD = LOP3.ARBKOD
   kalk_temp.LOPNR = LOP3.LOPNR
   kalk_temp.BENAMNING = SUBSTRING(LOP3.BENAMNING,1,49)
   kalk_temp.ENHET = LOP3.ENHET
   kalk_temp.ANTAL = ber_temp2.ANTAL.
   IF LOP3.F9 = 0 THEN delningsvar = 1.
   ELSE delningsvar = 100.
   IF KALKBEF.BEF1 NE "" THEN DO:           
      IF KALKBEF.EBR1 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR1 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.             
      IF KALKBEF.PERSMASK1 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F1 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA1 = TRUE THEN 
         eavar = eavar + (LOP3.F1 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F1 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA1 = TRUE THEN
         eavar = eavar + ((LOP3.F1 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F1 = (LOP3.F1 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.         
   IF KALKBEF.BEF2 NE "" THEN DO:               
      IF KALKBEF.EBR2 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR2 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.           
      IF KALKBEF.PERSMASK2 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F2 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA2 = TRUE THEN 
         eavar = eavar + (LOP3.F2 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F2 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA2 = TRUE THEN
         eavar = eavar + ((LOP3.F2 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F2 = (LOP3.F2 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF3 NE "" THEN DO:          
      IF KALKBEF.EBR3 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR3 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.        
      IF KALKBEF.PERSMASK3 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F3 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA3 = TRUE THEN 
         eavar = eavar + (LOP3.F3 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F3 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA3 = TRUE THEN
         eavar = eavar + ((LOP3.F3 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F3 = (LOP3.F3 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF4 NE "" THEN DO:               
      IF KALKBEF.EBR4 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR4 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.           
      IF KALKBEF.PERSMASK4 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F4 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA4 = TRUE THEN 
         eavar = eavar + (LOP3.F4 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F4 * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA4 = TRUE THEN
         eavar = eavar + ((LOP3.F4 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F4 = (LOP3.F4 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF5 NE "" THEN DO:           
      IF KALKBEF.EBR5 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR5 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.              
      IF KALKBEF.PERSMASK5 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F5 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA5 = TRUE THEN 
         eavar = eavar + (LOP3.F5 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F5 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA5 = TRUE THEN
         eavar = eavar + ((LOP3.F5 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F5 = (LOP3.F5 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF6 NE "" THEN DO:              
      IF KALKBEF.EBR6 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR6 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.             
      IF KALKBEF.PERSMASK6 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F6 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA6 = TRUE THEN 
         eavar = eavar + (LOP3.F6 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F6 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA6 = TRUE THEN
         eavar = eavar + ((LOP3.F6 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F6 = (LOP3.F6 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF7 NE "" THEN DO:         
      IF KALKBEF.EBR7 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR7 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.           
      IF KALKBEF.PERSMASK7 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F7 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA7 = TRUE THEN 
         eavar = eavar + (LOP3.F7 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F7 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA7 = TRUE THEN
         eavar = eavar + ((LOP3.F7 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F7 = (LOP3.F7 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF8 NE "" THEN DO:          
      IF KALKBEF.EBR8 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR8 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.           
      IF KALKBEF.PERSMASK8 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F8 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA8 = TRUE THEN 
         eavar = eavar + (LOP3.F8 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F8 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA8 = TRUE THEN
         eavar = eavar + ((LOP3.F8 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F8 = (LOP3.F8 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF9 NE "" THEN DO:            
      IF KALKBEF.EBR9 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR9 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.              
      IF KALKBEF.PERSMASK9 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F9 * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA9 = TRUE THEN 
         eavar = eavar + (LOP3.F9 * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F9 * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA9 = TRUE THEN
         eavar = eavar + ((LOP3.F9 * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F9 = (LOP3.F9 * ber_temp2.ANTAL * faktvar).
   END.
   /*KALKmatris
   IF KALKBEF.BEF10 NE "" THEN DO:         
      IF KALKBEF.EBR10 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR10 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.         
      IF KALKBEF.PERSMASK10 = TRUE THEN DO:
         arbvar = arbvar + (LOP3.F10 * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA10 = TRUE THEN 
         eavar = eavar + (LOP3.F10 * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP3.F10 * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA10 = TRUE THEN
         eavar = eavar + ((LOP3.F10 * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F10 = (LOP3.F10 * ber_temp2.ANTAL * faktvar).
   END.
   */
   ASSIGN  
   kalk_temp.EA = eavar
   kalk_temp.EAST = LOP3.EA
   kalk_temp.ARBETE = arbvar   
   kalk_temp.MASKINKOST = mskvar   
   kalk_temp.MATERIEL = 0
   kalk_temp.OVRIGT = LOP3.OVRIGT * ber_temp2.ANTAL
   kalk_temp.NUM = ber_temp2.NUM.
END PROCEDURE.


PROCEDURE skapaP2_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/
   ASSIGN
   eavar = 0
   arbvar = 0
   mskvar = 0.
   
   CREATE kalk_temp.
   ASSIGN
   kalk_temp.ARBKOD = LOP2.ARBKOD
   kalk_temp.LOPNR = LOP2.LOPNR
   kalk_temp.BENAMNING = SUBSTRING(LOP2.BENAMNING,1,49)
   kalk_temp.ENHET = LOP2.ENHET
   kalk_temp.ANTAL = ber_temp2.ANTAL.
   IF LOP2.F9 = 0 THEN delningsvar = 1.
   ELSE delningsvar = 100.
   IF KALKBEF.BEF1 NE "" THEN DO:           
      IF KALKBEF.EBR1 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR1 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.             
      IF KALKBEF.PERSMASK1 = TRUE THEN DO:
         arbvar = arbvar + (LOP2.F1 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA1 = TRUE THEN 
         eavar = eavar + (LOP2.F1 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP2.F1 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA1 = TRUE THEN
         eavar = eavar + ((LOP2.F1 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F1 = (LOP2.F1 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.         
   IF KALKBEF.BEF2 NE "" THEN DO:               
      IF KALKBEF.EBR2 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR2 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.           
      IF KALKBEF.PERSMASK2 = TRUE THEN DO:
         arbvar = arbvar + (LOP2.F2 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA2 = TRUE THEN 
         eavar = eavar + (LOP2.F2 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP2.F2 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA2 = TRUE THEN
         eavar = eavar + ((LOP2.F2 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F2 = (LOP2.F2 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF3 NE "" THEN DO:          
      IF KALKBEF.EBR3 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR3 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.        
      IF KALKBEF.PERSMASK3 = TRUE THEN DO:
         arbvar = arbvar + (LOP2.F3 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA3 = TRUE THEN 
         eavar = eavar + (LOP2.F3 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP2.F3 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA3 = TRUE THEN
         eavar = eavar + ((LOP2.F3 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F3 = (LOP2.F3 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF4 NE "" THEN DO:               
      IF KALKBEF.EBR4 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR4 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.           
      IF KALKBEF.PERSMASK4 = TRUE THEN DO:
         arbvar = arbvar + (LOP2.F4 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA4 = TRUE THEN 
         eavar = eavar + (LOP2.F4 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP2.F4 * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA4 = TRUE THEN
         eavar = eavar + ((LOP2.F4 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F4 = (LOP2.F4 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF5 NE "" THEN DO:           
      IF KALKBEF.EBR5 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR5 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.              
      IF KALKBEF.PERSMASK5 = TRUE THEN DO:
         arbvar = arbvar + (LOP2.F5 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA5 = TRUE THEN 
         eavar = eavar + (LOP2.F5 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP2.F5 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA5 = TRUE THEN
         eavar = eavar + ((LOP2.F5 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F5 = (LOP2.F5 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF6 NE "" THEN DO:              
      IF KALKBEF.EBR6 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR6 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.             
      IF KALKBEF.PERSMASK6 = TRUE THEN DO:
         arbvar = arbvar + (LOP2.F6 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA6 = TRUE THEN 
         eavar = eavar + (LOP2.F6 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP2.F6 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA6 = TRUE THEN
         eavar = eavar + ((LOP2.F6 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F6 = (LOP2.F6 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF7 NE "" THEN DO:         
      IF KALKBEF.EBR7 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR7 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.           
      IF KALKBEF.PERSMASK7 = TRUE THEN DO:
         arbvar = arbvar + (LOP2.F7 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA7 = TRUE THEN 
         eavar = eavar + (LOP2.F7 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP2.F7 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA7 = TRUE THEN
         eavar = eavar + ((LOP2.F7 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F7 = (LOP2.F7 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF8 NE "" THEN DO:          
      IF KALKBEF.EBR8 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR8 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.           
      IF KALKBEF.PERSMASK8 = TRUE THEN DO:
         arbvar = arbvar + (LOP2.F8 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA8 = TRUE THEN 
         eavar = eavar + (LOP2.F8 / delningsvar * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP2.F8 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA8 = TRUE THEN
         eavar = eavar + ((LOP2.F8 / delningsvar * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F8 = (LOP2.F8 / delningsvar * ber_temp2.ANTAL * faktvar).
   END.
   IF KALKBEF.BEF9 NE "" THEN DO:            
      IF KALKBEF.EBR9 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR9 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.              
      IF KALKBEF.PERSMASK9 = TRUE THEN DO:
         arbvar = arbvar + (LOP2.F9 * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA9 = TRUE THEN 
         eavar = eavar + (LOP2.F9 * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP2.F9 * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA9 = TRUE THEN
         eavar = eavar + ((LOP2.F9 * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F9 = (LOP2.F9 * ber_temp2.ANTAL * faktvar).
   END.
   /*KALKmatris
   IF KALKBEF.BEF10 NE "" THEN DO:         
      IF KALKBEF.EBR10 = 1 THEN prisvar2 = hjkatprisvar[1].
      ELSE IF KALKBEF.EBR10 = 2 THEN prisvar2 = hjkatmask1var[1].
      ELSE prisvar2 = hjkatmask2var[1].        
      faktvar = 1.         
      IF KALKBEF.PERSMASK10 = TRUE THEN DO:
         arbvar = arbvar + (LOP2.F10 * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA10 = TRUE THEN 
         eavar = eavar + (LOP2.F10 * ber_temp2.ANTAL * faktvar).
      END.
      ELSE DO:
         mskvar = mskvar + (LOP2.F10 * prisvar2 * ber_temp2.ANTAL * faktvar).
         IF KALKBEF.EA10 = TRUE THEN
         eavar = eavar + ((LOP2.F10 * prisvar2 * ber_temp2.ANTAL * faktvar) / hjkatrorligvar[1]).
      END.   
      kalk_temp.F10 = (LOP2.F10 * ber_temp2.ANTAL * faktvar).
   END.
   */
   ASSIGN  
   kalk_temp.EA = eavar
   kalk_temp.EAST = LOP2.EA
   kalk_temp.ARBETE = arbvar   
   kalk_temp.MASKINKOST = mskvar   
   kalk_temp.MATERIEL = 0
   kalk_temp.OVRIGT = LOP2.OVRIGT * ber_temp2.ANTAL
   kalk_temp.NUM = ber_temp2.NUM.
END PROCEDURE.


PROCEDURE spann2_UI :
   musz = FALSE.
   IF musz = FALSE THEN DO:
      FIND FIRST lin_temp WHERE lin_temp.NUM1 = uppbuff.NUM
      OR lin_temp.NUM2 = uppbuff.NUM USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE lin_temp THEN DO:            
         FOR EACH lin_temp WHERE lin_temp.NUM1 = uppbuff.NUM
         OR lin_temp.NUM2 = uppbuff.NUM USE-INDEX NUM:
            IF lin_temp.NUM1 NE lin_temp.NUM2 THEN DO:        
               CREATE tidut.
               ASSIGN
               totant = totant + 1
               kant = kant + 1    
               exkant = exkant + 1
               SUBSTRING(tidut.UT,utnr[1]) = "Spann/kabellängd".
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                           
               SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(lin_temp.METER) + " meter" + " " + lin_temp.BENAMNING + " till".
               RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                           
               IF lin_temp.NUM1 = uppbuff.NUM THEN DO:            
                  FIND FIRST idbuff WHERE idbuff.NUM = lin_temp.NUM2 USE-INDEX NUM
                  NO-LOCK NO-ERROR.
               END.
               ELSE DO:
                  FIND FIRST idbuff WHERE idbuff.NUM = lin_temp.NUM1 USE-INDEX NUM
                  NO-LOCK NO-ERROR.
               END. 
               IF AVAILABLE idbuff THEN DO:
                  FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = idbuff.GRUPP 
                  USE-INDEX KOD NO-LOCK NO-ERROR.
                  IF NOT AVAILABLE BBENAMNING THEN DO:
                     FIND FIRST BBENAMNING USE-INDEX KOD NO-LOCK NO-ERROR.
                  END.
                  IF idbuff.FRI1 NE ? THEN DO:
                     CREATE tidut.
                     ASSIGN
                     totant = totant + 1
                     kant = kant + 1
                     exkant = exkant + 1
                     SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.ID1.
                     RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                                            
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI1).
                     RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                            
                     SUBSTRING(tidut.UT,utnr[4]) = BBENAMNING.ID2.
                     RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                                                           
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[6]) = ":" + STRING(idbuff.FRI2).
                     RUN data_UI (INPUT TRUE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                                                       
                     /*GG 20060515*/
                     IF idbuff.FRI3 NE "" THEN DO:
                        CREATE tidut.
                        ASSIGN
                        totant = totant + 1
                        kant = kant + 1
                        exkant = exkant + 1.
                        IF globforetag = "ALTE" {GLOBVES.I} THEN DO:
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                           RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                                                               
                        END.
                        ELSE IF globforetag = "cELPA" THEN DO:
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                           RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                               
                        END.
                        ELSE DO:
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                           RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                               
                        END.
                     END.
                  END. 
                  ELSE DO:
                     IF idbuff.FRI2 NE ? THEN DO:
                        CREATE tidut.
                        ASSIGN
                        totant = totant + 1
                        kant = kant + 1
                        exkant = exkant + 1
                        SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.ID2.
                        RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                                               
                        ASSIGN
                        SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI2).
                        RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?). 
                        /*GG 20060515*/
                        IF idbuff.FRI3 NE "" THEN DO:
                           CREATE tidut.
                           ASSIGN
                           totant = totant + 1
                           kant = kant + 1
                           exkant = exkant + 1
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                           RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                               
                        END.
                     END.
                     ELSE DO:
                        CREATE tidut.
                        ASSIGN
                        totant = totant + 1
                        kant = kant + 1
                        exkant = exkant + 1
                        SUBSTRING(tidut.UT,utnr[1]) = ANNNAMN.TAB3.
                        RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                                               
                        FIND FIRST BERNAT WHERE BERNAT.FORNR = idbuff.FORNR AND BERNAT.LINNR = idbuff.LINNR AND BERNAT.NATNR = idbuff.NATNR NO-LOCK NO-ERROR.
                        IF AVAILABLE BERNAT THEN DO:
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + idbuff.NATNR + " " + BERNAT.NAMN.                  
                        END.
                        ELSE SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.NATNR).
                        RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                                                       
                        /*GG 20060515*/
                        IF idbuff.FRI3 NE "" THEN DO:
                           CREATE tidut.
                           ASSIGN
                           totant = totant + 1
                           kant = kant + 1
                           exkant = exkant + 1
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                           RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                               
                        END.
                     END.
                  END.                                 
               END.  
               DELETE lin_temp.
            END.   
            ELSE DO:
               CREATE tidut.
               ASSIGN
               totant = totant + 1
               kant = kant + 2
               exkant = exkant + 2
               SUBSTRING(tidut.UT,utnr[1]) = "Spann/kabellängd".
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                                               
               SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(lin_temp.METER) + " meter" + " " + lin_temp.BENAMNING + " till".
               RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                                
               CREATE tidut.
               ASSIGN
               totant = totant + 1
               SUBSTRING(tidut.UT,utnr[1]) = "Intern".
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                                               
               /*GG 20060515*/
               IF AVAILABLE idbuff THEN DO:
                  IF idbuff.FRI3 NE "" THEN DO:
                     CREATE tidut.
                     ASSIGN
                     totant = totant + 1
                     kant = kant + 1
                     exkant = exkant + 1
                     SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                     RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                     RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                               
                  END.
               END.
               DELETE lin_temp.
            END.
            CREATE tidut.
            ASSIGN
            totant = totant + 1
            kant = kant + 1
            exkant = exkant + 1.
            RUN tom_UI (INPUT ?).
         END.   
      END.   
   END.   
   ELSE DO:
      musz = FALSE.
   END.
END PROCEDURE.


PROCEDURE spann_UI :
   musz = FALSE.   
   IF musz = FALSE THEN DO:
      FIND FIRST lin_temp WHERE lin_temp.NUM1 = uppl_temp.NUM
      OR lin_temp.NUM2 = uppl_temp.NUM USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE lin_temp THEN DO:            
         FOR EACH lin_temp WHERE lin_temp.NUM1 = uppl_temp.NUM
         OR lin_temp.NUM2 = uppl_temp.NUM USE-INDEX NUM:
            IF lin_temp.NUM1 NE lin_temp.NUM2 THEN DO:
               CREATE tidut.
               ASSIGN
               totant = totant + 1
               kant = kant + 1
               exkant = exkant + 1
               SUBSTRING(tidut.UT,utnr[1]) = "Spann/kabellängd".
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                                               
               SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(lin_temp.METER) + " meter" + " " + TRIM(lin_temp.BENAMNING) + " till".
/*                SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(lin_temp.METER) + " meter" + " " + lin_temp.BENAMNING + " till". */
               RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                               
               IF lin_temp.NUM1 = uppl_temp.NUM THEN DO:            
                  FIND FIRST idbuff WHERE idbuff.NUM = lin_temp.NUM2 USE-INDEX NUM
                  NO-LOCK NO-ERROR.
               END.
               ELSE DO:
                  FIND FIRST idbuff WHERE idbuff.NUM = lin_temp.NUM1 USE-INDEX NUM
                  NO-LOCK NO-ERROR.
               END. 
               IF AVAILABLE idbuff THEN DO:
                  FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = idbuff.GRUPP 
                  USE-INDEX KOD NO-LOCK NO-ERROR.
                  IF NOT AVAILABLE BBENAMNING THEN DO:
                     FIND FIRST BBENAMNING USE-INDEX KOD NO-LOCK NO-ERROR.
                  END.
                  IF idbuff.FRI1 NE ? THEN DO:
                     CREATE tidut.
                     ASSIGN
                     totant = totant + 1
                     kant = kant + 1
                     exkant = exkant + 1
                     SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.ID1.
                     RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                                               
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI1).
                     RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                               
                     SUBSTRING(tidut.UT,utnr[4]) = BBENAMNING.ID2.
                     RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                                                               
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[6]) = ":" + STRING(idbuff.FRI2).
                     RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                                                                                 
                     /*GG 20060515*/
                     IF idbuff.FRI3 NE "" THEN DO:
                        CREATE tidut.
                        ASSIGN
                        totant = totant + 1
                        kant = kant + 1
                        exkant = exkant + 1.
                        IF globforetag = "ALTE" {GLOBVES.I} THEN DO:
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                           RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                                                                                          
                        END.
                        ELSE IF globforetag = "cELPA" THEN DO:
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                           RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                               
                        END.
                        ELSE DO:
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                           RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                               
                        END.
                     END.
                  END. 
                  ELSE DO:
                     IF idbuff.FRI2 NE ? THEN DO:
                        CREATE tidut.
                        ASSIGN
                        totant = totant + 1
                        kant = kant + 1
                        exkant = exkant + 1
                        SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.ID2.
                        RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                                               
                        ASSIGN
                        SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI2).
                        RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                                                       
                        /*GG 20060515*/
                        IF idbuff.FRI3 NE "" THEN DO:
                           CREATE tidut.
                           ASSIGN
                           totant = totant + 1
                           kant = kant + 1
                           exkant = exkant + 1
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                           RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                               
                        END.
                     END.
                     ELSE DO:
                        CREATE tidut.
                        ASSIGN
                        totant = totant + 1
                        kant = kant + 1
                        exkant = exkant + 1
                        SUBSTRING(tidut.UT,utnr[1]) = ANNNAMN.TAB3.
                        RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                                               
                        FIND FIRST BERNAT WHERE BERNAT.FORNR = idbuff.FORNR AND BERNAT.LINNR = idbuff.LINNR AND BERNAT.NATNR = idbuff.NATNR NO-LOCK NO-ERROR.
                        IF AVAILABLE BERNAT THEN DO:
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + idbuff.NATNR + " " + BERNAT.NAMN.                  
                        END.
                        ELSE SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.NATNR).
                        RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                                                       
                        /*GG 20060515*/
                        IF idbuff.FRI3 NE "" THEN DO:
                           CREATE tidut.
                           ASSIGN
                           totant = totant + 1
                           kant = kant + 1
                           exkant = exkant + 1
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                           RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                               
                        END.
                     END.
                  END.                                 
               END.  
               DELETE lin_temp.
            END.   
            ELSE DO:
               CREATE tidut.
               ASSIGN
               totant = totant + 1
               kant = kant + 2
               exkant = exkant + 2
               SUBSTRING(tidut.UT,utnr[1]) = "Spann/kabellängd".
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                                               
               SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(lin_temp.METER) + " meter" + " " + TRIM(lin_temp.BENAMNING) + " till".
               RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).  
               CREATE tidut.
               ASSIGN
               totant = totant + 1
               SUBSTRING(tidut.UT,utnr[1]) = "Intern".
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
               /*GG 20060515*/
               IF AVAILABLE idbuff THEN DO:
                  IF idbuff.FRI3 NE "" THEN DO:
                     CREATE tidut.
                     ASSIGN
                     totant = totant + 1
                     kant = kant + 1
                     exkant = exkant + 1
                     SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                     RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                     RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                               
                  END.
               END.
               DELETE lin_temp.
            END.
            CREATE tidut.
            ASSIGN
            totant = totant + 1
            kant = kant + 1
            exkant = exkant + 1.
            RUN tom_UI (INPUT ?).
         END.   
      END.   
   END.   
   ELSE DO:
      musz = FALSE.
   END.
END PROCEDURE.


PROCEDURE summa_UI :

   ASSIGN
   sumpris = 0
   sumantal = 0
   sumea = 0
   summont = 0
   summask = 0.
   EMPTY TEMP-TABLE hid NO-ERROR. 
   
   FOR EACH kon_val:
      CREATE hid.
      ASSIGN
      hid.BERAONR  = kon_val.BERAONR 
      hid.OMRADE   = kon_val.OMRADE 
      hid.NUM      = kon_val.NUM
      hid.ORD      = kon_val.ORD.
   END.
   RUN LISTKONU.P
      (INPUT valaonr, INPUT valomrade, INPUT valkonst, INPUT TABLE kon_val, OUTPUT TABLE uppl_temp, 
      OUTPUT TABLE skap_temp, OUTPUT TABLE id_temp).
   
   IF seluppvar = "Stolpprotokoll" OR seluppvar = "Stolpprotokoll minimerat" THEN DO:
      stolpval = 2.
      /*RUN LISTPROGST.P
      (INPUT valaonr, INPUT valomrade, OUTPUT TABLE mtrl_temp).
      */
      
      
   END.
   
   IF valkonst = FALSE THEN DO:         
      RUN LISTPROG.P
      (INPUT valaonr, INPUT valomrade, OUTPUT TABLE mtrl_temp, OUTPUT TABLE lin_upp, 
      OUTPUT TABLE lin_temp).
   END.
   ELSE DO:      
      RUN LISTPROG2U.P
         (INPUT TABLE kon_val, OUTPUT TABLE mtrl_temp, OUTPUT TABLE lin_upp,
         OUTPUT TABLE lin_temp).
   END. 
   
/*
   DEFINE VARIABLE ordningut AS INTEGER NO-UNDO.
   IF skrivbord = FALSE THEN DO:
      FOR EACH id_temp USE-INDEX ORD NO-LOCK:
          FOR EACH uppl_temp WHERE uppl_temp.UPPLAG NE ? AND uppl_temp.NUM = id_temp.NUM NO-LOCK:
             ordningut = ordningut + 1.
             uppl_temp.ord = ordningut.
          END.
      END.
      FOR EACH id_temp USE-INDEX ORD NO-LOCK:
          FOR EACH uppl_temp WHERE uppl_temp.UPPLAG = ? AND uppl_temp.NUM = id_temp.NUM NO-LOCK:
             ordningut = ordningut + 1.
             uppl_temp.ord = ordningut.
          END.
      END.
   END.
   */
   /*DDD*/
   
   IF stolpval > 1 THEN DO:   
      FOR EACH mtrl_temp:         
         IF stolpval = 2 THEN DO:
            /*om bara stolpar*/
            FIND FIRST BERSTOLP WHERE BERSTOLP.ENR = mtrl_temp.ENR AND BERSTOLP.STOLPE = TRUE NO-LOCK NO-ERROR.
            IF NOT AVAILABLE BERSTOLP THEN DO:
               DELETE mtrl_temp.
            END.
         END.
         ELSE IF stolpval = 3 THEN DO:   
            /*om inga stolpar*/
            FIND FIRST BERSTOLP WHERE BERSTOLP.ENR = mtrl_temp.ENR AND BERSTOLP.STOLPE = TRUE NO-LOCK NO-ERROR.
            IF AVAILABLE BERSTOLP THEN DO:
               DELETE mtrl_temp.
            END.
         END.   
         ELSE IF stolpval = 4 THEN DO: /* Bara kablar/trafo/markstn */            
            FIND FIRST BERSTOLP WHERE BERSTOLP.ENR = mtrl_temp.ENR AND BERSTOLP.STOLPE = FALSE NO-LOCK NO-ERROR.
            IF AVAILABLE BERSTOLP THEN baral = TRUE.
            IF globforetag = "VAST" THEN DO:            
               FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "12" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
               IF AVAILABLE MTRL THEN baral = TRUE.
               ELSE DO:               
                  FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "2" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
                  IF AVAILABLE MTRL THEN baral = TRUE.
                  ELSE DO:                  
                     FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "7" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
                     IF AVAILABLE MTRL THEN baral = TRUE.
                     ELSE DO:                     
                        FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "70" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
                        IF AVAILABLE MTRL THEN baral = TRUE.               
                     END.
                  END.
               END.
            END.
            IF globforetag = "ELTE" THEN DO:                        
               FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "3" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
               IF AVAILABLE MTRL THEN baral = TRUE.               
            END.
            IF baral = TRUE THEN baral = FALSE.              
            ELSE DELETE mtrl_temp.            
            /*FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "12" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
            IF NOT AVAILABLE MTRL THEN DO:
               FIND FIRST BERSTOLP WHERE BERSTOLP.ENR = mtrl_temp.ENR AND BERSTOLP.STOLPE = FALSE NO-LOCK NO-ERROR.
               IF NOT AVAILABLE BERSTOLP THEN DELETE mtrl_temp.
            END.           */
         END.
         ELSE IF stolpval = 5 THEN DO: /* Inga kablar/trafo/markstn */            
            FIND FIRST BERSTOLP WHERE BERSTOLP.ENR = mtrl_temp.ENR AND BERSTOLP.STOLPE = FALSE NO-LOCK NO-ERROR.
            IF AVAILABLE BERSTOLP THEN baral = TRUE.
            IF globforetag = "VAST" THEN DO:            
               FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "12" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
               IF AVAILABLE MTRL THEN baral = TRUE.
               ELSE DO:               
                  FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "2" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
                  IF AVAILABLE MTRL THEN baral = TRUE.
                  ELSE DO:                  
                     FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "7" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
                     IF AVAILABLE MTRL THEN baral = TRUE.
                     ELSE DO:                     
                        FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "70" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
                        IF AVAILABLE MTRL THEN baral = TRUE.               
                     END.
                  END.
               END.
            END.
            IF globforetag = "ELTE" THEN DO:            
               FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "3" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
               IF AVAILABLE MTRL THEN baral = TRUE.               
            END.
            IF baral = TRUE THEN DO: 
               baral = FALSE.              
               DELETE mtrl_temp.            
            END.            
            /*FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "12" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
            IF AVAILABLE MTRL THEN DO:                           
               DELETE mtrl_temp.
            END.
            ELSE DO:
               FIND FIRST BERSTOLP WHERE BERSTOLP.ENR = mtrl_temp.ENR AND BERSTOLP.STOLPE = FALSE NO-LOCK NO-ERROR.
               IF AVAILABLE BERSTOLP THEN DELETE mtrl_temp.
            END.*/
         END.
      END.
      FOR EACH lin_upp:
         IF stolpval = 2 THEN DO:
            /*om bara stolpar*/
            FIND FIRST BERSTOLP WHERE BERSTOLP.ENR = lin_upp.ENR AND BERSTOLP.STOLPE = TRUE NO-LOCK NO-ERROR.
            IF NOT AVAILABLE BERSTOLP THEN DO:
               DELETE lin_upp.
            END.
         END.
         ELSE IF stolpval = 3 THEN DO:   
            /*om inga stolpar*/
            FIND FIRST BERSTOLP WHERE BERSTOLP.ENR = lin_upp.ENR AND BERSTOLP.STOLPE = TRUE NO-LOCK NO-ERROR.
            IF AVAILABLE BERSTOLP THEN DO:
               DELETE lin_upp.
            END.
         END.   
         ELSE IF stolpval = 4 THEN DO: /* Bara kablar/trafo/markstn */            
            FIND FIRST BERSTOLP WHERE BERSTOLP.ENR = lin_upp.ENR AND BERSTOLP.STOLPE = FALSE NO-LOCK NO-ERROR.
            IF AVAILABLE BERSTOLP THEN baral = TRUE.
            IF globforetag = "VAST" THEN DO:            
               FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "12" AND MTRL.ENR = lin_upp.ENR NO-LOCK NO-ERROR.
               IF AVAILABLE MTRL THEN baral = TRUE.
               ELSE DO:               
                  FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "2" AND MTRL.ENR = lin_upp.ENR NO-LOCK NO-ERROR.
                  IF AVAILABLE MTRL THEN baral = TRUE.
                  ELSE DO:                  
                     FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "7" AND MTRL.ENR = lin_upp.ENR NO-LOCK NO-ERROR.
                     IF AVAILABLE MTRL THEN baral = TRUE.
                     ELSE DO:                     
                        FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "70" AND MTRL.ENR = lin_upp.ENR NO-LOCK NO-ERROR.
                        IF AVAILABLE MTRL THEN baral = TRUE.               
                     END.
                  END.
               END.
            END.
            IF baral = TRUE THEN baral = FALSE.                           
            ELSE DELETE lin_upp.            
            /*FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "12" AND MTRL.ENR = lin_upp.ENR NO-LOCK NO-ERROR.
            IF NOT AVAILABLE MTRL THEN DO:            
               FIND FIRST BERSTOLP WHERE BERSTOLP.ENR = lin_upp.ENR AND BERSTOLP.STOLPE = FALSE NO-LOCK NO-ERROR.
               IF NOT AVAILABLE BERSTOLP THEN DELETE lin_upp.               
            END.*/
         END.
         ELSE IF stolpval = 5 THEN DO: /* Inga kablar/trafo/markstn */            
            FIND FIRST BERSTOLP WHERE BERSTOLP.ENR = lin_upp.ENR AND BERSTOLP.STOLPE = FALSE NO-LOCK NO-ERROR.
            IF AVAILABLE BERSTOLP THEN baral = TRUE.
            IF globforetag = "VAST" THEN DO:            
               FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "12" AND MTRL.ENR = lin_upp.ENR NO-LOCK NO-ERROR.
               IF AVAILABLE MTRL THEN baral = TRUE.
               ELSE DO:               
                  FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "2" AND MTRL.ENR = lin_upp.ENR NO-LOCK NO-ERROR.
                  IF AVAILABLE MTRL THEN baral = TRUE.
                  ELSE DO:                  
                     FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "7" AND MTRL.ENR = lin_upp.ENR NO-LOCK NO-ERROR.
                     IF AVAILABLE MTRL THEN baral = TRUE.
                     ELSE DO:                     
                        FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "70" AND MTRL.ENR = lin_upp.ENR NO-LOCK NO-ERROR.
                        IF AVAILABLE MTRL THEN baral = TRUE.               
                     END.
                  END.
               END.
            END.
            IF baral = TRUE THEN DO: 
               baral = FALSE.               
               DELETE lin_upp.            
            END.            
            /*FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "12" AND MTRL.ENR = lin_upp.ENR NO-LOCK NO-ERROR.
            IF AVAILABLE MTRL THEN DO:                           
               DELETE lin_upp.
            END.
            ELSE DO:
               FIND FIRST BERSTOLP WHERE BERSTOLP.ENR = lin_upp.ENR AND BERSTOLP.STOLPE = FALSE NO-LOCK NO-ERROR.
               IF AVAILABLE BERSTOLP THEN DELETE lin_upp.
            END.*/
         END.
      END.
   END.
   
   FOR EACH uppl_temp USE-INDEX NUM:
      FIND FIRST mtrl_temp WHERE mtrl_temp.NUM = uppl_temp.NUM
      USE-INDEX NUM NO-LOCK NO-ERROR.
      IF NOT AVAILABLE mtrl_temp THEN DO:
         CREATE mtrl_temp. 
         mtrl_temp.NUM = uppl_temp.NUM.
      END.
   END.
   
   FOR EACH mtrl_temp USE-INDEX NUM:
      FIND FIRST uppl_temp WHERE uppl_temp.NUM = mtrl_temp.NUM
      USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE uppl_temp THEN DO: 
         ASSIGN
         mtrl_temp.UPPLAG = uppl_temp.UPPLAG
         mtrl_temp.GRUPP = uppl_temp.GRUPP
         mtrl_temp.ORD = uppl_temp.ORD.
         IF TOG_UPP = FALSE THEN mtrl_temp.UPPLAG = ?.
      END.
      ELSE DO:
         ASSIGN mtrl_temp.UPPLAG = ?.
         /*/* För att inte lior och kablar som inte ligger på en konstruktion skall komma utan upplag när man väljer konstruktioner*/
         IF mtrl_temp.NUM = 0 AND mtrl_temp.UPPLAG NE ?  THEN .
         ELSE DO:         
            ASSIGN mtrl_temp.UPPLAG = ?.
         END.*/
      END.
      FIND FIRST id_temp WHERE id_temp.NUM = mtrl_temp.NUM
      USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE id_temp THEN DO:  
         IF id_temp.ENDKOMB = FALSE THEN DO:
            ASSIGN
            mtrl_temp.FORNR = id_temp.FORNR
            mtrl_temp.LINNR = id_temp.LINNR
            mtrl_temp.NATNR = id_temp.NATNR
            mtrl_temp.FRI1 = id_temp.FRI1
            mtrl_temp.FRI2 = id_temp.FRI2        
            mtrl_temp.XKORD = id_temp.XKORD.
         END.
         ELSE DO:
            FIND FIRST idbuff WHERE idbuff.XKORD = id_temp.XKORD AND
            ROWID(idbuff) NE ROWID(id_temp) NO-LOCK NO-ERROR.
            ASSIGN          
            mtrl_temp.FORNR = idbuff.FORNR
            mtrl_temp.LINNR = idbuff.LINNR
            mtrl_temp.NATNR = idbuff.NATNR
            mtrl_temp.FRI1 = idbuff.FRI1
            mtrl_temp.FRI2 = idbuff.FRI2        
            mtrl_temp.XKORD = idbuff.XKORD.
         END.   
      END.
      ELSE DO:
         mtrl_temp.XKORD = ?.
      END.
   END. 
   
   ASSIGN
   sumpris = 0
   sumantal = 0
   sumea = 0
   summont = 0
   summask = 0.
   FOR EACH mtrl_temp WHERE mtrl_temp.XKORD NE ? BREAK BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.XKORD BY mtrl_temp.PAR: 
      ACCUMULATE mtrl_temp.TOTPRIS (TOTAL BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.XKORD BY mtrl_temp.PAR). 
      ACCUMULATE mtrl_temp.ANTAL (TOTAL BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.XKORD BY mtrl_temp.PAR).       
      IF LAST-OF(mtrl_temp.PAR) THEN DO:
         CREATE mtrl_temp2.
         BUFFER-COPY mtrl_temp TO mtrl_temp2.
         /*
         ASSIGN                        
         mtrl_temp2.UPPLAG = mtrl_temp.UPPLAG 
         mtrl_temp2.GRUPP = mtrl_temp.GRUPP 
         mtrl_temp2.XKORD = mtrl_temp.XKORD
         mtrl_temp2.ENR = mtrl_temp.ENR
         mtrl_temp2.BENAMNING = mtrl_temp.BENAMNING 
         mtrl_temp2.ENHET = mtrl_temp.ENHET
         mtrl_temp2.PRIS = mtrl_temp.PRIS
         mtrl_temp2.FORNR = mtrl_temp.FORNR
         mtrl_temp2.LINNR = mtrl_temp.LINNR
         mtrl_temp2.NATNR = mtrl_temp.NATNR
         mtrl_temp2.FRI1 = mtrl_temp.FRI1
         mtrl_temp2.FRI2 = mtrl_temp.FRI2
         mtrl_temp2.PAR = mtrl_temp.PAR
         mtrl_temp2.ORD = mtrl_temp.ORD
         */
         ASSIGN
         mtrl_temp2.TOTPRIS = (ACCUM TOTAL mtrl_temp.TOTPRIS) - sumpris                       
         mtrl_temp2.ANTAL = (ACCUM TOTAL mtrl_temp.ANTAL) - sumantal                
         sumpris = ACCUM TOTAL mtrl_temp.TOTPRIS 
         sumantal = ACCUM TOTAL mtrl_temp.ANTAL.         
      END. 
   END.
   ASSIGN
   sumpris = 0
   sumantal = 0
   sumea = 0
   summont = 0
   summask = 0.    
   FOR EACH mtrl_temp WHERE mtrl_temp.XKORD = ? BREAK BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.NUM BY mtrl_temp.PAR: 
      ACCUMULATE mtrl_temp.TOTPRIS (TOTAL BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.NUM BY mtrl_temp.PAR). 
      ACCUMULATE mtrl_temp.ANTAL (TOTAL BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.NUM BY mtrl_temp.PAR).       
      IF LAST-OF(mtrl_temp.PAR) THEN DO:
         CREATE mtrl_temp2.
         BUFFER-COPY mtrl_temp TO mtrl_temp2.

         ASSIGN                        
            /*
            mtrl_temp2.UPPLAG = mtrl_temp.UPPLAG 
         mtrl_temp2.GRUPP = mtrl_temp.GRUPP 
         mtrl_temp2.XKORD = mtrl_temp.XKORD 
         mtrl_temp2.NUM = mtrl_temp.NUM
         mtrl_temp2.ENR = mtrl_temp.ENR
         mtrl_temp2.BENAMNING = mtrl_temp.BENAMNING 
         mtrl_temp2.ENHET = mtrl_temp.ENHET
         mtrl_temp2.PRIS = mtrl_temp.PRIS
         mtrl_temp2.FORNR = mtrl_temp.FORNR
         mtrl_temp2.LINNR = mtrl_temp.LINNR
         mtrl_temp2.NATNR = mtrl_temp.NATNR
         mtrl_temp2.FRI1 = mtrl_temp.FRI1
         mtrl_temp2.FRI2 = mtrl_temp.FRI2
         mtrl_temp2.PAR = mtrl_temp.PAR
         mtrl_temp2.ORD = mtrl_temp.ORD
         */
         mtrl_temp2.TOTPRIS = (ACCUM TOTAL mtrl_temp.TOTPRIS) - sumpris                       
         mtrl_temp2.ANTAL = (ACCUM TOTAL mtrl_temp.ANTAL) - sumantal                
         sumpris = ACCUM TOTAL mtrl_temp.TOTPRIS 
         sumantal = ACCUM TOTAL mtrl_temp.ANTAL.
      END.     
   END. 
   
   OPEN QUERY gruppq FOR EACH KONSTGRUPP NO-LOCK.
   GET FIRST gruppq NO-LOCK.
   DO WHILE AVAILABLE(KONSTGRUPP):
      CREATE grupp_temp.
      ASSIGN 
      grupp_temp.KONSKOD = KONSTGRUPP.KONSKOD
      grupp_temp.BENAMNING = KONSTGRUPP.BENAMNING
      grupp_temp.ORDNING = KONSTGRUPP.ORDNING.
      GET NEXT gruppq NO-LOCK.
   END.
   CLOSE QUERY gruppq.
   FOR EACH grupp_temp:
      CREATE grupp_temp2.
      ASSIGN 
      grupp_temp2.KONSKOD = grupp_temp.KONSKOD
      grupp_temp2.BENAMNING = grupp_temp.BENAMNING
      grupp_temp2.ORDNING = grupp_temp.ORDNING.  
   END.
   /*
   IF varforetypval[36] = 1 THEN.
   ELSE
   */ 
   IF kalkvar = TRUE THEN RUN kalk_UI.
   ASSIGN
   totalsum = 0
   totea = 0
   arbtim = 0
   msktim = 0.   
   FIND FIRST ANNNAMN NO-LOCK NO-ERROR.
   RUN LISTUPPU.P
      (INPUT valaonr, INPUT valomrade, INPUT valkonst, INPUT TABLE kon_val, 
      OUTPUT TABLE temp_upp).   
   IF skrivbord = TRUE THEN DO:
      EMPTY TEMP-TABLE temp_upp NO-ERROR. 
      EMPTY TEMP-TABLE upptemp NO-ERROR. 
      CREATE temp_upp.
      ASSIGN
      temp_upp.UPPLAG = 1.
      FOR EACH mtrl_temp2:
         CREATE upptemp.
         ASSIGN
         upptemp.NUM = mtrl_temp2.NUM
         upptemp.XKORD = mtrl_temp2.XKORD
         upptemp.UPPLAG = mtrl_temp2.UPPLAG.
         mtrl_temp2.UPPLAG = 1.         
      END.
      FOR EACH kalk_temp2:
         kalk_temp2.UPPLAG = 1.
      END.      
      FOR EACH lin_upp:
          lin_upp.UPPLAG = 1.
      END.
   END.
   FOR EACH temp_upp USE-INDEX OMR NO-LOCK:   
      IF TOG_UPP = TRUE THEN DO:
         IF skrivbord = FALSE THEN DO:         
            upput = FALSE.
            FIND FIRST mtrl_temp2 WHERE mtrl_temp2.UPPLAG = temp_upp.UPPLAG
            NO-LOCK NO-ERROR.
            IF AVAILABLE mtrl_temp2 THEN DO:
               upput = TRUE.
            END.
            ELSE DO:
               FIND FIRST lin_upp WHERE lin_upp.UPPLAG = temp_upp.UPPLAG 
               NO-LOCK NO-ERROR.
               IF AVAILABLE lin_upp THEN upput = TRUE.
            END.
            IF upput = TRUE THEN DO:         
               IF forsta = FALSE THEN DO:
                  IF globforetag = "SUND" OR globforetag = "SNAT" THEN DO:
                     CREATE tidut.
                     ASSIGN
                     totant = totant + 1
                     tant = tant + 1
                     extant = extant + 1.                                      
                  END.
                  ELSE DO:
                     CREATE tidut. 
                     totant = totant + 1.
                     RUN tom_UI (INPUT ?).
                     CREATE tidut.
                     ASSIGN
                     totant = totant + 1
                     tant = tant + 2
                     extant = extant + 2.                  
                  END.
                                    
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[1]) = str0            
                  forsta = TRUE.
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                                   
               END.   
               ELSE DO:                   
                  CREATE tidut.
                  totant = totant + 1.
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[1]) = str0
                  SUBSTRING(tidut.UT,131) = "£"
                  SUBSTRING(tidut.UT,132) = "$".
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                  ASSIGN
                  tant = 1
                  extant = 1.                                                                                  
                  IF globforetag = "BORL" THEN DO:                  
                     ASSIGN
                     totant = totant + 1.
                     RUN tom_UI (INPUT ?).
                     ASSIGN
                     totant = totant + 1.
                     RUN tom_UI (INPUT ?).
                     ASSIGN
                     totant = totant + 1.
                     RUN tom_UI (INPUT ?).
                     ASSIGN
                     totant = totant + 1.
                     RUN tom_UI (INPUT ?).                 
                     ASSIGN
                     totant = totant + 1.
                     RUN tom_UI (INPUT ?).                  
                     ASSIGN
                     totant = totant + 1.
                     RUN tom_UI (INPUT ?).
                     ASSIGN                  
                     extant = extant + 6.
                  END.
                  ELSE IF globforetag = "celpa" OR globforetag = "UMEA" {GLOBVES.I} THEN DO:                  
                     ASSIGN
                     totant = totant + 1.
                     RUN tom_UI (INPUT ?).                  
                     ASSIGN
                     totant = totant + 1.
                     RUN tom_UI (INPUT ?).                  
                     ASSIGN
                     totant = totant + 1.
                     RUN tom_UI (INPUT ?).                  
                     ASSIGN
                     totant = totant + 1.
                     RUN tom_UI (INPUT ?).                  
                     ASSIGN
                     totant = totant + 1.
                     RUN tom_UI (INPUT ?).
                     ASSIGN                  
                     extant = extant + 5.
                  END.
                  ELSE IF link NE "" THEN DO:
                     ASSIGN
                     totant = totant + 1.
                     RUN tom_UI (INPUT ?).                  
                     ASSIGN
                     totant = totant + 1.
                     RUN tom_UI (INPUT ?).                  
                     ASSIGN
                     totant = totant + 1.
                     RUN tom_UI (INPUT ?).                  
                  END.
               END.
                /*
               IF link NE "" THEN DO:
                  CREATE tidut.
                  SUBSTRING(tidut.UT,utnr[1]) = "".
   
                  totant = totant + 1.
                  extant = extant + 1.
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT substring(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
   
                  CREATE tidut.
                  SUBSTRING(tidut.UT,utnr[1]) = "".
   
                  totant = totant + 1.
                  extant = extant + 1.
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT substring(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
   
                  CREATE tidut.
                  SUBSTRING(tidut.UT,utnr[1]) = "".
   
                  totant = totant + 1.
                  extant = extant + 1.
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT substring(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
                    
               END.
               */
               CREATE tidut.
               ASSIGN       
               totant = totant + 1 /*ccccc*/
               SUBSTRING(tidut.UT,utnr[1]) = "Upplag nr".
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                                                
               SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(temp_upp.UPPLAG).
               RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                                                
               CREATE tidut.
               ASSIGN
               totant = totant + 1
               SUBSTRING(tidut.UT,utnr[1]) = "Adress".
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
               ASSIGN
               SUBSTRING(tidut.UT,utnr[3]) = ":" + temp_upp.ADRESS
               tant = tant + 2
               extant = extant + 2.                            
               RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                                                
               IF temp_upp.ANMARK NE "" THEN DO: 
                  ASSIGN
                  fetstil = TRUE
                  uppvar = TRUE.  
                  RUN anm2_UI.
                  ASSIGN
                  fetstil = FALSE
                  uppvar = FALSE.
               END.
               CREATE tidut.
               ASSIGN
               tant = tant + 1
               totant = totant + 1
               extant = extant + 1
               SUBSTRING(tidut.UT,utnr[1]) = str0.
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
   /*             RUN data_UI (INPUT FALSE,INPUT "U",INPUT totant,INPUT SUBSTRING(tidut.UT,132),INPUT 0). */
               ASSIGN
               extant = extant - 1
               tant = tant - 1.               
            END.
         END.
      END.   
      bytgrupp = "".
      
      IF seluppvar = "Stolpprotokoll minimerat" THEN DO:
         /*1*/
         IF TOG_UPP = TRUE THEN DO:
            RUN rubrikstolp_UI.
            FOR EACH mtrl_temp2 WHERE mtrl_temp2.UPPLAG = temp_upp.UPPLAG 
            USE-INDEX ORD: 
               IF mtrl_temp2.ENR = ""  OR mtrl_temp2.ANTAL = 0 THEN musz = musz.
               ELSE DO:           
                  CREATE tidut.
                  ASSIGN
                  totant = totant + 1
                  kant = kant + 1
                  exkant = exkant + 1
                  SUBSTRING(tidut.UT,utnr[1]) = mtrl_temp2.ENR.
                  RUN data_UI (INPUT TRUE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                  SUBSTRING(tidut.UT,utnr[2]) = SUBSTRING(mtrl_temp2.BENAMNING,1,30).
                  RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).            
                  SUBSTRING(tidut.UT,utnr[4]) = STRING(mtrl_temp2.ANTAL,">>>>9").     
                  RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).            
                  SUBSTRING(tidut.UT,utnr[5]) = mtrl_temp2.ENHET.     
                  /*
                  MESSAGE utnr[5] "ub"  VIEW-AS ALERT-BOX.
                  */
                  RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).            
                  /*
                  IF mtrl_temp2.XKORD NE ? THEN DO:
                     /*
                     FIND FIRST id_temp WHERE id_temp.XKORD = xkordvar AND
                     id_temp.ENDKOMB = FALSE              
                     USE-INDEX ORD2 NO-LOCK NO-ERROR.
                     */
                     FIND FIRST id_temp WHERE id_temp.XKORD = mtrl_temp2.XKORD AND
                     id_temp.ENDKOMB = FALSE              
                     USE-INDEX ORD2 NO-LOCK NO-ERROR.
                  END.
                  ELSE
                     */
                  FIND FIRST id_temp WHERE id_temp.NUM = mtrl_temp2.NUM NO-LOCK NO-ERROR.
                  IF AVAILABLE id_temp THEN DO: 
                     SUBSTRING(tidut.UT,utnr[6]) = STRING(id_temp.FRI2,">>>>>>9").
                     RUN data_UI (INPUT TRUE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                                          
                     SUBSTRING(tidut.UT,utnr[7]) = STRING(id_temp.FRI3).
                     RUN data_UI (INPUT TRUE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?). 
                     /*
                     FIND FIRST uppl_temp WHERE uppl_temp.NUM = id_temp.NUM NO-LOCK NO-ERROR.
                     IF AVAILABLE uppl_temp THEN DO:
                        IF uppl_temp.ANMARK NE "" THEN DO:                      
                           IF TOG_ANM = TRUE THEN RUN anmstolpmin_UI.
                        END.   
                     END.
                     */    
                     
                     FIND FIRST mtrl_temp WHERE mtrl_temp.NUM = mtrl_temp2.NUM AND
                     mtrl_temp.ENR = mtrl_temp2.ENR NO-LOCK NO-ERROR. 
                     IF AVAILABLE mtrl_temp THEN DO:   
                        IF mtrl_temp.MTRLTEXT NE "" THEN DO: 
                           IF TOG_ANM = TRUE THEN RUN anmstolpmin_UI.
                        END.   
                     END.                                       
                  END.
                  ELSE DO:   
                     musz = musz.
                  END.  
                  
                 
               END.
            END.
         END.   
      END.
      ELSE DO:
         /*BORDE VARA FÖRA ALLA MED BYGGNR*/   
         IF globforetag = "ELKB" THEN DO:
            FOR EACH mtrl_temp2 WHERE mtrl_temp2.UPPLAG = temp_upp.UPPLAG 
            BY mtrl_temp2.UPPLAG BY mtrl_temp2.FRI2: 
               RUN ett_UI.                  
            END.
         END.
         ELSE DO:   
            FOR EACH mtrl_temp2 WHERE mtrl_temp2.UPPLAG = temp_upp.UPPLAG 
            USE-INDEX ORD: 
               RUN ett_UI.                  
            END.
         END.
         IF TOG_MTRL = TRUE THEN DO:     
            FIND FIRST lin_upp WHERE lin_upp.UPPLAG = temp_upp.UPPLAG NO-LOCK NO-ERROR.
            IF AVAILABLE lin_upp THEN DO: 
               sumpris = 0.
               CREATE tidut. 
               utrow1 = ROWID(tidut).
               totant = totant + 1.
               RUN tom_UI (INPUT 1).
               CREATE tidut.
               ASSIGN 
               totant = totant + 1
               SUBSTRING(tidut.UT,utnr[1]) = str1
               utrow2 = ROWID(tidut)
               kant = 2
               exkant = 2.
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT 2). 
               IF globforetag = "cELPA" OR globforetag = "BORL" THEN DO:               
                  totant = totant + 1.
                  RUN tom_UI (INPUT 3).               
                  totant = totant + 1.
                  RUN tom_UI (INPUT 4).               
                  totant = totant + 1.
                  RUN tom_UI (INPUT 5).               
                  totant = totant + 1.
                  RUN tom_UI (INPUT 6).               
                  totant = totant + 1.
                  RUN tom_UI (INPUT 7).               
                  totant = totant + 1.
                  RUN tom_UI (INPUT 8).
                  ASSIGN               
                  exkant = 8. /* Borlänge lägger in en linje */
               END.
               ELSE IF globforetag = "cELPA" OR globforetag = "UMEA" {GLOBVES.I} THEN DO:               
                  totant = totant + 1.
                  RUN tom_UI (INPUT 3).               
                  totant = totant + 1.
                  RUN tom_UI (INPUT 4).               
                  totant = totant + 1.
                  RUN tom_UI (INPUT 5).               
                  totant = totant + 1.
                  RUN tom_UI (INPUT 6).               
                  totant = totant + 1.
                  RUN tom_UI (INPUT 7).
                  ASSIGN
                  exkant = 5. /* eg. 6 men för vattenfall kommer str1 att tas bort i visa i excel */ 
               END.
               ELSE DO:
                  ASSIGN
                  kant = 2
                  exkant = 2.
               END.
   
   /*             IF globforetag = "cELPA" OR globforetag = "BORL" THEN DO:                           */
   /*                CREATE tidut.                                                                    */
   /*                ASSIGN                                                                           */
   /*                utrow3 = ROWID(tidut)                                                            */
   /*                totant = totant + 1.                                                             */
   /*                RUN tom_UI (INPUT 3).                                                            */
   /*                CREATE tidut.                                                                    */
   /*                ASSIGN                                                                           */
   /*                utrow4 = ROWID(tidut)                                                            */
   /*                totant = totant + 1.                                                             */
   /*                RUN tom_UI (INPUT 4).                                                            */
   /*                CREATE tidut.                                                                    */
   /*                ASSIGN                                                                           */
   /*                utrow5 = ROWID(tidut)                                                            */
   /*                totant = totant + 1.                                                             */
   /*                RUN tom_UI (INPUT 5).                                                            */
   /*                CREATE tidut.                                                                    */
   /*                ASSIGN                                                                           */
   /*                utrow6 = ROWID(tidut)                                                            */
   /*                totant = totant + 1.                                                             */
   /*                RUN tom_UI (INPUT 6).                                                            */
   /*                CREATE tidut.                                                                    */
   /*                ASSIGN                                                                           */
   /*                utrow7 = ROWID(tidut)                                                            */
   /*                totant = totant + 1.                                                             */
   /*                RUN tom_UI (INPUT 7).                                                            */
   /*                CREATE tidut.                                                                    */
   /*                ASSIGN                                                                           */
   /*                utrow8 = ROWID(tidut)                                                            */
   /*                totant = totant + 1.                                                             */
   /*                RUN tom_UI (INPUT 8).                                                            */
   /*                ASSIGN                                                                           */
   /*                kant = 8  /* Borlänge lägger in en linje */                                      */
   /*                exkant = 8.                                                                      */
   /*             END.                                                                                */
   /*             ELSE IF globforetag = "cELPA" {GLOBVES.I} THEN DO:                                  */
   /*                CREATE tidut.                                                                    */
   /*                ASSIGN                                                                           */
   /*                utrow3 = ROWID(tidut)                                                            */
   /*                totant = totant + 1.                                                             */
   /*                RUN tom_UI (INPUT 3).                                                            */
   /*                CREATE tidut.                                                                    */
   /*                ASSIGN                                                                           */
   /*                utrow4 = ROWID(tidut)                                                            */
   /*                totant = totant + 1.                                                             */
   /*                RUN tom_UI (INPUT 4).                                                            */
   /*                CREATE tidut.                                                                    */
   /*                ASSIGN                                                                           */
   /*                utrow5 = ROWID(tidut)                                                            */
   /*                totant = totant + 1.                                                             */
   /*                RUN tom_UI (INPUT 5).                                                            */
   /*                CREATE tidut.                                                                    */
   /*                ASSIGN                                                                           */
   /*                utrow6 = ROWID(tidut)                                                            */
   /*                totant = totant + 1.                                                             */
   /*                RUN tom_UI (INPUT 6).                                                            */
   /*                CREATE tidut.                                                                    */
   /*                ASSIGN                                                                           */
   /*                utrow7 = ROWID(tidut)                                                            */
   /*                totant = totant + 1.                                                             */
   /*                RUN tom_UI (INPUT 7).                                                            */
   /*                ASSIGN                                                                           */
   /*                kant = 5  /* eg. 6 men för vattenfall kommer str1 att tas bort i visa i excel */ */
   /*                exkant = 5.                                                                      */
   /*             END.                                                                                */
   /*             ELSE DO:                                                                            */
   /*                ASSIGN                                                                           */
   /*                kant = 2                                                                         */
   /*                exkant = 2.                                                                      */
   /*             END.                                                                                */
               IF TOG_UPP = TRUE THEN DO:
                  IF skrivbord = FALSE THEN DO:         
                     CREATE tidut. 
                     ASSIGN 
                     totant = totant + 1
                     SUBSTRING(tidut.UT,utnr[1]) = "Linor och kablar till upplag nr:" + STRING(temp_upp.UPPLAG).
                     RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                  END.
                  ELSE DO:
                     CREATE tidut.                                         
                     ASSIGN 
                     totant = totant + 1
                     SUBSTRING(tidut.UT,utnr[1]) = "Linor och kablar".
                     RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                  END.
               END.
               ELSE DO:
                  CREATE tidut.                                         
                  ASSIGN 
                  totant = totant + 1
                  SUBSTRING(tidut.UT,utnr[1]) = "Linor och kablar".
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
               END.
               ASSIGN
               kant = kant + 1
               exkant = exkant + 1.      
               CREATE tidut.
               ASSIGN
               totant = totant + 1
               SUBSTRING(tidut.UT,utnr[1]) = str1
               kant = kant + 1
               exkant = exkant + 1. 
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
               IF globforetag = "cELPA" OR globforetag = "BORL" THEN DO:
                  ASSIGN
                  kant = kant
                  exkant = exkant.
               END.
               ELSE DO:
                  ASSIGN
                  kant = kant - 1
                  exkant = exkant - 1.
               END.
               IF globforetag = "Celpa" OR globforetag = "GRAN" THEN RUN sign_UI.
               RUN rubrik_UI.               
               FOR EACH lin_upp WHERE lin_upp.UPPLAG = temp_upp.UPPLAG:
                  CREATE tidut.
                  ASSIGN
                  totant = totant + 1
                  kant = kant + 1
                  exkant = exkant + 1
                  SUBSTRING(tidut.UT,utnr[1]) = lin_upp.ENR.
                  RUN data_UI (INPUT TRUE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
                  SUBSTRING(tidut.UT,utnr[2]) = SUBSTRING(lin_upp.BENAMNING,1,30).
                  RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).
                  SUBSTRING(tidut.UT,utnr[4]) = lin_upp.ENHET.
                  RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).
                  SUBSTRING(tidut.UT,utnr[5]) = STRING(lin_upp.TOTMETER,">>>>>9").
                  RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).
                  IF prisvar = 1 THEN DO:
                     ASSIGN SUBSTRING(tidut.UT,utnr[6]) = STRING(lin_upp.PRIS,">>>>>>>>9").
                     RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).
                     SUBSTRING(tidut.UT,utnr[7]) = STRING(lin_upp.TOTPRIS,">>>>>>>>9").        
                     RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
                  END.
                  upppris = upppris + + lin_upp.TOTPRIS.
                  sumpris = sumpris + lin_upp.TOTPRIS.              
               END.  
               IF prisvar = 1 THEN DO:
                  totant = totant + 1.
                  CREATE tidut. 
                  SUBSTRING(tidut.UT,utnr[2]) = "Kostnad för linor/kablar upplag nr " + STRING(temp_upp.UPPLAG).
                  RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(upppris,">>>>>>>>9").  
                  RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
                  upppris = 0.
               END.
               totalsum = totalsum + sumpris.
               CREATE tidut.
               totant = totant + 1.
               RUN tom_UI (INPUT ?).
               CREATE tidut.
               ASSIGN
               totant = totant + 1
               kant = kant + 2
               exkant = exkant + 2.   
               RUN tom_UI (INPUT ?).
               
               RUN bryt_UI.            
            END.   
         END.                           
      END.
   END.   
   
   FIND FIRST mtrl_temp2 WHERE mtrl_temp2.UPPLAG = ? NO-LOCK NO-ERROR.
   IF AVAILABLE mtrl_temp2 THEN DO:
      IF TOG_UPP = TRUE THEN DO:
         IF skrivbord = FALSE THEN DO:         
            IF forsta = FALSE THEN DO:
               IF globforetag = "SUND" THEN DO:
                  CREATE tidut.
                  ASSIGN
                  totant = totant + 1
                  tant = tant + 1
                  extant = extant + 1.
                  RUN tom_UI (INPUT ?).                                    
               END.
               ELSE DO:
                  CREATE tidut.
                  totant = totant + 1.
                  RUN tom_UI (INPUT ?).
                  CREATE tidut.
                  ASSIGN
                  totant = totant + 1
                  tant = tant + 2
                  extant = extant + 2.    
                  RUN tom_UI (INPUT ?).
               END.
               ASSIGN
               SUBSTRING(tidut.UT,utnr[1]) = str0
               forsta = TRUE.
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
               ASSIGN
               extant = extant - 1
               tant = tant - 1.                           
            END.
            ELSE DO:           
               CREATE tidut.
               ASSIGN
               totant = totant + 1
               SUBSTRING(tidut.UT,utnr[1]) = str0
               SUBSTRING(tidut.UT,131) = "£" 
               SUBSTRING(tidut.UT,132) = "$".
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                
               ASSIGN
               tant = 1
               extant = 1.
               IF globforetag = "cELPA" OR globforetag = "BORL" THEN DO:                  
                  ASSIGN
                  totant = totant + 1.
                  RUN tom_UI (INPUT ?).
                  ASSIGN
                  totant = totant + 1.
                  RUN tom_UI (INPUT ?).
                  ASSIGN
                  totant = totant + 1.
                  RUN tom_UI (INPUT ?).
                  ASSIGN
                  totant = totant + 1.
                  RUN tom_UI (INPUT ?).                 
                  ASSIGN
                  totant = totant + 1.
                  RUN tom_UI (INPUT ?).                  
                  ASSIGN
                  totant = totant + 1.
                  RUN tom_UI (INPUT ?).
                  ASSIGN                  
                  extant = extant + 6.
               END.
               IF globforetag = "cELPA" OR globforetag = "UMEA" {GLOBVES.I} THEN DO:                  
                  ASSIGN
                  totant = totant + 1.
                  RUN tom_UI (INPUT ?).                  
                  ASSIGN
                  totant = totant + 1.
                  RUN tom_UI (INPUT ?).                  
                  ASSIGN
                  totant = totant + 1.
                  RUN tom_UI (INPUT ?).                  
                  ASSIGN
                  totant = totant + 1.
                  RUN tom_UI (INPUT ?).                  
                  ASSIGN
                  totant = totant + 1.
                  RUN tom_UI (INPUT ?).
                  ASSIGN                  
                  extant = extant + 5.
               END.
            END.
            CREATE tidut.
            ASSIGN
            tant = tant + 1
            extant = extant + 1
            totant = totant + 1
            SUBSTRING(tidut.UT,utnr[1]) = "Materiel ej kopplat till upplag".
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                            
            CREATE tidut.
            ASSIGN
            tant = tant + 1
            totant = totant + 1
            extant = extant + 1
            SUBSTRING(tidut.UT,utnr[1]) = str0.
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
   /*          RUN data_UI (INPUT FALSE,INPUT "U",INPUT totant,INPUT SUBSTRING(tidut.UT,132]),INPUT 0,INPUT ?). */         
         END.
      END.
      IF seluppvar = "Stolpprotokoll minimerat" THEN DO:
         /*2*/
         RUN rubrikstolp_UI.
         FOR EACH mtrl_temp2 WHERE mtrl_temp2.UPPLAG = ? 
         USE-INDEX ORD: 
            IF mtrl_temp2.ENR = "" OR  mtrl_temp2.ANTAL = 0 THEN musz = musz.
            ELSE DO:           
               CREATE tidut.
               ASSIGN
               totant = totant + 1
               kant = kant + 1
               exkant = exkant + 1
               SUBSTRING(tidut.UT,utnr[1]) = mtrl_temp2.ENR.
               RUN data_UI (INPUT TRUE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
               SUBSTRING(tidut.UT,utnr[2]) = SUBSTRING(mtrl_temp2.BENAMNING,1,30).
               RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).            
               SUBSTRING(tidut.UT,utnr[4]) = STRING(mtrl_temp2.ANTAL,">>>>9").     
               RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).
               SUBSTRING(tidut.UT,utnr[5] + 1) = mtrl_temp2.ENHET.     
               RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).
               /*
               IF mtrl_temp2.XKORD NE ? THEN DO:
                  /*FIND FIRST id_temp WHERE id_temp.XKORD = xkordvar AND
               id_temp.ENDKOMB = FALSE
               USE-INDEX ORD2 NO-LOCK NO-ERROR.
               */
                  FIND FIRST id_temp WHERE id_temp.XKORD = mtrl_temp2.XKORD AND
                  id_temp.ENDKOMB = FALSE              
                  USE-INDEX ORD2 NO-LOCK NO-ERROR.
               END.
               
               ELSE
                  */
               FIND FIRST id_temp WHERE id_temp.NUM = mtrl_temp2.NUM NO-LOCK NO-ERROR.
               IF AVAILABLE id_temp THEN DO: 
                  SUBSTRING(tidut.UT,utnr[6]) = STRING(id_temp.FRI2,">>>>>>9").
                  RUN data_UI (INPUT TRUE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                                          
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(id_temp.FRI3).
                  RUN data_UI (INPUT TRUE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?). 
                  FIND FIRST mtrl_temp WHERE mtrl_temp.NUM = mtrl_temp2.NUM AND
                  mtrl_temp.ENR = mtrl_temp2.ENR NO-LOCK NO-ERROR. 
                  IF AVAILABLE mtrl_temp THEN DO:   
                     
                     IF mtrl_temp.MTRLTEXT NE "" THEN DO: 
                        IF TOG_ANM = TRUE THEN RUN anmstolpmin_UI.
                     END.   
                  END.                                           
               END.
               ELSE DO:   
                  musz = musz.
               END.
                                       
            END.
         END.
      END.
      ELSE DO:      
         
         bytgrupp = "".
          
      /*FOR EACH mtrl_temp2 WHERE :
            MESSAGE mtrl_temp2.benamning mtrl_temp2.ANTAL mtrl_temp2.UPPLAG
            VIEW-AS ALERT-BOX.
         END.*/
         FOR EACH mtrl_temp2 WHERE mtrl_temp2.UPPLAG = ? 
         USE-INDEX ORD:
            RUN tva_UI.
            
         END.     
         CREATE tidut.                 
         totant = totant + 1.
         RUN tom_UI (INPUT ?).
         IF prisvar = 1 THEN DO:
            IF TOG_MTRL = TRUE THEN DO:
               CREATE tidut.             
               ASSIGN
               totant = totant + 1.
               IF globforetag = "cELPA" OR globforetag = "BORL" THEN DO: 
                  SUBSTRING(tidut.UT,utnr[5]) = "-------------------------".
               END.
               ELSE IF globforetag = "cELPA" {GLOBVES.I} THEN DO:                                             
                  SUBSTRING(tidut.UT,utnr[5]) = "-------------------------".
               END. 
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[5]) = "-------------------------".
               END.
               RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).          
               CREATE tidut.
               ASSIGN                   
               totant = totant + 1
               SUBSTRING(tidut.UT,utnr[5]) = "Total summa:".
               RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).          
               SUBSTRING(tidut.UT,utnr[7]) = STRING(totalsum,">>>>>>>>9"). 
               RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).   
               FIND tidut WHERE ROWID(tidut) = sumrec NO-LOCK NO-ERROR.
               ASSIGN
               SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(totalsum,">>>>>>>>9")) + " Kr". 
               FIND FIRST extemp WHERE extemp.ROWVAR = rowspar AND extemp.COLVAR = "C" NO-LOCK NO-ERROR.
               IF AVAILABLE extemp THEN DO:
                  ASSIGN extemp.DATA = SUBSTRING(tidut.UT,utnr[3]).
               END.            
            END.   
         END. 
      END.
      /*
      IF varforetypval[36] = 1 THEN.
      ELSE
      */ 
      IF kalkvar = TRUE THEN DO:
         IF TOG_P3 = TRUE THEN DO:
            IF globforetag NE "GRAN" AND globforetag NE "GKAL" AND globforetag NE "ELPA" AND globforetag NE "VAST" THEN DO:            
               CREATE tidut.
               totant = totant + 1.
               RUN tom_UI (INPUT ?).
               
               CREATE tidut.
               ASSIGN
               totant = totant + 1.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[7]) = "---------".
                  RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).   
               END.
               CREATE tidut.
               ASSIGN
               totant = totant + 1.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[6]) = "Totalt EA  :".
                  RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).          
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(totea,">>>>>>>>9").
                  RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
               END.      
            END.
            IF prisvar = 1 THEN DO:
               
               IF TOG_MTRL = TRUE THEN DO:
                  FIND tidut WHERE ROWID(tidut) = sumrec NO-LOCK NO-ERROR.                  
                  IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I}  THEN DO:
                     
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[4]) = "Montör: " + LEFT-TRIM(STRING(arbtim,">>>>>>9.9")) 
                     + " tim" + " Maskin: " + LEFT-TRIM(STRING(msktim,">>>>>>9.9")) 
                     + " tim".
                     RUN data_UI (INPUT FALSE,INPUT "D",INPUT rowspar,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 1,INPUT ?).                               
                     /* LENA 20100215
                     FIND FIRST extemp WHERE extemp.ROWVAR = rowspar AND extemp.COLVAR = "D" NO-LOCK NO-ERROR.
                     IF AVAILABLE extemp THEN DO:
                        ASSIGN extemp.DATA = SUBSTRING(tidut.UT,utnr[4]).
                        /*C3*/
                     END.            */
                     
                  END.
                  ELSE DO:
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[5]) = ":" + LEFT-TRIM(STRING(totea,">>>>>>>>9")) + " EA".
                     RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).                               
                  END.
               END.
               ELSE DO:
                  FIND tidut WHERE ROWID(tidut) = sumrec NO-LOCK NO-ERROR.
                  IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I} THEN DO:
                     
                     ASSIGN                         
                     SUBSTRING(tidut.UT,utnr[1]) = "Montör".
                     RUN data_UI (INPUT FALSE,INPUT "A",INPUT rowspar,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                               
                     /* LENA 20100215
                     FIND FIRST extemp WHERE extemp.ROWVAR = rowspar AND extemp.COLVAR = "A" NO-LOCK NO-ERROR.
                     IF AVAILABLE extemp THEN DO:
                        ASSIGN extemp.DATA = SUBSTRING(tidut.UT,utnr[1]).
                     END.  */
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(arbtim,">>>>>>9.9")) 
                     + " tim" + " Maskin: " + LEFT-TRIM(STRING(msktim,">>>>>>9.9")) 
                     + " tim".
                     RUN data_UI (INPUT FALSE,INPUT "C",INPUT rowspar,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                               
                     /*FIND FIRST extemp WHERE extemp.ROWVAR = rowspar AND extemp.COLVAR = "C" NO-LOCK NO-ERROR.
                     IF AVAILABLE extemp THEN DO:
                        ASSIGN extemp.DATA = SUBSTRING(tidut.UT,utnr[3]).
                     END.         */                      
                  END.
                  ELSE DO:
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(totea,">>>>>>>>9")) + " EA".
                     RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                               
                  END.
               END.   
            END.
            ELSE DO:
               
               FIND tidut WHERE ROWID(tidut) = sumrec NO-LOCK NO-ERROR.
               IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I} THEN DO:                  
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[1]) = "Montör".                  
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT rowspar,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                               
                  /*FIND FIRST extemp WHERE extemp.ROWVAR = rowspar AND extemp.COLVAR = "A" NO-LOCK NO-ERROR.
                  IF AVAILABLE extemp THEN DO:
                     ASSIGN extemp.DATA = SUBSTRING(tidut.UT,utnr[1]).
                  END.      */
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(arbtim,">>>>>>9.9")) 
                  + " tim" + " Maskin: " + LEFT-TRIM(STRING(msktim,">>>>>>9.9")) 
                  + " tim".
                  RUN data_UI (INPUT FALSE,INPUT "C",INPUT rowspar,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                               
                  /*FIND FIRST extemp WHERE extemp.ROWVAR = rowspar AND extemp.COLVAR = "C" NO-LOCK NO-ERROR.
                  IF AVAILABLE extemp THEN DO:
                     ASSIGN extemp.DATA = SUBSTRING(tidut.UT,utnr[3]).
                  END.                        */
               END.
               ELSE DO:
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(totea,">>>>>>9.99")) + " EA".
                  RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                      
               END.
            END.
         END.      
      END.         
   END.      
   ELSE DO:  
      CREATE tidut.               
      totant = totant + 1.
      RUN tom_UI (INPUT ?).
      IF prisvar = 1 THEN DO:
         IF TOG_MTRL = TRUE THEN DO:
            CREATE tidut.
            ASSIGN
            totant = totant + 1.
            IF globforetag = "cELPA" OR globforetag = "BORL" THEN DO: 
               SUBSTRING(tidut.UT,utnr[5]) = "-------------------------".
            END.
            ELSE IF globforetag = "cELPA" {GLOBVES.I} THEN DO:                                             
               SUBSTRING(tidut.UT,utnr[5]) = "-------------------------".
            END. 
            ELSE DO:
               SUBSTRING(tidut.UT,utnr[5]) = "-------------------------".
            END.
            RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).                                                      
            CREATE tidut.
            ASSIGN
            totant = totant + 1
            SUBSTRING(tidut.UT,utnr[5]) = "Total summa:".
            RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).                                                      
            SUBSTRING(tidut.UT,utnr[7]) = STRING(totalsum,">>>>>>>>9"). 
            RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                                                      
            FIND tidut WHERE ROWID(tidut) = sumrec NO-LOCK NO-ERROR.
            ASSIGN
            SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(totalsum,">>>>>>>>9")) + " Kr". 
            FIND FIRST extemp WHERE extemp.ROWVAR = rowspar AND extemp.COLVAR = "C" NO-LOCK NO-ERROR.
            IF AVAILABLE extemp THEN DO:
               ASSIGN extemp.DATA = SUBSTRING(tidut.UT,utnr[3]).
            END.          
         END.   
      END.
      /*
      IF varforetypval[36] = 1 THEN.
      ELSE
      */ 
      IF kalkvar = TRUE THEN DO:
         IF TOG_P3 = TRUE THEN DO:
            IF globforetag NE "GRAN" AND globforetag NE "GKAL" AND globforetag NE "ELPA" AND globforetag NE "VAST"  THEN DO:            
               CREATE tidut.
               totant = totant + 1.
               RUN tom_UI (INPUT ?).
               CREATE tidut.
               ASSIGN
               totant = totant + 1.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[7]) = "---------".
                  RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                                                      
               END.
               CREATE tidut.
               ASSIGN
               totant = totant + 1.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[6]) = "Totalt EA  :".
                  RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                                                      
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(totea,">>>>>>>>9").
                  RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
               END.                                                         
            END.
            
            IF prisvar = 1 THEN DO:
               IF TOG_MTRL = TRUE THEN DO:
                  FIND tidut WHERE ROWID(tidut) = sumrec NO-LOCK NO-ERROR.
                  IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I} THEN DO:
                     
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[4]) = "Montör: " + LEFT-TRIM(STRING(arbtim,">>>>>>9.9")) 
                     + " tim" + " Maskin: " + LEFT-TRIM(STRING(msktim,">>>>>>9.9")) 
                     + " tim".
                     RUN data_UI (INPUT FALSE,INPUT "D",INPUT rowspar,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 1,INPUT ?).                               
                     /* LENA 20100215
                     FIND FIRST extemp WHERE extemp.ROWVAR = rowspar AND extemp.COLVAR = "D" NO-LOCK NO-ERROR.
                     IF AVAILABLE extemp THEN DO:
                        ASSIGN extemp.DATA = SUBSTRING(tidut.UT,utnr[4]).
                     END.  */
                     /*C3*/
                  END.
                  ELSE DO:
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[5]) = ":" + LEFT-TRIM(STRING(totea,">>>>>>>>9")) + " EA".
                     RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).                                                      
                  END.
               END.
               ELSE DO:
                  FIND tidut WHERE ROWID(tidut) = sumrec NO-LOCK NO-ERROR.
                  IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I} THEN DO:
                     
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[1]) = "Montör".
                     RUN data_UI (INPUT FALSE,INPUT "A",INPUT rowspar,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                               

                     /* LENA 20100215
                     FIND FIRST extemp WHERE extemp.ROWVAR = rowspar AND extemp.COLVAR = "A" NO-LOCK NO-ERROR.
                     IF AVAILABLE extemp THEN DO:
                        ASSIGN extemp.DATA = SUBSTRING(tidut.UT,utnr[1]).
                     END.  */
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(arbtim,">>>>>>9.9")) 
                     + " tim" + " Maskin: " + LEFT-TRIM(STRING(msktim,">>>>>>9.9")) 
                     + " tim".
                     RUN data_UI (INPUT FALSE,INPUT "C",INPUT rowspar,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                               
                     /*
                     FIND FIRST extemp WHERE extemp.ROWVAR = rowspar AND extemp.COLVAR = "C" NO-LOCK NO-ERROR.
                     IF AVAILABLE extemp THEN DO:
                        ASSIGN extemp.DATA = SUBSTRING(tidut.UT,utnr[3]).
                     END.  */
                  END.
                  ELSE DO:
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(totea,">>>>>>9.99")) + " EA".
                     RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                      
                  END.
               END.   
            END.
            ELSE DO:
               
               FIND tidut WHERE ROWID(tidut) = sumrec NO-LOCK NO-ERROR.
               IF globforetag = "GRAN" OR globforetag = "GKAL" OR  globforetag = "ELPA" {GLOBVES.I} THEN DO:
                  
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[1]) = "Montör".
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT rowspar,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                               
                  /*LENA20100215
                  FIND FIRST extemp WHERE extemp.ROWVAR = rowspar AND extemp.COLVAR = "A" NO-LOCK NO-ERROR.
                  IF AVAILABLE extemp THEN DO:
                     ASSIGN extemp.DATA = SUBSTRING(tidut.UT,utnr[1]).
                  END.             */
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(arbtim,">>>>>>9.9")) 
                  + " tim" + " Maskin: " + LEFT-TRIM(STRING(msktim,">>>>>>9.9")) 
                  + " tim".
                  RUN data_UI (INPUT FALSE,INPUT "C",INPUT rowspar,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                               
                  /*FIND FIRST extemp WHERE extemp.ROWVAR = rowspar AND extemp.COLVAR = "C" NO-LOCK NO-ERROR.
                  IF AVAILABLE extemp THEN DO:
                     ASSIGN extemp.DATA = SUBSTRING(tidut.UT,utnr[3]).
                  END.                    */
               END.
               ELSE DO:
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(totea,">>>>>>9.99")) + " EA".
                  RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                      
               END.
            END.
         END.   
      END.     
   END.    
END PROCEDURE.

PROCEDURE sund_UI :

   ASSIGN
   sumpris = 0
   sumantal = 0.  
   
   RUN LISTPROG.P
      (INPUT valaonr, INPUT valomrade, OUTPUT TABLE mtrl_temp, OUTPUT TABLE lin_upp, 
      OUTPUT TABLE lin_temp).   
        
   FOR EACH mtrl_temp BREAK BY mtrl_temp.ENR: 
      ACCUMULATE mtrl_temp.TOTPRIS (TOTAL BY mtrl_temp.ENR). 
      ACCUMULATE mtrl_temp.ANTAL (TOTAL BY mtrl_temp.ENR).       
      IF LAST-OF(mtrl_temp.ENR) THEN DO:
         CREATE mtrl_temp2.
         ASSIGN 
         mtrl_temp2.ENR = mtrl_temp.ENR
         mtrl_temp2.BENAMNING = mtrl_temp.BENAMNING 
         mtrl_temp2.ENHET = mtrl_temp.ENHET 
         mtrl_temp2.PRIS = mtrl_temp.PRIS
         mtrl_temp2.TOTPRIS = (ACCUM TOTAL mtrl_temp.TOTPRIS) - sumpris                       
         mtrl_temp2.ANTAL = (ACCUM TOTAL mtrl_temp.ANTAL) - sumantal                
         sumpris = ACCUM TOTAL mtrl_temp.TOTPRIS 
         sumantal = ACCUM TOTAL mtrl_temp.ANTAL.                       
      END.     
   END.    
   FOR EACH lin_upp:
      FIND FIRST mtrl_temp2 WHERE mtrl_temp2.ENR = lin_upp.ENR NO-LOCK NO-ERROR.
      IF AVAILABLE mtrl_temp2 THEN DO:                      
         ASSIGN
         mtrl_temp2.ANTAL = mtrl_temp2.ANTAL + lin_upp.TOTMETER
         mtrl_temp2.TOTPRIS = mtrl_temp2.TOTPRIS + lin_upp.TOTPRIS.
      END.
      ELSE DO:                    
         CREATE mtrl_temp2.
         ASSIGN 
         mtrl_temp2.ENR = lin_upp.ENR
         mtrl_temp2.BENAMNING = lin_upp.BENAMNING 
         mtrl_temp2.ENHET = lin_upp.ENHET 
         mtrl_temp2.PRIS = lin_upp.PRIS
         mtrl_temp2.TOTPRIS = lin_upp.TOTPRIS                       
         mtrl_temp2.ANTAL = lin_upp.TOTMETER.
      END.
   END.                
   sumpris = 0.    
   FOR EACH mtrl_temp2: 
      IF mtrl_temp2.ANTAL = 0 THEN DO:
         musz = musz.
      END.   
      ELSE DO:
         CREATE tidut.
         ASSIGN
         totant = totant + 1
         SUBSTRING(tidut.UT,utnr[1]) = mtrl_temp2.ENR.
         RUN data_UI (INPUT TRUE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                           
         SUBSTRING(tidut.UT,utnr[2]) = SUBSTRING(mtrl_temp2.BENAMNING,1,30).
         RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                           
         SUBSTRING(tidut.UT,utnr[4]) = mtrl_temp2.ENHET.
         RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                           
         SUBSTRING(tidut.UT,utnr[5]) = STRING(mtrl_temp2.ANTAL,">>>>>9").
         RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).                           
         IF prisvar = 1 THEN DO:
            ASSIGN 
            SUBSTRING(tidut.UT,utnr[6]) = STRING(mtrl_temp2.PRIS,">>>>>>>>9").
            RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                           
            SUBSTRING(tidut.UT,utnr[7]) = STRING(mtrl_temp2.TOTPRIS,">>>>>>>>9").  
            RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                           
         END.
         
         /*upppris = upppris + mtrlbuff.TOTPRIS.  fel borde vara mtrl_temp2 /20080423 lena*/
         upppris = upppris + mtrl_temp2.TOTPRIS. 
         sumpris = sumpris + mtrl_temp2.TOTPRIS.
      END.   
   END.  
   CREATE tidut.
   totant = totant + 1.
   IF prisvar = 1 THEN DO:      
      SUBSTRING(tidut.UT,utnr[1]) = str.  
      RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                           
   END.
   ELSE DO:  
      SUBSTRING(tidut.UT,utnr[1]) = str2.                                               
      RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                           
   END. 
   CREATE tidut. 
   totant = totant + 1.
   IF prisvar = 1 THEN DO:
      ASSIGN   
      SUBSTRING(tidut.UT,utnr[5]) = "Total summa:".
      RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).    
      ASSIGN
      SUBSTRING(tidut.UT,utnr[7]) = STRING(sumpris,">>>>>>>>9").
      RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).    
   END.

END PROCEDURE.


PROCEDURE text_UI :
   IF mtextvar = FALSE THEN DO:
      ASSIGN
      kant = kant + 1
      exkant = exkant + 1
      mtextvar = TRUE.
      IF tiduttyp = 1 THEN DO:
         CREATE tidut.            
         ASSIGN
         totant = totant + 1
         SUBSTRING(tidut.UT,utnr[1]) = "Text".
         IF sidotexexcel = FALSE THEN RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                           
      END. 
      ELSE IF tiduttyp = 2 THEN DO:
         CREATE tidut2.            
         SUBSTRING(tidut2.UT,utnr[1]) = "Text".
         IF sidotexexcel = FALSE THEN RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut2.UT,utnr[1]),INPUT 0,INPUT ?).                           
      END.
      ELSE IF tiduttyp = 3 THEN DO:
         CREATE tidut3.            
         SUBSTRING(tidut3.UT,utnr[1]) = "Text".
         IF sidotexexcel = FALSE THEN RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut3.UT,utnr[1]),INPUT 0,INPUT ?).                           
      END.
      ELSE IF tiduttyp = 4 THEN DO:
         CREATE tidut4.            
         SUBSTRING(tidut4.UT,utnr[1]) = "Text".
         IF sidotexexcel = FALSE THEN RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut4.UT,utnr[1]),INPUT 0,INPUT ?).                           
      END.  
   END.
   
   ASSIGN
   skapad = TRUE       
   retvar = 1 
   ednum = 1    
   
   ednum3 = LENGTH(mtrl_temp.MTRLTEXT)      
   retvar = INDEX(mtrl_temp.MTRLTEXT,CHR(10),ednum)
   edtecken = 39   
   edtext = mtrl_temp.MTRLTEXT
   tidtext = "". 
       
          
   {MTRLTEXT.I}   
END PROCEDURE.

 
PROCEDURE mtext_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/    
DEFINE VARIABLE textutpos AS CHARACTER NO-UNDO.  
   textutpos = "B".        
   IF sidotexexcel = TRUE THEN DO:
      textutpos = "G".
      totant = totant - 1.
   END.   
   IF tiduttyp = 1 THEN DO:                
      ASSIGN                  
      SUBSTRING(tidut.UT,utnr[2]) = tidtext.
      IF sidotexexcel =  FALSE THEN RUN data_UI (INPUT FALSE,INPUT textutpos,INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).
      ELSE RUN data_UI (INPUT FALSE,INPUT textutpos,INPUT totant,INPUT  mtrl_temp.MTRLTEXT,INPUT 0,INPUT ?).    
                                                   
      CREATE tidut.
      totant = totant + 1.
      RUN tom_UI (INPUT ?).
   END.
   ELSE IF tiduttyp = 2 THEN DO:                
      ASSIGN                  
      SUBSTRING(tidut2.UT,utnr[2]) = tidtext.
      IF sidotexexcel =  FALSE THEN RUN data_UI (INPUT FALSE,INPUT textutpos,INPUT totant,INPUT SUBSTRING(tidut2.UT,utnr[2]),INPUT 0,INPUT ?).                                                      
      ELSE RUN data_UI (INPUT FALSE,INPUT textutpos,INPUT totant,INPUT mtrl_temp.MTRLTEXT,INPUT 0,INPUT ?).
      CREATE tidut2.
   END.
   ELSE IF tiduttyp = 3 THEN DO:                
      ASSIGN                  
      SUBSTRING(tidut3.UT,utnr[2]) = tidtext.
      IF sidotexexcel =  FALSE THEN RUN data_UI (INPUT FALSE,INPUT textutpos,INPUT totant,INPUT SUBSTRING(tidut3.UT,utnr[2]),INPUT 0,INPUT ?).   
      ELSE RUN data_UI (INPUT FALSE,INPUT textutpos,INPUT totant,INPUT mtrl_temp.MTRLTEXT,INPUT 0,INPUT ?).                                                         
      CREATE tidut3.
   END.
   ELSE IF tiduttyp = 4 THEN DO:                
      ASSIGN                  
      SUBSTRING(tidut4.UT,utnr[2]) = tidtext.
      IF sidotexexcel =  FALSE THEN RUN data_UI (INPUT FALSE,INPUT textutpos,INPUT totant,INPUT SUBSTRING(tidut4.UT,utnr[2]),INPUT 0,INPUT ?).
      ELSE RUN data_UI (INPUT FALSE,INPUT textutpos,INPUT totant,INPUT mtrl_temp.MTRLTEXT,INPUT 0,INPUT ?).                                                       
      CREATE tidut4.
   END. 
   ASSIGN
   kant = kant + 1
   exkant = exkant + 1.
END PROCEDURE.

PROCEDURE tva_UI :
   IF mtrl_temp2.XKORD NE ? THEN DO:         
      ASSIGN
      xkordvar = mtrl_temp2.XKORD
      sumpris = 0
      sumea = 0
      summont = 0
      summask = 0
      stopvar = FALSE.                      
      FIND FIRST id_temp WHERE id_temp.XKORD = xkordvar AND
      id_temp.ENDKOMB = FALSE 
      USE-INDEX ORD2 NO-LOCK NO-ERROR.
      IF AVAILABLE id_temp THEN DO: 
         ASSIGN
         numvar = id_temp.NUM
         stopvar = TRUE.                
         FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = id_temp.GRUPP 
         USE-INDEX KOD NO-LOCK NO-ERROR.                
         IF NOT AVAILABLE BBENAMNING THEN DO:
            FIND FIRST BBENAMNING USE-INDEX KOD NO-LOCK NO-ERROR.
         END.
         RUN id_UI.                                                                                               
         FIND FIRST uppl_temp WHERE uppl_temp.NUM = id_temp.NUM 
         NO-LOCK NO-ERROR.
         IF AVAILABLE uppl_temp THEN DO:
            
            RUN val_UI.
            IF TOG_SPANN = TRUE THEN RUN spann_UI.                           
            IF uppl_temp.ANMARK NE "" THEN DO:
               IF TOG_ANM = TRUE THEN RUN anm_UI.
            END.                          
         END.   
         FIND FIRST idbuff WHERE idbuff.XKORD = xkordvar AND                     
         ROWID(idbuff) NE ROWID(id_temp) NO-ERROR. 
         IF AVAILABLE idbuff THEN DO: 
            RUN komb_UI.                                                                                                                                                                                            
         END.               
      END.
      ELSE DO:   
         musz = musz.
      END.        
      IF TOG_MTRL = TRUE THEN DO:              
         IF globforetag = "Celpa" OR globforetag = "GRAN" THEN RUN sign_UI.
         RUN rubrik_UI.
         RUN par_UI.
         numsok = FALSE.
         FOR EACH mtrlbuff WHERE mtrlbuff.UPPLAG = ? AND 
         mtrlbuff.XKORD = xkordvar USE-INDEX ENRX: 
            IF mtrlbuff.ANTAL = 0 THEN DO:
               musz = musz.
               DELETE mtrlbuff.
            END.   
            ELSE DO:
               IF mtrlbuff.NUM = numvar THEN DO:
                  IF mtrlbuff.PAR = 0 THEN RUN materiel_UI.
                  IF mtrlbuff.PAR = 1 THEN RUN materiel2_UI.
                  IF mtrlbuff.PAR = 2 THEN RUN materiel3_UI.
                  IF mtrlbuff.PAR = 3 THEN RUN materiel4_UI.
                  DELETE mtrlbuff.
               END.
               ELSE DO:
                  RUN materiel_UI.
                  DELETE mtrlbuff.
               END.   
            END.   
         END.
         IF prisvar = 1 /*AND upppris > 0*/  THEN DO:
            totant = totant + 1.
            CREATE tidut. 
            SUBSTRING(tidut.UT,utnr[2]) = "Kostnad för konstruktion".
            RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                           
            SUBSTRING(tidut.UT,utnr[7]) = STRING(upppris,">>>>>>>>9"). 
            RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                                    
            upppris = 0.
            CREATE tidut.
         END.
         RUN par2_UI.
      END.
      ELSE DO:
         FOR EACH mtrlbuff WHERE mtrlbuff.UPPLAG = ? AND 
         mtrlbuff.XKORD = xkordvar USE-INDEX ENRX:
            DELETE mtrlbuff.
         END.
      END.      
      /*
      IF varforetypval[36] = 1 THEN.
      ELSE
      */ 
      IF kalkvar = TRUE THEN DO:
         IF TOG_P3 = TRUE THEN DO:
            CREATE tidut.
            totant = totant + 1.
            RUN tom_UI (INPUT ?).
            CREATE tidut.
            ASSIGN
            totant = totant + 1
            kant = kant + 2
            exkant = exkant + 2.
            RUN tom_UI (INPUT ?).
            RUN rubrik2_UI.
            
            FOR EACH kalkbuff WHERE kalkbuff.UPPLAG = ? AND 
            kalkbuff.XKORD = xkordvar:  
               IF kalkbuff.ANTAL = 0 THEN DO:
                  musz = musz.
                  DELETE kalkbuff.
               END.   
               ELSE DO:        
                  RUN utkalk_UI.
                  DELETE kalkbuff.         
               END.   
            END.
            IF globforetag = "GRAN" OR globforetag = "GKAL" OR  globforetag = "ELPA" {GLOBVES.I} THEN DO:
               CREATE tidut.              
               totant = totant + 1.
               RUN tom_UI (INPUT ?).
               CREATE tidut.
               ASSIGN
               totant = totant + 1.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[1]) = "SUMMA:".
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                           
                  SUBSTRING(tidut.UT,utnr[6]) = STRING(summont,">>>>>>>>9.999").
                  RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(summask,">>>>>>>>9.999").
               END.
               ASSIGN
               kant = kant + 2
               exkant = exkant + 2.                   
               RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                           
            END.
            ELSE DO:
               CREATE tidut.
               ASSIGN
               totant = totant + 1.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[7]) = "---------".
                  RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                           
                  CREATE tidut.
                  ASSIGN
                  totant = totant + 1
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(sumea,">>>>>>>>9").
               END.
               ASSIGN
               kant = kant + 2
               exkant = exkant + 2.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                           
            END.
         END.   
         ELSE DO:
            FOR EACH kalkbuff WHERE kalkbuff.UPPLAG = ? AND 
            kalkbuff.XKORD = xkordvar:
               DELETE kalkbuff.
            END.
         END.
      END.   
      IF TOG_EGEN = TRUE THEN DO:
         RUN egenkontroll_UI.
      END.
      CREATE tidut.
      totant = totant + 1.
      RUN tom_UI (INPUT ?).
      CREATE tidut.
      ASSIGN
      totant = totant + 1
      kant = kant + 2
      exkant = exkant + 2.      
      RUN tom_UI (INPUT ?).
      
      RUN bryt_UI. 
   END.
   ELSE DO:
      
      ASSIGN 
      sumpris = 0
      sumea = 0
      summont = 0
      summask = 0.                                      
      FIND FIRST id_temp WHERE id_temp.NUM = mtrl_temp2.NUM 
      NO-LOCK NO-ERROR.               
      FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = mtrl_temp2.GRUPP 
      USE-INDEX KOD NO-LOCK NO-ERROR.
      RUN id_UI.   
                
      FIND FIRST uppl_temp WHERE uppl_temp.NUM = mtrl_temp2.NUM 
      NO-LOCK NO-ERROR.
      IF AVAILABLE uppl_temp THEN DO:  
         IF NOT AVAILABLE BBENAMNING THEN DO:
            FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = uppl_temp.GRUPP 
            USE-INDEX KOD NO-LOCK NO-ERROR. 
         END.   
         
         RUN val_UI. 
         IF TOG_SPANN = TRUE THEN RUN spann_UI.                
         IF uppl_temp.ANMARK NE "" THEN DO:
            IF TOG_ANM = TRUE THEN RUN anm_UI.
         END.                                                                                                 
      END.   
      ASSIGN
      numvar = mtrl_temp2.NUM.      
      IF TOG_MTRL = TRUE THEN DO:      
         IF globforetag = "Celpa" OR globforetag = "GRAN" THEN RUN sign_UI.
         RUN rubrik_UI.        
         RUN par_UI.
         numsok = TRUE.            
         FOR EACH mtrlbuff WHERE mtrlbuff.UPPLAG = ? AND 
         mtrlbuff.NUM = mtrl_temp2.NUM USE-INDEX ENRN BY mtrlbuff.ENR: 
            IF mtrlbuff.ANTAL = 0 THEN DO:
               musz = musz.
               DELETE mtrlbuff.
            END.   
            ELSE DO:
               IF mtrlbuff.PAR = 0 THEN RUN materiel_UI.
               IF mtrlbuff.PAR = 1 THEN RUN materiel2_UI.
               IF mtrlbuff.PAR = 2 THEN RUN materiel3_UI.
               IF mtrlbuff.PAR = 3 THEN RUN materiel4_UI.
               DELETE mtrlbuff.
            END.   
         END.     
         IF prisvar = 1 /*AND upppris > 0*/  THEN DO:
            totant = totant + 1.
            CREATE tidut. 
            SUBSTRING(tidut.UT,utnr[2]) = "Kostnad för konstruktion".
            RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                           
            SUBSTRING(tidut.UT,utnr[7]) = STRING(upppris,">>>>>>>>9"). 
            RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                                    
            upppris = 0.
            CREATE tidut.
         END.
         RUN par2_UI.          
      END.
      ELSE DO:
         FOR EACH mtrlbuff WHERE mtrlbuff.UPPLAG = ? AND 
         mtrlbuff.NUM = mtrl_temp2.NUM USE-INDEX ENRN BY mtrlbuff.ENR:
            DELETE mtrlbuff.
         END.
      END.   
      /*
      IF varforetypval[36] = 1 THEN.
      ELSE
      */ 
      IF kalkvar = TRUE THEN DO:      
         IF TOG_P3 = TRUE THEN DO:
            CREATE tidut.
            totant = totant + 1.
            RUN tom_UI (INPUT ?).
            CREATE tidut.
            ASSIGN
            totant = totant + 1
            kant = kant + 2
            exkant = exkant + 2.
            RUN tom_UI (INPUT ?).
            RUN rubrik2_UI.
            
            
            FOR EACH kalkbuff WHERE kalkbuff.UPPLAG = ? AND 
            kalkbuff.NUM = numvar:
               IF kalkbuff.ANTAL = 0 THEN DO:
                  musz = musz.
                  DELETE kalkbuff.
               END.   
               ELSE DO:          
                  RUN utkalk_UI.
                  DELETE kalkbuff.         
               END.   
            END.
            IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I} THEN DO:
               CREATE tidut.              
               totant = totant + 1.
               RUN tom_UI (INPUT ?).
               CREATE tidut.
               ASSIGN
               totant = totant + 1.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[1]) = "SUMMA:".
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                           
                  SUBSTRING(tidut.UT,utnr[6]) = STRING(summont,">>>>>>>>9.999").
                  RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                           
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(summask,">>>>>>>>9.999").
               END.
               ASSIGN
               kant = kant + 2
               exkant = exkant + 2.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                           
            END.
            ELSE DO:
               CREATE tidut.
               ASSIGN
               totant = totant + 1.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[7]) = "---------".
                  RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                           
               END.
               CREATE tidut.
               ASSIGN
               totant = totant + 1.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE SUBSTRING(tidut.UT,utnr[7]) = STRING(sumea,">>>>>>>>9").
               ASSIGN
               kant = kant + 2
               exkant = exkant + 2.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                           
            END.
         END.   
         ELSE DO:
            FOR EACH kalkbuff WHERE kalkbuff.UPPLAG = ? AND 
            kalkbuff.NUM = numvar:
               DELETE kalkbuff.
            END.            
         END.
      END.
      IF TOG_EGEN = TRUE THEN DO:
         RUN egenkontroll_UI.
      END.
      CREATE tidut.
      totant = totant + 1.
      RUN tom_UI (INPUT ?).
      CREATE tidut.
      ASSIGN
      totant = totant + 1
      kant = kant + 2
      exkant = exkant + 2.   
      RUN tom_UI (INPUT ?).
      
      RUN bryt_UI.
   END.               
   ASSIGN
   totalsum = totalsum + sumpris
   totea = totea + sumea
   arbtim = arbtim + summont
   msktim = msktim + summask.
END PROCEDURE.

PROCEDURE upput_UI : /*cccc*/
   
   IF skrivbord = FALSE THEN DO:   
      CREATE tidut. 
      totant = totant + 1.
      RUN tom_UI (INPUT ?).
      CREATE tidut.  
      ASSIGN
      totant = totant + 1
      kant = kant + 2
      exkant = exkant + 2.    
      ASSIGN
      SUBSTRING(tidut.UT,utnr[1]) = "Upplag nr".
      RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                       
      SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(temp_upp.UPPLAG).
      RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                       
   END.
   ELSE DO:
      IF AVAILABLE upptemp THEN DO: 
         CREATE tidut. 
         totant = totant + 1.
         RUN tom_UI (INPUT ?).
         CREATE tidut.  
         ASSIGN
         totant = totant + 1
         kant = kant + 2
         exkant = exkant + 2.    
         ASSIGN
         SUBSTRING(tidut.UT,utnr[1]) = "Upplag nr".
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                       
         SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(upptemp.UPPLAG).
         RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                       
      END.
   END.
END PROCEDURE.

PROCEDURE utkalk_UI :
    
   IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I} THEN DO:
      CREATE tidut.
      ASSIGN
      totant = totant + 1
      kant = kant + 1
      exkant = exkant + 1
      SUBSTRING(tidut.UT,utnr[1]) = kalkbuff.ARBKOD + " " + STRING(kalkbuff.LOPNR,Guru.Konstanter:varforetypchar[6]).
      RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                           
      SUBSTRING(tidut.UT,utnr[2]) = SUBSTRING(kalkbuff.BENAMNING,1,30).
      RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                           
      SUBSTRING(tidut.UT,utnr[4]) = kalkbuff.ENHET.
      RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                           
      SUBSTRING(tidut.UT,utnr[5]) = STRING(kalkbuff.ANTAL,">>>>9.999").
      RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).   
      IF kalkvisabaraantal = TRUE THEN.
      ELSE DO:                        
         SUBSTRING(tidut.UT,utnr[6]) = STRING(kalkbuff.F2,">>>>>>>>9.999").
         RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?). 
         ASSIGN
         SUBSTRING(tidut.UT,utnr[7]) = STRING(kalkbuff.F3 + kalkbuff.F4,">>>>>>>>9.999")
         summont = summont + kalkbuff.F2
         summask = summask + kalkbuff.F3 + kalkbuff.F4.
         RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
      END.                              
   END.   
   ELSE DO:   
      CREATE tidut.
      ASSIGN
      totant = totant + 1
      kant = kant + 1
      exkant = exkant + 1
      SUBSTRING(tidut.UT,utnr[1]) = kalkbuff.ARBKOD + " " + STRING(kalkbuff.LOPNR,Guru.Konstanter:varforetypchar[6]).
      RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
      SUBSTRING(tidut.UT,utnr[2]) = SUBSTRING(kalkbuff.BENAMNING,1,30).
      RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                             
      SUBSTRING(tidut.UT,utnr[4]) = kalkbuff.ENHET.
      RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                                     
      SUBSTRING(tidut.UT,utnr[5]) = STRING(kalkbuff.ANTAL,">>>>>9").
      RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?). 
      IF kalkvisabaraantal = TRUE THEN.
      ELSE DO:                            
         SUBSTRING(tidut.UT,utnr[6]) = STRING(kalkbuff.EAST,">>>>>>>>9").
         RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                                    
         SUBSTRING(tidut.UT,utnr[7]) = STRING(kalkbuff.EA,">>>>>>>>9").
         sumea = sumea + kalkbuff.EA.
         RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
      END.                                
   END.
END PROCEDURE.

PROCEDURE val2_UI :

   CREATE tidut.
   ASSIGN
   totant = totant + 1
   kant = kant + 1
   exkant = exkant + 1.
   
   IF AVAILABLE BBENAMNING AND BBENAMNING.B3 NE "" THEN DO:       
      ASSIGN
      SUBSTRING(tidut.UT,utnr[1]) =  BBENAMNING.B3.
      RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).               
      SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(uppl_temp.F3).               
      RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                        
   END.   
   IF AVAILABLE BBENAMNING AND BBENAMNING.B4 NE "" THEN DO:      
      ASSIGN
      SUBSTRING(tidut.UT,utnr[4]) = BBENAMNING.B4.
      RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                                                      
      ASSIGN
      SUBSTRING(tidut.UT,utnr[6]) = ":" + LEFT-TRIM(uppl_temp.F4).
      RUN data_UI (INPUT TRUE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                                                      
   END.
   CREATE tidut.
   ASSIGN
   totant = totant + 1
   kant = kant + 1
   exkant = exkant + 1.   
   FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
   skap_temp.F3 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
   IF AVAILABLE skap_temp THEN finns = TRUE.         
   ELSE finns = FALSE.
   IF finns = FALSE THEN DO:
      FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
      skap_temp.F4 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN finns = TRUE. 
   END.     
   DO WHILE finns = TRUE:
      FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
      skap_temp.F3 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN DO:
         ASSIGN            
         SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(skap_temp.F3).
         RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                      
         DELETE skap_temp.
      END.
      FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
      skap_temp.F4 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN DO:
         /* kolumn lena
         SUBSTRING(tidut.UT,utnr[5]) = LEFT-TRIM(skap_temp.F4).
         RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).     */                                   
         SUBSTRING(tidut.UT,utnr[6]) = LEFT-TRIM(skap_temp.F4).
         RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                                        
         DELETE skap_temp.
      END.
      FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
      skap_temp.F3 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN finns = TRUE.         
      ELSE finns = FALSE.
      IF finns = FALSE THEN DO:
         FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
         skap_temp.F4 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
         IF AVAILABLE skap_temp THEN finns = TRUE. 
      END.
      CREATE tidut.
      ASSIGN
      totant = totant + 1
      kant = kant + 1
      exkant = exkant + 1.
      RUN tom_UI (INPUT ?).
   END.  
   IF AVAILABLE BBENAMNING AND BBENAMNING.B5 NE "" THEN DO:      
      ASSIGN
      SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.B5.
      RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).               
      SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(uppl_temp.F5).      
      RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                        
   END.
   IF AVAILABLE BBENAMNING AND BBENAMNING.B6 NE "" THEN DO:      
      ASSIGN
      SUBSTRING(tidut.UT,utnr[4]) = BBENAMNING.B6.
      RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                        
      SUBSTRING(tidut.UT,utnr[6]) = ":" + LEFT-TRIM(uppl_temp.F6).
      RUN data_UI (INPUT TRUE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                        
   END.
   CREATE tidut.
   ASSIGN
   totant = totant + 1
   kant = kant + 1
   exkant = exkant + 1.   
   FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
   skap_temp.F5 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
   IF AVAILABLE skap_temp THEN finns = TRUE.         
   ELSE finns = FALSE.
   IF finns = FALSE THEN DO:
      FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
      skap_temp.F6 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN finns = TRUE. 
   END.      
   DO WHILE finns = TRUE:
      FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
      skap_temp.F5 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN DO:
         ASSIGN
         SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(skap_temp.F5).
         RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                      
         DELETE skap_temp.
      END.
      FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
      skap_temp.F6 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN DO:
         /* kolumn lena
         ASSIGN            
         SUBSTRING(tidut.UT,utnr[5]) = LEFT-TRIM(skap_temp.F6).
         RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).*/
         ASSIGN            
         SUBSTRING(tidut.UT,utnr[6]) = LEFT-TRIM(skap_temp.F6).
         RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).
         DELETE skap_temp.
      END.
      FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
      skap_temp.F5 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN finns = TRUE.         
      ELSE finns = FALSE.
      IF finns = FALSE THEN DO:
         FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
         skap_temp.F6 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
         IF AVAILABLE skap_temp THEN finns = TRUE. 
      END.
      CREATE tidut.
      ASSIGN
      totant = totant + 1
      kant = kant + 1
      exkant = exkant + 1.   
      RUN tom_UI (INPUT ?).
   END.
END PROCEDURE.

PROCEDURE val_UI :
   /* vattenfall vill inte ha med konstruktion om Konstruktionsval urbockad*/
   IF globforetag = "vast" AND TOG_VAL = FALSE THEN.
   ELSE DO:               
      CREATE tidut.
      totant = totant + 1.
      RUN tom_UI (INPUT ?).
      CREATE tidut.  
      ASSIGN
      totant = totant + 1
      kant = kant + 2
      exkant = exkant + 2.    
      IF AVAILABLE BBENAMNING THEN DO:
         ASSIGN SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.B1.
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                       
      END.
      SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(uppl_temp.F1).
      RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).
   END.                                          
   IF TOG_VAL = TRUE THEN DO:
      enkabval = FALSE.
      IF uppl_temp.GRUPP = 0 THEN enkabval = TRUE.   
      /* Claes vill inte ha markstation som kabelskåp i byggprotokoll , eftersom det bara är förkortningar*/
      IF globforetag = "elpa" AND uppl_temp.GRUPP = 12 THEN enkabval = TRUE.
      IF globforetag = "cVAST" AND uppl_temp.GRUPP = 12 THEN enkabval = TRUE.      
      IF globforetag = "cVAST" AND uppl_temp.GRUPP = 33 THEN enkabval = TRUE.      
      IF globforetag = "cVAST" AND uppl_temp.GRUPP = 38 THEN enkabval = TRUE.      
      IF globforetag = "GRAN" AND uppl_temp.GRUPP = 35 THEN enkabval = TRUE.
      IF globforetag = "NAEK" AND uppl_temp.GRUPP = 35 THEN enkabval = TRUE.
      IF globforetag = "CPOMA" AND uppl_temp.GRUPP = 35 THEN enkabval = TRUE.      
      IF globforetag = "FORS" AND uppl_temp.GRUPP = 33 THEN enkabval = TRUE.      
      IF globforetag = "ELKB" AND uppl_temp.GRUPP = 35 THEN enkabval = TRUE.      
      IF enkabval = TRUE THEN DO:
         CREATE tidut.
         totant = totant + 1.
         RUN tom_UI (INPUT ?).
         CREATE tidut.
         ASSIGN
         totant = totant + 1
         kant = kant + 2
         exkant = exkant + 2.
         IF AVAILABLE BBENAMNING THEN DO:
            SUBSTRING(tidut.UT,utnr[1]) = SUBSTRING(BBENAMNING.B2,1,15).
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                             
            SUBSTRING(tidut.UT,utnr[2]) =      SUBSTRING(BBENAMNING.B3,1,15).
            RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                                
            SUBSTRING(tidut.UT,utnr[3]) =      SUBSTRING(BBENAMNING.B4,1,15).
            RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                             
            SUBSTRING(tidut.UT,utnr[4]) =      SUBSTRING(BBENAMNING.B5,1,15).
            RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                                
            ASSIGN
            SUBSTRING(tidut.UT,utnr[5]) = SUBSTRING(BBENAMNING.B6,1,15).
            RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).                                                      
         END.
         CREATE tidut.
         ASSIGN
         totant = totant + 1
         kant = kant + 1
         exkant = exkant + 1
         SUBSTRING(tidut.UT,utnr[1]) = LEFT-TRIM(uppl_temp.F2).
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                             
         SUBSTRING(tidut.UT,utnr[2]) = LEFT-TRIM(uppl_temp.F3).
         RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                                
         SUBSTRING(tidut.UT,utnr[3]) = LEFT-TRIM(uppl_temp.F4).
         RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                             
         SUBSTRING(tidut.UT,utnr[4]) = LEFT-TRIM(uppl_temp.F5).
         RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                                
         ASSIGN
         SUBSTRING(tidut.UT,utnr[5]) = LEFT-TRIM(uppl_temp.F6).
         RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).                                             
         FOR EACH skap_temp WHERE skap_temp.NUM = uppl_temp.NUM
         USE-INDEX NUM NO-LOCK:
            IF skap_temp.F2 = "" AND skap_temp.F3 = "" AND skap_temp.F4 = "" AND
               skap_temp.F5 = "" AND skap_temp.F6 = "" THEN musz = musz.
            ELSE DO:
               CREATE tidut.
               ASSIGN
               totant = totant + 1
               SUBSTRING(tidut.UT,utnr[1]) = LEFT-TRIM(skap_temp.F2).
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                             
               SUBSTRING(tidut.UT,utnr[2]) = LEFT-TRIM(skap_temp.F3).
               RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                                      
               SUBSTRING(tidut.UT,utnr[3]) = LEFT-TRIM(skap_temp.F4).
               RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                                   
               SUBSTRING(tidut.UT,utnr[4]) = LEFT-TRIM(skap_temp.F5).
               RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                                       
               ASSIGN
               SUBSTRING(tidut.UT,utnr[5]) = LEFT-TRIM(skap_temp.F6).
               ASSIGN
               kant = kant + 1
               exkant = exkant + 1.
               RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).                                                   
            END.
         END.
         RETURN.
      END.
      IF AVAILABLE BBENAMNING AND BBENAMNING.B2 NE "" THEN DO:          
         ASSIGN SUBSTRING(tidut.UT,utnr[4]) = BBENAMNING.B2.
         RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                                                              
         ASSIGN
         SUBSTRING(tidut.UT,utnr[6]) = ":" + LEFT-TRIM(uppl_temp.F2).
         RUN data_UI (INPUT TRUE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                                                      
         FOR EACH skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
         skap_temp.F2 NE "" USE-INDEX NUM NO-LOCK:
            CREATE tidut.
            ASSIGN
            totant = totant + 1.
            /* kolumn lena
            SUBSTRING(tidut.UT,utnr[7]) = LEFT-TRIM(skap_temp.F2).*/
            SUBSTRING(tidut.UT,utnr[6]) = LEFT-TRIM(skap_temp.F2).
            ASSIGN
            kant = kant + 1
            exkant = exkant + 1.
            /* kolumn lena
            RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).   */                                                   
            RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                                                      
         END.         
      END.        
      RUN val2_UI.         
   END.   
END PROCEDURE.

PROCEDURE tombild_UI :
   extemp.BILD = TRUE.
END PROCEDURE.

PROCEDURE tom_UI :
   DEFINE INPUT PARAMETER exrow AS INTEGER NO-UNDO.
   CREATE extemp.
   ASSIGN 
   extemp.COLVAR = "A" 
   extemp.ROWVAR = totant 
   extemp.DATA = ""
   extemp.FNAME = "COURIER" 
   extemp.FSIZE = 10        
   extemp.FBOLD = FALSE     
   extemp.FHEIGHT = 12      
   extemp.FCOLOR = 0     
   extemp.CHARVAR = FALSE.
   /*extemp.DATA = STRING(exkant) + STRING("*") + STRING(extant). */
   IF exrow NE ? THEN DO:
      ASSIGN 
      extemp.EXROW = ROWID(extemp)
      utrow[exrow] = ROWID(extemp).
   END.
   ELSE DO:
      extemp.EXROW = ?.
   END.

END PROCEDURE.

PROCEDURE data_UI :
   DEFINE INPUT PARAMETER allachar     AS LOGICAL NO-UNDO.   /*Sätt fält med integers som character - vänsterställ*/
   DEFINE INPUT PARAMETER vcolvar      AS CHARACTER NO-UNDO. /*Vilken kolumn*/
   DEFINE INPUT PARAMETER vrowvar      AS INTEGER NO-UNDO.   /*Vilken rad*/
   DEFINE INPUT PARAMETER vdata        AS CHARACTER NO-UNDO. /*Data*/
   DEFINE INPUT PARAMETER fontvar      AS INTEGER NO-UNDO.   /*Font - 0 = normaltext, 1 = fet*/
   DEFINE INPUT PARAMETER exrow        AS INTEGER NO-UNDO.   /*Rowid*/
   /*Fet text*/
   IF fontvar = 1 THEN DO: 
      /*Beredningsuvud*/
      IF globforetag = "GKAL" THEN DO:
         ASSIGN
         vfontname = "ARIEL"
         vfontsize = 10 
         vfonttype = TRUE 
         vfontheight = 12
         vfontcolor = 11.              
      END.
      ELSE DO:
         ASSIGN
         vfontname = "ARIEL"
         vfontsize = 10 
         vfonttype = TRUE 
         vfontheight = 12
         vfontcolor = 11.           
      END.
   END.
   ELSE IF fontvar = 2 THEN DO:
      /*Rubrikrad ENR Benämning mm*/
      IF globforetag = "GKAL" THEN DO:
         ASSIGN
         vfontname = "ARIEL"
         vfontsize = 11 
         vfonttype = FALSE 
         vfontheight = 12
         vfontcolor = 11. 
      END.
      ELSE DO:
         ASSIGN
         vfontname = "COURIER"
         vfontsize = 8 
         vfonttype = FALSE 
         vfontheight = 12
         vfontcolor = 11. 
      END.
   END.
   ELSE IF fontvar = 3 THEN DO:
      /*id mm*/
      IF globforetag = "GKAL" THEN DO:
         ASSIGN
         vfontname = "ARIEL"
         vfontsize = 11 
         vfonttype = TRUE 
         vfontheight = 12
         vfontcolor = 0. 
      END.
   END.
   ELSE IF fontvar = 0 THEN DO:
      /*MTRLPOSTER OBS INGENFONT = FALSE*/
      IF globforetag = "cELPA" {GLOBVES.I} THEN DO:
         ASSIGN
         vfontname = "COURIER"
         vfontsize = 10 
         vfonttype = FALSE 
         vfontheight = 12
         vfontcolor = 0.
      END.
      ELSE IF globforetag = "GKAL" THEN DO:
         ASSIGN
         vfontname = "ARIEL"
         vfontsize = 11 
         vfonttype = FALSE 
         vfontheight = 12
         vfontcolor = 0.
      END.
      ELSE DO:    
         ASSIGN
         vfontname = "COURIER"
         vfontsize = 8 
         vfonttype = FALSE 
         vfontheight = 12
         vfontcolor = 0.     
      END.
   END.
   CREATE extemp.
   ASSIGN 
   extemp.COLVAR = vcolvar
   extemp.ROWVAR = vrowvar   
   extemp.FNAME = vfontname 
   extemp.FSIZE = vfontsize 
   extemp.FBOLD = vfonttype 
   extemp.FHEIGHT = vfontheight
   extemp.FCOLOR = vfontcolor
   extemp.CHARVAR = allachar.   
   
   IF fontvar = 0 THEN extemp.INGENFONT = FALSE.
   ELSE extemp.INGENFONT = TRUE.
        /*
        extemp.INGENFONT = FALSE.
        */
   IF SUBSTRING(vdata,131,1) = "£" THEN DO:     
      extemp.DATA = vdata.
   END.
   ELSE DO:
      extemp.DATA = TRIM(vdata).
   END.   
   /*IF vcolvar = "A" THEN DO:
     extemp.DATA = extemp.DATA + " " + STRING(exkant) + STRING("*") + STRING(extant). 
   END.*/
   IF exrow NE ? THEN DO:
      ASSIGN 
      extemp.EXROW = ROWID(extemp)
      utrow[exrow] = ROWID(extemp).
   END.
   ELSE DO:
      extemp.EXROW = ?.
   END.
   RUN fargenr_UI (INPUT vdata).
END PROCEDURE.

PROCEDURE kartrefbgc_UI :
   IF AVAILABLE extemp THEN DO:
      extemp.BCOLOR = 14.
   END.
END PROCEDURE.


PROCEDURE fargenr_UI :
   DEFINE INPUT PARAMETER inenr AS CHARACTER NO-UNDO.
   FIND FIRST BERSTOLP WHERE BERSTOLP.ENR = inenr AND BERSTOLP.STOLPE = TRUE NO-LOCK NO-ERROR.
   IF NOT AVAILABLE BERSTOLP THEN RETURN.
   IF AVAILABLE extemp THEN DO:
      extemp.BCOLOR = varforetypval[31].
   END.
END PROCEDURE.

/*
PROCEDURE skapalista_UI :
   DEFINE INPUT PARAMETER TOG_ANM2   AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_ID2    AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_SPANN2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_MTRL2  AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_P32    AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_TEXT2  AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_UPP2   AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_VAL2   AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_EGEN2  AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER globforetag2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER globanvpkod2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER seluppvar2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER edmedd2   AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valkonst2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER prisvar2  AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER bryt2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER skrivut2  AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER valaonr2  AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valdelnr2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER valort2   AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER katvar2   AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER kalkvar2  AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER globsids2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER skrivbord2  AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER musz2 AS LOGICAL NO-UNDO.   
   DEFINE INPUT PARAMETER TABLE FOR kon_val.
   DEFINE INPUT PARAMETER TABLE FOR felmeddtemp.
   DEFINE OUTPUT PARAMETER TABLE FOR tidut.
   DEFINE OUTPUT PARAMETER TABLE FOR extemp.        
   ASSIGN

   TOG_ANM   = TOG_ANM2  
   TOG_ID    =  TOG_ID2   
   TOG_SPANN =  TOG_SPANN2
   TOG_MTRL  =  TOG_MTRL2 
   TOG_P3    =  TOG_P32   
   TOG_TEXT  =  TOG_TEXT2 
   TOG_UPP   =  TOG_UPP2  
   TOG_VAL   =  TOG_VAL2  
   TOG_EGEN  =  TOG_EGEN2 
   globforetag = globforetag2
   globanvpkod = globanvpkod2
   seluppvar = seluppvar2
   edmedd   =  edmedd2    
   valkonst =  valkonst2 
   prisvar  =  prisvar2  
   bryt     =  bryt2     
   skrivut  =  skrivut2  
   musz     =  musz2     
   valaonr  =  valaonr2  
   valdelnr =  valdelnr2 
   valort   =  valort2   
   valomrade = valomrade2
   katvar    = katvar2   
   kalkvar   = kalkvar2
   globsids = globsids2
   skrivbord = skrivbord2
   stolpval = 1.  
   EMPTY TEMP-TABLE tidut NO-ERROR. 
   EMPTY TEMP-TABLE mtrl_temp NO-ERROR. 
   EMPTY TEMP-TABLE mtrl_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE id_temp NO-ERROR. 
   EMPTY TEMP-TABLE grupp_temp NO-ERROR. 
   EMPTY TEMP-TABLE grupp_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE uppl_temp NO-ERROR. 
   edvar = FALSE.
   FIND FIRST PARSTOLP NO-LOCK NO-ERROR.
   /*Om anv. har valt btn_skriv i berlista, då har skrivval redan körts*/
   IF globsids = 0  THEN globsids = 73.
   musz = FALSE.
   ASSIGN
   forsta = FALSE
   fetstil = FALSE
   tant = 0
   totant = 0
   kvaravsidan = 0
   exkant = 0
   extant = 0
   sidlangdex = 56
   sidlangd = globsids - 3
   forstaanmark = FALSE.
   RUN huvud_UI.

   IF musz = FALSE THEN RUN summa_UI.
   musz2 = musz.
   RETURN.
END PROCEDURE.

*/
