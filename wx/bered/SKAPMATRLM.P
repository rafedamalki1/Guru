/*SKAPMATRLM.P*/
{SKAPMATRLMWID.I}
{ALLDEF.I}
&Scoped-define NEW 
{GLOBVAR2DEL1.I}

{DEFSOK.I}
{SOKDEF.I}
&Scoped-define SHARED SHARED
{FRITEMP.I}
{delvaltemp.i}
{MTRLTEMP.I}
{KONVALTEMP.I} 
{KONID.I} 
{LISTMTRL.I}      
{LEVTEMP.I}
{HUVLEVTEMP.I}
{BBENAMNTEMP.I} 
{HOPPSEK2W.I}
{ANNAMN.I}
{BERSTOLP.I}
{INKSUMBERTEMP.I}
DEFINE SHARED VARIABLE btnbervalh AS HANDLE NO-UNDO. 
DEFINE SHARED VARIABLE btnkskaph AS HANDLE NO-UNDO.
DEFINE SHARED TEMP-TABLE soktamtrlfavo NO-UNDO LIKE mtrltemp.
DEFINE SHARED VARIABLE nettoh AS HANDLE NO-UNDO.
DEFINE SHARED VARIABLE datvar AS DATE NO-UNDO.
DEFINE  SHARED VARIABLE satsinn AS LOGICAL NO-UNDO.
DEFINE  SHARED VARIABLE satstrue AS LOGICAL NO-UNDO.
DEFINE  SHARED VARIABLE satsmtrl AS LOGICAL NO-UNDO.
DEFINE  SHARED VARIABLE mtrl_rowid AS ROWID NO-UNDO.
DEFINE SHARED VARIABLE valomrade AS CHARACTER NO-UNDO. 
DEFINE SHARED VARIABLE valaonr AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE valdelnr AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE valort AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE kon_rowid AS ROWID NO-UNDO.
DEFINE SHARED VARIABLE val_row AS ROWID NO-UNDO.
DEFINE SHARED VARIABLE repovar AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE xtillyvar AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE musz AS LOGICAL NO-UNDO. 
DEFINE SHARED VARIABLE vald_lev AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE huvudlev AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE vald_kundlev AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE sok AS LOGICAL NO-UNDO. 
DEFINE VARIABLE entrymtrlkab AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE entrymtrlantalskap AS LOGICAL NO-UNDO.

DEFINE VARIABLE status-ok AS LOGICAL NO-UNDO. 
DEFINE VARIABLE firstkod AS INTEGER NO-UNDO. 
DEFINE VARIABLE gruppkod AS INTEGER NO-UNDO.
DEFINE VARIABLE typkod AS CHARACTER NO-UNDO.
DEFINE VARIABLE antal_valda AS INTEGER NO-UNDO.
DEFINE VARIABLE antal_raknare AS INTEGER NO-UNDO.  
DEFINE VARIABLE numval AS INTEGER NO-UNDO. 
DEFINE VARIABLE aosok AS CHARACTER FORMAT "X(40)" NO-UNDO.
DEFINE VARIABLE valnum AS INTEGER NO-UNDO. 
DEFINE VARIABLE counter AS INTEGER NO-UNDO.        
DEFINE VARIABLE counter2 AS INTEGER NO-UNDO. 
DEFINE VARIABLE satsvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE valet AS LOGICAL NO-UNDO.
DEFINE VARIABLE posok AS CHARACTER FORMAT "X(11)" NO-UNDO.
DEFINE VARIABLE lev AS CHARACTER NO-UNDO.
DEFINE VARIABLE sokannan AS LOGICAL NO-UNDO.
DEFINE VARIABLE svar AS LOGICAL NO-UNDO.
DEFINE VARIABLE skapmtrlapph AS HANDLE NO-UNDO.
DEFINE VARIABLE mtrlhmtapph AS HANDLE NO-UNDO.
DEFINE VARIABLE felmedd AS CHARACTER NO-UNDO.
DEFINE VARIABLE levinlast AS CHARACTER NO-UNDO.
DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.
DEFINE VARIABLE brwprocdyn NO-UNDO LIKE brwproc.
DEFINE VARIABLE brwh AS HANDLE NO-UNDO EXTENT 50.
DEFINE TEMP-TABLE alltskapmtrl NO-UNDO
   FIELD ENR AS CHARACTER
   FIELD BENAMNING AS CHARACTER
   FIELD ANTAL AS INTEGER
   FIELD ENHET AS CHARACTER
   FIELD LEVKOD AS CHARACTER
   FIELD PRIS AS DECIMAL
   INDEX ENR ENR LEVKOD.
      
{EXTRADATA.I}
DEFINE BUFFER konbuff FOR kon_val.



DEFINE VARIABLE kon_valkh  AS HANDLE NO-UNDO.
DEFINE VARIABLE mtrltemph AS HANDLE NO-UNDO.
DEFINE VARIABLE soktamtrlfavoh AS HANDLE NO-UNDO.
DEFINE VARIABLE list_mtrlh  AS HANDLE NO-UNDO.
DEFINE VARIABLE satstemph  AS HANDLE NO-UNDO.
DEFINE VARIABLE berstolptemph  AS HANDLE NO-UNDO.
DEFINE VARIABLE antalinkvar AS DECIMAL NO-UNDO.
framesizeh = framesizeextrah.
kon_valkh = TEMP-TABLE kon_val:DEFAULT-BUFFER-HANDLE.
mtrltemph = TEMP-TABLE mtrltemp:DEFAULT-BUFFER-HANDLE.
list_mtrlh = TEMP-TABLE list_mtrl:DEFAULT-BUFFER-HANDLE.
satstemph = TEMP-TABLE satstemp:DEFAULT-BUFFER-HANDLE.
berstolptemph = TEMP-TABLE berstolptemp:DEFAULT-BUFFER-HANDLE.  

ON 'MOUSE-SELECT-DBLCLICK' OF BRW_HLEV PERSISTENT RUN mdrwhlev_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK' OF BRW_SOKMTRLFSM PERSISTENT RUN mdrwhlev_UI IN THIS-PROCEDURE.



/*
BRW_HLEV
*/
ON 'VALUE-CHANGED' OF BRW_KAB PERSISTENT RUN vcbrwkab_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_HLEV PERSISTENT RUN vcbhlevm_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_MTRL PERSISTENT RUN vcbrwmtrl_UI IN THIS-PROCEDURE.
ON 'ROW-LEAVE' OF BRW_MTRL PERSISTENT RUN rowlbrwmtrl_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK' OF BRW_MTRL  PERSISTENT RUN btnback_UI  IN THIS-PROCEDURE.

ON 'ENTRY' OF listantalh PERSISTENT RUN elistant_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF listantalh PERSISTENT RUN llistant_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-CLICK' OF listantalh PERSISTENT RUN mlma_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF linkabh PERSISTENT RUN llinkabt_UI IN THIS-PROCEDURE.
ON 'ENTRY' OF linkabh PERSISTENT RUN elinkab_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-CLICK' OF linkabh PERSISTENT RUN mlinkab_UI IN THIS-PROCEDURE.

ON 'MOUSE-SELECT-DBLCLICK' OF BRW_SATS PERSISTENT RUN mdbrwsats_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK' OF BRW_STOLP PERSISTENT RUN mdbrwsats_UI IN THIS-PROCEDURE.

ON 'CHOOSE' OF BTN_ALLTMTRL PERSISTENT RUN alltbort_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_ANTAL PERSISTENT RUN btnantal_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_BACK PERSISTENT RUN btnback_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_LEV PERSISTENT RUN btnlev_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_LINKAB PERSISTENT RUN btnlinkab_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_NOLL PERSISTENT RUN btnnoll_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_NY PERSISTENT RUN btnny_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_OVER PERSISTENT RUN btnover_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_SATS PERSISTENT RUN btnsats_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_SPEC PERSISTENT RUN btnspec_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_TEXT PERSISTENT RUN btntext_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_NASTKON PERSISTENT RUN nextkonst_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_KOMPSKAP PERSISTENT RUN kompskap_UI IN THIS-PROCEDURE.



ON 'VALUE-CHANGED' OF CMB_LEV PERSISTENT RUN cmblev_UI IN THIS-PROCEDURE.
ON 'ANY-KEY' OF FILL-IN-BEN PERSISTENT RUN akben_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK' OF FILL-IN-BEN PERSISTENT RUN mdben_UI IN THIS-PROCEDURE.
ON 'ANY-KEY' OF FILL-IN-ENR PERSISTENT RUN akenr_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK' OF FILL-IN-ENR PERSISTENT RUN mdenr_UI IN THIS-PROCEDURE.
ON 'ANY-KEY' OF FILL-IN-KOD PERSISTENT RUN akkod_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK' OF FILL-IN-KOD PERSISTENT RUN mdkod_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF RAD_MTRL PERSISTENT RUN vcradmtrl_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF FRAME-SKAPMTRL PERSISTENT RUN fixastorlek_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF TOG_ALLSKMTRL PERSISTENT RUN togalltmtrl_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF  m_AvmarkeraHLEV PERSISTENT RUN avmarkeraHLEV_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_KUNDLISTASM PERSISTENT RUN StolpKundl_UI IN THIS-PROCEDURE.
ASSIGN
BTN_KUNDLISTASM:HIDDEN = TRUE
FILL-IN-ENRSTOLPSM:HIDDEN = TRUE
FILL-IN-BENSTOLPSM:HIDDEN = TRUE
FILL-IN-ENR:HIDDEN = TRUE
FILL-IN-BEN:HIDDEN = TRUE
RAD_SOK:HIDDEN = TRUE.
BTN_KUNDLISTASM:LABEL = Guru.Konstanter:gutbytk.


RUN skapabrw_UI (INPUT 1, TEMP-TABLE alltskapmtrl:DEFAULT-BUFFER-HANDLE).
brwh[1]:HIDDEN = TRUE.


PROCEDURE StolpKundl_UI :
   IF Guru.GlobalaVariabler:KundListId = 0 THEN DO:
      MESSAGE "Du har inte valt någon " + LC(Guru.Konstanter:gutbytk) + " för denna beredning!"
      VIEW-AS ALERT-BOX.
   END.
   IF RAD_MTRL:SCREEN-VALUE = "2" THEN DO:   
      RUN setcolsortvar_UI IN brwproc[5] (INPUT " WHERE STOLPE = TRUE AND UID = " + STRING(Guru.GlobalaVariabler:KundListId)).
   END.   
   IF RAD_MTRL:SCREEN-VALUE = "3" THEN DO:
      RUN setcolsortvar_UI IN brwproc[5] (INPUT " WHERE STOLPE = FALSE AND UID = " + STRING(Guru.GlobalaVariabler:KundListId)).
      
   END.
   RUN openbdynspec_UI IN brwproc[5].
   IF Guru.Konstanter:globnetprissortvar = 1 THEN RUN openbdynspec_UI IN brwproc[5].   
END PROCEDURE.


PROCEDURE skapabrw_UI : 
   DEFINE INPUT  PARAMETER brvnr AS INTEGER NO-UNDO.  
   DEFINE INPUT  PARAMETER tthandlez AS HANDLE NO-UNDO.
   DEFINE VARIABLE brwantal AS INTEGER NO-UNDO.
   DEFINE VARIABLE x-multi AS DECIMAL NO-UNDO.
   DEFINE VARIABLE y-multi AS DECIMAL NO-UNDO. 
   DEFINE VARIABLE radvar AS DECIMAL NO-UNDO.
   DEFINE VARIABLE colvar AS DECIMAL NO-UNDO.
   RUN DYNBRWINIT.P PERSISTENT SET brwprocdyn[brvnr].
   RUN newbrw_UI IN brwprocdyn[brvnr] (INPUT THIS-PROCEDURE).
   RUN brw_UI IN brwprocdyn[brvnr] (OUTPUT brwh[brvnr]).
   /*FRAME-MTRL*/
   IF brvnr = 1 THEN DO:
      RUN brwegenskap_UI IN brwprocdyn[brvnr] (INPUT tthandlez,INPUT "BRW_ALLTMTRL", INPUT 124, INPUT 10, INPUT TRUE, INPUT TRUE, INPUT "Allt materiel för konstruktionen", INPUT FRAME-SKAPMTRL).
   
      RUN getsizf_UI IN framesizeh (OUTPUT x-multi, OUTPUT y-multi).
      /*                                     bredd     höjd     kol      rad*/
      RUN brwstorlek_UI IN brwprocdyn[brvnr](INPUT 32, INPUT 10, INPUT 1.5, INPUT 1.9, INPUT x-multi, INPUT y-multi).
      RUN fieldinit_UI IN brwprocdyn[brvnr].              
   
      RUN createfields_UI IN brwprocdyn[brvnr] (INPUT "ENR", INPUT Guru.Konstanter:genk, INPUT 11, INPUT "x(256)", INPUT TRUE).
      RUN createfields_UI IN brwprocdyn[brvnr] (INPUT "BENAMNING", INPUT "Benämning", INPUT 20, INPUT "x(256)", INPUT TRUE).
      RUN createfields_UI IN brwprocdyn[brvnr] (INPUT "ANTAL", INPUT "Antal", INPUT 6, INPUT ">>>>>9", INPUT TRUE).
      RUN createfields_UI IN brwprocdyn[brvnr] (INPUT "ENHET", INPUT "Enh", INPUT 3, INPUT "x(5)", INPUT TRUE).
      IF Guru.Konstanter:mtrlsekvar[6] = FALSE  THEN DO:
         RUN createfields_UI IN brwprocdyn[brvnr] (INPUT "PRIS", INPUT "Pris", INPUT 10, INPUT ">>>>99.99", INPUT TRUE).
      END.
      RUN createfields_UI IN brwprocdyn[brvnr] (INPUT "LEVKOD", INPUT "Lev-id", INPUT 5, INPUT "x(2)", INPUT TRUE).
    
      RUN dynprogextra IN brwprocdyn[brvnr] (INPUT "rowdispextra_UI",INPUT THIS-PROCEDURE).
      RUN rowdispextrakor IN  brwprocdyn[brvnr] (INPUT TRUE). 
        
                     
                                     
   END. 
   
   RUN fieldslut_UI IN brwprocdyn[brvnr].
   ASSIGN 
   brwh[1]:ROW = BRW_MTRL:ROW 
   brwh[1]:HEIGHT = BRW_MTRL:HEIGHT
   brwh[1]:COLUMNS = BRW_MTRL:COLUMNS
   brwh[1]:WIDTH = BRW_MTRL:WIDTH.     
END PROCEDURE.

PROCEDURE tidigaresok_UI :
   ASSIGN
   antal_valda = BRW_HLEV:NUM-SELECTED-ROWS NO-ERROR.      
   antal_raknare = 1.
   DO WHILE antal_raknare LE antal_valda:                    
      RUN fselectfoc_UI (INPUT 1).
      IF AVAILABLE mtrltemp THEN DO:
         FIND FIRST soktamtrlfavo WHERE soktamtrlfavo.ENR = mtrltemp.ENR AND soktamtrlfavo.LEVKOD = mtrltemp.LEVKOD NO-LOCK NO-ERROR.
         IF NOT AVAILABLE soktamtrlfavo THEN DO:
            CREATE soktamtrlfavo.
            BUFFER-COPY mtrltemp TO soktamtrlfavo.
         END.                    
      END.
      antal_raknare = antal_raknare + 1.
   END. 
    
END PROCEDURE.


PROCEDURE togalltmtrl_UI :
   DEBUGGER:SET-BREAK().
   IF NOT VALID-HANDLE(brwh[1]) THEN RUN skapabrw_UI (INPUT 1, TEMP-TABLE alltskapmtrl:DEFAULT-BUFFER-HANDLE).
   EMPTY TEMP-TABLE alltskapmtrl NO-ERROR. 
   IF TOG_ALLSKMTRL:CHECKED = TRUE THEN DO:
      FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM BREAK BY list_mtrl.LEVKOD BY list_mtrl.ENR:  
         ACCUMULATE list_mtrl.ANTAL (TOTAL BY list_mtrl.LEVKOD BY list_mtrl.ENR).    
         IF LAST-OF(list_mtrl.ENR) THEN DO:
            CREATE alltskapmtrl.
            BUFFER-COPY list_mtrl TO alltskapmtrl.
            alltskapmtrl.ANTAL = (ACCUM TOTAL BY list_mtrl.ENR list_mtrl.ANTAL).
         END.                                             
      END.    
      RUN columnstotempdyn_UI IN brwprocdyn[1].                            
      RUN openbdynspec_UI IN brwprocdyn[1].
      RUN title_UI IN brwprocdyn[1].
      brwh[1]:HIDDEN = FALSE.
      RUN skaphide_UI IN huvprogh (INPUT TRUE). 
   END.
   ELSE DO:
      brwh[1]:HIDDEN = TRUE.
      RUN skaphide_UI IN huvprogh (INPUT FALSE).
   END.      
   
END PROCEDURE.
PROCEDURE fixastorlek_UI :
   
   /*stolp*/
   RUN cellbreddcol_UI IN brwproc[5] (INPUT 3, INPUT 9).
   /*lev mtrl*/
   RUN cellbreddcol_UI IN brwproc[1] (INPUT 4, INPUT 9).
   /*mtrl*/
   RUN cellbreddcol_UI IN brwproc[3] (INPUT 7, INPUT 6).
  
END PROCEDURE.

PROCEDURE eantfix_UI :
   RUN getfirst_UI IN brwproc[3]. 
   RUN lastselectdyn_UI IN brwproc[3].  
   APPLY "ENTRY" TO  listantalh.
END PROCEDURE.
PROCEDURE mdkod_UI :
   {muswait.i}
   {ENRHMT5.I}
   RUN initsok_UI (INPUT 2,INPUT posok).
   ASSIGN
   BRW_SOKMTRLFSM:HIDDEN = TRUE
   BRW_SATS:HIDDEN = FALSE
   BRW_HLEV:HIDDEN = TRUE.
   {musarrow.i}
END PROCEDURE.
PROCEDURE akkod_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN-KOD.
   END.
END PROCEDURE.
PROCEDURE mdenr_UI :
   {muswait.i}
   {ENRHMT4.I}
   RUN initsok_UI (INPUT 2,INPUT posok).
   ASSIGN 
   BRW_SATS:HIDDEN = TRUE
   BRW_SOKMTRLFSM:HIDDEN = TRUE
   BRW_HLEV:HIDDEN = FALSE.
   RUN levnamn_UI (1).
   {musarrow.i}              
END PROCEDURE.
PROCEDURE akenr_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN-ENR.
   END.
END PROCEDURE.
PROCEDURE mdben_UI :
   {muswait.i}
   {BENHMT4.I}    
   RUN initsok_UI (INPUT 1,INPUT aosok).
   RUN levnamn_UI (1).
   {musarrow.i}
END PROCEDURE.
PROCEDURE akben_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN-BEN.
   END.
END PROCEDURE.

PROCEDURE levnamn_UI :
   DEFINE INPUT  PARAMETER brw AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwantal AS INTEGER NO-UNDO.
   
   FOR EACH levtemp,
   EACH mtrltemp WHERE mtrltemp.LEVKOD = levtemp.LEVKOD AND mtrltemp.LEVNAMN = "":
      mtrltemp.LEVNAMN = levtemp.LEVNAMN.
   END.   
   RUN openbdynspec_UI IN brwproc[brw].
   RUN getnumresult_UI IN brwproc[brw] (OUTPUT brwantal).
   RUN title_UI IN brwproc[brw].
   IF brwantal = 1 THEN DO:
      RUN getfirst_UI IN brwproc[brw].
      RUN lastselectdyn_UI IN brwproc[brw].
   END.  
END PROCEDURE.

PROCEDURE cmblev_UI :
   ASSIGN           
   lev = CMB_LEV:SCREEN-VALUE.
   IF lev NE huvudlev THEN DO:
      IF SUBSTRING(lev,1,5) = "Sats " THEN DO:
         ASSIGN                      
         BRW_SOKMTRLFSM:HIDDEN = TRUE
         BRW_HLEV:HIDDEN = TRUE         
         CMB_LEV:HIDDEN = TRUE
         FILL-IN-ENR:HIDDEN = TRUE
         BTN_LEV:HIDDEN = FALSE   
         BRW_SATS:HIDDEN = FALSE         
         FILL-IN-KOD:HIDDEN = FALSE 
         satsvar = TRUE
         valet = TRUE.
         FIND FIRST levtemp WHERE levtemp.LEVNAMN = SUBSTRING(lev,6,20) 
         USE-INDEX LEV NO-LOCK NO-ERROR.
         vald_lev = levtemp.LEVKOD.
         RUN setorgtitle_UI IN brwproc[4] (INPUT "Satslista " + lev).         
         RUN setcolsortvar_UI IN brwproc[4] (INPUT " WHERE LEVKOD = '" + STRING(vald_lev) + "' AND SATS = TRUE").
         RUN openbdynspec_UI IN brwproc[4].
         APPLY "ENTRY" TO FILL-IN-KOD.
      END.
       ELSE IF SUBSTRING(lev,1,8) = "Sparade " THEN DO:
         ASSIGN   
         BRW_SOKMTRLFSM:HIDDEN = FALSE                   
         BRW_HLEV:HIDDEN = TRUE
         CMB_LEV:HIDDEN = TRUE
         BRW_SATS:HIDDEN = TRUE
         FILL-IN-KOD:HIDDEN = TRUE
         FILL-IN-BEN:HIDDEN = TRUE 
         FILL-IN-ENR:HIDDEN = TRUE 
         BTN_LEV:HIDDEN = FALSE.   
         vald_lev = lev.              
         RUN openbdynspec_UI IN brwproc[6].
      END.  
      ELSE DO:
         ASSIGN                      
         BRW_SOKMTRLFSM:HIDDEN = TRUE
         BRW_HLEV:HIDDEN = FALSE         
         CMB_LEV:HIDDEN = TRUE
         BRW_SATS:HIDDEN = TRUE
         FILL-IN-KOD:HIDDEN = TRUE
         BTN_LEV:HIDDEN = FALSE               
         valet = TRUE
         satsvar = FALSE.
         /*Niklas personlig spec_mtrl*/
         IF lev BEGINS globanv THEN DO:            
            vald_lev = "99" + Guru.Konstanter:globanv. 
         END.
         ELSE DO:
            IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN  vald_lev = CMB_LEV:SCREEN-VALUE.
            ELSE DO:
               FIND FIRST levtemp WHERE levtemp.LEVNAMN = lev 
               USE-INDEX LEV NO-LOCK NO-ERROR.
               vald_lev = levtemp.LEVKOD.
            END.    
         END.          

         IF vald_lev BEGINS "99" THEN DO:
            FIND FIRST mtrltemp WHERE mtrltemp.LEVKOD = vald_lev AND
            mtrltemp.KALKNR = 0 NO-LOCK NO-ERROR.
            IF NOT AVAILABLE mtrltemp THEN DO:
               RUN initsok_UI (INPUT 2,INPUT "").
            END.
         END.
         levinlast = "".
         RUN levinlast_UI (INPUT vald_lev,OUTPUT levinlast).
         RUN setorgtitle_UI IN brwproc[1] (INPUT "Materiellista " + lev + levinlast).                  
         RUN setcolsortvar_UI IN brwproc[1] (INPUT " WHERE LEVKOD = '" + STRING(vald_lev) + "' AND KALKNR = '" + STRING(0) + "'").
         RUN openbdynspec_UI IN brwproc[1].
         APPLY "ENTRY" TO FILL-IN-ENR.
      END.
   END.   
   ELSE DO:
      vald_lev = vald_kundlev.
   END.  
   RUN vcradmtrl_UI.    
END PROCEDURE.
PROCEDURE btntext_UI :
   antal_valda = BRW_MTRL:NUM-SELECTED-ROWS.
   antal_raknare = 1.
   DO WHILE antal_raknare LE antal_valda:
      RUN fselectfoc_UI   (INPUT 3).
      IF AVAILABLE list_mtrl THEN DO:
         RUN inkopkoll_UI (INPUT 5, OUTPUT musz, OUTPUT antalinkvar).
         IF musz = TRUE THEN DO:            
            MESSAGE "Ni kan ändra texten på detta materiel." list_mtrl.ENR " Det är inköpt via inköpsrutinen!"
            VIEW-AS ALERT-BOX TITLE "Meddelande".
            musz = FALSE.      
         END.
         ELSE RUN MTEXTU.W (INPUT ROWID(list_mtrl)).
      END.    
      
      antal_raknare = antal_raknare + 1.  
   END.      
   {musarrow.i}
END PROCEDURE.
PROCEDURE btnback_UI :
   ASSIGN
   antal_valda = BRW_MTRL:NUM-SELECTED-ROWS
   antal_raknare = 1.
   DO WHILE antal_raknare LE antal_valda:
      RUN fselectfoc_UI   (INPUT 3).    
      IF AVAILABLE list_mtrl THEN DO:
         MESSAGE "Vill du ta bort materiel - " + list_mtrl.ENR + " " + list_mtrl.BENAMNING VIEW-AS ALERT-BOX
         QUESTION BUTTONS YES-NO UPDATE svar AS LOGICAL.         
         IF svar THEN DO:
            RUN inkopkoll_UI (INPUT 5, OUTPUT musz, OUTPUT antalinkvar).
            IF musz = TRUE THEN DO:            
               MESSAGE "Ni kan inte ta bort detta materiel." list_mtrl.ENR " Det är inköpt via inköpsrutinen!"
               VIEW-AS ALERT-BOX TITLE "Meddelande".
               musz = FALSE.      
            END.
            ELSE DELETE list_mtrl.                     
            IF antal_raknare = antal_valda THEN RUN selnextprevrow_UI IN brwproc[3].            
         END.
      END.
      antal_raknare = antal_raknare + 1.   
   END.  
   RUN openbdynspec_UI IN brwproc[3].
   RUN lastselectdyn_UI IN brwproc[3].
   RUN title_UI IN brwproc[3].
END PROCEDURE.
PROCEDURE btnover_UI :
   RUN rowleave_UI.
   RUN stolp_UI.  
   APPLY "ENTRY" TO  listantalh.
END PROCEDURE.
PROCEDURE rowleave_UI :
   IF entrymtrlantalskap = TRUE THEN DO:
      IF AVAILABLE list_mtrl THEN DO:   
         APPLY "LEAVE" TO listantalh.          
      END.
   END.
   RUN rowlbrwmtrl_UI IN huvprogh (INPUT "SMTRL").   
END PROCEDURE.

PROCEDURE btnantal_UI :
   antal_valda = BRW_MTRL:NUM-SELECTED-ROWS.
   antal_raknare = 1.
   DO WHILE antal_raknare LE antal_valda:
      RUN fselectfoc_UI   (INPUT 3).
      IF AVAILABLE list_mtrl THEN DO:
         RUN LISTANTU.W (INPUT ROWID(list_mtrl)). 
         RUN inkopkoll_UI (INPUT 6, OUTPUT musz, OUTPUT antalinkvar).
         IF musz = TRUE THEN DO:            
            musz = FALSE.
            
            IF list_mtrl.ANTAL < antalinkvar THEN DO:
               MESSAGE "Ni kan inte andra antalet till lägre än " antalinkvar "! Den är inköpt via inköpsrutinen!"
               VIEW-AS ALERT-BOX TITLE "Meddelande". 
               list_mtrl.ANTAL = antalinkvar.                                    
            END.
         END.         
         RUN setlastrowid_UI IN brwproc[3] (INPUT ROWID(list_mtrl)).
      END.
      antal_raknare = antal_raknare + 1.        
   END.
   RUN refreshbrw_UI IN brwproc[3].
   RUN lastselectdyn_UI IN brwproc[3]. 
   RUN title_UI IN brwproc[3].
  
   {musarrow.i}
END PROCEDURE.
PROCEDURE mdbrwsats_UI :
   RUN stolp_UI.
   /*
   {muswait.i}
   satstrue = TRUE.
   RUN SATSINNEU.W (INPUT ROWID(satstemp)).
   satstrue = FALSE.   
   {musarrow.i}
   */
END PROCEDURE.
PROCEDURE vcbhlevm_UI :
   RUN selectfoc_UI (INPUT 1).
   IF AVAILABLE mtrltemp THEN DO:
      Guru.GlobalaVariabler:LastEnr = mtrltemp.ENR. 
   END.   
END PROCEDURE.
PROCEDURE vcbrwmtrl_UI :
   RUN selectfoc_UI (INPUT 3).   
   IF Guru.Konstanter:varforetypval[37] NE 0 THEN DO:      
      IF AVAILABLE list_mtrl THEN DO:
         FIND FIRST kmtrltemp WHERE kmtrltemp.LEVKOD = list_mtrl.LEVKOD AND kmtrltemp.ENR = list_mtrl.ENR AND kmtrltemp.KALKNR = 0 NO-LOCK NO-ERROR.        
         IF AVAILABLE kmtrltemp THEN DO:
            IF kmtrltemp.OFFERT = TRUE THEN DO:
               ASSIGN FILL-IN-KOMM:SCREEN-VALUE = kmtrltemp.BENAMNING.      
            END.
            ELSE ASSIGN FILL-IN-KOMM:SCREEN-VALUE = "Turkosfärgad artikel har kommentar. Markera artikel så visas kommentaren".                  
         END.
         ELSE ASSIGN FILL-IN-KOMM:SCREEN-VALUE = "Turkosfärgad artikel har kommentar. Markera artikel så visas kommentaren".                  
         FILL-IN-KOMM:HIDDEN = FALSE.
      END.      
   END.
END PROCEDURE.
PROCEDURE rowlbrwmtrl_UI :
   RUN rowlbrwmtrl_UI IN huvprogh (INPUT "SMTRL").
END PROCEDURE.
PROCEDURE mlma_UI :
   APPLY "ENTRY" TO  listantalh.
END PROCEDURE.
PROCEDURE leavefill_UI :
   IF entrymtrlkab = TRUE THEN RUN llinkabt_UI.
   IF entrymtrlantalskap = TRUE THEN RUN llistant_UI.
END PROCEDURE.
PROCEDURE llinkabt_UI :
   IF AVAILABLE list_mtrl THEN DO:
      IF linkabh:SCREEN-VALUE = "JA" THEN list_mtrl.LINKAB = TRUE.
      ELSE list_mtrl.LINKAB = FALSE.      
   END.  
   entrymtrlkab = FALSE.
END PROCEDURE.
PROCEDURE elinkab_UI :
   entrymtrlkab = TRUE.
   RUN selectfoc_UI (INPUT 3). 
END PROCEDURE.

PROCEDURE llistant_UI :
   
   IF AVAILABLE list_mtrl THEN DO:    
      IF listantalh:SCREEN-VALUE = "?" OR listantalh:SCREEN-VALUE = ? THEN DO:
         MESSAGE "Felaktigt ifyllt!"
         VIEW-AS ALERT-BOX TITLE "Meddelande".                   
         RETURN NO-APPLY.
      END. 
      IF DECIMAL(listantalh:SCREEN-VALUE) > 99999 THEN DO:
         MESSAGE "Antalet är väldigt stort! " STRING(listantalh:SCREEN-VALUE) " Är det rätt? " VIEW-AS ALERT-BOX 
         QUESTION BUTTONS YES-NO UPDATE antval1 AS LOGICAL.       
         CASE antval1:
            WHEN TRUE THEN DO:
               antval1 = antval1.            
            END.
            WHEN FALSE THEN DO:
               RETURN NO-APPLY.
            END.   
         END CASE. 
      END.    
      RUN inkopkoll_UI (INPUT 6, OUTPUT musz, OUTPUT antalinkvar).
      IF musz = TRUE THEN DO:            
         musz = FALSE.
         IF DECIMAL(listantalh:SCREEN-VALUE) < antalinkvar THEN DO:
            MESSAGE "Ni kan inte andra antalet till lägre än " antalinkvar "! Den är inköpt via inköpsrutinen!"
            VIEW-AS ALERT-BOX TITLE "Meddelande". 
            listantalh:SCREEN-VALUE = STRING(antalinkvar).          
            RETURN NO-APPLY.
         END.   
      END.  
      list_mtrl.ANTAL = DECIMAL(listantalh:SCREEN-VALUE).  
           
   END.
   entrymtrlantalskap = FALSE.
END PROCEDURE.
PROCEDURE elistant_UI :
   
   IF listantalh:READ-ONLY = FALSE THEN entrymtrlantalskap = TRUE.
   RUN selectfoc_UI (INPUT 3). 
END PROCEDURE.
PROCEDURE mlinkab_UI :
  RUN listlinkab_UI.  
END PROCEDURE.

PROCEDURE vcbrwkab_UI :
  
  RUN selectfoc_UI (INPUT 2).
  IF NOT AVAILABLE kon_val THEN DO:
     RUN getfirst_UI IN brwproc[2].
  END.
  /*
  {NETTOMARK.I}
  */
  IF AVAILABLE kon_val THEN DO:
     RUN setlastrowid_UI IN brwproc[2] (INPUT ROWID(kon_val)).
     RUN lastselectdyn_UI IN brwproc[2].
     RUN setcolsortvar_UI IN brwproc[3] (INPUT " WHERE NUM = " + STRING(kon_val.NUM) + " AND SKAPNUM = " + STRING(kon_val.SKAPNUM)).
     RUN openbdynspec_UI IN brwproc[3].
     RUN title_UI IN brwproc[3].
     FIND FIRST fri_temp WHERE fri_temp.NUM = kon_val.NUM AND
     fri_temp.KABNR = kon_val.SKAPNUM NO-LOCK NO-ERROR.
     IF AVAILABLE fri_temp THEN DO:                     
        ASSIGN FILL-IN-ADRKABM:SCREEN-VALUE = fri_temp.KABADR + " " +  fri_temp.TYP.
        FILL-IN-ADRKABM:HIDDEN = TRUE.
     END.
     ELSE FILL-IN-ADRKABM:HIDDEN = TRUE.
  END.
END PROCEDURE.

PROCEDURE inkopkoll_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/      
   {INKOLLFINNS.I}      
END PROCEDURE.


PROCEDURE mdrwhlev_UI :
   RUN stolp_UI.
   /*
   {muswait.i}
   satsmtrl = TRUE.
   RUN SATSINNEU.W (INPUT ROWID(mtrltemp)).
   satsmtrl = FALSE.
   {musarrow.i}
   */
END PROCEDURE.
PROCEDURE alltbort_UI :
   RUN inkopkoll_UI (INPUT 1, OUTPUT musz, OUTPUT antalinkvar).
   IF musz = TRUE THEN DO:            
      MESSAGE "Ni kan inte ta bort materiel på denna konstruktion. Den är inköpt via inköpsrutinen!"
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      musz = FALSE.
      RETURN.
   END.
   {muswait.i}
   
   MESSAGE "Vill du ta bort allt materiel på denna konstruktion?"
   VIEW-AS ALERT-BOX
   QUESTION BUTTONS YES-NO TITLE "Meddelande" UPDATE mtrlbortvar AS LOGICAL.         
   IF mtrlbortvar THEN DO:
      FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
      list_mtrl.SKAPNUM = kon_val.SKAPNUM:
         DELETE list_mtrl.      
      END.   
      CREATE list_mtrl.
      ASSIGN
      list_mtrl.NUM = kon_val.NUM
      list_mtrl.SKAPNUM = kon_val.SKAPNUM
      list_mtrl.ENR = ""
      list_mtrl.BENAMNING = "Inget materiel"
      list_mtrl.ANTAL = 0
      list_mtrl.ENHET = ""
      list_mtrl.PRIS = 0                
      list_mtrl.LINKAB = FALSE.
      RUN refreshbrw_UI IN brwproc[3].
      RUN title_UI IN brwproc[3].
   END.
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnlev_UI :
   IF satsvar = FALSE THEN DO:
      FIND FIRST mtrltemp WHERE mtrltemp.LEVKOD = vald_lev NO-LOCK NO-ERROR.
      IF AVAILABLE mtrltemp THEN DO:  
         RUN dselectfoc_UI (INPUT 1).
      END.   
   END.
   ELSE DO:
      FIND FIRST satstemp WHERE satstemp.LEVKOD = vald_lev AND
      satstemp.SATS = TRUE NO-LOCK NO-ERROR.
      IF AVAILABLE satstemp THEN DO:  
         RUN dselectfoc_UI (INPUT 4).
      END.
   END.      
   
   ASSIGN
   BTN_LEV:HIDDEN = TRUE
   BRW_SATS:HIDDEN = TRUE
   BRW_SOKMTRLFSM:HIDDEN = TRUE
   CMB_LEV:HIDDEN = FALSE
   BRW_HLEV:HIDDEN = FALSE 
   CMB_LEV:SCREEN-VALUE = huvudlev
   vald_lev = vald_kundlev
   valet = FALSE
   satsvar = FALSE.
   IF satsvar = FALSE THEN DO:      
      levinlast = "".
      RUN levinlast_UI (INPUT vald_lev,OUTPUT levinlast).
      RUN setorgtitle_UI IN brwproc[1] (INPUT "Materiellista huvudleverantör " + huvudlev + levinlast).               
   END.
   RUN setcolsortvar_UI IN brwproc[1] (INPUT " WHERE KALKNR = " + STRING(0) + " AND LEVKOD = '" + STRING(vald_lev) + "'").
   RUN openbdynspec_UI IN brwproc[1].
   RUN vcradmtrl_UI.
   APPLY "ENTRY" TO FILL-IN-ENR .   
   IF RAD_MTRL:SCREEN-VALUE = "2" OR RAD_MTRL:SCREEN-VALUE = "3" THEN  APPLY "ENTRY" TO FILL-IN-ENRSTOLPSM.
END PROCEDURE.

PROCEDURE btnlinkab_UI :
   antal_valda = BRW_MTRL:NUM-SELECTED-ROWS .
   antal_raknare = 1.    
   DO WHILE antal_raknare LE antal_valda:   
      RUN fselectfoc_UI   (INPUT 3).
      IF AVAILABLE list_mtrl THEN DO:
         IF list_mtrl.LINKAB = FALSE THEN DO:
            musz = FALSE. 
            RUN TRUELINU2.W (INPUT ROWID(list_mtrl)).                                
         END.
         ELSE DO:
            ASSIGN
            list_mtrl.LINKAB = FALSE
            list_mtrl.DIAMETER = 0.  
         END.   
         mtrl_rowid = ROWID(list_mtrl).
      END.
      antal_raknare = antal_raknare + 1.   
   END.   
   RUN setlastrowid_UI IN brwproc[3] (INPUT mtrl_rowid).                  
   RUN refreshbrw_UI IN brwproc[3].
   RUN lastselectdyn_UI IN brwproc[3].
   RUN title_UI IN brwproc[3].
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnnoll_UI :
   {muswait.i}
   FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
   list_mtrl.SKAPNUM = kon_val.SKAPNUM:
      IF list_mtrl.LINKAB = FALSE THEN DO:
         IF list_mtrl.ANTAL = 0 THEN DELETE list_mtrl.
      END.
   END.   
   RUN refreshbrw_UI IN brwproc[3].
   RUN title_UI IN brwproc[3].
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnny_UI :
   {muswait.i}
   
   antal_valda = BRW_KAB:NUM-SELECTED-ROWS .
   IF antal_valda = 0 THEN DO:
      MESSAGE "Markera den kabel du vill lägga till materiel för."
      VIEW-AS ALERT-BOX.
   END.
   ELSE DO:
      kon_rowid = ROWID(kon_val).
      {AVBGOM2.I}      
      RUN KOPIMTRLU.W.      
      {AVBFRAM2.I}
      RUN setcolsortvar_UI IN brwproc[3] (INPUT " WHERE NUM = " + STRING(kon_val.NUM) + " AND SKAPNUM = " + STRING(kon_val.SKAPNUM)).
      RUN openbdynspec_UI IN brwproc[3].
      RUN title_UI IN brwproc[3].
      APPLY "ENTRY" TO BRW_MTRL .
   END.
   {musarrow.i}
END PROCEDURE.


PROCEDURE satsa_UI :
   satsmtrl = TRUE.

   ASSIGN
   antal_valda = BRW_HLEV:NUM-SELECTED-ROWS 
   antal_raknare = 1
   satsinn = FALSE.
   
   DO WHILE antal_raknare LE antal_valda:
      RUN fselectfoc_UI (INPUT 1).
      IF NOT AVAILABLE mtrltemp THEN RETURN.
      {muswait.i}
      RUN SATSINNEU.W (INPUT ROWID(mtrltemp)). 
      antal_raknare = antal_raknare + 1.  
   END. 
   IF satsinn = TRUE THEN DO:      
      RUN setcolsortvar_UI IN brwproc[1] (INPUT " WHERE NUM = " + STRING(kon_val.NUM) + " AND SKAPNUM = " + STRING(kon_val.SKAPNUM)).
      RUN openbdynspec_UI IN brwproc[1].
      RUN title_UI IN brwproc[1].
      satsinn = FALSE.
   END.   
   {musarrow.i}

END PROCEDURE.

PROCEDURE btnsats_UI :
   satsmtrl = FALSE.

   ASSIGN
   antal_valda = BRW_MTRL:NUM-SELECTED-ROWS 
   antal_raknare = 1
   satsinn = FALSE.
   DO WHILE antal_raknare LE antal_valda:
      RUN fselectfoc_UI   (INPUT 3).
      IF NOT AVAILABLE list_mtrl THEN RETURN.
      {muswait.i}
      RUN SATSINNEU.W (INPUT ROWID(list_mtrl)). 
      antal_raknare = antal_raknare + 1.  
   END. 
   IF satsinn = TRUE THEN DO:      
      RUN setcolsortvar_UI IN brwproc[3] (INPUT " WHERE NUM = " + STRING(kon_val.NUM) + " AND SKAPNUM = " + STRING(kon_val.SKAPNUM)).
      RUN openbdynspec_UI IN brwproc[3].
      RUN title_UI IN brwproc[3].
      satsinn = FALSE.
   END.   
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnspec_UI :
   {muswait.i}
   {AVBGOM2.I}
   kon_rowid = ROWID(kon_val).
   RUN BERSPECANV.W (INPUT 2).
   {AVBFRAM2.I}   
   RUN setcolsortvar_UI IN brwproc[3] (INPUT " WHERE NUM = " + STRING(kon_val.NUM) + " AND SKAPNUM = " + STRING(kon_val.SKAPNUM)).
   RUN openbdynspec_UI IN brwproc[3].
   FIND FIRST list_mtrl WHERE ROWID(list_mtrl) = mtrl_rowid NO-LOCK NO-ERROR.
   IF AVAILABLE list_mtrl THEN DO:
      RUN setlastrowid_UI IN brwproc[3] (INPUT ROWID(list_mtrl)).
      RUN lastselectdyn_UI IN brwproc[3].
   END.  
   RUN title_UI IN brwproc[3].
   {musarrow.i}
END PROCEDURE.

PROCEDURE infoES_UI :
   DEFINE INPUT  PARAMETER valenr AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER brwname AS CHARACTER NO-UNDO.
   DEFINE VARIABLE valbrw AS INTEGER NO-UNDO.  
   DEFINE VARIABLE levnamnvar AS CHARACTER NO-UNDO.
   /*
   ON 'MOUSE-MENU-CLICK' OF BRW_MTRL PERSISTENT RUN infoESin_UI IN THIS-PROCEDURE (INPUT 1).
ON 'MOUSE-MENU-CLICK' OF BRW_HLEV PERSISTENT RUN infoESin_UI IN THIS-PROCEDURE (INPUT 2).
ON 'MOUSE-MENU-CLICK' OF BRW_SATS PERSISTENT RUN infoESin_UI IN THIS-PROCEDURE (INPUT 3).
ON 'MOUSE-MENU-CLICK' OF BRW_STOLP PERSISTENT RUN infoESin_UI IN THIS-PROCEDURE (INPUT 4).
*/ 
   IF brwname = "BRW_MTRLSM" THEN valbrw = 1.  
   IF brwname = "BRW_HLEVSM" THEN valbrw = 2. 
   IF brwname = "BRW_SATSSM" THEN valbrw = 3. 
   IF brwname = "BRW_STOLPSM" THEN valbrw = 4.  
   IF valbrw = 1 THEN DO:   
      RUN selectfoc_UI (INPUT 3).
      valenr = list_mtrl.ENR.
      FIND FIRST levtemp WHERE levtemp.LEVKOD = list_mtrl.LEVKOD
      NO-LOCK NO-ERROR.      
   END.
   ELSE IF valbrw = 2 THEN DO:
      RUN selectfoc_UI (INPUT 1).
      IF NOT AVAILABLE mtrltemp THEN RETURN.
      valenr = mtrltemp.ENR.
      FIND FIRST levtemp WHERE levtemp.LEVKOD = mtrltemp.LEVKOD
      NO-LOCK NO-ERROR.      
   END.
   ELSE IF valbrw = 3 THEN DO:
      RUN selectfoc_UI (INPUT 4).
      IF NOT AVAILABLE satstemp THEN RETURN.
      valenr = satstemp.KOD.
      FIND FIRST levtemp WHERE levtemp.LEVKOD = satstemp.LEVKOD
      NO-LOCK NO-ERROR.      
   END.  
   IF status-ok THEN DO:   
      levnamnvar = levtemp.LEVNAMN.
      {LEVLANK.I}
   END.
  
END PROCEDURE.

PROCEDURE infoeskorej_UI :
   DEFINE INPUT  PARAMETER valenr AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER brwname AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER dynbrwph AS HANDLE NO-UNDO.  
   DEFINE VARIABLE levnamnvar AS CHARACTER NO-UNDO.
   DEFINE VARIABLE levkodvar AS CHARACTER NO-UNDO.
    
   RUN cellvalue_UI IN dynbrwph (INPUT "LEVKOD", OUTPUT levkodvar).
   FIND FIRST levtemp WHERE levtemp.LEVKOD = levkodvar
   NO-LOCK NO-ERROR.
   levnamnvar = levtemp.LEVNAMN. 
   /*
   IF levnamnvar = ? OR levnamnvar = "" THEN DO:
      IF brwname = "BRW_MTRL" OR brwname = "BRW_BESLEVMTRL" THEN RUN cellvalue_UI IN brwproc[15] (INPUT "LEVNAMN", OUTPUT levnamnvar). 
   END.
   */
   {LEVLANK.I}       
END PROCEDURE.

PROCEDURE initsok_UI :
   DEFINE INPUT  PARAMETER vad AS INTEGER    NO-UNDO.
   DEFINE INPUT PARAMETER sokpa AS CHARACTER NO-UNDO.
   DEFINE VARIABLE orgfraga AS CHARACTER NO-UNDO.
   
   IF RAD_MTRL:SCREEN-VALUE = "1" THEN DO:
      IF satsvar = FALSE THEN DO:
         IF vad = 1 THEN DO:
            orgfraga = " WHERE KALKNR = " + STRING(0) + " AND LEVKOD = '" + STRING(vald_lev) + "' USE-INDEX LEV".
            IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE KALKNR = " + STRING(0) + " USE-INDEX KALKNR".
            tth = TEMP-TABLE mtrltemp:HANDLE.
            EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
            CREATE valsoktemp.
            ASSIGN 
            valsoktemp.SOKCHAR[1] = "MTRL"     /*Skarp tabell*/
            valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
            valsoktemp.SOKCHAR[3] = "BENAMNING" /*sökfält*/
            valsoktemp.SOKCHAR[4] = "MTRLROW"  /*temptabells faltnamn för rowid*/
            valsoktemp.SOKCHAR[5] = sokpa.      /*sök på*/       
            RUN sokhmt_UI IN  brwproc[1] (INPUT TABLE valsoktemp).  
         END.
         IF vad = 2 THEN DO:
           orgfraga = " WHERE KALKNR = " + STRING(0) + " AND LEVKOD = '" + STRING(vald_lev) + "' USE-INDEX LEV".
           IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE KALKNR = " + STRING(0) + " USE-INDEX KALKNR".
           tth = TEMP-TABLE mtrltemp:HANDLE.
           EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
           CREATE valsoktemp.
           ASSIGN 
           valsoktemp.SOKCHAR[1] = "MTRL"     /*Skarp tabell*/
           valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
           valsoktemp.SOKCHAR[3] = "ENR" /*sökfält*/
           valsoktemp.SOKCHAR[4] = "MTRLROW"  /*temptabells faltnamn för rowid*/
           valsoktemp.SOKCHAR[5] = sokpa.      /*sök på*/       
           RUN sokhmt_UI IN  brwproc[1] (INPUT TABLE valsoktemp).  
        END.
      END.
      ELSE DO:
         IF vad = 1 THEN DO:
            orgfraga = " WHERE SATS = TRUE AND LEVKOD = '" + STRING(vald_lev) + "' USE-INDEX KOD ".
            IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE SATS = TRUE ".
            tth = TEMP-TABLE satstemp:HANDLE.
            EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
            CREATE valsoktemp.
            ASSIGN 
            valsoktemp.SOKCHAR[1] = "SATS"     /*Skarp tabell*/
            valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
            valsoktemp.SOKCHAR[3] = "BENAMNING" /*sökfält*/
            valsoktemp.SOKCHAR[4] = "SATSROW"  /*temptabells faltnamn för rowid*/
            valsoktemp.SOKCHAR[5] = sokpa.      /*sök på*/       
            RUN sokhmt_UI IN  brwproc[4] (INPUT TABLE valsoktemp).  
         END.
         IF vad = 2 THEN DO:
           orgfraga = " WHERE SATS = TRUE AND LEVKOD = '" + STRING(vald_lev) + "' USE-INDEX KOD ".
           IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE SATS = TRUE ".
           tth = TEMP-TABLE satstemp:HANDLE.
           EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
           CREATE valsoktemp.
           ASSIGN 
           valsoktemp.SOKCHAR[1] = "SATS"     /*Skarp tabell*/
           valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
           valsoktemp.SOKCHAR[3] = "KOD" /*sökfält*/
           valsoktemp.SOKCHAR[4] = "SATSROW"  /*temptabells faltnamn för rowid*/
           valsoktemp.SOKCHAR[5] = sokpa.      /*sök på*/       
           RUN sokhmt_UI IN  brwproc[4] (INPUT TABLE valsoktemp).  
        END.
      END.
   END.
   ELSE IF RAD_MTRL:SCREEN-VALUE = "2" THEN DO:
      IF vad = 1 THEN DO:
          orgfraga = " WHERE STOLPE = TRUE ".
          IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE STOLPE = TRUE ".
         /*orgfraga = " WHERE STOLPE = TRUE USE-INDEX STOLPE ".*/
         tth = TEMP-TABLE berstolptemp:HANDLE.
         EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
         CREATE valsoktemp.
         ASSIGN 
         valsoktemp.SOKCHAR[1] = "BERSTOLP"     /*Skarp tabell*/
         valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
         valsoktemp.SOKCHAR[3] = "BENAMNING"
         valsoktemp.SOKCHAR[4] = ""                 /*temptabells faltnamn för rowid*/
         valsoktemp.SOKCHAR[5] = sokpa.      /*temptabells unika sökfaltnamn om flera skriv "aonr,delnr"*/
         RUN sokhmt_UI IN brwproc[5] (INPUT TABLE valsoktemp). 
          /*måste öppnas två gånger om sorteringen ska funka*/     
         IF Guru.Konstanter:globnetprissortvar = 1 THEN RUN openbdynspec_UI IN brwproc[5].             
      END.
      IF vad = 2 THEN DO:
         orgfraga = " WHERE STOLPE = TRUE ".
         IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE STOLPE = TRUE ".
         /*orgfraga = " WHERE STOLPE = FALSE USE-INDEX STOLPE ".*/
         tth = TEMP-TABLE berstolptemp:HANDLE.
         EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
         CREATE valsoktemp.
         ASSIGN 
         valsoktemp.SOKCHAR[1] = "BERSTOLP"     /*Skarp tabell*/
         valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
         valsoktemp.SOKCHAR[3] = "ENR"
         valsoktemp.SOKCHAR[4] = ""                 /*temptabells faltnamn för rowid*/
         valsoktemp.SOKCHAR[5] = sokpa.      /*temptabells unika sökfaltnamn om flera skriv "aonr,delnr"*/
         RUN sokhmt_UI IN brwproc[5] (INPUT TABLE valsoktemp). 
          /*måste öppnas två gånger om sorteringen ska funka*/ 
         IF Guru.Konstanter:globnetprissortvar = 1 THEN RUN openbdynspec_UI IN brwproc[5].                 
      END.
   END.
   ELSE IF RAD_MTRL:SCREEN-VALUE = "3" THEN DO:
      IF vad = 1 THEN DO:
          orgfraga = " WHERE STOLPE = FALSE".
          IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE STOLPE = FALSE ".
         /*orgfraga = " WHERE STOLPE = TRUE USE-INDEX STOLPE ".*/
         tth = TEMP-TABLE berstolptemp:HANDLE.
         EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
         CREATE valsoktemp.
         ASSIGN 
         valsoktemp.SOKCHAR[1] = "BERSTOLP"     /*Skarp tabell*/
         valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
         valsoktemp.SOKCHAR[3] = "BENAMNING"
         valsoktemp.SOKCHAR[4] = ""                 /*temptabells faltnamn för rowid*/
         valsoktemp.SOKCHAR[5] = sokpa.      /*temptabells unika sökfaltnamn om flera skriv "aonr,delnr"*/
         RUN sokhmt_UI IN brwproc[5] (INPUT TABLE valsoktemp). 
          /*måste öppnas två gånger om sorteringen ska funka*/ 
         IF Guru.Konstanter:globnetprissortvar = 1 THEN RUN openbdynspec_UI IN brwproc[5].                 
      END.
      IF vad = 2 THEN DO:
         orgfraga = " WHERE STOLPE = FALSE ".
         IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE STOLPE = FALSE ".
         /*orgfraga = " WHERE STOLPE = FALSE USE-INDEX STOLPE ".*/
         tth = TEMP-TABLE berstolptemp:HANDLE.
         EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
         CREATE valsoktemp.
         ASSIGN 
         valsoktemp.SOKCHAR[1] = "BERSTOLP"     /*Skarp tabell*/
         valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
         valsoktemp.SOKCHAR[3] = "ENR"
         valsoktemp.SOKCHAR[4] = ""                 /*temptabells faltnamn för rowid*/
         valsoktemp.SOKCHAR[5] = sokpa.      /*temptabells unika sökfaltnamn om flera skriv "aonr,delnr"*/
         RUN sokhmt_UI IN brwproc[5] (INPUT TABLE valsoktemp). 
          /*måste öppnas två gånger om sorteringen ska funka*/  
         IF Guru.Konstanter:globnetprissortvar = 1 THEN RUN openbdynspec_UI IN brwproc[5].                
      END.
   END.
END PROCEDURE.

PROCEDURE listlinkab_UI :
   /* 
   
   linkabh:SCREEN-VALUE = linkabh:SCREEN-VALUE.
   RUN selectfoc_UI (INPUT 3). 
   linkabh:SCREEN-VALUE = linkabh:SCREEN-VALUE.
    */
   mtrl_rowid = ROWID(list_mtrl).                   
   IF linkabh:SCREEN-VALUE = "JA" THEN linkabh:SCREEN-VALUE = "NEJ".
   ELSE IF linkabh:SCREEN-VALUE = "NEJ" THEN linkabh:SCREEN-VALUE = "JA".              
   /*
   RUN setlastrowid_UI IN brwproc[3] (INPUT mtrl_rowid).                  
   RUN lastselectdyn_UI IN brwproc[3].               
   */
   linkabh:SCREEN-VALUE = linkabh:SCREEN-VALUE.
END PROCEDURE.

PROCEDURE sokben_UI :
   ASSIGN
   sok = FALSE
   sokannan = FALSE.
   IF FILL-IN-BEN:SCREEN-VALUE = "" THEN DO:
      MESSAGE "Sökbegreppet kan inte vara blankt." VIEW-AS ALERT-BOX.
      APPLY "ENTRY" TO FILL-IN-BEN .
      RETURN.
   END.
   stjarnvar = INDEX(FILL-IN-BEN:SCREEN-VALUE,"*",1).
   IF stjarnvar = 0 THEN DO:
      ASSIGN
      aosok = "*" + FILL-IN-BEN:SCREEN-VALUE + "*"
      begvar = FALSE.
   END.
   ELSE DO:
      IF SUBSTRING(FILL-IN-BEN:SCREEN-VALUE,1,1) = "*" THEN DO:
         stjarnvar = INDEX(FILL-IN-BEN:SCREEN-VALUE,"*",2).
         IF stjarnvar = 0 THEN DO:
            ASSIGN
            aosok = FILL-IN-BEN:SCREEN-VALUE
            begvar = FALSE.
         END.
         ELSE DO:
            MESSAGE "Ni kan endast använda en '*' i början eller slutet av en sökning"
            VIEW-AS ALERT-BOX TITLE "Meddelande".
            APPLY "ENTRY" TO FILL-IN-BEN .
            RETURN.
         END.
      END.  
      ELSE DO:
         soklangd = LENGTH(FILL-IN-BEN:SCREEN-VALUE).
         IF SUBSTRING(FILL-IN-BEN:SCREEN-VALUE,soklangd,1) = "*" THEN DO:
            stjarnvar = INDEX(FILL-IN-BEN:SCREEN-VALUE,"*",1).
            IF stjarnvar = soklangd THEN DO:
               ASSIGN
               aosok = SUBSTRING(FILL-IN-BEN:SCREEN-VALUE,1,soklangd - 1)
               begvar = TRUE.
            END.
            ELSE DO:
               MESSAGE "Ni kan endast använda en '*' i början eller slutet av en sökning"
               VIEW-AS ALERT-BOX TITLE "Meddelande".
               APPLY "ENTRY" TO FILL-IN-BEN .
               RETURN.
            END.
         END.
         ELSE DO:
            ASSIGN
            aosok = "*" + FILL-IN-BEN:SCREEN-VALUE + "*"
            begvar = FALSE.
         END.
      END.    
   END.   
   IF satsvar = FALSE THEN DO:
      IF AVAILABLE mtrltemp THEN mtrl_rowid = ROWID(mtrltemp).           
      RUN dselectfoc_UI (INPUT 1).
      FIND mtrltemp WHERE ROWID(mtrltemp) = mtrl_rowid NO-LOCK NO-ERROR.
      IF begvar = FALSE THEN
      FIND NEXT mtrltemp WHERE mtrltemp.BENAMNING MATCHES aosok AND mtrltemp.LEVKOD = vald_lev
      AND mtrltemp.KALKNR = 0 USE-INDEX BEN NO-LOCK NO-ERROR.
      ELSE 
      FIND NEXT mtrltemp WHERE mtrltemp.BENAMNING BEGINS aosok AND mtrltemp.LEVKOD = vald_lev
      AND mtrltemp.KALKNR = 0 USE-INDEX BEN NO-LOCK NO-ERROR.
      IF NOT AVAILABLE mtrltemp THEN DO:
         IF begvar = FALSE THEN      
         FIND FIRST mtrltemp WHERE mtrltemp.BENAMNING MATCHES aosok AND mtrltemp.LEVKOD = vald_lev
         AND mtrltemp.KALKNR = 0 USE-INDEX BEN NO-LOCK NO-ERROR.
         ELSE    
         FIND FIRST mtrltemp WHERE mtrltemp.BENAMNING BEGINS aosok AND mtrltemp.LEVKOD = vald_lev
         AND mtrltemp.KALKNR = 0 USE-INDEX BEN NO-LOCK NO-ERROR.
         IF NOT AVAILABLE mtrltemp THEN DO:
            IF globforetag = "ELPA" {GLOBVES.I} THEN DO:
               IF vald_lev = "1" THEN DO:
                  sokannan = TRUE.
               END.
               ELSE DO:                  
                  MESSAGE "Det finns inget på sökbegreppet."
                  VIEW-AS ALERT-BOX
                  TITLE "Meddelande".                  
                  APPLY "ENTRY" TO FILL-IN-BEN .
                  RETURN NO-APPLY.         
               END.
            END.
            ELSE DO:                           
               MESSAGE "Det finns inget på sökbegreppet."
               VIEW-AS ALERT-BOX TITLE "Sökning".                         
               APPLY "ENTRY" TO FILL-IN-BEN .
               RETURN.
            END.
         END.
      END.     
      IF AVAILABLE mtrltemp AND sok = FALSE THEN DO:      
         RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(mtrltemp)).
         RUN lastselectdyn_UI IN brwproc[1].
      END.             
   END.
   ELSE DO:
      IF AVAILABLE satstemp THEN mtrl_rowid = ROWID(satstemp).  
      RUN dselectfoc_UI (INPUT 4).
      FIND satstemp WHERE ROWID(satstemp) = mtrl_rowid NO-LOCK NO-ERROR.
      IF begvar = FALSE THEN
      FIND NEXT satstemp WHERE satstemp.BENAMNING MATCHES aosok AND satstemp.LEVKOD = vald_lev
      AND satstemp.SATS = TRUE USE-INDEX KOD NO-LOCK NO-ERROR. 
      ELSE
      FIND NEXT satstemp WHERE satstemp.BENAMNING BEGINS aosok AND satstemp.LEVKOD = vald_lev
      AND satstemp.SATS = TRUE USE-INDEX KOD NO-LOCK NO-ERROR.
      IF NOT AVAILABLE satstemp THEN DO:  
         IF begvar = FALSE THEN
         FIND FIRST satstemp WHERE satstemp.BENAMNING MATCHES aosok AND satstemp.LEVKOD = vald_lev
         AND satstemp.SATS = TRUE USE-INDEX KOD NO-LOCK NO-ERROR.   
         ELSE
         FIND FIRST satstemp WHERE satstemp.BENAMNING BEGINS aosok AND satstemp.LEVKOD = vald_lev
         AND satstemp.SATS = TRUE USE-INDEX KOD NO-LOCK NO-ERROR.
         IF NOT AVAILABLE satstemp THEN DO:
            MESSAGE "Det finns ingen på sökbegreppet."
            VIEW-AS ALERT-BOX
            TITLE "Sökning".                       
            APPLY "ENTRY" TO FILL-IN-BEN .
            RETURN.                          
         END.
      END.              
      IF AVAILABLE satstemp THEN DO:               
         RUN setlastrowid_UI IN brwproc[4] (INPUT ROWID(satstemp)).
         RUN lastselectdyn_UI IN brwproc[4].         
      END.
   END.   
END PROCEDURE.

PROCEDURE sokenr_UI :
   ASSIGN
   sok = FALSE  
   sokannan = FALSE.
   IF FILL-IN-ENR:SCREEN-VALUE = "" THEN DO:
      MESSAGE "Sökbegreppet kan inte vara blankt." VIEW-AS ALERT-BOX.
      APPLY "ENTRY" TO FILL-IN-ENR .
      RETURN NO-APPLY.
   END.
   stjarnvar = INDEX(FILL-IN-ENR:SCREEN-VALUE,"*",1).
   IF stjarnvar = 0 THEN DO:
      ASSIGN
      posok = "*" + FILL-IN-ENR:SCREEN-VALUE + "*"
      begvar = FALSE.
   END.
   ELSE DO:
      IF SUBSTRING(FILL-IN-ENR:SCREEN-VALUE,1,1) = "*" THEN DO:
         stjarnvar = INDEX(FILL-IN-ENR:SCREEN-VALUE,"*",2).
         IF stjarnvar = 0 THEN DO:
            ASSIGN
            posok = FILL-IN-ENR:SCREEN-VALUE
            begvar = FALSE.
         END.
         ELSE DO:
            MESSAGE "Ni kan endast använda en '*' i början eller slutet av en sökning"
            VIEW-AS ALERT-BOX TITLE "Meddelande".
            APPLY "ENTRY" TO FILL-IN-ENR .
            RETURN NO-APPLY.
         END.
      END.  
      ELSE DO:
         soklangd = LENGTH(FILL-IN-ENR:SCREEN-VALUE).
         IF SUBSTRING(FILL-IN-ENR:SCREEN-VALUE,soklangd,1) = "*" THEN DO:
            stjarnvar = INDEX(FILL-IN-ENR:SCREEN-VALUE,"*",1).
            IF stjarnvar = soklangd THEN DO:
               ASSIGN
               posok = SUBSTRING(FILL-IN-ENR:SCREEN-VALUE,1,soklangd - 1)
               begvar = TRUE.
            END.
            ELSE DO:
               MESSAGE "Ni kan endast använda en '*' i början eller slutet av en sökning"
               VIEW-AS ALERT-BOX TITLE "Meddelande".
               APPLY "ENTRY" TO FILL-IN-ENR .
               RETURN NO-APPLY.
            END.
         END.
         ELSE DO:
            ASSIGN
            posok = "*" + FILL-IN-ENR:SCREEN-VALUE + "*"
            begvar = FALSE.
         END.
      END.    
   END.
   
   IF AVAILABLE mtrltemp THEN mtrl_rowid = ROWID(mtrltemp).               
   RUN dselectfoc_UI (INPUT 1).
   FIND mtrltemp WHERE ROWID(mtrltemp) = mtrl_rowid NO-LOCK NO-ERROR.
   IF begvar = FALSE THEN
   FIND NEXT mtrltemp WHERE mtrltemp.ENR MATCHES posok AND mtrltemp.LEVKOD = vald_lev
   AND mtrltemp.KALKNR = 0 USE-INDEX LEV NO-LOCK NO-ERROR. 
   ELSE
   FIND NEXT mtrltemp WHERE mtrltemp.ENR BEGINS posok AND mtrltemp.LEVKOD = vald_lev
   AND mtrltemp.KALKNR = 0 USE-INDEX LEV NO-LOCK NO-ERROR.
   IF NOT AVAILABLE mtrltemp THEN DO:  
      IF begvar = FALSE THEN    
      FIND FIRST mtrltemp WHERE mtrltemp.ENR MATCHES posok AND mtrltemp.LEVKOD = vald_lev
      AND mtrltemp.KALKNR = 0 USE-INDEX LEV NO-LOCK NO-ERROR.   
      ELSE
      FIND FIRST mtrltemp WHERE mtrltemp.ENR BEGINS posok AND mtrltemp.LEVKOD = vald_lev
      AND mtrltemp.KALKNR = 0 USE-INDEX LEV NO-LOCK NO-ERROR.
      IF NOT AVAILABLE mtrltemp THEN DO:
         IF globforetag = "ELPA" {GLOBVES.I} THEN DO:
            IF vald_lev = "1" THEN DO:
               sokannan = TRUE.
            END.
            ELSE DO:                  
               MESSAGE "Det finns inget på sökbegreppet."
               VIEW-AS ALERT-BOX
               TITLE "Meddelande".                  
               APPLY "ENTRY" TO FILL-IN-ENR .
               RETURN NO-APPLY.         
            END.
         END.
         ELSE DO:                           
            MESSAGE "Det finns inget på sökbegreppet."
            VIEW-AS ALERT-BOX
            TITLE "Meddelande".                  
            APPLY "ENTRY" TO FILL-IN-ENR .
            RETURN NO-APPLY.         
         END.
      END.
   END.              
   IF AVAILABLE mtrltemp AND sok = FALSE THEN DO:               
      RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(mtrltemp)).
      RUN lastselectdyn_UI IN brwproc[1].               
   END.      
END PROCEDURE.

PROCEDURE soksats_UI :
   ASSIGN
   sok = FALSE.  
   IF FILL-IN-KOD:SCREEN-VALUE = "" THEN DO:
      MESSAGE "Sökbegreppet kan inte vara blankt." VIEW-AS ALERT-BOX.
      APPLY "ENTRY" TO FILL-IN-KOD .
      RETURN.
   END.
   stjarnvar = INDEX(FILL-IN-KOD:SCREEN-VALUE,"*",1).
   IF stjarnvar = 0 THEN DO:
      ASSIGN
      posok = "*" + FILL-IN-KOD:SCREEN-VALUE + "*"
      begvar = FALSE.
   END.
   ELSE DO:
      IF SUBSTRING(FILL-IN-KOD:SCREEN-VALUE,1,1) = "*" THEN DO:
         stjarnvar = INDEX(FILL-IN-KOD:SCREEN-VALUE,"*",2).
         IF stjarnvar = 0 THEN DO:
            ASSIGN
            posok = FILL-IN-KOD:SCREEN-VALUE
            begvar = FALSE.
         END.
         ELSE DO:
            MESSAGE "Ni kan endast använda en '*' i början eller slutet av en sökning"
            VIEW-AS ALERT-BOX TITLE "Meddelande".
            APPLY "ENTRY" TO FILL-IN-KOD .
            RETURN.
         END.
      END.  
      ELSE DO:
         soklangd = LENGTH(FILL-IN-KOD:SCREEN-VALUE).
         IF SUBSTRING(FILL-IN-KOD:SCREEN-VALUE,soklangd,1) = "*" THEN DO:
            stjarnvar = INDEX(FILL-IN-KOD:SCREEN-VALUE,"*",1).
            IF stjarnvar = soklangd THEN DO:
               ASSIGN
               posok = SUBSTRING(FILL-IN-KOD:SCREEN-VALUE,1,soklangd - 1)
               begvar = TRUE.
            END.
            ELSE DO:
               MESSAGE "Ni kan endast använda en '*' i början eller slutet av en sökning"
               VIEW-AS ALERT-BOX TITLE "Meddelande".
               APPLY "ENTRY" TO FILL-IN-KOD .
               RETURN.
            END.
         END.
         ELSE DO:
            ASSIGN
            posok = "*" + FILL-IN-KOD:SCREEN-VALUE + "*"
            begvar = FALSE.
         END.
      END.    
   END.
  
   IF AVAILABLE satstemp THEN mtrl_rowid = ROWID(satstemp).
   RUN dselectfoc_UI (INPUT 4).
   FIND satstemp WHERE ROWID(satstemp) = mtrl_rowid NO-LOCK NO-ERROR.
   IF begvar = FALSE THEN
   FIND NEXT satstemp WHERE satstemp.KOD MATCHES posok AND satstemp.LEVKOD = vald_lev
   AND satstemp.SATS = TRUE USE-INDEX KOD NO-LOCK NO-ERROR. 
   ELSE
   FIND NEXT satstemp WHERE satstemp.KOD BEGINS posok AND satstemp.LEVKOD = vald_lev
   AND satstemp.SATS = TRUE USE-INDEX KOD NO-LOCK NO-ERROR.
   IF NOT AVAILABLE satstemp THEN DO:
      IF begvar = FALSE THEN
      FIND FIRST satstemp WHERE satstemp.KOD MATCHES posok AND satstemp.LEVKOD = vald_lev
      AND satstemp.SATS = TRUE USE-INDEX KOD NO-LOCK NO-ERROR. 
      ELSE
      FIND FIRST satstemp WHERE satstemp.KOD BEGINS posok AND satstemp.LEVKOD = vald_lev
      AND satstemp.SATS = TRUE USE-INDEX KOD NO-LOCK NO-ERROR.
      IF NOT AVAILABLE satstemp THEN DO:
         MESSAGE "Det finns ingen på sökbegreppet."
         VIEW-AS ALERT-BOX
         TITLE "Sökning".                       
         APPLY "ENTRY" TO FILL-IN-KOD .
         RETURN NO-APPLY.                          
      END.
   END.              
   IF AVAILABLE satstemp THEN DO:                     
      RUN setlastrowid_UI IN brwproc[4] (INPUT ROWID(satstemp)).
      RUN lastselectdyn_UI IN brwproc[4].               
   END.
END PROCEDURE.

PROCEDURE levinlast_UI :
   DEFINE INPUT PARAMETER lekod AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER levinlast AS CHARACTER NO-UNDO.   
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "INLKAT"                   
   inextradatatemp.HUVUDCH = lekod.                                              
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:
      IF extradatatemp.SOKDATE[1] NE ? THEN levinlast = " Inläst " + STRING(extradatatemp.SOKDATE[1]).
      IF extradatatemp.SOKDATE[2] NE ? AND extradatatemp.SOKDATE[3] NE ?  THEN DO:      
         RUN tooltip_UI IN brwproc[1] (INPUT "Katalogen gäller från: " + STRING(extradatatemp.SOKDATE[2]) + " till: " + STRING(extradatatemp.SOKDATE[3])).          
      END.
      ELSE RUN tooltip_UI IN brwproc[1] (INPUT "").             
   END.   
   ELSE RUN tooltip_UI IN brwproc[1] (INPUT "").             
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
END PROCEDURE.


PROCEDURE stolp_UI :
   {muswait.i}
   antal_valda = BRW_KAB:NUM-SELECTED-ROWS .
   IF antal_valda = 0 THEN DO:
      MESSAGE "Markera den kabel du vill lägga till materiel för." 
      VIEW-AS ALERT-BOX.
      RETURN.
   END.
   ELSE DO:
      RUN selectfoc_UI (INPUT 2).
      kon_rowid = ROWID(kon_val).
   END.
   IF RAD_MTRL:SCREEN-VALUE = "1" OR RAD_MTRL:SCREEN-VALUE = "4" THEN DO: 
      
      IF BRW_SOKMTRLFSM:HIDDEN = FALSE THEN DO:
         ASSIGN
         antal_valda = BRW_SOKMTRLFSM:NUM-SELECTED-ROWS
         antal_raknare = 1.
         DO WHILE antal_raknare LE antal_valda:  
            RUN fselectfoc_UI   (INPUT 6).
            /*Niklas personlig spec_mtrl*/
            IF AVAILABLE soktamtrlfavo THEN DO:
           
               FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
               list_mtrl.SKAPNUM = kon_val.SKAPNUM AND list_mtrl.ENR = soktamtrlfavo.ENR AND 
               list_mtrl.LEVKOD = soktamtrlfavo.LEVKOD
               EXCLUSIVE-LOCK NO-ERROR.
                     
               IF AVAILABLE list_mtrl THEN DO:
                  ASSIGN
                  mtrl_rowid = ROWID(list_mtrl).            
               END.
               ELSE DO:
                  CREATE list_mtrl.
                  ASSIGN
                  list_mtrl.NUM = kon_val.NUM
                  list_mtrl.ENR = soktamtrlfavo.ENR
                  list_mtrl.BENAMNING = soktamtrlfavo.BENAMNING
                  list_mtrl.ANTAL = 1
                  list_mtrl.ENHET = LC(soktamtrlfavo.ENHET)
                  list_mtrl.PRIS = soktamtrlfavo.NPRIS            
                  list_mtrl.LINKAB = FALSE
                  list_mtrl.SKAPNUM = kon_val.SKAPNUM
                  mtrl_rowid = ROWID(list_mtrl).
                  /*Niklas personlig spec_mtrl*/
                  list_mtrl.LEVKOD = soktamtrlfavo.LEVKOD.
                  FIND FIRST satstemp WHERE satstemp.SATS = TRUE AND satstemp.KOD = list_mtrl.ENR AND
                  satstemp.LEVKOD = list_mtrl.LEVKOD USE-INDEX KOD NO-LOCK NO-ERROR.
                  IF AVAILABLE satstemp THEN list_mtrl.SATS = TRUE.
                  ELSE list_mtrl.SATS = FALSE.
                  IF Guru.Konstanter:varforetypval[29] = 1  THEN DO:                 
                     /*nettopris beredning inköp*/
                     FIND FIRST kmtrltemp WHERE kmtrltemp.LEVKOD = soktamtrlfavo.LEVKOD AND kmtrltemp.ENR = soktamtrlfavo.ENR AND kmtrltemp.KALKNR = 0
                     NO-LOCK NO-ERROR.
                     IF NOT AVAILABLE kmtrltemp THEN DO:                        
                        CREATE kmtrltemp.
                        BUFFER-COPY soktamtrlfavo TO kmtrltemp.                  
                     END.
                     IF Guru.Konstanter:varforetypval[37] NE 0 THEN DO:
                        EMPTY TEMP-TABLE ekmtrltemp NO-ERROR. 
                        CREATE ekmtrltemp.
                        BUFFER-COPY kmtrltemp TO ekmtrltemp.
                        RUN kommentar_UI IN nettoh (INPUT-OUTPUT TABLE ekmtrltemp).            
                        FIND FIRST ekmtrltemp NO-LOCK NO-ERROR.
                        FIND FIRST kmtrltemp WHERE kmtrltemp.LEVKOD = soktamtrlfavo.LEVKOD AND kmtrltemp.ENR = soktamtrlfavo.ENR AND kmtrltemp.KALKNR = 0 NO-ERROR.
                        BUFFER-COPY ekmtrltemp TO kmtrltemp.
                     END.
                  END.
               END.      
            END.
            antal_raknare = antal_raknare + 1.                                 
         END. 
         
         RUN setcolsortvar_UI IN brwproc[3] (INPUT " WHERE NUM = " + STRING(kon_val.NUM) + " AND SKAPNUM = " + STRING(kon_val.SKAPNUM)).
         RUN openbdynspec_UI IN brwproc[3].
         FIND FIRST list_mtrl WHERE ROWID(list_mtrl) = mtrl_rowid NO-LOCK NO-ERROR.
         IF AVAILABLE list_mtrl THEN DO:
            RUN setlastrowid_UI IN brwproc[3] (INPUT ROWID(list_mtrl)).
            RUN lastselectdyn_UI IN brwproc[3].
         END.     
         RUN title_UI IN brwproc[3].
      END.    
                 
      ELSE IF satsvar = FALSE THEN DO:
         ASSIGN
         antal_valda = BRW_HLEV:NUM-SELECTED-ROWS
         antal_raknare = 1.
         DO WHILE antal_raknare LE antal_valda:  
            RUN fselectfoc_UI   (INPUT 1).
            /*Niklas personlig spec_mtrl*/
            IF AVAILABLE mtrltemp THEN DO:
               IF mtrltemp.LEVKOD BEGINS "99" THEN DO:        
                  FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
                  list_mtrl.SKAPNUM = kon_val.SKAPNUM AND list_mtrl.ENR = mtrltemp.ENR AND 
                  list_mtrl.LEVKOD = "99"
                  EXCLUSIVE-LOCK NO-ERROR.
               END.
               ELSE DO:
                  FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
                  list_mtrl.SKAPNUM = kon_val.SKAPNUM AND list_mtrl.ENR = mtrltemp.ENR AND 
                  list_mtrl.LEVKOD = mtrltemp.LEVKOD
                  EXCLUSIVE-LOCK NO-ERROR.
               END.          
               IF AVAILABLE list_mtrl THEN DO:
                  ASSIGN
                  mtrl_rowid = ROWID(list_mtrl).            
               END.
               ELSE DO:
                  CREATE list_mtrl.
                  ASSIGN
                  list_mtrl.NUM = kon_val.NUM
                  list_mtrl.ENR = mtrltemp.ENR
                  list_mtrl.BENAMNING = mtrltemp.BENAMNING
                  list_mtrl.ANTAL = 1
                  list_mtrl.ENHET = LC(mtrltemp.ENHET)
                  list_mtrl.PRIS = mtrltemp.NPRIS            
                  list_mtrl.LINKAB = FALSE
                  list_mtrl.SKAPNUM = kon_val.SKAPNUM
                  mtrl_rowid = ROWID(list_mtrl).
                  /*Niklas personlig spec_mtrl*/
                  IF mtrltemp.LEVKOD BEGINS "99" THEN list_mtrl.LEVKOD = "99".           
                  ELSE list_mtrl.LEVKOD = mtrltemp.LEVKOD.
                  FIND FIRST satstemp WHERE satstemp.SATS = TRUE AND satstemp.KOD = list_mtrl.ENR AND
                  satstemp.LEVKOD = list_mtrl.LEVKOD USE-INDEX KOD NO-LOCK NO-ERROR.
                  IF AVAILABLE satstemp THEN list_mtrl.SATS = TRUE.
                  ELSE list_mtrl.SATS = FALSE.
                  /*IF globforetag = "ELPA" {GLOBVES.I} THEN DO:
                     IF list_mtrl.LEVKOD = "11" THEN DO:
                        FIND FIRST satstemp WHERE satstemp.SATS = TRUE AND satstemp.KOD = list_mtrl.ENR AND
                        satstemp.LEVKOD = "1" USE-INDEX KOD NO-LOCK NO-ERROR.
                     END.
                     ELSE DO:
                        FIND FIRST satstemp WHERE satstemp.SATS = TRUE AND satstemp.KOD = list_mtrl.ENR AND
                        satstemp.LEVKOD = list_mtrl.LEVKOD USE-INDEX KOD NO-LOCK NO-ERROR.
                     END.                  
                     IF AVAILABLE satstemp THEN list_mtrl.SATS = TRUE.
                     ELSE list_mtrl.SATS = FALSE.
                  END.
                  ELSE DO:
                     FIND FIRST satstemp WHERE satstemp.SATS = TRUE AND satstemp.KOD = list_mtrl.ENR AND
                     satstemp.LEVKOD = list_mtrl.LEVKOD USE-INDEX KOD NO-LOCK NO-ERROR.
                     IF AVAILABLE satstemp THEN list_mtrl.SATS = TRUE.
                     ELSE list_mtrl.SATS = FALSE.
                  END.*/
                  IF Guru.Konstanter:varforetypval[29] = 1  THEN DO:                 
                     /*nettopris beredning inköp*/
                     FIND FIRST kmtrltemp WHERE kmtrltemp.LEVKOD = mtrltemp.LEVKOD AND kmtrltemp.ENR = mtrltemp.ENR AND kmtrltemp.KALKNR = 0
                     NO-LOCK NO-ERROR.
                     IF NOT AVAILABLE kmtrltemp THEN DO:                        
                        CREATE kmtrltemp.
                        BUFFER-COPY mtrltemp TO kmtrltemp.                  
                     END.
                     IF Guru.Konstanter:varforetypval[37] NE 0 THEN DO:
                        EMPTY TEMP-TABLE ekmtrltemp NO-ERROR. 
                        CREATE ekmtrltemp.
                        BUFFER-COPY kmtrltemp TO ekmtrltemp.
                        RUN kommentar_UI IN nettoh (INPUT-OUTPUT TABLE ekmtrltemp).            
                        FIND FIRST ekmtrltemp NO-LOCK NO-ERROR.
                        FIND FIRST kmtrltemp WHERE kmtrltemp.LEVKOD = mtrltemp.LEVKOD AND kmtrltemp.ENR = mtrltemp.ENR AND kmtrltemp.KALKNR = 0 NO-ERROR.
                        BUFFER-COPY ekmtrltemp TO kmtrltemp.
                     END.
                  END.
               END.      
            END.
            antal_raknare = antal_raknare + 1.                                 
         END. 
         
         RUN setcolsortvar_UI IN brwproc[3] (INPUT " WHERE NUM = " + STRING(kon_val.NUM) + " AND SKAPNUM = " + STRING(kon_val.SKAPNUM)).
         RUN openbdynspec_UI IN brwproc[3].
         FIND FIRST list_mtrl WHERE ROWID(list_mtrl) = mtrl_rowid NO-LOCK NO-ERROR.
         IF AVAILABLE list_mtrl THEN DO:
            RUN setlastrowid_UI IN brwproc[3] (INPUT ROWID(list_mtrl)).
            RUN lastselectdyn_UI IN brwproc[3].
         END.     
         RUN title_UI IN brwproc[3].
      END.
      ELSE DO:
         ASSIGN
         antal_valda = BRW_SATS:NUM-SELECTED-ROWS
         antal_raknare = 1.
         DO WHILE antal_raknare LE antal_valda:                                   
            RUN fselectfoc_UI   (INPUT 4).
            IF AVAILABLE kon_val THEN DO:
               FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
               list_mtrl.SKAPNUM = kon_val.SKAPNUM AND list_mtrl.ENR = satstemp.ENR AND 
               list_mtrl.LEVKOD = satstemp.LEVKOD
               EXCLUSIVE-LOCK NO-ERROR.
               IF AVAILABLE list_mtrl THEN DO:
                  ASSIGN
                  mtrl_rowid = ROWID(list_mtrl).            
               END.
               ELSE DO:
                  CREATE list_mtrl.
                  ASSIGN
                  list_mtrl.NUM = kon_val.NUM
                  list_mtrl.ENR = satstemp.ENR
                  list_mtrl.BENAMNING = satstemp.BENAMNING
                  list_mtrl.ANTAL = 1
                  list_mtrl.ENHET = LC(satstemp.ENHET)
                  list_mtrl.PRIS = satstemp.PRIS 
                  list_mtrl.LEVKOD = satstemp.LEVKOD           
                  list_mtrl.LINKAB = FALSE
                  list_mtrl.SATS = TRUE
                  list_mtrl.SKAPNUM = kon_val.SKAPNUM
                  mtrl_rowid = ROWID(list_mtrl).
               END.      
            END.
            antal_raknare = antal_raknare + 1.                                 
         END.      
         RUN setcolsortvar_UI IN brwproc[3] (INPUT " WHERE NUM = " + STRING(kon_val.NUM) + " AND SKAPNUM = " + STRING(kon_val.SKAPNUM)).
         RUN openbdynspec_UI IN brwproc[3].
         FIND FIRST list_mtrl WHERE ROWID(list_mtrl) = mtrl_rowid NO-LOCK NO-ERROR.
         IF AVAILABLE list_mtrl THEN DO:
            RUN setlastrowid_UI IN brwproc[3] (INPUT ROWID(list_mtrl)).
            RUN lastselectdyn_UI IN brwproc[3].
           
         END.
         RUN title_UI IN brwproc[3].
      END.   
   END.
   
   ELSE DO:
      /*TRAFO + STOLP*/
      ASSIGN
      antal_valda = BRW_STOLP:NUM-SELECTED-ROWS
      antal_raknare = 1.
      DO WHILE antal_raknare LE antal_valda:                                   
         RUN fselectfoc_UI   (INPUT 5).
         IF AVAILABLE kon_val THEN DO:
            FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
            list_mtrl.ENR = berstolptemp.ENR EXCLUSIVE-LOCK NO-ERROR.
            IF AVAILABLE list_mtrl THEN DO:
               ASSIGN
               mtrl_rowid = ROWID(list_mtrl)
               list_mtrl.ANTAL = list_mtrl.ANTAL + 1.
            END.
            ELSE DO:
               CREATE list_mtrl.
               ASSIGN
               list_mtrl.NUM = kon_val.NUM
               list_mtrl.ENR = berstolptemp.ENR
               list_mtrl.BENAMNING = berstolptemp.BENAMNING
               list_mtrl.ANTAL = 1
               list_mtrl.ENHET = LC(berstolptemp.ENHET)
               list_mtrl.PRIS = berstolptemp.PRIS 
               list_mtrl.LEVKOD = berstolptemp.LEVKOD           
               list_mtrl.LINKAB = FALSE
               list_mtrl.SKAPNUM = kon_val.SKAPNUM
               mtrl_rowid = ROWID(list_mtrl).
            END.      
         END.
         antal_raknare = antal_raknare + 1.                                 
      END.         
      RUN setcolsortvar_UI IN brwproc[3] (INPUT " WHERE NUM = " + STRING(kon_val.NUM) + " AND SKAPNUM = " + STRING(kon_val.SKAPNUM)).
      RUN openbdynspec_UI IN brwproc[3].      
      FIND FIRST list_mtrl WHERE ROWID(list_mtrl) = mtrl_rowid NO-LOCK NO-ERROR.
      IF AVAILABLE list_mtrl THEN DO:
         RUN setlastrowid_UI IN brwproc[3] (INPUT ROWID(list_mtrl)).
         RUN lastselectdyn_UI IN brwproc[3].        
        
      END.     
      RUN title_UI IN brwproc[3].
   END.
   APPLY "ENTRY" TO  listantalh.
   {musarrow.i}
END PROCEDURE.

PROCEDURE vcradmtrl_UI :
   ASSIGN
   BTN_KUNDLISTASM:HIDDEN = TRUE
   FILL-IN-ENRSTOLPSM:HIDDEN = TRUE
   FILL-IN-BENSTOLPSM:HIDDEN = TRUE
   FILL-IN-ENR:HIDDEN = TRUE
   FILL-IN-BEN:HIDDEN = TRUE
   RAD_SOK:HIDDEN = TRUE
   FILL-IN-KOD:HIDDEN = TRUE.
   {muswait.i}
   IF RAD_MTRL:SCREEN-VALUE = "1" THEN DO:
      EMPTY TEMP-TABLE mtrltemp NO-ERROR.
      IF satsvar = FALSE THEN DO:
         IF vald_lev = vald_kundlev THEN DO:
            ASSIGN
            BRW_STOLP:HIDDEN  = TRUE
            BRW_HLEV:HIDDEN  = FALSE
            CMB_LEV:HIDDEN  = FALSE
            BRW_SATS:HIDDEN  = TRUE
            BRW_SOKMTRLFSM:HIDDEN = TRUE
            BTN_LEV:HIDDEN  = TRUE      
            FILL-IN-KOD:HIDDEN  = TRUE
            FILL-IN-BEN:HIDDEN = FALSE
            FILL-IN-ENR:HIDDEN  = FALSE
            RAD_SOK:HIDDEN = FALSE.
         END.
         ELSE DO:
            ASSIGN
            BRW_STOLP:HIDDEN  = TRUE
            BRW_HLEV:HIDDEN  = FALSE
            CMB_LEV:HIDDEN  = TRUE
            BRW_SATS:HIDDEN  = TRUE
            BRW_SOKMTRLFSM:HIDDEN = TRUE
            BTN_LEV:HIDDEN  = FALSE      
            FILL-IN-BEN:HIDDEN = FALSE
            FILL-IN-ENR:HIDDEN  = FALSE
            RAD_SOK:HIDDEN = FALSE.
         END.
         IF vald_lev BEGINS "99" THEN DO:        
            RUN initsok_UI (INPUT 2,INPUT "").
         END.
         IF Guru.GlobalaVariabler:LastEnr NE "" THEN DO:
            FIND FIRST mtrltemp WHERE mtrltemp.LEVKOD = vald_lev AND mtrltemp.ENR = Guru.GlobalaVariabler:LastEnr AND 
            mtrltemp.KALKNR = 0 NO-LOCK NO-ERROR.
         END.                      
        
         RUN setcolsortvar_UI IN brwproc[1] (INPUT " WHERE KALKNR = 0 AND LEVKOD = '" + STRING(vald_lev) + "' USE-INDEX ENR ").
         RUN openbdynspec_UI IN brwproc[1].
         IF AVAILABLE mtrltemp THEN DO:
            RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(mtrltemp)).
            RUN lastselectdyn_UI IN brwproc[1].
         END.
      END.
      ELSE DO:
         ASSIGN
         BRW_STOLP:HIDDEN  = TRUE
         BRW_HLEV:HIDDEN  = TRUE
         CMB_LEV:HIDDEN  = TRUE
         BRW_SATS:HIDDEN  = FALSE
         BRW_SOKMTRLFSM:HIDDEN = TRUE
         BTN_LEV:HIDDEN  = FALSE      
         FILL-IN-KOD:HIDDEN  = FALSE.
         RUN setcolsortvar_UI IN brwproc[4] (INPUT " WHERE SATS = TRUE AND LEVKOD = '" + STRING(vald_lev) + "'").
         RUN openbdynspec_UI IN brwproc[4].
         FIND FIRST satstemp NO-LOCK NO-ERROR.
         IF AVAILABLE satstemp THEN DO:
            RUN setlastrowid_UI IN brwproc[4] (INPUT ROWID(satstemp)).
            RUN lastselectdyn_UI IN brwproc[4].
         END.
      END.
   END.
   ELSE IF RAD_MTRL:SCREEN-VALUE = "2" THEN DO:      
      ASSIGN
      BTN_KUNDLISTASM:HIDDEN = FALSE
      FILL-IN-ENRSTOLPSM:HIDDEN = FALSE
      FILL-IN-BENSTOLPSM:HIDDEN = FALSE
      BRW_STOLP:HIDDEN = FALSE
      BRW_HLEV:HIDDEN = TRUE
   /*   CMB_LEV:HIDDEN = TRUE*/
      BRW_SATS:HIDDEN = TRUE
      BRW_SOKMTRLFSM:HIDDEN = TRUE
 /*     BTN_LEV:HIDDEN = TRUE */      
      FILL-IN-ENR:HIDDEN = FALSE.
      FIND FIRST berstolptemp WHERE berstolptemp.STOLPE = TRUE NO-LOCK NO-ERROR.
      IF NOT AVAILABLE berstolptemp THEN DO:
         RUN initsok_UI (INPUT 2,INPUT "").
      END.
      RUN setcolsortvar_UI IN brwproc[5] (INPUT " WHERE STOLPE = TRUE AND LEVKOD = '" + STRING(vald_lev) + "'").
      RUN openbdynspec_UI IN brwproc[5].
       /*måste öppnas två gånger om sorteringen ska funka*/ 
      IF Guru.Konstanter:globnetprissortvar = 1 THEN RUN openbdynspec_UI IN brwproc[5].      
   END.
   ELSE IF RAD_MTRL:SCREEN-VALUE = "3" THEN DO:      
      ASSIGN
      BTN_KUNDLISTASM:HIDDEN = FALSE
      FILL-IN-ENRSTOLPSM:HIDDEN = FALSE
      FILL-IN-BENSTOLPSM:HIDDEN = FALSE
      BRW_STOLP:HIDDEN  = FALSE
      BRW_HLEV:HIDDEN  = TRUE
      BRW_SATS:HIDDEN  = TRUE
      BRW_SOKMTRLFSM:HIDDEN = TRUE
      FILL-IN-ENR:HIDDEN  = FALSE.
      FIND FIRST berstolptemp WHERE berstolptemp.STOLPE = FALSE NO-LOCK NO-ERROR.
      IF NOT AVAILABLE berstolptemp THEN DO:
         RUN initsok_UI (INPUT 2,INPUT "").
      END.
      RUN setcolsortvar_UI IN brwproc[5] (INPUT " WHERE STOLPE = FALSE AND LEVKOD = '" + STRING(vald_lev) + "'").
      RUN openbdynspec_UI IN brwproc[5].
       /*måste öppnas två gånger om sorteringen ska funka*/ 
      IF Guru.Konstanter:globnetprissortvar = 1 THEN RUN openbdynspec_UI IN brwproc[5].
   END.   
   ELSE IF RAD_MTRL:SCREEN-VALUE = "4" THEN DO:
      ASSIGN
      BRW_STOLP:HIDDEN = TRUE
      BRW_HLEV:HIDDEN = FALSE.
      EMPTY TEMP-TABLE mtrltemp NO-ERROR. 
      /*hämta favoriter*/
      DEFINE VARIABLE ttbuffh AS HANDLE NO-UNDO.  
      tthandle = TEMP-TABLE mtrltemp:HANDLE.
      ttbuffh = tthandle:DEFAULT-BUFFER-HANDLE.
        
      RUN ttcopy_UI IN huvprogh (INPUT TABLE-HANDLE tthandle).
      ttbuffh:EMPTY-TEMP-TABLE() NO-ERROR.
      
      FIND FIRST sparaladdatemp NO-ERROR.
      IF NOT AVAILABLE sparaladdatemp THEN CREATE sparaladdatemp.
      ASSIGN
      sparaladdatemp.GLOBANV = globanv /*Användare, i detta fall ELPAO*/
      sparaladdatemp.BENAMNING = "MTRLPRISE"  /*Benämnings sufix, i detta fall ELPAO$STOR*/
      sparaladdatemp.TABVAL = "MTRL" /*Tabellnamn*/
      sparaladdatemp.FALTVALAO = "ENR" /*CHARACTER field*/
      sparaladdatemp.FALTVALDEL = "LEVKOD" /*Integer field*/
      sparaladdatemp.FALTVALDATE = "".   /*DATE field*/
      EMPTY TEMP-TABLE mtrltemp NO-ERROR. 
   
      RUN laddabrw_UI IN brwproc[1]  (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp). 
      RUN ttjmf_UI IN huvprogh (INPUT-OUTPUT ttbuffh).
      RUN openbdyn_UI IN brwproc[1] (INPUT "").  
       
   END.
   
   {musarrow.i}
END PROCEDURE.

PROCEDURE allstartbrw_UI :
   IF NOT VALID-HANDLE(edataapph) THEN DO:
      IF Guru.Konstanter:appcon THEN DO:
         RUN EXTRADATAHMT.P PERSISTENT SET edataapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT.                  
      END.
      ELSE DO:
         RUN EXTRADATAHMT.P PERSISTENT SET edataapph.      
      END.
   END.
   RUN prissort_UI.
   IF NOT VALID-HANDLE(brwproc[1]) THEN DO: 
      RUN DYNBRW.P PERSISTENT SET brwproc[1] (INPUT BRW_HLEV).
      IF Guru.Konstanter:globnetprissortvar = 1 THEN  RUN setcolindex_UI IN brwproc[1] (INPUT "kund DESCENDING by enr").  
      RUN dynprogextra IN brwproc[1] (INPUT "rowdispextra_UI",INPUT THIS-PROCEDURE).
      RUN rowdispextrakor IN  brwproc[1] (INPUT TRUE).   
      RUN StartSokEnrLev_UI IN brwproc[1] (INPUT THIS-PROCEDURE). 
      RUN addmenuitem_UI IN brwproc[1] (INPUT BRW_HLEV:HANDLE,INPUT "Satsinformation",INPUT "satsa_UI").
      /*RUN addmenuitem_UI IN brwproc[1] (INPUT BRW_HLEV:HANDLE,INPUT "Markerade poster till Sparade utsökningar",INPUT "tidigaresok_UI").*/
      RUN addmenuitem_UI IN brwproc[1] (INPUT BRW_HLEV:HANDLE,INPUT "Lägg till enr i favoriter",INPUT "sparaaofavoritermtrl_UI").      
   END.
   IF NOT VALID-HANDLE(brwproc[2]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[2] (INPUT BRW_KAB).
   RUN brwjoin_UI IN brwproc[2] (INPUT "fri_temp where fri_temp.NUM = kon_val.NUM AND fri_temp.KABNR = kon_val.SKAPNUM").
   IF NOT VALID-HANDLE(brwproc[3]) THEN DO: 
      RUN DYNBRW.P PERSISTENT SET brwproc[3] (INPUT BRW_MTRL).
      RUN dynprogextra IN brwproc[3] (INPUT "rowdispextra_UI",INPUT THIS-PROCEDURE).
      RUN rowdispextrakor IN  brwproc[3] (INPUT TRUE). 
      RUN StartSokEnrLev_UI IN brwproc[3] (INPUT THIS-PROCEDURE). 
      RUN addmenuitem_UI IN brwproc[3] (INPUT BRW_MTRL:HANDLE,INPUT "Satsinformation",INPUT "btnsats_UI").
      RUN addmenuitem_UI IN brwproc[3] (INPUT BRW_MTRL:HANDLE,INPUT "Lägg till enr i favoriter",INPUT "sparaaofavoriterVmtrl_UI").  
   END.
   IF NOT VALID-HANDLE(brwproc[4]) THEN DO:
      RUN DYNBRW.P PERSISTENT SET brwproc[4] (INPUT BRW_SATS). 
      RUN StartSokEnrLev_UI IN brwproc[4] (INPUT THIS-PROCEDURE). 
      /*
      IF Guru.Konstanter:globnetprissortvar = 1 THEN  RUN setcolindex_UI IN brwproc[4] (INPUT "kund DESCENDING by enr").
      */
   END.
   IF NOT VALID-HANDLE(brwproc[5]) THEN DO:
      RUN DYNBRW.P PERSISTENT SET brwproc[5] (INPUT BRW_STOLP).
      RUN StartSokEnrLev_UI IN brwproc[5] (INPUT THIS-PROCEDURE). 
      IF Guru.Konstanter:globnetprissortvar = 1 THEN  RUN setcolindex_UI IN brwproc[5] (INPUT "kund DESCENDING by enr").
      ELSE RUN setcolindex_UI IN brwproc[5] (INPUT "STOLPE BY ANTAL").          /*vsab lagrar trafostorlek i antal*/ 
      RUN dynprogextra IN brwproc[5] (INPUT "rowdispextra_UI",INPUT THIS-PROCEDURE).
      RUN rowdispextrakor IN  brwproc[5] (INPUT TRUE).
      RUN addfillin_UI IN brwproc[5] (INPUT FILL-IN-ENRSTOLPSM, INPUT "ENR"). 
      RUN addfillin_UI IN brwproc[5] (INPUT FILL-IN-BENSTOLPSM, INPUT "BENAMNING").
   END.
   IF NOT VALID-HANDLE(brwproc[6]) THEN DO:
      RUN DYNBRW.P PERSISTENT SET brwproc[6] (INPUT BRW_SOKMTRLFSM). 
      IF Guru.Konstanter:globnetprissortvar = 1 THEN  RUN setcolindex_UI IN brwproc[6] (INPUT "kund DESCENDING by enr"). 
      RUN dynprogextra IN brwproc[6] (INPUT "rowdispextra_UI",INPUT THIS-PROCEDURE).
      RUN rowdispextrakor IN  brwproc[6] (INPUT TRUE).
      
   END.
   
   RUN setcolindex_UI IN brwproc[2] (INPUT "SKAPNUM").
   RUN setcolindex_UI IN brwproc[3] (INPUT "NUM BY SKAPNUM BY ENR").
   
   RUN brwsetupstop_UI IN brwproc[2] (INPUT 1).
   IF NOT VALID-HANDLE(mtrlhmtapph) THEN DO:
      IF Guru.Konstanter:appcon THEN DO:
         RUN MTRLHMT.P PERSISTENT SET mtrlhmtapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
      END.
      ELSE DO:
         RUN MTRLHMT.P PERSISTENT SET mtrlhmtapph.
      END. 
   END.
   IF NOT VALID-HANDLE(skapmtrlapph) THEN DO:
      IF Guru.Konstanter:appcon THEN DO:
         RUN SKAPMTRLAPPJ.P PERSISTENT SET skapmtrlapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
      END.
      ELSE DO:
         RUN SKAPMTRLAPPJ.P PERSISTENT SET skapmtrlapph.
      END. 
   END.
   IF NOT VALID-HANDLE(edataapph) THEN DO:
      IF Guru.Konstanter:appcon THEN DO:
         RUN EXTRADATAHMT.P PERSISTENT SET edataapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT.                  
      END.
      ELSE DO:
         RUN EXTRADATAHMT.P PERSISTENT SET edataapph.      
      END.
   END.
   levinlast = "".
   RUN levinlast_UI (INPUT vald_kundlev,OUTPUT levinlast).
   RUN setorgtitle_UI IN brwproc[1] (INPUT "Materiellista huvudleverantör " + huvudlev + levinlast).      
  /*
   RUN setapplyvc IN framesizeh (INPUT FRAME-SKAPMTRL).
   */   
   
    
   
END PROCEDURE.
PROCEDURE prissort_UI :
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "FAVO"                   
   inextradatatemp.HUVUDCH = globanv              
   inextradatatemp.HUVUDINT =  ?.   
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:
      /*
      Guru.Konstanter:globnetprissortvar = extradatatemp.SOKINT[4].
      */      
   END.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
END PROCEDURE.
PROCEDURE main_UI :
   {muswait.i}
   {ALLSTARTDYN.I}
   RAD_MTRL:SCREEN-VALUE = "1".
   FIND FIRST kon_val WHERE ROWID(kon_val) = kon_rowid NO-ERROR.   
   FIND FIRST bbenamntemp WHERE bbenamntemp.KONSKOD = kon_val.GRUPP 
   NO-LOCK NO-ERROR.
   FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM USE-INDEX NUM
   NO-LOCK NO-ERROR.      
   IF AVAILABLE bbenamntemp THEN DO:
      ASSIGN       
      FILL-IN-B2:SCREEN-VALUE = bbenamntemp.ID2
      FILL-IN-B3:SCREEN-VALUE = "Fri ID".
   END.
   IF globforetag = "gran" OR globforetag = "NAEK" OR globforetag = "celpa" OR globforetag = "CPOMA" THEN DO:
      FILL-IN-ADRKABM:LABEL = "Skylttext".                   
   END.  
   IF AVAILABLE kon_id THEN DO:
      IF kon_id.ENDKOMB = FALSE THEN DO:
         {MARKKABVAL.I}
         IF enval = TRUE AND  kon_val.GRUPP NE 0 THEN DO:           
            IF kon_id.NATNR NE ? THEN FILL-IN-F2:SCREEN-VALUE = STRING(kon_id.NATNR).         
            FIND FIRST annamntemp NO-LOCK NO-ERROR.
            FILL-IN-B2:SCREEN-VALUE =  annamntemp.TAB3.
         END.
         ELSE DO:
            IF kon_id.FRI2 NE ? THEN FILL-IN-F2:SCREEN-VALUE = STRING(kon_id.FRI2).         
         END.         
      END.
      ELSE DO:
         FILL-IN-F2:SCREEN-VALUE = "Ej identifierat".
      END.   
      IF kon_id.FRI3 NE ? THEN DO:
         FILL-IN-F3:SCREEN-VALUE = STRING(kon_id.FRI3).
      END.
      ELSE DO:
         FILL-IN-F3:SCREEN-VALUE = "Ej identifierat".
      END.
   END. 
   FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM NO-LOCK NO-ERROR.         
   IF NOT AVAILABLE list_mtrl THEN DO: 
      valnum = kon_val.NUM.
      EMPTY TEMP-TABLE sparakon_val NO-ERROR. 
      FOR EACH kon_val WHERE kon_val.NUM = valnum:
         CREATE sparakon_val.
         BUFFER-COPY kon_val TO sparakon_val.

      END.
      IF Guru.GlobalaVariabler:KorBerDS = TRUE THEN DO:
         /*MTRLDS
         RUN LaddaBerMtrl_UI IN btnbervalh (INPUT valnum).
         */
         RUN MtrlKonHmt_UI IN Guru.GlobalaVariabler:BerDSapph 
         (INPUT datvar,INPUT valnum, INPUT xtillyvar, INPUT TABLE sparakon_val,OUTPUT TABLE list_mtrl APPEND).
      END.  
      ELSE DO:                    
         IF Guru.Konstanter:appcon THEN DO:                           
            RUN BERHMTKONMTRL.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
            (INPUT valaonr, INPUT valomrade, INPUT datvar,INPUT valnum, INPUT xtillyvar, INPUT TABLE sparakon_val, 
            OUTPUT TABLE list_mtrl APPEND).
         END.
         ELSE DO:
            RUN BERHMTKONMTRL.P
            (INPUT valaonr, INPUT valomrade, INPUT datvar,INPUT valnum, INPUT xtillyvar, INPUT TABLE sparakon_val, 
            OUTPUT TABLE list_mtrl APPEND).
         END.
      END.     
      EMPTY TEMP-TABLE sparakon_val NO-ERROR.                   
      
   END.
   {NETTOMARK.I}
   
   
   /*    {KLABEL2.I} */
   RUN konlabel_UI IN huvprogh 
   (INPUT "KSKAP2",
    INPUT bbenamntemp.B1,
    INPUT bbenamntemp.B2,
    INPUT bbenamntemp.B3,
    INPUT bbenamntemp.B4,
    INPUT bbenamntemp.B5,
    INPUT bbenamntemp.B6,
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT bbenamntemp.ID2).    
   RUN konlabel_UI IN huvprogh 
   (INPUT "MTRL",                  
    INPUT Guru.Konstanter:genk,
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "").    
   IF AVAILABLE kon_val THEN DO:
      ASSIGN   
      valnum = kon_val.NUM.     
   END.
   RUN setcolsortvar_UI IN brwproc[2] (INPUT " WHERE NUM = " + STRING(valnum)).
   RUN btnkskap_UI IN huvprogh.
   IF VALID-HANDLE(btnkskaph) THEN DO:
      RUN fritempskap_UI IN btnkskaph.
   END.
   
   RUN openbdynspec_UI IN brwproc[2].
   IF repovar = TRUE THEN DO:
      FIND FIRST kon_val WHERE ROWID(kon_val) = val_row NO-LOCK NO-ERROR.
      IF AVAILABLE kon_val THEN DO:
         RUN setlastrowid_UI IN brwproc[2] (INPUT ROWID(kon_val)).
         RUN lastselectdyn_UI IN brwproc[2].
      END.
   END.
   IF xtillyvar = "" THEN DO:      
      FIND FIRST huvlevtemp WHERE huvlevtemp.DEP-NR = 999 NO-LOCK NO-ERROR.
      IF AVAILABLE huvlevtemp THEN DO:
         vald_kundlev = huvlevtemp.LEVKOD.
      END.
      ELSE DO:
         FIND FIRST levtemp WHERE levtemp.LEVKOD NE "0"
         AND levtemp.BORTTAG = FALSE NO-LOCK NO-ERROR.
         vald_kundlev = levtemp.LEVKOD.
      END.
   END.
   ELSE DO:
      ASSIGN      
      vald_kundlev = xtillyvar.
   END.   
   CMB_LEV:LIST-ITEMS = "".
   FIND FIRST levtemp WHERE levtemp.LEVKOD = vald_kundlev
   USE-INDEX LEV NO-LOCK NO-ERROR.
   ASSIGN
   status-ok = CMB_LEV:ADD-LAST(levtemp.LEVNAMN)
   CMB_LEV:SCREEN-VALUE = levtemp.LEVNAMN
   huvudlev = levtemp.LEVNAMN.
   FOR EACH levtemp WHERE levtemp.LEVKOD NE vald_kundlev AND
   levtemp.LEVKOD NE "0" AND levtemp.BORTTAG = FALSE USE-INDEX LEV NO-LOCK:
      /*Niklas personlig spec_mtrl*/
      IF levtemp.LEVKOD = "99" THEN DO:
         status-ok = CMB_LEV:ADD-LAST(globanv + " " + levtemp.LEVNAMN).
         status-ok = CMB_LEV:ADD-LAST(levtemp.LEVNAMN).
      END.
      ELSE DO:
         status-ok = CMB_LEV:ADD-LAST(levtemp.LEVNAMN).
      END. 
   END.
   FIND FIRST huvlevtemp WHERE huvlevtemp.DEP-NR = 999 NO-LOCK NO-ERROR.
   FOR EACH levtemp WHERE
   levtemp.LEVKOD NE "0" AND levtemp.LEVKOD NE "99" AND
   levtemp.BORTTAG = FALSE USE-INDEX LEV NO-LOCK:
      IF AVAILABLE huvlevtemp AND  huvlevtemp.LEVKOD = levtemp.LEVKOD THEN status-ok = CMB_LEV:ADD-LAST("Sats " + levtemp.LEVNAMN).
      ELSE IF levtemp.LEVKOD = vald_kundlev THEN status-ok = CMB_LEV:ADD-LAST("Sats " + levtemp.LEVNAMN).      
   END.
   status-ok = CMB_LEV:ADD-LAST("Sparade utsökningar").
   status-ok = CMB_LEV:ADD-LAST("Alla leverantörer").
   ASSIGN
   /*
   vald_lev = vald_kundlev
   */
   valet = FALSE
   sok = FALSE
   satsmtrl = FALSE
   satstrue = FALSE.
   RUN setcolsortvar_UI IN brwproc[1] (INPUT " WHERE KALKNR = " + STRING(0) + " AND LEVKOD = '" + STRING(vald_kundlev) + "'").
   RUN openbdynspec_UI IN brwproc[1].
   ASSIGN
   FILL-IN-KOD:HIDDEN  = TRUE
   BTN_LEV:HIDDEN  = TRUE.
   APPLY "VALUE-CHANGED" TO BRW_KAB. 
   ASSIGN
   BRW_SOKMTRLFSM:HIDDEN = TRUE
   BRW_SATS:HIDDEN  = TRUE   
   BRW_HLEV:HIDDEN  = FALSE. 
   FIND FIRST del_val WHERE del_val.NUM = valnum NO-LOCK NO-ERROR.
   IF NOT AVAILABLE del_val THEN DO:      
      ASSIGN      
      BTN_OVER:HIDDEN  = FALSE
      BTN_BACK:HIDDEN  = FALSE      
      BTN_NY:HIDDEN  = FALSE 
      BTN_ANTAL:HIDDEN  = FALSE 
      BTN_SATS:HIDDEN  = FALSE
      BTN_TEXT:HIDDEN  = FALSE      
      BTN_NOLL:HIDDEN  = FALSE
      BTN_ALLTMTRL:HIDDEN  = FALSE
      BTN_SPEC:HIDDEN  = FALSE
      BTN_LINKAB:HIDDEN  = TRUE
           
      listantalh:READ-ONLY = FALSE.     
   END.
   ELSE DO:   
      ASSIGN      
      BTN_OVER:HIDDEN  = TRUE
      BTN_BACK:HIDDEN  = TRUE      
      BTN_NY:HIDDEN  = TRUE 
      BTN_ANTAL:HIDDEN  = TRUE 
      BTN_SATS:HIDDEN  = TRUE
      BTN_TEXT:HIDDEN  = TRUE      
      BTN_NOLL:HIDDEN  = TRUE
      BTN_ALLTMTRL:HIDDEN  = TRUE
      BTN_SPEC:HIDDEN  = TRUE
      BTN_LINKAB:HIDDEN  = TRUE.      
      listantalh:READ-ONLY = TRUE.     
   END.
   IF Guru.Konstanter:mtrlsekvar[6] = TRUE THEN DO:
      ASSIGN
      listprish:VISIBLE = FALSE
      nprish:VISIBLE = FALSE.     
   END.     
   RUN vcradmtrl_UI.
   
   APPLY "VALUE-CHANGED" TO BRW_KAB.
   RUN togalltmtrl_UI.
   RUN PlaceraKnapp_UI.
   {musarrow.i}
END PROCEDURE.
PROCEDURE PlaceraKnapp_UI :
   Guru.Konstanter:LabelFlytt(CMB_LEV).
   Guru.Konstanter:LabelFlytt(FILL-IN-ENR). 
   Guru.Konstanter:LabelFlytt(FILL-IN-KOD). 
   Guru.Konstanter:LabelFlytt(FILL-IN-BEN).
   Guru.Konstanter:LabelFlytt(FILL-IN-BENSTOLPSM). 
   Guru.Konstanter:LabelFlytt(FILL-IN-ENRSTOLPSM).
   BTN_KUNDLISTASM:ROW = CMB_LEV:ROW.  
   BTN_KUNDLISTASM:COLUMN = CMB_LEV:COLUMN - (BTN_KUNDLISTASM:WIDTH-CHARS + CMB_LEV:SIDE-LABEL-HANDLE:WIDTH-CHARS + 2).
    
      
END PROCEDURE.
PROCEDURE pselectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(kon_valkh) THEN  kon_valkh = TEMP-TABLE kon_val:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(mtrltemph) THEN  mtrltemph = TEMP-TABLE mtrltemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(list_mtrlh) THEN  list_mtrlh = TEMP-TABLE list_mtrl:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(satstemph) THEN  satstemph = TEMP-TABLE satstemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(berstolptemph) THEN  berstolptemph = TEMP-TABLE berstolptemp:DEFAULT-BUFFER-HANDLE.  
   RUN pselectrowid_UI IN brwproc[brwvald] (OUTPUT brwrowid).
   IF brwvald = 1 THEN FIND FIRST mtrltemp WHERE ROWID(mtrltemp) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 2 THEN FIND FIRST kon_val WHERE ROWID(kon_val) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 3 THEN FIND FIRST list_mtrl WHERE ROWID(list_mtrl) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 4 THEN FIND FIRST satstemp WHERE ROWID(satstemp) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 5 THEN FIND FIRST berstolptemp WHERE ROWID(berstolptemp) = brwrowid NO-LOCK NO-ERROR.  
END PROCEDURE.
PROCEDURE nselectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(kon_valkh) THEN  kon_valkh = TEMP-TABLE kon_val:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(mtrltemph) THEN  mtrltemph = TEMP-TABLE mtrltemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(list_mtrlh) THEN  list_mtrlh = TEMP-TABLE list_mtrl:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(satstemph) THEN  satstemph = TEMP-TABLE satstemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(berstolptemph) THEN  berstolptemph = TEMP-TABLE berstolptemp:DEFAULT-BUFFER-HANDLE.  
   RUN nselectrowid_UI IN brwproc[brwvald] (OUTPUT brwrowid).
   IF brwvald = 1 THEN FIND FIRST mtrltemp WHERE ROWID(mtrltemp) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 2 THEN FIND FIRST kon_val WHERE ROWID(kon_val) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 3 THEN FIND FIRST list_mtrl WHERE ROWID(list_mtrl) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 4 THEN FIND FIRST satstemp WHERE ROWID(satstemp) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 5 THEN FIND FIRST berstolptemp WHERE ROWID(berstolptemp) = brwrowid NO-LOCK NO-ERROR.  
END PROCEDURE.
PROCEDURE selectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.      
   IF NOT VALID-HANDLE(kon_valkh) THEN  kon_valkh = TEMP-TABLE kon_val:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(mtrltemph) THEN  mtrltemph = TEMP-TABLE mtrltemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(list_mtrlh) THEN  list_mtrlh = TEMP-TABLE list_mtrl:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(satstemph) THEN  satstemph = TEMP-TABLE satstemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(berstolptemph) THEN  berstolptemph = TEMP-TABLE berstolptemp:DEFAULT-BUFFER-HANDLE.   
   RUN selectrowid_UI IN brwproc[brwvald] (OUTPUT brwrowid).
   IF brwvald = 1 THEN FIND FIRST mtrltemp WHERE ROWID(mtrltemp) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 2 THEN FIND FIRST kon_val WHERE ROWID(kon_val) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 3 THEN FIND FIRST list_mtrl WHERE ROWID(list_mtrl) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 4 THEN FIND FIRST satstemp WHERE ROWID(satstemp) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 5 THEN FIND FIRST berstolptemp WHERE ROWID(berstolptemp) = brwrowid NO-LOCK NO-ERROR.  

END PROCEDURE.
PROCEDURE fselectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   IF NOT VALID-HANDLE(kon_valkh) THEN  kon_valkh = TEMP-TABLE kon_val:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(mtrltemph) THEN  mtrltemph = TEMP-TABLE mtrltemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(list_mtrlh) THEN  list_mtrlh = TEMP-TABLE list_mtrl:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(satstemph) THEN  satstemph = TEMP-TABLE satstemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(berstolptemph) THEN  berstolptemph = TEMP-TABLE berstolptemp:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(soktamtrlfavoh) THEN soktamtrlfavoh = TEMP-TABLE  soktamtrlfavo:DEFAULT-BUFFER-HANDLE.   
   RUN fetrowid_UI IN brwproc[brwvald] (INPUT antal_raknare,OUTPUT brwrowid) .
   IF brwvald = 1 THEN FIND FIRST mtrltemp WHERE ROWID(mtrltemp) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 2 THEN FIND FIRST kon_val WHERE ROWID(kon_val) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 3 THEN FIND FIRST list_mtrl WHERE ROWID(list_mtrl) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 4 THEN FIND FIRST satstemp WHERE ROWID(satstemp) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 5 THEN FIND FIRST berstolptemp WHERE ROWID(berstolptemp) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 6 THEN FIND FIRST soktamtrlfavo WHERE ROWID(soktamtrlfavo) = brwrowid NO-LOCK NO-ERROR.   
END PROCEDURE.

PROCEDURE avmarkeraHLEV_UI :      
   RUN dselectfoc_UI (INPUT 1).  
END PROCEDURE.

PROCEDURE dselectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   RUN dselectfoc_UI IN brwproc[brwvald].      
END PROCEDURE.
PROCEDURE rowdispextra_UI :
   
   DEFINE INPUT PARAMETER TABLE FOR coltemp.
   DEFINE INPUT PARAMETER brwh AS HANDLE NO-UNDO.   
      
   IF brwh:NAME = "BRW_HLEVSM" THEN RUN rowdispmtrl_UI IN huvprogh (INPUT 2). 
   IF brwh:NAME = "BRW_MTRLSM" THEN RUN rowdispmtrl_UI IN huvprogh (INPUT 4).
   IF brwh:NAME = "BRW_STOLPSM" THEN RUN rowdispmtrl_UI IN huvprogh (INPUT 6).
   IF brwh:NAME = "BRW_ALLTMTRL" THEN RUN mtrldisp_UI (INPUT 1). 
   IF brwh:NAME = "BRW_SOKMTRLFSM" THEN RUN rowdispmtrl_UI IN huvprogh (INPUT 7). 
END PROCEDURE.


PROCEDURE mtrldisp_UI :

   DEFINE INPUT  PARAMETER vad AS INTEGER NO-UNDO.
   IF vad = 1 THEN DO: 
     
      IF AVAILABLE alltskapmtrl THEN DO:         
         
         FIND FIRST berstolptemp WHERE /*berstolptemp.LEVKOD = alltskapmtrl.LEVKOD AND*/ berstolptemp.ENR = alltskapmtrl.ENR NO-LOCK NO-ERROR.
         IF AVAILABLE berstolptemp THEN DO:              
            /*STOLPAR turkosa fortum  gula övriga*/
              RUN bgcolor_UI IN brwprocdyn[vad] (INPUT "BENAMNING", INPUT Guru.Konstanter:varforetypval[31]).
              RUN bgcolor_UI IN brwprocdyn[vad] (INPUT "ENR", INPUT Guru.Konstanter:varforetypval[31]).          
         END.          
         IF Guru.Konstanter:varforetypval[29] = 1  THEN DO:                 
            /*nettopris beredning inköp*/         
            FIND FIRST kmtrltemp WHERE kmtrltemp.LEVKOD = alltskapmtrl.LEVKOD AND kmtrltemp.ENR = alltskapmtrl.ENR AND kmtrltemp.KALKNR = 0
            AND kmtrltemp.KUND = TRUE  NO-LOCK NO-ERROR.
            IF AVAILABLE kmtrltemp THEN DO:    
                                        
               /*STOLPAR turkosa fortum  gula övriga*/
               RUN bgcolor_UI IN brwprocdyn[vad] (INPUT "ENR", INPUT Guru.Konstanter:varforetypval[28]). 
               RUN bgcolor_UI IN brwprocdyn[vad] (INPUT "PRIS", INPUT Guru.Konstanter:varforetypval[28]). 
                              
            END.
            ELSE DO:
               FIND FIRST kmtrltemp WHERE kmtrltemp.LEVKOD = alltskapmtrl.LEVKOD AND kmtrltemp.ENR = alltskapmtrl.ENR AND kmtrltemp.KALKNR = 0
               AND kmtrltemp.KUND = ?  NO-LOCK NO-ERROR.
               IF AVAILABLE kmtrltemp THEN DO:  
                                              
                  /*STOLPAR turkosa fortum  gula övriga*/
                  RUN bgcolor_UI IN brwprocdyn[vad] (INPUT "ENR", INPUT Guru.Konstanter:varforetypval[38]). 
                  RUN bgcolor_UI IN brwprocdyn[vad] (INPUT "PRIS", INPUT Guru.Konstanter:varforetypval[38]).
                                 
               END.
            END.
            IF Guru.Konstanter:varforetypval[37] NE 0 THEN DO:
               FIND FIRST kmtrltemp WHERE /*kmtrltemp.LEVKOD = alltskapmtrl.LEVKOD AND*/  kmtrltemp.ENR = alltskapmtrl.ENR AND kmtrltemp.KALKNR = 0
               AND kmtrltemp.OFFERT = TRUE  NO-LOCK NO-ERROR.
               IF AVAILABLE kmtrltemp THEN DO:  
                  RUN bgcolor_UI IN brwprocdyn[vad] (INPUT "BENAMNING", INPUT Guru.Konstanter:varforetypval[37]).
                  RUN bgcolor_UI IN brwprocdyn[vad] (INPUT "ENHET", INPUT Guru.Konstanter:varforetypval[37]).                  
                  IF AVAILABLE berstolptemp THEN DO:                        
                     /*STOLPAR turkosa fortum  gula övriga*/
                     RUN bgcolor_UI IN brwprocdyn[vad] (INPUT "BENAMNING", INPUT Guru.Konstanter:varforetypval[31]).
                     
                  END.         
               END.
            END.
         END.
      END.
   END.
END PROCEDURE.
PROCEDURE nextkonst_UI :
   RUN nextkonst_UI IN btnbervalh.
  
END PROCEDURE.
PROCEDURE kompskap_UI :
  RUN mdval_UI IN btnbervalh. 
  RUN mbtnmtrl_UI IN btnbervalh.
END PROCEDURE.
PROCEDURE sparaaofavoritermtrl_UI :
   RUN favlaggtill_UI.   
   RUN sparaaofavoriter_UI.       
END PROCEDURE.
PROCEDURE sparaaofavoritervmtrl_UI :
   RUN favlaggtillist_UI.  
   RUN sparaaofavoriter_UI.     
   
END PROCEDURE.
PROCEDURE sparaaofavoriter_UI :
      
   DEFINE VARIABLE ttbuffh AS HANDLE NO-UNDO.
   EMPTY TEMP-TABLE mtrltemp NO-ERROR.
   FOR EACH emtrltemp  NO-LOCK:
      CREATE mtrltemp.
      BUFFER-COPY emtrltemp TO mtrltemp.            
   END.   
   tthandle = TEMP-TABLE mtrltemp:HANDLE.
   ttbuffh = tthandle:DEFAULT-BUFFER-HANDLE.
   FIND FIRST sparaladdatemp NO-ERROR.
   IF NOT AVAILABLE sparaladdatemp THEN CREATE sparaladdatemp.
   ASSIGN
   sparaladdatemp.GLOBANV = globanv /*Användare, i detta fall ELPAO*/
   sparaladdatemp.BENAMNING = "MTRLPRISE" /*Benämnings sufix, i detta fall ELPAO$STOR*/
   sparaladdatemp.TABVAL = "MTRL" /*Tabellnamn*/
   sparaladdatemp.FALTVALAO = "ENR" /*CHARACTER field*/
   sparaladdatemp.FALTVALDEL = "LEVKOD" /*Integer field*/
   sparaladdatemp.FALTVALDATE = "".   /*DATE field*/
   RUN ttcopy_UI IN huvprogh (INPUT TABLE-HANDLE tthandle).
   ttbuffh:EMPTY-TEMP-TABLE() NO-ERROR.
   RUN laddabrw_UI IN brwproc[1]  (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp).   
   RUN ttjmfPair_UI IN huvprogh (INPUT TRUE,INPUT "LEVKOD,LEVKOD,ENR,ENR",INPUT TRUE,INPUT-OUTPUT ttbuffh).
   RUN openbdyn_UI IN brwproc[1] (INPUT "").
   RUN sparabrw_UI IN brwproc[1]  (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp).  
   tthandle:EMPTY-TEMP-TABLE ().
   EMPTY TEMP-TABLE mtrltemp NO-ERROR. 
   RUN openbdyn_UI IN brwproc[1] (INPUT "").  
   RUN ttcopyhmt_UI IN huvprogh (INPUT-OUTPUT TABLE-HANDLE tthandle). 
   RAD_MTRL:SCREEN-VALUE = "4".
   RUN vcradmtrl_UI.   
      
END PROCEDURE.
PROCEDURE favlaggtill_UI :
   EMPTY TEMP-TABLE emtrltemp NO-ERROR.
   ASSIGN
   antal_valda = BRW_HLEV:NUM-SELECTED-ROWS NO-ERROR.      
   antal_raknare = 1.
   DO WHILE antal_raknare LE antal_valda:                    
      RUN fselectfoc_UI (INPUT 1).
      IF AVAILABLE mtrltemp THEN DO:         
         CREATE emtrltemp.
         BUFFER-COPY mtrltemp TO emtrltemp.                             
      END.
      antal_raknare = antal_raknare + 1.
   END.     
END PROCEDURE.
PROCEDURE favlaggtillist_UI :
   EMPTY TEMP-TABLE emtrltemp NO-ERROR.
   ASSIGN
   antal_valda = BRW_MTRL:NUM-SELECTED-ROWS NO-ERROR.      
   antal_raknare = 1.
   DO WHILE antal_raknare LE antal_valda:                          
      RUN fselectfoc_UI (INPUT 3).
      IF AVAILABLE list_mtrl THEN DO:         
         CREATE emtrltemp.
         BUFFER-COPY list_mtrl TO emtrltemp.                             
      END.
      antal_raknare = antal_raknare + 1.
   END.     
END PROCEDURE.

PROCEDURE borthandE_UI :
   DEFINE VARIABLE i AS INTEGER NO-UNDO INITIAL 1.
   DO WHILE i LE 25:
      IF VALID-HANDLE(brwproc[i]) THEN DELETE PROCEDURE brwproc[i] NO-ERROR.
      brwproc[i] = ?.
      i = i + 1.
   END.
END PROCEDURE.
PROCEDURE borthand_UI :
   kon_valkh:EMPTY-TEMP-TABLE() NO-ERROR.
   mtrltemph:EMPTY-TEMP-TABLE() NO-ERROR.
   list_mtrlh:EMPTY-TEMP-TABLE() NO-ERROR.
   satstemph:EMPTY-TEMP-TABLE() NO-ERROR.
   berstolptemph:EMPTY-TEMP-TABLE() NO-ERROR.
   soktamtrlfavoh:EMPTY-TEMP-TABLE() NO-ERROR. 
   IF VALID-HANDLE(kon_valkh) THEN   DELETE OBJECT kon_valkh  NO-ERROR.
   IF VALID-HANDLE(mtrltemph) THEN   DELETE OBJECT mtrltemph  NO-ERROR.
   IF VALID-HANDLE(list_mtrlh) THEN   DELETE OBJECT list_mtrlh  NO-ERROR.
   IF VALID-HANDLE(satstemph) THEN   DELETE OBJECT satstemph  NO-ERROR.
   IF VALID-HANDLE(berstolptemph) THEN   DELETE OBJECT berstolptemph  NO-ERROR.
   IF VALID-HANDLE(soktamtrlfavoh) THEN   DELETE OBJECT soktamtrlfavoh  NO-ERROR.
   IF VALID-HANDLE(mtrlhmtapph) THEN DELETE PROCEDURE mtrlhmtapph.
   IF VALID-HANDLE(skapmtrlapph) THEN DELETE PROCEDURE skapmtrlapph.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph.
   
   ASSIGN
   soktamtrlfavoh = ?
   kon_valkh = ?
   mtrltemph = ?
   list_mtrlh = ?
   satstemph = ?
   berstolptemph = ?.    
   {BORTBRWPROC.I}    
   /*   
   DEFINE VARIABLE i AS INTEGER NO-UNDO INITIAL 1.
DO WHILE i LE 25:
   IF i NE 2 THEN IF VALID-HANDLE(brwproc[i]) THEN DELETE PROCEDURE brwproc[i] NO-ERROR.
   brwproc[i] = ?.
   i = i + 1.
END.
*/
IF VALID-HANDLE(framesizeh) THEN DELETE PROCEDURE framesizeh NO-ERROR.
framesizeh = ?.

END PROCEDURE.
