/*KSKAPM.P KOPPLA SKÅP*/
{KSKAPMWID.I}
{ALLDEF.I}
&Scoped-define NEW 
{GLOBVAR2DEL1.I}
&Scoped-define SHARED SHARED
{LEVTEMP.I}
{HUVLEVTEMP.I}
{BBENAMNTEMP.I}   
{SMTRL.I}
{KONVALTEMP.I}
{KONID.I} 
{LISTMTRL.I}    
{FRITEMP.I}
{MARKGRUPP.I}
{KONSTRMTRL.I}
{ANNAMN.I}
{MTRLTAB.I}
&Scoped-define NEW 
&Scoped-define SHARED SHARED   
{delvaltemp.i}
{BERSKAP.I}
{INKSUMBERTEMP.I} 
DEFINE SHARED VARIABLE btnbervalh AS HANDLE NO-UNDO.
DEFINE SHARED VARIABLE bervalapph AS HANDLE NO-UNDO.
DEFINE SHARED VARIABLE nettoh AS HANDLE NO-UNDO.
DEFINE SHARED VARIABLE btnkskapmtrlh AS HANDLE NO-UNDO.
DEFINE SHARED VARIABLE val_row AS ROWID NO-UNDO.
DEFINE SHARED VARIABLE repovar AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE kabkortvar AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE valnum AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE valskapnum AS INTEGER NO-UNDO.
/*CONNECTIT VARIABLER*/
DEFINE SHARED VARIABLE quotervar AS CHARACTER FORMAT "X(256)" NO-UNDO.



DEFINE VARIABLE edlcvar AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE valaonr AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE valdelnr AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE valort AS CHARACTER NO-UNDO. 
DEFINE SHARED VARIABLE kon_rowid AS ROWID NO-UNDO. 
DEFINE SHARED VARIABLE musz AS LOGICAL NO-UNDO. 
DEFINE SHARED VARIABLE valomrade AS CHARACTER NO-UNDO. 
DEFINE SHARED VARIABLE datvar AS DATE NO-UNDO.
DEFINE SHARED VARIABLE xtillyvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE antalinkvar AS DECIMAL NO-UNDO.
DEFINE VARIABLE status-ok AS LOGICAL NO-UNDO.   
DEFINE VARIABLE counter AS INTEGER NO-UNDO.        
DEFINE VARIABLE counter2 AS INTEGER NO-UNDO.         
DEFINE VARIABLE skapstorlek AS INTEGER NO-UNDO. 
DEFINE VARIABLE skaptyp AS CHARACTER NO-UNDO. 
DEFINE VARIABLE modulval AS INTEGER NO-UNDO. 
DEFINE VARIABLE spar_rowid AS ROWID NO-UNDO. 
DEFINE VARIABLE frannr AS INTEGER NO-UNDO.
DEFINE VARIABLE tillnr AS INTEGER NO-UNDO.
DEFINE VARIABLE gam_row AS ROWID NO-UNDO.
DEFINE VARIABLE lin_rowid AS ROWID NO-UNDO.
DEFINE VARIABLE bytvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE ordvar AS INTEGER NO-UNDO.
DEFINE VARIABLE idvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE id2var AS CHARACTER FORMAT "X(10)" NO-UNDO.
DEFINE VARIABLE extravar AS CHARACTER FORMAT "X(10)" NO-UNDO.
DEFINE VARIABLE extravar1 AS CHARACTER NO-UNDO.
DEFINE VARIABLE extravar2 AS CHARACTER NO-UNDO.
DEFINE VARIABLE upplagvar AS INTEGER NO-UNDO.
DEFINE VARIABLE anmarkvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE filnamn AS CHARACTER NO-UNDO.
DEFINE VARIABLE filnamn2 AS CHARACTER NO-UNDO. 
DEFINE VARIABLE korfil AS CHARACTER NO-UNDO.
DEFINE VARIABLE utfil AS CHARACTER NO-UNDO.
DEFINE VARIABLE objnamn AS CHARACTER NO-UNDO.
DEFINE VARIABLE sokfil AS CHARACTER NO-UNDO.
DEFINE VARIABLE words AS CHARACTER FORMAT "X(132)" NO-UNDO.
DEFINE VARIABLE objvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE bervar AS LOGICAL NO-UNDO.
DEFINE VARIABLE langdvar AS INTEGER NO-UNDO.
DEFINE VARIABLE vald_kundlev AS CHARACTER NO-UNDO.
DEFINE VARIABLE importvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE win2000 AS LOGICAL NO-UNDO.
DEFINE VARIABLE kskapapph AS HANDLE NO-UNDO.
DEFINE VARIABLE colquery AS CHARACTER NO-UNDO.
DEFINE VARIABLE cdcvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE svar AS LOGICAL NO-UNDO.
DEFINE VARIABLE ktmultip AS DECIMAL NO-UNDO.
DEFINE TEMP-TABLE impmtrl
   FIELD ENR AS CHARACTER
   FIELD BENAMNING AS CHARACTER
   FIELD ANTAL AS INTEGER
   FIELD PRIS AS DECIMAL.

DEFINE TEMP-TABLE tidin
   FIELD TIN AS CHARACTER FORMAT "X(256)".
DEFINE BUFFER konbuff FOR kon_val.
DEFINE BUFFER skapbuff FOR berskaptemp.
DEFINE BUFFER listbuff FOR list_mtrl.
DEFINE QUERY skapq FOR skapbuff.
DEFINE VARIABLE kon_valkh AS HANDLE NO-UNDO.
DEFINE VARIABLE berskaptemph      AS HANDLE NO-UNDO.
DEFINE VARIABLE mtrlrowID AS ROWID NO-UNDO.
DEFINE VARIABLE mtrl_rowid AS ROWID NO-UNDO. 

framesizeh = framesizeextrah.
kon_valkh = TEMP-TABLE  kon_val:DEFAULT-BUFFER-HANDLE.
berskaptemph = TEMP-TABLE  berskaptemp:DEFAULT-BUFFER-HANDLE.
ON 'VALUE-CHANGED' OF BRW_KAB PERSISTENT RUN vbrwkab_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK' OF BRW_SKAP PERSISTENT RUN mbrwskap_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_BORT PERSISTENT RUN btnbort_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_KSKAP PERSISTENT RUN btnkskap_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_MIN PERSISTENT RUN btnmin_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_NER PERSISTENT RUN btnner_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_PLUS PERSISTENT RUN btnplus_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_TYP1 PERSISTENT RUN btntyp1_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_TYP2 PERSISTENT RUN btntyp2_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_TYP3 PERSISTENT RUN btntyp3_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_UPP PERSISTENT RUN btnupp_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF FBTN_ANT PERSISTENT RUN fbtnant_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF FBTN_KORT PERSISTENT RUN fbtnkort_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF FBTN_MTRL PERSISTENT RUN fbtnmtrl_UI IN THIS-PROCEDURE.

PROCEDURE fbtnmtrl_UI :
   {muswait.i}
   repovar = FALSE.
   FIND FIRST kon_val WHERE kon_val.NUM = valnum AND
   (kon_val.F2 NE "" OR kon_val.F3 NE "" OR kon_val.F3 NE "" OR 
   kon_val.F4 NE "" OR kon_val.F5 NE "" OR kon_val.F6 NE "")
   USE-INDEX NUM2 NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:
      RUN selectfoc_UI (INPUT 1).
      ASSIGN
      val_row = ROWID(kon_val)
      repovar = TRUE.
   END.
   FIND FIRST kon_val WHERE ROWID(kon_val) = spar_rowid NO-LOCK NO-ERROR.   
   kon_rowid = ROWID(kon_val).     
   {musarrow.i}
   RUN btnkskapmat_UI IN huvprogh.
   IF VALID-HANDLE(btnkskapmtrlh) THEN DO:
      RUN eantfix_UI IN btnkskapmtrlh.
   END.
   
END PROCEDURE.
PROCEDURE fbtnkort_UI :
   {muswait.i}      
   ASSIGN
   kon_rowid = spar_rowid
   kabkortvar = TRUE.   
   FIND FIRST kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.   
   FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM USE-INDEX NUM
   NO-LOCK NO-ERROR.   
   RUN fritempbort_UI.       
   IF AVAILABLE kon_id THEN DO:
      FIND FIRST fri_temp WHERE fri_temp.NUM = kon_id.NUM  NO-LOCK NO-ERROR.
      IF NOT AVAILABLE fri_temp THEN DO:
         MESSAGE "Det finns inga kablar!"
         VIEW-AS ALERT-BOX.
         RETURN NO-APPLY.
      END.  
      RUN btnfri_UI IN huvprogh.
   END.
   ELSE DO:
      MESSAGE "Ni har inte identifierat skåpet. Funktionen är inte möjlig att utföra."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN NO-APPLY.
   END.       
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnupp_UI :
   
   {muswait.i}
   RUN selectfoc_UI (INPUT 1).
   ASSIGN
   frannr = kon_val.SKAPNUM
   lin_rowid = ROWID(kon_val).
   RUN inkopkoll_UI (INPUT 1, OUTPUT musz, OUTPUT antalinkvar).
   IF musz = TRUE THEN DO:            
      MESSAGE "Ni kan inte ändra ordning i denna konstruktion. Den är inköpt via inköpsrutinen!"
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      musz = FALSE.
      RETURN.
   END.
   FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
   list_mtrl.SKAPNUM = kon_val.SKAPNUM USE-INDEX NUM2:
      list_mtrl.SKAPNUM = 999.
   END.
   FIND FIRST markgrupp WHERE markgrupp.NUM = kon_val.NUM AND markgrupp.KABNR = kon_val.SKAPNUM NO-ERROR.
   IF AVAILABLE markgrupp THEN markgrupp.KABNR = 999.
   FIND FIRST fri_temp WHERE fri_temp.NUM = kon_val.NUM AND fri_temp.KABNR = kon_val.SKAPNUM NO-LOCK NO-ERROR.
   IF AVAILABLE fri_temp THEN fri_temp.KABNR = 999.
   FIND FIRST kskkon_val WHERE kskkon_val.NUM = kon_val.NUM AND  kskkon_val.SKAPNUM = kon_val.SKAPNUM NO-LOCK NO-ERROR. 
   IF AVAILABLE kskkon_val  THEN kskkon_val.SKAPNUM = 999.
   RUN pselectfoc_UI (INPUT 1).
   ASSIGN
   tillnr = kon_val.SKAPNUM.
   IF kon_val.KSKAP = FALSE THEN DO:
      ASSIGN
      bytvar = TRUE
      kon_val.KSKAP = TRUE
      ordvar = kon_val.ORD
      idvar = kon_val.ID
      id2var = kon_val.ID2
      extravar = kon_val.EXTRA
      extravar1 = kon_val.EXTRA1
      extravar2 = kon_val.EXTRA2
      upplagvar = kon_val.UPPLAG
      anmarkvar = kon_val.ANMARK
      kon_val.ORD = 0
      kon_val.ID = FALSE
      kon_val.ID2 = ""
      kon_val.UPPLAG = ?
      kon_val.ANMARK = "".
   END.
   ELSE DO:
      bytvar = FALSE.
   END.
   FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND
   list_mtrl.SKAPNUM = kon_val.SKAPNUM USE-INDEX NUM2:
      list_mtrl.SKAPNUM = frannr.
   END.
   FIND FIRST markgrupp WHERE markgrupp.NUM = kon_val.NUM AND markgrupp.KABNR = kon_val.SKAPNUM NO-ERROR.
   IF AVAILABLE markgrupp THEN markgrupp.KABNR = frannr.
   FIND FIRST fri_temp WHERE fri_temp.NUM = kon_val.NUM AND fri_temp.KABNR = kon_val.SKAPNUM NO-LOCK NO-ERROR.
   IF AVAILABLE fri_temp THEN fri_temp.KABNR = frannr.
   FIND FIRST kskkon_val WHERE kskkon_val.NUM = kon_val.NUM AND  kskkon_val.SKAPNUM = kon_val.SKAPNUM NO-LOCK NO-ERROR. 
   IF AVAILABLE kskkon_val  THEN kskkon_val.SKAPNUM = frannr.
   kon_val.SKAPNUM = frannr.
   FIND kon_val WHERE ROWID(kon_val) = lin_rowid.
   kon_val.SKAPNUM = tillnr.
   IF bytvar = TRUE THEN DO:
      ASSIGN
      kon_val.KSKAP = FALSE
      kon_val.ORD = ordvar
      kon_val.ID = idvar
      kon_val.ID2 = id2var
      kon_val.EXTRA = extravar
      kon_val.EXTRA1 = extravar1
      kon_val.EXTRA2 = extravar2
      kon_val.UPPLAG = upplagvar
      kon_val.ANMARK = anmarkvar
      spar_rowid = ROWID(kon_val).
   END.
   FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
   list_mtrl.SKAPNUM = 999 USE-INDEX NUM2:
      list_mtrl.SKAPNUM = tillnr.
   END.
   FIND FIRST markgrupp WHERE markgrupp.NUM = kon_val.NUM AND markgrupp.KABNR = 999 NO-ERROR.
   IF AVAILABLE markgrupp THEN markgrupp.KABNR = tillnr.
   FIND FIRST fri_temp WHERE fri_temp.NUM = kon_val.NUM AND  fri_temp.KABNR = 999 NO-LOCK NO-ERROR.
   IF AVAILABLE fri_temp THEN fri_temp.KABNR = tillnr.
   FIND FIRST kskkon_val WHERE kskkon_val.NUM = kon_val.NUM AND  kskkon_val.SKAPNUM = 999 NO-LOCK NO-ERROR. 
   IF AVAILABLE kskkon_val  THEN kskkon_val.SKAPNUM = tillnr.
   colquery = " WHERE NUM = " + STRING(valnum) + " AND (F2 NE '' OR F3 NE '' OR F4 NE '' OR F5 NE '' OR F6 NE '') USE-INDEX NUM2".
   RUN setcolsortvar_UI IN brwproc[1] (INPUT colquery).
   RUN openbdynspec_UI IN brwproc[1].
   FIND kon_val WHERE ROWID(kon_val) = lin_rowid NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:
      RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(kon_val)).
      RUN lastselectdyn_UI IN brwproc[1].
   END. 
   {musarrow.i}
END PROCEDURE.
PROCEDURE btntyp3_UI :
   RUN selectfoc_UI (INPUT 1).
   ASSIGN 
   kon_val.TYP = 3
   kon_rowid = ROWID(kon_val).      
   FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
   list_mtrl.SKAPMTRL = TRUE USE-INDEX NUM NO-LOCK NO-ERROR.
   IF NOT AVAILABLE list_mtrl THEN DO:
      RUN skap_UI.
   END.
   ELSE DO:
      RUN skapvalt_UI.    
   END.
   RUN refreshbrw_UI IN brwproc[1].   
   FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:
      RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(kon_val)).
      RUN lastselectdyn_UI IN brwproc[1].
   END.
END PROCEDURE.
PROCEDURE btntyp2_UI :  
   RUN selectfoc_UI (INPUT 1).
   ASSIGN 
   kon_val.TYP = 2
   kon_rowid = ROWID(kon_val). 

     
   FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
   list_mtrl.SKAPMTRL = TRUE USE-INDEX NUM NO-LOCK NO-ERROR.
   IF NOT AVAILABLE list_mtrl THEN DO:
      RUN skap_UI.
   END.
   ELSE DO:
      RUN skapvalt_UI.    
   END.   
   RUN refreshbrw_UI IN brwproc[1].
   FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:
      RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(kon_val)).
      RUN lastselectdyn_UI IN brwproc[1].
   END.

END PROCEDURE.
PROCEDURE btntyp1_UI :
   RUN selectfoc_UI (INPUT 1).
   ASSIGN 
   kon_val.TYP = 1
   kon_rowid = ROWID(kon_val). 
   FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
   list_mtrl.SKAPMTRL = TRUE USE-INDEX NUM NO-LOCK NO-ERROR.
   IF NOT AVAILABLE list_mtrl THEN DO:
      RUN skap_UI.
   END.
   ELSE DO:
      RUN skapvalt_UI.    
   END.
   RUN refreshbrw_UI IN brwproc[1].
   FIND kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:
      RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(kon_val)).
      RUN lastselectdyn_UI IN brwproc[1].
   END.
END PROCEDURE.
PROCEDURE btnplus_UI :
   FIND FIRST berskaptemp WHERE berskaptemp.KTYPKOD = skaptyp AND 
   berskaptemp.MODUL > modulval AND berskaptemp.ENR  = "" 
   USE-INDEX MOD NO-LOCK NO-ERROR.
   IF AVAILABLE berskaptemp THEN DO:
      modulval = berskaptemp.MODUL.
      RUN setcolsortvar_UI IN brwproc[2] (INPUT " WHERE KTYPKOD = '" + skaptyp + "' AND MODUL = " + STRING(modulval) + "").
      RUN openbdynspec_UI IN brwproc[2].
      RUN setorgtitle_UI IN brwproc[2] (INPUT "Dubbelklicka på det skåp som ska användas. Skåp med storlek " + string(modulval)).
      FILL-IN-LED:SCREEN-VALUE = STRING(modulval - skapstorlek).      
   END.
   ELSE DO:
      MESSAGE "Det finns inget större skåp!" 
      VIEW-AS ALERT-BOX TITLE "Meddelande".
   END.  
END PROCEDURE.
PROCEDURE btnner_UI :   
   FOR EACH fri_temp:
      fri_temp.KABADR = fri_temp.KABADR.      
   END.   
   FOR EACH kon_val:
       kon_val.NUM = kon_val.NUM.
   END.
   {muswait.i}
   RUN selectfoc_UI (INPUT 1).
   ASSIGN
   frannr = kon_val.SKAPNUM
   lin_rowid = ROWID(kon_val).
   RUN inkopkoll_UI (INPUT 1, OUTPUT musz, OUTPUT antalinkvar).
   IF musz = TRUE THEN DO:            
      MESSAGE "Ni kan inte ändra ordning i denna konstruktion. Den är inköpt via inköpsrutinen!"
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      musz = FALSE.
      RETURN.
   END.
   FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
   list_mtrl.SKAPNUM = kon_val.SKAPNUM USE-INDEX NUM2:
      list_mtrl.SKAPNUM = 999.
   END.    
   FIND FIRST markgrupp WHERE markgrupp.NUM = kon_val.NUM AND markgrupp.KABNR = kon_val.SKAPNUM NO-ERROR.
   IF AVAILABLE markgrupp THEN markgrupp.KABNR = 999.         
   FIND FIRST fri_temp WHERE fri_temp.NUM = kon_val.NUM AND  fri_temp.KABNR = kon_val.SKAPNUM NO-LOCK NO-ERROR.
   IF AVAILABLE fri_temp THEN fri_temp.KABNR = 999.
   FIND FIRST kskkon_val WHERE kskkon_val.NUM = kon_val.NUM AND  kskkon_val.SKAPNUM = kon_val.SKAPNUM NO-LOCK NO-ERROR. 
   IF AVAILABLE kskkon_val  THEN kskkon_val.SKAPNUM = 999.
   IF kon_val.KSKAP = FALSE THEN DO:   
      ASSIGN
      bytvar = TRUE
      kon_val.KSKAP = TRUE
      ordvar = kon_val.ORD
      idvar = kon_val.ID
      id2var = kon_val.ID2
      extravar = kon_val.EXTRA
      extravar1 = kon_val.EXTRA1
      extravar2 = kon_val.EXTRA2
      upplagvar = kon_val.UPPLAG
      anmarkvar = kon_val.ANMARK
      kon_val.ORD = 0
      kon_val.ID = FALSE
      kon_val.ID2 = ""
      kon_val.UPPLAG = ?
      kon_val.ANMARK = "".
   END.
   ELSE DO:
      bytvar = FALSE.
   END.   
   RUN nselectfoc_UI (INPUT 1).
   ASSIGN
   tillnr = kon_val.SKAPNUM.      
   FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
   list_mtrl.SKAPNUM = kon_val.SKAPNUM USE-INDEX NUM2:
      list_mtrl.SKAPNUM = frannr.
   END.
   FIND FIRST markgrupp WHERE markgrupp.NUM = kon_val.NUM AND markgrupp.KABNR = kon_val.SKAPNUM NO-ERROR.
   IF AVAILABLE markgrupp THEN markgrupp.KABNR = frannr.            
   FIND FIRST fri_temp WHERE fri_temp.NUM = kon_val.NUM AND  fri_temp.KABNR = kon_val.SKAPNUM NO-LOCK NO-ERROR.
   IF AVAILABLE fri_temp THEN fri_temp.KABNR = frannr.
   FIND FIRST kskkon_val WHERE kskkon_val.NUM = kon_val.NUM AND  kskkon_val.SKAPNUM = kon_val.SKAPNUM NO-LOCK NO-ERROR. 
   IF AVAILABLE kskkon_val  THEN kskkon_val.SKAPNUM = frannr.
   kon_val.SKAPNUM = frannr.          
   IF bytvar = TRUE THEN DO:
      ASSIGN
      kon_val.KSKAP = FALSE
      kon_val.ORD = ordvar
      kon_val.ID = idvar
      kon_val.ID2 = id2var
      kon_val.EXTRA = extravar
      kon_val.EXTRA1 = extravar1
      kon_val.EXTRA2 = extravar2
      kon_val.UPPLAG = upplagvar
      kon_val.ANMARK = anmarkvar
      spar_rowid = ROWID(kon_val).
   END.     
   FIND kon_val WHERE ROWID(kon_val) = lin_rowid.
   kon_val.SKAPNUM = tillnr.
   FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
   list_mtrl.SKAPNUM = 999 USE-INDEX NUM2:
      list_mtrl.SKAPNUM = tillnr.
   END.
   FIND FIRST markgrupp WHERE markgrupp.NUM = kon_val.NUM AND markgrupp.KABNR = 999 NO-ERROR.
   IF AVAILABLE markgrupp THEN markgrupp.KABNR = tillnr.
   FIND FIRST fri_temp WHERE fri_temp.NUM = kon_val.NUM AND fri_temp.KABNR = 999 NO-LOCK NO-ERROR.
   IF AVAILABLE fri_temp THEN fri_temp.KABNR = tillnr.
   FIND FIRST kskkon_val WHERE kskkon_val.NUM = kon_val.NUM AND  kskkon_val.SKAPNUM = 999 NO-LOCK NO-ERROR. 
   IF AVAILABLE kskkon_val  THEN kskkon_val.SKAPNUM = tillnr.   
   colquery = " WHERE NUM = " + STRING(valnum) + " AND (F2 NE '' OR F3 NE '' OR F4 NE '' OR F5 NE '' OR F6 NE '') USE-INDEX NUM2".
   RUN setcolsortvar_UI IN brwproc[1] (INPUT colquery).
   RUN openbdynspec_UI IN brwproc[1].                                                                                                                                                                                                   
   FIND kon_val WHERE ROWID(kon_val) = lin_rowid NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO:
      RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(kon_val)).
      RUN lastselectdyn_UI IN brwproc[1].
   END. 
   {musarrow.i}
END PROCEDURE.
PROCEDURE btnmin_UI :   
   FIND LAST berskaptemp  WHERE berskaptemp.KTYPKOD = skaptyp AND 
   berskaptemp.MODUL < modulval AND berskaptemp.MODUL > skapstorlek AND berskaptemp.ENR = "" 
   USE-INDEX MOD NO-LOCK NO-ERROR.
   IF AVAILABLE berskaptemp THEN DO:
      modulval = berskaptemp.MODUL.
      RUN setcolsortvar_UI IN brwproc[2] (INPUT " WHERE KTYPKOD = '" + skaptyp + "' AND MODUL = " + STRING(modulval) + "").
      RUN openbdynspec_UI IN brwproc[2].
      RUN setorgtitle_UI IN brwproc[2] (INPUT "Dubbelklicka på det skåp som ska användas. Skåp med storlek " + string(modulval)).
      FILL-IN-LED:SCREEN-VALUE = STRING(modulval - skapstorlek).      
   END.
   ELSE DO:
      MESSAGE "Det finns inget mindre skåp!" 
      VIEW-AS ALERT-BOX TITLE "Meddelande".
   END.  
END PROCEDURE.
PROCEDURE btnkskap_UI :
   APPLY "MOUSE-SELECT-DBLCLICK" TO BRW_SKAP.
END PROCEDURE.

PROCEDURE btnbort_UI :   
   {muswait.i} 
   RUN selectfoc_UI (INPUT 1).
   RUN inkopkoll_UI (INPUT 3, OUTPUT musz, OUTPUT antalinkvar).
   IF musz = TRUE THEN DO:            
      MESSAGE "Ni kan inte ta bort denna konstruktionsdel. Den är inköpt via inköpsrutinen!"
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      musz = FALSE.
      RETURN.
   END.
   MESSAGE "Vill du ta bort - " + kon_val.F1 kon_val.F2 kon_val.F3 kon_val.F4 kon_val.F5 kon_val.F6  + "."
   VIEW-AS ALERT-BOX
   QUESTION BUTTONS YES-NO TITLE "Ta bort" UPDATE svar AS LOGICAL.         
   IF svar = FALSE THEN RETURN NO-APPLY.
   IF svar THEN DO:  
      IF kon_val.KSKAP = FALSE THEN DO:         
         FIND FIRST konbuff WHERE konbuff.NUM = kon_val.NUM AND 
         konbuff.KSKAP = TRUE AND (konbuff.F2 NE "" OR konbuff.F3 NE "" OR 
         konbuff.F3 NE "" OR konbuff.F4 NE "" OR konbuff.F5 NE "" OR 
         konbuff.F6 NE "") USE-INDEX NUM2 NO-LOCK NO-ERROR.
         IF AVAILABLE konbuff THEN DO:
            FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
            list_mtrl.SKAPNUM = kon_val.SKAPNUM USE-INDEX NUM2:
               DELETE list_mtrl.
            END.
            FIND FIRST fri_temp WHERE fri_temp.NUM = kon_val.NUM AND
            fri_temp.KABNR = kon_val.SKAPNUM NO-LOCK NO-ERROR.
            IF AVAILABLE fri_temp THEN DELETE fri_temp.
            FOR EACH list_mtrl WHERE list_mtrl.NUM = konbuff.NUM AND 
            list_mtrl.SKAPNUM = konbuff.SKAPNUM USE-INDEX NUM2:
               list_mtrl.SKAPNUM = kon_val.SKAPNUM.
            END.

            FIND FIRST fri_temp WHERE fri_temp.NUM = konbuff.NUM AND
            fri_temp.KABNR = konbuff.SKAPNUM NO-LOCK NO-ERROR.
            IF AVAILABLE fri_temp THEN DO:
               fri_temp.KABNR = kon_val.SKAPNUM.
            END.
            ASSIGN
            konbuff.KSKAP = FALSE
            konbuff.ORD = kon_val.ORD
            konbuff.SKAPNUM = kon_val.SKAPNUM
            konbuff.ID = kon_val.ID
            konbuff.ID2 = kon_val.ID2
            konbuff.UPPLAG = kon_val.UPPLAG
            konbuff.ANMARK = kon_val.ANMARK
            spar_rowid = ROWID(konbuff).            
         END.
         ELSE DO:
            MESSAGE "Ni kan inte ta bort denna kabel då den är kopplad till huvudkonstruktionen. Vill Ni ta bort denna ta då bort konstruktionen."
            VIEW-AS ALERT-BOX TITLE "Meddelande".
            RETURN NO-APPLY.
         END.                 
         DELETE kon_val.
      END.
      ELSE DO:      
         FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
         list_mtrl.SKAPNUM = kon_val.SKAPNUM USE-INDEX NUM2:
            DELETE list_mtrl.
         END. 
         FIND FIRST fri_temp WHERE fri_temp.NUM = kon_val.NUM AND
         fri_temp.KABNR = kon_val.SKAPNUM NO-LOCK NO-ERROR.
         IF AVAILABLE fri_temp THEN DELETE fri_temp.
         DELETE kon_val.                     
      END.   
      RUN selnextprevrow_UI IN brwproc[1].
   END. 
   colquery = " WHERE NUM = " + STRING(valnum) + " AND (F2 NE '' OR F3 NE '' OR F4 NE '' OR F5 NE '' OR F6 NE '') USE-INDEX NUM2".
   RUN setcolsortvar_UI IN brwproc[1] (INPUT colquery).
   RUN openbdynspec_UI IN brwproc[1]. 
   RUN lastselectdyn_UI IN brwproc[1].
   FIND FIRST kon_val WHERE ROWID(kon_val) = spar_rowid NO-LOCK NO-ERROR.   
   kon_rowid = ROWID(kon_val).         
   FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
   list_mtrl.SKAPMTRL = TRUE USE-INDEX NUM NO-LOCK NO-ERROR.
   IF NOT AVAILABLE list_mtrl THEN DO:
      RUN skap_UI.
   END.
   ELSE DO:
      RUN skapvalt_UI.    
   END.   
   {musarrow.i}
END PROCEDURE.
PROCEDURE mbrwskap_UI :
   /*HÄR*/
   {muswait.i}      
   FIND kon_val WHERE ROWID(kon_val) = spar_rowid.
   counter = kon_val.NUM.   
   RUN inkopkoll_UI (INPUT 4, OUTPUT musz, OUTPUT antalinkvar).
   IF musz = TRUE THEN DO:            
      MESSAGE "Ni kan inte koppla ett skåp! Det är inköpt via inköpsrutinen!"
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      musz = FALSE.
      RETURN.
   END.                 
   FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
   list_mtrl.SKAPMTRL = TRUE USE-INDEX NUM:
      DELETE list_mtrl.
   END.   
   
   FIND FIRST konbuff WHERE konbuff.NUM = kon_val.NUM AND konbuff.KSKAP = TRUE AND
   konbuff.F2 = "" AND konbuff.F3 = "" AND konbuff.F4 = ""
   AND konbuff.F5 = "" AND konbuff.F6 = ""  NO-LOCK NO-ERROR.
   IF NOT AVAILABLE konbuff THEN DO:         
      CREATE konbuff.
      ASSIGN 
      konbuff.NUM = counter                         
      konbuff.GRUPP = kon_val.GRUPP
      konbuff.F1 = kon_val.F1   
      konbuff.KSKAP = TRUE
      konbuff.TYP = 1
      konbuff.SKAPNUM = 99.
      /*SKAPNUM = 99 FÖR ATT RADEN ALLTID SKA KOMMA SIST*/
   END.
   ELSE DO:
      ASSIGN 
      konbuff.NUM = counter                         
      konbuff.GRUPP = kon_val.GRUPP
      konbuff.F1 = kon_val.F1   
      konbuff.KSKAP = TRUE
      konbuff.TYP = 1
      konbuff.SKAPNUM = 99.
   END.   
   RUN selectfoc_UI (INPUT 2).
   IF AVAILABLE berskaptemp THEN DO:
      OPEN QUERY skapq FOR EACH skapbuff WHERE skapbuff.KTYPKOD = berskaptemp.KTYPKOD AND
      skapbuff.KOD = berskaptemp.KOD AND skapbuff.ENR NE "" USE-INDEX KOD NO-LOCK.
      GET FIRST skapq NO-LOCK.
      DO WHILE AVAILABLE(skapbuff):     
         CREATE list_mtrl.     
         ASSIGN 
         list_mtrl.NUM = konbuff.NUM    
         list_mtrl.SKAPNUM = konbuff.SKAPNUM
         list_mtrl.ENR = skapbuff.ENR
         list_mtrl.BENAMNING = skapbuff.BENAMNING
         list_mtrl.ENHET = LC(skapbuff.ENHET)
         list_mtrl.PRIS = skapbuff.PRIS
         list_mtrl.ANTAL = skapbuff.ANTAL
         list_mtrl.LEVKOD = skapbuff.LEVKOD
         list_mtrl.SKAPMTRL = TRUE
         list_mtrl.SKAPMODUL = berskaptemp.MODUL.    
         
         mtrl_rowid = ROWID(list_mtrl).
         {UTBYTEVALMTRL.I}
         GET NEXT skapq NO-LOCK.
      END.     
      
      RUN fritempskap_UI.
      RUN fritempbort_UI.
      FOR EACH fri_temp WHERE fri_temp.NUM = kon_val.NUM:
         fri_temp.SKAP = berskaptemp.BENAMNING.
      END.
      MESSAGE "Materiel tillhörande skåp: " + STRING(berskaptemp.KOD) + " med benämning: " +
      berskaptemp.BENAMNING + " har kopplats till konstruktionen." VIEW-AS ALERT-BOX TITLE "Meddelande".
      CLOSE QUERY skapq.
   END.
   ASSIGN
   FILL-IN-KOPSKAP:SCREEN-VALUE = "Skåp är valt!"
   FILL-IN-KOPSKAP:FGCOLOR = 1.
   {musarrow.i}    
END PROCEDURE.
PROCEDURE fritempbort_UI :
   FOR EACH fri_temp WHERE fri_temp.NUM = kon_val.NUM AND fri_temp.KABNR = 0:
      DELETE fri_temp.
   END.
   FOR EACH fri_temp WHERE fri_temp.NUM = kon_val.NUM AND fri_temp.KABNR = 99:
      DELETE fri_temp.
   END.
   
   /* ONE vill få in kabelskåpsbyten när inga kablar är valda . de vill kunna välja TYP och räkna moduler Lena20210519
   FOR EACH fri_temp WHERE fri_temp.NUM = kon_val.NUM AND fri_temp.BENAMNING = '' AND  fri_temp.KABADR = '':      
      DELETE fri_temp.
   END.*/  
END PROCEDURE.
PROCEDURE fritempskap_UI :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
   {FRITEMPSKAP.I}
END PROCEDURE.
PROCEDURE fritempskapANVEJ_UI :
    
    
  
END PROCEDURE.
PROCEDURE vbrwkab_UI :
   DEBUGGER:SET-BREAK().
   FIND FIRST kon_val WHERE kon_val.NUM = valnum AND
   (kon_val.F2 NE "" OR kon_val.F3 NE "" OR kon_val.F3 NE "" OR 
   kon_val.F4 NE "" OR kon_val.F5 NE "" OR kon_val.F6 NE "")
   USE-INDEX NUM2 NO-LOCK NO-ERROR.
   IF AVAILABLE kon_val THEN DO: 
      kon_val.ANDRAD = "AND".
      RUN selectfoc_UI (INPUT 1).
      FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND
      list_mtrl.SKAPNUM = kon_val.SKAPNUM AND list_mtrl.TYPBER = TRUE 
      USE-INDEX NUM2 NO-LOCK NO-ERROR.
      IF AVAILABLE list_mtrl THEN DO:
         
         IF kon_val.F1 = "cewe" THEN DO:
            ASSIGN 
            BTN_TYP1:HIDDEN = FALSE
            FILL-IN-NR1:HIDDEN = FALSE
            BTN_TYP2:HIDDEN = FALSE
            FILL-IN-NR2:HIDDEN = FALSE                        
            BTN_TYP3:HIDDEN = TRUE
            FILL-IN-NR3:HIDDEN = TRUE        
            FILL-IN-KOP:HIDDEN = FALSE
            FILL-IN-T1:HIDDEN = TRUE
            FILL-IN-T2:HIDDEN = TRUE 
            FILL-IN-T3:HIDDEN = TRUE.        
         END.
         ELSE DO:
            ASSIGN 
            BTN_TYP1:HIDDEN = FALSE
            FILL-IN-NR1:HIDDEN = FALSE
            BTN_TYP2:HIDDEN = FALSE
            FILL-IN-NR2:HIDDEN = FALSE                        
            BTN_TYP3:HIDDEN = FALSE
            FILL-IN-NR3:HIDDEN = FALSE
            FILL-IN-KOP:HIDDEN = FALSE
            FILL-IN-T1:HIDDEN = TRUE 
            FILL-IN-T2:HIDDEN = TRUE 
            FILL-IN-T3:HIDDEN = TRUE.
            IF kon_val.F1 BEGINS  "triar" THEN DO:
               ASSIGN 
               FILL-IN-T1:HIDDEN = FALSE
               FILL-IN-T2:HIDDEN = FALSE 
               FILL-IN-T3:HIDDEN = FALSE.
            END.   
                       
         END.         
      END.  
      ELSE DO:
         ASSIGN 
         BTN_TYP1:HIDDEN = TRUE
         FILL-IN-NR1:HIDDEN = TRUE
         BTN_TYP2:HIDDEN = TRUE
         FILL-IN-NR2:HIDDEN = TRUE  
         BTN_TYP3:HIDDEN = TRUE
         FILL-IN-NR3:HIDDEN = TRUE
         FILL-IN-KOP:HIDDEN = TRUE
         FILL-IN-T1:HIDDEN = TRUE    
         FILL-IN-T2:HIDDEN = TRUE
         FILL-IN-T3:HIDDEN = TRUE.    
      END.   
      FIND FIRST fri_temp WHERE fri_temp.NUM = kon_val.NUM AND
      fri_temp.KABNR = kon_val.SKAPNUM NO-LOCK NO-ERROR.
      IF AVAILABLE fri_temp THEN DO:                     
         ASSIGN FILL-IN-ADRKAB:SCREEN-VALUE = fri_temp.KABADR.
         FILL-IN-ADRKAB:HIDDEN = TRUE.
      END.
      ELSE FILL-IN-ADRKAB:HIDDEN = TRUE.
   END.
   

END PROCEDURE.
PROCEDURE allstartbrw_UI :
   IF NOT VALID-HANDLE(brwproc[1]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[1] (INPUT BRW_KAB).
   IF NOT VALID-HANDLE(brwproc[2]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[2] (INPUT BRW_SKAP).  
   RUN brwjoin_UI IN brwproc[1] (INPUT "fri_temp where fri_temp.NUM = kon_val.NUM AND fri_temp.KABNR = kon_val.SKAPNUM").     
   RUN setcolindex_UI IN brwproc[2] (INPUT "KOD").
   RUN brwsetupstop_UI IN brwproc[1] (INPUT 1).
   RUN brwsetupstop_UI IN brwproc[2] (INPUT 1).
   IF NOT VALID-HANDLE(kskapapph) THEN DO:
      IF Guru.Konstanter:appcon THEN DO:
         RUN KSKAPAPP.P PERSISTENT SET kskapapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT (INPUT INTEGER(valaonr), INPUT valomrade). 
      END.
      ELSE DO:
         RUN KSKAPAPP.P PERSISTENT SET kskapapph (INPUT INTEGER(valaonr), INPUT valomrade).
      END. 
   END.
END PROCEDURE.


PROCEDURE main_UI :
   {muswait.i}
   {ALLSTARTDYN.I}
   DEFINE VARIABLE valdskaptyp AS CHARACTER NO-UNDO.        
   RUN berskaphmt2_UI IN kskapapph (INPUT xtillyvar, OUTPUT TABLE berskaptemp).
   FIND kon_val WHERE ROWID(kon_val) = kon_rowid.
   FIND FIRST bbenamntemp WHERE bbenamntemp.KONSKOD = kon_val.GRUPP 
   NO-LOCK NO-ERROR.   
   IF Guru.Konstanter:globforetag = "gran" OR Guru.Konstanter:globforetag = "NAEK" OR Guru.Konstanter:globforetag = "celpa" OR Guru.Konstanter:globforetag = "CPOMA" THEN DO:
      FILL-IN-ADRKAB:LABEL = "Skylttext".                   
   END.   
   ASSIGN   
   valnum = kon_val.NUM 
   skaptyp = kon_val.F1      
   FILL-IN-B1:SCREEN-VALUE = bbenamntemp.B1
   FILL-IN-F1:SCREEN-VALUE = kon_val.F1.   
   FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM USE-INDEX NUM
   NO-LOCK NO-ERROR.   
   FIND FIRST fri_temp WHERE fri_temp.NUM = kon_val.NUM AND fri_temp.SKAP NE ""
   NO-LOCK NO-ERROR.   
   IF AVAILABLE fri_temp THEN DO:
      valdskaptyp = fri_temp.SKAP.
      FOR EACH fri_temp WHERE fri_temp.NUM = kon_val.NUM AND fri_temp.SKAP = "" NO-LOCK:
         fri_temp.SKAP = valdskaptyp.
      END.
   END.   
   ASSIGN       
   FILL-IN-B2:SCREEN-VALUE = bbenamntemp.ID2
   FILL-IN-B3:SCREEN-VALUE = "Fri ID".
   IF AVAILABLE kon_id THEN DO:
      IF kon_id.ENDKOMB = FALSE THEN DO:      
         {MARKKABVAL.I}
         IF enval = TRUE AND  kon_val.GRUPP NE 0 THEN DO:            
            IF kon_id.NATNR NE ? THEN FILL-IN-F2:SCREEN-VALUE = STRING(kon_id.NATNR).         
            FIND FIRST annamntemp NO-LOCK NO-ERROR.
            FILL-IN-B2:SCREEN-VALUE =  annamntemp.TAB3.
         END.
         ELSE DO:
            IF kon_id.FRI2 NE ? THEN FILL-IN-F2:SCREEN-VALUE = STRING(kon_id.FRI2).         
         END.         
      END.
      ELSE DO:
         FILL-IN-F2:SCREEN-VALUE = "Ej identifierat".
      END.   
      IF kon_id.FRI3 NE ? THEN DO:
         FILL-IN-F3:SCREEN-VALUE = STRING(kon_id.FRI3).
      END.
      ELSE DO:
         FILL-IN-F3:SCREEN-VALUE = "Ej identifierat".
      END.
   END.         
   ELSE FILL-IN-F2:SCREEN-VALUE = "Ej identifierat".
   ASSIGN   
   FILL-IN-NR1:SCREEN-VALUE = "1"
   FILL-IN-NR2:SCREEN-VALUE = "2"
   FILL-IN-NR3:SCREEN-VALUE = "3"
   modulval = 0
   spar_rowid = kon_rowid.    
   FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM NO-LOCK NO-ERROR.         
   IF NOT AVAILABLE list_mtrl THEN DO: 
      valnum = kon_val.NUM.
      EMPTY TEMP-TABLE sparakon_val NO-ERROR. 
      FOR EACH kon_val WHERE kon_val.NUM = valnum:
         CREATE sparakon_val.
         BUFFER-COPY kon_val TO sparakon_val.

      END.         
      IF Guru.Konstanter:appcon THEN DO:                           
         RUN BERHMTKONMTRL.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
         (INPUT valaonr, INPUT valomrade, INPUT datvar,INPUT valnum, INPUT xtillyvar, INPUT TABLE sparakon_val, 
         OUTPUT TABLE list_mtrl APPEND).
      END.
      ELSE DO:
         RUN BERHMTKONMTRL.P
         (INPUT valaonr, INPUT valomrade, INPUT datvar,INPUT valnum, INPUT xtillyvar, INPUT TABLE sparakon_val, 
         OUTPUT TABLE list_mtrl APPEND).
      END.
        
      {NETTOMARK.I}
      EMPTY TEMP-TABLE sparakon_val NO-ERROR.       
   END.     
   ELSE DO: 
     valnum = valnum.
   END.      
   RUN konlabel_UI IN huvprogh 
   (INPUT "KSKAP",
    INPUT bbenamntemp.B2,
    INPUT bbenamntemp.B3,
    INPUT bbenamntemp.B4,
    INPUT bbenamntemp.B5,
    INPUT bbenamntemp.B6,
    INPUT "Typ",
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "").
   FIND kon_val WHERE ROWID(kon_val) = spar_rowid.   
   DEBUGGER:SET-BREAK(). 
   RUN fritempskap_UI.
   RUN fritempbort_UI.
   DEBUGGER:SET-BREAK().  
   colquery = " WHERE NUM = " + STRING(valnum) + " AND (F2 NE '' OR F3 NE '' OR F4 NE '' OR F5 NE '' OR F6 NE '') USE-INDEX NUM2".  
   RUN setcolsortvar_UI IN brwproc[1] (INPUT colquery).   
   RUN openbdynspec_UI IN brwproc[1].
   FIND kon_val WHERE ROWID(kon_val) = spar_rowid.      
   IF SUBSTRING(kon_val.F1,1,3) BEGINS "CDC" OR  SUBSTRING(kon_val.F1,1,8) BEGINS "Kabeldon" THEN DO:            
      FBTN_ANT:LABEL = "ConnectIT".
      cdcvar = TRUE.
   END.
   ELSE IF SUBSTRING(kon_val.F1,1,4) BEGINS "Cewe" THEN DO:
      cdcvar = FALSE.
      FBTN_ANT:LABEL = "Z-sysPlan".
   END.
   ELSE FBTN_ANT:HIDDEN  = TRUE.
   /*Anders Olsson Elpool i Umeå AB  21 feb 2017 14:21:28 
   vi släcker kopplingen 
   */
   FBTN_ANT:HIDDEN  = TRUE.       
   ASSIGN
   BTN_PLUS:HIDDEN = TRUE
   BTN_MIN:HIDDEN = TRUE.  
   APPLY "VALUE-CHANGED" TO BRW_KAB .
    
   FIND kon_val WHERE ROWID(kon_val) = spar_rowid.   
   FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
   list_mtrl.SKAPMTRL = TRUE USE-INDEX NUM NO-LOCK NO-ERROR.
   IF NOT AVAILABLE list_mtrl THEN DO:
      RUN skap_UI.
   END.
   ELSE DO:      
      RUN skapvalt_UI.      
   END. 
   RUN main3_UI.   
   FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND 
   list_mtrl.SKAPMTRL = TRUE USE-INDEX NUM NO-LOCK NO-ERROR.
   IF NOT AVAILABLE list_mtrl THEN DO:
      FIND FIRST konbuff WHERE konbuff.NUM = kon_val.NUM AND konbuff.KSKAP = TRUE AND
      konbuff.F1 = kon_val.F1 AND konbuff.F2 = "ConnectIT" NO-LOCK NO-ERROR.
      IF NOT AVAILABLE konbuff THEN DO:
         ASSIGN
         FILL-IN-KOPSKAP:SCREEN-VALUE = "Inget skåp är valt!"
         FILL-IN-KOPSKAP:FGCOLOR = 12.
      END.
      ELSE DO:
         ASSIGN
         FILL-IN-KOPSKAP:SCREEN-VALUE = "Skåp är valt!"
         FILL-IN-KOPSKAP:FGCOLOR = 1.
      END.
   END.
   ELSE DO:
      ASSIGN
      FILL-IN-KOPSKAP:SCREEN-VALUE = "Skåp är valt!"
      FILL-IN-KOPSKAP:FGCOLOR = 1.
   END.
   RUN main2_UI.
   FIND FIRST del_val WHERE del_val.NUM = valnum NO-LOCK NO-ERROR.
   IF AVAILABLE del_val THEN DO:      
      ASSIGN
      BTN_PLUS:HIDDEN = TRUE
      BTN_MIN:HIDDEN = TRUE
      BTN_BORT:HIDDEN = TRUE
      BRW_SKAP:HIDDEN = TRUE
      BTN_KSKAP:HIDDEN = TRUE
      FILL-IN-LED:HIDDEN = TRUE.  
      IF Guru.Konstanter:globforetag = "vast" THEN DO:
         FILL-IN-MODUL:HIDDEN = FALSE.
      END.                     
      ELSE FILL-IN-MODUL:HIDDEN = TRUE.
   END.
   RUN PlaceraKnapp_UI.
   {musarrow.i}
END PROCEDURE.
PROCEDURE PlaceraKnapp_UI :
   Guru.Konstanter:LabelFlytt(FILL-IN-MODUL).
   Guru.Konstanter:LabelFlytt(FILL-IN-LED).      
END PROCEDURE.

PROCEDURE main2_UI :
   {MARKKABVAL.I}   
   IF enval = TRUE AND  kon_val.GRUPP NE 0 THEN DO:  
      ASSIGN
      FILL-IN-KOPSKAP:HIDDEN = TRUE
      FILL-IN-KORT:SCREEN-VALUE = "Markstation".
   END.
   ELSE DO:
      ASSIGN
      FILL-IN-KOPSKAP:HIDDEN = FALSE
      FILL-IN-KORT:SCREEN-VALUE = "Kabelskåp".
   END.   
END PROCEDURE.

PROCEDURE main3_UI :
   FIND kon_val WHERE ROWID(kon_val) = spar_rowid.      
   {MARKKABVAL.I}
   IF enval = TRUE AND  kon_val.GRUPP NE 0 THEN DO:            
      ASSIGN
      FILL-IN-NR1:HIDDEN = TRUE              
      FILL-IN-NR2:HIDDEN = TRUE              
      FILL-IN-NR3:HIDDEN = TRUE              
      BRW_SKAP:HIDDEN = TRUE                 
      BTN_KSKAP:HIDDEN = TRUE                
      BTN_PLUS:HIDDEN = TRUE                 
      BTN_MIN:HIDDEN = TRUE                  
      BTN_TYP1:HIDDEN = TRUE                 
      BTN_TYP2:HIDDEN = TRUE                 
      BTN_TYP3:HIDDEN = TRUE                 
      FBTN_ANT:HIDDEN = TRUE                 
      FILL-IN-LED:HIDDEN = TRUE              
      FILL-IN-KOP:HIDDEN = TRUE
      FILL-IN-T1:HIDDEN = TRUE
      FILL-IN-T2:HIDDEN = TRUE
      FILL-IN-T3:HIDDEN = TRUE.
      IF Guru.Konstanter:globforetag = "vast" THEN DO:         
         FILL-IN-MODUL:HIDDEN = FALSE.
      END.                     
      ELSE FILL-IN-MODUL:HIDDEN = TRUE.            
   END.
   ELSE DO:
      ASSIGN
      BTN_PLUS:HIDDEN = FALSE
      BTN_MIN:HIDDEN = FALSE
      BTN_BORT:HIDDEN = FALSE
      BRW_SKAP:HIDDEN = FALSE
      BTN_KSKAP:HIDDEN = FALSE
      FILL-IN-LED:HIDDEN = FALSE.      
   END.
   IF Guru.Konstanter:globforetag = "gran" THEN DO:
      BTN_TYP2:LOAD-IMAGE("BILDER\typ2.bmp").
      BTN_TYP3:LOAD-IMAGE("BILDER\typ3.bmp").
      IF kon_val.F1 BEGINS "CDC" THEN DO:
         FILL-IN-EON:SCREEN-VALUE = "Minimikrav på reserv E.ON: 12". 
         FILL-IN-EON:HIDDEN = FALSE.
      END.
      ELSE IF kon_val.F1 BEGINS "CEWE" THEN DO:
         FILL-IN-EON:SCREEN-VALUE = "Minimikrav på reserv E.ON: 154". 
         FILL-IN-EON:HIDDEN = FALSE.
      END.
      ELSE IF kon_val.F1 BEGINS "OTD" THEN DO:
         FILL-IN-EON:SCREEN-VALUE = "Minimikrav på reserv E.ON:  2". 
         FILL-IN-EON:HIDDEN = FALSE.
      END.
      ELSE IF kon_val.F1 BEGINS "TRIAR" THEN DO:         
         BTN_TYP2:LOAD-IMAGE("BILDER\typ2s.jpg").
         BTN_TYP3:LOAD-IMAGE("BILDER\typ3s.jpg").
         FILL-IN-EON:SCREEN-VALUE = "Minimikrav på reserv E.ON: 26". 
         FILL-IN-EON:HIDDEN = FALSE.
      END.
      ELSE IF kon_val.F1 = "KS" THEN DO:
         BTN_TYP2:LOAD-IMAGE("BILDER\typ2s.jpg").
         BTN_TYP3:LOAD-IMAGE("BILDER\typ3s.jpg").
         FILL-IN-EON:SCREEN-VALUE = "Minimikrav på reserv E.ON:  2".
         FILL-IN-EON:HIDDEN = FALSE.
      END.   
      ELSE FILL-IN-EON:HIDDEN = TRUE.
   END.                     
   ELSE FILL-IN-EON:HIDDEN = TRUE.
END PROCEDURE.
PROCEDURE OSkoll_UI :
   DEFINE OUTPUT PARAMETER OSsvar AS LOGICAL NO-UNDO.
   RUN RunningWindows2000_UI IN Guru.Konstanter:hpApi (OUTPUT OSsvar). 
END PROCEDURE.

PROCEDURE inkopkoll_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/      
   {INKOLLFINNS.I}      
END PROCEDURE.

PROCEDURE skapvalt_UI :   
   ASSIGN
   modulval = list_mtrl.SKAPMODUL
   skapstorlek = 0.
   FOR EACH kon_val WHERE kon_val.NUM = valnum USE-INDEX NUM:       
      FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND
      list_mtrl.SKAPNUM = kon_val.SKAPNUM USE-INDEX NUM2:      
         IF list_mtrl.TYPBER = TRUE THEN DO:
            IF list_mtrl.ANTAL > 0 THEN DO:
               skapstorlek = skapstorlek + (list_mtrl.MODUL * kon_val.TYP).
            END.   
         END.
         ELSE DO:
            IF list_mtrl.ANTAL > 0 THEN DO:
               skapstorlek = skapstorlek + list_mtrl.MODUL.
            END.   
         END.   
      END.      
      IF Guru.Konstanter:globforetag = "FORS" OR Guru.Konstanter:globforetag = "elpa" THEN DO:      
         IF kon_val.F2 = "BEF" OR kon_val.F2 = "TOM" THEN DO:
            IF kon_val.F1 BEGINS "CDC" OR  kon_val.F1 BEGINS "Kabeldon" THEN skapstorlek = skapstorlek + 3.
            IF kon_val.F1 BEGINS "Cewe" THEN skapstorlek = skapstorlek + 49.
         END.
      END.
   END.    
   RUN setcolsortvar_UI IN brwproc[2] (INPUT " WHERE KTYPKOD = '" + skaptyp + "' AND MODUL = " + STRING(modulval) + "").
   RUN openbdynspec_UI IN brwproc[2].
   RUN setorgtitle_UI IN brwproc[2] (INPUT "Dubbelklicka på det skåp som ska användas. Skåp med storlek " + string(modulval)).
   FILL-IN-LED:SCREEN-VALUE = STRING(modulval - skapstorlek).
   FILL-IN-MODUL:SCREEN-VALUE = STRING(skapstorlek ).
   
   FIND kon_val WHERE ROWID(kon_val) = kon_rowid. 
   IF LOOKUP(STRING(kon_val.GRUPP),Guru.Konstanter:varforetypchar[5]) > 0 THEN.  
   ELSE DO:         
      /*Borde hitta valt skåp, om det inte har blivit för litet  Lena 20080526*/      
      FIND FIRST berskaptemp WHERE berskaptemp.KTYPKOD = skaptyp AND 
      berskaptemp.MODUL >= skapstorlek AND berskaptemp.MODUL GE modulval AND berskaptemp.ENR  = "" 
      USE-INDEX MOD NO-LOCK NO-ERROR.
      IF AVAILABLE berskaptemp THEN DO: 
          /* Denna sätter om modulval till annat än valt, sen vid tryck på mindre så 
          blir det knas, ändring??? - GG 20060815 */
         modulval = berskaptemp.MODUL. 
         FIND FIRST list_mtrl WHERE list_mtrl.NUM = valnum AND 
         list_mtrl.SKAPMTRL = TRUE NO-LOCK NO-ERROR.
         IF AVAILABLE list_mtrl THEN DO:            
            IF list_mtrl.SKAPMODUL = modulval THEN valnum = valnum.
            ELSE IF list_mtrl.SKAPMODUL < modulval THEN 
            MESSAGE "Valt skåp för litet. Byt skåp!" VIEW-AS ALERT-BOX TITLE "Varning!".             
            /*sätt tillbaka modul till valt skåp*/
            modulval = list_mtrl.SKAPMODUL. 
         END.
         ELSE DO:
            valnum = valnum.
         END.
      END.
      ELSE DO:
         MESSAGE "Det finns inget skåp som är tillräckligt stort!" 
         VIEW-AS ALERT-BOX TITLE "Meddelande".
      END.
      ASSIGN
      BTN_PLUS:HIDDEN = FALSE
      BTN_MIN:HIDDEN = FALSE.            
   END.
END PROCEDURE.

PROCEDURE skap_UI :
   
   IF kon_val.F1 = "Cewe" THEN FILL-IN-MODUL:LABEL = "Använda mm". 
   ELSE  FILL-IN-MODUL:LABEL = "Använda moduler".  
   skapstorlek = 0.
   FOR EACH kon_val WHERE kon_val.NUM = valnum USE-INDEX NUM:       
      FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_val.NUM AND
      list_mtrl.SKAPNUM = kon_val.SKAPNUM USE-INDEX NUM2:         
         IF list_mtrl.TYPBER = TRUE THEN DO:
            IF list_mtrl.ANTAL > 0 THEN DO:               
               ktmultip = kon_val.TYP.
               IF kon_val.F1 = "TRIAR" THEN DO:
                  IF kon_val.F3 = "ICNR 2595" THEN DO:
                     IF kon_val.TYP = 2 THEN ktmultip = 1.5.
                     IF kon_val.TYP = 3 THEN ktmultip = 2.
                  END.
                  ELSE IF kon_val.F3 = "ICNR 95 240" THEN DO:
                     IF kon_val.TYP = 2 THEN ktmultip = 1.75.
                     IF kon_val.TYP = 3 THEN ktmultip = 2.25.
                  END.         
               END.
               ELSE IF kon_val.F1 = "KS" OR kon_val.F1 = "STITEC" THEN DO:
                  IF kon_val.F3 = "SAKI 240" THEN DO:
                     IF kon_val.TYP = 2 THEN ktmultip = 1.5.
                     IF kon_val.TYP = 3 THEN ktmultip = 2.
                  END.   
               END.   
               skapstorlek = skapstorlek + (list_mtrl.MODUL * ktmultip).
              /*skapstorlek = skapstorlek + (list_mtrl.MODUL * kon_val.TYP).*/
         
         
            END.   
         END.
         ELSE DO:
            IF list_mtrl.ANTAL > 0 THEN DO:
               skapstorlek = skapstorlek + list_mtrl.MODUL.
            END.   
         END.            
      END.      
      IF Guru.Konstanter:globforetag = "FORS" OR Guru.Konstanter:globforetag = "elpa" THEN DO:      
         IF kon_val.F2 = "BEF" OR kon_val.F2 = "TOM" THEN DO:
            IF kon_val.F1 BEGINS "CDC" OR  kon_val.F1 BEGINS "Kabeldon" THEN skapstorlek = skapstorlek + 3.
            IF kon_val.F1 BEGINS "Cewe" THEN skapstorlek = skapstorlek + 49.
         END.
      END.
   END.
   FILL-IN-MODUL:SCREEN-VALUE = STRING(skapstorlek).    
   FIND kon_val WHERE ROWID(kon_val) = kon_rowid.   
   IF LOOKUP(STRING(kon_val.GRUPP),Guru.Konstanter:varforetypchar[5]) > 0 THEN.
   ELSE DO:   
      FIND FIRST berskaptemp WHERE berskaptemp.KTYPKOD = skaptyp AND 
      berskaptemp.MODUL >= skapstorlek AND berskaptemp.ENR  = "" 
      USE-INDEX MOD NO-LOCK NO-ERROR.
      IF AVAILABLE berskaptemp THEN DO: 
         modulval = berskaptemp.MODUL.
         RUN setcolsortvar_UI IN brwproc[2] (INPUT " WHERE KTYPKOD = '" + skaptyp + "' AND MODUL = " + STRING(modulval) + "").
         RUN openbdynspec_UI IN brwproc[2].         
         RUN setorgtitle_UI IN brwproc[2] (INPUT "Dubbelklicka på det skåp som ska användas. Skåp med storlek " + string(modulval)).
         FILL-IN-LED:SCREEN-VALUE = STRING(modulval - skapstorlek).
         ASSIGN
         BTN_PLUS:HIDDEN = FALSE
         BTN_MIN:HIDDEN = FALSE.
         FIND FIRST list_mtrl WHERE list_mtrl.NUM = valnum AND 
         list_mtrl.SKAPMTRL = TRUE NO-LOCK NO-ERROR.
         IF AVAILABLE list_mtrl THEN DO:
            IF list_mtrl.SKAPMODUL < modulval THEN 
            MESSAGE "Valt skåp för litet. Byt skåp!" 
            VIEW-AS ALERT-BOX TITLE "Varning!".   
         END.
         ELSE DO:
            valnum = valnum.
         END.
      END.
      ELSE DO:
         MESSAGE "Det finns inget skåp som är tillräckligt stort!" 
         VIEW-AS ALERT-BOX TITLE "Meddelande".
      END.
   END.
END PROCEDURE.


PROCEDURE pselectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(kon_valkh) THEN  kon_valkh = TEMP-TABLE kon_val:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(berskaptemph) THEN  berskaptemph = TEMP-TABLE berskaptemp:DEFAULT-BUFFER-HANDLE.
   RUN pselectrowid_UI IN brwproc[brwvald] (OUTPUT brwrowid).
   IF brwvald = 1 THEN FIND FIRST kon_val WHERE ROWID(kon_val) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 2 THEN FIND FIRST berskaptemp WHERE ROWID(berskaptemp) = brwrowid NO-LOCK NO-ERROR.     
END PROCEDURE.
PROCEDURE nselectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(kon_valkh) THEN  kon_valkh = TEMP-TABLE kon_val:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(berskaptemph) THEN  berskaptemph = TEMP-TABLE berskaptemp:DEFAULT-BUFFER-HANDLE.
   RUN nselectrowid_UI IN brwproc[brwvald] (OUTPUT brwrowid).
   IF brwvald = 1 THEN FIND FIRST kon_val WHERE ROWID(kon_val) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 2 THEN FIND FIRST berskaptemp WHERE ROWID(berskaptemp) = brwrowid NO-LOCK NO-ERROR.    
END PROCEDURE.
PROCEDURE selectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.      
  IF NOT VALID-HANDLE(kon_valkh) THEN  kon_valkh = TEMP-TABLE kon_val:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(berskaptemph) THEN  berskaptemph = TEMP-TABLE berskaptemp:DEFAULT-BUFFER-HANDLE.
   RUN selectrowid_UI IN brwproc[brwvald] (OUTPUT brwrowid).
   IF brwvald = 1 THEN FIND FIRST kon_val WHERE ROWID(kon_val) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 2 THEN FIND FIRST berskaptemp WHERE ROWID(berskaptemp) = brwrowid NO-LOCK NO-ERROR.  
END PROCEDURE.

PROCEDURE borthandE_UI :
   DEFINE VARIABLE i AS INTEGER NO-UNDO INITIAL 1.
   DO WHILE i LE 25:
      IF VALID-HANDLE(brwproc[i]) THEN DELETE PROCEDURE brwproc[i] NO-ERROR.
      brwproc[i] = ?.
      i = i + 1.
   END.
END PROCEDURE.
PROCEDURE borthand_UI :
   kon_valkh:EMPTY-TEMP-TABLE() NO-ERROR.
   berskaptemph:EMPTY-TEMP-TABLE() NO-ERROR.
   IF VALID-HANDLE(kon_valkh) THEN   DELETE OBJECT kon_valkh  NO-ERROR.
   IF VALID-HANDLE(berskaptemph) THEN   DELETE OBJECT berskaptemph  NO-ERROR.
   IF VALID-HANDLE(kskapapph) THEN DELETE PROCEDURE kskapapph.
   ASSIGN
   kon_valkh = ?
   berskaptemph = ?.  
   {BORTBRWPROC.I}   
   
END PROCEDURE.
/*körs ej nu!*/
PROCEDURE fbtnant_UI :
   DEFINE VARIABLE regeditnamn AS CHARACTER NO-UNDO.   
   FIND FIRST huvlevtemp NO-LOCK NO-ERROR.
   FIND FIRST levtemp WHERE levtemp.LEVKOD = huvlevtemp.LEVKOD
   NO-LOCK NO-ERROR.
   vald_kundlev = levtemp.LEVKOD.
   EMPTY TEMP-TABLE tidin NO-ERROR.    
   FIND kon_val WHERE ROWID(kon_val) = spar_rowid.     
   RUN inkopkoll_UI (INPUT 1, OUTPUT musz, OUTPUT antalinkvar).
   IF musz = TRUE THEN DO:            
      MESSAGE "Du kan inte köra detta program. Konstruktionen är är inköpt via inköpsrutinen!"
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      musz = FALSE.
      RETURN.
   END.                 
   IF cdcvar = TRUE THEN DO:         
      FIND FIRST konbuff WHERE konbuff.NUM = kon_val.NUM AND konbuff.KSKAP = TRUE AND
      konbuff.F1 = kon_val.F1 AND konbuff.F2 = "ConnectIT" NO-LOCK NO-ERROR.
   END.
   ELSE DO:
      FIND FIRST konbuff WHERE konbuff.NUM = kon_val.NUM AND konbuff.KSKAP = TRUE AND
      konbuff.F1 = kon_val.F1 AND konbuff.F2 = "Z-sysPlan" NO-LOCK NO-ERROR.
   END.
   IF AVAILABLE konbuff THEN DO:
      objnamn = konbuff.F3.
   END.
   ELSE DO:
      objnamn = "".
   END.
   IF Guru.Konstanter:globforetag = "Celpa" OR Guru.Konstanter:globforetag = "cVORD" OR Guru.Konstanter:globforetag = "cVOST" OR 
   Guru.Konstanter:globforetag = "cVSYD" OR Guru.Konstanter:globforetag = "cVAST" THEN DO:
      IF cdcvar = TRUE THEN DO:         
          korfil = 'CONNECTIT\CONNECTIT.EXE'. 
      END.
      ELSE DO:
         korfil = 'ABBCewe\Z3\Z3.EXE'.  
      END.
      utfil = 'c:\program\' + korfil.
      IF SEARCH(utfil) NE ? THEN korfil = utfil.
      ELSE DO:
         utfil = 'C:\Program Files\' + korfil.
         IF SEARCH(utfil) NE ? THEN korfil = utfil.
         ELSE DO:
            utfil = 'C:\Oldprog\' + korfil.
            IF SEARCH(utfil) NE ? THEN korfil = utfil.
            ELSE  DO:
               IF cdcvar = FALSE THEN DO:                  
               END.
               IF SEARCH(utfil) = ? THEN DO:
                  MESSAGE korfil " Finns inte! Kontakta Elpool 090-184540"  VIEW-AS ALERT-BOX.
                  RETURN NO-APPLY.
               END.
               
            END.
         END.
      END.
      korfil = '"' + korfil + '"'. 
   END.
   ELSE IF Guru.Konstanter:globforetag = "GRAN" THEN DO:   
      IF cdcvar = TRUE THEN DO:         
         ASSIGN
         korfil = '"C:\Program files\CONNECTIT\CONNECTIT.EXE"'.
      END.
      ELSE DO:
         ASSIGN
         korfil = '"C:\Program files\ABBCewe\Z3\Z3.EXE"'.
      END.
   END.  
   ELSE DO:
      IF cdcvar = TRUE THEN DO:
         korfil = "".
         regeditnamn = "Software\Kabeldon\ConnectIT".
         LOAD regeditnamn BASE-KEY "HKEY_CURRENT_USER" NO-ERROR.
         IF ERROR-STATUS:ERROR = TRUE THEN DO:
            regeditnamn = "SOFTWARE\Wow6432Node\Kabeldon\ConnectIT".
            LOAD regeditnamn BASE-KEY "HKEY_LOCAL_MACHINE" NO-ERROR.
         END. 
         IF ERROR-STATUS:ERROR = FALSE THEN DO:     
            USE regeditnamn.
            GET-KEY-VALUE SECTION "Path" KEY "Data-catalogue" VALUE korfil.
            UNLOAD regeditnamn.
            
         END.  
         ELSE DO:
            
            korfil = "".
            regeditnamn = "Software\Treffo\ConnectIT2".
            LOAD regeditnamn BASE-KEY "HKEY_CURRENT_USER" NO-ERROR.
            IF ERROR-STATUS:ERROR = FALSE THEN DO:
                USE regeditnamn.
                GET-KEY-VALUE SECTION "Paths" KEY "CR" VALUE korfil.
                UNLOAD regeditnamn.                 
                korfil = REPLACE(korfil,"\\","\").
                korfil = SUBSTRING(korfil,1,(index(korfil,"2.0") + 2)).
                korfil = korfil + "\CONNECTIT2.EXE".
            END.
            
         END.    
         IF INDEX(korfil,"CONNECTIT2.EXE") = 0 THEN DO:
            korfil = korfil + "\CONNECTIT.EXE".
            
            IF SEARCH(korfil) NE ? THEN korfil = korfil.
            ELSE korfil = "C:\Program Files (x86)\CONNECTIT\CONNECTIT.EXE".
            IF SEARCH(korfil) = ? THEN DO:   
               korfil = "C:\Program Files\CONNECTIT\CONNECTIT.EXE".
            END.   
            IF SEARCH(korfil) = ? THEN DO:
               korfil = "C:\Program\CONNECTIT\CONNECTIT.EXE".
            END.     
            IF SEARCH(korfil) = ? THEN DO:  
               MESSAGE korfil " Finns inte! Kontakta Elpool 090-184540"  VIEW-AS ALERT-BOX.
               RETURN NO-APPLY.
            END.
         END.            
      END.
      ELSE DO:
         korfil = "Z3.EXE".
         regeditnamn = "SOFTWARE\ABB Cewe\Z".
         LOAD regeditnamn BASE-KEY "HKEY_LOCAL_MACHINE" NO-ERROR.
         IF ERROR-STATUS:ERROR = TRUE THEN DO:
            regeditnamn = "SOFTWARE\Wow6432Node\ABB Cewe\Z".
            LOAD regeditnamn BASE-KEY "HKEY_LOCAL_MACHINE" NO-ERROR.
         END.  
         IF ERROR-STATUS:ERROR = FALSE THEN DO: 
            USE regeditnamn.
            GET-KEY-VALUE SECTION "Path" KEY "InstallPath" VALUE korfil.
            UNLOAD regeditnamn.        
            korfil = SUBSTRING(korfil,1,INDEX(korfil,"INSTFILE") - 1) + "Z3.EXE".
         END.                      
         korfil = REPLACE(korfil,"c:\\","c:\").
         IF SEARCH(korfil) NE ? THEN korfil = korfil.
         ELSE korfil = "C:\Program Files (x86)\ABBCewe\Z3\Z3.EXE".
         IF SEARCH(korfil) = ? THEN DO:   
            korfil = "C:\Program Files\ABBCewe\Z3\Z3.EXE".
         END.   
         IF SEARCH(korfil) = ? THEN DO:
            korfil = "C:\Program\ABBCewe\Z3\Z3.EXE".
         END.     
         IF SEARCH(korfil) = ? THEN DO:  
            MESSAGE korfil " Finns inte! Kontakta Elpool 090-184540"  VIEW-AS ALERT-BOX.
            RETURN NO-APPLY.
         END.
      END.
      korfil = '"' + korfil + '"'.
   END.               
   {AVBGOM2.I}
   {AMERICANEUROPEAN.I}  
   IF cdcvar = TRUE THEN DO:   
      korfil = korfil + ' /SOURCE=guru /USER=' + Guru.Konstanter:globanv + ' /OBJECT=' + objnamn + ' /FILE=' + Guru.Konstanter:globanv + '.txt'.  
   END.
   ELSE DO:
      IF objnamn NE "" THEN DO:
         objnamn = '''C:\program\ABBCewe\Z3\OBJEKT\' + objnamn + '.zta'''.
         korfil = korfil + ' /SOURCE=guru /OBJECT=' + objnamn + ' /FILE=' + Guru.Konstanter:globanv + '.txt'. 
      END.      
      ELSE DO:
         korfil = korfil + ' /SOURCE=guru /OBJECT='''' /FILE=' + Guru.Konstanter:globanv + '.txt'. 
      END.            
   END.          
   OS-COMMAND SILENT VALUE(korfil).
   FIND FIRST del_val WHERE del_val.NUM = valnum NO-LOCK NO-ERROR.
   IF AVAILABLE del_val THEN DO:
      musz = musz.
   END.
   ELSE DO:   
      ASSIGN
      filnamn = OS-GETENV("TMP") + "\" + Guru.Konstanter:globanv + ".txt"          
      filnamn2 = SESSION:TEMP-DIRECTORY.
      {SESSIONTEMPDIR.I}
      IF SESSION:CLIENT-TYPE = "WEBCLIENT" THEN filnamn2 = webclienttempdir.
      filnamn2 = filnamn2 + Guru.Konstanter:globanv + ".q".       
      filnamn = '"' + filnamn + '"'.
      filnamn2 = '"' + filnamn2 + '"' .
      ASSIGN
      edlcvar = Guru.Konstanter:dlcvar + "QUOTER.EXE".
      edlcvar = SEARCH(EDLCVAR).
      IF edlcvar = ? THEN DO:
         edlcvar = SEARCH("quoter.exe").
      END.      
      OS-COMMAND SILENT VALUE(edlcvar)
      VALUE(filnamn) > VALUE(filnamn2).
      filnamn2 = REPLACE(filnamn2,'"','').
      sokfil = SEARCH(filnamn2).
      IF sokfil NE ? THEN DO:          
         INPUT FROM VALUE(filnamn2) NO-ECHO.
         REPEAT:
            SET words VIEW-AS EDITOR INNER-CHARS 50 INNER-LINES 3 WITH FRAME DDD WIDTH 80.
            CREATE tidin.
            ASSIGN tidin.TIN = words.
         END.
         INPUT CLOSE.
         
         FIND kon_val WHERE ROWID(kon_val) = spar_rowid.
         counter = kon_val.NUM.
         IF Guru.Konstanter:globforetag = "GRAN" OR Guru.Konstanter:globforetag = "GKAL" THEN DO:
            importvar = FALSE.
         END.
         ELSE DO:
            IF cdcvar = TRUE THEN DO:            
               MESSAGE "Vill du importera materiel från ConnectIT?"
               VIEW-AS ALERT-BOX
               QUESTION BUTTONS YES-NO TITLE "Importera materiel" UPDATE svar.
            END.
            ELSE DO:
               MESSAGE "Vill du importera materiel från Z-sysPlan?"
               VIEW-AS ALERT-BOX
               QUESTION BUTTONS YES-NO TITLE "Importera materiel" UPDATE svar.
            END.
            IF svar THEN DO:
               importvar = TRUE.
            END.
            ELSE DO:
               importvar = FALSE.
            END.
         END.
         IF cdcvar = TRUE THEN DO:            
            FIND FIRST konbuff WHERE konbuff.NUM = kon_val.NUM AND konbuff.KSKAP = TRUE AND
            konbuff.F1 = kon_val.F1 AND konbuff.F2 = "ConnectIT" NO-LOCK NO-ERROR.
         END.
         ELSE DO:
            FIND FIRST konbuff WHERE konbuff.NUM = kon_val.NUM AND konbuff.KSKAP = TRUE AND
            konbuff.F1 = kon_val.F1 AND konbuff.F2 = "Z-sysPlan" NO-LOCK NO-ERROR.
         END.
         IF AVAILABLE konbuff THEN DO:
            IF importvar = TRUE THEN DO:
               FOR EACH list_mtrl WHERE list_mtrl.NUM = konbuff.NUM AND
               list_mtrl.SKAPNUM = konbuff.SKAPNUM USE-INDEX NUM2:
                  DELETE list_mtrl.
               END.
            END.
         END.
         ELSE DO:
            CREATE konbuff.
            ASSIGN
            konbuff.NUM = counter
            konbuff.GRUPP = kon_val.GRUPP
            konbuff.F1 = kon_val.F1            
            konbuff.KSKAP = TRUE
            konbuff.TYP = 1
            konbuff.SKAPNUM = 98.
            IF cdcvar = TRUE THEN konbuff.F2 = "ConnectIT".
            ELSE konbuff.F2 = "Z-sysPlan".
         END.
         objvar = FALSE.
         FOR EACH tidin:
            IF objvar = TRUE THEN DO:
               ASSIGN
               langdvar = LENGTH(tidin.TIN)
               konbuff.F3 = SUBSTRING(tidin.TIN,2,langdvar - 2)
               objvar = FALSE.
            END.
            ELSE IF bervar = TRUE THEN DO:
               ASSIGN
               bervar = FALSE.
            END.
            ELSE DO:
               IF tidin.TIN = "[Objekt]" OR tidin.TIN = "[Projekt]" THEN DO:
                  objvar = TRUE.
               END.
               ELSE DO:
                  IF SUBSTRING(tidin.TIN,1,10) = "[Beredning" OR substring(tidin.TIN,1,8) = "[Objekt " THEN DO:
                     bervar = TRUE.
                  END.
                  ELSE DO:
                     IF SUBSTRING(tidin.TIN,1,1) = "|" THEN DO:
                        EMPTY TEMP-TABLE impmtrl NO-ERROR.     
                                            
                        OUTPUT TO VALUE(filnamn2).
                        PUT UNFORMATTED SUBSTRING(tidin.TIN,2) SKIP.
                        OUTPUT CLOSE.
                        INPUT FROM VALUE(filnamn2) NO-ECHO.
                        REPEAT:
                           DO TRANSACTION:
                              CREATE impmtrl.
                              ASSIGN.
                              IMPORT DELIMITER "|" impmtrl NO-ERROR.
                           END.
                        END.                        
                        FOR EACH impmtrl:
                           impmtrl.ENR = REPLACE(impmtrl.ENR," ","").
                        END.
                        IF importvar = TRUE THEN DO:
                           FIND FIRST impmtrl NO-LOCK NO-ERROR.
                           RUN mtrlhmt_UI IN kskapapph (INPUT vald_kundlev,INPUT Guru.Konstanter:globforetag,
                                                        INPUT-OUTPUT TABLE impmtrl).
                           FIND FIRST impmtrl NO-LOCK NO-ERROR.
                           CREATE list_mtrl.
                           ASSIGN
                           list_mtrl.NUM = konbuff.NUM
                           list_mtrl.SKAPNUM = konbuff.SKAPNUM
                           list_mtrl.ENR = impmtrl.ENR
                           list_mtrl.BENAMNING = impmtrl.BENAMNING
                           list_mtrl.ENHET = LC("ST")
                           list_mtrl.PRIS = impmtrl.PRIS
                           list_mtrl.ANTAL = impmtrl.ANTAL
                           list_mtrl.LEVKOD = vald_kundlev
                           list_mtrl.SKAPMTRL = FALSE.
                           IF list_mtrl.ENR = "" THEN DO:
                              list_mtrl.ENR = list_mtrl.BENAMNING.
                           END.
                           mtrl_rowid = ROWID(list_mtrl).
                           {UTBYTEVALMTRL.I}
                           
                        END.
                     END.
                  END.
               END.
            END.
         END.
         colquery = " WHERE NUM = " + STRING(valnum) + " AND (F2 NE '' OR F3 NE '' OR F4 NE '' OR F5 NE '' OR F6 NE '') USE-INDEX NUM2".
         RUN setcolsortvar_UI IN brwproc[1] (INPUT colquery).
         RUN openbdynspec_UI IN brwproc[1].
         FIND FIRST kon_val NO-LOCK NO-ERROR.
         IF AVAILABLE kon_val THEN DO:
            RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(kon_val)).
            RUN lastselectdyn_UI IN brwproc[1].
         END.
      END.
      ELSE DO:
         IF cdcvar = TRUE THEN DO:         
            MESSAGE "Ingen fil fanns att läsa in från ConnectIT."
            VIEW-AS ALERT-BOX TITLE "ConnectIT".      
         END.
         ELSE DO:
            MESSAGE "Ingen fil fanns att läsa in från Z-sysPlan."
            VIEW-AS ALERT-BOX TITLE "Z-sysPlan".      
         END.
      END.      
   END.  
   {AVBFRAM2.I}   
   {musarrow.i}  
   {EUROPEANAMERICAN.I}
END PROCEDURE.
