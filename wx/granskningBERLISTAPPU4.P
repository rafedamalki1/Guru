/*granskningBERLISTAPPU4.P*/
/*
ELSE IF SEL_UPP:SCREEN-VALUE = "Stolpprotokoll" OR SEL_UPP:SCREEN-VALUE = "Stolpprotokoll minimerat" THEN DO:                 
      IF datornamn = "thnmf" OR datornamn = "thnblade01" OR datornamn = "TSBLRA02" THEN DO:
         CMB_SKRIV:SCREEN-VALUE = "Välja annan skrivare".
         RAD_SKRIV = FALSE.
      END.
      IF TOG_KON:CHECKED = TRUE THEN DO:
         bryt = TRUE.
      END.
      ELSE DO:
         bryt = FALSE.
      END.
      musz = FALSE.      
      IF TOG_KONVAL:CHECKED = TRUE THEN DO:
         RUN sparakon_UI (INPUT 1).
         valkonst = TRUE.
         RUN VALKONSTU.W.
      END.
      ELSE DO:
         valkonst = FALSE.
      END.                      
      IF musz = FALSE THEN DO:
         IF summeradberedning = TRUE THEN valkonst = TRUE.
         RUN BERLISTU4.W (INPUT SEL_UPP:SCREEN-VALUE,INPUT RAD_SKRIV, INPUT FALSE).
      END.
      IF TOG_KONVAL:CHECKED = TRUE THEN DO:
         RUN sparakon_UI (INPUT 2).
      END.
   END. 
   ELSE IF SEL_UPP:SCREEN-VALUE = "Materiel/upplag/konstruktion/artikel" OR SEL_UPP:SCREEN-VALUE = "Satsläggning och byggnummer" OR
           SEL_UPP:SCREEN-VALUE = "Materiel/upplag/projekt/objekt" THEN DO:      
      
      IF datornamn = "thnmf" OR datornamn = "thnblade01" OR datornamn = "TSBLRA02" THEN DO:
         CMB_SKRIV:SCREEN-VALUE = "Välja annan skrivare".
         RAD_SKRIV = FALSE.
      END.
      IF TOG_KON:CHECKED = TRUE THEN DO:
         bryt = TRUE.
      END.
      ELSE DO:
         bryt = FALSE.
      END.
      musz = FALSE.      
      IF TOG_KONVAL:CHECKED = TRUE THEN DO:
         RUN sparakon_UI (INPUT 1).
         valkonst = TRUE.
         RUN VALKONSTU.W.
      END.
      ELSE DO:
         valkonst = FALSE.
      END.                         
      IF musz = FALSE THEN DO:
         IF summeradberedning = TRUE THEN valkonst = TRUE.
         RUN BERLISTU4.W (INPUT SEL_UPP:SCREEN-VALUE,INPUT RAD_SKRIV, INPUT FALSE).
      END.
      IF TOG_KONVAL:CHECKED = TRUE THEN DO:
         RUN sparakon_UI (INPUT 2).
      END.
   END.   
      
   ELSE IF SEL_UPP:SCREEN-VALUE = "Byggprotokoll i skrivbordsordning" THEN DO: 
      IF datornamn = "thnmf" OR datornamn = "thnblade01" OR datornamn = "TSBLRA02" THEN DO:
         CMB_SKRIV:SCREEN-VALUE = "Välja annan skrivare".
         RAD_SKRIV = FALSE.
      END.
      IF TOG_KON:CHECKED = TRUE THEN DO:
         bryt = TRUE.
      END.
      ELSE DO:
         bryt = FALSE.
      END.
      musz = FALSE.      
      IF TOG_KONVAL:CHECKED = TRUE THEN DO:
         RUN sparakon_UI (INPUT 1).
         valkonst = TRUE.
         RUN VALKONSTU.W.
      END.
      ELSE DO:
         valkonst = FALSE.
      END.                       
                                 
      IF musz = FALSE THEN DO:
         IF summeradberedning = TRUE THEN valkonst = TRUE.
         RUN BERLISTU4.W (INPUT SEL_UPP:SCREEN-VALUE,INPUT RAD_SKRIV, INPUT TRUE).
      END.
      IF TOG_KONVAL:CHECKED = TRUE THEN DO:
         RUN sparakon_UI (INPUT 2).
      END.
   END.
   BERLISTU4.W
                                    
   RUN skrivhmt_UI IN berlistapph (INPUT printername, OUTPUT globsidl,OUTPUT globsids).   vilken PRINTER sidlängd stående liggande
    RUN bildfinns_UI IN berlistapph (INPUT link).   vilken bild
   
  RUN skapalista2_UI IN berlistapph (INPUT stolpval  = 
   IF CMB_STOLP:SCREEN-VALUE = "Visa allt" THEN RAD_STOLP = 1.
   IF CMB_STOLP:SCREEN-VALUE = "Bara stolpar" THEN RAD_STOLP = 2.
   IF CMB_STOLP:SCREEN-VALUE = "Inga stolpar" THEN RAD_STOLP = 3.
   IF CMB_STOLP:SCREEN-VALUE = "Bara kablar/trafo/markstn" THEN RAD_STOLP = 4.
   IF CMB_STOLP:SCREEN-VALUE = "Inga kablar/trafo/markstn" THEN RAD_STOLP = 5.
   IF CMB_STOLP:SCREEN-VALUE = "Bara kablar/trafo" THEN RAD_STOLP = 4.
   IF CMB_STOLP:SCREEN-VALUE = "Inga kablar/trafo" THEN RAD_STOLP = 5.
   
   
   
                                      INPUT TOG_ANM,  = "Anmärkning" 
                                      INPUT TOG_ID,    LABEL "Identitet"   ta MEd" " eller inte
                                      INPUT TOG_SPANN,   LABEL "Spann/kabellängd" 
                                     INPUT TOG_MTRL,  LABEL "Materiel"   bara HUVUDLEV eller ta MED mtrl
                                     INPUT TOG_P3,     kalkylkoder 
                                     INPUT TOG_TEXT,  e-nummer texter typ skyltar
                                     INPUT TOG_UPP,  upplagsortering
                                     INPUT TOG_VAL,     LABEL "Konstruktionsval". visar INFORMATION i huvudet om konstruktioenn 
                                     INPUT TOG_EGEN,     egen kontroll    texter ut 
                                     INPUT globforetag,   företag 
                                     INPUT Guru.Konstanter:globanvpkod,   personaltab
                                     INPUT seluppvar,     vilken lista 
                                     INPUT edmedd,     extra anmärkning
                                     INPUT valkonst,   välj vilka konstruktioner
                                     INPUT prisvar,
         
                                       CMB_PRIS:SCREEN-VALUE = "Visa pris"
                                       prisvar = 1.
                                       CMB_PRIS:SCREEN-VALUE = "Visa inte pris"
                                       prisvar = 2.           
                                     
                                     INPUT bryt, SIDBRUYNING I EXCEL VARJE KONSTRUKTION.
                                     INPUT skrivut,SKRIVUT DIREKT 
                                     INPUT valaonr,  BEREDNING.BERNR
                                     INPUT valdelnr, ??
                                     INPUT valort,   benämning
                                     INPUT valomrade, BEREDNING.OMRADE
                                     INPUT katvar,
                                     INPUT kalkvar,  om KALKYL är vald från start
                                     INPUT globsids,   sidläng
                                     INPUT skrivbord, skrivbord
                                     OUTPUT musz2,
                                     INPUT TABLE kon_val,  konstruktioner
                                     INPUT TABLE felmeddtemp, felmed
                                     OUTPUT TABLE tidut,  resultat
                                     OUTPUT TABLE extemp).  resultat för excel
   
DEFINE INPUT PARAMETER seluppvar AS CHARACTER NO-UNDO.  vilken lista 
DEFINE INPUT PARAMETER standardskriv AS LOGICAL NO-UNDO.  om standar skrivare
DEFINE INPUT PARAMETER skrivbord AS LOGICAL NO-UNDO.      skribordsordning 

------------
DEFINE INPUT  PARAMETER classerkollin AS CHARACTER NO-UNDO.   nya kalkyl
DEFINE INPUT  PARAMETER inglobanv AS CHARACTER NO-UNDO.     vem 
DEFINE INPUT  PARAMETER sidotexexcel AS LOGICAL NO-UNDO.   ABEL "Texter i sidokolumn i Excel" 

*/

DEFINE INPUT  PARAMETER classerkollin AS CHARACTER NO-UNDO.  
DEFINE INPUT  PARAMETER inglobanv AS CHARACTER NO-UNDO.     
DEFINE INPUT  PARAMETER sidotexexcel AS LOGICAL NO-UNDO.    
DEFINE VARIABLE LocalAppServerExtraHandle AS HANDLE NO-UNDO.
DEFINE VARIABLE gurubilder AS CHARACTER NO-UNDO.
DEFINE VARIABLE link AS CHARACTER NO-UNDO.
DEFINE VARIABLE kalkvisabaraantal AS LOGICAL NO-UNDO.
DEFINE VARIABLE benlangd AS INTEGER NO-UNDO.

{STARTFORAPPC.I}
{ANMARKD.I}
 /*LISTDEF.I*/

DEFINE NEW SHARED TEMP-TABLE mtrl_temp 
   FIELD NUM AS INTEGER
   FIELD ENR AS CHARACTER
   FIELD BENAMNING AS CHARACTER
   FIELD ENHET AS CHARACTER
   FIELD ANTAL AS INTEGER
   FIELD PRIS AS DECIMAL 
   FIELD TOTPRIS AS DECIMAL
   FIELD LEVKOD AS CHARACTER
   FIELD UPPLAG AS INTEGER  
   FIELD GRUPP AS INTEGER
   FIELD XKORD AS INTEGER
   FIELD FORNR AS CHARACTER
   FIELD LINNR AS CHARACTER
   FIELD NATNR AS CHARACTER
   FIELD FRI1 AS INTEGER
   FIELD FRI2 AS INTEGER
   FIELD PAR AS INTEGER
   FIELD ORD AS INTEGER
   FIELD MTRLTEXT AS CHARACTER
   INDEX ENR IS PRIMARY ENR ASCENDING
   INDEX NUM NUM ASCENDING.       


   
DEFINE NEW SHARED TEMP-TABLE lin_temp  
   FIELD NUM1 AS INTEGER
   FIELD NUM2 AS INTEGER
   FIELD METER AS INTEGER             
   FIELD BENAMNING AS CHARACTER      
   INDEX NUM NUM1 NUM2 ASCENDING.
{KONVALTEMP.I}


IF varforetypval[36] = 1 THEN kalkvisabaraantal = TRUE.   /*P2 I BEREDNING annars P3*/

IF varforetypchar[48] NE "" THEN kalkvisabaraantal = TRUE.
DEFINE VARIABLE edmedd    AS CHARACTER NO-UNDO.       
DEFINE VARIABLE valkonst  AS LOGICAL NO-UNDO.
DEFINE VARIABLE prisvar   AS INTEGER NO-UNDO.
DEFINE VARIABLE bryt      AS LOGICAL NO-UNDO.
DEFINE VARIABLE skrivut   AS LOGICAL NO-UNDO.
DEFINE VARIABLE musz      AS LOGICAL NO-UNDO.         
DEFINE VARIABLE valaonr   AS CHARACTER NO-UNDO.
DEFINE VARIABLE valdelnr  AS INTEGER NO-UNDO.
DEFINE VARIABLE valort    AS CHARACTER NO-UNDO. 
DEFINE VARIABLE valomrade AS CHARACTER NO-UNDO.  
DEFINE VARIABLE katvar AS INTEGER NO-UNDO.
DEFINE VARIABLE kalkvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE upppris AS DECIMAL NO-UNDO.
DEFINE VARIABLE seluppvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE arrhjsum AS DECIMAL NO-UNDO.    
DEFINE VARIABLE bytgrupp AS CHARACTER NO-UNDO. 
DEFINE VARIABLE deltidut AS LOGICAL NO-UNDO.
DEFINE VARIABLE deltidutex AS LOGICAL NO-UNDO.
DEFINE VARIABLE edvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE finns AS LOGICAL NO-UNDO.    
DEFINE VARIABLE forsta AS LOGICAL NO-UNDO.
DEFINE VARIABLE fyra AS LOGICAL NO-UNDO.
DEFINE VARIABLE kant AS INTEGER NO-UNDO.
DEFINE VARIABLE lage AS INTEGER NO-UNDO.
DEFINE VARIABLE mat2 AS LOGICAL NO-UNDO.
DEFINE VARIABLE mat3 AS LOGICAL NO-UNDO.
DEFINE VARIABLE mat4 AS LOGICAL NO-UNDO.
DEFINE VARIABLE mtextvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE numsok AS LOGICAL NO-UNDO.
DEFINE VARIABLE numvar AS INTEGER NO-UNDO.
DEFINE VARIABLE sex AS LOGICAL NO-UNDO.
DEFINE VARIABLE sidlangd AS INTEGER NO-UNDO.
DEFINE VARIABLE sidlangdex AS INTEGER NO-UNDO.
DEFINE VARIABLE skapad AS LOGICAL NO-UNDO.
DEFINE VARIABLE stopvar AS LOGICAL NO-UNDO. 
DEFINE VARIABLE str AS CHARACTER FORMAT "X(130)" NO-UNDO.
DEFINE VARIABLE str0 AS CHARACTER FORMAT "X(130)" NO-UNDO.
DEFINE VARIABLE str1 AS CHARACTER FORMAT "X(130)" NO-UNDO. 
DEFINE VARIABLE str2 AS CHARACTER FORMAT "X(130)" NO-UNDO. 
DEFINE VARIABLE str3 AS CHARACTER FORMAT "X(130)" NO-UNDO.
DEFINE VARIABLE sumantal AS INTEGER NO-UNDO.
DEFINE VARIABLE sumpris AS DECIMAL NO-UNDO.    
DEFINE VARIABLE sumrec AS ROWID NO-UNDO.
DEFINE VARIABLE tiduttyp AS INTEGER NO-UNDO.
DEFINE VARIABLE totalsum AS DECIMAL NO-UNDO.
DEFINE VARIABLE totalt AS DECIMAL NO-UNDO. 
DEFINE VARIABLE upput AS LOGICAL NO-UNDO.
DEFINE VARIABLE uppvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE utnr AS INTEGER EXTENT 50 NO-UNDO.
DEFINE VARIABLE utrow AS ROWID EXTENT 8 NO-UNDO.
DEFINE VARIABLE utrow1 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow2 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow3 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow4 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow5 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow6 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow7 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow8 AS ROWID NO-UNDO.
DEFINE VARIABLE forstakonst AS LOGICAL NO-UNDO.
DEFINE VARIABLE xkordvar AS INTEGER NO-UNDO. 
DEFINE VARIABLE rowspar AS INTEGER NO-UNDO.
DEFINE VARIABLE vfontname    AS CHARACTER NO-UNDO. 
DEFINE VARIABLE vfontsize    AS INTEGER NO-UNDO.   
DEFINE VARIABLE vfonttype    AS LOGICAL NO-UNDO.   
DEFINE VARIABLE vfontheight  AS INTEGER NO-UNDO.   
DEFINE VARIABLE vfontcolor   AS INTEGER NO-UNDO.   
DEFINE VARIABLE sidraknare AS INTEGER NO-UNDO.
DEFINE VARIABLE sparlangd AS INTEGER NO-UNDO.
DEFINE VARIABLE kvaravsidan    AS INTEGER NO-UNDO.
DEFINE VARIABLE forstaanmark AS LOGICAL NO-UNDO.
DEFINE VARIABLE totea AS DECIMAL NO-UNDO.
DEFINE VARIABLE totarb AS DECIMAL NO-UNDO.
DEFINE VARIABLE totmask AS DECIMAL NO-UNDO.
DEFINE VARIABLE totmtrl AS DECIMAL NO-UNDO.
DEFINE VARIABLE totovr AS DECIMAL NO-UNDO.
DEFINE VARIABLE arbtim AS DECIMAL NO-UNDO.
DEFINE VARIABLE msktim AS DECIMAL NO-UNDO.
DEFINE VARIABLE bertim AS DECIMAL NO-UNDO.
DEFINE VARIABLE eavar AS DECIMAL NO-UNDO.
DEFINE VARIABLE arbvar AS DECIMAL NO-UNDO.
DEFINE VARIABLE mskvar AS DECIMAL NO-UNDO.
DEFINE VARIABLE faktvar AS DECIMAL NO-UNDO.
DEFINE VARIABLE kontroll AS LOGICAL NO-UNDO.
DEFINE VARIABLE prisvar2 AS DECIMAL NO-UNDO.
DEFINE VARIABLE sumea AS DECIMAL NO-UNDO.
DEFINE VARIABLE summont AS DECIMAL NO-UNDO.
DEFINE VARIABLE summask AS DECIMAL NO-UNDO.
DEFINE VARIABLE skrivbord AS LOGICAL NO-UNDO.
DEFINE VARIABLE fetstil AS LOGICAL NO-UNDO.
DEFINE VARIABLE stolpval AS INTEGER NO-UNDO.
DEFINE VARIABLE baral AS LOGICAL NO-UNDO.
DEFINE VARIABLE enkabval AS LOGICAL NO-UNDO.
DEFINE VARIABLE delningsvar AS INTEGER NO-UNDO. /*sätts till 1 om F9 värde = 0 och 100 om F9 värde = 1*/
DEFINE VARIABLE TOG_ANM AS LOGICAL INITIAL NO   
     LABEL "Anmärkning" .

DEFINE VARIABLE TOG_ID AS LOGICAL INITIAL NO  
     LABEL "Identitet" .

DEFINE VARIABLE TOG_SPANN AS LOGICAL INITIAL NO  
     LABEL "Spann/kabellängd" .

DEFINE VARIABLE TOG_MTRL AS LOGICAL INITIAL NO  
     LABEL "Materiel" .

DEFINE VARIABLE TOG_P3 AS LOGICAL INITIAL NO  
     LABEL "P3-koder" .
     
DEFINE VARIABLE TOG_TEXT AS LOGICAL INITIAL NO  
     LABEL "Mtrl text" .     

DEFINE VARIABLE TOG_UPP AS LOGICAL INITIAL NO  
     LABEL "Upplag" .
     
DEFINE VARIABLE TOG_VAL AS LOGICAL INITIAL NO  
     LABEL "Konstruktionsval". 
     
DEFINE VARIABLE TOG_EGEN AS LOGICAL INITIAL NO  
     LABEL "Egenkontroll" .
     


DEFINE TEMP-TABLE temp_upp NO-UNDO
   FIELD UPPLAG AS INTEGER
   FIELD ADRESS AS CHARACTER
   FIELD ANMARK AS CHARACTER
   INDEX OMR UPPLAG ASCENDING.

{TIDUTTTNEW.I}
  
DEFINE TEMP-TABLE tidut2 NO-UNDO
   FIELD UT AS CHARACTER FORMAT "X(132)".
   
DEFINE TEMP-TABLE tidut3 NO-UNDO
   FIELD UT AS CHARACTER FORMAT "X(132)".
   
DEFINE TEMP-TABLE tidut4 NO-UNDO
   FIELD UT AS CHARACTER FORMAT "X(132)".                 
   
   
DEFINE TEMP-TABLE mtrl_temp2 NO-UNDO 
   FIELD NUM AS INTEGER    
   FIELD ENR AS CHARACTER
   FIELD BENAMNING AS CHARACTER
   FIELD ENHET AS CHARACTER
   FIELD ANTAL AS INTEGER
   FIELD PRIS AS DECIMAL 
   FIELD TOTPRIS AS DECIMAL
   FIELD LEVKOD AS CHARACTER   
   FIELD UPPLAG AS INTEGER 
   FIELD GRUPP AS INTEGER 
   FIELD XKORD AS INTEGER
   FIELD FORNR AS CHARACTER
   FIELD LINNR AS CHARACTER
   FIELD NATNR AS CHARACTER
   FIELD FRI1 AS INTEGER
   FIELD FRI2 AS INTEGER
   FIELD PAR AS INTEGER
   FIELD ORD AS INTEGER
   INDEX ENR IS PRIMARY ENR ASCENDING   
   INDEX LISTA UPPLAG GRUPP FORNR LINNR NATNR FRI1 FRI2 PAR
   INDEX LISTA2 UPPLAG FORNR LINNR NATNR FRI1 FRI2 PAR
   INDEX ENRX ENR UPPLAG XKORD
   INDEX ENRN UPPLAG NUM
   INDEX ORD UPPLAG ORD PAR.   
{UPPLAGTEMP.I}  
   
DEFINE TEMP-TABLE ord_temp NO-UNDO
   FIELD NUM AS INTEGER 
   FIELD ORD AS INTEGER
   INDEX NUM IS PRIMARY NUM ASCENDING.   
   
DEFINE TEMP-TABLE grupp_temp NO-UNDO
   FIELD KONSKOD AS INTEGER
   FIELD BENAMNING AS CHARACTER
   FIELD ORDNING AS INTEGER
   INDEX ORD IS PRIMARY ORDNING ASCENDING.       

DEFINE TEMP-TABLE grupp_temp2 NO-UNDO
   FIELD KONSKOD AS INTEGER
   FIELD BENAMNING AS CHARACTER
   FIELD ORDNING AS INTEGER
   INDEX ORD IS PRIMARY ORDNING ASCENDING.     
   
DEFINE TEMP-TABLE id_temp NO-UNDO 
   FIELD NUM AS INTEGER 
   FIELD GRUPP AS INTEGER  
   FIELD FORNR AS CHARACTER
   FIELD LINNR AS CHARACTER
   FIELD NATNR AS CHARACTER
   FIELD FRI1 AS INTEGER
   FIELD FRI2 AS INTEGER 
   FIELD XKORD AS INTEGER
   FIELD ENDKOMB AS LOGICAL
   FIELD FRI3 AS CHARACTER
   FIELD ORD AS INTEGER
   INDEX NUM IS PRIMARY NUM ASCENDING
   INDEX ORD FORNR LINNR NATNR FRI1 FRI2 ASCENDING
   INDEX ORD2 ORD ASCENDING. 
   
DEFINE TEMP-TABLE skap_temp NO-UNDO
   FIELD NUM AS INTEGER 
   FIELD F1 AS CHARACTER 
   FIELD F2 AS CHARACTER 
   FIELD F3 AS CHARACTER
   FIELD F4 AS CHARACTER
   FIELD F5 AS CHARACTER
   FIELD F6 AS CHARACTER
   FIELD SKAPNUM AS INTEGER   
   INDEX NUM IS PRIMARY NUM SKAPNUM ASCENDING.   
   
DEFINE TEMP-TABLE ber_temp  NO-UNDO
   FIELD ARBKOD AS CHARACTER
   FIELD LOPNR AS INTEGER
   FIELD BENAMNING AS CHARACTER
   FIELD ENHET AS CHARACTER    
   FIELD ANTAL AS DECIMAL
   FIELD NUM AS INTEGER
   INDEX KOD ARBKOD LOPNR ASCENDING
   INDEX NUM NUM ARBKOD LOPNR ASCENDING.
   
DEFINE TEMP-TABLE ber_temp2  NO-UNDO
   FIELD ARBKOD AS CHARACTER
   FIELD LOPNR AS INTEGER
   FIELD BENAMNING AS CHARACTER
   FIELD ENHET AS CHARACTER    
   FIELD ANTAL AS DECIMAL
   FIELD NUM AS INTEGER
   INDEX KOD ARBKOD LOPNR ASCENDING
   INDEX NUM NUM ARBKOD LOPNR ASCENDING. 
   
DEFINE TEMP-TABLE kalk_temp  NO-UNDO
   {KALKTEMPTAB.I}
   
DEFINE TEMP-TABLE kalk_temp2  NO-UNDO LIKE kalk_temp. 
  

/*skrivbord*/
DEFINE TEMP-TABLE upptemp   NO-UNDO
   FIELD NUM AS INTEGER       
   FIELD UPPLAG AS INTEGER    
   FIELD XKORD AS INTEGER.


/*
               KSV Editor
    Copyright: (C) 2000-2001 Serguey Klimoff (bulkl0DD)
     Filename: FLERBER.I
      Comment: <comment>
   Parameters:
         Uses:
      Used by:
      Created: 2009.03.30 14:00 ELPAO   
     Modified: 2009.04.29 11:52 ELPAO    
     Modified: 
*/
{FLBERTEMP.I}


PROCEDURE flerbertemph_UI :
   DEFINE OUTPUT PARAMETER TABLE FOR flerbertemp.
END PROCEDURE.
PROCEDURE flerber_UI :
   FOR EACH kon_val BREAK BY kon_val.OMRADE BY kon_val.BERAONR:
      IF LAST-OF(kon_val.BERAONR) THEN DO:
         FIND FIRST flerbertemp WHERE flerbertemp.BERAONR = kon_val.BERAONR AND flerbertemp.OMRADE = kon_val.OMRADE NO-LOCK NO-ERROR.
         IF NOT AVAILABLE flerbertemp THEN CREATE flerbertemp.
         ASSIGN
         flerbertemp.BERAONR = kon_val.BERAONR.
         flerbertemp.OMRADE = kon_val.OMRADE.
      END.
   END. 
   FOR EACH flerbertemp WHERE flerbertemp.BERAONR = "":
      DELETE flerbertemp.
   END.
   FOR EACH flerbertemp:
      FIND FIRST BEREDNING WHERE BEREDNING.BERNR = INTEGER(flerbertemp.BERAONR) AND 
      BEREDNING.OMRADE = flerbertemp.OMRADE USE-INDEX BERNR NO-LOCK NO-ERROR.
      IF AVAILABLE BEREDNING THEN DO:
         IF globforetag = "cELPA" OR globforetag = "UMEA" THEN DO:            
            FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = BEREDNING.ANVANDARE
            USE-INDEX ANDV NO-LOCK NO-ERROR.
            IF AVAILABLE ANVANDARE THEN DO:            
               FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = ANVANDARE.PERSONALKOD
               USE-INDEX PERSONALKOD NO-LOCK NO-ERROR.
               IF AVAILABLE PERSONALTAB THEN DO: 
                  flerbertemp.BEREDARE = PERSONALTAB.FORNAMN + " " + PERSONALTAB.EFTERNAMN + "     " + PERSONALTAB.TELEFON + "     " + PERSONALTAB.MOBILTEL.
               END.
            END.
         END.         
         IF BEREDNING.AONR NE ? THEN DO:
            FIND FIRST AONRTAB WHERE AONRTAB.AONR = BEREDNING.AONR AND
            AONRTAB.DELNR = BEREDNING.DELNR USE-INDEX AONR NO-LOCK NO-ERROR.
            IF AVAILABLE AONRTAB THEN DO:
               ASSIGN
               flerbertemp.AONR = AONRTAB.AONR
               flerbertemp.DELNR = AONRTAB.DELNR.            
            END.
         END.
         ASSIGN
         flerbertemp.BERNR = BEREDNING.BERNR
         flerbertemp.BENAMNING = BEREDNING.BENAMNING.
      END.
   END.
END PROCEDURE.
DEFINE TEMP-TABLE hid NO-UNDO
   FIELD BERAONR    AS CHARACTER
   FIELD OMRADE     AS CHARACTER
   FIELD NUM        AS INTEGER
   FIELD ORD AS INTEGER
   INDEX NUM BERAONR OMRADE ORD.
DEFINE QUERY kalkq FOR BERKALK.


DEFINE BUFFER idbuff FOR id_temp.
DEFINE BUFFER mtrlbuff FOR mtrl_temp2.
DEFINE BUFFER gruppbuff FOR grupp_temp.
DEFINE BUFFER uppbuff FOR uppl_temp.
/*
DEFINE BUFFER skapbuff FOR skap_temp.
*/
DEFINE BUFFER kalkbuff FOR kalk_temp2.

   ASSIGN
   utnr[1] = 1   /*enr*/
   utnr[2] = 12   /*benämning*/
   utnr[3] = 28   /*för att : anm, id mm ska komma rakt*/
   utnr[4] = 43   /*enhet*/
   utnr[5] = 53   /*antal*/
   utnr[6] = 60   /*pris/enh*/
   utnr[7] = 69   /*summa*/
   utnr[8] = 77.   /*anm och skylttext i excel*/

PROCEDURE skapalista2_UI :
   DEFINE INPUT PARAMETER stolpval2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER TOG_ANM2   AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_ID2    AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_SPANN2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_MTRL2  AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_P32    AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_TEXT2  AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_UPP2   AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_VAL2   AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TOG_EGEN2  AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER globforetag2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER globanvpkod2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER seluppvar2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER edmedd2   AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valkonst2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER prisvar2  AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER bryt2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER skrivut2  AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER valaonr2  AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valdelnr2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER valort2   AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER katvar2   AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER kalkvar2  AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER globsids2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER skrivbord2  AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER musz2 AS LOGICAL NO-UNDO.   
   DEFINE INPUT PARAMETER TABLE FOR kon_val.
   DEFINE INPUT PARAMETER TABLE FOR felmeddtemp.
   DEFINE OUTPUT PARAMETER TABLE FOR tidut.
    
   
   ASSIGN

   TOG_ANM   = TOG_ANM2  
   TOG_ID    =  TOG_ID2   
   TOG_SPANN =  TOG_SPANN2
   TOG_MTRL  =  TOG_MTRL2 
   TOG_P3    =  TOG_P32   
   TOG_TEXT  =  TOG_TEXT2 
   TOG_UPP   =  TOG_UPP2  
   TOG_VAL   =  TOG_VAL2  
   TOG_EGEN  =  TOG_EGEN2 
   globforetag = globforetag2
   globanvpkod = globanvpkod2
   seluppvar = seluppvar2
   edmedd   =  edmedd2    
   valkonst =  valkonst2 
   prisvar  =  prisvar2  
   bryt     =  bryt2     
   skrivut  =  skrivut2  
   musz     =  musz2     
   valaonr  =  valaonr2  
   valdelnr =  valdelnr2 
   valort   =  valort2   
   valomrade = valomrade2
   katvar    = katvar2   
   kalkvar   = kalkvar2
   globsids = globsids2
   skrivbord = skrivbord2
   stolpval = stolpval2.  
   benlangd = 30.
    
   EMPTY TEMP-TABLE tidut NO-ERROR. 
   EMPTY TEMP-TABLE mtrl_temp NO-ERROR. 
   EMPTY TEMP-TABLE mtrl_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE id_temp NO-ERROR. 
   EMPTY TEMP-TABLE grupp_temp NO-ERROR. 
   EMPTY TEMP-TABLE grupp_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE uppl_temp NO-ERROR. 
   edvar = FALSE.
   FIND FIRST PARSTOLP NO-LOCK NO-ERROR.
   /*Om anv. har valt btn_skriv i berlista, då har skrivval redan körts*/
   IF globsids = 0  THEN globsids = 73.
   musz = FALSE.
   ASSIGN
   forsta = FALSE
   fetstil = FALSE
   kvaravsidan = 0
   sidlangdex = 56  /*56*/
   sidlangd = globsids - 3
   forstaanmark = FALSE.
   RUN huvud_UI.

   IF musz = FALSE THEN RUN summa_UI.
   musz2 = musz.
   RETURN.
END PROCEDURE.

PROCEDURE huvud_UI :
   /*HUVUD*/ 
   RUN flerber_UI.  /*Om flera beredningar ska visas ihop*/  
   
            CREATE tidut.
            ASSIGN
            SUBSTRING(tidut.UT,utnr[1]) = seluppvar.
                                           
            SUBSTRING(tidut.UT,utnr[4]) = STRING(TODAY).
            IF globforetag = "CELPA" {GLOBVES.I} THEN DO: 
               /*Ingen tid för Vesab*/
            END.
            ELSE DO:
               SUBSTRING(tidut.UT,utnr[5]) = STRING(TIME,"HH:MM:SS").   
            END.
            CREATE tidut.      
            CREATE tidut.       
            SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gaonamnk.
            SUBSTRING(tidut.UT,utnr[3]) = ":" + valort.           
            FOR EACH flerbertemp:
               IF valort = flerbertemp.BENAMNING THEN.
               ELSE DO:
                  CREATE tidut.
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + flerbertemp.BENAMNING.
               END.               
            END.
            RUN telfon_UI.
            CREATE tidut.  
            ASSIGN         
            SUBSTRING(tidut.UT,utnr[1]) = "Beredning nr".
            SUBSTRING(tidut.UT,utnr[3]) = ":" + valaonr.
            FOR EACH flerbertemp:
               IF valaonr = flerbertemp.BERAONR THEN.
               ELSE DO:
                  CREATE tidut. 
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + flerbertemp.BERAONR.
               END.               
            END.
            CREATE tidut.  
           
            FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = valomrade USE-INDEX OMR
            NO-LOCK NO-ERROR.
            IF AVAILABLE OMRADETAB THEN DO:
               ASSIGN                                                               
               SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gomrk.
               SUBSTRING(tidut.UT,utnr[3]) = ":" + OMRADETAB.NAMN.  
            END. 
            FOR EACH flerbertemp:
               FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = flerbertemp.OMRADE USE-INDEX OMR
               NO-LOCK NO-ERROR.
               IF AVAILABLE OMRADETAB THEN DO:
                  IF valomrade = flerbertemp.OMRADE THEN.
                  ELSE DO:
                     CREATE tidut.  
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + OMRADETAB.NAMN.
                  END.
               END.
            END.
            FIND FIRST BEREDNING WHERE BEREDNING.BERNR = INTEGER(valaonr) AND 
            BEREDNING.OMRADE = valomrade USE-INDEX BERNR NO-LOCK NO-ERROR.
            IF BEREDNING.AONR NE ? THEN DO:
               FIND FIRST AONRTAB WHERE AONRTAB.AONR = BEREDNING.AONR AND
               AONRTAB.DELNR = BEREDNING.DELNR USE-INDEX AONR NO-LOCK NO-ERROR.
               IF AVAILABLE AONRTAB THEN DO:
                  CREATE tidut.
                  SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gaok.
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + AONRTAB.AONR + " Delnr:" + STRING(AONRTAB.DELNR,Guru.Konstanter:varforetypchar[1]).
               END.
            END.
            FOR EACH flerbertemp:
               IF AVAILABLE AONRTAB THEN DO:
                  IF flerbertemp.AONR = AONRTAB.AONR AND flerbertemp.DELNR = AONRTAB.DELNR THEN.
                  ELSE DO:
                     IF flerbertemp.AONR NE "" THEN DO:
                        CREATE tidut.
                        SUBSTRING(tidut.UT,utnr[3]) = ":" + flerbertemp.AONR + " Delnr:" + STRING(flerbertemp.DELNR,Guru.Konstanter:varforetypchar[1]).
                     END.
                  END.               
               END.
               ELSE DO:
                  IF flerbertemp.AONR NE "" THEN DO:
                     CREATE tidut.
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + flerbertemp.AONR + " Delnr:" + STRING(flerbertemp.DELNR,Guru.Konstanter:varforetypchar[1]).
                  END.
               END.
            END.
       
         IF edmedd NE "" THEN DO:
            ASSIGN
            uppvar = TRUE
            edvar = TRUE.
            RUN anm4_UI.
            ASSIGN
            edvar = FALSE
            uppvar = FALSE.
         END.
         IF prisvar = 1 THEN DO:
            IF TOG_MTRL = TRUE THEN DO:
               CREATE tidut.
               ASSIGN
               SUBSTRING(tidut.UT,utnr[1]) = "Total summa".
               SUBSTRING(tidut.UT,utnr[3]) = ":".
               sumrec = ROWID(tidut).
            END.   
         END. 
          
         IF kalkvar = TRUE THEN DO:
            IF prisvar = 1 THEN DO: 
               IF TOG_P3 = TRUE THEN DO:          
                  IF TOG_MTRL = TRUE THEN DO:               
                     IF globforetag = "GRAN" AND globforetag = "GKAL" AND globforetag = "ELPA" AND globforetag = "VAST" THEN DO:
                     END.
                     ELSE DO:
                        IF kalkvisabaraantal = TRUE THEN.
                        ELSE DO:
                           SUBSTRING(tidut.UT,utnr[3]) = "Totalt EA".
                        END.
                     END.
                  END.
                  ELSE DO:
                     CREATE tidut.
                     IF globforetag = "GRAN" AND globforetag = "GKAL" AND globforetag = "ELPA" AND globforetag = "VAST" THEN DO:
                     END.
                     ELSE DO:
                        IF kalkvisabaraantal = TRUE THEN.
                        ELSE DO:
                           ASSIGN
                           SUBSTRING(tidut.UT,utnr[1]) = "Totalt EA".                        
                        END.
                     END.
                  END.   
               END.   
            END.
            ELSE DO:
               IF TOG_P3 = TRUE THEN DO:
                  CREATE tidut.
                  IF globforetag NE "GRAN" AND globforetag NE "GKAL" AND globforetag NE "ELPA" AND globforetag NE "VAST" THEN DO:
                     IF kalkvisabaraantal = TRUE THEN.
                     ELSE DO:
                        SUBSTRING(tidut.UT,utnr[1]) = "Totalt EA".
                     END.                                      
                  END.

               END.   
            END.   
         END.
        
         IF globforetag = "SUND" OR globforetag = "SNAT" OR globforetag = "CELPA" THEN DO:
            CREATE tidut.     
            CREATE tidut.      
            ASSIGN  
            SUBSTRING(tidut.UT,utnr[1]) = CAPS(Guru.Konstanter:genk).
            SUBSTRING(tidut.UT,utnr[2]) = "BENÄMNING".
            SUBSTRING(tidut.UT,utnr[4]) = "ENH".
            SUBSTRING(tidut.UT,utnr[5]) = " ANTAL".                                 
            IF prisvar = 1 THEN DO:
               ASSIGN 
               SUBSTRING(tidut.UT,utnr[6]) = " PRIS/ENH".
               SUBSTRING(tidut.UT,utnr[7]) = "    SUMMA".
            END.
                        
            CREATE tidut.
            
            RUN sund_UI.           
            CREATE tidut.
            ASSIGN
            SUBSTRING(tidut.UT,131) = "£".
            SUBSTRING(tidut.UT,132) = "$".
            EMPTY TEMP-TABLE mtrl_temp NO-ERROR. 
            EMPTY TEMP-TABLE mtrl_temp2 NO-ERROR. 
            EMPTY TEMP-TABLE id_temp NO-ERROR. 
            EMPTY TEMP-TABLE grupp_temp NO-ERROR. 
            EMPTY TEMP-TABLE grupp_temp2 NO-ERROR. 
            EMPTY TEMP-TABLE uppl_temp NO-ERROR.            
         END.
         
         ASSIGN 
         str3 =
"======================================================================================="   
         str1 =
"***************************************************************************************"        
         str0 =
"---------------------------------------------------------------------------------------".
      
                       
   RELEASE BEREDAONR NO-ERROR.
END PROCEDURE.
PROCEDURE sund_UI :
 /*summerar byggprotkoll överst */
   ASSIGN
   sumpris = 0
   sumantal = 0.  
   
   RUN LISTPROG_UI
      (INPUT valaonr, INPUT valomrade, OUTPUT TABLE mtrl_temp,  
      OUTPUT TABLE lin_temp).   
        
   FOR EACH mtrl_temp BREAK BY mtrl_temp.ENR: 
      ACCUMULATE mtrl_temp.TOTPRIS (TOTAL BY mtrl_temp.ENR). 
      ACCUMULATE mtrl_temp.ANTAL (TOTAL BY mtrl_temp.ENR).       
      IF LAST-OF(mtrl_temp.ENR) THEN DO:
         CREATE mtrl_temp2.
         ASSIGN 
         mtrl_temp2.ENR = mtrl_temp.ENR
         mtrl_temp2.BENAMNING = mtrl_temp.BENAMNING 
         mtrl_temp2.ENHET = mtrl_temp.ENHET 
         mtrl_temp2.PRIS = mtrl_temp.PRIS
         mtrl_temp2.TOTPRIS = (ACCUM TOTAL mtrl_temp.TOTPRIS) - sumpris                       
         mtrl_temp2.ANTAL = (ACCUM TOTAL mtrl_temp.ANTAL) - sumantal                
         sumpris = ACCUM TOTAL mtrl_temp.TOTPRIS 
         sumantal = ACCUM TOTAL mtrl_temp.ANTAL.                       
      END.     
   END.    
                   
   sumpris = 0.    
   FOR EACH mtrl_temp2: 
      IF mtrl_temp2.ANTAL = 0 THEN DO:
         musz = musz.
      END.   
      ELSE DO:
         CREATE tidut.
         ASSIGN
         SUBSTRING(tidut.UT,utnr[1]) = mtrl_temp2.ENR.
         SUBSTRING(tidut.UT,utnr[2]) = SUBSTRING(mtrl_temp2.BENAMNING,1,benlangd).
         SUBSTRING(tidut.UT,utnr[4]) = mtrl_temp2.ENHET.
         SUBSTRING(tidut.UT,utnr[5]) = STRING(mtrl_temp2.ANTAL,">>>>>9").
         IF prisvar = 1 THEN DO:
            ASSIGN 
            SUBSTRING(tidut.UT,utnr[6]) = STRING(mtrl_temp2.PRIS,">>>>>>>>9").
            SUBSTRING(tidut.UT,utnr[7]) = STRING(mtrl_temp2.TOTPRIS,">>>>>>>>9").  
         END.
         upppris = upppris + mtrl_temp2.TOTPRIS. 
         sumpris = sumpris + mtrl_temp2.TOTPRIS.
      END.   
   END.  
   CREATE tidut.
   IF prisvar = 1 THEN DO:      
      SUBSTRING(tidut.UT,utnr[1]) = str.  
                                 
   END.
   ELSE DO:  
      SUBSTRING(tidut.UT,utnr[1]) = str2.                                               
                                 
   END. 
   CREATE tidut. 
   
   IF prisvar = 1 THEN DO:
      ASSIGN   
      SUBSTRING(tidut.UT,utnr[5]) = "Total summa:".
      ASSIGN
      SUBSTRING(tidut.UT,utnr[7]) = STRING(sumpris,">>>>>>>>9").
   END.

END PROCEDURE.



PROCEDURE skrivhmt_UI :
   DEFINE INPUT PARAMETER printername AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER globsidl AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER globsids AS INTEGER NO-UNDO.
   FIND FIRST SKRIVARDEF WHERE SKRIVARDEF.SKRIVARID = printername NO-LOCK NO-ERROR.
   IF AVAILABLE SKRIVARDEF THEN DO TRANSACTION:
      ASSIGN
      globsidl = SKRIVARDEF.BREDD
      globsids = SKRIVARDEF.SIDA. 
   END.   
END PROCEDURE.


PROCEDURE anm2_UI :
   CREATE tidut.
   ASSIGN                         
   SUBSTRING(tidut.UT,utnr[1],utnr[2] - utnr[1]) = "Anmärkning"
   retvar = 1
   ednum = 1
   ednum3 = LENGTH(temp_upp.ANMARK)
   retvar = INDEX(temp_upp.ANMARK,CHR(10),ednum)
   edtecken = 50
   edtext = temp_upp.ANMARK
   tidtext = "". 

   {ANMARK2.I}    
END PROCEDURE.

PROCEDURE anm3_UI :
   CREATE tidut.

   CREATE tidut.       
   ASSIGN 
   SUBSTRING(tidut.UT,utnr[1],utnr[2] - utnr[1]) = "Anmärkning"
   retvar = 1
   ednum = 1
   ednum3 = LENGTH(uppbuff.ANMARK)
   retvar = INDEX(uppbuff.ANMARK,CHR(10),ednum)
   edtecken = 50
   edtext = uppbuff.ANMARK
   tidtext = "". 
   {ANMARK2.I}    
END PROCEDURE.

PROCEDURE anm4_UI : 
   CREATE tidut. 
   ASSIGN
   SUBSTRING(tidut.UT,utnr[1],utnr[2] - utnr[1]) = "Anmärkning"
   retvar = 1
   ednum = 1
   ednum3 = LENGTH(edmedd)
   retvar = INDEX(edmedd,CHR(10),ednum)
   edtecken = 48
   edtext = edmedd
   tidtext = "".  
   {ANMARK2.I}    
END PROCEDURE.

PROCEDURE anmark_UI :          
   DEFINE INPUT PARAMETER anmark AS INTEGER NO-UNDO. 
   IF anmark = 2 THEN DO:                
      IF edvar = FALSE THEN DO:      
         ASSIGN            
         
         SUBSTRING(tidut.UT,utnr[3]) = /*":" +*/ tidtext.
      END.
      ELSE DO:
         ASSIGN                     
         SUBSTRING(tidut.UT,utnr[3]) = /*":" +*/ tidtext.
      END.

      /*GG den 31/1 2006*/
      IF fetstil = TRUE THEN DO: 

      END.                                                                                                   
      ELSE DO:                                                                                               
 
      END.     
   END. 
   CREATE tidut.
END PROCEDURE.

PROCEDURE anm_UI :
     
   CREATE tidut.   
   CREATE tidut.       
   ASSIGN
   SUBSTRING(tidut.UT,1) = "Anmärkning"
   retvar = 1 
   ednum = 1    
   ednum3 = LENGTH(uppl_temp.ANMARK)      
   retvar = INDEX(uppl_temp.ANMARK,CHR(10),ednum)
   edtecken = 50   
   edtext = uppl_temp.ANMARK
   tidtext = "".  
   {ANMARK2.I}  
   forstaanmark = TRUE.
END PROCEDURE.

PROCEDURE anmstolpmin_UI : 
   SUBSTRING(tidut.UT,utnr[8]) = mtrl_temp.MTRLTEXT.      
   
END PROCEDURE. 
PROCEDURE bryt_UI :
 
   RUN brytex_UI.

          /* sidlangd = anlat rader som ryms på en sida.
          kant = antal rader som ska skrivas ut för konstruktion
          tant = rest från föregående sida.
          */
                                                         
   IF bryt = FALSE THEN DO:     
     
      /*ryms konstruktionen på sidan*/
   END.
   ELSE DO:
      FIND tidut WHERE ROWID(tidut) = utrow1 NO-LOCK NO-ERROR.
      DELETE tidut.
      FIND tidut WHERE ROWID(tidut) = utrow2 NO-LOCK NO-ERROR.
      ASSIGN
      SUBSTRING(tidut.UT,132) = "$".
   END.
   
END PROCEDURE.

           
PROCEDURE egenkontroll_UI :
 
   CREATE tidut. 
   CREATE tidut.  
   ASSIGN
   SUBSTRING(tidut.UT,utnr[1]) = "EGENKONTROLL ENLIGT OVAN".
   CREATE tidut.
   CREATE tidut.
   ASSIGN SUBSTRING(tidut.UT,utnr[1]) = "Anm__________________________________________Datum:__________Sign:________".
   
   
END PROCEDURE.

 
PROCEDURE ett_UI :
   
   IF mtrl_temp2.XKORD NE ? THEN DO:                
      ASSIGN
      xkordvar = mtrl_temp2.XKORD
      sumpris = 0
      sumea = 0
      summont = 0
      summask = 0
      stopvar = FALSE.                
      FIND FIRST id_temp WHERE id_temp.XKORD = xkordvar AND
      id_temp.ENDKOMB = FALSE
      USE-INDEX ORD2 NO-LOCK NO-ERROR.
      IF AVAILABLE id_temp THEN DO: 
         ASSIGN
         numvar = id_temp.NUM
         stopvar = TRUE.                
         FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = mtrl_temp2.GRUPP 
         USE-INDEX KOD NO-LOCK NO-ERROR. 
         IF NOT AVAILABLE BBENAMNING THEN DO:
            FIND FIRST BBENAMNING USE-INDEX KOD NO-LOCK NO-ERROR.
         END.
         RUN id_UI. 
         IF skrivbord = TRUE THEN DO:
            FIND FIRST upptemp WHERE upptemp.XKORD = xkordvar AND
            upptemp.UPPLAG NE ? NO-LOCK NO-ERROR.
         END.
         IF TOG_UPP = TRUE THEN RUN upput_UI.
         FIND FIRST uppl_temp WHERE uppl_temp.NUM = id_temp.NUM 
         NO-LOCK NO-ERROR.
         IF AVAILABLE uppl_temp THEN DO:
                                       
            RUN val_UI.
            ccc
            IF TOG_SPANN = TRUE THEN RUN spann_UI.
            IF uppl_temp.ANMARK NE "" THEN DO: 
               IF TOG_ANM = TRUE THEN RUN anm_UI.      
            END.
         END.
         FIND FIRST idbuff WHERE idbuff.XKORD = xkordvar AND                     
         ROWID(idbuff) NE ROWID(id_temp) NO-ERROR. 
         IF AVAILABLE idbuff THEN DO: 
            RUN komb_UI.
         END.               
      END.
      ELSE DO:   
         musz = musz.
      END.
      
      IF TOG_MTRL = TRUE THEN DO:        
         IF globforetag = "Celpa" OR globforetag = "GRAN"  THEN RUN sign_UI.
         RUN rubrik_UI.
         RUN par_UI.
         numsok = FALSE.     
         FOR EACH mtrlbuff WHERE mtrlbuff.UPPLAG = temp_upp.UPPLAG AND 
         mtrlbuff.XKORD = xkordvar USE-INDEX ENRX: 
            IF mtrlbuff.ANTAL = 0 THEN DO:
               musz = musz.
               DELETE mtrlbuff.
            END.   
            ELSE DO:
               IF mtrlbuff.NUM = numvar THEN DO:
                  /*ingen par*/
                  IF mtrlbuff.PAR = 0 THEN RUN materiel_UI.
                  /*väsnter*/
                  IF mtrlbuff.PAR = 1 THEN RUN materiel2_UI.
                  /*mitten*/
                  IF mtrlbuff.PAR = 2 THEN RUN materiel3_UI.
                  /*höger*/
                  IF mtrlbuff.PAR = 3 THEN RUN materiel4_UI.
                  DELETE mtrlbuff.
               END.
               ELSE DO:
                  RUN materiel_UI.
                  DELETE mtrlbuff.
               END.   
            END.   
         END.  
         IF prisvar = 1 /*AND upppris > 0*/  THEN DO:
            CREATE tidut. 
            SUBSTRING(tidut.UT,utnr[2]) = "Kostnad för konstruktion".
            SUBSTRING(tidut.UT,utnr[7]) = STRING(upppris,">>>>>>>>9"). 
            upppris = 0.
            CREATE tidut.
         END.
         RUN par2_UI.
      END.   
      ELSE DO:
         FOR EACH mtrlbuff WHERE mtrlbuff.UPPLAG = temp_upp.UPPLAG AND 
         mtrlbuff.XKORD = xkordvar USE-INDEX ENRX:
            DELETE mtrlbuff.
         END.
      END.
      
      IF kalkvar = TRUE THEN DO:
         IF TOG_P3 = TRUE THEN DO:
            CREATE tidut.
            CREATE tidut.
            RUN rubrik2_UI.
            FOR EACH kalkbuff WHERE kalkbuff.UPPLAG = temp_upp.UPPLAG AND 
            kalkbuff.XKORD = xkordvar: 
               IF kalkbuff.ANTAL = 0 THEN DO:
                  musz = musz.
                  DELETE kalkbuff.
               END.   
               ELSE DO:         
                  RUN utkalk_UI.
                  DELETE kalkbuff.         
               END.   
            END.
            IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I} THEN DO:
               CREATE tidut.              
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  CREATE tidut.
                  ASSIGN

                  SUBSTRING(tidut.UT,utnr[1]) = "SUMMA:".
                  SUBSTRING(tidut.UT,utnr[6]) = STRING(summont,">>>>>>>>9.999").

                  SUBSTRING(tidut.UT,utnr[7]) = STRING(summask,">>>>>>>>9.999").

               END.   
            END.
            ELSE DO:
               CREATE tidut.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[7]) = "---------".
               END.
               CREATE tidut.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(sumea,">>>>>>>>9").
               END.
            END.            
         END.   
         ELSE DO:
            FOR EACH kalkbuff WHERE kalkbuff.UPPLAG = temp_upp.UPPLAG AND 
            kalkbuff.XKORD = xkordvar: 
               DELETE kalkbuff.
            END.   
         END.
      END.   
      IF TOG_EGEN = TRUE THEN DO:
         RUN egenkontroll_UI.
      END.
      CREATE tidut.
      CREATE tidut.      
      
      RUN bryt_UI.  
   END.
   ELSE DO:   
      ASSIGN            
      sumpris = 0
      sumea = 0
      summont = 0
      summask = 0.                                      
      FIND FIRST id_temp WHERE id_temp.NUM = mtrl_temp2.NUM NO-LOCK NO-ERROR.                                                                                                                      
      FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = mtrl_temp2.GRUPP 
      USE-INDEX KOD NO-LOCK NO-ERROR.
      IF NOT AVAILABLE BBENAMNING THEN DO:
         FIND FIRST BBENAMNING USE-INDEX KOD NO-LOCK NO-ERROR.
      END.
      RUN id_UI.
      IF skrivbord = TRUE THEN DO:
         FIND FIRST upptemp WHERE upptemp.NUM = mtrl_temp2.NUM AND
         upptemp.UPPLAG NE ? NO-LOCK NO-ERROR.
      END.
      IF TOG_UPP = TRUE THEN RUN upput_UI.                                          
      FIND FIRST uppl_temp WHERE uppl_temp.NUM = mtrl_temp2.NUM 
      NO-LOCK NO-ERROR.
      IF AVAILABLE uppl_temp THEN DO:
         
         RUN val_UI.
         IF TOG_SPANN = TRUE THEN RUN spann_UI.
         IF uppl_temp.ANMARK NE "" THEN DO:
            IF TOG_ANM = TRUE THEN RUN anm_UI.
         END.
      END.          
      ASSIGN
      numvar = mtrl_temp2.NUM.
      IF TOG_MTRL = TRUE THEN DO:                                
         IF globforetag = "Celpa" OR globforetag = "GRAN" THEN RUN sign_UI.
         RUN rubrik_UI.      
         RUN par_UI.
         numsok = TRUE.           
         
         FOR EACH mtrlbuff WHERE mtrlbuff.UPPLAG = temp_upp.UPPLAG AND 
         mtrlbuff.NUM = mtrl_temp2.NUM USE-INDEX ENRN BY mtrlbuff.ENR: 
            IF mtrlbuff.ANTAL = 0 THEN DO:
               musz = musz.
               DELETE mtrlbuff.
            END.   
            ELSE DO:
               IF mtrlbuff.PAR = 0 THEN RUN materiel_UI.
               IF mtrlbuff.PAR = 1 THEN RUN materiel2_UI.
               IF mtrlbuff.PAR = 2 THEN RUN materiel3_UI.
               IF mtrlbuff.PAR = 3 THEN RUN materiel4_UI.
               DELETE mtrlbuff.
            END.   
         END.     
         
         IF prisvar = 1 /*AND upppris > 0*/  THEN DO:
            CREATE tidut. 
            SUBSTRING(tidut.UT,utnr[2]) = "Kostnad för konstruktion".
            SUBSTRING(tidut.UT,utnr[7]) = STRING(upppris,">>>>>>>>9"). 
            upppris = 0.
            CREATE tidut.
         END.
         RUN par2_UI.     
      END.
      ELSE DO:
         FOR EACH mtrlbuff WHERE mtrlbuff.UPPLAG = temp_upp.UPPLAG AND 
         mtrlbuff.NUM = mtrl_temp2.NUM USE-INDEX ENRN BY mtrlbuff.ENR:
            DELETE mtrlbuff.
         END.
      END.  
      /*
      IF varforetypval[36] = 1 THEN.
      ELSE 
      */
      IF kalkvar = TRUE THEN DO:    
         IF TOG_P3 = TRUE THEN DO:
            CREATE tidut.
            
            CREATE tidut.
            RUN rubrik2_UI.
            
            FOR EACH kalkbuff WHERE kalkbuff.UPPLAG = temp_upp.UPPLAG AND 
            kalkbuff.NUM = numvar: 
               IF kalkbuff.ANTAL = 0 THEN DO:
                  musz = musz.
                  DELETE kalkbuff.
               END.   
               ELSE DO:         
                  RUN utkalk_UI.
                  DELETE kalkbuff.         
               END.   
            END.
            IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I} THEN DO:
               CREATE tidut.  
               CREATE tidut.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[1]) = "SUMMA:".
                  SUBSTRING(tidut.UT,utnr[6]) = STRING(summont,">>>>>>>>9.999").
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(summask,">>>>>>>>9.999").

               END.
            END.
            ELSE DO:
               CREATE tidut.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[7]) = "---------".
               END.
               CREATE tidut.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(sumea,">>>>>>>>9").
               END.
            END.
         END.   
         ELSE DO:
            FOR EACH kalkbuff WHERE kalkbuff.UPPLAG = temp_upp.UPPLAG AND 
            kalkbuff.NUM = numvar:
               DELETE kalkbuff.
            END.
         END.
      END. 
      IF TOG_EGEN = TRUE THEN DO:
         RUN egenkontroll_UI.
      END.
      CREATE tidut.
      CREATE tidut.
      
      RUN bryt_UI. 
   END.   
   ASSIGN
   totalsum = totalsum + sumpris
   totea = totea + sumea
   arbtim = arbtim + summont
   msktim = msktim + summask.
END PROCEDURE.

PROCEDURE bildfinns_UI :
   DEFINE INPUT PARAMETER linkvar AS CHARACTER NO-UNDO.
   link = linkvar.
END PROCEDURE.


PROCEDURE telfon_UI :
   
   FIND FIRST BEREDNING WHERE BEREDNING.BERNR = INTEGER(valaonr) AND 
   BEREDNING.OMRADE = valomrade USE-INDEX BERNR NO-LOCK NO-ERROR.
   IF globforetag = "ELPA" OR globforetag = "UMEA" THEN DO:
      IF BEREDNING.AONR = ? THEN DO:           
         FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = BEREDNING.ANVANDARE
         USE-INDEX ANDV NO-LOCK NO-ERROR.
         IF AVAILABLE ANVANDARE THEN DO:            
            FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = ANVANDARE.PERSONALKOD
            USE-INDEX PERSONALKOD NO-LOCK NO-ERROR.
         END.   
      END.
      ELSE DO: 
         FIND FIRST AONRTAB WHERE AONRTAB.AONR = BEREDNING.AONR AND
         AONRTAB.DELNR = BEREDNING.DELNR USE-INDEX AONR NO-LOCK NO-ERROR.
         FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = AONRTAB.BEREDARE
         USE-INDEX PERSONALKOD NO-LOCK NO-ERROR.
      END.                
      IF AVAILABLE PERSONALTAB THEN DO:                        
         CREATE tidut.
         ASSIGN
         SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gberel.
         SUBSTRING(tidut.UT,utnr[3]) = ":" + PERSONALTAB.FORNAM +                
         " " + PERSONALTAB.EFTERNAMN + "     " + PERSONALTAB.TELEFON + 
         "     " + PERSONALTAB.MOBILTEL.
      END.
   END. 
   ELSE DO:
      FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = BEREDNING.ANVANDARE NO-LOCK NO-ERROR.
      IF NOT AVAILABLE ANVANDARE THEN DO:
         FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = globanvpkod  
         NO-LOCK NO-ERROR.
      END.
      ELSE DO:
         FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = ANVANDARE.PERSONALKOD  
         NO-LOCK NO-ERROR. 
      END.  
      IF NOT AVAILABLE ANVANDARE THEN DO:
         FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = globanvpkod  
         NO-LOCK NO-ERROR.
      END. 
      IF AVAILABLE PERSONALTAB THEN DO:            
         FIND FIRST BEREDAONR WHERE BEREDAONR.PERSONALKOD = PERSONALTAB.PERSONALKOD 
         USE-INDEX PERSONALKOD NO-LOCK NO-ERROR.   
         IF NOT AVAILABLE BEREDAONR THEN DO:
            CREATE BEREDAONR.
            ASSIGN 
            BEREDAONR.PERSONALKOD = PERSONALTAB.PERSONALKOD
            BEREDAONR.FORNAMN = PERSONALTAB.FORNAMN
            BEREDAONR.EFTERNAMN = PERSONALTAB.EFTERNAMN.
         END.
         CREATE tidut.
         ASSIGN
         SUBSTRING(tidut.UT,utnr[1]) = "Utfärdare".
         SUBSTRING(tidut.UT,utnr[3]) = ":" + PERSONALTAB.FORNAMN +                
         " " + PERSONALTAB.EFTERNAMN + "     " + PERSONALTAB.TELEFON + "     " + PERSONALTAB.MOBILTEL.              
      END.
   END.   

END PROCEDURE.


PROCEDURE id_UI :
   CREATE tidut.
   ASSIGN
   utrow1 = ROWID(tidut).
   
   CREATE tidut. 
   ASSIGN
   SUBSTRING(tidut.UT,utnr[1]) = str1 
   utrow2 = ROWID(tidut).
    
   /*FOREBILDER*/
   IF link NE ? THEN DO:
   END.   
   ELSE DO:
   END.
   IF TOG_ID = TRUE THEN DO:
      IF globforetag = "SUND" OR globforetag = "SNAT" THEN DO:
         musz = musz.
      END.
      ELSE DO: 
         IF AVAILABLE id_temp THEN DO:
            IF id_temp.FORNR NE "" THEN DO:  
               CREATE tidut.           
               SUBSTRING(tidut.UT,utnr[1]) = SUBSTRING(ANNNAMN.TAB1,1,20).
               ASSIGN
               SUBSTRING(tidut.UT,utnr[3]) = ":" + id_temp.FORNR.
            END.
            ELSE DO:
               lage = 1.   
            END.
            
            IF id_temp.LINNR NE "" THEN DO:
               IF lage = 1 THEN DO:
                  CREATE tidut.           
                  lage = 2.
                  SUBSTRING(tidut.UT,utnr[1]) = SUBSTRING(ANNNAMN.TAB2,1,20).
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + id_temp.LINNR.
               END.   
               ELSE DO:
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[4]) = SUBSTRING(ANNNAMN.TAB2,1,20).
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[5]) = ":" + id_temp.LINNR.
                  lage = 1.
               END. 
            END.
            IF id_temp.NATNR NE "" THEN DO:
               IF lage = 1 THEN DO:              
                  CREATE tidut.
                     
                  SUBSTRING(tidut.UT,utnr[1]) = SUBSTRING(ANNNAMN.TAB3,1,20).
                  FIND FIRST BERNAT WHERE BERNAT.FORNR = id_temp.FORNR AND BERNAT.LINNR = id_temp.LINNR AND BERNAT.NATNR = id_temp.NATNR NO-LOCK NO-ERROR.
                  IF AVAILABLE BERNAT THEN DO:
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + id_temp.NATNR + " " + BERNAT.NAMN.                  
                  END.
                  ELSE SUBSTRING(tidut.UT,utnr[3]) = ":" + id_temp.NATNR.
               END.
               ELSE DO:
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[4]) = SUBSTRING(ANNNAMN.TAB3,1,20).
                  FIND FIRST BERNAT WHERE BERNAT.FORNR = id_temp.FORNR AND BERNAT.LINNR = id_temp.LINNR AND BERNAT.NATNR = id_temp.NATNR NO-LOCK NO-ERROR.
                  IF AVAILABLE BERNAT THEN DO:
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + id_temp.NATNR + " " + BERNAT.NAMN.                  
                  END.
                  ELSE SUBSTRING(tidut.UT,utnr[5]) = ":" + id_temp.NATNR.
               END.   
            END.   
         END.   
      END.   
      CREATE tidut. 
      IF AVAILABLE BBENAMNING THEN DO:
         IF BBENAMNING.ID1 NE "" THEN DO:
            ASSIGN
            SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.ID1.         
             /*GG den 31/1 2006*/
            IF globforetag = "cELPA" {GLOBVES.I} THEN DO:
               IF AVAILABLE id_temp THEN 
               SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(id_temp.FRI1).
               ELSE SUBSTRING(tidut.UT,utnr[3]) = ":".
            END.              
            ELSE DO:              
               IF AVAILABLE id_temp THEN 
               SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(id_temp.FRI1).
               ELSE SUBSTRING(tidut.UT,utnr[3]) = ":".
            END.         
         END.   
      END.
      IF AVAILABLE BBENAMNING THEN DO:
         IF globforetag = "SUND" OR globforetag = "SNAT" THEN DO:
            IF BBENAMNING.ID2 NE "" THEN DO:
               ASSIGN
               SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.ID2.
               IF AVAILABLE id_temp THEN DO:
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(id_temp.FRI2).
                  FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                  mtrlbuff.PAR = 1 NO-LOCK NO-ERROR.
                  IF AVAILABLE mtrlbuff THEN DO:
                     SUBSTRING(tidut.UT,utnr[5] + 7) = PARSTOLP.A.
                  END.
                  FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                  mtrlbuff.PAR = 2 NO-LOCK NO-ERROR.
                  IF AVAILABLE mtrlbuff THEN DO:
                     SUBSTRING(tidut.UT,utnr[5] + 9) = PARSTOLP.B.             
                  END.
                  FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                  mtrlbuff.PAR = 3 NO-LOCK NO-ERROR.
                  IF AVAILABLE mtrlbuff THEN DO: 
                     SUBSTRING(tidut.UT,utnr[5] + 11) = PARSTOLP.C.
                  END.
               END.                                                         
               ELSE SUBSTRING(tidut.UT,utnr[3]) = ":".
            END.
         END.
         ELSE DO:
            IF BBENAMNING.ID2 NE "" THEN DO:
               IF globforetag = "GKAL" THEN DO:
                  
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[4]) = BBENAMNING.ID2.
                  
                  IF AVAILABLE id_temp THEN DO:
                     SUBSTRING(tidut.UT,utnr[6]) = ":" + STRING(id_temp.FRI2).
                     FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                     mtrlbuff.PAR = 1 NO-LOCK NO-ERROR.
                     IF AVAILABLE mtrlbuff THEN DO:
                        SUBSTRING(tidut.UT,utnr[6] + 7) = PARSTOLP.A.
                                                                       
                     END.
                     FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                     mtrlbuff.PAR = 2 NO-LOCK NO-ERROR.
                     IF AVAILABLE mtrlbuff THEN DO:
                        SUBSTRING(tidut.UT,utnr[6] + 9) = PARSTOLP.B.
                                                                      
                     END.
                     FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                     mtrlbuff.PAR = 3 NO-LOCK NO-ERROR.
                     IF AVAILABLE mtrlbuff THEN DO:
                        SUBSTRING(tidut.UT,utnr[6] + 11) = PARSTOLP.C.
                                                                    
                     END.
                  END.     
               END.
               ELSE DO:
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[4]) = BBENAMNING.ID2.                                 
                  IF globforetag = "cELPA" {GLOBVES.I} THEN DO:
                                                        
                     IF AVAILABLE id_temp THEN DO:
                        SUBSTRING(tidut.UT,utnr[6]) = ":" + STRING(id_temp.FRI2).
                                                   
                        FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                        mtrlbuff.PAR = 1 NO-LOCK NO-ERROR.
                        IF AVAILABLE mtrlbuff THEN DO:
                           SUBSTRING(tidut.UT,utnr[6] + 7) = PARSTOLP.A.
                                                                             
                        END.
                        FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                        mtrlbuff.PAR = 2 NO-LOCK NO-ERROR.
                        IF AVAILABLE mtrlbuff THEN DO:
                           SUBSTRING(tidut.UT,utnr[6] + 9) = PARSTOLP.B.
                                                                            
                        END.
                        FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                        mtrlbuff.PAR = 3 NO-LOCK NO-ERROR.
                        IF AVAILABLE mtrlbuff THEN DO:
                           SUBSTRING(tidut.UT,utnr[6] + 11) = PARSTOLP.C.
                                                                           
                        END.
                     END.   
                  END.
                      
                  ELSE DO:
                                                            
                     IF AVAILABLE id_temp THEN DO:
                           SUBSTRING(tidut.UT,utnr[5]) = ":" + STRING(id_temp.FRI2).
                                                   
                     END.
                     FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                     mtrlbuff.PAR = 1 NO-LOCK NO-ERROR.
                     IF AVAILABLE mtrlbuff THEN DO:
                        SUBSTRING(tidut.UT,utnr[6] + 7) = PARSTOLP.A.
                                                  
                     END.
                     FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                     mtrlbuff.PAR = 2 NO-LOCK NO-ERROR.
                     IF AVAILABLE mtrlbuff THEN DO:
                        SUBSTRING(tidut.UT,utnr[6] + 9) = PARSTOLP.B.
                                                 
                     END.
                     FIND FIRST mtrlbuff WHERE mtrlbuff.NUM = mtrl_temp2.NUM AND
                     mtrlbuff.PAR = 3 NO-LOCK NO-ERROR.
                     IF AVAILABLE mtrlbuff THEN DO:
                        SUBSTRING(tidut.UT,utnr[6] + 11) = PARSTOLP.C.
                                                
                     END.                  
                  END.
               END.
            END. 
         END.
      END.
               
      IF AVAILABLE id_temp THEN DO:
         IF id_temp.FRI3 NE "" THEN DO:
            CREATE tidut.
            IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "elpa" THEN DO:
               SUBSTRING(tidut.UT,utnr[4]) = "Littera".
               IF globforetag = "GKAL" THEN DO:
                  SUBSTRING(tidut.UT,utnr[6]) = ":" + STRING(id_temp.FRI3).
               
                                             
               END.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[5]) = ":" + STRING(id_temp.FRI3).
                  
               END.                              
            END.
            ELSE DO:
               IF globforetag = "ALTE" {GLOBVES.I} THEN DO:

                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(id_temp.FRI3).
              END.
               ELSE IF globforetag = "ORBI" THEN DO:
                  IF id_temp.GRUPP = 32 THEN SUBSTRING(tidut.UT,utnr[4]) = "Stnnr".
                  ELSE IF id_temp.GRUPP = 0 THEN SUBSTRING(tidut.UT,utnr[4]) = "Skåpnr".
                  ELSE SUBSTRING(tidut.UT,utnr[4]) = "Byggnr".
                  SUBSTRING(tidut.UT,utnr[6]) = ":" + STRING(id_temp.FRI3).
                                             
               END.
               ELSE DO:
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[4]) = "Fri ID".
                  SUBSTRING(tidut.UT,utnr[5]) = ":" + STRING(id_temp.FRI3).
                                             
               END.
            END.
         END.   
      END.                     
   END.  
   
   /* vattenfall vill inte ha med konstruktionsgrupp, konstruktion om Konstruktionsval urbockad*/
   IF globforetag = "vast" AND TOG_VAL = FALSE THEN.
   ELSE DO:    
      FIND FIRST KONSTGRUPP WHERE KONSTGRUPP.KONSKOD = id_temp.GRUPP NO-LOCK NO-ERROR.                
      IF valkonst = FALSE THEN DO:
         IF AVAILABLE KONSTGRUPP THEN DO:
            CREATE tidut.                    
            SUBSTRING(tidut.UT,utnr[1]) =  KONSTGRUPP.BENAMNING.
            
         END.
         FIND FIRST BERID2 WHERE BERID2.AONR = valaonr AND BERID2.OMRADE = valomrade AND BERID2.NUM = id_temp.NUM NO-LOCK NO-ERROR.
         IF AVAILABLE BERID2 THEN DO:         
            IF BERID2.STOLPNR NE "" THEN DO: 
               SUBSTRING(tidut.UT,utnr[4]) = "Kartref. " + BERID2.STOLPNR.
               
            END.                          
         END.
      END.
      ELSE DO:
         FIND FIRST hid WHERE /*hid.BERAONR = valaonr AND hid.OMRADE = valomrade AND*/ hid.ORD = id_temp.NUM NO-LOCK NO-ERROR.
         IF AVAILABLE hid THEN DO:
            IF AVAILABLE KONSTGRUPP THEN DO:
               CREATE tidut.             
               SUBSTRING(tidut.UT,utnr[1]) =  KONSTGRUPP.BENAMNING.
               
            END.         
            FIND FIRST BERID2 WHERE BERID2.AONR = hid.BERAONR AND BERID2.OMRADE = hid.OMRADE AND BERID2.NUM = hid.NUM NO-LOCK NO-ERROR.
            IF AVAILABLE BERID2 THEN DO:
               IF BERID2.STOLPNR NE "" THEN DO: 
                  SUBSTRING(tidut.UT,utnr[4]) = "Kartref. " + BERID2.STOLPNR.
                  
               END.                            
            END.
         END.
      END.
   END.
      
END PROCEDURE.

PROCEDURE kalk_UI :
   /*kalkår*/
    
   
      hjkatvar[1] = katvar. 
      FIND FIRST EBRPRIS WHERE EBRPRIS.ARTAL = hjkatvar[1]
      USE-INDEX AR NO-LOCK NO-ERROR.
      IF AVAILABLE EBRPRIS THEN DO:
         ASSIGN
         hjkatprisvar[1] = EBRPRIS.MONT
         hjkatmask1var[1] = EBRPRIS.MASK1
         hjkatmask2var[1] = EBRPRIS.MASK2
         hjkatrorligvar[1] = EBRPRIS.RORLIG.
      END.
   
   

   RUN LISTKALKU_UI
      (INPUT valaonr, INPUT valomrade, INPUT valkonst, INPUT TABLE kon_val, 
      OUTPUT TABLE ber_temp).
     
   ASSIGN   
   sumantal = 0.
   
   FOR EACH ber_temp BREAK BY ber_temp.NUM BY ber_temp.ARBKOD BY ber_temp.LOPNR:        
      ACCUMULATE ber_temp.ANTAL (TOTAL BY ber_temp.NUM BY ber_temp.ARBKOD BY ber_temp.LOPNR).       
      IF LAST-OF(ber_temp.LOPNR) THEN DO:
         CREATE ber_temp2.
         ASSIGN                        
         ber_temp2.ARBKOD = ber_temp.ARBKOD 
         ber_temp2.LOPNR = ber_temp.LOPNR 
         ber_temp2.ENHET = ber_temp.ENHET
         ber_temp2.BENAMNING = ber_temp.BENAMNING
         ber_temp2.NUM = ber_temp.NUM 
         
         ber_temp2.ANTAL = (ACCUM TOTAL BY ber_temp.LOPNR ber_temp.ANTAL).
                               
      END.     
   END.
   
   IF varforetypchar[48] NE "" THEN DO: 
      FOR EACH ber_temp2 USE-INDEX KOD:
         RUN skapaKalkKlasser_UI.
      END.   
   END.  
   FOR EACH kalk_temp USE-INDEX NUM:      
      FIND FIRST uppl_temp WHERE uppl_temp.NUM = kalk_temp.NUM
      USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE uppl_temp THEN DO: 
         ASSIGN
         kalk_temp.UPPLAG = uppl_temp.UPPLAG
         kalk_temp.GRUPP = uppl_temp.GRUPP.
         IF TOG_UPP = FALSE THEN kalk_temp.UPPLAG = ?.
      END.
      ELSE DO:
         kalk_temp.UPPLAG = ?.
      END.
      FIND FIRST id_temp WHERE id_temp.NUM = kalk_temp.NUM
      USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE id_temp THEN DO:  
         IF id_temp.ENDKOMB = FALSE THEN DO:
            ASSIGN            
            kalk_temp.XKORD = id_temp.XKORD.
         END.
         ELSE DO:
            FIND FIRST idbuff WHERE idbuff.XKORD = id_temp.XKORD AND
            ROWID(idbuff) NE ROWID(id_temp) NO-LOCK NO-ERROR.
            ASSIGN                           
            kalk_temp.XKORD = idbuff.XKORD.
         END.   
      END.
      ELSE DO:
         kalk_temp.XKORD = ?.
      END.
   END.    
   ASSIGN
   sumpris = 0
   sumantal = 0
   sumea = 0
   summont = 0
   summask = 0.
   FOR EACH kalk_temp WHERE kalk_temp.XKORD NE ? BREAK BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.XKORD: 
      ACCUMULATE kalk_temp.EA (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.XKORD). 
      ACCUMULATE kalk_temp.F2 (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.XKORD). 
      ACCUMULATE kalk_temp.F3 (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.XKORD). 
      ACCUMULATE kalk_temp.F4 (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.XKORD). 
      ACCUMULATE kalk_temp.ANTAL (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.XKORD).       
      IF LAST-OF(kalk_temp.XKORD) THEN DO:
         CREATE kalk_temp2.
         ASSIGN                        
         kalk_temp2.UPPLAG = kalk_temp.UPPLAG 
         kalk_temp2.GRUPP = kalk_temp.GRUPP 
         kalk_temp2.XKORD = kalk_temp.XKORD
         kalk_temp2.ARBKOD = kalk_temp.ARBKOD
         kalk_temp2.LOPNR = kalk_temp.LOPNR
         kalk_temp2.BENAMNING = kalk_temp.BENAMNING 
         kalk_temp2.ENHET = kalk_temp.ENHET 
         kalk_temp2.EAST = kalk_temp.EAST        
         kalk_temp2.EA = (ACCUM TOTAL BY kalk_temp.XKORD kalk_temp.EA) 
         kalk_temp2.F2 = (ACCUM TOTAL BY kalk_temp.XKORD kalk_temp.F2)
         kalk_temp2.F3 = (ACCUM TOTAL BY kalk_temp.XKORD kalk_temp.F3)
         kalk_temp2.F4 = (ACCUM TOTAL BY kalk_temp.XKORD kalk_temp.F4)
         kalk_temp2.ANTAL = (ACCUM TOTAL BY kalk_temp.XKORD kalk_temp.ANTAL).         
      END.     
   END.  
   ASSIGN
   sumpris = 0
   sumantal = 0
   sumea = 0
   summont = 0
   summask = 0.    
   FOR EACH kalk_temp WHERE kalk_temp.XKORD = ? BREAK BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.NUM: 
      ACCUMULATE kalk_temp.EA (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.NUM). 
      ACCUMULATE kalk_temp.F2 (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.NUM). 
      ACCUMULATE kalk_temp.F3 (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.NUM). 
      ACCUMULATE kalk_temp.F4 (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.NUM). 
      ACCUMULATE kalk_temp.ANTAL (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR BY kalk_temp.UPPLAG BY kalk_temp.NUM).       
      IF LAST-OF(kalk_temp.NUM) THEN DO:
         CREATE kalk_temp2.
         ASSIGN                        
         kalk_temp2.UPPLAG = kalk_temp.UPPLAG 
         kalk_temp2.GRUPP = kalk_temp.GRUPP 
         kalk_temp2.XKORD = kalk_temp.XKORD 
         kalk_temp2.NUM = kalk_temp.NUM
         kalk_temp2.ARBKOD = kalk_temp.ARBKOD
         kalk_temp2.LOPNR = kalk_temp.LOPNR
         kalk_temp2.BENAMNING = kalk_temp.BENAMNING 
         kalk_temp2.ENHET = kalk_temp.ENHET
         kalk_temp2.EAST = kalk_temp.EAST
         kalk_temp2.EA = (ACCUM TOTAL BY kalk_temp.NUM kalk_temp.EA) 
         kalk_temp2.F2 = (ACCUM TOTAL BY kalk_temp.NUM kalk_temp.F2)
         kalk_temp2.F3 = (ACCUM TOTAL BY kalk_temp.NUM kalk_temp.F3)
         kalk_temp2.F4 = (ACCUM TOTAL BY kalk_temp.NUM kalk_temp.F4)
         kalk_temp2.ANTAL = (ACCUM TOTAL BY kalk_temp.NUM kalk_temp.ANTAL).                                
      END.     
   END.
END PROCEDURE.

PROCEDURE komb_UI :

   CREATE tidut.
   SUBSTRING(tidut.UT,utnr[1]) ="Kombinerad med".
                              
   FOR EACH idbuff WHERE idbuff.XKORD = xkordvar AND                        
   ROWID(idbuff) NE ROWID(id_temp):                                
      CREATE tidut.
      FIND FIRST grupp_temp2 WHERE grupp_temp2.KONSKOD = idbuff.GRUPP.
      ASSIGN SUBSTRING(tidut.UT,utnr[1]) = grupp_temp2.BENAMNING. 
                                 
      FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = idbuff.GRUPP 
      USE-INDEX KOD NO-LOCK NO-ERROR.  
      IF NOT AVAILABLE BBENAMNING THEN DO:
         FIND FIRST BBENAMNING USE-INDEX KOD NO-LOCK NO-ERROR.  
      END.
      IF idbuff.FRI2 NE ? THEN DO:
         CREATE tidut.         
         SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.ID2.
                                    
         SUBSTRING(tidut.UT,utnr[4]) = ":" + STRING(idbuff.FRI2).
                                    
      END.   
      ELSE DO:
         IF BBENAMNING.ID2 NE "" THEN DO:
            CREATE tidut.
            SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.ID2.
                                       
            SUBSTRING(tidut.UT,utnr[4]) = ":".
                                       
         END.   
      END.   
      FIND FIRST uppbuff WHERE uppbuff.NUM = idbuff.NUM 
      NO-LOCK NO-ERROR.
      IF AVAILABLE uppbuff THEN DO:  
         CREATE tidut.
         SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.B1.
                                    
         SUBSTRING(tidut.UT,utnr[4]) = ":" + uppbuff.F1. 
                                    
         IF uppbuff.ANMARK NE "" THEN DO:                                   
            IF TOG_ANM = TRUE THEN RUN anm3_UI.      
         END.
         IF TOG_SPANN = TRUE THEN RUN spann2_UI.   
      END.                                          
   END.
END PROCEDURE.

PROCEDURE materiel2_UI :
   IF mat2 = FALSE THEN DO:       
      CREATE tidut2.
      
      CREATE tidut2.
      ASSIGN
      SUBSTRING(tidut2.UT,utnr[1]) = PARSTOLP.AFORKL
      mat2 = TRUE.
      CREATE tidut2.
      
   END.
   CREATE tidut2.
   
   SUBSTRING(tidut2.UT,utnr[1]) = mtrlbuff.ENR.
   
   SUBSTRING(tidut2.UT,utnr[2]) = SUBSTRING(mtrlbuff.BENAMNING,1,benlangd).
   
   SUBSTRING(tidut2.UT,utnr[4]) = mtrlbuff.ENHET.
   
   SUBSTRING(tidut2.UT,utnr[5]) = STRING(mtrlbuff.ANTAL,">>>>>9"). 
   
   IF prisvar = 1 THEN  DO:
      ASSIGN 
      SUBSTRING(tidut2.UT,utnr[6]) = STRING(mtrlbuff.PRIS,">>>>>>>>9").
      
      SUBSTRING(tidut2.UT,utnr[7]) = STRING(mtrlbuff.TOTPRIS,">>>>>>>>9").      
      
   END.
   upppris = upppris + mtrlbuff.TOTPRIS. 
   sumpris = sumpris + mtrlbuff.TOTPRIS.  
   IF TOG_TEXT = TRUE THEN DO:
      ASSIGN
      mtextvar = FALSE
      tiduttyp = 2
      skapad = FALSE.      
      IF numsok = FALSE THEN DO:
         RUN mtextxkord_UI.
      END.
      ELSE DO:
         RUN mtextnum_UI.
      END.
      IF skapad = TRUE THEN DO:
         FIND LAST tidut2 NO-ERROR.
         DELETE tidut2.
         skapad = FALSE.
      END.
   END.
END PROCEDURE.

PROCEDURE materiel3_UI :

   IF mat3 = FALSE THEN DO:      
      CREATE tidut3.
      
      CREATE tidut3.
      ASSIGN
      SUBSTRING(tidut3.UT,utnr[1]) = PARSTOLP.BFORKL
      mat3 = TRUE.
      CREATE tidut3.      
      
   END.
   CREATE tidut3.
   ASSIGN
   SUBSTRING(tidut3.UT,utnr[1]) = mtrlbuff.ENR.
   
   SUBSTRING(tidut3.UT,utnr[2]) = SUBSTRING(mtrlbuff.BENAMNING,1,benlangd).
   SUBSTRING(tidut3.UT,utnr[4]) = mtrlbuff.ENHET.
   SUBSTRING(tidut3.UT,utnr[5]) = STRING(mtrlbuff.ANTAL,">>>>>9").   
   IF prisvar = 1 THEN DO:
      ASSIGN 
      SUBSTRING(tidut3.UT,utnr[6]) = STRING(mtrlbuff.PRIS,">>>>>>>>9").
      SUBSTRING(tidut3.UT,utnr[7]) = STRING(mtrlbuff.TOTPRIS,">>>>>>>>9").      
   END.
   upppris = upppris + mtrlbuff.TOTPRIS. 
   sumpris = sumpris + mtrlbuff.TOTPRIS.  
   IF TOG_TEXT = TRUE THEN DO:
      ASSIGN
      mtextvar = FALSE
      tiduttyp = 3
      skapad = FALSE.
      IF numsok = FALSE THEN DO:
         RUN mtextxkord_UI.
      END.
      ELSE DO:
         RUN mtextnum_UI.
      END.
      IF skapad = TRUE THEN DO:
         FIND LAST tidut3 NO-ERROR.
         DELETE tidut3.
         skapad = FALSE.
      END.
   END.
END PROCEDURE.

PROCEDURE materiel4_UI :

   IF mat4 = FALSE THEN DO:      
      CREATE tidut4.
      
      CREATE tidut4.
      ASSIGN
      SUBSTRING(tidut4.UT,utnr[1]) = PARSTOLP.CFORKL
      mat4 = TRUE.
      
      
      CREATE tidut4.
      
   END.
   CREATE tidut4.
   ASSIGN
   
  
   SUBSTRING(tidut4.UT,utnr[1]) = mtrlbuff.ENR.
   SUBSTRING(tidut4.UT,utnr[2]) = SUBSTRING(mtrlbuff.BENAMNING,1,benlangd).
   SUBSTRING(tidut4.UT,utnr[4]) = mtrlbuff.ENHET.
   ASSIGN
   SUBSTRING(tidut4.UT,utnr[5]) = STRING(mtrlbuff.ANTAL,">>>>>9"). 
   IF prisvar = 1 THEN DO:
      ASSIGN 
      SUBSTRING(tidut4.UT,utnr[6]) = STRING(mtrlbuff.PRIS,">>>>>>>>9").
      SUBSTRING(tidut4.UT,utnr[7]) = STRING(mtrlbuff.TOTPRIS,">>>>>>>>9").
   END.
   upppris = upppris + mtrlbuff.TOTPRIS. 
   sumpris = sumpris + mtrlbuff.TOTPRIS.
   IF TOG_TEXT = TRUE THEN DO:
      ASSIGN
      mtextvar = FALSE
      tiduttyp = 4
      skapad = FALSE.
      IF numsok = FALSE THEN DO:
         RUN mtextxkord_UI.
      END.
      ELSE DO:
         RUN mtextnum_UI.
      END.
      IF skapad = TRUE THEN DO:
         FIND LAST tidut4 NO-ERROR.
         DELETE tidut4.
         skapad = FALSE.
      END.
   END.
END PROCEDURE.

PROCEDURE materiel_UI :

   CREATE tidut.
   SUBSTRING(tidut.UT,utnr[1]) = mtrlbuff.ENR.
   SUBSTRING(tidut.UT,utnr[2]) = SUBSTRING(mtrlbuff.BENAMNING,1,benlangd).
   SUBSTRING(tidut.UT,utnr[4]) = mtrlbuff.ENHET.
   SUBSTRING(tidut.UT,utnr[5]) = STRING(mtrlbuff.ANTAL,">>>>>9").     
   IF prisvar = 1 THEN DO:
      ASSIGN 
      SUBSTRING(tidut.UT,utnr[6]) = STRING(mtrlbuff.PRIS,">>>>>>>>9").
      SUBSTRING(tidut.UT,utnr[7]) = STRING(mtrlbuff.TOTPRIS,">>>>>>>>9").
      sumpris = sumpris + mtrlbuff.TOTPRIS.             
   END.
   upppris = upppris + mtrlbuff.TOTPRIS. 
   IF TOG_TEXT = TRUE THEN DO:
      ASSIGN
      mtextvar = FALSE
      tiduttyp = 1
      skapad = FALSE.
      IF numsok = FALSE THEN DO:
         RUN mtextxkord_UI.
      END.
      ELSE DO:
         RUN mtextnum_UI.            
      END.
      IF skapad = TRUE THEN DO:
         FIND LAST tidut NO-ERROR.
         DELETE tidut.
         skapad = FALSE.
      END.
   END.
END PROCEDURE.

PROCEDURE mtextnum_UI :

   FOR EACH mtrl_temp WHERE mtrl_temp.NUM = mtrlbuff.NUM AND
   mtrl_temp.ENR = mtrlbuff.ENR:
              
      IF mtrl_temp.MTRLTEXT NE "" THEN DO:
         RUN text_UI.
      END.   
      DELETE mtrl_temp.
   END.
END PROCEDURE.

PROCEDURE mtextxkord_UI :

   FOR EACH mtrl_temp WHERE mtrl_temp.XKORD = mtrlbuff.XKORD AND
   mtrl_temp.ENR = mtrlbuff.ENR:
      
      IF mtrl_temp.MTRLTEXT NE "" THEN DO:
         RUN text_UI.
      END.   
      DELETE mtrl_temp.
   END.
END PROCEDURE.

PROCEDURE par2_UI :
   FIND FIRST tidut2 NO-LOCK NO-ERROR.
   IF AVAILABLE tidut2 THEN DO:         
      FOR EACH tidut2:
         CREATE tidut.
         ASSIGN
        
         
         tidut.UT = tidut2.UT.
      END.   
   END.
   FIND FIRST tidut3 NO-LOCK NO-ERROR.
   IF AVAILABLE tidut3 THEN DO:         
      FOR EACH tidut3:
         CREATE tidut.
         ASSIGN
        
         
         tidut.UT = tidut3.UT.
      END.   
   END.
   FIND FIRST tidut4 NO-LOCK NO-ERROR.
   IF AVAILABLE tidut4 THEN DO:         
      FOR EACH tidut4:
         CREATE tidut.
         ASSIGN
        
         
         tidut.UT = tidut4.UT.
      END.   
   END.
END PROCEDURE.

PROCEDURE par_UI :
   ASSIGN
   mat2 = FALSE
   mat3 = FALSE
   mat4 = FALSE. 
   EMPTY TEMP-TABLE tidut2 NO-ERROR. 
   EMPTY TEMP-TABLE tidut3 NO-ERROR. 
   EMPTY TEMP-TABLE tidut4 NO-ERROR.      
END PROCEDURE.

PROCEDURE rubrik2_UI :
   IF globforetag = "GRAN" OR globforetag = "NAEK" OR globforetag = "GKAL" OR globforetag = "ELPA" OR globforetag = "CPOMA" {GLOBVES.I} THEN DO:
      CREATE tidut.
      IF kalkvisabaraantal = TRUE THEN SUBSTRING(tidut.UT,utnr[1]) = "P2-KOD".
      ELSE SUBSTRING(tidut.UT,utnr[1]) = "P3-KOD".
      SUBSTRING(tidut.UT,utnr[2]) = "BENÄMNING".
      SUBSTRING(tidut.UT,utnr[4]) = "ENH".
      SUBSTRING(tidut.UT,utnr[5]) = "ANTAL".
      IF kalkvisabaraantal = TRUE THEN.
      ELSE DO:
         SUBSTRING(tidut.UT,utnr[6]) = "MONTÖR".
         SUBSTRING(tidut.UT,utnr[7]) = "MASKIN".                    
      END.                               
      CREATE tidut.  
      
   END.
   ELSE DO:
      CREATE tidut.
      IF kalkvisabaraantal = TRUE THEN SUBSTRING(tidut.UT,utnr[1]) = "P2-KOD".
      ELSE SUBSTRING(tidut.UT,utnr[1]) = "P3-KOD".
      SUBSTRING(tidut.UT,utnr[2]) = "BENÄMNING".
      SUBSTRING(tidut.UT,utnr[4]) = "ENH".
      SUBSTRING(tidut.UT,utnr[5]) = " ANTAL".
      IF kalkvisabaraantal = TRUE THEN.
      ELSE DO:
         SUBSTRING(tidut.UT,utnr[6]) = "   EA/ENH".
         SUBSTRING(tidut.UT,utnr[7]) = "    SUMMA".                                                                         
      END.
      CREATE tidut.  
      
   END.   
END PROCEDURE.


PROCEDURE rubrik_UI :

   CREATE tidut.
   
   
   CREATE tidut.    
   ASSIGN  
   
   
   
   SUBSTRING(tidut.UT,utnr[1]) = CAPS(Guru.Konstanter:genk).
   SUBSTRING(tidut.UT,utnr[2]) = "BENÄMNING".
   SUBSTRING(tidut.UT,utnr[4]) = "ENH".
   SUBSTRING(tidut.UT,utnr[5]) = " ANTAL".
   IF prisvar = 1 THEN DO:
      ASSIGN 
      SUBSTRING(tidut.UT,utnr[6]) = " PRIS/ENH".
      SUBSTRING(tidut.UT,utnr[7]) = "    SUMMA".
   END.
   CREATE tidut.  
   
END PROCEDURE.


PROCEDURE sign_UI :
   
   IF AVAILABLE tidut AND tidut.UT NE "" THEN DO:   
      CREATE tidut.
      
      
   END.
   CREATE tidut.    
   ASSIGN  
   
   
                    
   SUBSTRING(tidut.UT,utnr[1]) = "Datum:________________".
   
                                   
   SUBSTRING(tidut.UT,utnr[4])  = "Sign:__________________________".
   
   
END PROCEDURE.


PROCEDURE rubrikstolp_UI :

   CREATE tidut.
   
   
   CREATE tidut.    
   ASSIGN  
   
   
   
   SUBSTRING(tidut.UT,utnr[1]) = CAPS(Guru.Konstanter:genk).
   
   SUBSTRING(tidut.UT,utnr[2]) = "BENÄMNING".
   SUBSTRING(tidut.UT,utnr[4]) = "ANTAL".
   SUBSTRING(tidut.UT,utnr[5]) = " ENHET".
   SUBSTRING(tidut.UT,utnr[6]) = " BYGGNR".
   SUBSTRING(tidut.UT,utnr[7]) = " LITTRA".
   IF TOG_ANM = TRUE THEN DO:
      SUBSTRING(tidut.UT,utnr[8]) = "ANMÄRKNING".
   END.                                                           
   CREATE tidut.  
   
END PROCEDURE.


PROCEDURE skapaKalkKlasser_UI :
   CREATE kalk_temp.
   ASSIGN
   kalk_temp.ARBKOD = ber_temp2.ARBKOD
   kalk_temp.LOPNR = ber_temp2.LOPNR
   kalk_temp.BENAMNING = ber_temp2.BENAMNING
   kalk_temp.ENHET = ber_temp2.ENHET
   kalk_temp.ANTAL = ber_temp2.ANTAL  
   kalk_temp.EA = 0
   kalk_temp.EAST = 0
   kalk_temp.ARBETE = 0   
   kalk_temp.MASKINKOST = 0   
   kalk_temp.MATERIEL = 0
   kalk_temp.OVRIGT = 0
   kalk_temp.NUM = ber_temp2.NUM.
END PROCEDURE.



PROCEDURE spann2_UI :
   musz = FALSE.
   IF musz = FALSE THEN DO:
      FIND FIRST lin_temp WHERE lin_temp.NUM1 = uppbuff.NUM
      OR lin_temp.NUM2 = uppbuff.NUM USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE lin_temp THEN DO:            
         FOR EACH lin_temp WHERE lin_temp.NUM1 = uppbuff.NUM
         OR lin_temp.NUM2 = uppbuff.NUM USE-INDEX NUM:
            IF lin_temp.NUM1 NE lin_temp.NUM2 THEN DO:        
               CREATE tidut.
               ASSIGN
               
                   
              
               SUBSTRING(tidut.UT,utnr[1]) = "Spann/kabellängd".
               SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(lin_temp.METER) + " meter" + " " + lin_temp.BENAMNING + " till".
               IF lin_temp.NUM1 = uppbuff.NUM THEN DO:            
                  FIND FIRST idbuff WHERE idbuff.NUM = lin_temp.NUM2 USE-INDEX NUM
                  NO-LOCK NO-ERROR.
               END.
               ELSE DO:
                  FIND FIRST idbuff WHERE idbuff.NUM = lin_temp.NUM1 USE-INDEX NUM
                  NO-LOCK NO-ERROR.
               END. 
               IF AVAILABLE idbuff THEN DO:
                  FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = idbuff.GRUPP 
                  USE-INDEX KOD NO-LOCK NO-ERROR.
                  IF NOT AVAILABLE BBENAMNING THEN DO:
                     FIND FIRST BBENAMNING USE-INDEX KOD NO-LOCK NO-ERROR.
                  END.
                  IF idbuff.FRI1 NE ? THEN DO:
                     CREATE tidut.
                     ASSIGN
                     
                     
                    
                     SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.ID1.
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI1).
                     SUBSTRING(tidut.UT,utnr[4]) = BBENAMNING.ID2.
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[6]) = ":" + STRING(idbuff.FRI2).
                     /*GG 20060515*/
                     IF idbuff.FRI3 NE "" THEN DO:
                        CREATE tidut.
                        IF globforetag = "ALTE" {GLOBVES.I} THEN DO:
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                                                                                          
                        END.
                        ELSE IF globforetag = "cELPA" THEN DO:
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                                                                                          
                        END.
                        ELSE DO:
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                                                                                          
                        END.
                     END.
                  END. 
                  ELSE DO:
                     IF idbuff.FRI2 NE ? THEN DO:
                        CREATE tidut.
                        ASSIGN
                        
                        
                       
                        SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.ID2.
                        ASSIGN
                        SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI2).
                        /*GG 20060515*/
                        IF idbuff.FRI3 NE "" THEN DO:
                           CREATE tidut.
                           ASSIGN
                           
                           
                          
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                                                                                          
                        END.
                     END.
                     ELSE DO:
                        CREATE tidut.
                        ASSIGN
                        
                        
                       
                        SUBSTRING(tidut.UT,utnr[1]) = ANNNAMN.TAB3.
                        FIND FIRST BERNAT WHERE BERNAT.FORNR = idbuff.FORNR AND BERNAT.LINNR = idbuff.LINNR AND BERNAT.NATNR = idbuff.NATNR NO-LOCK NO-ERROR.
                        IF AVAILABLE BERNAT THEN DO:
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + idbuff.NATNR + " " + BERNAT.NAMN.                  
                        END.
                        ELSE SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.NATNR).
                        /*GG 20060515*/
                        IF idbuff.FRI3 NE "" THEN DO:
                           CREATE tidut.
                           ASSIGN
                           
                           
                          
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                                                                                          
                        END.
                     END.
                  END.                                 
               END.  
               DELETE lin_temp.
            END.   
            ELSE DO:
               CREATE tidut.
               ASSIGN
               
               
               
               SUBSTRING(tidut.UT,utnr[1]) = "Spann/kabellängd".
               SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(lin_temp.METER) + " meter" + " " + lin_temp.BENAMNING + " till".
               CREATE tidut.
               ASSIGN
               
               SUBSTRING(tidut.UT,utnr[1]) = "Intern".
               /*GG 20060515*/
               IF AVAILABLE idbuff THEN DO:
                  IF idbuff.FRI3 NE "" THEN DO:
                     CREATE tidut.
                     ASSIGN
                     
                     
                    
                     SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                                                                                    
                  END.
               END.
               DELETE lin_temp.
            END.
            CREATE tidut.
            
         END.   
      END.   
   END.   
   ELSE DO:
      musz = FALSE.
   END.
END PROCEDURE.


PROCEDURE spann_UI :
   musz = FALSE.   
   IF musz = FALSE THEN DO:
      FIND FIRST lin_temp WHERE lin_temp.NUM1 = uppl_temp.NUM
      OR lin_temp.NUM2 = uppl_temp.NUM USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE lin_temp THEN DO:            
         FOR EACH lin_temp WHERE lin_temp.NUM1 = uppl_temp.NUM
         OR lin_temp.NUM2 = uppl_temp.NUM USE-INDEX NUM:
            IF lin_temp.NUM1 NE lin_temp.NUM2 THEN DO:
               CREATE tidut.
               ASSIGN
               
               
              
               SUBSTRING(tidut.UT,utnr[1]) = "Spann/kabellängd".
               SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(lin_temp.METER) + " meter" + " " + TRIM(lin_temp.BENAMNING) + " till".
               IF lin_temp.NUM1 = uppl_temp.NUM THEN DO:            
                  FIND FIRST idbuff WHERE idbuff.NUM = lin_temp.NUM2 USE-INDEX NUM
                  NO-LOCK NO-ERROR.
               END.
               ELSE DO:
                  FIND FIRST idbuff WHERE idbuff.NUM = lin_temp.NUM1 USE-INDEX NUM
                  NO-LOCK NO-ERROR.
               END. 
               IF AVAILABLE idbuff THEN DO:
                  FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = idbuff.GRUPP 
                  USE-INDEX KOD NO-LOCK NO-ERROR.
                  IF NOT AVAILABLE BBENAMNING THEN DO:
                     FIND FIRST BBENAMNING USE-INDEX KOD NO-LOCK NO-ERROR.
                  END.
                  IF idbuff.FRI1 NE ? THEN DO:
                     CREATE tidut.
                     ASSIGN
                     
                     
                    
                     SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.ID1.
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI1).
                     SUBSTRING(tidut.UT,utnr[4]) = BBENAMNING.ID2.
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[6]) = ":" + STRING(idbuff.FRI2).
                     /*GG 20060515*/
                     IF idbuff.FRI3 NE "" THEN DO:
                        CREATE tidut.
                        IF globforetag = "ALTE" {GLOBVES.I} THEN DO:
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                                                                                                                     
                        END.
                        ELSE IF globforetag = "cELPA" THEN DO:
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                                                                                          
                        END.
                        ELSE DO:
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                                                                                          
                        END.
                     END.
                  END. 
                  ELSE DO:
                     IF idbuff.FRI2 NE ? THEN DO:
                        CREATE tidut.
                        ASSIGN
                        
                        
                       
                        SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.ID2.
                        ASSIGN
                        SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI2).
                        /*GG 20060515*/
                        IF idbuff.FRI3 NE "" THEN DO:
                           CREATE tidut.
                           ASSIGN
                           
                           
                          
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                                                                                          
                        END.
                     END.
                     ELSE DO:
                        CREATE tidut.
                        ASSIGN
                        
                        
                       
                        SUBSTRING(tidut.UT,utnr[1]) = ANNNAMN.TAB3.
                        FIND FIRST BERNAT WHERE BERNAT.FORNR = idbuff.FORNR AND BERNAT.LINNR = idbuff.LINNR AND BERNAT.NATNR = idbuff.NATNR NO-LOCK NO-ERROR.
                        IF AVAILABLE BERNAT THEN DO:
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + idbuff.NATNR + " " + BERNAT.NAMN.                  
                        END.
                        ELSE SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.NATNR).
                        /*GG 20060515*/
                        IF idbuff.FRI3 NE "" THEN DO:
                           CREATE tidut.
                           ASSIGN
                           
                           
                          
                           SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                           SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                                                                                          
                        END.
                     END.
                  END.                                 
               END.  
               DELETE lin_temp.
            END.   
            ELSE DO:
               CREATE tidut.
               ASSIGN
               
               
               
               SUBSTRING(tidut.UT,utnr[1]) = "Spann/kabellängd".
               SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(lin_temp.METER) + " meter" + " " + TRIM(lin_temp.BENAMNING) + " till".
               CREATE tidut.
               ASSIGN
               
               SUBSTRING(tidut.UT,utnr[1]) = "Intern".
               /*GG 20060515*/
               IF AVAILABLE idbuff THEN DO:
                  IF idbuff.FRI3 NE "" THEN DO:
                     CREATE tidut.
                     ASSIGN
                     
                     
                    
                     SUBSTRING(tidut.UT,utnr[1]) = "Fri ID".
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(idbuff.FRI3).
                  END.
               END.
               DELETE lin_temp.
            END.
            CREATE tidut.
            
         END.   
      END.   
   END.   
   ELSE DO:
      musz = FALSE.
   END.
END PROCEDURE.


PROCEDURE summa_UI :

   ASSIGN
   sumpris = 0
   sumantal = 0
   sumea = 0
   summont = 0
   summask = 0.
   EMPTY TEMP-TABLE hid NO-ERROR. 
   
   FOR EACH kon_val:
      CREATE hid.
      ASSIGN
      hid.BERAONR  = kon_val.BERAONR 
      hid.OMRADE   = kon_val.OMRADE 
      hid.NUM      = kon_val.NUM
      hid.ORD      = kon_val.ORD.
   END.
   
   
   RUN LISTKONU_ui
      (INPUT valaonr, INPUT valomrade, INPUT valkonst, INPUT TABLE kon_val, OUTPUT TABLE uppl_temp, 
      OUTPUT TABLE skap_temp, OUTPUT TABLE id_temp).
   
   IF seluppvar = "Stolpprotokoll" OR seluppvar = "Stolpprotokoll minimerat" THEN DO:
      stolpval = 2.
   END.
   IF valkonst = FALSE THEN DO:         
      RUN LISTPROG_ui
      (INPUT valaonr, INPUT valomrade, OUTPUT TABLE mtrl_temp,  
      OUTPUT TABLE lin_temp).
   END.
   ELSE DO:      
      RUN LISTPROG2U_ui
         (INPUT TABLE kon_val, OUTPUT TABLE mtrl_temp, 
         OUTPUT TABLE lin_temp).
   END. 

   IF stolpval > 1 THEN DO:   
      FOR EACH mtrl_temp:         
         IF stolpval = 2 THEN DO:
            /*om bara stolpar*/
            FIND FIRST BERSTOLP WHERE BERSTOLP.ENR = mtrl_temp.ENR AND BERSTOLP.STOLPE = TRUE NO-LOCK NO-ERROR.
            IF NOT AVAILABLE BERSTOLP THEN DO:
               DELETE mtrl_temp.
            END.
         END.
         ELSE IF stolpval = 3 THEN DO:   
            /*om inga stolpar*/
            FIND FIRST BERSTOLP WHERE BERSTOLP.ENR = mtrl_temp.ENR AND BERSTOLP.STOLPE = TRUE NO-LOCK NO-ERROR.
            IF AVAILABLE BERSTOLP THEN DO:
               DELETE mtrl_temp.
            END.
         END.   
         ELSE IF stolpval = 4 THEN DO: /* Bara kablar/trafo/markstn */            
            FIND FIRST BERSTOLP WHERE BERSTOLP.ENR = mtrl_temp.ENR AND BERSTOLP.STOLPE = FALSE NO-LOCK NO-ERROR.
            IF AVAILABLE BERSTOLP THEN baral = TRUE.
            IF globforetag = "VAST" THEN DO:            
               FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "12" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
               IF AVAILABLE MTRL THEN baral = TRUE.
               ELSE DO:               
                  FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "2" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
                  IF AVAILABLE MTRL THEN baral = TRUE.
                  ELSE DO:                  
                     FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "7" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
                     IF AVAILABLE MTRL THEN baral = TRUE.
                     ELSE DO:                     
                        FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "70" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
                        IF AVAILABLE MTRL THEN baral = TRUE.               
                     END.
                  END.
               END.
            END.
            IF globforetag = "ELTE" THEN DO:                        
               FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "3" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
               IF AVAILABLE MTRL THEN baral = TRUE.               
            END.
            IF baral = TRUE THEN baral = FALSE.              
            ELSE DELETE mtrl_temp.            
            
         END.
         ELSE IF stolpval = 5 THEN DO: /* Inga kablar/trafo/markstn */            
            FIND FIRST BERSTOLP WHERE BERSTOLP.ENR = mtrl_temp.ENR AND BERSTOLP.STOLPE = FALSE NO-LOCK NO-ERROR.
            IF AVAILABLE BERSTOLP THEN baral = TRUE.
            IF globforetag = "VAST" THEN DO:            
               FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "12" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
               IF AVAILABLE MTRL THEN baral = TRUE.
               ELSE DO:               
                  FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "2" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
                  IF AVAILABLE MTRL THEN baral = TRUE.
                  ELSE DO:                  
                     FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "7" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
                     IF AVAILABLE MTRL THEN baral = TRUE.
                     ELSE DO:                     
                        FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "70" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
                        IF AVAILABLE MTRL THEN baral = TRUE.               
                     END.
                  END.
               END.
            END.
            IF globforetag = "ELTE" THEN DO:            
               FIND FIRST MTRL WHERE MTRL.KALKNR = 0 AND MTRL.LEVKOD = "3" AND MTRL.ENR = mtrl_temp.ENR NO-LOCK NO-ERROR.
               IF AVAILABLE MTRL THEN baral = TRUE.               
            END.
            IF baral = TRUE THEN DO: 
               baral = FALSE.              
               DELETE mtrl_temp.            
            END.            
           
         END.
      END.
      
   END.
   /*koppla mtrl till upplag*/
   FOR EACH uppl_temp USE-INDEX NUM:
      FIND FIRST mtrl_temp WHERE mtrl_temp.NUM = uppl_temp.NUM
      USE-INDEX NUM NO-LOCK NO-ERROR.
      IF NOT AVAILABLE mtrl_temp THEN DO:
         CREATE mtrl_temp. 
         mtrl_temp.NUM = uppl_temp.NUM.
      END.
   END.
   
   FOR EACH mtrl_temp USE-INDEX NUM:
      FIND FIRST uppl_temp WHERE uppl_temp.NUM = mtrl_temp.NUM
      USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE uppl_temp THEN DO: 
         ASSIGN
         mtrl_temp.UPPLAG = uppl_temp.UPPLAG
         mtrl_temp.GRUPP = uppl_temp.GRUPP
         mtrl_temp.ORD = uppl_temp.ORD.
         IF TOG_UPP = FALSE THEN mtrl_temp.UPPLAG = ?.
      END.
      ELSE DO:
         ASSIGN mtrl_temp.UPPLAG = ?.
        
      END.
      /*koppla id till mtrl  även om kombi*/
      FIND FIRST id_temp WHERE id_temp.NUM = mtrl_temp.NUM
      USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE id_temp THEN DO:  
         IF id_temp.ENDKOMB = FALSE THEN DO:
            ASSIGN
            mtrl_temp.FORNR = id_temp.FORNR
            mtrl_temp.LINNR = id_temp.LINNR
            mtrl_temp.NATNR = id_temp.NATNR
            mtrl_temp.FRI1 = id_temp.FRI1
            mtrl_temp.FRI2 = id_temp.FRI2        
            mtrl_temp.XKORD = id_temp.XKORD.
         END.
         ELSE DO:
            FIND FIRST idbuff WHERE idbuff.XKORD = id_temp.XKORD AND
            ROWID(idbuff) NE ROWID(id_temp) NO-LOCK NO-ERROR.
            ASSIGN          
            mtrl_temp.FORNR = idbuff.FORNR
            mtrl_temp.LINNR = idbuff.LINNR
            mtrl_temp.NATNR = idbuff.NATNR
            mtrl_temp.FRI1 = idbuff.FRI1
            mtrl_temp.FRI2 = idbuff.FRI2        
            mtrl_temp.XKORD = idbuff.XKORD.
         END.   
      END.
      ELSE DO:
         mtrl_temp.XKORD = ?.
      END.
   END. 
   /*summera kostnaderna per konstruktion*/
   ASSIGN
   sumpris = 0
   sumantal = 0
   sumea = 0
   summont = 0
   summask = 0.
   /*summa per kombo*/
   FOR EACH mtrl_temp WHERE mtrl_temp.XKORD NE ? BREAK BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.XKORD BY mtrl_temp.PAR: 
      ACCUMULATE mtrl_temp.TOTPRIS (TOTAL BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.XKORD BY mtrl_temp.PAR). 
      ACCUMULATE mtrl_temp.ANTAL (TOTAL BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.XKORD BY mtrl_temp.PAR).       
      IF LAST-OF(mtrl_temp.PAR) THEN DO:
         CREATE mtrl_temp2.
         BUFFER-COPY mtrl_temp TO mtrl_temp2.
         
         ASSIGN
         mtrl_temp2.TOTPRIS = (ACCUM TOTAL mtrl_temp.TOTPRIS) - sumpris                       
         mtrl_temp2.ANTAL = (ACCUM TOTAL mtrl_temp.ANTAL) - sumantal                
         sumpris = ACCUM TOTAL mtrl_temp.TOTPRIS 
         sumantal = ACCUM TOTAL mtrl_temp.ANTAL.         
      END. 
   END.
   ASSIGN
   sumpris = 0
   sumantal = 0
   sumea = 0
   summont = 0
   summask = 0.    
   /*summ för ej kombo*/
   FOR EACH mtrl_temp WHERE mtrl_temp.XKORD = ? BREAK BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.NUM BY mtrl_temp.PAR: 
      ACCUMULATE mtrl_temp.TOTPRIS (TOTAL BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.NUM BY mtrl_temp.PAR). 
      ACCUMULATE mtrl_temp.ANTAL (TOTAL BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.NUM BY mtrl_temp.PAR).       
      IF LAST-OF(mtrl_temp.PAR) THEN DO:
         CREATE mtrl_temp2.
         BUFFER-COPY mtrl_temp TO mtrl_temp2.

         ASSIGN                        
          
         mtrl_temp2.TOTPRIS = (ACCUM TOTAL mtrl_temp.TOTPRIS) - sumpris                       
         mtrl_temp2.ANTAL = (ACCUM TOTAL mtrl_temp.ANTAL) - sumantal                
         sumpris = ACCUM TOTAL mtrl_temp.TOTPRIS 
         sumantal = ACCUM TOTAL mtrl_temp.ANTAL.
      END.     
   END. 
   /*för att få rätt rubriker*/
   OPEN QUERY gruppq FOR EACH KONSTGRUPP NO-LOCK.
   GET FIRST gruppq NO-LOCK.
   DO WHILE AVAILABLE(KONSTGRUPP):
      CREATE grupp_temp.
      ASSIGN 
      grupp_temp.KONSKOD = KONSTGRUPP.KONSKOD
      grupp_temp.BENAMNING = KONSTGRUPP.BENAMNING
      grupp_temp.ORDNING = KONSTGRUPP.ORDNING.
      GET NEXT gruppq NO-LOCK.
   END.
   CLOSE QUERY gruppq.
   FOR EACH grupp_temp:
      CREATE grupp_temp2.
      ASSIGN 
      grupp_temp2.KONSKOD = grupp_temp.KONSKOD
      grupp_temp2.BENAMNING = grupp_temp.BENAMNING
      grupp_temp2.ORDNING = grupp_temp.ORDNING.  
   END.
 /*Visa kalkyl*/
   IF kalkvar = TRUE THEN RUN kalk_UI.
   ASSIGN
   totalsum = 0
   totea = 0
   arbtim = 0
   msktim = 0.   
   FIND FIRST ANNNAMN NO-LOCK NO-ERROR.
   RUN LISTUPPU_UI
      (INPUT valaonr, INPUT valomrade, INPUT valkonst, INPUT TABLE kon_val, 
      OUTPUT TABLE temp_upp).   
   IF skrivbord = TRUE THEN DO:
      EMPTY TEMP-TABLE temp_upp NO-ERROR. 
      EMPTY TEMP-TABLE upptemp NO-ERROR. 
      CREATE temp_upp.
      ASSIGN
      temp_upp.UPPLAG = 1.
      FOR EACH mtrl_temp2:
         CREATE upptemp.
         ASSIGN
         upptemp.NUM = mtrl_temp2.NUM
         upptemp.XKORD = mtrl_temp2.XKORD
         upptemp.UPPLAG = mtrl_temp2.UPPLAG.
         mtrl_temp2.UPPLAG = 1.         
      END.
      FOR EACH kalk_temp2:
         kalk_temp2.UPPLAG = 1.
      END.      
   END.
   FOR EACH temp_upp USE-INDEX OMR NO-LOCK:   
      IF TOG_UPP = TRUE THEN DO:
         IF skrivbord = FALSE THEN DO:         
            upput = FALSE.
            FIND FIRST mtrl_temp2 WHERE mtrl_temp2.UPPLAG = temp_upp.UPPLAG
            NO-LOCK NO-ERROR.
            IF AVAILABLE mtrl_temp2 THEN DO:
               upput = TRUE.
            END.
            ELSE DO:
            END.
            IF upput = TRUE THEN DO:         
               IF forsta = FALSE THEN DO:
                  IF globforetag = "SUND" OR globforetag = "SNAT" THEN DO:
                     CREATE tidut.
                                                          
                  END.
                  ELSE DO:
                     CREATE tidut. 
                     
                     
                     CREATE tidut.
                  END.
                                    
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[1]) = str0            
                  forsta = TRUE.
                                                                     
               END.   
               ELSE DO:                   
                  CREATE tidut.
                  
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[1]) = str0
                  SUBSTRING(tidut.UT,131) = "£"
                  SUBSTRING(tidut.UT,132) = "$".
                  
               END.
                CREATE tidut.
               ASSIGN       
              
               SUBSTRING(tidut.UT,utnr[1]) = "Upplag nr".
               SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(temp_upp.UPPLAG).
               CREATE tidut.
               ASSIGN
               
               SUBSTRING(tidut.UT,utnr[1]) = "Adress"
               SUBSTRING(tidut.UT,utnr[3]) = ":" + temp_upp.ADRESS.
               
                                           
               IF temp_upp.ANMARK NE "" THEN DO: 
                  ASSIGN
                  fetstil = TRUE
                  uppvar = TRUE.  
                  RUN anm2_UI.
                  ASSIGN
                  fetstil = FALSE
                  uppvar = FALSE.
               END.
               CREATE tidut.
               SUBSTRING(tidut.UT,utnr[1]) = str0.
                              
            END.
         END.
      END.   
      bytgrupp = "".
      IF seluppvar = "Stolpprotokoll minimerat" THEN DO:
         /*1*/
         IF TOG_UPP = TRUE THEN DO:
            RUN rubrikstolp_UI.
            FOR EACH mtrl_temp2 WHERE mtrl_temp2.UPPLAG = temp_upp.UPPLAG 
            USE-INDEX ORD: 
               IF mtrl_temp2.ENR = ""  OR mtrl_temp2.ANTAL = 0 THEN musz = musz.
               ELSE DO:           
                  CREATE tidut.
                  ASSIGN
                  
                  
                 
                  SUBSTRING(tidut.UT,utnr[1]) = mtrl_temp2.ENR.
                  SUBSTRING(tidut.UT,utnr[2]) = SUBSTRING(mtrl_temp2.BENAMNING,1,benlangd).
                  SUBSTRING(tidut.UT,utnr[4]) = STRING(mtrl_temp2.ANTAL,">>>>9").     
                  SUBSTRING(tidut.UT,utnr[5]) = mtrl_temp2.ENHET.     
                  
                  FIND FIRST id_temp WHERE id_temp.NUM = mtrl_temp2.NUM NO-LOCK NO-ERROR.
                  IF AVAILABLE id_temp THEN DO: 
                     SUBSTRING(tidut.UT,utnr[6]) = STRING(id_temp.FRI2,">>>>>>9").
                     SUBSTRING(tidut.UT,utnr[7]) = STRING(id_temp.FRI3).
                     FIND FIRST mtrl_temp WHERE mtrl_temp.NUM = mtrl_temp2.NUM AND
                     mtrl_temp.ENR = mtrl_temp2.ENR NO-LOCK NO-ERROR. 
                     IF AVAILABLE mtrl_temp THEN DO:   
                        IF mtrl_temp.MTRLTEXT NE "" THEN DO: 
                           IF TOG_ANM = TRUE THEN RUN anmstolpmin_UI.
                        END.   
                     END.                                       
                  END.
                  ELSE DO:   
                     musz = musz.
                  END.  
                  
                 
               END.
            END.
         END.   
      END.
      ELSE DO:
         cccc
         /*BORDE VARA FÖRA ALLA MED BYGGNR*/   
         IF globforetag = "ELKB" THEN DO:
            FOR EACH mtrl_temp2 WHERE mtrl_temp2.UPPLAG = temp_upp.UPPLAG 
            BY mtrl_temp2.UPPLAG BY mtrl_temp2.FRI2: 
               RUN ett_UI.                  
            END.
         END.
         ELSE DO:   
            FOR EACH mtrl_temp2 WHERE mtrl_temp2.UPPLAG = temp_upp.UPPLAG 
            USE-INDEX ORD: /*UPPLAG ORD PAR*/
               RUN ett_UI.                  
            END.
         END.
         IF TOG_MTRL = TRUE THEN DO:     

            
         END.                           
      END.
   END.   
   
   FIND FIRST mtrl_temp2 WHERE mtrl_temp2.UPPLAG = ? NO-LOCK NO-ERROR.
   IF AVAILABLE mtrl_temp2 THEN DO:
      IF TOG_UPP = TRUE THEN DO:
         IF skrivbord = FALSE THEN DO:         
            IF forsta = FALSE THEN DO:
               IF globforetag = "SUND" THEN DO:
                  CREATE tidut.
               END.
               ELSE DO:
                  CREATE tidut.
                  
                  
                  CREATE tidut.
                  
               END.
               ASSIGN
               SUBSTRING(tidut.UT,utnr[1]) = str0
               forsta = TRUE.
            END.
            ELSE DO:           
               CREATE tidut.
               ASSIGN
               
               SUBSTRING(tidut.UT,utnr[1]) = str0
               SUBSTRING(tidut.UT,131) = "£" 
               SUBSTRING(tidut.UT,132) = "$".
               IF globforetag = "cELPA" OR globforetag = "UMEA" {GLOBVES.I} THEN DO:                  
               END.
            END.
            CREATE tidut.
            SUBSTRING(tidut.UT,utnr[1]) = "Materiel ej kopplat till upplag".
            CREATE tidut.
            SUBSTRING(tidut.UT,utnr[1]) = str0.
                     
         END.
      END.
      IF seluppvar = "Stolpprotokoll minimerat" THEN DO:
         /*2*/
         RUN rubrikstolp_UI.
         FOR EACH mtrl_temp2 WHERE mtrl_temp2.UPPLAG = ? 
         USE-INDEX ORD: 
            IF mtrl_temp2.ENR = "" OR  mtrl_temp2.ANTAL = 0 THEN musz = musz.
            ELSE DO:           
               CREATE tidut.
               ASSIGN
               
               
              
               SUBSTRING(tidut.UT,utnr[1]) = mtrl_temp2.ENR.
               SUBSTRING(tidut.UT,utnr[2]) = SUBSTRING(mtrl_temp2.BENAMNING,1,benlangd).
               SUBSTRING(tidut.UT,utnr[4]) = STRING(mtrl_temp2.ANTAL,">>>>9").     
               SUBSTRING(tidut.UT,utnr[5] + 1) = mtrl_temp2.ENHET.     
               
               FIND FIRST id_temp WHERE id_temp.NUM = mtrl_temp2.NUM NO-LOCK NO-ERROR.
               IF AVAILABLE id_temp THEN DO: 
                  SUBSTRING(tidut.UT,utnr[6]) = STRING(id_temp.FRI2,">>>>>>9").
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(id_temp.FRI3).
                  FIND FIRST mtrl_temp WHERE mtrl_temp.NUM = mtrl_temp2.NUM AND
                  mtrl_temp.ENR = mtrl_temp2.ENR NO-LOCK NO-ERROR. 
                  IF AVAILABLE mtrl_temp THEN DO:   
                     
                     IF mtrl_temp.MTRLTEXT NE "" THEN DO: 
                        IF TOG_ANM = TRUE THEN RUN anmstolpmin_UI.
                     END.   
                  END.                                           
               END.
               ELSE DO:   
                  musz = musz.
               END.
                                       
            END.
         END.
      END.
      ELSE DO:      
         
         bytgrupp = "".
          
         /*BORDE VARA FÖRA ALLA MED BYGGNR*/ 
         IF globforetag = "ELKB" THEN DO:
            FOR EACH mtrl_temp2 WHERE mtrl_temp2.UPPLAG = ? 
            BY mtrl_temp2.UPPLAG BY mtrl_temp2.FRI2: 
               RUN tva_UI.                  
            END.
         END.
         ELSE DO:   
            FOR EACH mtrl_temp2 WHERE mtrl_temp2.UPPLAG = ? 
            USE-INDEX ORD: 
               RUN tva_UI.                  
            END.
         END.
         CREATE tidut.                 
         
         
         IF prisvar = 1 THEN DO:
            IF TOG_MTRL = TRUE THEN DO:
               CREATE tidut.             
               ASSIGN
               
               
                                                            
               SUBSTRING(tidut.UT,utnr[5]) = "-------------------------".
              
               CREATE tidut.
               ASSIGN                   
               
               SUBSTRING(tidut.UT,utnr[5]) = "Total summa:".
               SUBSTRING(tidut.UT,utnr[7]) = STRING(totalsum,">>>>>>>>9"). 
               FIND tidut WHERE ROWID(tidut) = sumrec NO-LOCK NO-ERROR.
               ASSIGN
               SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(totalsum,">>>>>>>>9")) + " Kr". 
            END.   
         END. 
      END.
     
      IF kalkvar = TRUE THEN DO:
         IF TOG_P3 = TRUE THEN DO:
            IF globforetag NE "GRAN" AND globforetag NE "GKAL" AND globforetag NE "ELPA" AND globforetag NE "VAST" THEN DO:            
               CREATE tidut.
               
               
               
               CREATE tidut.
               
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[7]) = "---------".
                     
               END.
               CREATE tidut.
               
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[6]) = "Totalt EA  :".
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(totea,">>>>>>>>9").
                  
               END.      
            END.
            IF prisvar = 1 THEN DO:
               
               IF TOG_MTRL = TRUE THEN DO:
                  FIND tidut WHERE ROWID(tidut) = sumrec NO-LOCK NO-ERROR.                  
                  IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I}  THEN DO:
                     
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[4]) = "Montör: " + LEFT-TRIM(STRING(arbtim,">>>>>>9.9")) 
                     + " tim" + " Maskin: " + LEFT-TRIM(STRING(msktim,">>>>>>9.9")) 
                     + " tim".
                     
                     
                  END.
                  ELSE DO:
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[5]) = ":" + LEFT-TRIM(STRING(totea,">>>>>>>>9")) + " EA".
                                                    
                  END.
               END.
               ELSE DO:
                  FIND tidut WHERE ROWID(tidut) = sumrec NO-LOCK NO-ERROR.
                  IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I} THEN DO:
                     
                     ASSIGN                         
                     SUBSTRING(tidut.UT,utnr[1]) = "Montör".
                     
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(arbtim,">>>>>>9.9")) 
                     + " tim" + " Maskin: " + LEFT-TRIM(STRING(msktim,">>>>>>9.9")) 
                     + " tim".
                                           
                  END.
                  ELSE DO:
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(totea,">>>>>>>>9")) + " EA".
                                                    
                  END.
               END.   
            END.
            ELSE DO:
               
               FIND tidut WHERE ROWID(tidut) = sumrec NO-LOCK NO-ERROR.
               IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I} THEN DO:                  
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[1]) = "Montör".                  
                  
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(arbtim,">>>>>>9.9")) 
                  + " tim" + " Maskin: " + LEFT-TRIM(STRING(msktim,">>>>>>9.9")) 
                  + " tim".
                                                 
                  
               END.
               ELSE DO:
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(totea,">>>>>>9.99")) + " EA".
                                                                        
               END.
            END.
         END.      
      END.         
   END.      
   ELSE DO:  
      CREATE tidut.               
      
      
      IF prisvar = 1 THEN DO:
         IF TOG_MTRL = TRUE THEN DO:
            CREATE tidut.
            ASSIGN
            
            SUBSTRING(tidut.UT,utnr[5]) = "-------------------------".
            
            CREATE tidut.
            ASSIGN
            
            SUBSTRING(tidut.UT,utnr[5]) = "Total summa:".
            SUBSTRING(tidut.UT,utnr[7]) = STRING(totalsum,">>>>>>>>9"). 
            FIND tidut WHERE ROWID(tidut) = sumrec NO-LOCK NO-ERROR.
            ASSIGN
            SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(totalsum,">>>>>>>>9")) + " Kr". 
                      
         END.   
      END.
      IF kalkvar = TRUE THEN DO:
         IF TOG_P3 = TRUE THEN DO:
            IF globforetag NE "GRAN" AND globforetag NE "GKAL" AND globforetag NE "ELPA" AND globforetag NE "VAST"  THEN DO:            
               CREATE tidut.
               
               
               CREATE tidut.
               
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[7]) = "---------".
                                                                        
               END.
               CREATE tidut.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[6]) = "Totalt EA  :".
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(totea,">>>>>>>>9").
                  
               END.                                                         
            END.
            
            IF prisvar = 1 THEN DO:
               IF TOG_MTRL = TRUE THEN DO:
                  FIND tidut WHERE ROWID(tidut) = sumrec NO-LOCK NO-ERROR.
                  IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I} THEN DO:
                     
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[4]) = "Montör: " + LEFT-TRIM(STRING(arbtim,">>>>>>9.9")) 
                     + " tim" + " Maskin: " + LEFT-TRIM(STRING(msktim,">>>>>>9.9")) 
                     + " tim".
                     
                  END.
                  ELSE DO:
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[5]) = ":" + LEFT-TRIM(STRING(totea,">>>>>>>>9")) + " EA".
                                                                           
                  END.
               END.
               ELSE DO:
                  FIND tidut WHERE ROWID(tidut) = sumrec NO-LOCK NO-ERROR.
                  IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I} THEN DO:
                     
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[1]) = "Montör".
                                          ASSIGN
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(arbtim,">>>>>>9.9")) 
                     + " tim" + " Maskin: " + LEFT-TRIM(STRING(msktim,">>>>>>9.9")) 
                     + " tim".
                     
                  END.
                  ELSE DO:
                     ASSIGN
                     SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(totea,">>>>>>9.99")) + " EA".
                                                                           
                  END.
               END.   
            END.
            ELSE DO:
               
               FIND tidut WHERE ROWID(tidut) = sumrec NO-LOCK NO-ERROR.
               IF globforetag = "GRAN" OR globforetag = "GKAL" OR  globforetag = "ELPA" {GLOBVES.I} THEN DO:
                  
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[1]) = "Montör".
                  
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(arbtim,">>>>>>9.9")) 
                  + " tim" + " Maskin: " + LEFT-TRIM(STRING(msktim,">>>>>>9.9")) 
                  + " tim".
                  
               END.
               ELSE DO:
                  ASSIGN
                  SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(STRING(totea,">>>>>>9.99")) + " EA".
                                                                        
               END.
            END.
         END.   
      END.     
   END.    
END PROCEDURE.




PROCEDURE text_UI :
   IF mtextvar = FALSE THEN DO:
      ASSIGN
      
     
      mtextvar = TRUE.
      IF tiduttyp = 1 THEN DO:
         CREATE tidut.            
         ASSIGN
         
         SUBSTRING(tidut.UT,utnr[1]) = "Text".
         IF sidotexexcel = FALSE THEN .                           
      END. 
      ELSE IF tiduttyp = 2 THEN DO:
         CREATE tidut2.            
         SUBSTRING(tidut2.UT,utnr[1]) = "Text".
         IF sidotexexcel = FALSE THEN .                           
      END.
      ELSE IF tiduttyp = 3 THEN DO:
         CREATE tidut3.            
         SUBSTRING(tidut3.UT,utnr[1]) = "Text".
         IF sidotexexcel = FALSE THEN .                           
      END.
      ELSE IF tiduttyp = 4 THEN DO:
         CREATE tidut4.            
         SUBSTRING(tidut4.UT,utnr[1]) = "Text".
         IF sidotexexcel = FALSE THEN .                           
      END.  
   END.
   
   ASSIGN
   skapad = TRUE       
   retvar = 1 
   ednum = 1    
   
   ednum3 = LENGTH(mtrl_temp.MTRLTEXT)      
   retvar = INDEX(mtrl_temp.MTRLTEXT,CHR(10),ednum)
   edtecken = 39   
   edtext = mtrl_temp.MTRLTEXT
   tidtext = "". 
       
          
   {MTRLTEXT.I}   
END PROCEDURE.

 
PROCEDURE mtext_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/    
DEFINE VARIABLE textutpos AS CHARACTER NO-UNDO.  
   textutpos = "B".        
   IF sidotexexcel = TRUE THEN DO:
      textutpos = "H".
     
   END.   
   IF tiduttyp = 1 THEN DO:                
      ASSIGN                  
      SUBSTRING(tidut.UT,utnr[2]) = tidtext.
      IF sidotexexcel =  FALSE THEN .
      
   END.
   ELSE IF tiduttyp = 2 THEN DO:                
      ASSIGN                  
      SUBSTRING(tidut2.UT,utnr[2]) = tidtext.
      IF sidotexexcel =  FALSE THEN .                                                      
      
      CREATE tidut2.
   END.
   ELSE IF tiduttyp = 3 THEN DO:                
      ASSIGN                  
      SUBSTRING(tidut3.UT,utnr[2]) = tidtext.
      IF sidotexexcel =  FALSE THEN .   
                                                               
      CREATE tidut3.
   END.
   ELSE IF tiduttyp = 4 THEN DO:                
      ASSIGN                  
      SUBSTRING(tidut4.UT,utnr[2]) = tidtext.
      IF sidotexexcel =  FALSE THEN .
                                                             
      CREATE tidut4.
   END. 
   
  
END PROCEDURE.

PROCEDURE tva_UI :
   IF mtrl_temp2.XKORD NE ? THEN DO:         
      ASSIGN
      xkordvar = mtrl_temp2.XKORD
      sumpris = 0
      sumea = 0
      summont = 0
      summask = 0
      stopvar = FALSE.                      
      FIND FIRST id_temp WHERE id_temp.XKORD = xkordvar AND
      id_temp.ENDKOMB = FALSE 
      USE-INDEX ORD2 NO-LOCK NO-ERROR.
      IF AVAILABLE id_temp THEN DO: 
         ASSIGN
         numvar = id_temp.NUM
         stopvar = TRUE.                
         FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = id_temp.GRUPP 
         USE-INDEX KOD NO-LOCK NO-ERROR.                
         IF NOT AVAILABLE BBENAMNING THEN DO:
            FIND FIRST BBENAMNING USE-INDEX KOD NO-LOCK NO-ERROR.
         END.
         RUN id_UI.                                                                                               
         FIND FIRST uppl_temp WHERE uppl_temp.NUM = id_temp.NUM 
         NO-LOCK NO-ERROR.
         IF AVAILABLE uppl_temp THEN DO:
            
            RUN val_UI.
            IF TOG_SPANN = TRUE THEN RUN spann_UI.                           
            IF uppl_temp.ANMARK NE "" THEN DO:
               IF TOG_ANM = TRUE THEN RUN anm_UI.
            END.                          
         END.   
         FIND FIRST idbuff WHERE idbuff.XKORD = xkordvar AND                     
         ROWID(idbuff) NE ROWID(id_temp) NO-ERROR. 
         IF AVAILABLE idbuff THEN DO: 
            RUN komb_UI.                                                                                                                                                                                            
         END.               
      END.
      ELSE DO:   
         musz = musz.
      END.        
      IF TOG_MTRL = TRUE THEN DO:              
         IF globforetag = "Celpa" OR globforetag = "GRAN" THEN RUN sign_UI.
         RUN rubrik_UI.
         RUN par_UI.
         numsok = FALSE.
         FOR EACH mtrlbuff WHERE mtrlbuff.UPPLAG = ? AND 
         mtrlbuff.XKORD = xkordvar USE-INDEX ENRX: 
            IF mtrlbuff.ANTAL = 0 THEN DO:
               musz = musz.
               DELETE mtrlbuff.
            END.   
            ELSE DO:
               IF mtrlbuff.NUM = numvar THEN DO:
                  IF mtrlbuff.PAR = 0 THEN RUN materiel_UI.
                  IF mtrlbuff.PAR = 1 THEN RUN materiel2_UI.
                  IF mtrlbuff.PAR = 2 THEN RUN materiel3_UI.
                  IF mtrlbuff.PAR = 3 THEN RUN materiel4_UI.
                  DELETE mtrlbuff.
               END.
               ELSE DO:
                  RUN materiel_UI.
                  DELETE mtrlbuff.
               END.   
            END.   
         END.
         IF prisvar = 1 /*AND upppris > 0*/  THEN DO:
            
            CREATE tidut. 
            SUBSTRING(tidut.UT,utnr[2]) = "Kostnad för konstruktion".
            SUBSTRING(tidut.UT,utnr[7]) = STRING(upppris,">>>>>>>>9"). 
            upppris = 0.
            CREATE tidut.
         END.
         RUN par2_UI.
      END.
      ELSE DO:
         FOR EACH mtrlbuff WHERE mtrlbuff.UPPLAG = ? AND 
         mtrlbuff.XKORD = xkordvar USE-INDEX ENRX:
            DELETE mtrlbuff.
         END.
      END.      
    
      IF kalkvar = TRUE THEN DO:
         IF TOG_P3 = TRUE THEN DO:
            CREATE tidut.
            
            
            CREATE tidut.
            RUN rubrik2_UI.
            
            FOR EACH kalkbuff WHERE kalkbuff.UPPLAG = ? AND 
            kalkbuff.XKORD = xkordvar:  
               IF kalkbuff.ANTAL = 0 THEN DO:
                  musz = musz.
                  DELETE kalkbuff.
               END.   
               ELSE DO:        
                  RUN utkalk_UI.
                  DELETE kalkbuff.         
               END.   
            END.
            IF globforetag = "GRAN" OR globforetag = "GKAL" OR  globforetag = "ELPA" {GLOBVES.I} THEN DO:
               CREATE tidut.              
               
               CREATE tidut.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[1]) = "SUMMA:".
                  SUBSTRING(tidut.UT,utnr[6]) = STRING(summont,">>>>>>>>9.999").
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(summask,">>>>>>>>9.999").
               END.
                                          
            END.
            ELSE DO:
               CREATE tidut.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[7]) = "---------".
                  
               END.
               IF kalkvisabaraantal = TRUE THEN.
                                          
            END.
         END.   
         ELSE DO:
            FOR EACH kalkbuff WHERE kalkbuff.UPPLAG = ? AND 
            kalkbuff.XKORD = xkordvar:
               DELETE kalkbuff.
            END.
         END.
      END.   
      IF TOG_EGEN = TRUE THEN DO:
         RUN egenkontroll_UI.
      END.
      CREATE tidut.
      
      
      CREATE tidut.
            
      
      
      RUN bryt_UI. 
   END.
   ELSE DO:
      
      ASSIGN 
      sumpris = 0
      sumea = 0
      summont = 0
      summask = 0.                                      
      FIND FIRST id_temp WHERE id_temp.NUM = mtrl_temp2.NUM 
      NO-LOCK NO-ERROR.               
      FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = mtrl_temp2.GRUPP 
      USE-INDEX KOD NO-LOCK NO-ERROR.
      RUN id_UI.   
                
      FIND FIRST uppl_temp WHERE uppl_temp.NUM = mtrl_temp2.NUM 
      NO-LOCK NO-ERROR.
      IF AVAILABLE uppl_temp THEN DO:  
         IF NOT AVAILABLE BBENAMNING THEN DO:
            FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = uppl_temp.GRUPP 
            USE-INDEX KOD NO-LOCK NO-ERROR. 
         END.   
         
         RUN val_UI. 
         IF TOG_SPANN = TRUE THEN RUN spann_UI.                
         IF uppl_temp.ANMARK NE "" THEN DO:
            IF TOG_ANM = TRUE THEN RUN anm_UI.
         END.                                                                                                 
      END.   
      ASSIGN
      numvar = mtrl_temp2.NUM.      
      IF TOG_MTRL = TRUE THEN DO:      
         IF globforetag = "Celpa" OR globforetag = "GRAN" THEN RUN sign_UI.
         RUN rubrik_UI.        
         RUN par_UI.
         numsok = TRUE.            
         FOR EACH mtrlbuff WHERE mtrlbuff.UPPLAG = ? AND 
         mtrlbuff.NUM = mtrl_temp2.NUM USE-INDEX ENRN BY mtrlbuff.ENR: 
            IF mtrlbuff.ANTAL = 0 THEN DO:
               musz = musz.
               DELETE mtrlbuff.
            END.   
            ELSE DO:
               IF mtrlbuff.PAR = 0 THEN RUN materiel_UI.
               IF mtrlbuff.PAR = 1 THEN RUN materiel2_UI.
               IF mtrlbuff.PAR = 2 THEN RUN materiel3_UI.
               IF mtrlbuff.PAR = 3 THEN RUN materiel4_UI.
               DELETE mtrlbuff.
            END.   
         END.     
         IF prisvar = 1 /*AND upppris > 0*/  THEN DO:
            
            CREATE tidut. 
            SUBSTRING(tidut.UT,utnr[2]) = "Kostnad för konstruktion".
            SUBSTRING(tidut.UT,utnr[7]) = STRING(upppris,">>>>>>>>9"). 
            upppris = 0.
            CREATE tidut.
         END.
         RUN par2_UI.          
      END.
      ELSE DO:
         FOR EACH mtrlbuff WHERE mtrlbuff.UPPLAG = ? AND 
         mtrlbuff.NUM = mtrl_temp2.NUM USE-INDEX ENRN BY mtrlbuff.ENR:
            DELETE mtrlbuff.
         END.
      END.   
      
      IF kalkvar = TRUE THEN DO:      
         IF TOG_P3 = TRUE THEN DO:
            CREATE tidut.
            
            
            CREATE tidut.
            RUN rubrik2_UI.
            
            
            FOR EACH kalkbuff WHERE kalkbuff.UPPLAG = ? AND 
            kalkbuff.NUM = numvar:
               IF kalkbuff.ANTAL = 0 THEN DO:
                  musz = musz.
                  DELETE kalkbuff.
               END.   
               ELSE DO:          
                  RUN utkalk_UI.
                  DELETE kalkbuff.         
               END.   
            END.
            IF globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I} THEN DO:
               CREATE tidut.              
               
               
               CREATE tidut.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[1]) = "SUMMA:".
                  SUBSTRING(tidut.UT,utnr[6]) = STRING(summont,">>>>>>>>9.999").
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(summask,">>>>>>>>9.999").
               END.
               IF kalkvisabaraantal = TRUE THEN.
                                          
            END.
            ELSE DO:
               CREATE tidut.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE DO:
                  SUBSTRING(tidut.UT,utnr[7]) = "---------".
                                             
               END.
               CREATE tidut.
               IF kalkvisabaraantal = TRUE THEN.
               ELSE SUBSTRING(tidut.UT,utnr[7]) = STRING(sumea,">>>>>>>>9").
               IF kalkvisabaraantal = TRUE THEN.
                                          
            END.
         END.   
         ELSE DO:
            FOR EACH kalkbuff WHERE kalkbuff.UPPLAG = ? AND 
            kalkbuff.NUM = numvar:
               DELETE kalkbuff.
            END.            
         END.
      END.
      IF TOG_EGEN = TRUE THEN DO:
         RUN egenkontroll_UI.
      END.
      CREATE tidut.
      
      
      CREATE tidut.
      RUN bryt_UI.
   END.               
   ASSIGN
   totalsum = totalsum + sumpris
   totea = totea + sumea
   arbtim = arbtim + summont
   msktim = msktim + summask.
END PROCEDURE.

PROCEDURE upput_UI : 
   
   IF skrivbord = FALSE THEN DO:   
      CREATE tidut. 
      CREATE tidut.  
      SUBSTRING(tidut.UT,utnr[1]) = "Upplag nr".
      SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(temp_upp.UPPLAG).
   END.
   ELSE DO:
      IF AVAILABLE upptemp THEN DO: 
         CREATE tidut. 
         CREATE tidut.  
         SUBSTRING(tidut.UT,utnr[1]) = "Upplag nr".
         SUBSTRING(tidut.UT,utnr[3]) = ":" + STRING(upptemp.UPPLAG).
                                                
      END.
   END.
END PROCEDURE.

PROCEDURE utkalk_UI :
    
   IF globforetag = "GRAN" OR globforetag = "REJI"  OR globforetag = "GKAL" OR globforetag = "ELPA" {GLOBVES.I} THEN DO:
      CREATE tidut.
      ASSIGN
      
      
     
      SUBSTRING(tidut.UT,utnr[1]) = kalkbuff.ARBKOD + " " + STRING(kalkbuff.LOPNR,Guru.Konstanter:varforetypchar[6]).
      SUBSTRING(tidut.UT,utnr[2]) = SUBSTRING(kalkbuff.BENAMNING,1,30).
      SUBSTRING(tidut.UT,utnr[4]) = kalkbuff.ENHET.
      SUBSTRING(tidut.UT,utnr[5]) = STRING(kalkbuff.ANTAL,">>>>9.999").
      IF kalkvisabaraantal = TRUE THEN.
      ELSE DO:                        
         SUBSTRING(tidut.UT,utnr[6]) = STRING(kalkbuff.F2,">>>>>>>>9.999").
         ASSIGN
         SUBSTRING(tidut.UT,utnr[7]) = STRING(kalkbuff.F3 + kalkbuff.F4,">>>>>>>>9.999")
         summont = summont + kalkbuff.F2
         summask = summask + kalkbuff.F3 + kalkbuff.F4.
      END.                              
   END.   
   ELSE DO:   
      CREATE tidut.
      ASSIGN
      
      
     
      SUBSTRING(tidut.UT,utnr[1]) = kalkbuff.ARBKOD + " " + STRING(kalkbuff.LOPNR,Guru.Konstanter:varforetypchar[6]).
      SUBSTRING(tidut.UT,utnr[2]) = SUBSTRING(kalkbuff.BENAMNING,1,30).
      SUBSTRING(tidut.UT,utnr[4]) = kalkbuff.ENHET.
      SUBSTRING(tidut.UT,utnr[5]) = STRING(kalkbuff.ANTAL,">>>>>9.999").
      IF kalkvisabaraantal = TRUE THEN.
      ELSE DO:                            
         SUBSTRING(tidut.UT,utnr[6]) = STRING(kalkbuff.EAST,">>>>>>>>9").
         SUBSTRING(tidut.UT,utnr[7]) = STRING(kalkbuff.EA,">>>>>>>>9").
         sumea = sumea + kalkbuff.EA.
      
      END.                                
   END.
END PROCEDURE.

PROCEDURE val2_UI :

   CREATE tidut.
   IF AVAILABLE BBENAMNING AND BBENAMNING.B3 NE "" THEN DO:       
      ASSIGN
      SUBSTRING(tidut.UT,utnr[1]) =  BBENAMNING.B3.
      SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(uppl_temp.F3).               
                              
   END.   
   IF AVAILABLE BBENAMNING AND BBENAMNING.B4 NE "" THEN DO:      
      ASSIGN
      SUBSTRING(tidut.UT,utnr[4]) = BBENAMNING.B4.
      ASSIGN
      SUBSTRING(tidut.UT,utnr[6]) = ":" + LEFT-TRIM(uppl_temp.F4).
                                                            
   END.
   CREATE tidut.
   FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
   skap_temp.F3 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
   IF AVAILABLE skap_temp THEN finns = TRUE.         
   ELSE finns = FALSE.
   IF finns = FALSE THEN DO:
      FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
      skap_temp.F4 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN finns = TRUE. 
   END.     
   DO WHILE finns = TRUE:
      FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
      skap_temp.F3 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN DO:
         ASSIGN            
         SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(skap_temp.F3).
         DELETE skap_temp.
      END.
      FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
      skap_temp.F4 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN DO:
         SUBSTRING(tidut.UT,utnr[6]) = LEFT-TRIM(skap_temp.F4).
         DELETE skap_temp.
      END.
      FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
      skap_temp.F3 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN finns = TRUE.         
      ELSE finns = FALSE.
      IF finns = FALSE THEN DO:
         FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
         skap_temp.F4 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
         IF AVAILABLE skap_temp THEN finns = TRUE. 
      END.
      CREATE tidut.
   END.  
   IF AVAILABLE BBENAMNING AND BBENAMNING.B5 NE "" THEN DO:      
      ASSIGN
      SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.B5.
      SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(uppl_temp.F5).      
                              
   END.
   IF AVAILABLE BBENAMNING AND BBENAMNING.B6 NE "" THEN DO:      
      ASSIGN
      SUBSTRING(tidut.UT,utnr[4]) = BBENAMNING.B6.
      SUBSTRING(tidut.UT,utnr[6]) = ":" + LEFT-TRIM(uppl_temp.F6).
                              
   END.
   CREATE tidut.
   FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
   skap_temp.F5 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
   IF AVAILABLE skap_temp THEN finns = TRUE.         
   ELSE finns = FALSE.
   IF finns = FALSE THEN DO:
      FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
      skap_temp.F6 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN finns = TRUE. 
   END.      
   DO WHILE finns = TRUE:
      FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
      skap_temp.F5 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN DO:
         ASSIGN
         SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(skap_temp.F5).
         DELETE skap_temp.
      END.
      FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
      skap_temp.F6 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN DO:
         ASSIGN            
         SUBSTRING(tidut.UT,utnr[6]) = LEFT-TRIM(skap_temp.F6).
         DELETE skap_temp.
      END.
      FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
      skap_temp.F5 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN finns = TRUE.         
      ELSE finns = FALSE.
      IF finns = FALSE THEN DO:
         FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
         skap_temp.F6 NE "" USE-INDEX NUM NO-LOCK NO-ERROR.
         IF AVAILABLE skap_temp THEN finns = TRUE. 
      END.
      CREATE tidut.
   END.
END PROCEDURE.

PROCEDURE val_UI :
   /* vattenfall vill inte ha med konstruktion om Konstruktionsval urbockad*/
   IF globforetag = "vast" AND TOG_VAL = FALSE THEN.
   ELSE DO:               
      CREATE tidut.
      
      
      CREATE tidut.  
      IF AVAILABLE BBENAMNING THEN DO:
         ASSIGN SUBSTRING(tidut.UT,utnr[1]) = BBENAMNING.B1.
                                                
      END.
      SUBSTRING(tidut.UT,utnr[3]) = ":" + LEFT-TRIM(uppl_temp.F1).
      
   END.                                          
   IF TOG_VAL = TRUE THEN DO:
      enkabval = FALSE.
      IF uppl_temp.GRUPP = 0 THEN enkabval = TRUE.   
      /* Claes vill inte ha markstation som kabelskåp i byggprotokoll , eftersom det bara är förkortningar*/
      IF globforetag = "elpa" AND uppl_temp.GRUPP = 12 THEN enkabval = TRUE.
      IF globforetag = "cVAST" AND uppl_temp.GRUPP = 12 THEN enkabval = TRUE.      
      IF globforetag = "cVAST" AND uppl_temp.GRUPP = 33 THEN enkabval = TRUE.      
      IF globforetag = "cVAST" AND uppl_temp.GRUPP = 38 THEN enkabval = TRUE.      
      IF globforetag = "GRAN" AND uppl_temp.GRUPP = 35 THEN enkabval = TRUE.
      IF globforetag = "NAEK" AND uppl_temp.GRUPP = 35 THEN enkabval = TRUE.
      IF globforetag = "CPOMA" AND uppl_temp.GRUPP = 35 THEN enkabval = TRUE.      
      IF globforetag = "FORS" AND uppl_temp.GRUPP = 33 THEN enkabval = TRUE.      
      IF globforetag = "ELKB" AND uppl_temp.GRUPP = 35 THEN enkabval = TRUE.      
      IF enkabval = TRUE THEN DO:
         CREATE tidut.
         CREATE tidut.
         IF AVAILABLE BBENAMNING THEN DO:
            SUBSTRING(tidut.UT,utnr[1]) = SUBSTRING(BBENAMNING.B2,1,15).
            SUBSTRING(tidut.UT,utnr[2]) =      SUBSTRING(BBENAMNING.B3,1,15).
            SUBSTRING(tidut.UT,utnr[3]) =      SUBSTRING(BBENAMNING.B4,1,15).
            SUBSTRING(tidut.UT,utnr[4]) =      SUBSTRING(BBENAMNING.B5,1,15).
            ASSIGN
            SUBSTRING(tidut.UT,utnr[5]) = SUBSTRING(BBENAMNING.B6,1,15).
                                                                  
         END.
         CREATE tidut.
         ASSIGN
         SUBSTRING(tidut.UT,utnr[1]) = LEFT-TRIM(uppl_temp.F2).
         SUBSTRING(tidut.UT,utnr[2]) = LEFT-TRIM(uppl_temp.F3).
         SUBSTRING(tidut.UT,utnr[3]) = LEFT-TRIM(uppl_temp.F4).
         SUBSTRING(tidut.UT,utnr[4]) = LEFT-TRIM(uppl_temp.F5).
         ASSIGN
         SUBSTRING(tidut.UT,utnr[5]) = LEFT-TRIM(uppl_temp.F6).
         FOR EACH skap_temp WHERE skap_temp.NUM = uppl_temp.NUM
         USE-INDEX NUM NO-LOCK:
            IF skap_temp.F2 = "" AND skap_temp.F3 = "" AND skap_temp.F4 = "" AND
               skap_temp.F5 = "" AND skap_temp.F6 = "" THEN musz = musz.
            ELSE DO:
               CREATE tidut.
               ASSIGN
               
               SUBSTRING(tidut.UT,utnr[1]) = LEFT-TRIM(skap_temp.F2).
               SUBSTRING(tidut.UT,utnr[2]) = LEFT-TRIM(skap_temp.F3).
               SUBSTRING(tidut.UT,utnr[3]) = LEFT-TRIM(skap_temp.F4).
               SUBSTRING(tidut.UT,utnr[4]) = LEFT-TRIM(skap_temp.F5).
               ASSIGN
               SUBSTRING(tidut.UT,utnr[5]) = LEFT-TRIM(skap_temp.F6).
                                                                  
            END.
         END.
         RETURN.
      END.
      IF AVAILABLE BBENAMNING AND BBENAMNING.B2 NE "" THEN DO:          
         ASSIGN SUBSTRING(tidut.UT,utnr[4]) = BBENAMNING.B2.
         ASSIGN
         SUBSTRING(tidut.UT,utnr[6]) = ":" + LEFT-TRIM(uppl_temp.F2).
         FOR EACH skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND
         skap_temp.F2 NE "" USE-INDEX NUM NO-LOCK:
            CREATE tidut.
            ASSIGN
            
            SUBSTRING(tidut.UT,utnr[6]) = LEFT-TRIM(skap_temp.F2).
         END.         
      END.        
      RUN val2_UI.         
   END.   
END PROCEDURE.

/*LISTPROG.P*/

PROCEDURE LISTPROG_UI :
   DEFINE VARIABLE datvar LIKE BERMTRL.DATUM NO-UNDO.
   DEFINE INPUT PARAMETER valaonr LIKE AONRTAB.AONR NO-UNDO.
   DEFINE INPUT PARAMETER valomrade LIKE AONRTAB.OMRADE NO-UNDO.

   DEFINE OUTPUT PARAMETER TABLE FOR mtrl_temp.

   DEFINE OUTPUT PARAMETER TABLE FOR lin_temp.              
      
   FIND LAST BERMTRL WHERE BERMTRL.AONR = valaonr AND 
   BERMTRL.OMRADE = valomrade AND BERMTRL.INKOP = FALSE 
   USE-INDEX DATUM NO-LOCK NO-ERROR.
   IF AVAILABLE BERMTRL THEN DO:
      datvar = BERMTRL.DATUM.
   END.     
   ELSE DO:
      datvar = TODAY.
   END.
   OPEN QUERY mtrlprisq FOR EACH BERMTRL WHERE BERMTRL.AONR = valaonr AND
   BERMTRL.OMRADE = valomrade AND BERMTRL.INKOP = FALSE
   AND BERMTRL.DATUM = datvar USE-INDEX DATUM NO-LOCK.
   GET FIRST mtrlprisq NO-LOCK.
   DO WHILE AVAILABLE(BERMTRL):      
      CREATE mtrl_temp.
      ASSIGN  
      mtrl_temp.NUM = BERMTRL.NUM
      mtrl_temp.ENR = BERMTRL.ENR     
      mtrl_temp.BENAMNING = BERMTRL.BENAMNING
      mtrl_temp.ENHET = BERMTRL.ENHET
      mtrl_temp.ANTAL = BERMTRL.ANTAL
      mtrl_temp.PRIS = BERMTRL.PRIS 
      mtrl_temp.TOTPRIS = BERMTRL.PRIS * BERMTRL.ANTAL      
      mtrl_temp.LEVKOD = BERMTRL.LEVKOD
      mtrl_temp.PAR = BERMTRL.PAR
      mtrl_temp.MTRLTEXT = BERMTRL.MTRLTEXT.
      GET NEXT mtrlprisq NO-LOCK.
   END.    
   CLOSE QUERY mtrlprisq.         
   
   
     
   
   
END PROCEDURE.
/*LISTPROG2U.P*/
PROCEDURE LISTPROG2U_UI :
   
DEFINE VARIABLE datvar LIKE BERMTRL.DATUM NO-UNDO.
DEFINE INPUT PARAMETER TABLE FOR kon_val.

DEFINE OUTPUT PARAMETER TABLE FOR mtrl_temp.
DEFINE OUTPUT PARAMETER TABLE FOR lin_temp.                 
   
   FOR EACH kon_val:   
      FIND LAST BERMTRL WHERE BERMTRL.AONR = kon_val.BERAONR AND 
      BERMTRL.OMRADE = kon_val.OMRADE AND BERMTRL.INKOP = FALSE 
      USE-INDEX DATUM NO-LOCK NO-ERROR.
      IF AVAILABLE BERMTRL THEN DO:
         datvar = BERMTRL.DATUM.
      END.     
      ELSE DO:
         datvar = TODAY.
      END.
       
         OPEN QUERY mtrlprisq FOR EACH BERMTRL WHERE BERMTRL.AONR = kon_val.BERAONR AND
         BERMTRL.OMRADE = kon_val.OMRADE AND BERMTRL.INKOP = FALSE
         AND BERMTRL.DATUM = datvar AND BERMTRL.NUM = kon_val.NUM USE-INDEX DATUM NO-LOCK.
         GET FIRST mtrlprisq NO-LOCK.
         DO WHILE AVAILABLE(BERMTRL):      
            CREATE mtrl_temp.
            ASSIGN  
            mtrl_temp.NUM = kon_val.ORD
            mtrl_temp.ENR = BERMTRL.ENR     
            mtrl_temp.BENAMNING = BERMTRL.BENAMNING
            mtrl_temp.ENHET = BERMTRL.ENHET
            mtrl_temp.ANTAL = BERMTRL.ANTAL
            mtrl_temp.PRIS = BERMTRL.PRIS 
            mtrl_temp.TOTPRIS = BERMTRL.PRIS * BERMTRL.ANTAL      
            mtrl_temp.LEVKOD = BERMTRL.LEVKOD
            mtrl_temp.PAR = BERMTRL.PAR
            mtrl_temp.MTRLTEXT = BERMTRL.MTRLTEXT.         
            GET NEXT mtrlprisq NO-LOCK.
         END.    
         CLOSE QUERY mtrlprisq.   
      END.
         
   
END PROCEDURE.
 /*LISTKONU.P*/
 PROCEDURE LISTKONU_UI :
   
   

DEFINE INPUT PARAMETER valaonr LIKE AONRTAB.AONR NO-UNDO.
DEFINE INPUT PARAMETER valomrade LIKE AONRTAB.OMRADE NO-UNDO.
DEFINE INPUT PARAMETER valkonst AS LOGICAL.
DEFINE INPUT PARAMETER TABLE FOR kon_val.

DEFINE OUTPUT PARAMETER TABLE FOR uppl_temp.
DEFINE OUTPUT PARAMETER TABLE FOR skap_temp.
DEFINE OUTPUT PARAMETER TABLE FOR id_temp.              
   
IF valkonst = FALSE THEN DO:   
   OPEN QUERY ordq FOR EACH BERORD WHERE BERORD.AONR = valaonr
   AND BERORD.OMRADE = valomrade USE-INDEX ORD NO-LOCK.
   GET FIRST ordq NO-LOCK.
   DO WHILE AVAILABLE(BERORD):      
      CREATE ord_temp.  
      ASSIGN
      ord_temp.NUM = BERORD.NUM  
      ord_temp.ORD = BERORD.ORD.     
      GET NEXT ordq NO-LOCK.
   END.
   CLOSE QUERY ordq.
   OPEN QUERY upplq FOR EACH BERVAL WHERE BERVAL.AONR = valaonr
   AND BERVAL.OMRADE = valomrade USE-INDEX OMR NO-LOCK.
   GET FIRST upplq NO-LOCK.
   DO WHILE AVAILABLE(BERVAL):
      IF BERVAL.KSKAP = FALSE THEN DO:        
         CREATE uppl_temp.  
         ASSIGN
         uppl_temp.BERAONR = valaonr
         uppl_temp.OMRADE = valomrade
         uppl_temp.NUM = BERVAL.NUM  
         uppl_temp.F1 = BERVAL.KTYPKOD  
         uppl_temp.F2 = BERVAL.F2
         uppl_temp.F3 = BERVAL.F3
         uppl_temp.F4 = BERVAL.F4
         uppl_temp.F5 = BERVAL.F5
         uppl_temp.F6 = BERVAL.F6   
         uppl_temp.UPPLAG = BERVAL.UPPLAG
         uppl_temp.GRUPP = BERVAL.KONSKOD
         uppl_temp.ANMARK = BERVAL.ANMARK.
         FIND FIRST BERUPP WHERE BERUPP.AONR = valaonr AND
         BERUPP.OMRADE = valomrade AND BERUPP.UPPLAG = uppl_temp.UPPLAG NO-LOCK NO-ERROR.
         IF AVAILABLE BERUPP THEN DO:
            ASSIGN
            /*uppl_temp.ANMARK = BERUPP.ANMARK*/
            uppl_temp.ADRESS = BERUPP.ADRESS.
         END.

         FIND FIRST ord_temp WHERE ord_temp.NUM = uppl_temp.NUM
         USE-INDEX NUM NO-LOCK NO-ERROR.
         IF AVAILABLE ord_temp THEN uppl_temp.ORD = ord_temp.ORD.
      END.
      ELSE DO:
         CREATE skap_temp.  
         ASSIGN
         skap_temp.NUM = BERVAL.NUM  
         skap_temp.F1 = BERVAL.KTYPKOD  
         skap_temp.F2 = BERVAL.F2
         skap_temp.F3 = BERVAL.F3
         skap_temp.F4 = BERVAL.F4
         skap_temp.F5 = BERVAL.F5
         skap_temp.F6 = BERVAL.F6
         skap_temp.SKAPNUM = BERVAL.SKAPNUM.
      END.   
      GET NEXT upplq NO-LOCK.
   END.
   CLOSE QUERY upplq.       
   OPEN QUERY beridq FOR EACH BERID WHERE BERID.AONR = valaonr AND
   BERID.OMRADE = valomrade USE-INDEX OMR NO-LOCK.
   GET FIRST beridq NO-LOCK.
   DO WHILE AVAILABLE(BERID):
      CREATE id_temp.
      ASSIGN
      id_temp.NUM = BERID.NUM            
      id_temp.FORNR = BERID.FORNR 
      id_temp.LINNR = BERID.LINNR 
      id_temp.NATNR = BERID.NATNR  
      id_temp.FRI1 = BERID.FRI1 
      id_temp.FRI2 = BERID.FRI2 
      id_temp.XKORD = BERID.XKORD  
      id_temp.ENDKOMB = BERID.ENDKOMB
      id_temp.FRI3 = BERID.FRI3.      
      FIND FIRST uppl_temp WHERE uppl_temp.NUM = id_temp.NUM USE-INDEX NUM NO-ERROR.
      IF AVAILABLE uppl_temp THEN DO:
         ASSIGN
         id_temp.GRUPP = uppl_temp.GRUPP
         id_temp.ORD = uppl_temp.ORD.
      END.
        
      GET NEXT beridq NO-LOCK.
   END.
   CLOSE QUERY beridq.
END.
ELSE DO:
   FOR EACH kon_val:
      OPEN QUERY upplq FOR EACH BERVAL WHERE BERVAL.AONR = kon_val.BERAONR
      AND BERVAL.OMRADE = kon_val.OMRADE AND BERVAL.NUM = kon_val.NUM NO-LOCK.
      GET FIRST upplq NO-LOCK.
      DO WHILE AVAILABLE(BERVAL):
         IF BERVAL.KSKAP = FALSE THEN DO:        
            CREATE uppl_temp.  
            ASSIGN
            uppl_temp.BERAONR = kon_val.BERAONR
            uppl_temp.OMRADE = kon_val.OMRADE
            uppl_temp.NUM = kon_val.ORD  
            uppl_temp.F1 = BERVAL.KTYPKOD  
            uppl_temp.F2 = BERVAL.F2
            uppl_temp.F3 = BERVAL.F3
            uppl_temp.F4 = BERVAL.F4
            uppl_temp.F5 = BERVAL.F5
            uppl_temp.F6 = BERVAL.F6   
            uppl_temp.UPPLAG = BERVAL.UPPLAG
            uppl_temp.GRUPP = BERVAL.KONSKOD
            uppl_temp.ANMARK = BERVAL.ANMARK
            uppl_temp.ORD = kon_val.ORD.
             FIND FIRST BERUPP WHERE BERUPP.AONR = kon_val.BERAONR AND
            BERUPP.OMRADE = kon_val.OMRADE AND BERUPP.UPPLAG = uppl_temp.UPPLAG NO-LOCK NO-ERROR.
            IF AVAILABLE BERUPP THEN DO:
               ASSIGN
               /*uppl_temp.ANMARK = BERUPP.ANMARK*/
               uppl_temp.ADRESS = BERUPP.ADRESS.
            END.
/*                FIND FIRST ord_temp WHERE ord_temp.NUM = uppl_temp.NUM   */
/*                USE-INDEX NUM NO-LOCK NO-ERROR.                          */
/*                IF AVAILABLE ord_temp THEN uppl_temp.ORD = ord_temp.ORD. */
         END.
         ELSE DO:
            CREATE skap_temp.  
            ASSIGN
            skap_temp.NUM = kon_val.ORD  
            skap_temp.F1 = BERVAL.KTYPKOD  
            skap_temp.F2 = BERVAL.F2
            skap_temp.F3 = BERVAL.F3
            skap_temp.F4 = BERVAL.F4
            skap_temp.F5 = BERVAL.F5
            skap_temp.F6 = BERVAL.F6
            skap_temp.SKAPNUM = BERVAL.SKAPNUM.
         END.   
         GET NEXT upplq NO-LOCK.
      END.
      CLOSE QUERY upplq.       
      FIND FIRST BERID WHERE BERID.AONR = kon_val.BERAONR AND
      BERID.OMRADE = kon_val.OMRADE AND BERID.NUM = kon_val.NUM NO-LOCK NO-ERROR.         
      IF AVAILABLE BERID THEN DO:         
         CREATE id_temp.
         ASSIGN
         id_temp.NUM = kon_val.ORD            
         id_temp.FORNR = BERID.FORNR 
         id_temp.LINNR = BERID.LINNR 
         id_temp.NATNR = BERID.NATNR  
         id_temp.FRI1 = BERID.FRI1 
         id_temp.FRI2 = BERID.FRI2 
         id_temp.XKORD = kon_val.SKAPNUM  
         id_temp.ENDKOMB = BERID.ENDKOMB
         id_temp.FRI3 = BERID.FRI3.              
         FIND FIRST uppl_temp WHERE uppl_temp.NUM = id_temp.NUM USE-INDEX NUM.
         ASSIGN
         id_temp.GRUPP = uppl_temp.GRUPP
         id_temp.ORD = uppl_temp.ORD.           
      END.         
   END.
END.
RUN kondisp_UI.
END PROCEDURE.
PROCEDURE kondisp2_UI :     
   
   {MARKKABVAL3.I}
   IF enval = TRUE THEN DO:
      FIND FIRST skap_temp WHERE skap_temp.NUM = uppl_temp.NUM AND skap_temp.F2 NE ""  
      USE-INDEX NUM NO-LOCK NO-ERROR.
      IF AVAILABLE skap_temp THEN DO:
         IF uppl_temp.F2 = "" THEN DO:
            uppl_temp.F2 = skap_temp.F2. 
            skap_temp.F2 = "".
         END.  
         IF uppl_temp.F3 = "" THEN DO:
            uppl_temp.F3 = skap_temp.F3. 
            skap_temp.F3 = "".
         END.
         IF uppl_temp.F4 = "" THEN DO:
            uppl_temp.F4 = skap_temp.F4. 
            skap_temp.F4 = "".
         END.
         IF uppl_temp.F5 = "" THEN DO:
            uppl_temp.F5 = skap_temp.F5. 
            skap_temp.F5 = "".
         END.
         IF uppl_temp.F6 = "" THEN DO:
            uppl_temp.F6 = skap_temp.F6. 
            skap_temp.F6 = "".
         END.                      
      END. 
      ELSE DO:
         FOR EACH skap_temp WHERE skap_temp.NUM = uppl_temp.NUM USE-INDEX NUM NO-LOCK:
            IF uppl_temp.F2 = "" THEN DO:
               uppl_temp.F2 = skap_temp.F2. 
               skap_temp.F2 = "".
            END.  
            IF uppl_temp.F3 = "" THEN DO:
               uppl_temp.F3 = skap_temp.F3. 
               skap_temp.F3 = "".
            END.
            IF uppl_temp.F4 = "" THEN DO:
               uppl_temp.F4 = skap_temp.F4. 
               skap_temp.F4 = "".
            END.
            IF uppl_temp.F5 = "" THEN DO:
               uppl_temp.F5 = skap_temp.F5. 
               skap_temp.F5 = "".
            END.
            IF uppl_temp.F6 = "" THEN DO:
               uppl_temp.F6 = skap_temp.F6. 
               skap_temp.F6 = "".
            END.                             
         END.
      END.          
   END.
   
   ELSE DO:     
      FOR EACH skap_temp WHERE skap_temp.NUM = uppl_temp.NUM USE-INDEX NUM NO-LOCK:
         IF uppl_temp.F2 = "" THEN DO:
            uppl_temp.F2 = skap_temp.F2. 
            skap_temp.F2 = "".
         END.  
         IF uppl_temp.F3 = "" THEN DO:
            uppl_temp.F3 = skap_temp.F3. 
            skap_temp.F3 = "".
         END.
         IF uppl_temp.F4 = "" THEN DO:
            uppl_temp.F4 = skap_temp.F4. 
            skap_temp.F4 = "".
         END.
         IF uppl_temp.F5 = "" THEN DO:
            uppl_temp.F5 = skap_temp.F5. 
            skap_temp.F5 = "".
         END.
         IF uppl_temp.F6 = "" THEN DO:
            uppl_temp.F6 = skap_temp.F6. 
            skap_temp.F6 = "".
         END.                             
      END.
   END.   
   enval = FALSE.                        
END PROCEDURE.

PROCEDURE kondisp_UI :           
   DEFINE VARIABLE kon_rowid AS ROWID NO-UNDO.
   DEFINE BUFFER kdisp FOR kon_val.
   FOR EACH uppl_temp NO-LOCK:
      RUN kondisp2_UI.             
   END.
             
END PROCEDURE.
 /*LISTUPPU.P.*/   
PROCEDURE LISTUPPU_UI :
   DEFINE INPUT PARAMETER valaonr LIKE AONRTAB.AONR NO-UNDO.
   DEFINE INPUT PARAMETER valomrade LIKE AONRTAB.OMRADE NO-UNDO.
   DEFINE INPUT PARAMETER valkonst AS LOGICAL.
   DEFINE INPUT PARAMETER TABLE FOR kon_val.
   
   DEFINE OUTPUT PARAMETER TABLE FOR temp_upp.
   IF valkonst = FALSE THEN DO:   
      OPEN QUERY berq FOR EACH BERUPP WHERE BERUPP.AONR = valaonr AND
      BERUPP.OMRADE = valomrade USE-INDEX OMR NO-LOCK.
      GET FIRST berq NO-LOCK.
      DO WHILE AVAILABLE(BERUPP):
         CREATE temp_upp.
         ASSIGN
         temp_upp.UPPLAG = BERUPP.UPPLAG
         temp_upp.ADRESS = BERUPP.ADRESS
         temp_upp.ANMARK = BERUPP.ANMARK.
         GET NEXT berq NO-LOCK.
      END.
      CLOSE QUERY berq.
   END.
   ELSE DO:
      FOR EACH kon_val:
         OPEN QUERY berq FOR EACH BERUPP WHERE BERUPP.AONR = kon_val.BERAONR AND
         BERUPP.OMRADE = kon_val.OMRADE NO-LOCK.
         GET FIRST berq NO-LOCK.
         DO WHILE AVAILABLE(BERUPP):
            FIND FIRST temp_upp WHERE temp_upp.UPPLAG = BERUPP.UPPLAG
            NO-LOCK NO-ERROR.
            IF NOT AVAILABLE temp_upp THEN DO:            
               CREATE temp_upp.
               ASSIGN
               temp_upp.UPPLAG = BERUPP.UPPLAG
               temp_upp.ADRESS = BERUPP.ADRESS
               temp_upp.ANMARK = BERUPP.ANMARK.
            END.
            GET NEXT berq NO-LOCK.
         END.
         CLOSE QUERY berq.
      END.
   END.
END PROCEDURE.

 /*LISTKALKU.P.*/
PROCEDURE LISTKALKU_UI :
  
DEFINE INPUT PARAMETER valaonr LIKE AONRTAB.AONR NO-UNDO.
DEFINE INPUT PARAMETER valomrade LIKE AONRTAB.OMRADE NO-UNDO.
DEFINE INPUT PARAMETER valkonst AS LOGICAL.
DEFINE INPUT PARAMETER TABLE FOR kon_val.

DEFINE OUTPUT PARAMETER TABLE FOR ber_temp.
   
IF valkonst = FALSE THEN DO:   
   OPEN QUERY kalkq FOR EACH BERKALK WHERE BERKALK.AONR = valaonr 
   AND BERKALK.OMRADE = valomrade USE-INDEX OMR NO-LOCK.
   GET FIRST kalkq NO-LOCK.
   DO WHILE AVAILABLE(BERKALK):      
      CREATE ber_temp.
      ASSIGN
      ber_temp.ARBKOD = BERKALK.ARBKOD
      ber_temp.LOPNR = BERKALK.LOPNR
      ber_temp.BENAMNING = BERKALK.BENAMNING
      ber_temp.ENHET = BERKALK.ENHET
      ber_temp.ANTAL = BERKALK.ANTAL
      ber_temp.NUM = BERKALK.NUM.      
      GET NEXT kalkq NO-LOCK.
   END.
   CLOSE QUERY kalkq.
END.
ELSE DO:
   FOR EACH kon_val:
      OPEN QUERY mtrlprisq FOR EACH BERKALK WHERE BERKALK.AONR = kon_val.BERAONR AND
      BERKALK.OMRADE = kon_val.OMRADE AND BERKALK.NUM = kon_val.NUM 
      NO-LOCK.
      GET FIRST mtrlprisq NO-LOCK.
      DO WHILE AVAILABLE(BERKALK):      
         CREATE ber_temp.
         ASSIGN
         ber_temp.ARBKOD = BERKALK.ARBKOD
         ber_temp.LOPNR = BERKALK.LOPNR
         ber_temp.BENAMNING = BERKALK.BENAMNING
         ber_temp.ENHET = BERKALK.ENHET
         ber_temp.ANTAL = BERKALK.ANTAL
         ber_temp.NUM = kon_val.ORD.
         GET NEXT mtrlprisq NO-LOCK.
      END.    
      CLOSE QUERY mtrlprisq. 
   END.
END.
END PROCEDURE.