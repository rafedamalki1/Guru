/*EXETIKE.P*/
&Scoped-define NEW
&Scoped-define SHARED
{GLOBVAR2DEL1.I}

DEFINE TEMP-TABLE jmedtemp NO-UNDO
   FIELD Efternamn    AS CHARACTER
   FIELD Fornamn      AS CHARACTER
   FIELD Fodd         AS CHARACTER
   FIELD Gata         AS CHARACTER
   FIELD Postnr       AS CHARACTER
   FIELD Postadress   AS CHARACTER
   FIELD Telefon      AS CHARACTER
   FIELD Mobiltel     AS CHARACTER
   FIELD Epost        AS CHARACTER
   FIELD Anm          AS CHARACTER
   FIELD Man_Kv       AS CHARACTER
   FIELD Medlem       AS CHARACTER
   INDEX Efternamn Efternamn Gata
   INDEX Gata Gata Efternamn.
DEFINE TEMP-TABLE tidaut NO-UNDO
   FIELD UTRAD1 AS CHARACTER
   FIELD UTRAD2 AS CHARACTER
   FIELD UTRAD3 AS CHARACTER
   FIELD ORDNING AS INTEGER
   FIELD RAD AS INTEGER
   INDEX ORDNING ORDNING.

/*EXECLIN.I*/

/*{EGENBVAR.I}*/
{IMPFAST.I}


 
DEFINE SHARED VARIABLE musz AS LOGICAL NO-UNDO.
DEFINE NEW SHARED VARIABLE vartpro AS CHARACTER FORMAT "X(3)" NO-UNDO.
DEFINE SHARED VARIABLE skrivut AS LOGICAL NO-UNDO.

DEFINE VARIABLE utskriv AS LOGICAL NO-UNDO.
DEFINE INPUT PARAMETER TABLE FOR marktmp.
{EXECLIN2.I}
{windows.i}  
RUN skrivligg_UI (INPUT FALSE).
IF utskriv = FALSE THEN RETURN.                        

/*skrivut = TRUE.  
RUN SKRIVVAL.W (INPUT FALSE).  
IF musz = TRUE THEN DO:
   musz = FALSE.
   skrivut = FALSE.  
   RETURN NO-APPLY.
END.               */


/*RUN startin_UI.*/
RUN etiketer_UI (INPUT 3,INPUT 7).

PROCEDURE skrivligg_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/
   DEFINE INPUT PARAMETER liggande AS LOGICAL NO-UNDO.
   {SKRIVLS.I}   
END PROCEDURE.

PROCEDURE etiketer_UI :
   DEFINE INPUT PARAMETER antalcol AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER antaletiketrader AS INTEGER NO-UNDO.
   DEFINE VARIABLE utnr AS INTEGER EXTENT 50 NO-UNDO.
   DEFINE VARIABLE bredd AS INTEGER EXTENT 50 NO-UNDO.
   DEFINE VARIABLE nrcol AS INTEGER EXTENT 50 NO-UNDO.
   DEFINE VARIABLE i AS INTEGER NO-UNDO.
   DEFINE VARIABLE i2 AS INTEGER NO-UNDO.
   DEFINE VARIABLE rader AS INTEGER NO-UNDO.
   i = 1.
   REPEAT:
      ASSIGN
      bredd[i] = 30
      nrcol[i] = i
      i = i + 1.
      IF i > antalcol THEN LEAVE.
   END.
   breddantal = antalcol   /*antal kolumner*/.   
   ASSIGN
   i = 2.     
   utnr[nrcol[1]] = 1.
   DO WHILE i <= breddantal:             
      utnr[i] = utnr[i - 1] + bredd[i - 1] + 3.            
      i = i + 1.
   END.  
   i2 = 1.
   i = 1.
   FOR EACH marktmp:
      /*
      IF i > 14 THEN NEXT.
      */
      IF i = 1 THEN DO:
         CREATE tidaut.
         rader = rader + 1.
         ASSIGN
         tidaut.RAD = i2   
         tidaut.ORDNING = rader.

      END.
      ASSIGN
      SUBSTRING(tidaut.UTRAD1,utnr[nrcol[i]]) = TRIM(marktmp.MARKAGARE) 
      SUBSTRING(tidaut.UTRAD2,utnr[nrcol[i]]) = TRIM(marktmp.GATUADRESS) 
      SUBSTRING(tidaut.UTRAD3,utnr[nrcol[i]]) = TRIM(STRING(marktmp.POSTNUMMER,"999 99") + " " +  marktmp.POSTADRESS).
      i = i + 1.
      IF i > antalcol THEN i = 1.      
      i2 = i2 + 1.
      IF i2 > antaletiketrader THEN i2 = 1.
   END.
   
   OUTPUT TO PRINTER NUM-COPIES VALUE(Guru.SharedVariable:iCopies)  PAGE-SIZE 88 CONVERT TARGET "iso8859-1".               
   
   /*OUTPUT TO c:\protemp9\j.txt.                              */
   
   i = 1.
   PUT SKIP (2). 
   FOR EACH tidaut:
      PUT UNFORMATTED tidaut.UTRAD1 AT 1 SKIP.
      PUT UNFORMATTED tidaut.UTRAD2 AT 1 SKIP.
      PUT UNFORMATTED tidaut.UTRAD3 AT 1 SKIP.
      IF tidaut.RAD = 1 THEN PUT SKIP (6).
      IF tidaut.RAD = 2 THEN PUT SKIP (7).
      IF tidaut.RAD = 3 THEN PUT SKIP (7).
      IF tidaut.RAD = 4 THEN PUT SKIP (7).
      IF tidaut.RAD = 5 THEN PUT SKIP (7).
      IF tidaut.RAD = 6 THEN PUT SKIP (7).
      IF tidaut.RAD = 7 THEN PUT SKIP (6).
      IF tidaut.RAD = 8 THEN PUT SKIP (7).
      IF tidaut.RAD = 9 THEN PUT SKIP (4).     
   
      i = i + 1.
      IF i > antaletiketrader THEN DO:
         i = 1.      
         PAGE.
         PUT SKIP (2). 
      END.
      
   END.
   OUTPUT CLOSE.
   
END PROCEDURE.





