/*MTRLHMT.P*/

{startforapp.i}
{MTRLTEMP.I}
{KALKTEMP2.I}  
PROCEDURE enrhmt_UI :
   DEFINE INPUT PARAMETER posok AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER begvar AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER vald_lev2 AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER felmedd AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR mtrltemp.
   IF posok = "*" THEN DO:
      OPEN QUERY mq FOR EACH MTRL WHERE MTRL.LEVKOD = vald_lev2 AND MTRL.KALKNR = 0 USE-INDEX LEV NO-LOCK.
      GET FIRST mq NO-LOCK.
      DO WHILE AVAILABLE(MTRL):
         CREATE mtrltemp.
         BUFFER-COPY MTRL TO mtrltemp.
         ASSIGN 
         mtrltemp.ENHET = LC(mtrltemp.ENHET)
         mtrltemp.MTRLROW = ROWID(MTRL).
         GET NEXT mq NO-LOCK.
      END.
      CLOSE QUERY mq.
      RETURN.
   END.
   IF begvar = ? THEN DO:
      RUN starwars_UI (OUTPUT begvar,OUTPUT felmedd,INPUT-OUTPUT posok).
      IF felmedd NE "" THEN RETURN.
   END.
   EMPTY TEMP-TABLE mtrltemp NO-ERROR. 
   
   felmedd = "".
   IF begvar = FALSE THEN DO:
      OPEN QUERY mq FOR EACH MTRL WHERE MTRL.ENR MATCHES posok AND MTRL.LEVKOD = vald_lev2
      AND MTRL.KALKNR = 0 USE-INDEX LEV NO-LOCK.
      GET FIRST mq NO-LOCK.
      DO WHILE AVAILABLE(MTRL):
         CREATE mtrltemp.
         BUFFER-COPY MTRL TO mtrltemp.
         ASSIGN 
         mtrltemp.ENHET = LC(mtrltemp.ENHET).
         mtrltemp.MTRLROW = ROWID(MTRL).
         GET NEXT mq NO-LOCK.
      END.
      CLOSE QUERY mq.
   END.
   ELSE DO:
      OPEN QUERY mq FOR EACH MTRL WHERE MTRL.ENR BEGINS posok AND MTRL.LEVKOD = vald_lev2
      AND MTRL.KALKNR = 0 USE-INDEX LEV NO-LOCK.
      GET FIRST mq NO-LOCK.
      DO WHILE AVAILABLE(MTRL):
         CREATE mtrltemp.
         BUFFER-COPY MTRL TO mtrltemp.
         ASSIGN 
         mtrltemp.ENHET = LC(mtrltemp.ENHET)
         mtrltemp.MTRLROW = ROWID(MTRL).
         GET NEXT mq NO-LOCK.
      END.
      CLOSE QUERY mq.      
   END.
   FIND FIRST mtrltemp NO-LOCK NO-ERROR.
   IF NOT AVAILABLE mtrltemp THEN DO:
      ASSIGN felmedd = "Det finns inget på sökbegreppet".
      RETURN.
   END.      
END PROCEDURE.

PROCEDURE enrhmt2_UI :
   DEFINE INPUT PARAMETER posok AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER begvar AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER vald_lev2 AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER felmedd AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR mtrltemp.

   DEFINE VARIABLE num AS INTEGER NO-UNDO.
   felmedd = "".
   IF begvar = ? THEN DO:
      RUN starwars_UI (OUTPUT begvar,OUTPUT felmedd,INPUT-OUTPUT posok).
      IF felmedd NE "" THEN RETURN.
   END.
   EMPTY TEMP-TABLE mtrltemp NO-ERROR. 
   num = 0.
   IF begvar = FALSE THEN DO:
      FIND FIRST MTRL WHERE MTRL.ENR MATCHES posok AND MTRL.LEVKOD = vald_lev2
      AND MTRL.KALKNR = 0 USE-INDEX LEV NO-LOCK NO-ERROR.
      IF AVAILABLE MTRL THEN DO:
         REPEAT:      
            FIND NEXT MTRL WHERE  MTRL.LEVKOD = vald_lev2 
            AND MTRL.KALKNR = 0 USE-INDEX ENR NO-LOCK NO-ERROR.
            IF NOT AVAILABLE MTRL THEN LEAVE.
            
            CREATE mtrltemp.
            BUFFER-COPY MTRL TO mtrltemp.
            ASSIGN 
            mtrltemp.ENHET = LC(mtrltemp.ENHET)
            mtrltemp.MTRLROW = ROWID(MTRL).
            num = num + 1.
            IF num = 11 THEN LEAVE.
         END.
      END.
   END.
   ELSE DO:
      FIND FIRST MTRL WHERE MTRL.ENR BEGINS posok AND MTRL.LEVKOD = vald_lev2
      AND MTRL.KALKNR = 0 USE-INDEX LEV NO-LOCK NO-ERROR.
      IF AVAILABLE MTRL THEN DO:
         REPEAT:      
            FIND NEXT MTRL WHERE  MTRL.LEVKOD = vald_lev2 
            AND MTRL.KALKNR = 0 USE-INDEX ENR NO-LOCK NO-ERROR.
            IF NOT AVAILABLE MTRL THEN LEAVE.
            
            CREATE mtrltemp.
            BUFFER-COPY MTRL TO mtrltemp.
            ASSIGN 
            mtrltemp.ENHET = LC(mtrltemp.ENHET)
            mtrltemp.MTRLROW = ROWID(MTRL).
            num = num + 1.
            IF num = 11 THEN LEAVE.
         END.
      END.
   END.
   FIND FIRST mtrltemp NO-LOCK NO-ERROR.
   IF NOT AVAILABLE mtrltemp THEN DO:
      ASSIGN felmedd = "Det finns inget på sökbegreppet".
      RETURN.
   END.     
END PROCEDURE.

PROCEDURE benhmt_UI :
   DEFINE INPUT PARAMETER aosok AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER satsvar AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER begvar AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER vald_lev2 AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER felmedd AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR mtrltemp.
   DEFINE OUTPUT PARAMETER TABLE FOR satstemp.
   IF aosok = "*" THEN DO:
      OPEN QUERY mq FOR EACH MTRL WHERE MTRL.LEVKOD = vald_lev2 AND MTRL.KALKNR = 0 USE-INDEX LEV NO-LOCK.
      GET FIRST mq NO-LOCK.
      DO WHILE AVAILABLE(MTRL):
         CREATE mtrltemp.
         BUFFER-COPY MTRL TO mtrltemp.
         ASSIGN 
         mtrltemp.ENHET = LC(mtrltemp.ENHET)
         mtrltemp.MTRLROW = ROWID(MTRL).
         GET NEXT mq NO-LOCK.
      END.
      CLOSE QUERY mq.
      RETURN.
   END.
   IF begvar = ? THEN DO:
      RUN starwars_UI (OUTPUT begvar,OUTPUT felmedd,INPUT-OUTPUT aosok).
      IF felmedd NE "" THEN RETURN.
   END.
   EMPTY TEMP-TABLE mtrltemp NO-ERROR. 
   EMPTY TEMP-TABLE satstemp NO-ERROR. 
   felmedd = "".
   IF satsvar = FALSE THEN DO:
      IF begvar = FALSE THEN DO:
         OPEN QUERY sq FOR EACH MTRL WHERE MTRL.BENAMNING MATCHES aosok AND MTRL.LEVKOD = vald_lev2
         AND MTRL.KALKNR = 0 USE-INDEX BEN NO-LOCK.
         GET FIRST sq NO-LOCK.
         DO WHILE AVAILABLE(MTRL):
            CREATE mtrltemp.
            BUFFER-COPY MTRL TO mtrltemp.
            ASSIGN 
            mtrltemp.ENHET = LC(mtrltemp.ENHET)
            mtrltemp.MTRLROW = ROWID(MTRL).
            GET NEXT sq NO-LOCK.
         END.
         CLOSE QUERY sq.
      END.   
      ELSE DO:
         OPEN QUERY sq FOR EACH MTRL WHERE MTRL.BENAMNING BEGINS aosok AND MTRL.LEVKOD = vald_lev2
         AND MTRL.KALKNR = 0 USE-INDEX BEN NO-LOCK.
         GET FIRST sq NO-LOCK.
         DO WHILE AVAILABLE(MTRL):
            CREATE mtrltemp.
            BUFFER-COPY MTRL TO mtrltemp.
            ASSIGN 
            mtrltemp.ENHET = LC(mtrltemp.ENHET)
            mtrltemp.MTRLROW = ROWID(MTRL).
            GET NEXT sq NO-LOCK.
         END.
         CLOSE QUERY sq.          
      END.
      FIND FIRST mtrltemp NO-LOCK NO-ERROR.
      IF NOT AVAILABLE mtrltemp THEN DO:
         ASSIGN felmedd =  "Det finns inget på sökbegreppet.".
         RETURN.
      END.
   END.
   ELSE DO:
      IF begvar = FALSE THEN DO:
         OPEN QUERY saq FOR EACH SATS WHERE SATS.BENAMNING MATCHES aosok AND SATS.LEVKOD = vald_lev2
         AND SATS.SATS = TRUE USE-INDEX KOD NO-LOCK.
         GET FIRST saq NO-LOCK.
         DO WHILE AVAILABLE(SATS):
            CREATE satstemp.
            BUFFER-COPY SATS TO satstemp.
            ASSIGN satstemp.SATSROW = ROWID(SATS).
            GET NEXT saq NO-LOCK.
         END.
         CLOSE QUERY saq.
      END.
      ELSE DO:
         OPEN QUERY saq FOR EACH SATS WHERE SATS.BENAMNING BEGINS aosok AND SATS.LEVKOD = vald_lev2
         AND SATS.SATS = TRUE USE-INDEX KOD NO-LOCK.
         GET FIRST saq NO-LOCK.
         DO WHILE AVAILABLE(SATS):
            CREATE satstemp.
            BUFFER-COPY SATS TO satstemp.
            ASSIGN satstemp.SATSROW = ROWID(SATS).
            GET NEXT saq NO-LOCK.
         END.
         CLOSE QUERY saq.
      END.
      FIND FIRST satstemp NO-LOCK NO-ERROR.
      IF NOT AVAILABLE satstemp THEN DO:
         ASSIGN felmedd =  "Det finns inget på sökbegreppet.".
         RETURN.
      END.
   END.
END PROCEDURE.

PROCEDURE kodhmt_UI :
   DEFINE INPUT PARAMETER posok AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER begvar AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER vald_lev AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER felmedd AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR satstemp.
   EMPTY TEMP-TABLE satstemp NO-ERROR. 
   felmedd = "".  
   IF begvar = FALSE THEN DO:
      OPEN QUERY mq FOR EACH SATS WHERE SATS.KOD MATCHES posok AND SATS.LEVKOD = vald_lev
      AND SATS.SATS = TRUE USE-INDEX KOD NO-LOCK.
      GET FIRST mq NO-LOCK.
      DO WHILE AVAILABLE(SATS):
         CREATE satstemp.
         BUFFER-COPY SATS TO satstemp.
         ASSIGN satstemp.SATSROW = ROWID(SATS).
         GET NEXT mq NO-LOCK.
      END.
      CLOSE QUERY mq.
   END.
   ELSE DO:
      OPEN QUERY mq FOR EACH SATS WHERE SATS.KOD BEGINS posok AND SATS.LEVKOD = vald_lev
      AND SATS.SATS = TRUE USE-INDEX KOD NO-LOCK.
      GET FIRST mq NO-LOCK.
      DO WHILE AVAILABLE(SATS):
         CREATE satstemp.
         BUFFER-COPY SATS TO satstemp.
         ASSIGN satstemp.SATSROW = ROWID(SATS).
         GET NEXT mq NO-LOCK.
      END.
      CLOSE QUERY mq.        
   END.
   FIND FIRST satstemp NO-LOCK NO-ERROR.
   IF NOT AVAILABLE satstemp THEN DO:
      ASSIGN felmedd = "Det finns ingen på sökbegreppet.".
      RETURN.
   END.

END PROCEDURE.
PROCEDURE starwars_UI:
   DEFINE OUTPUT PARAMETER begvar AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER felmedd AS CHARACTER NO-UNDO.
   DEFINE INPUT-OUTPUT PARAMETER posok AS CHARACTER NO-UNDO.
   IF INDEX(posok,"*",1) = 0 THEN DO:
      ASSIGN
      posok = "*" + posok + "*"
      begvar = FALSE.
      RETURN.
   END.
   IF SUBSTRING(posok,1,1) = "*" THEN DO:
      IF INDEX(posok,"*",2) = 0 THEN DO:
         ASSIGN
         begvar = FALSE.
         RETURN.
      END.
      ELSE DO:
         felmedd = "Ni kan endast använda en '*' i början eller slutet av en sökning".
         RETURN. 
      END.
   END.  
   IF SUBSTRING(posok,LENGTH(posok),1) = "*" THEN DO:
      IF INDEX(posok,"*",1) = LENGTH(posok) THEN DO:
         ASSIGN
         posok = SUBSTRING(posok,1,LENGTH(posok) - 1)
         begvar = TRUE.
         RETURN.
      END.
      ELSE DO:
         felmedd = "Ni kan endast använda en '*' i början eller slutet av en sökning".
         RETURN.            
      END.
   END.
   ELSE DO:
      ASSIGN
      posok = "*" + posok + "*"
      begvar = FALSE.      
   END.
END PROCEDURE.

PROCEDURE hamtlev_UI :
   DEFINE INPUT PARAMETER valomrade AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valbernr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER vald_lev AS CHARACTER NO-UNDO.   
   FIND FIRST BETFRIA WHERE BETFRIA.FAKTTEXT = valomrade AND
   BETFRIA.BETNR = valbernr NO-LOCK NO-ERROR. 
   IF AVAILABLE BETFRIA THEN vald_lev = BETFRIA.TYP.         
   ELSE vald_lev = "".
END PROCEDURE.

PROCEDURE kollev_UI :
   DEFINE INPUT PARAMETER vlev AS CHARACTER NO-UNDO.   
   DEFINE OUTPUT PARAMETER lnamn AS CHARACTER NO-UNDO.         
   lnamn = "".
   FIND FIRST LEVERANTOR WHERE LEVERANTOR.LEVKOD = vlev NO-LOCK NO-ERROR.
   IF AVAILABLE LEVERANTOR THEN lnamn = LEVERANTOR.LEVNAMN.
END PROCEDURE.



PROCEDURE hmtberkalk_UI :
   DEFINE INPUT PARAMETER valaonr LIKE AONRTAB.AONR NO-UNDO.
   DEFINE INPUT PARAMETER valomrade LIKE AONRTAB.OMRADE NO-UNDO.   
   DEFINE OUTPUT PARAMETER TABLE FOR sumkalk_temp.
   
   EMPTY TEMP-TABLE kalk_temp NO-ERROR.
   EMPTY TEMP-TABLE sumkalk_temp NO-ERROR. 
   
   FIND FIRST BERKALKOPPLA WHERE BERKALKOPPLA.AONR = valaonr AND BERKALKOPPLA.OMRADE = valomrade NO-LOCK NO-ERROR.
   IF AVAILABLE BERKALKOPPLA THEN DO:
      FOR EACH KALKNUM  WHERE KALKNUM.KALKNR = BERKALKOPPLA.KALKNR EXCLUSIVE-LOCK:
         CREATE kalk_temp.
         ASSIGN    
         kalk_temp.ARBKOD = KALKNUM.ARBKOD
         kalk_temp.LOPNR = KALKNUM.LOPNR      
         kalk_temp.BENAMNING = KALKNUM.BENAMNING
         kalk_temp.ENHET = KALKNUM.ENHET      
         kalk_temp.ANTAL = KALKNUM.ANTAL.
      END.   
   END.
   FOR EACH kalk_temp  BREAK BY kalk_temp.ARBKOD BY kalk_temp.LOPNR:      
      ACCUMULATE kalk_temp.ANTAL (TOTAL BY kalk_temp.ARBKOD BY kalk_temp.LOPNR).       
      IF LAST-OF(kalk_temp.LOPNR) THEN DO:            
         CREATE sumkalk_temp.
         ASSIGN              
         sumkalk_temp.ARBKOD = kalk_temp.ARBKOD
         sumkalk_temp.LOPNR = kalk_temp.LOPNR      
         sumkalk_temp.BENAMNING = kalk_temp.BENAMNING
         sumkalk_temp.ENHET = kalk_temp.ENHET.               
         sumkalk_temp.ANTAL = (ACCUM TOTAL BY kalk_temp.LOPNR kalk_temp.ANTAL).                                          
      END.     
   END.
END PROCEDURE.


