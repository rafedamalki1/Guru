/*SKAPANDAPP.P*/
{BERSKAP.I}

DEFINE TEMP-TABLE skap_mtrl
   FIELD KTYPKOD LIKE BERSKAP.KTYPKOD 
   FIELD KOD LIKE BERSKAP.KOD  
   FIELD ENR LIKE BERSKAP.ENR  
   FIELD BENAMNING LIKE BERSKAP.BENAMNING  
   FIELD ENHET LIKE BERSKAP.ENHET  
   FIELD ANTAL LIKE BERSKAP.ANTAL  
   FIELD PRIS LIKE BERSKAP.PRIS 
   FIELD LEVKOD LIKE BERSKAP.LEVKOD
   FIELD MODUL LIKE BERSKAP.MODUL.

PROCEDURE btnok_UI :
   DEFINE INPUT PARAMETER ny AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER typkod AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER spartyp AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER sparkod AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER skap_row AS ROWID NO-UNDO.
   DEFINE INPUT PARAMETER skapkod AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER skapben AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER skapmod AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR skap_mtrl.
   IF ny = FALSE THEN DO:
      OPEN QUERY skapq FOR EACH BERSKAP WHERE BERSKAP.KTYPKOD = spartyp AND
      BERSKAP.KOD = sparkod AND BERSKAP.ENR NE "" USE-INDEX KOD NO-LOCK.
      GET FIRST skapq NO-LOCK.
      DO WHILE AVAILABLE(BERSKAP):
         DO TRANSACTION:
            GET CURRENT skapq EXCLUSIVE-LOCK.
            DELETE BERSKAP.
         END.
         GET NEXT skapq NO-LOCK.
      END.
      CLOSE QUERY skapq. 
      DO TRANSACTION:
         FIND BERSKAP WHERE ROWID(BERSKAP) = skap_row EXCLUSIVE-LOCK.
         ASSIGN
         BERSKAP.KOD = skapkod
         BERSKAP.BENAMNING = skapben
         BERSKAP.MODUL = skapmod. 
      END.
      FOR EACH skap_mtrl:
         DO TRANSACTION:
            CREATE BERSKAP.
            ASSIGN 
            BERSKAP.KTYPKOD = typkod
            BERSKAP.KOD = skapkod
            BERSKAP.ENR = skap_mtrl.ENR 
            BERSKAP.BENAMNING = skap_mtrl.BENAMNING 
            BERSKAP.ENHET = skap_mtrl.ENHET 
            BERSKAP.ANTAL = skap_mtrl.ANTAL 
            BERSKAP.PRIS = skap_mtrl.PRIS 
            BERSKAP.LEVKOD = skap_mtrl.LEVKOD.
         END.
      END.        
   END.  
   ELSE DO:
      DO TRANSACTION:
         CREATE BERSKAP.
         ASSIGN 
         BERSKAP.KTYPKOD = typkod 
         BERSKAP.KOD = skapkod
         BERSKAP.BENAMNING = skapben
         BERSKAP.MODUL = skapmod.
      END.
      FOR EACH skap_mtrl:
         DO TRANSACTION:
            CREATE BERSKAP.
            ASSIGN 
            BERSKAP.KTYPKOD = typkod
            BERSKAP.KOD = skapkod
            BERSKAP.ENR = skap_mtrl.ENR 
            BERSKAP.BENAMNING = skap_mtrl.BENAMNING 
            BERSKAP.ENHET = skap_mtrl.ENHET 
            BERSKAP.ANTAL = skap_mtrl.ANTAL 
            BERSKAP.PRIS = skap_mtrl.PRIS 
            BERSKAP.LEVKOD = skap_mtrl.LEVKOD.
         END.
      END.   
   END.
   RELEASE BERSKAP NO-ERROR.
END PROCEDURE.

PROCEDURE nykod_UI :
   DEFINE INPUT PARAMETER ny AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER skapkod AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER sparkod AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER felmedd AS CHARACTER NO-UNDO.
   felmedd = "".
   IF ny = TRUE THEN DO: 
      FIND FIRST BERSKAP WHERE BERSKAP.KOD = skapkod NO-LOCK NO-ERROR.
      IF AVAILABLE BERSKAP THEN DO:
         ASSIGN felmedd = "Det finns redan ett skåp med denna kod ange en ny.".
         RETURN.
      END.   
   END.
   ELSE DO: 
      IF sparkod NE skapkod THEN DO: 
         FIND FIRST BERSKAP WHERE BERSKAP.KOD = skapkod NO-LOCK NO-ERROR.
         IF AVAILABLE BERSKAP THEN DO:
            ASSIGN felmedd = "Det finns redan ett skåp med denna kod ange en ny.".
            RETURN.
         END.   
      END.   
   END.
   RETURN.
END PROCEDURE.
