/*LEVBYTEAPP.P*/
{STARTFORAPP.I}

DEFINE VARIABLE levkodvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE datvar AS DATE NO-UNDO.
DEFINE VARIABLE lev2 AS CHARACTER NO-UNDO.
{BESTMTRL.I}

DEFINE BUFFER bestbuff FOR best_mtrl.    

PROCEDURE byt1_UI :
   DEFINE INPUT PARAMETER levkodvar2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER datvar2 AS DATE NO-UNDO.
   DEFINE INPUT-OUTPUT PARAMETER TABLE FOR best_mtrl.   
   ASSIGN
   levkodvar = levkodvar2
   datvar = datvar2.
   FIND FIRST best_mtrl NO-ERROR.
   FIND FIRST MTRL WHERE MTRL.LEVKOD = levkodvar AND   
   MTRL.KALKNR = 0 AND MTRL.ENR = SUBSTRING(best_mtrl.ENR,2,11) USE-INDEX LEV NO-LOCK NO-ERROR.
   IF AVAILABLE MTRL THEN DO:
      FIND FIRST bestbuff WHERE bestbuff.ENR = MTRL.ENR AND
      bestbuff.LEVKOD = MTRL.LEVKOD AND bestbuff.DATUM = datvar 
      NO-LOCK NO-ERROR.
      IF NOT AVAILABLE bestbuff THEN DO:
         ASSIGN
         best_mtrl.ENR = MTRL.ENR
         best_mtrl.BENAMNING = MTRL.BENAMNING
         best_mtrl.ENHET = MTRL.ENHET
         best_mtrl.PRIS = MTRL.NPRIS
         best_mtrl.OPRIS = MTRL.NPRIS
         best_mtrl.LEVKOD = MTRL.LEVKOD.
      END.
      ELSE DO:
         bestbuff.ANTAL = bestbuff.ANTAL + best_mtrl.ANTAL.
         DELETE best_mtrl.
      END. 
   END.
   RETURN.
     
END PROCEDURE.

PROCEDURE byt2_UI :
   DEFINE INPUT PARAMETER levkodvar2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER datvar2 AS DATE NO-UNDO.
   DEFINE INPUT-OUTPUT PARAMETER TABLE FOR best_mtrl.   
   ASSIGN
   levkodvar = levkodvar2
   datvar = datvar2.
   FIND FIRST best_mtrl NO-ERROR.
   FIND FIRST MTRL WHERE MTRL.LEVKOD = levkodvar AND   
   MTRL.KALKNR = 0 AND MTRL.ENR = "E" + best_mtrl.ENR USE-INDEX LEV NO-LOCK NO-ERROR.
   IF AVAILABLE MTRL THEN DO:
      FIND FIRST bestbuff WHERE bestbuff.ENR = MTRL.ENR AND
      bestbuff.LEVKOD = MTRL.LEVKOD AND
      bestbuff.DATUM = datvar NO-LOCK NO-ERROR.
      IF NOT AVAILABLE bestbuff THEN DO:
         ASSIGN
         best_mtrl.ENR = MTRL.ENR
         best_mtrl.BENAMNING = MTRL.BENAMNING
         best_mtrl.ENHET = MTRL.ENHET
         best_mtrl.PRIS = MTRL.NPRIS
         best_mtrl.OPRIS = MTRL.NPRIS
         best_mtrl.LEVKOD = MTRL.LEVKOD.
      END. 
      ELSE DO:
         bestbuff.ANTAL = bestbuff.ANTAL + best_mtrl.ANTAL.
         DELETE best_mtrl.
      END.  
      RETURN.
   END.
     
END PROCEDURE.

PROCEDURE byt3_UI :
   DEFINE INPUT PARAMETER levkodvar2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER datvar2 AS DATE NO-UNDO.
   DEFINE INPUT-OUTPUT PARAMETER TABLE FOR best_mtrl.   
   ASSIGN
   levkodvar = levkodvar2
   datvar = datvar2.
   FIND FIRST best_mtrl NO-ERROR.
   FIND FIRST MTRL WHERE MTRL.LEVKOD = levkodvar AND   
   MTRL.KALKNR = 0 AND MTRL.ENR = best_mtrl.ENR USE-INDEX LEV NO-LOCK NO-ERROR.
   IF AVAILABLE MTRL THEN DO:
      FIND FIRST bestbuff WHERE bestbuff.ENR = MTRL.ENR AND
      bestbuff.LEVKOD = MTRL.LEVKOD AND bestbuff.DATUM = datvar 
      NO-LOCK NO-ERROR.
      IF NOT AVAILABLE bestbuff THEN DO:
         ASSIGN
         best_mtrl.ENR = MTRL.ENR
         best_mtrl.BENAMNING = MTRL.BENAMNING
         best_mtrl.ENHET = MTRL.ENHET
         best_mtrl.PRIS = MTRL.NPRIS
         best_mtrl.OPRIS = MTRL.NPRIS
         best_mtrl.LEVKOD = MTRL.LEVKOD.
      END.
      ELSE DO:
         bestbuff.ANTAL = bestbuff.ANTAL + best_mtrl.ANTAL.
         DELETE best_mtrl.
      END.   
      RETURN.
   END.
     
END PROCEDURE.


PROCEDURE kontroll_UI :
   DEFINE INPUT PARAMETER levkodvar2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER leve2 AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER felmedd AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER val AS INTEGER NO-UNDO.
   DEFINE INPUT-OUTPUT PARAMETER TABLE FOR best_mtrl.   
   ASSIGN 
   levkodvar = levkodvar2
   lev2 = leve2
   felmedd = ""
   val = 0.  
   FIND FIRST best_mtrl NO-ERROR.
   FIND FIRST LEVERANTOR WHERE LEVERANTOR.LEVNAMN = lev2 NO-LOCK NO-ERROR.   
   FIND FIRST MTRL WHERE MTRL.LEVKOD = LEVERANTOR.LEVKOD AND   
   MTRL.KALKNR = 0 AND MTRL.ENR = best_mtrl.ENR USE-INDEX LEV NO-LOCK NO-ERROR.
   IF NOT AVAILABLE MTRL THEN DO:     
      IF SUBSTRING(best_mtrl.ENR,1,1) = "E" THEN DO:
         FIND FIRST MTRL WHERE MTRL.LEVKOD = LEVERANTOR.LEVKOD AND   
         MTRL.KALKNR = 0 AND MTRL.ENR = SUBSTRING(best_mtrl.ENR,2,11) USE-INDEX LEV NO-LOCK NO-ERROR.
         IF NOT AVAILABLE MTRL THEN DO:
            ASSIGN 
            felmedd = "Det finns ingen artikel hos " + LEVERANTOR.LEVNAMN + " som matchar " + best_mtrl.ENR + ". Vill Ni göra bytet ändå?"
            val = 1
            best_mtrl.LEVKOD = LEVERANTOR.LEVKOD.
            RETURN.
         END.
         ELSE DO:
            ASSIGN felmedd = "Ni har möjlighet att byta leverantör till " + LEVERANTOR.LEVNAMN + ". Den artikel som då kommer att beställas är " + LC(Guru.Konstanter:genk) + ":"
            + MTRL.ENR + " benämning:" + SUBSTRING(MTRL.BENAMNING,1,20) + " enhet:" +
            MTRL.ENHET + " pris/enhet:" + STRING(MTRL.NPRIS) + ". Är detta korrekt?"            
            val = 2.
            RUN assign_UI.
            RETURN.
         END.            
      END.
      ELSE DO:
         FIND FIRST MTRL WHERE MTRL.LEVKOD = LEVERANTOR.LEVKOD AND   
         MTRL.KALKNR = 0 AND MTRL.ENR = "E" + best_mtrl.ENR USE-INDEX LEV NO-LOCK NO-ERROR.
         IF NOT AVAILABLE MTRL THEN DO:
            ASSIGN felmedd = "Det finns ingen artikel hos " + LEVERANTOR.LEVNAMN + " som matchar " + best_mtrl.ENR + ". Vill Ni göra bytet ändå?"
            val = 3
            best_mtrl.LEVKOD = LEVERANTOR.LEVKOD.
            RETURN.
         END.
         ELSE DO:
            ASSIGN felmedd = "Ni har möjlighet att byta leverantör till " + LEVERANTOR.LEVNAMN + ". Den artikel som då kommer att beställas är " + LC(Guru.Konstanter:genk) + ":"
            + MTRL.ENR + " benämning:" + SUBSTRING(MTRL.BENAMNING,1,20) + " enhet:" +
            MTRL.ENHET + " pris/enhet:" + STRING(MTRL.NPRIS) + ". Är detta korrekt?"            
            val = 4.
            RUN assign_UI.
            RETURN.
         END.
      END.
   END.
   ELSE DO:
      ASSIGN felmedd = "Ni har möjlighet att byta leverantör till " + LEVERANTOR.LEVNAMN + ". Den artikel som då kommer att beställas är " + LC(Guru.Konstanter:genk) + ":"
      + MTRL.ENR + " benämning:" + SUBSTRING(MTRL.BENAMNING,1,20) + " enhet:" +
      MTRL.ENHET + " pris/enhet:" + STRING(MTRL.NPRIS) + ". Är detta korrekt?"      
      val = 5.
      RUN assign_UI.
      RETURN.
   END.

END PROCEDURE.

PROCEDURE btnok_UI :
   DEFINE INPUT PARAMETER leve2 AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER felmedd AS CHARACTER NO-UNDO.
   ASSIGN
   felmedd = ""
   lev2 = leve2.
   
   FIND FIRST FORETAG NO-LOCK NO-ERROR.
   /*ES vill kunna beställa från tex NEXANS som inte har någon katalog inläst*/
   IF FORETAG.FORETAG = "GRAN" OR FORETAG.FORETAG = "ELPA"  THEN.     
   ELSE DO:   
      FIND FIRST LEVERANTOR WHERE LEVERANTOR.LEVNAMN = lev2 NO-LOCK NO-ERROR.   
      FIND FIRST MTRL WHERE MTRL.LEVKOD = LEVERANTOR.LEVKOD AND   
      MTRL.KALKNR = 0 NO-LOCK NO-ERROR.
      IF NOT AVAILABLE MTRL THEN DO:
         ASSIGN felmedd = "Det finns ingen materielkatalog upplagd för " + LEVERANTOR.LEVNAMN.
         RETURN.
      END.
   END.
END PROCEDURE.

PROCEDURE assign_UI :   
   ASSIGN
   best_mtrl.ENR = MTRL.ENR
   best_mtrl.BENAMNING = MTRL.BENAMNING
   best_mtrl.ENHET = MTRL.ENHET
   best_mtrl.PRIS = MTRL.NPRIS
   best_mtrl.OPRIS = MTRL.NPRIS
   best_mtrl.LEVKOD = MTRL.LEVKOD.
END PROCEDURE.
