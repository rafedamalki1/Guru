/*SUMKALK.P*/
&Scoped-define NEW NEW
&Scoped-define SHARED SHARED
{GLOBVAR2DEL1.I}
DEFINE VARIABLE offert AS LOGICAL NO-UNDO.
DEFINE VARIABLE xtypmtrl AS INTEGER NO-UNDO.
DEFINE VARIABLE monpris LIKE EBRPRIS.MONT NO-UNDO.
DEFINE VARIABLE berpris AS DECIMAL NO-UNDO.
DEFINE VARIABLE region AS LOGICAL NO-UNDO.
DEFINE VARIABLE emask3 AS DECIMAL NO-UNDO.
DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.
{EXTRATAB.I}
{KALKTEMP.I}
{EXTRADATA.I}
 {KALKKAT20G.I}
/*Anders Olsson Elpool i Umeå AB  19 jan 2018 16:14:10*/
/*BEREDNING*/
{LISTDEF.I} 
DEFINE NEW SHARED TEMP-TABLE mtrl_temp2   
   {MTRLTEMP2TT.I}
/*SLUT BEREDNING*/

DEFINE INPUT PARAMETER fastrec AS RECID NO-UNDO.
DEFINE INPUT PARAMETER cglobforetag LIKE FORETAG.FORETAG NO-UNDO.
globforetag = cglobforetag.
RUN STYRFORE.P (INPUT globforetag).

DEFINE QUERY kalkq FOR FASTKALK.   
      
FIND FASTSPEC WHERE RECID(FASTSPEC) = fastrec NO-LOCK NO-ERROR.          
FIND FIRST KALKAONR WHERE KALKAONR.KALKNR = FASTSPEC.KALKNR
USE-INDEX KALKNR NO-LOCK NO-ERROR.   
/*KALKÅR*/
RUN kalkarstart_UI (INPUT FASTSPEC.KALKNR).
IF globforetag = "ELPA" OR globforetag = "GRAN" OR globforetag = "GKAL" OR globforetag = "LULE" THEN DO:
   FIND FIRST KALKUPP WHERE KALKUPP.KALKNR = FASTSPEC.KALKNR
   USE-INDEX KALKNR NO-LOCK NO-ERROR.
   IF AVAILABLE KALKUPP THEN DO:      
      xtypmtrl = KALKUPP.TYP.
   END.
   ELSE DO:
      IF FASTSPEC.EGETMTRL = TRUE THEN xtypmtrl = 2.
      ELSE xtypmtrl = 1.
   END.
END.
ELSE DO:
   IF FASTSPEC.EGETMTRL = TRUE THEN xtypmtrl = 2.
   ELSE xtypmtrl = 1.
END.
offert = FALSE.       
RUN rakna_UI.         

PROCEDURE natt_UI :  
   DO TRANSACTION:
      FIND FIRST KALKNATT WHERE KALKNATT.DELNR = FASTSPEC.KALKNR
      EXCLUSIVE-LOCK NO-ERROR.
      IF NOT AVAILABLE KALKNATT THEN DO:
         CREATE KALKNATT.
         ASSIGN
         KALKNATT.AONR = ""
         KALKNATT.DELNR = FASTSPEC.KALKNR
         KALKNATT.OMRADE = FASTSPEC.OMRADE
         KALKNATT.KATAR = FASTSPEC.KATAR
         KALKNATT.TYP = FASTSPEC.TYP.
      END.    
      ASSIGN
      KALKNATT.EA = totea  
      KALKNATT.PLANMONT = arbtim - bertim
      KALKNATT.PLANMASK = msktim + totutrtim
      KALKNATT.PLANBERE = bertim
      KALKNATT.MTRLKOST = totmtrl
      KALKNATT.ARBETSKOST = totarb
      KALKNATT.MASKINKOST = totmask + totutr
      KALKNATT.OVRIGKOST = totovr.             
   END.
END PROCEDURE.

PROCEDURE rakna_UI :
   /*GG 2007-10-30 Om blandtyp, hämta katalogår för båda så att monpris laddas rätt vid uträkning*/
   DEFINE VARIABLE artalnum AS INTEGER NO-UNDO.
   DEFINE VARIABLE artalsam AS INTEGER NO-UNDO.
   DEFINE VARIABLE ebrmonpris AS DECIMAL NO-UNDO.
   DEFINE VARIABLE sebrmonpris AS DECIMAL NO-UNDO.
   
  
   FIND FIRST EBRPRIS WHERE EBRPRIS.ARTAL = FASTSPEC.KATAR
   USE-INDEX AR NO-LOCK NO-ERROR. 
   IF NOT AVAILABLE EBRPRIS THEN DO:   
      RETURN.
   END.
   RUN procset_UI.   
   /*RUN EXTRADATAHMT.P PERSISTENT SET edataapph.*/
   /*KALKÅR*/
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "DOKALKYL"                   
   inextradatatemp.HUVUDCH = FASTSPEC.OMRADE
   inextradatatemp.HUVUDINT = FASTSPEC.KALKNR.        
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph NO-ERROR.
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:
      ASSIGN
      artalnum = extradatatemp.SOKINT[1]
      artalsam = extradatatemp.SOKINT[2].
   END.
   ELSE DO:
      ASSIGN
      artalnum = ?
      artalsam = ?.
   END.
   IF artalnum = ? THEN FIND FIRST EBRPRIS WHERE EBRPRIS.ARTAL = FASTSPEC.KATAR USE-INDEX AR NO-LOCK NO-ERROR.
   ELSE FIND FIRST EBRPRIS WHERE EBRPRIS.ARTAL = artalnum USE-INDEX AR NO-LOCK NO-ERROR.
   IF AVAILABLE EBRPRIS THEN ebrmonpris = EBRPRIS.MONT.
   IF artalsam = ? THEN FIND FIRST SEBRPRIS WHERE SEBRPRIS.ARTAL = FASTSPEC.KATAR USE-INDEX AR NO-LOCK NO-ERROR.
   ELSE FIND FIRST SEBRPRIS WHERE SEBRPRIS.ARTAL = artalsam USE-INDEX AR NO-LOCK NO-ERROR.
   IF AVAILABLE SEBRPRIS THEN sebrmonpris = SEBRPRIS.MONT.
   /*Slut blandtyp */

/*    monpris = EBRPRIS.MONT.                                      */
/*    IF AVAILABLE FASTSPEC AND FASTSPEC.TYP = 5 THEN DO:          */
/*       FIND FIRST SEBRPRIS WHERE SEBRPRIS.ARTAL = FASTSPEC.KATAR */
/*       USE-INDEX AR NO-LOCK NO-ERROR.                            */
/*       monpris = SEBRPRIS.MONT.                                  */
/*    END.                                                         */
   EMPTY TEMP-TABLE kalk_temp NO-ERROR.    
   IF FASTSPEC.FAKTOR = TRUE THEN DO:
      FIND FIRST FAKTOR WHERE FAKTOR.KALKNR = FASTSPEC.KALKNR AND
      FAKTOR.OMRADE = FASTSPEC.OMRADE USE-INDEX OMRADE NO-LOCK NO-ERROR.       
   END.
   
   IF FASTSPEC.EGETPRIS = TRUE THEN DO:
      FIND FIRST KALKBEF WHERE KALKBEF.KALKNR = FASTSPEC.KALKNR AND
      KALKBEF.OMRADE = FASTSPEC.OMRADE AND KALKBEF.ARBKOD = "" AND
      KALKBEF.LOPNR = 0 USE-INDEX OMRADE NO-LOCK NO-ERROR.
   END.
   ELSE DO:
      FIND FIRST KALKBEF WHERE KALKBEF.KALKNR = 0 AND 
      KALKBEF.KATAR = FASTSPEC.KATAR
      USE-INDEX ARTAL NO-LOCK NO-ERROR.
   END.
 
   OPEN QUERY kalkq FOR EACH FASTKALK WHERE FASTKALK.KALKNR = FASTSPEC.KALKNR 
   AND FASTKALK.OMRADE = FASTSPEC.OMRADE USE-INDEX OMRADE NO-LOCK.
   GET FIRST kalkq NO-LOCK.
   DO WHILE AVAILABLE(FASTKALK):
      IF FASTKALK.TYP = 5 THEN monpris = sebrmonpris. 
      ELSE monpris = ebrmonpris.
      IF FASTKALK.ARBKOD = "EGEN" THEN DO:
         FIND FIRST befbuff WHERE befbuff.KALKNR = FASTSPEC.KALKNR AND
         befbuff.OMRADE = FASTSPEC.OMRADE AND befbuff.ARBKOD = FASTKALK.ARBKOD AND
         befbuff.LOPNR = FASTKALK.LOPNR USE-INDEX OMRADE NO-LOCK NO-ERROR. 
         RUN skapa2_UI.
      END.
      ELSE IF FASTKALK.ARBKOD = "SUCC" THEN DO:
         fastrec = fastrec.
      END.
      ELSE DO:
         IF FASTKALK.FAST = FALSE THEN RUN skapa_UI.
         ELSE RUN skapa4_UI.
      END.
      GET NEXT kalkq NO-LOCK.
   END.
   CLOSE QUERY kalkq.
   RUN klar_UI.
   RUN natt_UI.
END PROCEDURE.

PROCEDURE raknakalar_UI :
   EMPTY TEMP-TABLE kalk_temp NO-ERROR.    
   IF FASTSPEC.FAKTOR = TRUE THEN DO:
      FIND FIRST FAKTOR WHERE FAKTOR.KALKNR = FASTSPEC.KALKNR AND
      FAKTOR.OMRADE = FASTSPEC.OMRADE USE-INDEX OMRADE NO-LOCK NO-ERROR.       
   END.
   
   IF FASTSPEC.EGETPRIS = TRUE THEN DO:
      FIND FIRST KALKBEF WHERE KALKBEF.KALKNR = FASTSPEC.KALKNR AND
      KALKBEF.OMRADE = FASTSPEC.OMRADE AND KALKBEF.ARBKOD = "" AND
      KALKBEF.LOPNR = 0 USE-INDEX OMRADE NO-LOCK NO-ERROR.
   END.
   ELSE DO:
      FIND FIRST KALKBEF WHERE KALKBEF.KALKNR = 0 AND 
      KALKBEF.KATAR = hjkatvar[1]
      USE-INDEX ARTAL NO-LOCK NO-ERROR.
   END.
 
   OPEN QUERY kalkq FOR EACH FASTKALK WHERE FASTKALK.KALKNR = FASTSPEC.KALKNR 
   AND FASTKALK.OMRADE = FASTSPEC.OMRADE USE-INDEX OMRADE NO-LOCK.
   GET FIRST kalkq NO-LOCK.
   DO WHILE AVAILABLE(FASTKALK):
      IF FASTKALK.ARBKOD = "EGEN" THEN DO:
         FIND FIRST befbuff WHERE befbuff.KALKNR = FASTSPEC.KALKNR AND
         befbuff.OMRADE = FASTSPEC.OMRADE AND befbuff.ARBKOD = FASTKALK.ARBKOD AND
         befbuff.LOPNR = FASTKALK.LOPNR USE-INDEX OMRADE NO-LOCK NO-ERROR. 
         RUN skapa2artal_UI.
      END.
      ELSE DO:
         IF FASTKALK.FAST = FALSE THEN RUN skapaartal_UI.
         ELSE RUN skapa4artal_UI.
      END.
      GET NEXT kalkq NO-LOCK.
   END.
   CLOSE QUERY kalkq.
   RUN klar_UI.
   RUN natt_UI.
END PROCEDURE.

PROCEDURE skapa2_UI :
       
END PROCEDURE.

PROCEDURE skapa3_UI :
       
END PROCEDURE.

PROCEDURE skapa4_UI :
      
END PROCEDURE.

PROCEDURE skapa_UI :
       
END PROCEDURE.

PROCEDURE skapa2artal_UI : 
                               
END PROCEDURE.

PROCEDURE  skapa4artal_UI:
    
END PROCEDURE.

PROCEDURE skapaartal_UI :
    
END PROCEDURE.



PROCEDURE klar_UI : 
   {KLAR.I}   
   kontroll = FALSE.
   IF xtypmtrl = 2 THEN DO:   
      IF FASTSPEC.EGETMTRL = TRUE THEN DO:
         {MTRLKAL.I}               
      END.      
   END.
   IF xtypmtrl = 3 THEN DO:
      {BERKALKSTART1.I}
      {BERKALK2.I}
   END.
   {BERKALKSTART2.I}
   {BERKALK2.I}
   {BERKALKSLUT.I}
END PROCEDURE.
PROCEDURE procset_UI:  
  IF NOT VALID-HANDLE(edataapph) THEN RUN EXTRADATAHMT.P PERSISTENT SET edataapph.            
END PROCEDURE .
