{\rtf1\ansi \deff9\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn{\*\falt Times New Roman};}{\f1\froman\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset0\fprq2 Helv;}{\f3\fmodern\fcharset0\fprq1 Courier;}{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f6\froman\fcharset0\fprq2 MS Serif;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f8\froman\fcharset0\fprq2 Times;}{\f9\fswiss\fcharset0\fprq2 Helvetica;}{\f10\fswiss\fcharset0\fprq2 System;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f12\froman\fcharset0\fprq2 New York;}{\f13\fswiss\fcharset0\fprq2 Geneva;}{\f14\fmodern\fcharset0\fprq1 LinePrinter;}{\f15\froman\fcharset0\fprq2 CG Times;}{\f16\fswiss\fcharset0\fprq2 Univers;}{\f17\fswiss\fcharset0\fprq2 Univers Condensed;}{\f18\fswiss\fcharset0\fprq2 Antique Olive;}{\f19\froman\fcharset0\fprq2 Garamond;}{\f20\fswiss\fcharset0\fprq2 CG Omega;}{\f21\fswiss\fcharset0\fprq2 Albertus Medium;}{\f22\fswiss\fcharset0\fprq2 Albertus Extra Bold;}{\f23\froman\fcharset0\fprq2 Clarendon Condensed;}{\f24\fscript\fcharset0\fprq2 Coronet;}{\f25\fmodern\fcharset0\fprq1 Letter Gothic;}{\f26\fscript\fcharset0\fprq2 Marigold;}{\f27\fnil\fcharset2\fprq2 Wingdings;}{\f28\fmodern\fcharset0\fprq1 Lucida Console;}{\f29\froman\fcharset2\fprq2 MT Extra;}{\f30\fswiss\fcharset0\fprq2 Arial Narrow;}{\f31\fswiss\fcharset0\fprq2 Arial Black;}{\f32\fswiss\fcharset0\fprq2 Arial Rounded MT Bold;}{\f33\froman\fcharset0\fprq2 Book Antiqua;}{\f34\froman\fcharset0\fprq2 Bookman Old Style;}{\f35\fswiss\fcharset0\fprq2 Century Gothic;}{\f36\froman\fcharset0\fprq2 Century Schoolbook;}{\f37\fnil\fcharset2\fprq2 Monotype Sorts;}{\f38\froman\fcharset0\fprq2 Map Symbols;}{\f39\fswiss\fcharset0\fprq2 Haettenschweiler;}{\f40\fdecor\fcharset0\fprq2 Algerian;}{\f41\fdecor\fcharset0\fprq2 Braggadocio;}{\f42\fswiss\fcharset0\fprq2 Britannic Bold;}{\f43\fscript\fcharset0\fprq2 Brush Script MT;}{\f44\fdecor\fcharset0\fprq2 Colonna MT;}{\f45\fdecor\fcharset0\fprq2 Desdemona;}{\f46\froman\fcharset0\fprq2 Footlight MT Light;}{\f47\fswiss\fcharset0\fprq2 Impact;}{\f48\fdecor\fcharset0\fprq2 Kino MT;}{\f49\froman\fcharset0\fprq2 Wide Latin;}{\f50\fscript\fcharset0\fprq2 Matura MT Script Capitals;}{\f51\fdecor\fcharset0\fprq2 Playbill;}{\f52\fmodern\fcharset2\fprq1 MS LineDraw;}{\f53\fscript\fcharset0\fprq2 Monotype Corsiva;}{\f54\froman\fcharset255\fprq2 Roman;}{\f55\fscript\fcharset255\fprq2 Script;}{\f56\fmodern\fcharset255\fprq2 Modern;}{\f57\fswiss\fcharset0\fprq1 MS Dialog;}{\f58\fnil\fcharset0\fprq0 ZapfDingbats{\*\falt Monotype Sorts};}{\f59\fnil\fcharset0\fprq0 LucidaSansTypew;}{\f60\froman\fcharset0\fprq2 CG Times (W1){\*\falt Times New Roman};}{\f61\froman\fcharset0\fprq2 CG Times (WN);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\sb60\widctlpar \f9\fs16 \snext0 Normal;}{\s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \sbasedon0\snext0 heading 1;}{\s2\sb120\sa60\widctlpar \b\f9\fs16 \sbasedon0\snext0 heading 2;}{\s3\sb240\sa60\keepn\widctlpar \b\f9 \sbasedon0\snext0 heading 3;}{\s4\li360\sb60\widctlpar \f9\ul \sbasedon0\snext0 heading 4;}{\s5\sb240\sa60\widctlpar \f9\fs22 \sbasedon0\snext0 heading 5;}{\s6\sb240\sa60\widctlpar \i\f9\fs22 \sbasedon0\snext0 heading 6;}{\s7\sb240\sa60\widctlpar \f9\fs16 \sbasedon0\snext0 heading 7;}{\s8\sb240\sa60\widctlpar \i\f9\fs16 \sbasedon0\snext0 heading 8;}{\s9\sb240\sa60\widctlpar \i\f9\fs18 \sbasedon0\snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s15\fi-288\li288\sb60\widctlpar{\*\pn \pnlvl11\pnf1\pnstart1\pnindent288\pnhang{\pntxtb \'a8}}\f9\fs16 \sbasedon0\snext15 Bullet;}{\s16\fi-288\li576\sb60\widctlpar{\*\pn \pnlvl11\pnf1\pnstart1\pnindent288\pnhang{\
\par \trowd \trgaph108\trleft-108 \cellx1332\cellx7092 \pard\plain \sb60\sa200\widctlpar\intbl \f9\fs16 \{bml EXAMPLE.BMP\}\cell \pard \sb60\sa40\widctlpar\intbl {\uldb\cf11 Procedure Editor How To . . .}{\v\cf2 How_To}{\cf2 
{\v0\par\v}}Step-by-step instructions on how to use the Procedure Editor{\cf2 \cell }\pard \widctlpar\intbl {\cf2 \row }\trowd \trgaph108\trleft-108 \cellx1332\cellx7092 \pard \sb60\sa200\widctlpar\intbl \{bml refernce.BMP\}\cell \pard \sb60\sa40\widctlpar\intbl {\uldb\cf11 Procedure Editor Interface Reference}{\v Procedure_Editor_Interface_Reference} .
\par Descriptions of Procedure Editor windows, menus and menu options.\cell \pard \widctlpar\intbl \row \trowd \trgaph108\trleft-108 \cellx1332\cellx7092 \pard \sb60\sa200\widctlpar\intbl \{bml PROGRAM.BMP\}\cell \pard \sb60\sa40\widctlpar\intbl\tx0 {\uldb\cf11 PROGRESS 4GL}{\v\cf2 langref@lgrfeng.hlp}{\cf2 
{\v0\par\v}}\pard \sb60\sa40\widctlpar\intbl Entries for each language element supported in the \line PROGRESS 4GL.\cell \pard \widctlpar\intbl \row \pard \sb60\widctlpar {\ul\cf11 Copyright Information}{\v POP_disclaimer
{\v0\par\v}}\pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} How_To} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} How To . . .} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} How To procedures; using the Procedure Editor; } \{bml EDIT.BMP\}How To . . .
\par \pard\plain \sb60\widctlpar \f9\fs16 {\uldb\cf11 Using the pop\endash up menu}{\v Using_the_Pop_up_Menu} 
\par {\uldb\cf11 Using edit buffers}{\v Using_Edit_Buffers} 
\par {\uldb\cf11 Using multiple procedure windows}{\v Using_Multiple_Procedure_Windows} 
\par {\uldb\cf11 Working with procedures}{\v Working_with_Procedures} 
\par {\uldb\cf11 Editing text}{\v Editing_Text} 
\par {\uldb\cf11 Compiling, running, checking, and debugging procedures}{\v Compiling_Running_Checking_and_Debugging_Procedures} 
\par {\uldb\cf11 Specifying Procedure Editor settings}{\v Specifying_Procedure_Editor_Settings} 
\par {\uldb\cf11 Exiting the Procedure Editor}{\v Exiting_the_Procedure_Editor} 
\par {\uldb\cf11 Using Source code management (SCM) Tools (Overview)}{\v SCM_Tools_Overview} 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Using_the_Pop_up_Menu} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Using the Pop-up Menu} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Using the Pop-up Menu; Pop-up menu, accessing;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Using the Pop-up Menu
\par \pard\plain \sb60\widctlpar \f9\fs16 A pop\endash up menu is available in the Procedure Editor and also in a Procedure Window. It contains common editor commands such as run, check syntax, insert, cut/copy/paste, and 4GL keyword help.
\par To access the popup menu, position the mouse cursor in the procedure area and press the mouse menu button.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Using_Edit_Buffers} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Using Edit Buffers (Overview)} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Using Edit Buffers (overview);} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Using Edit Buffers (Overview)
\par \pard\plain \sb60\widctlpar \f9\fs16 The Procedure Editor creates an {\ul\cf11 edit buffer}{\v POP_edit_buffer} for each procedure you are working on, allowing you to open and edit multiple procedures in a single session.
\par The buffer displayed in the Procedure Editor\rquote s procedure area is called the {\ul\cf11 current buffer}{\v POP_current_buffers} . When you enter text into the procedure area of the Procedure Editor, you enter it into the current buffer. When you start the Procedure Editor, the current buffer is empty and untitled unless you access the Procedure Editor using File{\f58 >}Open{\f58 >}Procedure from the ADE Desktop. 
\par Although you can open multiple buffers in the Procedure Editor, you can open only one buffer for each operating system file. 
\par {\uldb\cf11 Listing Open Buffers}{\v Listing_Open_Buffers} \line {\uldb\cf11 Switching Buffers}{\v Switching_Buffers} \line {\uldb\cf11 Displaying Buffer Information}{\v Displaying_Buffer_Information} 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Listing_Open_Buffers} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Listing Open Buffers} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Listing Open Buffers} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Listing Open Buffers
\par \pard\plain \sb60\widctlpar \f9\fs16 The Procedure Editor creates {\ul\cf11 buffers}{\v POP_buffers} when you use the New option or the Open option from the File menu. 
\par To view a list of the open buffers for your current session, choose List from the Buffer menu.
\par  PROGRESS lists the open buffers in the {\uldb\cf11 Buffer List dialog box}{\v Buffer_List_Dialog_Box} in the order that you opened them.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Switching_Buffers} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Switching Buffers} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Switching Buffers} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Switching Buffers
\par \pard\plain \sb60\widctlpar \f9\fs16 To switch to another open {\ul\cf11 buffer}{\v POP_buffers} , choose Buffer{\f58 >}Next Buffer or choose Buffer{\f58 >}Previous Buffer. The Procedure Editor makes the selected buffer in the buffer list the current buffer.
\par You can also select a buffer from the {\uldb\cf11 Buffer List dialog box}{\v Buffer_List_Dialog_Box} and choose OK. The Procedure Editor displays the buffer you selected as the {\ul\cf11 current buffer}{\v POP_current_buffers} .
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Displaying_Buffer_Information} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Displaying Buffer Information} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Displaying Buffer Information} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Displaying Buffer Information
\par \pard\plain \sb60\widctlpar \f9\fs16 To display information about the {\ul\cf11 current buffer}{\v POP_current_buffers} , choose Buffer{\f58 >}Information. 
\par PROGRESS displays the {\uldb\cf11 Buffer Information dialog box}{\v Buffer_Settings_Dialog_Box}, which contains the filename; read and write access for the file; the buffer name; the number of lines, columns, and bytes; and the modified status of the buffer.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Using_Multiple_Procedure_Windows} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Using Multiple Procedure Windows (Overview)} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Using Multiple Procedure Windows (overview);} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Using Multiple Procedure Windows (Overview)
\par \pard\plain \sb60\widctlpar \f9\fs16 The Procedure Editor allows you to open multiple {\ul\cf11 Procedure Windows}{\v POP_procedure_window} to write, view, run, and edit procedure files. Choose File{\f58 >}New Procedure Window to open a new window called \ldblquote Untitled\rdblquote  followed by a unique number. You can also open, view, and edit an existing procedure file using the Procedure Window\rquote s File{\f58 >}Open option. 
\par You can open multiple Procedure Windows to view and edit any number of procedure files, and you can{\uldb\cf11  cut, copy, and paste code}{\v Cutting_Copying_and_Pasting_Text} between them and the Procedure Editor\rquote s {\ul\cf11 buffers}{\v POP_buffers} . However, you can open and edit only one procedure file at a time within a Procedure Window. You can also check the syntax of your procedure code and run it.
\par A procedure file you open in a Procedure Window is not added to the Procedure Editor\rquote s buffer list, so you can open the same procedure in multiple Procedure Windows, even if the file is already open in an edit buffer. 
\par Be careful not to overwrite your changes if the same procedure file is open in more than one Procedure Window.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Working_with_Procedures} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Working with Procedures} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Working with Procedures} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Working with Procedures
\par \pard\plain \sb60\widctlpar \f9\fs16 {\uldb\cf11 Creating a new procedure}{\v Creating_a_New_Procedure} 
\par {\uldb\cf11 Opening a procedure}{\v Opening_a_Procedure} 
\par {\uldb\cf11 Saving a procedure}{\v Saving_a_Procedure} 
\par {\uldb\cf11 Printing a procedure}{\v Printing_a_Procedure} 
\par {\uldb\cf11 Closing a procedure}{\v Closing_a_Procedure} 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Creating_a_New_Procedure} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Creating a New Procedure} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Creating a New Procedure} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Creating a New Procedure
\par \pard\plain \sb60\widctlpar \f9\fs16 To create a new procedure, choose File{\f58 >}New. 
\par PROGRESS creates a new, untitled {\ul\cf11 buffer}{\v POP_buffers} in the Procedure Editor and makes the new buffer the {\ul\cf11 current buffer}{\v POP_current_buffers} . The Procedure Editor adds the buffer to the buffer list, labels it \ldblquote Untitled,\rdblquote  and gives it a number. To use this new buffer to write a PROGRESS procedure, enter code and choose the Save As option to name and store the procedure.
\par You can also use Procedure Windows to create text files. Choose File{\f58 >}New Procedure Window to open a new, untitled Procedure Window.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Opening_a_Procedure} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Opening a Procedure} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Opening a Procedure} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Opening a Procedure
\par \pard\plain \sb60\widctlpar \f9\fs16 To open an existing procedure:
\par {\pard\plain\b\f9\fs16 1.\fi-187\li288\tx288 \tab}\pard\plain \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 \f9\fs16 Choose File{\f58 >}Open. 
\par {\pard\plain\b\f9\fs16 2.\fi-288\li288\tx288 \tab}Select the filename from the Open dialog box, then choose OK. 
\par \pard\plain \sb60\widctlpar \f9\fs16 The Procedure Editor creates a new {\ul\cf11 buffer}{\v POP_buffers} , reads the file into it, makes it the {\ul\cf11 current buffer}{\v POP_current_buffers} , and labels it with the name of the file. You can open multiple buffers in the Procedure Editor, but you cannot open more than one buffer at a time for the same operating system file. You can access other buffers from the {\uldb\cf11 Buffer menu}{\v Buffer_Menu} .
\par {\pard\plain\b\f9\fs16\cf2 Note:\fi-288\li288\tx288 \tab}\pard\plain \s24\fi-576\li576\sb60\widctlpar{}\tx576 \f9\fs16 The maximum file size that you can open in the Procedure Editor depends on your system resources.
\par \pard\plain \sb60\widctlpar \f9\fs16 {\b To open a file in a procedure window}, choose File{\f58 >}Open from the Procedure Window. The Procedure Editor does not add the file you open in a Procedure Window to the buffer list. This allows you to open multiple procedure windows for the same file or for different files.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Saving_a_Procedure} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Saving a Procedure} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Saving a Procedure} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Saving a Procedure
\par \pard\plain \sb60\widctlpar \f9\fs16 {\uldb\cf11 Saving a procedure to a new file}{\v Saving_a_Procedure_to_a_New_File} 
\par {\uldb\cf11 Saving a procedure to the current file}{\v Saving_a_Procedure_to_the_Current_File} 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Saving_a_Procedure_to_a_New_File} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Saving a Procedure to a New File} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Saving a Procedure to a New File} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Saving a Procedure to a New File
\par \pard\plain \sb60\widctlpar \f9\fs16 To save a new, untitled procedure or an existing procedure to a new file: 
\par {\pard\plain\b\f9\fs16 1.\fi-576\li576\tx576 \tab}\pard\plain \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 \f9\fs16 Choose File{\f58 >}Save As. PROGRESS displays the Save As dialog box.
\par {\pard\plain\b\f9\fs16 2.\fi-288\li288\tx288 \tab}Specify the procedure filename, then choose OK.
\par {\pard\plain\b\f9\fs16 3.\fi-288\li288\tx288 \tab}When you enter a filename, add the .p or .i extension to the procedure file. Procedures are stored as operating system files. UNIX filenames are case sensitive; DOS and VMS filenames are not. Unless you specify a path when you name the file, PROGRESS saves the file in your current working directory.
\par \pard\plain \sb60\widctlpar \f9\fs16 PROGRESS saves the procedure to the specified filename and keeps the {\ul\cf11 buffer}{\v POP_buffers} or Procedure Window open so you can continue working in it. The buffer name changes to the specified filename. When you save to an existing file, you overwrite the previous contents of the file. 
\par {\pard\plain\b\f9\fs16\cf2 Note:\fi-288\li288\tx288 \tab}\pard\plain \s24\fi-576\li576\sb60\widctlpar{}\tx576 \f9\fs16 Do not name a procedure _edit.p, because that is the name of the Procedure Editor. If you do, and the procedure falls before DLC in your PROPATH, PROGRESS accesses the incorrect file when you try to run the Procedure Editor.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Saving_a_Procedure_to_the_Current_File} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Saving a Procedure to the Current File} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Saving a Procedure to the Current File} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Saving a Procedure to the Current File
\par \pard\plain \sb60\widctlpar \f9\fs16 When you are in a named {\ul\cf11 buffer}{\v POP_buffers} and you choose File{\f58 >}Save, PROGRESS automatically saves the procedure to the current file and keeps the buffer open so you can continue working in it. 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Saving_a_Procedure_to_a_Network_Drive} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Saving a Procedure to a Network Drive} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Saving a Procedure to a Network Drive} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Saving a Procedure to a Network Drive
\par \pard\plain \sb60\widctlpar \f9\fs16 When you select the Network button, PROGRESS displays a dialog box from your network operating system software that allows you to specify a network connection. For example, in NetWare, the NetWare Drive Connections dialog box is displayed. 
\par See your network operating system documentation for more information on specifying drive connections.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Printing_a_Procedure} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Printing a Procedure} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Printing a Procedure} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Printing a Procedure
\par \pard\plain \sb60\widctlpar \f9\fs16 To print the contents of the {\ul\cf11 current buffer}{\v POP_current_buffers} , choose File{\f58 >}Print. 
\par PROGRESS displays the Print dialog box. You can specify the printer to use, the number of copies to print, the print quality, and other print options. Choose OK to print the current buffer.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Closing_a_Procedure} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Closing a Procedure} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Closing a Procedure} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Closing a Procedure
\par \pard\plain \sb60\widctlpar \f9\fs16 To close a procedure, choose File{\f58 >}Close. 
\par The Procedure Editor closes the {\ul\cf11 current buffer}{\v POP_current_buffers} . If you made changes to the current buffer, PROGRESS prompts you to save the changes before it deletes the buffer. If the buffer is untitled and you choose to save it, PROGRESS displays the Save As dialog box. Specify the filename and choose OK to save the procedure.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Editing_Text} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Editing Text} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Editing Text} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Editing Text
\par \pard\plain \sb60\widctlpar \f9\fs16 {\uldb\cf11 Entering text}{\v Entering_Text} 
\par {\uldb\cf11 Selecting text}{\v Selecting_Text} 
\par {\uldb\cf11 Cutting, copying, and pasting text}{\v Cutting_Copying_and_Pasting_Text} 
\par {\uldb\cf11 Inserting the contents of a file into a procedure}{\v Inserting_a_File_into_a_Procedure} 
\par {\uldb\cf11 Inserting a field name into a procedure}{\v Inserting_a_Field_Name_into_a_Procedure} 
\par {\uldb\cf11 Searching for text}{\v Searching_for_Text} 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Entering_Text} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Entering Text} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Entering Text} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Entering Text (Overview)
\par \pard\plain \sb60\widctlpar \f9\fs16 Enter text into the Procedure Editor by typing as you would in any other editor. Text you enter into the {\ul\cf11 current buffer}{\v POP_current_buffers} appears at the location of the {\ul\cf11 cursor}{\v POP_cursor} . Although you can move the mouse pointer around the screen to perform various actions, the cursor always stays in the procedure area to indicate your location in the buffer.
\par To enter text in the current buffer, click the left mouse button in the procedure area and type the text.
\par Use the mouse pointer or the keyboard arrow keys to relocate the insertion point. 
\par You can also choose Search{\f58 >}Goto Line to move the insertion point to a specific line number within the current buffer. 
\par Press {\b delete} or {\b backspace} to erase text. 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Entering_Special_Characters} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Entering Special Characters} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Entering Special Characters; special characters, entering; characters, special;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Entering Special Characters
\par \pard\plain \sb60\widctlpar \f9\fs16 You cannot type some characters directly into the edit buffer. To represent ASCII control characters or other character codes that the keyboard cannot generate directly (for example, 8-bit codes), type the three\endash digit octal code of the character, preceded by a tilde (~). 
\par For more information about the PROGRESS character set, see the {\i PROGRESS Programming Handbook}. For information about Asian character sets, see the {\i PROGRESS Internationalization }manual.
\par When you write procedures in the Procedure Editor, you can use uppercase, lowercase, or mixed case. For example, the PROGRESS Compiler recognizes that TABLE, table, and Table are the same word.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Entering_Long_Text_Lines} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Entering Long Text Lines} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Entering Long Text Lines} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Entering Long Text Lines
\par \pard\plain \sb60\widctlpar \f9\fs16 You can create and edit text lines longer than 80 characters using the scroll bars and tilde (~).
\par You can use a tilde (~) as the last non\endash blank character on a line to indicate that the line is continued to the next line in the window, as shown in the following example.
\par \pard \sb60\sl-115\slmult0\widctlpar {\f0\fs24 
\par }\pard\plain \s17\sb60\widctlpar \f11\fs16 DISPLAY \ldblquote This is a long message ~\line continued on the next line\rdblquote .
\par \pard\plain \sb60\widctlpar \f9\fs16 {\f0\fs24 
\par }The PROGRESS Compiler interprets the lines in this example as the following single line.
\par \pard \sb60\sl-115\slmult0\widctlpar {\f0\fs24 
\par }\pard\plain \s17\sb60\widctlpar \f11\fs16 DISPLAY \ldblquote This is a long message continued on the next line\rdblquote .
\par \pard\plain \sb60\sl-173\slmult0\widctlpar \f9\fs16 {\f0\fs24 
\par }\pard \sb60\widctlpar The Procedure Editor does not change the physical presentation of the file. When you use a tilde to connect two lines, the Procedure Editor maintains the tilde in the code. The Procedure Editor saves it and displays it, but compiles the file without the tilde. 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Selecting_Text} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Selecting Text} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Selecting Text} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Selecting Text
\par \pard\plain \sb60\widctlpar \f9\fs16 Select text to perform an action or command on that text or to use the selected text in a command. PROGRESS displays selected text in reverse video.
\par You can select text in the following ways:
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 With the mouse:
\par {\pard\plain\f1\fs16 \'a8\fi-576\li576\tx576 \tab}\pard\plain \s15\fi-288\li288\sb60\widctlpar{}\tx288 \f9\fs16 Move the pointer and click the left mouse button to set the insertion point. 
\par {\pard\plain\f1\fs16 \'a8\fi-288\li288\tx288 \tab}Double\endash click on a word to select it. 
\par {\pard\plain\f1\fs16 \'a8\fi-288\li288\tx288 \tab}To select any continuous stream or body of text, move the pointer to the beginning of the text range, hold down the left mouse button, drag the pointer over the text you want to select, and then release the mouse button.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 With the keyboard:
\par \pard\plain \sb60\widctlpar \f9\fs16 Move the cursor to the desired location and press {\b shift} and any of the directional keys to select the text.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Overwriting_Text_Ranges} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Overwriting Text Ranges } K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Overwriting Text Ranges } +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Overwriting Text Ranges 
\par \pard\plain \sb60\widctlpar \f9\fs16 To overwrite a range of text:
\par {\pard\plain\b\f9\fs16 1.\fi-288\li288\tx288 \tab}\pard\plain \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 \f9\fs16 Select the text so that it is highlighted.
\par {\pard\plain\b\f9\fs16 2.\fi-288\li288\tx288 \tab}Type the new text.
\par {\pard\plain\b\f9\fs16\cf2 Note:\fi-288\li288\tx288 \tab}\pard\plain \s24\fi-576\li576\sb60\widctlpar{}\tx576 \f9\fs16 When you use this method to delete text, you cannot restore the deleted text. 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Cutting_Copying_and_Pasting_Text} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Cutting, Copying, and Pasting Text} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Cutting text; Copying text; Pasting text;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Cutting, Copying, and Pasting Text
\par \pard\plain \sb60\widctlpar \f9\fs16 To cut or copy and then paste text in a procedure.
\par {\pard\plain\b\f9\fs16 1.\fi-576\li576\tx576 \tab}\pard\plain \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 \f9\fs16 Select the text to cut or copy.
\par {\pard\plain\b\f9\fs16 2.\fi-288\li288\tx288 \tab}Choose Edit{\f58 >}Cut or choose Edit{\f58 >}Copy. 
\par {\fi-288\li288\tx288 \tab}\pard \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 The Procedure Editor deletes or duplicates the selected text from the file in the{\ul\cf11  current buffer}{\v POP_current_buffers} and places it onto the system clipboard. 
\par {\pard\plain\b\f9\fs16 3.\fi-288\li288\tx288 \tab}\pard \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 Position the {\ul\cf11 cursor}{\v POP_cursor} at the point to insert the text.
\par {\pard\plain\b\f9\fs16 4.\fi-288\li288\tx288 \tab}Choose Edit{\f58 >}Paste to retrieve the cut or copied text from the clipboard and insert it into the current buffer.
\par \pard\plain \sb60\widctlpar \f9\fs16 The Procedure Editor inserts the contents of the clipboard at the insertion point and repositions the cursor after the pasted text. If text is selected, the Paste option replaces it with the contents of the system clipboard.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Inserting_a_File_into_a_Procedure} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Inserting a File into a Procedure} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Inserting a File into a Procedure} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Inserting the Contents of a File into a Procedure
\par \pard\plain \sb60\widctlpar \f9\fs16 To insert the entire contents of a file into the text in the {\ul\cf11 current buffer}{\v POP_current_buffers} .
\par {\pard\plain\b\f9\fs16 1.\fi-288\li288\tx288 \tab}\pard\plain \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 \f9\fs16 Place the {\ul\cf11 cursor}{\v POP_cursor} at the point where you want to insert the file.
\par {\pard\plain\b\f9\fs16 2.\fi-288\li288\tx288 \tab}Choose Edit{\f58 >}Insert File from the main menu. PROGRESS displays the Insert File dialog box.
\par {\pard\plain\b\f9\fs16 3.\fi-288\li288\tx288 \tab}Choose the file you want to insert, then choose OK. 
\par \pard\plain \sb60\widctlpar \f9\fs16 The Procedure Editor inserts the file contents into the current buffer at the cursor position.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Inserting_a_Field_Name_into_a_Procedure} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Inserting a Field Name into a Procedure} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Inserting a Field Name into a Procedure} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Inserting a Field Name into a Procedure
\par \pard\plain \sb60\widctlpar \f9\fs16 Follow these steps to insert a field name into a procedure in the {\ul\cf11 current buffer}{\v POP_current_buffers} .
\par {\pard\plain\b\f9\fs16 1.\fi-288\li288\tx288 \tab}\pard\plain \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 \f9\fs16 Place the cursor at the point where you want to insert the field name.
\par {\pard\plain\b\f9\fs16 2.\fi-288\li288\tx288 \tab}Choose Edit{\f58 >}Insert Fields from the main menu. If you are connected to a database, PROGRESS displays the Field Selector dialog box.
\par {\fi-288\li288\tx288 \tab}\pard \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 If you are not already connected to a database, PROGRESS displays an alert box. If you choose OK, PROGRESS displays the Database Connect dialog box. After you connect to a database, PROGRESS displays the Field Selector dialog box.
\par {\pard\plain\b\f9\fs16 3.\fi-288\li288\tx288 \tab}\pard \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 Choose the field or fields you want to insert.
\par {\pard\plain\b\f9\fs16 4.\fi-288\li288\tx288 \tab}Specify prefixes to include with the field names.
\par {\pard\plain\b\f9\fs16 5.\fi-288\li288\tx288 \tab}Choose OK. The Procedure Editor inserts the field names into the current buffer at the cursor position. 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Searching_for_Text} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Searching for Text} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K searching for text} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Searching for Text
\par \pard\plain \sb60\widctlpar \f9\fs16 You can search for text in the current buffer using the following menu options:
\par {\uldb\cf11 Search>Find}{\v Using_Search_Find} 
\par {\uldb\cf11 Search>Find Next}{\v Using_Search_Find_Next_or_Search_Find_Previous} 
\par {\uldb\cf11 Search>Find Previous}{\v Using_Search_Find_Next_or_Search_Find_Previous} 
\par {\uldb\cf11 Search>Replace}{\v Using_Search_Replace} 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Using_Search_Find} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Using Search>Find} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Finding text; searching for text; text, finding;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Using Search>Find
\par \pard\plain \sb60\widctlpar \f9\fs16 Follow these steps to search for text in the current buffer using the Search{\f58 >}Find option. 
\par {\pard\plain\b\f9\fs16 1.\fi-288\li288\tx288 \tab}\pard\plain \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 \f9\fs16 Choose Search{\f58 >}Find. 
\par {\fi-288\li288\tx288 \tab}\pard \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 If you select text and then choose Search{\f58 >}Find, the search string defaults to the text you selected. Otherwise, the search string defaults to the text you last used in a search.
\par {\pard\plain\b\f9\fs16 2.\fi-288\li288\tx288 \tab}\pard \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 Enter the string to find. 
\par {\fi-288\li288\tx288 \tab}\pard \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 If you do not select the Match Case option in the Find dialog box, the string you supply can be uppercase, lowercase, or mixed case. Otherwise, enter it exactly as you want to search for it. 
\par {\fi-288\li288\tx288 \tab}You can use wildcard characters in the search string. A question mark (?) indicates that any single character is acceptable in that position; an asterisk (*) indicates that any group of characters is acceptable, including a null group of characters. If you want to specify a question mark or asterisk as a literal character rather than a wildcard character in the find string, use ?? and ** respectively. If you are searching only for a literal question mark, use a single question mark (?).
\par {\pard\plain\b\f9\fs16 3.\fi-288\li288\tx288 \tab}\pard \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 Specify whether the search is case sensitive using the Match Case option.
\par {\pard\plain\b\f9\fs16 4.\fi-288\li288\tx288 \tab}Specify whether to wrap to the beginning or end of the current buffer when the search reaches the opposite end of the buffer.
\par {\pard\plain\b\f9\fs16 5.\fi-288\li288\tx288 \tab}Specify whether to search forward or backward through the current buffer by selecting the up or down options.
\par {\pard\plain\b\f9\fs16 6.\fi-288\li288\tx288 \tab}Choose OK. 
\par \pard\plain \sb60\widctlpar \f9\fs16 The Procedure Editor searches for the first occurrence of the string in the direction you specify. When it finds a match for the search string, it positions the cursor at the search string and highlights the string. Anything you type in the buffer overwrites the occurrence of the string when it is selected. The Editor displays an alert box if it does not find a match. 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Using_Search_Find_Next_or_Search_Find_Previous} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Using Search>Find Next or Search>Find Previous} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Find Next; Find Previous; searching for text;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Using Search>Find Next or Search>Find Previous
\par \pard\plain \sb60\widctlpar \f9\fs16 If you have used the Search{\f58 >}Find option in this session, you can search for text using the Search{\f58 >}Find Next or Search{\f58 >}Find Previous menu options. The Procedure Editor searches for the text you specified in the Find What field of the Find dialog box in the forward direction (Next) or reverse direction (Previous).
\par If you have not previously used the Search{\f58 >}Find option in this session, PROGRESS displays an alert box.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Using_Search_Replace} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Using Search>Replace} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K searching for text; Replacing text; text, replacing;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Using Search>Replace
\par \pard\plain \sb60\widctlpar \f9\fs16 Follow these steps to search for and replace text in the {\ul\cf11 current buffer}{\v POP_current_buffers} . 
\par {\pard\plain\b\f9\fs16 1.\fi-288\li288\tx288 \tab}\pard\plain \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 \f9\fs16 Choose Search{\f58 >}Replace. PROGRESS displays the Replace dialog box.
\par {\fi-288\li288\tx288 \tab}\pard \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 If you select text and then choose Search{\f58 >}Replace, the {\ul\cf11 search string}{\v POP_search_string} defaults to the text you selected. Otherwise, the search string defaults to the text you last used in a search.
\par {\pard\plain\b\f9\fs16 2.\fi-288\li288\tx288 \tab}\pard \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 Enter the string to find.
\par {\fi-288\li288\tx288 \tab}\pard \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 If you do not select the Match Case option in the Find dialog box, the string you supply can be uppercase, lowercase, or mixed case. Otherwise, enter it exactly as you want to search for it. 
\par {\fi-288\li288\tx288 \tab}You can use wildcard characters in the search string. A question mark (?) indicates that any single character is acceptable in that position; an asterisk (*) indicates that any group of characters is acceptable, including a null group of characters. If you want to specify a question mark or asterisk as a literal character rather than a wildcard character in the find string, use ?? and ** respectively. If you are searching only for a literal question mark, use a single question mark (?).
\par {\pard\plain\b\f9\fs16 3.\fi-288\li288\tx288 \tab}\pard \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 Enter the string with which to replace the search string.
\par {\pard\plain\b\f9\fs16 4.\fi-288\li288\tx288 \tab}Specify whether the search is case sensitive using the Match Case option.
\par {\pard\plain\b\f9\fs16 5.\fi-288\li288\tx288 \tab}Choose OK or choose the Replace All button.
\par \pard\plain \sb60\widctlpar \f9\fs16 The Procedure Editor searches in a forward direction for the first occurrence of the string. If you choose OK, the Procedure Editor prompts you to confirm the replacement of each occurrence of the string as it finds them. If you choose the Replace All button, the Editor automatically replaces each occurrence of the string with the text in the Replace With field.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Compiling_Running_Checking_and_Debugging_Procedures} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Compiling, Running, Checking, and Debugging Procedures} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Compiling, Running, Checking, and Debugging Procedures} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Compiling, Running, Checking, and Debugging Procedures
\par \pard\plain \sb60\widctlpar \f9\fs16 The Procedure Editor supports the full edit\endash compile\endash run cycle. This includes:
\par {\uldb\cf11 Compiling and running a procedure}{\v Compiling_and_Running_a_Procedure} 
\par {\uldb\cf11 Checking a procedure\rquote s syntax}{\v Checking_a_Procedure_s_Syntax} 
\par {\uldb\cf11 Debugging a procedure}{\v Debugging_a_Procedure} 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Compiling_and_Running_a_Procedure} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Compiling and Running a Procedure} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Compiling and Running a Procedure} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Compiling and Running a Procedure (Overview)
\par \pard\plain \sb60\widctlpar \f9\fs16 To compile and run a procedure in the {\ul\cf11 current buffer}{\v POP_current_buffers} , choose Compile{\f58 >}Run. 
\par The {\ul\cf11 PROGRESS Compiler}{\v POP_Application_Compiler} compiles the procedure. If the procedure does not compile, PROGRESS displays all applicable messages in the Compiler Messages dialog box. 
\par The messages typically include a brief description of the error, the name of the file, and the  line number containing the error, followed by a PROGRESS message number in parentheses. You can display additional information about the messages using the Help{\f58 >}Messages or Help{\f58 >}Recent Messages options. 
\par If the PROGRESS Compiler detects any errors, the Procedure Editor moves the text {\ul\cf11 cursor}{\v POP_cursor} to the line in the current buffer that contains the first error. If the file containing the error is not in the current buffer but is an include file, the Procedure Editor opens the include file making it the current buffer. The Procedure Editor then positions the cursor on the line in the include file that contains the error. If the include file containing the error is not syntactically complete (it does not contain at least one 4GL statement with a period), the Procedure Editor opens the source file that references the include statement, rather than the include file that contains the error.
\par When you run a procedure and have several open buffers, the PROGRESS Compiler accesses only the code in the current buffer of the Procedure Editor. It does not access files in other buffers but uses the saved versions of the files. If the PROGRESS Compiler detects an error in a file other than the current buffer, you must save any changes you make to the called file so that the PROGRESS Compiler recognizes them when you rerun the initial procedure. If you do not save the changes, the next time you run the initial procedure that calls the file the PROGRESS Compiler runs the saved version of the files and disregards the changes you have made in the open buffer of the Procedure Editor. 
\par PROGRESS displays the output of the procedure in a Run window, separate from the Procedure Editor window. This allows you to view the text of your procedure while running it. When the procedure is complete, press {\b SPACEBAR} to return to the Procedure Editor.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Checking_a_Procedure_s_Syntax} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Checking a Procedure's Syntax} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Checking a Procedure's Syntax} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Checking a Procedure's Syntax
\par \pard\plain \sb60\widctlpar \f9\fs16 To compile a procedure in the {\ul\cf11 current buffer}{\v POP_current_buffers} and check for 4GL syntax errors, choose Compile{\f58 >}Check Syntax. 
\par The Procedure Editor checks the procedure\rquote s syntax and displays the applicable messages in the Compiler Messages dialog box without running the procedure. This is helpful for checking the syntax of procedures that use define parameters and cannot be run directly from the Procedure Editor without generating run\endash time errors.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Debugging_a_Procedure} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Debugging a Procedure} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Debugging a Procedure} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Debugging a Procedure
\par \pard\plain \sb60\widctlpar \f9\fs16 To debug a procedure, choose Compile{\f58 >}Debug. 
\par The Editor checks the procedure\rquote s syntax and accesses the {\ul\cf11 PROGRESS Debugger}{\v POP_Debugger} . See the {\i PROGRESS Debugger} manual for information about using this tool.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Specifying_Procedure_Editor_Settings} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Specifying Procedure Editor Settings} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Specifying Procedure Editor Settings} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Specifying Procedure Editor Settings
\par \pard\plain \sb60\widctlpar \f9\fs16 This section describes how to change the Procedure Editor settings. This includes:
\par {\uldb\cf11 Changing the default settings}{\v Changing_the_Default_Settings} 
\par {\uldb\cf11 Assigning accelerator keys}{\v Assigning_Accelerator_Keys} 
\par {\uldb\cf11 Changing the default font}{\v Changing_the_Default_Font} 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Changing_the_Default_Settings} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Changing the Default Settings} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Changing the Default Settings} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Changing the Default Settings
\par \pard\plain \sb60\widctlpar \f9\fs16 Follow these steps to change the default Procedure Editor settings.
\par {\pard\plain\b\f9\fs16 1.\fi-288\li288\tx288 \tab}\pard\plain \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 \f9\fs16 Choose Options{\f58 >}Preferences. PROGRESS displays the {\uldb\cf11 Preferences dialog box}{\v System_Options_Dialog_Box} .
\par {\pard\plain\b\f9\fs16 2.\fi-288\li288\tx288 \tab}Specify whether the Procedure Editor prompts you to save buffer changes before exiting. 
\par {\pard\plain\b\f9\fs16\cf2 Note:\fi-288\li288\tx288 \tab}\pard\plain \s25\fi-576\li864\sb60\widctlpar{}\tx864 \f9\fs16 If you do not set the Exit Warning to Save Changes box, you will lose changes to open buffers when you exit the Procedure Editor.
\par {\pard\plain\b\f9\fs16 3.\fi-576\li864\tx864 \tab}\pard\plain \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 \f9\fs16 Specify whether the Procedure Editor saves and reopens your buffer list and the files in it the next time you start the Editor. The Procedure Editor does not save untitled buffers or procedures open in Procedure Windows as part of this buffer list. 
\par {\pard\plain\b\f9\fs16 4.\fi-288\li288\tx288 \tab}Specify whether to minimize the Procedure Editor window to an icon before running a procedure. 
\par {\pard\plain\b\f9\fs16 5.\fi-288\li288\tx288 \tab}Specify whether to restore the Procedure Editor window after running a procedure.
\par {\pard\plain\b\f9\fs16 6.\fi-288\li288\tx288 \tab}Specify whether the Procedure Editor pauses after it runs a procedure. When this pause is in effect, you must press {\b spacebar} to continue after the procedure completes.
\par {\pard\plain\b\f9\fs16 7.\fi-288\li288\tx288 \tab}Specify whether to automatically terminate all dynamic widgets created but not deleted by the most recently run procedure.
\par {\pard\plain\b\f9\fs16\cf2 Note:\fi-288\li288\tx288 \tab}\pard\plain \s25\fi-576\li864\sb60\widctlpar{}\tx864 \f9\fs16 The Procedure Editor cannot delete dynamic widgets you create using named persistent widget pools.
\par {\pard\plain\b\f9\fs16 8.\fi-576\li864\tx864 \tab}\pard\plain \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 \f9\fs16 Choose OK to save these settings for the current Procedure Editor session.
\par {\pard\plain\b\f9\fs16 9.\fi-288\li288\tx288 \tab}Choose Options{\f58 >}Save Settings on Exit to save these settings to your PROGRESS environment file {\f5 (progress.ini).}
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Assigning_Accelerator_Keys} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Assigning Accelerator Keys} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Assigning Accelerator Keys} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Assigning Accelerator Keys
\par \pard\plain \sb60\widctlpar \f9\fs16 Follow these steps to assign {\ul\cf11 accelerator keys}{\v POP_menu_accel_keys} to menu options.
\par {\pard\plain\b\f9\fs16 1.\fi-288\li288\tx288 \tab}\pard\plain \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 \f9\fs16 Choose Options{\f58 >}Menu Accelerators. PROGRESS displays the Menu Accelerators dialog box.
\par {\pard\plain\b\f9\fs16 2.\fi-288\li288\tx288 \tab}Choose the menu option for which to assign or modify an accelerator key.
\par {\pard\plain\b\f9\fs16 3.\fi-288\li288\tx288 \tab}Choose the Record button. 
\par {\pard\plain\b\f9\fs16 4.\fi-288\li288\tx288 \tab}Type the new key combination in the Record Menu Accelerators dialog box.
\par {\pard\plain\b\f9\fs16\cf2 Note:\fi-288\li288\tx288 \tab}\pard\plain \s25\fi-576\li864\sb60\widctlpar{}\tx864 \f9\fs16 If you enter the wrong key combination, choose the Record button, then enter the correct combination.
\par {\pard\plain\b\f9\fs16 5.\fi-576\li864\tx864 \tab}\pard\plain \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 \f9\fs16 Choose OK to save the new accelerator assignment and return to the Menu Accelerators dialog box.
\par {\pard\plain\b\f9\fs16 6.\fi-288\li288\tx288 \tab}Choose OK in the Menu Accelerators dialog box to return to the Procedure Editor window.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Changing_the_Default_Font} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Changing the Default Font} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Changing the Default Font} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Changing the Default Font
\par \pard\plain \sb60\widctlpar \f9\fs16 Follow these steps to change the default Procedure Editor font.
\par {\pard\plain\b\f9\fs16 1.\fi-288\li288\tx288 \tab}\pard\plain \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 \f9\fs16 Choose Option{\f58 >}Default Font. 
\par {\pard\plain\b\f9\fs16 2.\fi-288\li288\tx288 \tab}Select the font style.
\par {\pard\plain\b\f9\fs16 3.\fi-288\li288\tx288 \tab}If you want to change the settings for a font, choose the Edit button, then specify settings in the Font Dialog box.
\par {\pard\plain\b\f9\fs16\cf2 Note:\fi-288\li288\tx288 \tab}\pard\plain \s24\fi-576\li900\sb60\widctlpar{}\tx900 \f9\fs16 For fonts 0 through 7, the Edit button is not enabled and you cannot change the settings. These fonts are reserved for PROGRESS.
\par {\pard\plain\b\f9\fs16 4.\fi-576\li900\tx900 \tab}\pard\plain \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 \f9\fs16 Choose OK in the Font Dialog box to save your setting changes.
\par {\pard\plain\b\f9\fs16 5.\fi-288\li288\tx288 \tab}Choose OK in the Procedure Editor Default Font dialog box to return to the Procedure Editor window.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Exiting_the_Procedure_Editor} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Exiting the Procedure Editor} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Exiting the Procedure Editor} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Exiting the Procedure Editor
\par \pard\plain \sb60\widctlpar \f9\fs16 You can exit the Procedure Editor in two ways:
\par {\pard\plain\f1\fs16 \'a8\fi-288\li288\tx288 \tab}\pard\plain \s15\fi-288\li288\sb60\widctlpar{}\tx288 \f9\fs16 Choose File{\f58 >}Exit. 
\par {\pard\plain\f1\fs16 \'a8\fi-288\li288\tx288 \tab}Type {\b quit }in an empty buffer, then choose Compile{\f58 >}Run or press {\b go}.
\par \pard\plain \sb60\widctlpar \f9\fs16 
\par If there are open buffers with unsaved changes, an alert box prompts you to save or discard the buffers before leaving the Procedure Editor. Follow these steps.
\par {\pard\plain\b\f9\fs16 1.\fi-288\li288\tx288 \tab}\pard\plain \s28\fi-288\li288\sb60\sa40\widctlpar{}\tx288 \f9\fs16 Specify whether to save any of the changed buffers. If you choose not to save any of the buffers, you exit the Procedure Editor. If you choose Yes, PROGRESS displays the Save Buffers with Changes dialog box.
\par {\pard\plain\b\f9\fs16 2.\fi-288\li288\tx288 \tab}Select the buffers to save and choose the Save Selected button. If you are saving any untitled buffers, the Save As dialog box appears for each buffer.
\par {\pard\plain\b\f9\fs16 3.\fi-288\li288\tx288 \tab}Specify the filename for each untitled buffer and choose OK. After you specify the filename for the last untitled buffer, PROGRESS closes the Procedure Editor.
\par \pard\plain \sb60\widctlpar \f9\fs16 When PROGRESS closes the Procedure Editor, it returns to where you started the Editor. For example, if you started the Procedure Editor from the operating system command line, PROGRESS returns to the command line. 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # SCM_Tools_Overview} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Source code management (SCM) Tools (Overview)} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Source code management (SCM) Tools (Overview)} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Source Code Management (SCM) Tools (Overview)
\par \pard\plain \sb60\widctlpar \f9\fs16 Source code management (SCM) tools or your own proprietary tools can interface with the Procedure Editor and the Procedure Window. They can intercept and augment tool behavior at the following critical points in the application development process: 
\par {\pard\plain\f1\fs16 \'a8\fi-288\li288\tx288 \tab}\pard\plain \s15\fi-288\li288\sb60\widctlpar{}\tx288 \f9\fs16 Opening files
\par {\pard\plain\f1\fs16 \'a8\fi-288\li288\tx288 \tab}Saving files
\par {\pard\plain\f1\fs16 \'a8\fi-288\li288\tx288 \tab}Closing files
\par {\pard\plain\f1\fs16 \'a8\fi-288\li288\tx288 \tab}Before and after a file is run, debugged, or checked for syntax
\par {\pard\plain\f1\fs16 \'a8\fi-288\li288\tx288 \tab}Startup and shutdown of the Procedure Editor
\par \pard\plain \sb60\widctlpar \f9\fs16 To allow SCM or your own proprietary tools to \ldblquote trap\rdblquote  these ADE events, the Procedure Editor or Procedure Window calls a procedure file\emdash {\uldb\cf11 adecomm/_adeevnt.p}{\v ADE_Event_adecomm_adeevnt.p} \emdash at those critical processing points. You can modify this procedure to intercept and augment standard tool behavior. The source code to this procedure is provided by PROGRESS. If you want to use this procedure, you must copy the source code, modify it, compile it, and place it in your PROPATH.
\par {\pard\plain\b\f9\fs16\cf2 Note:\fi-288\li288\tx288 \tab}\pard\plain \s24\fi-576\li576\sb60\widctlpar{}\tx576 \f9\fs16 For the {\ul\cf11 User Interface Builder (UIB) tool}{\v POP_User_Interface_Builder} , there are two additional procedure files for integration hooks\emdash {\f11 adecomm/_getfile.p}, and {\f11 adecomm/_chosobj.w}. For more information on how to use integration hooks with the UIB, see the {\i PROGRESS UIB Developer\rquote s Guide}.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # ADE_Event_adecomm_adeevnt.p} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ ADE Event (adecomm/_adeevnt.p)} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K ADE Event (adecomm/_adeevnt.p)} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}ADE Event (adecomm/_adeevnt.p)
\par \pard\plain \sb60\widctlpar \f9\fs16 You can modify {\f11 adecomm/_adeevnt.p} to intercept or filter various events that occur in an ADE session. The Procedure Editor or Procedure Window calls {\f11 adecomm/_adeevnt.p} when certain processing events occur. Generally, these events are file\endash oriented\emdash for example, OPEN, SAVE, CLOSE\emdash but they can be more general\emdash for example, STARTUP and SHUTDOWN.
\par The source code for this file is in {\f11 DLC/src/adecomm/_adeevent.p}. Look at this file for the latest information on ADE events.
\par {\uldb\cf11 Input Parameters}{\v Input_Parameters} 
\par {\uldb\cf11 Output Parameter}{\v Output_Parameter} 
\par {\uldb\cf11 File-specific Events}{\v File_Specific_Events} 
\par {\uldb\cf11 Usage}{\v PE_SCM_Usage} 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Input_Parameters} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Input Parameters} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Input Parameters} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Input Parameters
\par \pard\plain \sb60\widctlpar \f9\fs16 The {\f11 adecomm/_adeevnt.p} procedure takes the following input parameters:
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b p_product}\tab The ADE product code (for the Procedure Editor, use \ldblquote Editor\rdblquote  ). 
\par {\uldb\cf11 p_event}{\v File_Specific_Events} \tab The name of an event: NEW, OPEN, BEFORE-OPEN, CLOSE, BEFORE-CLOSE, SAVE,  BEFORE-SAVE, COMPILE, BEFORE-COMPILE, RUN, BEFORE-RUN, DEBUG, BEFORE-DEBUG, CHECK-SYNTAX, BEFORE-CHECK-SYNTAX, CHECK-SYNTAX-PARTIAL, and BEFORE-CHECK-SYNTAX-PARTIAL. 
\par {\b p_context}\tab A unique context ID that can be used to compare the object, or context, of an event. This might be a RECID or handle of the procedure file being closed or opened. 
\par \tab This context ID is unique for a given class of events in a given product, but not necessarily across products or events. For example, in the Procedure Editor, a \ldblquote SAVE\rdblquote  event for a given buffer always has the same context ID, even if the name of the buffer changes. 
\par \tab A string associated with the file being edited. A specific file will have the same context ID for all its file operations. However, if you close a file and then open it again, the context number will change. 
\par {\pard\plain\b\f9\fs16\cf2 Note:\fi-2304\li2304\tx2304 \tab}\pard\plain \s24\fi-576\li2880\sb60\widctlpar{}\tx2880 \f9\fs16 A Procedure Window assigns {\b p_context} as follows:           
\par \pard\plain \li2880\sb60\widctlpar \f9\fs16 {\f11 STRING( Procedure\endash Window\endash window\endash handle)}
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b p_other}\tab Additional information passed about an event (for example, a \ldblquote SAVE\rdblquote  event normally passes the filename for the save). 
\par \tab The current filename associated with the window. The  name will be unknown (?) if it has not been set \emdash for example, after a File{\f58 >}New.
\par {\pard\plain\b\f9\fs16\cf2 Note:\fi-2304\li2304\tx2304 \tab}\pard\plain \s24\fi-576\li2880\sb60\widctlpar{}\tx2880 \f9\fs16 A Procedure Window assigns {\b p_other} as follows:           
\par \pard\plain \li2880\sb60\widctlpar\tx2880 \f9\fs16 {\f11 STRING( Procedure\endash Window\endash Parent\endash ID)}
\par where the parent ID indicates the startup procedure for the ADE tool where the Procedure Window was invoked. For example, if you start a Procedure Window from the UIB, the parent ID is {\f11 _uib.p}. For PRO*Tools, the parent ID is null. 
\par 
\par {\pard\plain\b\f9\fs16\cf2 See Also:\fi-576\li2880\tx2880 \tab}\pard\plain \s27\fi-1008\li1008\sb60\widctlpar{}\tx1008 \f9\fs16 {\uldb\cf11 Procedure Editor SCM Usage }{\v PE_SCM_Usage}{\uldb\cf11  \line Procedure Window SCM Usage}{\v PW_SCM_Usage} 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Output_Parameter} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Output Parameter} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Output Parameter} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Output Parameter
\par \pard\plain \sb60\widctlpar \f9\fs16 The {\f11 adecomm/_adeevnt.p} procedure uses the following output parameter:
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b p_ok}\tab A logical value used to OK or cancel a subset of ADE events. For example, returning a FALSE value from the \ldblquote BEFORE-SAVE\rdblquote  event  cancels the save.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # File_Specific_Events} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ File-Specific Events} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K File-Specific Events} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}File-specific Events
\par \pard\plain \sb60\widctlpar \f9\fs16 The following events (corresponding to {\b p_event}) are related to file operations:
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b NEW}\tab Called after a new window/dialog box is created.
\par {\b OPEN}\tab Called after a file has been opened. 
\par {\b BEFORE-OPEN}\tab Called before a file is to be opened; returning {\b p_ok} as FALSE can cancel the operation.
\par {\b CLOSE}\tab Called after a window or buffer has been closed.
\par {\b BEFORE-CLOSE}\tab Called before a file is to be closed; returning {\b p_ok} as FALSE can cancel the operation.
\par {\b SAVE}\tab Called after a file has been saved.
\par {\b BEFORE-SAVE}\tab Called before a file is to be saved; returning {\b p_ok} as FALSE can cancel the operation.
\par {\b COMPILE}\tab Called after a file has been compiled.
\par {\b BEFORE-COMPILE}\tab Called before a file is to be compiled; returning {\b p_ok} as FALSE can cancel the operation.
\par {\b RUN}\tab Called after RUN of file has ended. 
\par {\b BEFORE-RUN}\tab Called before a file has been written to disk for a run; returning {\b p_ok} as FALSE can cancel the operation.
\par {\b DEBUG}\tab Same as RUN, except that DEBUG has been chosen; returning {\b p_ok} as FALSE can cancel the operation. 
\par {\b BEFORE-DEBUG}\tab Same as BEFORE-RUN, except DEBUG is chosen. 
\par {\b CHECK-SYNTAX}\tab Called after a Check Syntax.          
\par {\b BEFORE-CHECK-SYNTAX}\line Called before a Check Syntax; returning {\b p_ok} as FALSE can cancel the operation.
\par {\b CHECK-SYNTAX-PARTIAL\line }Called after a Partial Check Syntax.         
\par {\b BEFORE-CHECK-SYNTAX-PARTIAL}\line Called before a Partial Check Syntax; returning {\b p_ok} as FALSE can cancel the operation.
\par {\pard\plain\b\f9\fs16\cf2 See Also:\fi-2304\li2304\tx2304 \tab}\pard\plain \s27\fi-1008\li1008\sb60\widctlpar{}\tx1008 \f9\fs16 {\uldb\cf11 Procedure Editor SCM Usage }{\v PE_SCM_Usage} \line {\uldb\cf11  Procedure Window SCM Usage}{\v PW_SCM_Usage} 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # STARTUP_and_SHUTDOWN_Events} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ STARTUP and SHUTDOWN Events} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K STARTUP and SHUTDOWN Events} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}STARTUP and SHUTDOWN Events
\par \pard\plain \sb60\widctlpar \f9\fs16 The following Procedure Editor and Procedure Window events (corresponding to {\b p_event}) occur at Procedure Editor and Procedure Window startup and shutdown.
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b STARTUP}\tab Called when the Procedure Editor (PE) has been loaded and initialized. This call occurs immediately before user input is allowed. In this case:
\par \pard\plain \li2340\sb60\widctlpar \f9\fs16 {\b p_context} = \line STRING( procedure\endash handle\endash of\endash the\endash PE\endash main\endash routine ). 
\par {\b p_other}  = \line STRING( widget\endash handle\endash of\endash the\endash PE-window ).    
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b SHUTDOWN\tab }Called when a user requests that the Procedure Editor shutdown. This call occurs before any settings have been saved or items destroyed. In this case:
\par \pard\plain \li2340\sb60\widctlpar \f9\fs16 {\b p_context} = \line STRING( procedure\endash handle\endash of\endash the\endash PE\endash main\endash routine ). 
\par {\b p_other}  = \line STRING( widget\endash handle\endash of\endash the\endash PE-window ).    
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # PE_SCM_Usage} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Procedure Editor SCM Usage} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K SCM Usage, Procedure Editor;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Procedure Editor SCM Usage 
\par \pard\plain \sb60\widctlpar \f9\fs16 The following comments address Procedure Editor SCM usage issues:
\par {\pard\plain\f1\fs16 \'a8\fi-2304\li2340\tx2340 \tab}\pard\plain \s15\fi-288\li288\sb60\widctlpar{}\tx288 \f9\fs16 BEFORE-CLOSE and CLOSE\emdash technically, {\b p_other} should be unknown (?) after a file closes; however, this parameter still shows the last available file name for the procedure file. Unknown (?) only appears if there is no file name. 
\par {\pard\plain\f1\fs16 \'a8\fi-288\li288\tx288 \tab}BEFORE-RUN, RUN, BEFORE-DEBUG, DEBUG,  BEFORE-CHECK-SYNTAX, CHECK-SYNTAX\emdash all use the last specified file name as {\b p_other}. Technically the actual file being run or checked is a temporary file with a name like {\f11 p01928384.ped}. This name is not used. 
\par {\pard\plain\f1\fs16 \'a8\fi-288\li288\tx288 \tab}If the user tries to close a buffer, then the Procedure Editor first prompts the user to save. The entire save operation events fire before the call to BEFORE-CLOSE. 
\par {\pard\plain\f1\fs16 \'a8\fi-288\li288\tx288 \tab}NEW is called after a buffer is created. You see the buffer before the NEW event is called. All events are called after the event has finished. 
\par {\pard\plain\f1\fs16 \'a8\fi-288\li288\tx288 \tab}When you control the handle for the Procedure Editor window, you can manipulate the display of the window. For example, you can add a menu option.
\par {\pard\plain\b\f9\fs16\cf2 See Also:\fi-288\li288\tx288 \tab}\pard\plain \s27\fi-1008\li1008\sb60\widctlpar{}\tx1008 \f9\fs16 {\uldb\cf11 Procedure Editor Usage Scenario}{\v PE_Usage_Scenario} \line {\uldb\cf11 Procedure Window SCM Usage}{\v PW_SCM_Usage} 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # PE_Usage_Scenario} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Procedure Editor Usage Scenario} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K SCM Usage Scenario, Procedure Editor;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Procedure Editor SCM Usage Scenario
\par \pard\plain \sb60\widctlpar \f9\fs16 The following scenario applies to the Procedure Editor.
\par \pard \sb60\sl-115\slmult0\widctlpar {\f0\fs24 
\par }\trowd \trgaph60 \cellx2070\cellx3690\cellx4950\cellx6840\cellx8700 \pard\plain \s2\sb120\sa60\widctlpar\intbl \b\f9\fs16 Action\cell p_event\cell p_context\cell p_other\cell Comments\cell \pard\plain \widctlpar\intbl \f9\fs16 \row \trowd \trgaph60 \clmgf \cellx2070\clmrg \cellx2070\clmrg \cellx2070\clmrg \cellx2070\clmrg \cellx2070 \pard \sb60\widctlpar\intbl \cell \cell \cell \cell \cell \pard \widctlpar\intbl \row \trowd \trgaph60 \cellx2070\cellx3690\cellx4950\cellx6840\cellx8700 \pard \sb60\widctlpar\intbl File{\f58 >}New\cell NEW\cell 56788\cell ?\cell File name unknown\cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl File{\f58 >}Save\cell BEFORE-SAVE\cell 56788\cell {\f11 c:\\8\\window-1.w}\cell \cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell SAVE\cell 56788\cell {\f11 c:\\8\\window-1.w}\cell \cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl Running the file\cell BEFORE-RUN\cell 56788\cell {\f11 c:\\8\\window-1.w}\cell Run uses last file name\cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell RUN\cell 56788\cell {\f11 c:\\8\\window-1.w}\cell \cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl File{\f58 >}Save As\cell BEFORE-SAVE\cell 56788\cell {\f11 c:\\8\\my-file.w}\cell Same context, new name\cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell SAVE\cell 56788\cell {\f11 c:\\8\\my-file.w}\cell \cell \pard \widctlpar\intbl {\f8 \row }\trowd \trgaph60 \clmgf \cellx2070\clmrg \cellx2070\clmrg \cellx2070\clmrg \cellx2070\clmrg \cellx2070 \pard \sb60\widctlpar\intbl {\f8 \cell \cell \cell \cell \cell }\pard \widctlpar\intbl {\f8 \row }\trowd \trgaph60 \cellx2070\cellx3690\cellx4950\cellx6840\cellx8700 \pard \sb60\widctlpar\intbl Procedure Editor prompts user to save changes\cell BEFORE-SAVE\cell 56788\cell {\f11 c:\\8\\my-file.w}\cell Closing a file can cause the Procedure Editor to prompt the user to save a file \cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell SAVE\cell 56788\cell {\f11 c:\\8\\my-file.w}\cell \cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl Procedure Editor closes the file\cell BEFORE-CLOSE\cell 56788\cell {\f11 c:\\8\\my-file.w}\cell \cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell CLOSE\cell 56788\cell {\f11 c:\\8\\my-file.w}\cell \cell \pard \widctlpar\intbl {\f8 \row }\trowd \trgaph60 \clmgf \cellx2070\clmrg \cellx2070\clmrg \cellx2070\clmrg \cellx2070\clmrg \cellx2070 \pard \sb60\widctlpar\intbl {\f8 \cell \cell \cell \cell \cell }\pard \widctlpar\intbl {\f8 \row }\trowd \trgaph60 \cellx2070\cellx3690\cellx4950\cellx6840\cellx8700 \pard \sb60\widctlpar\intbl File{\f58 >}Open\cell OPEN\cell 46647\cell {\f11 c:\\8\\my-file.w}\cell Observe the new context number\cell \pard \widctlpar\intbl {\f8 \row }\trowd \trgaph60 \clmgf \cellx2070\clmrg \cellx2070\clmrg \cellx2070\clmrg \cellx2070\clmrg \cellx2070 \pard \sb60\widctlpar\intbl {\f8 \cell \cell \cell \cell \cell }\pard \widctlpar\intbl {\f8 \row }\trowd \trgaph60 \cellx2070\cellx3690\cellx4950\cellx6840\cellx8700 \pard \sb60\widctlpar\intbl \cell BEFORE-CLOSE\cell 46647\cell {\f11 c:\\8\\my-file.w}\cell \cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell CLOSE\cell \cell \cell \cell \pard \widctlpar\intbl {\f8 \row }\trowd \trgaph60 \clmgf \cellx2070\clmrg \cellx2070\clmrg \cellx2070\clmrg \cellx2070\clmrg \cellx2070 \pard \sb72\widctlpar\intbl \cell \cell \cell \cell \cell \pard \widctlpar\intbl {\f8 \row }\pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # PW_SCM_Usage} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Procedure Window SCM Usage} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K SCM Usage;  Procedure Window;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Procedure Window SCM Usage
\par \pard\plain \sb60\widctlpar \f9\fs16 The following comments address Procedure Window SCM usage issues:
\par {\pard\plain\f1\fs16 \'a8\fi-1008\li1008\tx1008 \tab}\pard\plain \s15\fi-288\li288\sb60\widctlpar{}\tx288 \f9\fs16 For file operations, {\b p_context} does not change for a Procedure Window. It is not sufficient to track whether this number has changed to determine Open or Close status of a file in a Procedure Window. 
\par {\pard\plain\f1\fs16 \'a8\fi-288\li288\tx288 \tab}BEFORE-RUN, RUN, BEFORE-DEBUG, DEBUG, BEFORE-CHECK-SYNTAX,  CHECK-SYNTAX\emdash all use the last specified file name as {\b p_other}. Technically the actual file being run or checked is a temporary file with a name like {\f59 p123456r.ped}. This name is not used. 
\par {\pard\plain\f1\fs16 \'a8\fi-288\li288\tx288 \tab}NEW is called after the buffer is created. You will see the code before the NEW event is called.
\par {\pard\plain\b\f9\fs16\cf2 See Also:\fi-288\li288\tx288 \tab}\pard\plain \s27\fi-1008\li1008\sb60\widctlpar{}\tx1008 \f9\fs16 {\uldb\cf11 Procedure Window SCM Usage Scenario}{\v PW_Usage_Scenario}\line {\uldb\cf11 Procedure Editor SCM Usage}{\v PE_SCM_Usage} 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # PW_Usage_Scenario} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Procedure Window SCM Usage Scenario} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K SCM Usage Scenario, Procedure Window;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Procedure Window SCM Usage Scenario
\par \pard\plain \sb60\widctlpar \f9\fs16 The following scenario applies to the Procedure Window.
\par \pard \sb60\sl-115\slmult0\widctlpar {\f0\fs24 
\par }\trowd \trgaph60 \cellx1620\cellx3330\cellx4590\cellx6210\cellx8699 \pard\plain \s2\sb120\sa60\widctlpar\intbl \b\f9\fs16 Action\cell p_event\cell p_context\cell p_other\cell Comments\cell \pard\plain \widctlpar\intbl \f9\fs16 \row \trowd \trgaph60 \clmgf \cellx1620\clmrg \cellx1620\clmrg \cellx1620\clmrg \cellx1620\clmrg \cellx1620 \pard \sb60\widctlpar\intbl \cell \cell \cell \cell \cell \pard \widctlpar\intbl \row \trowd \trgaph60 \cellx1620\cellx3330\cellx4590\cellx6210\cellx8699 \pard \sb60\widctlpar\intbl \cell STARTUP\cell 599959\cell {\f59 _uib.p}\cell Procedure Window window handle\cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell NEW\cell 56788\cell Untitled:1\cell Untitled file name\cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl File{\f58 >}Save\cell BEFORE-SAVE\cell 56788\cell {\f59 c:\\8\\proc-1.p}\cell This assumes the user renamed the file before the save\cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell SAVE\cell 56788\cell {\f59 c:\\8\\proc-1.p}\cell \cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl Compile{\f58 >}Run\cell BEFORE-RUN\cell 56788\cell {\f59 c:\\8\\proc-1.p}\cell Run uses current file name\cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell RUN\cell 56788\cell {\f59 c:\\8\\proc-1.p}\cell Run has already terminated at this point\cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl File{\f58 >}Save As\cell BEFORE-SAVE\cell 56788\cell {\f59 c:\\8\\proc-2.p}\cell Same context, new name\cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell SAVE\cell 56788\cell {\f59 c:\\8\\proc-2.p}\cell \cell \pard \widctlpar\intbl {\f8 \row }\trowd \trgaph60 \clmgf \cellx1620\clmrg \cellx1620\clmrg \cellx1620\clmrg \cellx1620\clmrg \cellx1620 \pard \sb60\widctlpar\intbl {\f8 \cell \cell \cell \cell \cell }\pard \widctlpar\intbl {\f8 \row }\trowd \trgaph60 \cellx1620\cellx3330\cellx4590\cellx6210\cellx8699 \pard \sb60\widctlpar\intbl File{\f58 >}New\cell BEFORE-SAVE\cell 56788\cell {\f59 c:\\8\\proc-2.p}\cell \cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell SAVE\cell 56788\cell {\f59 c:\\8\\proc-2.p}\cell File saved\cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell BEFORE-CLOSE\cell 56788\cell {\f59 c:\\8\\proc-2.p}\cell \cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell CLOSE\cell 56788\cell {\f59 c:\\8\\proc-2.p}\cell CLOSE event for current file\cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell NEW\cell 56788\cell Untitled:1\cell Same context, Untitled file\cell \pard \widctlpar\intbl {\f8 \row }\trowd \trgaph60 \clmgf \cellx1620\clmrg \cellx1620\clmrg \cellx1620\clmrg \cellx1620\clmrg \cellx1620 \pard \sb60\widctlpar\intbl {\f8 \cell \cell \cell \cell \cell }\pard \widctlpar\intbl {\f8 \row }\trowd \trgaph60 \cellx1620\cellx3330\cellx4590\cellx6210\cellx8699 \pard \sb60\widctlpar\intbl File{\f58 >}Open\cell BEFORE-SAVE\cell 56788\cell {\f59 c:\\8\\proc-3.p}\cell This assumes the user renamed the file before the open\cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell SAVE\cell 56788\cell {\f59 c:\\8\\proc-3.p}\cell \cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell BEFORE-CLOSE\cell 56788\cell {\f59 c:\\8\\proc-3.p}\cell After the SAVE, a user can cancel the OPEN, and the CLOSE is never generated for {\f59 c:\\8\\proc3.p}\cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell CLOSE\cell 56788\cell {\f59 c:\\8\\proc-3.p}\cell \cell \pard \widctlpar\intbl {\f8 \row }\pard \sb60\widctlpar\intbl \cell OPEN\cell 56788\cell {\f59 c:\\8\\proc-3.p}\cell This assumes the user reopened the same file\cell \pard \widctlpar\intbl {\f8 \row }\trowd \trgaph60 \clmgf \cellx1620\clmrg \cellx1620\clmrg \cellx1620\clmrg \cellx1620\clmrg \cellx1620 \pard \sb60\widctlpar\intbl {\f8 \cell \cell \cell \cell \cell }\pard \widctlpar\intbl {\f8
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page {\cs43\super #{\footnote \pard\plain \s42\sb60\widctlpar \f9\fs20 {\cs43\super #} Procedure_Editor_Interface_Reference}} {\cs43\super ${\footnote \pard\plain \s42\sb60\widctlpar \f9\fs20 {\cs43\super $} Procedure Editor Interface Reference}} {\cs43\super K{\footnote \pard\plain \s42\sb60\widctlpar \f9\fs20 {\cs43\super K} Procedure Editor Interface Reference}} {\cs43\super +{\footnote \pard\plain \s42\sb60\widctlpar \f9\fs20 {\cs43\super +} EDITENG:0}} \{bml EDIT.BMP\}Procedure Editor Interface Reference
\par \pard\plain \sb60\widctlpar \f9\fs16 {\uldb\cf11 Main Window}{\v Procedure_Editor_Window} 
\par {\uldb\cf11 Main menu}{\v Menu_Commands} 
\par {\uldb\cf11 Pop-up menu}{\v Pop_up_Menu} 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Procedure_Editor_Window} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Procedure Editor Window} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Procedure Editor window; window, Procedure Editor; pop-up menu; status area;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Procedure Editor Window
\par \pard\plain \sb60\widctlpar \f9\fs16 The Procedure Editor window is where you choose and execute editor commands and edit and run PROGRESS {\ul\cf11 procedure files.}{\v POP_procedure_file} It contains the following areas: 
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\uldb\cf11 Menu Bar}{\b\v Menu_Commands}\tab Provides access to pull-down menus for editor commands and on-line help.
\par {\b Procedure Area}\tab The visible part of the {\ul\cf11 current buffer.}{\v POP_current_buffers} This is where you edit and run your PROGRESS {\ul\cf11 procedure files.}{\v POP_procedure_file} For help on {\ul\cf11 PROGRESS 4GL}{\v POP_PROGRESS_4GL} keywords, highlight the keyword and press the help key.
\par {\b Status Area}\tab A line that displays Editor status messages.
\par {\b Pop-up Menu}\tab Provides access to common editing tasks while you write procedures. To access the popup menu, position the mouse cursor in the procedure area and press the mouse menu button.
\par {\pard\plain\b\f9\fs16\cf2 Notes:\fi-2304\li2304\tx2304 \tab}\pard\plain \s26\fi-720\li720\sb60\widctlpar{}\tx720 \f9\fs16 
\par {\pard\plain\f1\fs16 \'a8\fi-720\li720\tx720 \tab}\pard\plain \s15\fi-288\li288\sb60\widctlpar{}\tx288 \f9\fs16 For information about writing procedures using the PROGRESS 4GL, consult the {\uldb\cf11 PROGRESS Language Reference}{\v\uldb\cf11 langref@lgrfeng.hlp}.
\par {\pard\plain\f1\fs16 \'a8\fi-288\li288\tx288 \tab}Keystrokes in the Editor are governed by your native platform setup. Consult your system administrator for common text editing keystrokes. In character mode, consult the Keyboard command off the Help menu for information about keystrokes.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} Menu_Commands} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} Procedure Editor Menu} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} menu commands, Procedure Editor; Procedure Editor Menu; } +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 +} EDITMENU:000000} \{bml EDIT.BMP\}Procedure Editor Menu Commands
\par \pard\plain \sb60\widctlpar \f9\fs16 This is the main menu of the Procedure Editor. Main menu commands drive the Procedure Editor.
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\uldb\cf11 File}{\v File_Menu} \tab Retrieve and save PROGRESS {\ul\cf11 procedure files}{\v POP_procedure_file} and {\ul\cf11 include files.}{\v POP_include_file} 
\par {\uldb\cf11 Edit}{\v Edit_Menu} \tab Manipulate and edit blocks of code.
\par {\uldb\cf11 Search}{\v Search_Menu} \tab Search for and replace code strings in the {\ul\cf11 current buffer.}{\v POP_current_buffers} 
\par {\uldb\cf11 Buffer}{\v Buffer_Menu} \tab Select and view multiple open buffers.
\par {\uldb\cf11 Compile}{\v Compile_Menu} \tab Run and compile PROGRESS procedure files.
\par {\uldb\cf11 Tools}{\v Tools_Menu} \tab Access other PROGRESS tools.
\par {\uldb\cf11 Options}{\v Options_Menu}\tab Set Procedure Editor preferences and assign {\ul\cf11 menu accelerator keys}{\v POP_menu_accel_keys}
\par {\uldb\cf11 Help}{\v Help_Menu} \tab Provides access to help information about the Procedure Editor.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} File_Menu} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} File Menu -- Procedure Editor} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} File menu; menus; New menu command; Open menu command; Close menu command; New Procedure Window menu command; Save menu command; Save As menu command; Print menu command; Exit menu command; } +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 +} EDITMENU:000005} \{bml EDIT.BMP\}File Menu
\par \pard\plain \sb60\widctlpar \f9\fs16 Use File menu commands to retrieve and save PROGRESS {\ul\cf11 procedure files}{\v POP_procedure_file} and {\ul\cf11 include files.}{\v POP_include_file} 
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b New}\tab Create a new file or procedure.
\par {\b Open}\tab Open an existing file or procedure.
\par {\b Close}\tab Close the {\ul\cf11 current buffer.}{\v POP_current_buffers} 
\par {\b New Procedure Window\tab }Create a new {\ul\cf11 procedure window.}{\v POP_procedure_window}{\b 
{\v0\par\v}Save}\tab Save the contents of the current buffer.
\par {\b Save As}\tab Save the contents of the current buffer to a specified file.
\par {\b Print}\tab Print the contents of the current buffer.
\par {\b Exit}\tab Exit from the Procedure Editor.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} Edit_Menu} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} Edit Menu -- Procedure Editor} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} Edit menu; menus; Cut menu command; Copy menu command; Paste menu command; Insert File menu command; Insert Fields menu command; } +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 +} EDITMENU:000010} \{bml EDIT.BMP\}Edit Menu
\par \pard\plain \sb60\widctlpar \f9\fs16 Use Edit menu commands to manipulate and edit blocks of code.
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b Undo}\tab Undo the last action you performed with the Editor.
\par {\b Cut}\tab Delete selected code from the {\ul\cf11 current buffer}{\v POP_current_buffers} and copy it into the {\ul\cf11 clipboard.}{\v POP_system_clipboard} 
\par {\b Copy}\tab Copy the selected code into the clipboard.
\par {\b Paste}\tab Place the contents of the clipboard into the current buffer at the {\ul\cf11 insertion point.}{\v POP_insertion_point} If code is already selected, replace it with the contents of the clipboard.
\par {\b Insert File}\tab Copy the contents of one file into the current buffer at the insertion point.
\par {\b Insert Fields}\tab Select database fields and insert their field names into the current buffer at the insertion point. If code is already selected, replace it with the database field names. (You must be connected to a database.)
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} Search_Menu} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} Search Menu -- Procedure Editor} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} Search menu; menus; Find menu command; Find Next menu command; Find Previous menu command; Replace menu command; Goto-Line menu command; } +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 +} EDITMENU:000015} \{bml EDIT.BMP\}Search Menu
\par \pard\plain \sb60\widctlpar \f9\fs16 Use Search menu commands to search for and replace code strings in the {\ul\cf11 current buffer.}{\v POP_current_buffers} 
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b Find\tab }Search for a specific code string.{\b 
\par Find Next\tab }Search for the next occurrence of the selected code string.
\par {\b Find Previous\tab }Search for the previous occurrence of the selected code string.{\b 
\par Replace\tab }Find and change a specified code string.{\b 
\par Goto-Line\tab }Move the cursor to a specified line number in the current buffer.{\b 
\par }\pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} Buffer_Menu} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} Buffer Menu -- Procedure Editor} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} Buffer menu; menus; List menu command; Next Buffer menu command; Previous Buffer menu command; Font menu command; Information menu command;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 +} EDITMENU:000020} \{bml EDIT.BMP\}Buffer Menu
\par \pard\plain \sb60\widctlpar \f9\fs16 Use Buffer menu commands to select and view multiple open {\ul\cf11 buffers.}{\v POP_buffers} 
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b List\tab }List the open buffers.{\b 
\par Next Buffer\tab }Display the next open buffer.{\b 
\par Previous Buffer\tab }Display the previous open buffer.
\par {\b Font}\tab Change the font used in the {\ul\cf11 current buffer}{\v POP_current_buffers}.
\par {\b Information}\tab Display information about the current buffer.{\b 
\par }\pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} Compile_Menu} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} Compile Menu -- Procedure Editor} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} Compile menu; menus; Run menu command; Check Syntax menu command; Debug menu command; Compiler Messages menu command; Application Debugger; Debugger; } +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 +} EDITMENU:000025} \{bml EDIT.BMP\}Compile Menu
\par \pard\plain \sb60\widctlpar \f9\fs16 Use Compile menu commands to run, compile, and debug PROGRESS {\ul\cf11 procedure files.}{\v POP_procedure_file} 
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b Run\tab }Compile and run the code in the {\ul\cf11 current buffer.}{\v POP_current_buffers} {\b 
{\v0\par\v}Check Syntax\tab }Compile the code in the current buffer to check for Compiler syntax errors.{\b 
{\v0\par\v}Debug\tab }Debug the code in the current buffer by invoking the {\ul\cf11 Application Debugger}{\v POP_Debugger} and breaking at the first line of executable code.{\b 
{\v0\par\v}Compiler Messages\tab }Display the compiler messages for the most recent {\b Run}, {\b Check Syntax}, or {\b Debug }commands.{\b 
{\v0\par\v}}\pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} Tools_Menu} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} Tools Menu -- Procedure Editor} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} Tools menu; menus; Data Dictionary; Data Administration tool; Librarian; Report Builder menu command; menu command; User Interface Builder; Translation Manager; Application Compiler; Compiler;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 +} EDITMENU:000030} \{bml EDIT.BMP\}Tools Menu
\par \pard\plain \sb60\widctlpar \f9\fs16 Use Tools menu commands to access other PROGRESS tools. Depending upon your current license, you may not have access to certain tools.
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b Data Dictionary\tab }Access the {\ul\cf11 Data Dictionary.}{\v POP_Data_Dictionary} {\b 
{\v0\par\v}Data Administration\tab }Access the {\ul\cf11 Data Administration tool}{\v POP_DB_Admin}.{\b 
{\v0\par\v}PRO*Tools}\tab Access to the {\ul\cf11 PRO*Tools}{\v pop_protools} palette of applets.
\par {\b User Interface Builder\tab }Access the {\ul\cf11 User Interface Builder}{\v POP_User_Interface_Builder}.{\b 
{\v0\par\v}Translation Manager\tab }Access the {\ul\cf11 Translation Manager}{\v POP_Translation_Manager}.
\par {\b Visual Translator\tab }Access the {\ul\cf11 Visual Translator}{\v POP_Visual_Translator}.{\b 
{\v0\par\v}Application Compiler\tab }Access the {\ul\cf11 Application Compiler.}{\v POP_Application_Compiler} {\b 
{\v0\par\v}}\pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} Options_Menu} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} Options Menu -- Procedure Editor} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} Options menu; menus; Preferences menu command; Menu Accelerators menu command; Default Font menu command; Save Settings on Exit menu command; } +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 +} EDITMENU:000035} \{bml EDIT.BMP\}Options Menu
\par \pard\plain \sb60\widctlpar \f9\fs16 Use Options menu commands to set Procedure Editor preferences, assign {\ul\cf11 menu accelerator keys}{\v POP_menu_accel_keys} and change the Editor font.
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b Preferences\tab }Change Editor settings.{\b 
\par Menu Accelerators\tab }Assign accelerator keys to Editor menus.{\b 
\par Default Font\tab }Select a font for all Editor buffers and View windows to use by default.
\par {\b Save Settings on Exit\tab }Save preferences when you exit the Editor.{\b 
\par }\pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} Help_Menu} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} Help Menu -- Procedure Editor} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} Help menu; menus; Contents menu command; Search for Help On menu command; How To menu command; Messages menu command; Recent Messages menu command; error messages;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 +} EDITMENU:000040} \{bml EDIT.BMP\}Help Menu
\par \pard\plain \sb60\widctlpar \f9\fs16 Use Help menu commands to access help information about the Procedure Editor.
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b Help Topics}\tab Access the main table of contents and index of help information for the Procedure Editor, and search for words within the Editor help file.
\par {\b Messages}\tab Look up information about PROGRESS and operating system error messages.
\par {\b Recent Messages}\tab Locate information on PROGRESS and operating system  error messages generated during the session.
\par {\b About Procedure Editor\tab }Display version information about the current installation of the Editor.{\i 
\par }\pard\plain \sb60\widctlpar \f9\fs16 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Pop_up_Menu} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Pop-up Menu} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K pop-up menu;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Pop-up Menu
\par \pard\plain \sb60\widctlpar\tx0 \f9\fs16 The pop\endash up menu is available in any Procedure Editor window by placing the cursor in the procedure area and holding down the right mouse button. 
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b Run}\tab Compile and run the procedure in the current buffer. The procedure executes in a separate Procedure Editor Run window which lets you view the text of your procedure while running it. 
\par {\b Check Syntax}\tab Check the syntax of the procedure in the current buffer. The Compiler Messages window explains problems in the syntax. 
\par {\b Insert}\tab Access options to insert database field names or another file\rquote s contents into the current buffer.
\par {\b Format Selection}\tab Access options to Indent/Unindent and Comment/Uncomment selected text.
\par {\b Cut}\tab Delete selected code from the {\ul\cf11 current buffer}{\v POP_current_buffers} and copy it into the {\ul\cf11 clipboard.}{\v POP_system_clipboard} 
\par {\b Copy}\tab Copy the selected code into the clipboard.
\par {\b Paste}\tab Place the contents of the clipboard into the current buffer at the {\ul\cf11 insertion point.}{\v POP_insertion_point} If code is already selected, replace it with the contents of the clipboard.
\par {\b Keyword Help}\tab Access the PROGRESS Online Reference Help for the selected 4GLK keyword text. If no text is selected, defaults to the Online Reference Search dialog.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Buffer_Settings_Dialog_Box} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Buffer Information Dialog Box} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Buffer Information Dialog Box; dialog box, Buffer Information;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Buffer Information Dialog Box
\par \pard\plain \sb60\widctlpar \f9\fs16 The Buffer Information dialog box displays information about the {\ul\cf11 current buffer.}{\v POP_current_buffers} 
\par (Access this dialog box by choosing Buffer>Information from the main menu.)
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b File Name\tab }Displays the path and filename of the current buffer. When the buffer is untitled, no filename is displayed.
\par {\b Read\tab }When activated, specifies that the operating system read bit is turned on for the file.
\par {\b Write\tab }When activated, specifies that the operating system write bit is turned on for the file. (When this bit is turned off, the file is a {\ul\cf11 read-only file.}{\v POP_read_only} and you may not be able to save buffer contents to this file.)
\par {\b Buffer Name}\tab Displays the name of the current buffer. This is the name of the file you specified when you first opened the buffer or since it was last saved using the {\b Save As }command.
\par {\b Line}\tab Displays the line number from the beginning of the buffer that the cursor is currently on.
\par {\b Column}\tab Displays the character at which the cursor is currently positioned within the current line. 
\par {\b Bytes}\tab Displays the number of characters in the buffer.
\par {\b Modified}\tab Indicates if the {\ul\cf11 buffer}{\v POP_buffers} has been edited since the last time it was saved (if ever).
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Buffer_List_Dialog_Box} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Buffer List Dialog Box} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Buffer List Dialog Box; dialog box; Buffer List;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Buffer List Dialog Box
\par \pard\plain \sb60\widctlpar \f9\fs16 Use the Buffer List dialog box to display all open {\ul\cf11 buffers}{\v POP_buffers} and select a buffer to switch to or to save.
\par (access this dialog box by choosing Buffer>List from the main menu.)
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b Select Buffer}\tab Displays all open buffers. Choose a buffer to switch to or to save. Buffers with changes that have not been saved are indicated in the list by an asterisk (*).
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 {\b0\up6 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS}} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Compiler_Message_Dialog_Box} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Compiler Messages Dialog Box} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Compiler Messages Dialog Box; dialog box, Compiler Messages;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Compiler Messages Dialog Box
\par \pard\plain \sb60\widctlpar \f9\fs16 The compiler Messages dialog box displays the messages generated by the PROGRESS 4GL Compiler during the most recent execution of the Editor {\b Run}, {\b Check Syntax}, or {\b Debug }commands (see {\uldb\cf11 Compile Menu}{\v Compile_Menu}).
\par Each message displays a brief description of the message, the name of the file, the line number containing the error, and the PROGRESS message number in parenthesis.
\par For more information about these messages, choose the {\b Messages }or {\b Recent Messages }commands found on the {\uldb\cf11 Help menu.}{\v Help_Menu} 
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # System_Options_Dialog_Box} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Preferences Dialog Box} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Preferences Dialog Box; dialog box, Preferences;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Preferences Dialog Box
\par \pard\plain \sb60\widctlpar \f9\fs16 Use the Preferences dialog box to display and set various Procedure Editor settings and system options.
\par (Access this dialog box by choosing Options>Preferences from the main menu.)
\par 
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b Exit Warning to Save Change  }Activate this box to prompt you to save {\ul\cf11 buffer}{\v POP_buffers} changes whenever you exit the Editor. When not checked, the Editor automatically discards all buffers (changed or not) on exit.{\b 
{\v0\par\v}Save Buffer List to Open on Startup  }Activate this box to save a list of the {\ul\cf11 procedure files}{\v POP_procedure_file} currently being edited when the Editor exits. When you next invoke the Editor, it automatically opens these files for editing. (Untitled buffers are not saved as a part of this list.){\b 
{\v0\par\v}Minimize Editor Before Running  }Activate this box to minimize the Editor window to an icon before running a procedure.{\b 
{\v0\par\v}Restore Editor After Running  }Activate this box to restore the Editor window to its previous un-iconified state after running a procedure.{\b 
{\v0\par\v}Pause After Running\tab }Activate this box to have the Editor request that you press the space bar to continue after running or debugging a procedure. When not activated, the Editor will not pause and you may not be able to see all of the information displayed by the procedure you just ran or debugged.
\par {\b Auto-cleanup Dynamic Widgets}  Activate this box to automatically terminate all {\ul\cf11 dynamic objects}{\v POP_dynamic_widgets} which were created but not deleted by the most recently run procedure. Dynamic objects created using a named, persistent object-pool are not deleted by the Procedure Editor even when this setting is checked on.
\par \pard\plain \s1\sb120\sa120\keepn\widctlpar \b\f9\fs20 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # Save_Buffers_Dialog_Box} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Save Buffers with Changes Dialog Box} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Save Buffers with Changes Dialog Box; dialog box, Save Buffers with Changes;} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} \{bml EDIT.BMP\}Save Buffers with Changes Dialog Box
\par \pard\plain \sb60\widctlpar \f9\fs16 Use the Save Buffers with Changes dialog box to save {\ul\cf11 buffers}{\v POP_buffers} that have been modified before exiting the Editor. Select a buffer to save and then choose an action button.
\par (Access this dialog box by {\uldb\cf11 exiting the Procedure Editor}{\v Exiting_the_Procedure_Editor} .)
\par 
\par \pard\plain \s20\fi-2304\li2304\sb60\widctlpar\tx2304 \f9\fs16 {\b Select Changed Buffers to Save\tab }Displays modified buffers that have not been saved.
\par {\b Save Selected\tab }Save the contents of the selected buffers in the list above.{\b 
\par Cancel\tab }Cancel exiting the Editor and return to the current buffer.{\b 
\par Save None\tab }Save no buffers and exit the Editor.{\b 
\par }\pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 {\b0\up6 \page }{\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_Application_Compiler}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} Application Compiler}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} Application Compiler (definition); Compiler (definition); }} Application Compiler
\par \pard\plain \sb60\widctlpar \f9\fs16 A tool used to compile PROGRESS procedure files ({\f11 .p} and {\f11 .w} files) either for the duration of a PROGRESS session or for permanent storage. You can also use the Compiler to create a variety of listings and compile procedure files in a different language or with an encryption key.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_Debugger}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} Application Debugger}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} Application Debugger (definition); Debugger (definition); }} Application Debugger
\par \pard\plain \sb60\widctlpar \f9\fs16 A window-based tool used to locate and fix errors in PROGRESS procedures and triggers.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_auto_indent}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} auto indent}} auto indent
\par \pard\plain \sb60\widctlpar \f9\fs16 A Procedure Editor option: when you enter a carriage return, the cursor returns to the indenting level of the previous line.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 {\b0\up6 \page }{\b0 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS}} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # POP_basic_object} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ basic object} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K widget (definition); basic object (definition);} basic object
\par \pard\plain \sb60\widctlpar \f9\fs16 A visual element of a graphical user interface such as a menu, a frame, a window, or a fill-in field. Widgets are also known as user-interface components (UICs).
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # POP_buffers} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ buffer} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K buffer (definition); edit buffer (definition);} buffer
\par \pard\plain \sb60\widctlpar \f9\fs16 A temporary storage area in memory used to hold code, which can be modified before it is saved to an operating system file.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_system_clipboard}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} clipboard}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} clipboard (definition); }} clipboard
\par \pard\plain \sb60\widctlpar \f9\fs16 A system-defined or PROGRESS-defined, temporary storage area in memory that PROGRESS uses to store cut and copied code for the session.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_column_number}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} column number}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} column number (definition); }} column number
\par \pard\plain \sb60\widctlpar \f9\fs16 The number of columns from the beginning of the line where the cursor is located.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_current_buffers}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} current buffer}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} current buffers (definition); buffers, current (definition); }} current buffer
\par \pard\plain \sb60\widctlpar \f9\fs16 The buffer displayed in the {\ul\cf11 Procedure Area}{\v POP_Procedure_Area} of the Procedure Editor. 
\par When you enter text into the procedure area of the Procedure Editor, you enter it into the current buffer. When you start the Procedure Editor, the current buffer is empty and untitled unless you access the Procedure Editor using File{\f58 >}Open{\f58 >}Procedure from the ADE Desktop
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_cursor}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} cursor}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} cursor (definition); }} cursor 
\par \pard\plain \sb60\widctlpar \f9\fs16 Code you enter in a procedure (or any buffer) appears at the location of the cursor. The cursor is a place marker in code. The {\b location} of the cursor is referred to as the code insertion point.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_Data_Dictionary}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} Data Dictionary}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} Data Dictionary (definition); }} Data Dictionary
\par \pard\plain \sb60\widctlpar \f9\fs16 A tool that enables you to create, modify, and delete PROGRESS database objects. You can also use it to generate database reports. 
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_DB_Admin}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} Data Administration Tool}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} Data Administration tool (definition); Admin tool (definition); }} Data Administration tool
\par \pard\plain \sb60\widctlpar \f9\fs16 A window-based tool used to dump and load database files, implement a database strategy, and run various PROGRESS and DataServer utilities.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # POP_dynamic_widgets} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ dynamic object} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K dynamic widgets (definition); widgets, dynamic (definition); dynamic objects (definition); objects, dynamic (definition);} dynamic object
\par \pard\plain \sb60\widctlpar \f9\fs16 User interface components that the application creates and destroys during the life of the application. Dynamic objects are not tied to any block or data and exist only in the screen buffer. They exist until you explicitly delete them.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # POP_edit_buffer} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ edit buffer} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K edit buffer (definition);} edit buffer
\par \pard\plain \sb60\widctlpar \f9\fs16 A work area in which you write and edit a PROGRESS procedure.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_event}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} event}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} events (definition); database events; UI events; mouse actions; keyboard actions; actions; keyboard; }} event
\par \pard\plain \sb60\widctlpar \f9\fs16 An action associated with a trigger and a object or a database. There are two types of events:
\par \pard \sb60\widctlpar\tx0 {\b Database event\tab }An action PROGRESS takes on a database, such as finding or writing to a record.
\par \pard \sb60\widctlpar {\b User interface event}\tab An action the user initiates on a object with a keystroke or a mouse such as pressing the GO key or marking a object.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_include_file}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} include file}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} include files (definition); files, include (definition); }} include file ({\f11 .i} file)
\par \pard\plain \sb60\widctlpar \f9\fs16 A PROGRESS procedure file which is included into other procedure files. Include files normally have a {\f11 .i }file extension.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_insertion_point}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} insertion point}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} insertion point (definition); }} insertion point
\par \pard\plain \sb60\widctlpar \f9\fs16 The location of the cursor in the buffer, marked by a blinking cursor, where code will be inserted when you type or paste. This is also the point where you begin to select code to be cut, copied, or deleted.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_line_number}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} line number}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} line number (definition); }} line number
\par \pard\plain \sb60\widctlpar \f9\fs16 The number of lines from the beginning of the buffer where the cursor is located.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_menu_accel_keys}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} menu accelerator keys}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} menu accelerator keys (definition); accelerator keys, menu (definition); keys, menu accelerator (definition); }} menu accelerator keys
\par \pard\plain \sb60\widctlpar \f9\fs16 A key or key combination which when pressed invokes an associated Procedure Editor menu command.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # POP_object_properties} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ object attributes} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K object attributes (definition); attributes, object (definition); } object attributes
\par \pard\plain \sb60\widctlpar \f9\fs16 Characteristics or properties of the object such as its type, screen location, size, color, font, and relationship to other objects.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 {\b0\up6 \page }{\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_Procedure_Editor}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} Procedure Editor}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} Procedure Editor (definition);}} Procedure Editor
\par \pard\plain \sb60\widctlpar \f9\fs16 An interactive utility that provides operations for editing code. You can use it to create, write, compile, and run PROGRESS procedure files. 
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # POP_Procedure_Area} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Procedure Area} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K Procedure Area (definition);} Procedure Area
\par \pard\plain \sb60\widctlpar \f9\fs16 The visible part of the {\ul\cf11 current buffer.}{\v POP_current_buffers} This is where you edit and run your PROGRESS {\ul\cf11 procedure files.}{\v POP_procedure_file} For help on {\ul\cf11 PROGRESS 4GL}{\v POP_PROGRESS_4GL} keywords, highlight the keyword and press the help key.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_procedure_file}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} procedure file}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} procedure files (definition); files, procedure (definition); }} procedure file
\par \pard\plain \sb60\widctlpar \f9\fs16 A source file containing PROGRESS 4GL code that can be compiled into r-code. Procedure files normally have a {\f11 .p} or {\f11 .w} (window procedure files) file extension.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_procedure_window}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} procedure window}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} procedure windows (definition); windows, procedure (definition); }} procedure window
\par \pard\plain \sb60\widctlpar \f9\fs16 A PROGRESS editor in a separate window that allows you to open, view, edit, run, and save changes to PROGRESS procedure and include files. You can open multiple procedure windows and cut, copy, and paste code between the procedure window and the main Procedure Editor window. Procedure windows contain a menu bar with much of the same functionality of the PROGRESS Procedure Editor.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_PROGRESS_4GL}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} PROGRESS 4GL}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} PROGRESS 4GL (definition); 4GL (definition);}} PROGRESS 4GL
\par \pard\plain \sb60\widctlpar \f9\fs16 An application development language which is a highly readable syntax employing a default behavior while performing the work of multiple 3GL statements.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_PROGRESS_procedure}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} PROGRESS procedure}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} procedures (definition); }} PROGRESS procedure
\par \pard\plain \sb60\widctlpar \f9\fs16 The largest PROGRESS unit of execution, consisting of one or more PROGRESS source or r-code statements in a single outer block.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 * WINDOWS} #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 # POP_ProTools} ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 $ Pro*Tools} K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 K PRO*Tools (definition);} +{\footnote \pard\plain \sb60\widctlpar \f9\fs16 + EDITENG:0} PRO*Tools
\par \pard\plain \sb60\widctlpar \f9\fs16 A palette of applets that provides quick access to information about the PROGRESS application you are developing. Many applets can help you debug your application.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_read_only}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} read-only file}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} read-only files (definition); files, read-only (definition); }} read-only file
\par \pard\plain \sb60\widctlpar \f9\fs16 A file to which changes in the buffer cannot be written or saved.{\b 
\par }\pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_replacement_string}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} replacement string}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} replacement strings (definition); strings, replacement (definition);}} replacement string 
\par \pard\plain \sb60\widctlpar \f9\fs16 The code with which you want to overwrite one or all instances of a search string. 
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_search_string}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} search string}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} search strings (definition); strings, search (definition); }} search string 
\par \pard\plain \sb60\widctlpar \f9\fs16 An instance of the code you want to find.
\par Under MS-Windows, you can use wildcard characters for regular expression pattern matching. A question mark (?) in a particular position indicates that any single character is acceptable in that position. An asterisk (*) indicates that any group of characters is acceptable in that position, including a null group.
\par If you want to specify a question mark or an asterisk as a literal character, specify double characters (?? or **).{\b 
\par }\pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_selected_code}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} selected code}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} selected code (definition); code, selected (definition); }} selected code
\par \pard\plain \sb60\widctlpar \f9\fs16 Highlighted code (shown in reverse video). Select code when you want to perform an action or command on that code or if you want to use the selected code in a command. 
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_special_characters}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} special characters}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} special characters (definition); characters, special (definition); }} special characters
\par \pard\plain \sb60\widctlpar \f9\fs16 ASCII control characters or other character codes the keyboard cannot generate directly. For example, eight bit codes.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_Translation_Manager}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} Translation Manager}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} Translation Manager (definition);}} Translation Manager
\par \pard\plain \sb60\widctlpar \f9\fs16 A tool used to manage the entire process of translating the text phrases of a PROGRESS application into one or more spoken languages. You can also use the Translation Management System to customize the interface of an application for different customer sites.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 {\b0\up6 \page }{\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_User_Interface_Builder}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} User Interface Builder}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} User Interface Builder (definition);}} User Interface Builder (UIB)
\par \pard\plain \sb121\widctlpar \f9\fs16 A window-based tool you can use to build the user interface of an application and attach triggers to objects.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_Visual_Translator}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} Visual Translator}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} Visual Translator (definition);}} Visual Translator
\par \pard\plain \sb60\widctlpar \f9\fs16 A tool used to translate text phrases, data formats, and the interface of a PROGRESS application into one or more spoken languages. This tool works in partnership with the Translation Manager tool.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 *{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 *} WINDOWS}} {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_window_proc_file}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} window procedure file}} {\fs20 K{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 K} window procedure files (definition); files, window procedure (definition); }} window procedure file
\par \pard\plain \sb60\widctlpar \f9\fs16 A special class of PROGRESS procedure file created using the PROGRESS User Interface Builder. Window procedure files must have a .w file extension.
\par \pard\plain \s2\sb120\sa60\widctlpar \b\f9\fs16 \page {\fs20 #{\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 #} POP_disclaimer}} {\fs20 ${\footnote \pard\plain \sb60\widctlpar \f9\fs16 {\fs20 $} Disclaimer}} Copyright (c) 1984-1997 by Progress Software Corporation
\par \pard\plain \sb60\widctlpar \f9\fs16 All rights reserved. No part of this program or document may be reproduced in any form or by any means without permission in writing from Progress Software Corporation.
\par The information in this document is subject to change without notice, and Progress Software Corporation assumes no responsibility for any errors that may appear in this document.
\par All company and product names are the trademarks or registered trademarks of their respective companies.
\par }


