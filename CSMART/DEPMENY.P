/*DEPMENY.P*/
{ALLDEF.I}
{GLOBVAR2DEL1.I}
{HOPPSEK2W.I}
{DEPWID.I}
{FORETEMP.I}
&Scoped-define NEW 
&Scoped-define SHARED SHARED
{LEVTEMP.I}
{DEPATEMP.I}
{DEPSEKTEMP.I}
{LTRPTEMP.I}
{SPECMTRLTEMP.I}
{BESTKUNDALLT.I}
{DIRDEF.I}
DEFINE {&NEW} {&SHARED} TEMP-TABLE valdaaotemp NO-UNDO  LIKE utsokaonr.
{ANSPROJBER.I}
{ARBATE.I}
{OMRTEMPW.I}
{AVDTEMP.I}
{LAGERTRUM.I}
{AOBESTMTRLDEP.I}
{BESTMTRLDEP.I}
{TIDUTTTSHARED.I}

DEFINE SHARED TEMP-TABLE visa NO-UNDO
   FIELD UT AS CHARACTER    
   FIELD TYP AS CHARACTER       
   FIELD ORDNING AS INTEGER
   FIELD UPPFOLJVAL AS INTEGER
   FIELD KUURVAL AS LOGICAL
   FIELD DELNRKOLL AS LOGICAL
   INDEX ORDNING IS PRIMARY ORDNING KUURVAL
   INDEX UT UT.

DEFINE SHARED VARIABLE depatitta AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE vald_depa AS INTEGER NO-UNDO.     
DEFINE SHARED VARIABLE uttag AS LOGICAL NO-UNDO. 
DEFINE SHARED VARIABLE lista AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE dbenamning AS CHARACTER NO-UNDO.  
DEFINE SHARED VARIABLE alla AS LOGICAL NO-UNDO.

DEFINE SHARED VARIABLE aonummer AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE delnummer AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE valmanad AS INTEGER NO-UNDO.   
DEFINE SHARED VARIABLE valar AS INTEGER NO-UNDO. 
DEFINE SHARED VARIABLE utomr AS CHARACTER NO-UNDO. 
DEFINE SHARED VARIABLE omr AS LOGICAL NO-UNDO. 
DEFINE SHARED VARIABLE akval AS INTEGER NO-UNDO.  
DEFINE SHARED VARIABLE valaonr AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE valdelnr AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE valort AS CHARACTER NO-UNDO. 
DEFINE SHARED VARIABLE valomrade AS CHARACTER NO-UNDO. 
DEFINE SHARED VARIABLE valkund AS CHARACTER NO-UNDO. 
DEFINE SHARED VARIABLE valnamn AS CHARACTER NO-UNDO.  
DEFINE SHARED VARIABLE datvar AS DATE NO-UNDO. 
DEFINE SHARED VARIABLE mellanrum AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE musz AS LOGICAL NO-UNDO.
DEFINE VARIABLE depaapph AS HANDLE NO-UNDO.
DEFINE VARIABLE stat AS LOGICAL NO-UNDO.
DEFINE VARIABLE status-ok AS LOGICAL NO-UNDO.
DEFINE VARIABLE vemanvandare AS INTEGER NO-UNDO.
DEFINE VARIABLE vallista AS INTEGER NO-UNDO.
DEFINE VARIABLE danv AS CHARACTER NO-UNDO.
DEFINE VARIABLE rapptyp AS INTEGER NO-UNDO.
DEFINE VARIABLE vadladd AS CHARACTER NO-UNDO.
DEFINE VARIABLE lkopp AS LOGICAL NO-UNDO.
DEFINE VARIABLE logresult AS LOGICAL NO-UNDO.
DEFINE VARIABLE edatvar AS DATE NO-UNDO.
DEFINE VARIABLE losenwebh AS HANDLE NO-UNDO.
DEFINE VARIABLE depatemph AS HANDLE NO-UNDO.
DEFINE VARIABLE lastcheck AS INTEGER NO-UNDO.
DEFINE VARIABLE spartidvar AS INTEGER NO-UNDO.
DEFINE VARIABLE comm-line AS CHARACTER NO-UNDO.
DEFINE VARIABLE cDLC      AS CHARACTER NO-UNDO.
DEFINE VARIABLE param1    AS CHARACTER NO-UNDO INITIAL "Test-Parameter".
framesizeh = framesizeextrah.
depatemph = TEMP-TABLE depatemp:DEFAULT-BUFFER-HANDLE. 

ON 'VALUE-CHANGED':U OF BRW_DEPA PERSISTENT RUN brwdepa_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_AND PERSISTENT RUN btnand_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_AVB PERSISTENT RUN avb_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_BORT PERSISTENT RUN btnbort_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_NY PERSISTENT RUN btnny_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_BEST PERSISTENT RUN btnfbest_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_BSTAT PERSISTENT RUN btnfbstat_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_inventering PERSISTENT RUN btnfinventering_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_lager PERSISTENT RUN btnflager_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_LAS PERSISTENT RUN btnflas_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_LEV PERSISTENT RUN btnflev_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_LEVE PERSISTENT RUN btnfleve_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_MTRL PERSISTENT RUN btnfmtrl_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_MTRLPRIS PERSISTENT RUN btnfmtrlpris_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_RAPP PERSISTENT RUN btnfrapp_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_SEK PERSISTENT RUN btnfsek_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_UT PERSISTENT RUN btnfut_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_VISA PERSISTENT RUN btnfvisa_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_LOGGIN PERSISTENT RUN btnloggin_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_LOGGOUT PERSISTENT RUN btnloggout_UI IN THIS-PROCEDURE.

ON ANY-KEY OF FILL-IN_AV-DEPLOSEN PERSISTENT RUN Losenanykey_UI IN THIS-PROCEDURE.

RUN main_UI.
PROCEDURE Depaloggout_UI :                        
   IF Guru.GlobalaVariabler:LastTimeDepa + spartidvar / 1000 <  TIME THEN DO:
      IF  Guru.Konstanter:globanv = "SELNDEPA" THEN DO:
         Guru.GlobalaVariabler:LastTimeDepa = TIME.
         lastcheck = TIME.
         RETURN.
      END. 
      RUN anvdeplbort_UI IN depaapph (INPUT vald_depa).
      Guru.GlobalaVariabler:LastTimeDepa = 0.
      RUN btnbyt_UI. 
   END.
   ELSE DO:
      lastcheck = TIME.
   END.   
END PROCEDURE.
PROCEDURE LastTimeDepaLoggOutSet_UI :
   RUN LastTimeDepaLoggSet_UI IN depaapph (OUTPUT spartidvar).
END PROCEDURE.
PROCEDURE Losenanykey_UI :
    {TRYCKS.I}
    IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      RUN btnloggin_UI.
   END.
END PROCEDURE.

PROCEDURE btnloggin_UI :
   DEFINE VARIABLE alltOK AS LOGICAL NO-UNDO.
   DEFINE VARIABLE depanvnamn AS CHARACTER NO-UNDO.
   
   IF FILL-IN_AV-DEPLOSEN:SCREEN-VALUE = "" THEN DO:
      MESSAGE "Lösen kan inte vara blankt." VIEW-AS ALERT-BOX.
      musz = TRUE.
      RETURN.
   END.   
   Guru.Konstanter:globanv = "SELNDEPA".
   RUN nysekdepa_UI (INPUT FILL-IN_DEPANVANDARE:SCREEN-VALUE, INPUT FILL-IN_AV-DEPLOSEN:SCREEN-VALUE,OUTPUT alltok).
   Guru.Konstanter:globanv = FILL-IN_DEPANVANDARE:SCREEN-VALUE.
   Guru.GlobalaVariabler:LastTimeDepa = TIME.
   RUN sek_UI.
   RUN PlaceraKnapp_UI.
   FILL-IN_DEPANVANDARE:SCREEN-VALUE = "". 
   FILL-IN_AV-DEPLOSEN:SCREEN-VALUE  = "".
   RUN AnvandareNamn_UI IN depaapph (INPUT Guru.Konstanter:globanv,OUTPUT depanvnamn).
   FILL-IN_AV-DEPANVNAMN:SCREEN-VALUE  = depanvnamn.
END PROCEDURE.

PROCEDURE btnbyt_UI :
   comm-line = "C:\GuruOnWeb.lnk".
   OS-COMMAND SILENT VALUE(comm-line).
   QUIT. 
END PROCEDURE.
           
PROCEDURE createScript :
    DEFINE VARIABLE cLine AS CHARACTER NO-UNDO.

    IF SEARCH("RestartSession.bat") = ? THEN
    DO:
        cLine = 'if "%DLC%"==""    set DLC=' + cDLC.
        OUTPUT TO value("RestartSession.bat").

        DISPLAY '# Script generated by CloseAndRestart.p ' SKIP(1) 
            '@echo off' SKIP
            cLine FORMAT "X(100)" SKIP
            'if exist "%DLC%"\promsgs goto BIN' SKIP
            'echo DLC environment variable not set correctly - Please set DLC variable' SKIP
            'goto END' SKIP
            ':BIN' SKIP
            'set PROEXE="%DLC%\bin\%1"' SKIP
            '"%PROEXE%"  %2 %3 %4 %5 %6 %7 %8 %9' SKIP
            'set PROEXE=' SKIP
            ':END' SKIP WITH FRAME a1 WIDTH 110 NO-BOX NO-LABELS.     

        OUTPUT CLOSE.
    END.
END PROCEDURE.

PROCEDURE createpf :
    DEFINE VARIABLE cSuper AS CHARACTER NO-UNDO INITIAL "wc-start.w".

    IF SEARCH("session.pf") = ? THEN
    DO:  
        OUTPUT TO VALUE("session.pf").
        DISPLAY '# .pf file generated by CloseAndRestart.p ' SKIP(1)  
            '-cpinternal ' + SESSION:CPINTERNAL FORMAT "X(40)" SKIP
            '-cpstream ' + SESSION:CPSTREAM FORMAT "X(40)" SKIP
            '-cpcoll ' + SESSION:CPCOLL FORMAT "X(40)" SKIP
            '-p ' + cSuper FORMAT "X(60)" SKIP 
            '-param ' + param1 FORMAT "X(78)" SKIP
            '-debugalert'
            WITH FRAME a1 NO-BOX NO-LABELS.
        OUTPUT CLOSE.
    END.  
END PROCEDURE.


PROCEDURE btnloggout_UI :
   DEFINE VARIABLE alltOK AS LOGICAL NO-UNDO.
   FILL-IN_DEPANVANDARE:SCREEN-VALUE = "SELNDEPA". 
   FILL-IN_AV-DEPLOSEN:SCREEN-VALUE  = "DEPASELN".
   Guru.Konstanter:globanv = "SELNDEPA". 
   RUN nysekdepa_UI (INPUT FILL-IN_DEPANVANDARE:SCREEN-VALUE, INPUT FILL-IN_AV-DEPLOSEN:SCREEN-VALUE, OUTPUT alltok).
   IF alltok = FALSE THEN QUIT.
   RUN sek_UI.
   FILL-IN_DEPANVANDARE:SCREEN-VALUE = "". 
   FILL-IN_AV-DEPLOSEN:SCREEN-VALUE  = "".
   FILL-IN_AV-DEPANVNAMN:SCREEN-VALUE  = "".
   RUN PlaceraKnapp_UI. 
END PROCEDURE.
PROCEDURE nysekdepa_UI :
   DEFINE VARIABLE meddelandevar AS CHARACTER  NO-UNDO.
   DEFINE INPUT  PARAMETER invar AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER losvar  AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER alltOK AS LOGICAL NO-UNDO.
   IF Guru.Konstanter:appcon THEN DO:
      IF NOT VALID-HANDLE(losenwebh) THEN RUN LOSENKOLLWEB.P PERSISTENT SET losenwebh ON Guru.Konstanter:apphand TRANSACTION DISTINCT.  
   END.
   ELSE DO:
      IF NOT VALID-HANDLE(losenwebh) THEN RUN LOSENKOLLWEB.P PERSISTENT SET losenwebh .    
   END.
   RUN AppSpringSet_UI  IN losenwebh (INPUT  Guru.Konstanter:AppSpringSet).         
   RUN MaxIpUserCheck_UI IN losenwebh (INPUT  Guru.Konstanter:AppSpringSet[3],INPUT invar,INPUT losvar,OUTPUT alltOk,OUTPUT meddelandevar).
   IF alltOk = FALSE THEN DO: 
      MESSAGE meddelandevar
      VIEW-AS ALERT-BOX.
      RUN btnloggout_UI.
      RETURN. 
   END.
   {EJIPCHK.I} RUN RattLosen_UI IN losenwebh (INPUT CHR(69) + CHR(74) + CHR(73) + CHR(80) + CHR(67) + CHR(72) + CHR(75) ,
   INPUT invar,INPUT invar, INPUT losvar , OUTPUT alltOk,OUTPUT meddelandevar).
   /*borde inte behövas*/
   ELSE IF Guru.Konstanter:globanv = "SELNDEPA" THEN RUN RattLosen_UI IN losenwebh (INPUT CHR(69) + CHR(74) + CHR(73) + CHR(80) + CHR(67) + CHR(72) + CHR(75) ,
   INPUT invar,INPUT invar, INPUT losvar , OUTPUT alltOk,OUTPUT meddelandevar).
   ELSE QUIT.
   IF alltOk = FALSE THEN DO: 
      MESSAGE meddelandevar
      VIEW-AS ALERT-BOX.
      RUN btnloggout_UI.
      RETURN.
   END.
   RUN REGLERFORLOSEN.P (INPUT invar,INPUT losvar,INPUT "",OUTPUT meddelandevar,OUTPUT alltOK).   
END PROCEDURE.
PROCEDURE btnfvisa_UI :
   {AVBGOM2.I}
   RUN visdep_UI IN depaapph (OUTPUT TABLE tidut).                            
   RUN UTRAPP.W (INPUT "Upplagda depåer").
   {AVBFRAM2.I}
END PROCEDURE.
PROCEDURE btnfut_UI :
   {OMSTARTAVGURUH.I} 
   FIND FIRST depatemp NO-LOCK NO-ERROR.
   IF AVAILABLE depatemp THEN DO:
      RUN depsek_UI.   
      IF musz = FALSE THEN DO:
         uttag = TRUE.         
         {AVBGOM2.I}
         IF Guru.Konstanter:appcon THEN DO:                           
            RUN AVSKAP.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
            (OUTPUT TABLE avdtemp).
         END.
         ELSE DO:
            RUN AVSKAP.P 
            (OUTPUT TABLE avdtemp).                  
         END.
         IF Guru.Konstanter:appcon THEN DO:                           
            RUN ARBARTS.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
            (OUTPUT TABLE aarttemp).
         END.
         ELSE DO:
            RUN ARBARTS.P 
            (OUTPUT TABLE aarttemp).                  
         END.
         IF Guru.Konstanter:appcon THEN DO:                           
            RUN ANSBER.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
            (OUTPUT TABLE ansvaraotemp,OUTPUT TABLE beredartemp,OUTPUT TABLE projtemp).
         END.
         ELSE DO:
            RUN ANSBER.P 
            (OUTPUT TABLE ansvaraotemp,OUTPUT TABLE beredartemp,OUTPUT TABLE projtemp).
         END.
         {OMRHMT.I}     
         bestvad = 2.
         {BESTHMT.I}                  
         akval = 1. 
         EMPTY TEMP-TABLE uppvaltemp NO-ERROR.
         EMPTY TEMP-TABLE visa NO-ERROR.            
         vallista = 41.
         CREATE visa.
         ASSIGN
         visa.ORDNING = 41
         visa.UPPFOLJVAL = 41
         visa.KUURVAL = TRUE
         visa.DELNRKOLL = TRUE.         
         visa.UT = Guru.Konstanter:gaok + "/Kund - Uttag-Returer".
         CREATE uppvaltemp.
         ASSIGN         
         uppvaltemp.ENDBEST = ?               
         uppvaltemp.VISPERAR = TRUE    
         uppvaltemp.STARTDATUM = DATE(01,01,YEAR(TODAY))
         uppvaltemp.SLUTDATUM  = TODAY
         uppvaltemp.AVSLUTSTART = DATE(01,01,YEAR(TODAY))
         uppvaltemp.AVSLUTSLUT = TODAY
         uppvaltemp.TILLFALLFAST = 1
         SUBSTRING(uppvaltemp.PROJEKTOR,1,20) = "ALLA"
         uppvaltemp.BEREDARE = "ALLA"
         uppvaltemp.ARBANSVARIG = "ALLA"
         uppvaltemp.BESTNAMN = "ALLA"         
         uppvaltemp.OMRNAMN = "ALLA"
         uppvaltemp.AVDNAMN = "ALLA"
         uppvaltemp.AVDNR = "ALLA"
         uppvaltemp.FAKTTYP = "ALLA"
         uppvaltemp.PAAV = 1
         uppvaltemp.MANUPPDEL = FALSE
         uppvaltemp.VALDLISTA = visa.UT.            
         RUN depao_UI.
         RUN StartTrummaDS_UI.
         RUN MDPKUURVALU.W 
         (INPUT-OUTPUT vallista ,
          OUTPUT aonummer ,
          OUTPUT delnummer ,
          INPUT-OUTPUT TABLE uppvaltemp, 
          INPUT-OUTPUT TABLE bestkundallt,
          INPUT-OUTPUT TABLE omrtemp, 
          INPUT-OUTPUT TABLE avdtemp).
          musz = FALSE. 
         RUN SlutTrummaDS_UI.        
         {AVBFRAM2.I}
      END.    
      ELSE DO:
         RUN sekfel_UI.
      END.       
   END.          
   ELSE DO:
      MESSAGE "Det finns ingen depå upplagd. Klicka på administration och därefter depå för att lägga upp en ny depå"
      VIEW-AS ALERT-BOX.
   END.  
   uttag = FALSE.
   {musarrow.i} 
END PROCEDURE.
PROCEDURE btnfsek_UI :
   {OMSTARTAVGURUH.I}   
   musz = FALSE.
   IF NOT AVAILABLE depatemp THEN DO:
      MESSAGE "Markera en depå!" VIEW-AS ALERT-BOX.
      RETURN.
   END.
   IF Guru.Konstanter:globniv NE 0 THEN DO:
      IF depatemp.ANVANDARE NE Guru.Konstanter:globanv THEN musz = TRUE.
      ELSE musz = FALSE.
   END.   
   IF musz = FALSE THEN DO:      
      {AVBGOM2.I}
      RUN DEPSEKV.W.
      {AVBFRAM2.I}  
   END.
   ELSE DO:
      MESSAGE "Du är inte behörig att ändra sekretessen för depå - " +
      depatemp.BENAMNING + "." VIEW-AS ALERT-BOX.
   END.         
   {musarrow.i}
END PROCEDURE.
PROCEDURE btnfrapp_UI :
   {OMSTARTAVGURUH.I}      
   FIND FIRST depatemp NO-LOCK NO-ERROR.
   IF AVAILABLE depatemp THEN DO:
      RUN depsek_UI.   
      IF musz = FALSE THEN DO:
         {AVBGOM2.I}
         RUN StartTrummaDS_UI.
         RUN DEPRAPPV.W.
         RUN SlutTrummaDS_UI.
         {AVBFRAM2.I}
      END.    
      ELSE DO:
         RUN sekfel_UI.
      END.        
   END.
   ELSE DO:
      MESSAGE "Det finns ingen depå upplagd. Klicka på administration och därefter depå för att lägga upp en ny depå."
      VIEW-AS ALERT-BOX.
   END.      
   {musarrow.i}  
END PROCEDURE.
PROCEDURE btnfmtrlpris_UI :
   
END PROCEDURE.
PROCEDURE btnfmtrl_UI :
   {OMSTARTAVGURUH.I}
   {AVBGOM2.I}
   {AMERICANEUROPEAN.I}
   RUN MTRLADMV.W.
   {EUROPEANAMERICAN.I}
   {AVBFRAM2.I}
   {musarrow.i}
END PROCEDURE.
PROCEDURE btnfleve_UI :
   {OMSTARTAVGURUH.I}
   {AVBGOM2.I}
   RUN LEVREG.W.
   {AVBFRAM2.I}
   {musarrow.i}
END PROCEDURE.
PROCEDURE btnflev_UI :
   {OMSTARTAVGURUH.I}   
   FIND FIRST depatemp NO-LOCK NO-ERROR.
   IF AVAILABLE depatemp THEN DO:
      RUN depsek_UI.   
      IF musz = FALSE THEN DO:
         IF Guru.Konstanter:globforetag = "snat" THEN DO:
            {AVBGOM2.I}
            RUN StartTrummaDS_UI.             
            EMPTY TEMP-TABLE lplagertrum NO-ERROR.                 
            RUN LEVERANSVAO.W (INPUT 1, INPUT 0, INPUT-OUTPUT TABLE lplagertrum, INPUT-OUTPUT TABLE eaobest_mtrl).
            EMPTY TEMP-TABLE lplagertrum NO-ERROR.
            RUN SlutTrummaDS_UI.
            {AVBFRAM2.I}
         END.
         ELSE DO:   
            {AVBGOM2.I}
            RUN StartTrummaDS_UI.
            RUN LEVERANSV.W.
            RUN SlutTrummaDS_UI.
            {AVBFRAM2.I}
         END.   
      END.    
      ELSE DO:
         RUN sekfel_UI.
      END.     
   END.        
   ELSE DO:
      MESSAGE "Det finns ingen depå upplagd. Klicka på administration och därefter depå för att lägga upp en ny depå"
      VIEW-AS ALERT-BOX.
   END.       
   {musarrow.i}  
END PROCEDURE.
PROCEDURE btnflas_UI :
   EMPTY TEMP-TABLE felmeddtemp  NO-ERROR. 
   
   RUN anvdepkoll_UI IN depaapph (INPUT vald_depa ,INPUT Guru.Konstanter:globanv ,OUTPUT danv,OUTPUT TABLE felmeddtemp ).
   FIND FIRST felmeddtemp NO-ERROR.
   IF AVAILABLE felmeddtemp THEN DO:
      
      IF Guru.Konstanter:globanv = danv OR Guru.Konstanter:globanv = depatemp.ANVANDARE OR Guru.Konstanter:globniv = 0  THEN DO:               
         MESSAGE felmeddtemp.FELMEDD VIEW-AS ALERT-BOX
         QUESTION BUTTONS YES-NO UPDATE svar AS LOGICAL.         
         IF svar THEN DO: 
            RUN anvdeplbort_UI IN depaapph (INPUT vald_depa ).
            DELETE felmeddtemp.
         END.
         ELSE DO:                  
            DELETE felmeddtemp.
            RETURN NO-APPLY.
         END.
      END.
      ELSE DO:
         MESSAGE felmeddtemp.FELMEDD VIEW-AS ALERT-BOX.                    
         DELETE felmeddtemp.
         RETURN NO-APPLY.
      END.
   END.          
END PROCEDURE.
PROCEDURE btnflager_UI :
   {OMSTARTAVGURUH.I}  
   FIND FIRST depatemp NO-LOCK NO-ERROR.
   IF AVAILABLE depatemp THEN DO:
      RUN depsek_UI.       
      IF musz = FALSE THEN DO:   
         EMPTY TEMP-TABLE felmeddtemp  NO-ERROR. 
         RUN anvdepkollti_UI IN depaapph (INPUT vald_depa ,INPUT Guru.Konstanter:globanv ,OUTPUT danv,OUTPUT TABLE felmeddtemp ).
         FIND FIRST felmeddtemp NO-ERROR.
         IF AVAILABLE felmeddtemp THEN DO:           
            MESSAGE felmeddtemp.FELMEDD VIEW-AS ALERT-BOX
            QUESTION BUTTONS YES-NO UPDATE svar AS LOGICAL.         
            IF svar THEN DO:
               IF Guru.Konstanter:globanv = danv THEN DO:
                  /*om den användare som låser går in igen så ska den komma in. behöver inte låsa upp och låsa igen.*/
                  DELETE felmeddtemp.                                             
                  {AVBGOM2.I}
                  RUN DEPLAGERV.W.
                  {AVBFRAM2.I}                     
                  RUN anvdeplbort_UI IN depaapph (INPUT vald_depa ).
               END.
               ELSE DO:               
                  DELETE felmeddtemp.
                  depatitta = TRUE.
                  {AVBGOM2.I}
                  RUN DEPLAGERV.W.
                  {AVBFRAM2.I}   
                  depatitta = FALSE.
               END.   
            END.
            ELSE DO:                  
               DELETE felmeddtemp.
               RETURN NO-APPLY.
            END.         
         END.  
         ELSE DO:
            RUN anvdeplas_UI IN depaapph (INPUT vald_depa,INPUT Guru.Konstanter:globanv, INPUT "Lager" ).
            {AVBGOM2.I}
            RUN DEPLAGERV.W.
            {AVBFRAM2.I}  
            RUN anvdeplbort_UI IN depaapph (INPUT vald_depa ).
         END.
      END.    
      ELSE DO:
         RUN sekfel_UI.
      END.     
   END. 
   ELSE DO:
      MESSAGE "Det finns ingen depå upplagd. Klicka på administration och därefter depå för att lägga upp en ny depå"
      VIEW-AS ALERT-BOX.
   END.         
   {musarrow.i} 
END PROCEDURE.
PROCEDURE btnfinventering_UI :
   {OMSTARTAVGURUH.I} 
   FIND FIRST depatemp NO-LOCK NO-ERROR.
   IF AVAILABLE depatemp THEN DO:
      RUN depsek_UI.   
      IF musz = FALSE THEN DO:
         EMPTY TEMP-TABLE felmeddtemp  NO-ERROR. 
         RUN anvdepkolltiinv_UI IN depaapph (INPUT vald_depa ,INPUT Guru.Konstanter:globanv ,OUTPUT danv,OUTPUT TABLE felmeddtemp ).
         FIND FIRST felmeddtemp NO-ERROR.
         IF AVAILABLE felmeddtemp THEN DO:
            /*ingen möjlighet att titta eftermissöde Göran Sandin 20111125*/
            MESSAGE felmeddtemp.FELMEDD VIEW-AS ALERT-BOX.            
            DELETE felmeddtemp.
            RETURN NO-APPLY.                
         END.  
         ELSE DO:
            IF Guru.Konstanter:varforetypval[57] = 1 THEN DO:               
               /*koll in inventering pågår*/
               edatvar = ?.
               RUN kollinv_UI IN depaapph (INPUT vald_depa, OUTPUT  edatvar  ).
               /*IF edatvar = ? THEN DO:                         
                  MESSAGE "Vill du påbörja inventering? Bokade trummor kommer då att belastas projektet och belasta saldot i depå. Går ej att ångra."  VIEW-AS ALERT-BOX
                  QUESTION BUTTONS YES-NO UPDATE svar AS LOGICAL.         
                  IF svar THEN DO:
                     RUN anvdeplas_UI IN depaapph (INPUT vald_depa,INPUT Guru.Konstanter:globanv, INPUT "Inventering" ).
                     {AVBGOM2.I}                                 
                     RUN StartTrummaDS_UI.
                     RUN INVENTV.W.
                     RUN SlutTrummaDS_UI.
                     
                     {AVBFRAM2.I}  
                     RUN anvdeplbort_UI IN depaapph (INPUT vald_depa ).
                  END.
                  ELSE DO:                                    
                     RETURN NO-APPLY.
                  END.
               END.*/
               /*Trummor som är uttagna ska inte tömmas!!
               enr på truma ska inte inventeras 
               enligt Ingrid E 20200316*/
               IF edatvar = ? THEN DO:                         
                  MESSAGE "Vill du påbörja inventering?"  VIEW-AS ALERT-BOX
                  QUESTION BUTTONS YES-NO UPDATE svar AS LOGICAL.         
                  IF svar THEN DO:
                     RUN anvdeplas_UI IN depaapph (INPUT vald_depa,INPUT Guru.Konstanter:globanv, INPUT "Inventering" ).
                     {AVBGOM2.I}                                 
                     RUN StartTrummaDS_UI.
                     RUN INVENTV.W.
                     RUN SlutTrummaDS_UI.
                     
                     {AVBFRAM2.I}  
                     RUN anvdeplbort_UI IN depaapph (INPUT vald_depa ).
                  END.
                  ELSE DO:                                    
                     RETURN NO-APPLY.
                  END.
               END.
               ELSE DO:
                  RUN anvdeplas_UI IN depaapph (INPUT vald_depa,INPUT Guru.Konstanter:globanv, INPUT "Inventering" ).
                  {AVBGOM2.I}                                 
                  RUN StartTrummaDS_UI.
                  RUN INVENTV.W.
                  RUN SlutTrummaDS_UI.                  
                  {AVBFRAM2.I}  
                  RUN anvdeplbort_UI IN depaapph (INPUT vald_depa ).
               END.      
           END.
           ELSE DO:             
               RUN anvdeplas_UI IN depaapph (INPUT vald_depa,INPUT Guru.Konstanter:globanv, INPUT "Inventering" ).
               {AVBGOM2.I}
               RUN INVENTV.W.
               {AVBFRAM2.I}  
               RUN anvdeplbort_UI IN depaapph (INPUT vald_depa ).
            END.   
         END.
      END.    
      ELSE DO:
         RUN sekfel_UI.
      END.      
   END.          
   ELSE DO:
      MESSAGE "Det finns ingen depå upplagd. Klicka på administration och därefter depå för att lägga upp en ny depå"
      VIEW-AS ALERT-BOX.
   END.      
   {musarrow.i} 
END PROCEDURE.

PROCEDURE btnfbstat_UI :
   {OMSTARTAVGURUH.I}   
   FIND FIRST depatemp NO-LOCK NO-ERROR.
   IF AVAILABLE depatemp THEN DO:
      RUN depsek_UI.   
      IF musz = FALSE THEN DO:
         {AVBGOM2.I}
         RUN DEBESTATV.W.
         {AVBFRAM2.I}
      END.    
      ELSE DO:
         RUN sekfel_UI.
      END.     
   END.        
   ELSE DO:
      MESSAGE "Det finns ingen depå upplagd. Klicka på administration och därefter depå för att lägga upp en ny depå"
      VIEW-AS ALERT-BOX.
   END.       
   {musarrow.i}  
END PROCEDURE.
PROCEDURE btnfbest_UI :
   FIND FIRST depatemp NO-LOCK NO-ERROR.
   IF AVAILABLE depatemp THEN DO:  
      RUN depsek_UI.   
      IF musz = FALSE THEN DO:
         FIND FIRST depatemp WHERE depatemp.DEP-NR = vald_depa NO-LOCK NO-ERROR.        
         IF AVAILABLE depatemp THEN DO:
            {AVBGOM2.I}
            RUN StartTrummaDS_UI. 
            RUN BESTHEMV.W (INPUT depatemp.BENAMNING).
            RUN SlutTrummaDS_UI.
         END.
         ELSE DO:
            MESSAGE "Kontakta Elpool 090-184540" VIEW-AS ALERT-BOX.
         END.         
         {AVBFRAM2.I}
      END.    
      ELSE DO:
         musz = FALSE. 
         RUN sekfel_UI.
      END.      
   END.           
   ELSE DO:
      MESSAGE "Det finns ingen depå upplagd. Klicka på administration och därefter depå för att lägga upp en ny depå"
      VIEW-AS ALERT-BOX.
   END.      
   {musarrow.i}
END PROCEDURE.
PROCEDURE btnny_UI :
   {OMSTARTAVGURUH.I}   
   vemanvandare = ?.
   RUN DEPAV.W (INPUT-OUTPUT vemanvandare).   
   IF musz = FALSE THEN DO:       
      FIND FIRST depatemp WHERE depatemp.DEP-NR = vemanvandare
      NO-LOCK NO-ERROR.   
      IF AVAILABLE depatemp THEN DO:
         RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(depatemp)).              
         RUN openbdyn_UI IN brwproc[1] (INPUT "").
         RUN lastselectdyn_UI IN brwproc[1].     
      END.      
   END.
   musz = FALSE.       
   {musarrow.i}
END PROCEDURE.
PROCEDURE selectfoc_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(depatemph) THEN DO:
      depatemph = TEMP-TABLE depatemp:DEFAULT-BUFFER-HANDLE.
   END.
   RUN selectrowid_UI IN brwproc[1] (OUTPUT brwrowid).
   RUN selectrecid_UI IN brwproc[1] (OUTPUT brwrecid).
   FIND FIRST depatemp WHERE ROWID(depatemp) = brwrowid NO-LOCK NO-ERROR.   
END PROCEDURE.

PROCEDURE btnbort_UI :
   {OMSTARTAVGURUH.I}
   RUN selectfoc_UI.   
   IF NOT AVAILABLE depatemp THEN DO:
      RETURN NO-APPLY.
   END.
   musz = FALSE.
   IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "GKAL" OR Guru.Konstanter:globforetag = "LULE"  OR Guru.Konstanter:globforetag = "SNAT" OR
   Guru.Konstanter:globforetag = "BORL" OR Guru.Konstanter:globforetag = "BODE" OR Guru.Konstanter:globforetag = "KRAF" THEN DO:             
      IF Guru.Konstanter:globniv NE 0 THEN DO:
         IF depatemp.ANVANDARE NE Guru.Konstanter:globanv THEN musz = TRUE.
         ELSE musz = FALSE.
      END.         
   END.
   IF musz = FALSE THEN DO:
      MESSAGE "Vill du ta bort depå - " + depatemp.BENAMNING VIEW-AS ALERT-BOX
      QUESTION BUTTONS YES-NO UPDATE svar AS LOGICAL.         
      IF svar THEN DO:
         RUN depbort_UI IN depaapph (INPUT vald_depa,OUTPUT TABLE felmeddtemp).                   
         FIND FIRST felmeddtemp NO-ERROR.
         IF AVAILABLE felmeddtemp THEN DO:
            MESSAGE felmeddtemp.FELMEDD VIEW-AS ALERT-BOX.
            DELETE felmeddtemp.
            RETURN NO-APPLY.
         END.         
         DELETE depatemp.
         RUN selnextprevrow_UI IN brwproc[1].
         RUN refreshbrw_UI IN brwproc[1].
         RUN lastselectdyn_UI IN brwproc[1].                         
         {musarrow.i}
      END.     
   END.
   ELSE DO:
      MESSAGE "Du är inte behörig att ta bort depå - " +
      depatemp.BENAMNING + "." VIEW-AS ALERT-BOX.
   END.          
END PROCEDURE.
PROCEDURE avb_UI :
   MESSAGE "Du avslutar nu " + SUBSTRING(foretemp.VERSION,1,10)
   VIEW-AS ALERT-BOX QUESTION BUTTONS OK-CANCEL UPDATE val AS LOGICAL.   
   IF val = FALSE THEN RETURN NO-APPLY.
   RUN avb_UI IN huvprogh.
END PROCEDURE.
PROCEDURE btnand_UI :   
   RUN selectfoc_UI.
   IF NOT AVAILABLE depatemp THEN DO:
      RETURN NO-APPLY.
   END.
   vemanvandare = depatemp.DEP-NR.
   IF Guru.Konstanter:globforetag = "ELPA" OR  Guru.Konstanter:globforetag = "GKAL" OR Guru.Konstanter:globforetag = "LULE"  OR Guru.Konstanter:globforetag = "SNAT" OR
   Guru.Konstanter:globforetag = "BORL" OR Guru.Konstanter:globforetag = "BODE" OR Guru.Konstanter:globforetag = "KRAF" THEN DO:       
      musz = FALSE.
      IF Guru.Konstanter:globniv NE 0 THEN DO:
         IF depatemp.ANVANDARE NE Guru.Konstanter:globanv THEN musz = TRUE.
         ELSE musz = FALSE.
      END.   
      IF musz = FALSE THEN DO:
         RUN DEPAV.W (INPUT-OUTPUT vemanvandare).                  
      END.
      ELSE DO:
         MESSAGE "Du är inte behörig att ändra depå - " +
         depatemp.BENAMNING + "." VIEW-AS ALERT-BOX.
      END.
   END.
   ELSE DO:      
      RUN DEPAV.W (INPUT-OUTPUT vemanvandare).      
   END.   
   IF musz = FALSE THEN DO:       
      FIND FIRST depatemp WHERE depatemp.DEP-NR = vemanvandare
      NO-LOCK NO-ERROR.   
      IF AVAILABLE depatemp THEN DO:
         RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(depatemp)).              
         RUN openbdyn_UI IN brwproc[1] (INPUT "").
         RUN lastselectdyn_UI IN brwproc[1].     
      END.    
   END.   
   musz = FALSE.
END PROCEDURE.
PROCEDURE brwdepa_UI :   
   RUN selectfoc_UI.
   IF AVAILABLE depatemp THEN DO:
      vald_depa = depatemp.DEP-NR. 
      IF Guru.Konstanter:globforetag = "NIKLAS" {GLOBVES.I} THEN DO:
         DO TRANSACTION:
            FIND FIRST depsektemp WHERE depsektemp.ANVANDARE = Guru.Konstanter:globanv EXCLUSIVE-LOCK NO-ERROR.
            IF AVAILABLE depsektemp THEN DO:
               depsektemp.DEP-NR = depatemp.DEP-NR.
               RUN depsekspar_UI IN depaapph (INPUT Guru.Konstanter:globanv,INPUT depatemp.DEP-NR).                
            END.
         END.      
      END.
   END.
END PROCEDURE.
PROCEDURE depsek_UI :
   RUN brwdepa_UI.
   musz = FALSE.
   IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "GKAL" OR Guru.Konstanter:globforetag = "LULE"  OR Guru.Konstanter:globforetag = "SNAT" OR
   Guru.Konstanter:globforetag = "BORL" OR Guru.Konstanter:globforetag = "BODE" OR Guru.Konstanter:globforetag = "KRAF" THEN DO:                 
      IF Guru.Konstanter:globniv NE 0 THEN DO:
         RUN depsek_UI IN depaapph (INPUT vald_depa,INPUT Guru.Konstanter:globanv, OUTPUT musz).                            
      END.
      ELSE DO:
         musz = FALSE.
      END.      
   END.   
END PROCEDURE.
PROCEDURE sekfel_UI :
   FIND FIRST depatemp WHERE depatemp.DEP-NR = vald_depa USE-INDEX DEP-NR
   NO-LOCK NO-ERROR.
   MESSAGE "Du har inte behörighet till depå - " + depatemp.BENAMNING
   VIEW-AS ALERT-BOX TITLE "Meddelande".   
END PROCEDURE.
PROCEDURE main_UI :
   {OMSTARTAVGURUH.I}
   {ALLSTARTDYN.I}
   C-Win:TITLE = "Depå - Lager" + "-" + "Systemsupport 090/184540    elpool.ume@elpool.se  " + foretemp.ATRHOME.
    
   RUN VISMEDDU.W.   
   IF Guru.Konstanter:globanv = "SELNDEPA" THEN DO:
      RUN LastTimeDepaLoggOutSet_UI.
      FRAME-DEPALOGG:HIDDEN = FALSE.
      &Scoped-define TimerKor "Depaloggout_UI"
      {TIMERSTART.I}
   END.   
   {musarrow.i}
END PROCEDURE.
PROCEDURE allstartbrw_UI :
   DEFINE VARIABLE korextra AS LOGICAL NO-UNDO.
   korextra = FALSE.
   IF NOT VALID-HANDLE(brwproc[1]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[1] (INPUT BRW_DEPA). 
   IF NOT VALID-HANDLE(depaapph) THEN korextra = TRUE.
   IF Guru.Konstanter:appcon THEN DO:
      IF NOT VALID-HANDLE(depaapph) THEN RUN DEPAAPP.P PERSISTENT SET depaapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
   END.
   ELSE DO:
      IF NOT VALID-HANDLE(depaapph) THEN RUN DEPAAPP.P PERSISTENT SET depaapph.
   END.  
   IF Guru.Konstanter:appcon THEN DO:
      RUN FINNSTABELL.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT (INPUT "TRUMMADEP", OUTPUT logresult).
   END.
   ELSE DO:
      RUN FINNSTABELL.P (INPUT "TRUMMADEP", OUTPUT logresult).
   END.
    
   IF korextra = TRUE THEN DO:
      korextra = FALSE.
      RUN korextra_UI.
   END.
END PROCEDURE.

PROCEDURE korextra_UI :
   ASSIGN
   lista = FALSE
   uttag = FALSE.   
   FIND FIRST depatemp  NO-LOCK NO-ERROR.   
   IF NOT AVAILABLE depatemp THEN DO:
      RUN dephmtn_UI IN depaapph (OUTPUT TABLE depatemp,OUTPUT TABLE levtemp).   
   END.
   RUN sekhmtn_UI IN depaapph (OUTPUT TABLE depsektemp).   
   RUN openbdyn_UI IN brwproc[1] (INPUT "").   
   IF Guru.Konstanter:globforetag = "CELPA" {GLOBVES.I} THEN DO:     
      FIND FIRST depsektemp WHERE depsektemp.ANVANDARE = Guru.Konstanter:globanv NO-LOCK NO-ERROR.
      IF AVAILABLE depsektemp THEN DO:
         FIND FIRST depatemp WHERE depatemp.DEP-NR = depsektemp.DEP-NR NO-LOCK NO-ERROR.
         IF AVAILABLE depatemp THEN DO:           
            vald_depa = depatemp.DEP-NR. 
            RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(depatemp)).
            RUN lastselectdyn_UI IN brwproc[1].               
         END.
      END.
      ELSE DO:
         FIND FIRST depatemp USE-INDEX DEP-NR NO-LOCK NO-ERROR.
         IF AVAILABLE depatemp THEN DO:         
            CREATE depsektemp.
            ASSIGN
            depsektemp.DEP-NR = depatemp.DEP-NR
            depsektemp.ANVANDARE = Guru.Konstanter:globanv.
            vald_depa = depatemp.DEP-NR. 
            RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(depatemp)).
            RUN lastselectdyn_UI IN brwproc[1].               
            RUN depsekspar_UI IN depaapph (INPUT Guru.Konstanter:globanv,INPUT depatemp.DEP-NR).                
         END.
      END.
   END.
   ELSE DO:
      FIND FIRST depatemp NO-LOCK NO-ERROR.
      IF AVAILABLE depatemp THEN DO:
         RUN selectfoc_UI.         
         APPLY "VALUE-CHANGED" TO BRW_DEPA.
      END.
   END.  
   RUN sek_UI.
END PROCEDURE.
PROCEDURE PlaceraKnapp_UI :
   
   Guru.GlobalaVariabler:StartRadForKnappar = BRW_DEPA:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_BEST).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_LAGER).        
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_RAPP).         
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_BSTAT).        
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_LEV).          
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_INVENTERING).  
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_UT).           
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_LEVE).         
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_MTRL).         
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_MTRLPRIS).     
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_SEK).          
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_VISA).         
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_LAS). 
   Guru.GlobalaVariabler:StartKolumnForKnappar = BRW_DEPA:COLUMN + BRW_DEPA:WIDTH-CHARS + 3. 
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_BEST,FALSE).
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_LAGER,FALSE).        
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_RAPP,FALSE).         
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_BSTAT,FALSE).        
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_LEV,FALSE).          
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_INVENTERING,FALSE).  
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_UT,FALSE).           
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_LEVE,FALSE).         
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_MTRL,FALSE).         
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_MTRLPRIS,FALSE).     
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_SEK,FALSE).          
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_VISA,FALSE).         
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_LAS,FALSE). 
   Guru.GlobalaVariabler:StartRadForKnappar = FILL-IN_AV-DEPANVNAMN:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(FILL-IN_AV-DEPANVNAMN).
   Guru.Konstanter:PlaceraKnapparLodratt(FILL-IN_DEPANVANDARE).
   Guru.Konstanter:PlaceraKnapparLodratt(FILL-IN_AV-DEPLOSEN). 
   FILL-IN_AV-DEPLOSEN:COLUMN = FILL-IN_DEPANVANDARE:COLUMN.
   FILL-IN_AV-DEPANVNAMN:COLUMN = FILL-IN_DEPANVANDARE:COLUMN.  
   Guru.GlobalaVariabler:StartRadForKnappar = FILL-IN_DEPANVANDARE:ROW + 5.       
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_LOGGIN).
   BTN_LOGGOUT:ROW = BTN_LOGGIN:ROW.   
   Guru.GlobalaVariabler:StartKolumnForKnappar = FRAME-DEPALOGG:WIDTH-CHARS.  
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(BTN_LOGGOUT).
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(BTN_LOGGIN).  
   
END PROCEDURE.
PROCEDURE sek_UI :
   
   Guru.GlobalaVariabler:collefth = ?.
   IF Guru.Konstanter:bulasekvar[1] = TRUE THEN DO:
      FBTN_BEST:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_BEST:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).   
   END.
   ELSE FBTN_BEST:HIDDEN = TRUE.
   IF Guru.Konstanter:bulasekvar[2] = TRUE THEN DO:
      FBTN_LAGER:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_LAGER:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).       
   END.
   ELSE FBTN_LAGER:HIDDEN = TRUE.
   IF Guru.Konstanter:mtrlsekvar[6] = TRUE THEN FBTN_RAPP:HIDDEN = TRUE.
   ELSE DO:   
      IF Guru.Konstanter:bulasekvar[3] = TRUE THEN DO:
         FBTN_RAPP:HIDDEN = FALSE.  
         Guru.GlobalaVariabler:colrighth = FBTN_RAPP:HANDLE.           
         RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).       
      END.
      ELSE FBTN_RAPP:HIDDEN = TRUE.
   END.
   IF Guru.Konstanter:bulasekvar[7] = TRUE THEN DO:
      FBTN_BSTAT:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_BSTAT:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).       
   END.
   ELSE FBTN_BSTAT:HIDDEN = TRUE.
   IF Guru.Konstanter:bulasekvar[4] = TRUE THEN DO:
      FBTN_LEV:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_LEV:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.   
   ELSE FBTN_LEV:HIDDEN = TRUE.
   IF Guru.Konstanter:bulasekvar[5] = TRUE THEN DO:
      FBTN_INVENTERING:HIDDEN = FALSE.              
      Guru.GlobalaVariabler:colrighth = FBTN_INVENTERING:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.
   ELSE FBTN_INVENTERING:HIDDEN = TRUE.
   IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "GKAL" OR Guru.Konstanter:globforetag = "LULE" OR Guru.Konstanter:globforetag = "VAST"  OR Guru.Konstanter:globforetag = "SNAT" OR
   Guru.Konstanter:globforetag = "BORL" OR Guru.Konstanter:globforetag = "BODE" OR Guru.Konstanter:globforetag = "KRAF" THEN DO:
      IF Guru.Konstanter:bulasekvar[2] = TRUE THEN DO:
         FBTN_UT:HIDDEN = FALSE. 
         Guru.GlobalaVariabler:colrighth = FBTN_UT:HANDLE.           
         RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).    
      END.
      ELSE FBTN_UT:HIDDEN = TRUE.   
   END.     
   ELSE FBTN_UT:HIDDEN = TRUE.
        
   IF Guru.Konstanter:bulasekvar[6] = TRUE THEN DO:     
      FBTN_LEVE:HIDDEN = FALSE.              
      Guru.GlobalaVariabler:colrighth = FBTN_LEVE:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
      IF Guru.Konstanter:mtrlsekvar[6] = FALSE THEN DO:
         FBTN_MTRL:HIDDEN = FALSE.              
         Guru.GlobalaVariabler:colrighth = FBTN_MTRL:HANDLE.           
         RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
      END.
      ELSE DO:
         FBTN_MTRL:HIDDEN = TRUE.
      END.
      FBTN_MTRLPRIS:HIDDEN = TRUE.
      FBTN_SEK:HIDDEN = FALSE.              
      Guru.GlobalaVariabler:colrighth = FBTN_SEK:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.
   ELSE DO:
      ASSIGN
      FBTN_LEVE:HIDDEN = TRUE
      FBTN_MTRL:HIDDEN = TRUE
      FBTN_SEK:HIDDEN = TRUE
      FBTN_MTRLPRIS:HIDDEN = TRUE.      
   END.
   FBTN_VISA:HIDDEN = FALSE.              
   Guru.GlobalaVariabler:colrighth = FBTN_VISA:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   FBTN_LAS:HIDDEN = FALSE. 
   Guru.GlobalaVariabler:colrighth = FBTN_LAS:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
END PROCEDURE.

PROCEDURE uppladd_UI :
   DEFINE INPUT PARAMETER vadladdin AS CHARACTER NO-UNDO.
   vadladd = vadladdin.
END PROCEDURE.

PROCEDURE aoao_UI :
   FIND FIRST evaldaao WHERE NO-LOCK NO-ERROR.
   IF NOT AVAILABLE evaldaao THEN DO:
      FOR EACH valdaaotemp:
         CREATE evaldaao.
         BUFFER-COPY valdaaotemp TO evaldaao.
      END.
   END.   
END PROCEDURE.

PROCEDURE depao_UI :
   IF Guru.Konstanter:globforetag = "GKAL" OR  Guru.Konstanter:globforetag = "cELPA" THEN musz = musz.
   ELSE DO:
      FIND FIRST evaldaao WHERE NO-LOCK NO-ERROR.
      IF NOT AVAILABLE evaldaao THEN DO:
         FOR EACH valdaaotemp:
            CREATE evaldaao.
            BUFFER-COPY valdaaotemp TO evaldaao.
         END.
      END.
   END.   
END PROCEDURE.

PROCEDURE hmtao_UI :
   DEFINE OUTPUT PARAMETER TABLE FOR evaldaao.
END PROCEDURE.
PROCEDURE sparao_UI :
   DEFINE INPUT PARAMETER TABLE FOR evaldaao.
END PROCEDURE.
PROCEDURE tomao_UI :
   EMPTY TEMP-TABLE evaldaao NO-ERROR. 
END PROCEDURE.


PROCEDURE borthand_UI :
   depatemph:EMPTY-TEMP-TABLE()  NO-ERROR.    
   IF VALID-HANDLE(depatemph) THEN   DELETE OBJECT depatemph NO-ERROR.
   depatemph = ?.
   {BORTBRWPROC.I}   
   IF VALID-HANDLE(depaapph) THEN DELETE PROCEDURE depaapph  NO-ERROR.
   depaapph = ?.
   
END PROCEDURE.
PROCEDURE StartTrummaDS_UI :
   DEFINE VARIABLE ClienttdSetapph AS HANDLE NO-UNDO.
   /*    Guru.GlobalaVariabler:GuruProjdepnr = 2.
   Ingrid bytte Projektlager från 1 till 2  - TILLBAKA 20191002*/   
   Guru.GlobalaVariabler:GuruProjdepnr = 1.      
   Guru.GlobalaVariabler:GuruVdepnr = vald_depa. 
   IF logresult = TRUE THEN DO:
      RUN TRUMMAKLIENTDS.P PERSISTENT SET ClienttdSetapph.
      Guru.GlobalaVariabler:ClienttdSetapph = ClienttdSetapph.
      RUN laddaTrummaDs_UI IN  Guru.GlobalaVariabler:ClienttdSetapph. 
      RUN LaddaFalt_UI IN Guru.GlobalaVariabler:ClienttdSetapph (OUTPUT TABLE lagertrum,OUTPUT TABLE aotrum).
  END.     
END PROCEDURE.
PROCEDURE SlutTrummaDS_UI :
   Guru.GlobalaVariabler:GuruProjdepnr = 0.
   Guru.GlobalaVariabler:GuruVdepnr = 0.
   IF logresult = TRUE THEN DO:
      RUN AvsTrumma_UI IN  Guru.GlobalaVariabler:ClienttdSetapph.
   END.   
   EMPTY TEMP-TABLE lagertrum NO-ERROR.
   EMPTY TEMP-TABLE aotrum NO-ERROR. 
END PROCEDURE.
