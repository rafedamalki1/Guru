/*KALKMENY.P*/
FUNCTION brwval RETURNS LOGICAL
  (  )  FORWARD.
{REVKATAR.I}
{SCADMIN.I}
{KALKWID.I}
{ALLDEF.I}
{FORETEMP.I}
&Scoped-define NEW 
{GLOBVAR2DEL1.I}

{ANVTEMPS.I}
DEFINE SHARED TEMP-TABLE berkalanvandartemp NO-UNDO LIKE anvandartemp.
 


DEFINE VARIABLE arendekalkmeny AS CHARACTER NO-UNDO.
DEFINE VARIABLE KalkClasserStart AS HANDLE NO-UNDO.
DEFINE VARIABLE EkgClasserStart AS HANDLE NO-UNDO.
DEFINE VARIABLE valkbenamnorgsize AS INTEGER NO-UNDO.
&Scoped-define SHARED SHARED
{DIRDEF.I}
{KALKALLTEMP.I}
{AVDTEMP.I}
{KONVALTEMP.I}
{AVDELNINGTEMP.I}
{HAMTAVDJUDEF.I}
{OMRTEMPW.I}
{BESTKUNDALLT.I}
{KALKSTART.I}
{EBRPRISTEMP.I}
{HOPPSEK2W.I}
{KALKYLTEMP.I}
{EJTEMP.I}

DEFINE VARIABLE x-multi AS DECIMAL NO-UNDO.
DEFINE VARIABLE y-multi AS DECIMAL NO-UNDO.
DEFINE SHARED TEMP-TABLE extravaldfasttemp NO-UNDO LIKE valdfasttemp.
DEFINE SHARED VARIABLE valkalknr     AS INTEGER NO-UNDO.
DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.
{EXTRADATA.I}
DEFINE VARIABLE kalkhmth      AS HANDLE NO-UNDO.            /* KALKHMT1.P */
DEFINE SHARED VARIABLE valomrade AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE singel    AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE skrivut   AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE vart      AS CHARACTER FORMAT "X(3)" NO-UNDO.
DEFINE SHARED VARIABLE arkopia     AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE ejkalk      AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE kalkproch   AS HANDLE NO-UNDO. /* KALKAPP1.P */
DEFINE SHARED VARIABLE kodbild     AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE konvar      AS INTEGER NO-UNDO.                                                
DEFINE SHARED VARIABLE mtrlspec    AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE offert      AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE typ_val     AS INTEGER NO-UNDO. 
DEFINE SHARED VARIABLE typpris     AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE xanmark     AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE xanmark2    AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE xdeci       AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE xfaktor     AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE xhuvud      AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE xmtrl       AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE xpris       AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE xtypmtrl    AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE xarbkod      AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE xmat AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE summkod AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE felmedd1 AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE felmedd2 AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE aoplan      AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE kalkrec     AS RECID NO-UNDO.
DEFINE SHARED VARIABLE musz      AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE summakalkylvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE infdel        AS INTEGER NO-UNDO.
DEFINE VARIABLE antal_raknare AS INTEGER NO-UNDO.
DEFINE VARIABLE uppvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE uppnrvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE fastkalkvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE kalklog AS LOGICAL NO-UNDO.
DEFINE VARIABLE svar AS LOGICAL NO-UNDO.
DEFINE VARIABLE antal_valda   AS INTEGER NO-UNDO.
DEFINE VARIABLE status-ok     AS LOGICAL NO-UNDO.
DEFINE VARIABLE jid AS CHARACTER NO-UNDO.
DEFINE VARIABLE aonrapph AS HANDLE NO-UNDO.
DEFINE VARIABLE nyttaoapph2 AS HANDLE NO-UNDO. 
DEFINE VARIABLE utfdel        AS LOGICAL NO-UNDO.
DEFINE VARIABLE nyakalknr     AS INTEGER NO-UNDO.
DEFINE VARIABLE ebrartal      AS INTEGER NO-UNDO.
DEFINE VARIABLE sparkalknr AS INTEGER NO-UNDO.
DEFINE VARIABLE valdutf AS INTEGER NO-UNDO.
framesizeh = framesizeextrah.
DEFINE VARIABLE valdkalkh AS HANDLE NO-UNDO. 
valdkalkh = TEMP-TABLE valdfasttemp:DEFAULT-BUFFER-HANDLE. 
ON 'MOUSE-SELECT-DBLCLICK':U OF BRW_VKALK PERSISTENT RUN mdbrwkalk_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF BRW_VKALK PERSISTENT RUN vcbrwkalk_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_AVB PERSISTENT RUN avb_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_BORT PERSISTENT RUN btnbort_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_HAMT PERSISTENT RUN btnhmt_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_NY PERSISTENT RUN btnny_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF CMB_AVD PERSISTENT RUN cmbavd_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF CMB_JURP PERSISTENT RUN cmbjurp_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_ADM PERSISTENT RUN btnadm_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_INAKTIV PERSISTENT RUN btninaktiv_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_ARENDESTATUS PERSISTENT RUN btnarendestatus_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_EKG PERSISTENT RUN btnekg_UI IN THIS-PROCEDURE.

ON 'CHOOSE':U OF FBTN_KALK PERSISTENT RUN btnkalk_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_VISKAL PERSISTENT RUN btnvisa_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_SLAIHOP PERSISTENT RUN btnslaihop_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_JMFKALK PERSISTENT RUN btnjmfkalk_UI IN THIS-PROCEDURE.

ON 'VALUE-CHANGED':U OF TOG_ALLAKALK PERSISTENT RUN mddelnr_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN_DELNR PERSISTENT RUN mddelnr_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN_DELNR PERSISTENT RUN akdelnr_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN_EAONR PERSISTENT RUN akeaonr_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN_EAONR PERSISTENT RUN mdeaonr_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN_EKALNR PERSISTENT RUN akkalk_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN_EKALNR PERSISTENT RUN mdkalk_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_AOF PERSISTENT RUN sparaaofavoriter_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_HAOF PERSISTENT RUN hmtfavoriter_UI IN THIS-PROCEDURE.

PROCEDURE autofavo_UI :
   FIND FIRST valdfasttemp NO-LOCK NO-ERROR.
   IF AVAILABLE valdfasttemp THEN DO:
      RUN sparaaofavoriter_UI.
   END.
END PROCEDURE.

PROCEDURE autofavode_UI :
   FIND FIRST valdfasttemp NO-LOCK NO-ERROR.
   IF AVAILABLE valdfasttemp THEN DO:
      RUN sparaaofavoriter_UI.
   END.
END PROCEDURE.

PROCEDURE hmtfavoriter_UI :
   DEFINE VARIABLE arendekalk AS CHARACTER NO-UNDO.
   DEFINE VARIABLE ttbuffh AS HANDLE NO-UNDO.
   tthandle = TEMP-TABLE valdfasttemp:HANDLE.
   ttbuffh = tthandle:DEFAULT-BUFFER-HANDLE.
   RUN ttcopy_UI IN huvprogh (INPUT TABLE-HANDLE tthandle).
   ttbuffh:EMPTY-TEMP-TABLE() NO-ERROR.
   FIND FIRST sparaladdatemp NO-ERROR.
   IF NOT AVAILABLE sparaladdatemp THEN CREATE sparaladdatemp.
   RUN arendeget_UI IN huvprogh (OUTPUT arendekalk).
   ASSIGN
   sparaladdatemp.GLOBANV = Guru.Konstanter:globanv /*Användare, i detta fall ELPAO*/
   sparaladdatemp.BENAMNING = "KALK" /*Benämnings sufix, i detta fall ELPAO$STOR*/
   sparaladdatemp.TABVAL = "KALKAONR" /*Tabellnamn*/
   sparaladdatemp.FALTVALAO = "OMRADE" /*Integer field*/
   sparaladdatemp.FALTVALDEL = "KALKNR" /*Integer field*/
   sparaladdatemp.FALTVALDATE = "".   /*DATE field*/
   EMPTY TEMP-TABLE valdfasttemp NO-ERROR. 
   IF arendekalk = "ÄRENDE" THEN sparaladdatemp.BENAMNING = arendekalk.
   RUN laddabrw_UI IN brwproc[{&RIGHT-BROWSE}]  (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp).
   RUN Kalkfavo_UI IN KalkClasserStart (INPUT-OUTPUT TABLE valdfasttemp).          
   RUN ttjmf_UI IN huvprogh (INPUT-OUTPUT ttbuffh).
   RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].  
   
END PROCEDURE.
RUN main_UI.

PROCEDURE menykalkval_UI :
   DEFINE INPUT PARAMETER vad AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER franvart2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER kalknrao2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER kalktypvar2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR kalkinmtemp.   
   ASSIGN
   franvart = franvart2
   kalknrao  = kalknrao2 
   kalktypvar = kalktypvar2.      
   RUN btnkalkstart_UI IN huvprogh (INPUT franvart, INPUT kalknrao, INPUT kalktypvar, INPUT TABLE kalkinmtemp).
   kalktypvar = kalktypvar2.
   IF vad = 1 THEN DO:
      
      RUN ny_UI.
   END.
   IF vad = 4 THEN DO:
      APPLY "CHOOSE" TO FBTN_KALK.
   END.
   IF vad = 5 THEN DO:
      APPLY "CHOOSE" TO FBTN_VISKAL.
   END.
   
   APPLY "CHOOSE" TO BTN_AVB.
END PROCEDURE.

PROCEDURE menykalk_UI :
   DEFINE INPUT PARAMETER franvart2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER kalknrao2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER kalktypvar2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR kalkinmtemp.   
   ASSIGN
   franvart = franvart2
   kalknrao  = kalknrao2 
   kalktypvar = kalktypvar2.      
   RUN btnkalkstart_UI IN huvprogh (INPUT franvart, INPUT kalknrao, INPUT kalktypvar, INPUT TABLE kalkinmtemp).
   {AVBFRAM2.I}
   RUN SetDefaultCursors IN Guru.Konstanter:hpApi.      
   WAIT-FOR CHOOSE OF BTN_AVB OR WINDOW-CLOSE OF C-WIN OR END-ERROR OF C-Win OR ENDKEY OF C-Win.
END PROCEDURE.

PROCEDURE akkalk_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN_EKALNR.
   END. 
END PROCEDURE.
PROCEDURE mdkalk_UI :
    RUN hmtenkalk_UI (INPUT FILL-IN_EKALNR:SCREEN-VALUE).
END PROCEDURE.
PROCEDURE akeaonr_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN_EAONR.
   END. 
END PROCEDURE.
PROCEDURE mdeaonr_UI :
   APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN_DELNR.
END PROCEDURE.
PROCEDURE mddelnr_UI :
   {OMSTARTAVGURUH.I}      
   RUN hmtkalaonr_UI.   
   {musarrow.i}
END PROCEDURE.
PROCEDURE akdelnr_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN_DELNR.
   END.
END PROCEDURE.
PROCEDURE btnvisa_UI :
   {OMSTARTAVGURUH.I}
   skrivut = FALSE.
   IF brwval() = TRUE THEN RETURN NO-APPLY.
   IF valdfasttemp.KALKNR = ? THEN RETURN.
   IF musz = TRUE THEN DO:
      musz = FALSE.
      RETURN.
   END.
    
   RUN kalkvisaclasser_UI (INPUT 1). 
   {musarrow.i}
     
END PROCEDURE.

PROCEDURE btnjmfkalk_UI :
   skrivut = FALSE.
   IF brwval() = TRUE THEN RETURN NO-APPLY.
   IF valdfasttemp.KALKNR = ? THEN RETURN.
   antal_valda = BRW_VKALK:NUM-SELECTED-ROWS. 
   IF antal_valda NE 2 THEN DO:      
      MESSAGE "Du kan bara välja två kalkyler!" VIEW-AS ALERT-BOX.
      musz = FALSE.
      RETURN.                
   END.
   IF musz = TRUE THEN DO:
      musz = FALSE.
      RETURN.
   END.
   {OMSTARTAVGURUH.I} 
   RUN kalkvisaclasser_UI (INPUT 3). 
   {musarrow.i}
     
END PROCEDURE.

PROCEDURE btnslaihop_UI :
   {OMSTARTAVGURUH.I}
   skrivut = FALSE.
   IF brwval() = TRUE THEN RETURN NO-APPLY.
   IF valdfasttemp.KALKNR = ? THEN RETURN.
   IF musz = TRUE THEN DO:
      musz = FALSE.
      RETURN.
   END.
    
   RUN kalkvisaclasser_UI (INPUT 2). 
   {musarrow.i}
     
END PROCEDURE.

PROCEDURE fselectfoc_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(valdkalkh) THEN DO:
      valdkalkh = TEMP-TABLE valdfasttemp:DEFAULT-BUFFER-HANDLE.
   END.
   RUN fetrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT antal_raknare,OUTPUT brwrowid) .
   FIND FIRST valdfasttemp WHERE ROWID(valdfasttemp) = brwrowid NO-LOCK NO-ERROR.
END PROCEDURE.
PROCEDURE selectfoc_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(valdkalkh) THEN DO:
      valdkalkh = TEMP-TABLE valdfasttemp:DEFAULT-BUFFER-HANDLE.
   END.
   RUN selectrowid_UI IN brwproc[{&RIGHT-BROWSE}] (OUTPUT brwrowid).
   RUN selectrecid_UI IN brwproc[{&RIGHT-BROWSE}] (OUTPUT brwrecid).
   FIND FIRST valdfasttemp WHERE ROWID(valdfasttemp) = brwrowid NO-LOCK NO-ERROR.     
END PROCEDURE.
PROCEDURE btnkalk_UI :
   IF brwval() = TRUE THEN RETURN NO-APPLY.
   RUN kalk_UI.   
   {musarrow.i}
END PROCEDURE.
PROCEDURE btnarendestatus_UI :
   DEFINE VARIABLE status-mus2 AS LOGICAL NO-UNDO.
   {OMSTARTAVGURUH.I}
   {AVBGOM2.I}
   IF Guru.GlobalaVariabler:retvalkoll = TRUE THEN DO:
      RUN SetDefaultCursors IN Guru.Konstanter:hpApi.
      Guru.GlobalaVariabler:retvalkoll = FALSE.
   END.
   status-mus2 = SESSION:SET-WAIT-STATE("").   
   {AVBFRAM2.I} 
END PROCEDURE.
PROCEDURE btnekg_UI :   
    DEFINE VARIABLE status-mus2 AS LOGICAL NO-UNDO.
    {OMSTARTAVGURUH.I}
    {AVBGOM2.I}    
    IF Guru.GlobalaVariabler:retvalkoll = TRUE THEN DO:
      RUN SetDefaultCursors IN Guru.Konstanter:hpApi.
      Guru.GlobalaVariabler:retvalkoll = FALSE.
    END.
    status-mus2 = SESSION:SET-WAIT-STATE("").
    RUN EkgStart_UI IN EkgClasserStart.
   {AVBFRAM2.I}
END PROCEDURE.

PROCEDURE btninaktiv_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   IF brwval() = TRUE THEN RETURN NO-APPLY.   
   /*inaktivera flera på en gång Lena 20200908*/
   antal_valda = BRW_VKALK:NUM-SELECTED-ROWS .
   IF antal_valda = 0 THEN RETURN.
   antal_raknare = 1.
   DO WHILE antal_raknare LE antal_valda:
      RUN fetrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT antal_raknare,OUTPUT brwrowid) .
      FIND FIRST valdfasttemp WHERE ROWID(valdfasttemp) = brwrowid NO-LOCK NO-ERROR.
      IF valdfasttemp.KALKNR = ? THEN.
      ELSE RUN inaktivfler_UI (INPUT brwrowid).
      antal_raknare = antal_raknare + 1.
   END.
   RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
   RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].   
   {musarrow.i}
END PROCEDURE.
PROCEDURE hmtkalaonr_UI :
   IF TOG_ALLAKALK:CHECKED = TRUE THEN DO:
      IF arendekalkmeny = "ÄRENDE" THEN DO:
         FOR EACH valdfasttemp WHERE valdfasttemp.AONR = FILL-IN_EAONR:SCREEN-VALUE AND 
         valdfasttemp.STATUSNIV = arendekalkmeny:
            DELETE valdfasttemp.
         END.
      END.    
      ELSE DO:
         FOR EACH valdfasttemp WHERE valdfasttemp.AONR = FILL-IN_EAONR:SCREEN-VALUE AND 
         valdfasttemp.STATUSNIV NE "ÄRENDE" :
            DELETE valdfasttemp.
         END.
      END.         
   END.  
   ELSE DO:
      IF arendekalkmeny = "ÄRENDE" THEN DO:
         FOR EACH valdfasttemp WHERE valdfasttemp.AONR = FILL-IN_EAONR:SCREEN-VALUE  AND valdfasttemp.DELNR = INTEGER(FILL-IN_DELNR:SCREEN-VALUE) AND 
         valdfasttemp.STATUSNIV = arendekalkmeny:
            DELETE valdfasttemp.
         END.
      END.    
      ELSE DO:
         FOR EACH valdfasttemp WHERE valdfasttemp.AONR = FILL-IN_EAONR:SCREEN-VALUE  AND valdfasttemp.DELNR = INTEGER(FILL-IN_DELNR:SCREEN-VALUE) AND 
         valdfasttemp.STATUSNIV NE "ÄRENDE" :
            DELETE valdfasttemp.
         END.
      END.
   END.     
   RUN sokaonrkalkyl_UI IN KalkClasserStart (INPUT FILL-IN_EAONR:SCREEN-VALUE, INPUT INTEGER(FILL-IN_DELNR:SCREEN-VALUE),INPUT TOG_ALLAKALK:CHECKED,INPUT FALSE,OUTPUT TABLE valdfasttemp APPEND).   
   IF TOG_ALLAKALK:CHECKED = TRUE THEN DO:
      FIND FIRST valdfasttemp WHERE valdfasttemp.AONR = FILL-IN_EAONR:SCREEN-VALUE NO-LOCK NO-ERROR.
   END.  
   ELSE DO:
      FIND FIRST valdfasttemp WHERE valdfasttemp.AONR = FILL-IN_EAONR:SCREEN-VALUE  AND valdfasttemp.DELNR = INTEGER(FILL-IN_DELNR:SCREEN-VALUE) NO-LOCK NO-ERROR.          
   END.                                                  
   IF NOT AVAILABLE valdfasttemp THEN DO: 
      IF arendekalkmeny = "ÄRENDE" THEN MESSAGE "Ärendet finns inte!" VIEW-AS ALERT-BOX.
      ELSE MESSAGE "Kalkyl finns inte!" VIEW-AS ALERT-BOX.
   END.
   ELSE DO:
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdfasttemp)).              
      RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
      RUN setdefaultcol_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT 5).
      IF arendekalkmeny = "ÄRENDE" THEN DO:
         RUN colsortdynbrw_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ' where valdfasttemp.STATUSNIV = "ÄRENDE"'). 
      END.    
      ELSE DO:
         RUN colsortdynbrw_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ' where valdfasttemp.STATUSNIV NE "ÄRENDE"'). 
      END.    
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].      
   END.   
END PROCEDURE.

PROCEDURE btnadm_UI :
   DEFINE VARIABLE status-mus2 AS LOGICAL NO-UNDO.
   {OMSTARTAVGURUH.I}
   {AVBGOM2.I}
   IF Guru.GlobalaVariabler:retvalkoll = TRUE THEN DO:
      RUN SetDefaultCursors IN Guru.Konstanter:hpApi.
      Guru.GlobalaVariabler:retvalkoll = FALSE.
   END.
   status-mus2 = SESSION:SET-WAIT-STATE("").
   RUN Kalkyladm_UI IN KalkClasserStart.  
   {AVBFRAM2.I}      
   {musarrow.i}
END PROCEDURE.
PROCEDURE cmbavd_UI :
   {CMB_AVDN2.I} 
END PROCEDURE.
PROCEDURE cmbjurp_UI :
   {CMB_JURP2.I}   
END PROCEDURE.
PROCEDURE btnny_UI :  
   RUN ny_UI.     
END PROCEDURE.
PROCEDURE btnhmt_UI :
   BTN_HAMT:LOAD-IMAGE("BILDER\xbtn_hamt_over.gif").
   RUN utvald_UI.
   RUN title_UI IN brwproc[{&LEFT-BROWSE}].   
   FIND FIRST utvaldfasttemp NO-ERROR.
   BTN_HAMT:LOAD-IMAGE("BILDER\xbtn_hamt.gif").
   /*Dummy */
   status-ok = BRW_UKALK:SELECT-FOCUSED-ROW() NO-ERROR.
   status-ok = BRW_UKALK:DESELECT-FOCUSED-ROW() NO-ERROR.   
   {musarrow.i}
END PROCEDURE.
PROCEDURE btnbort_UI :
   DEFINE VARIABLE ejbortkalkvar AS LOGICAL NO-UNDO.
   IF brwval() = TRUE THEN RETURN.
   IF valdfasttemp.KALKNR = ? THEN RETURN.
   IF valdfasttemp.AKTIV = FALSE THEN DO:
      MESSAGE "Kalkylen är inaktiv" VIEW-AS ALERT-BOX.
      RETURN.
   END.
   BRW_VKALK:SELECT-FOCUSED-ROW()NO-ERROR.
   FIND FIRST valdfasttemp WHERE ROWID(valdfasttemp) = valdkalkh:ROWID NO-LOCK NO-ERROR.
   IF valdfasttemp.AONR NE ? OR valdfasttemp.PLANNR NE ? THEN DO:
      IF valdfasttemp.AONR = "" OR valdfasttemp.PLANNR = "" THEN.
      ELSE DO:
         MESSAGE "Kalkylen är kopplad till ett" LC(Guru.Konstanter:gaok) "eller" LC(Guru.Konstanter:gplk) ". Borttag ej möjligt."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         RETURN.
      END.
   END.
   MESSAGE "Vill du ta bort kalkyl (" valdfasttemp.KALKNR ") med benämning: '" valdfasttemp.BENAMNING "'?"
      VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO TITLE "Meddelande" UPDATE svar.
   IF svar = FALSE THEN RETURN.
   RUN bortkalkyl_UI IN KalkClasserStart (INPUT valdfasttemp.KALKNR, OUTPUT ejbortkalkvar).
   IF ejbortkalkvar = TRUE THEN RETURN.  
   IF VALID-HANDLE(Guru.SharedVariable:btnberh) THEN RUN openb_UI IN Guru.SharedVariable:btnberh.  
   FIND FIRST utvaldfasttemp WHERE utvaldfasttemp.KALKNR = valdfasttemp.KALKNR NO-LOCK NO-ERROR.
   IF AVAILABLE utvaldfasttemp THEN DO:
      DELETE utvaldfasttemp.
      RUN openbdynspec_UI IN brwproc[{&LEFT-BROWSE}].         
   END.
   DELETE valdfasttemp.
   RUN selnextprevrow_UI IN brwproc[{&RIGHT-BROWSE}].
   RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
   RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
   
END PROCEDURE.
PROCEDURE sparaaofavoriter_UI :
   DEFINE VARIABLE arendekalk AS CHARACTER NO-UNDO.
   tthandle = TEMP-TABLE valdfasttemp:HANDLE.
   FIND FIRST sparaladdatemp NO-ERROR.
   IF NOT AVAILABLE sparaladdatemp THEN CREATE sparaladdatemp.
   RUN arendeget_UI IN huvprogh (OUTPUT arendekalk).
   ASSIGN
   sparaladdatemp.GLOBANV = Guru.Konstanter:globanv /*Användare, i detta fall ELPAO*/
   sparaladdatemp.BENAMNING = "KALK" /*Benämnings sufix, i detta fall ELPAO$STOR*/
   sparaladdatemp.TABVAL = "KALKAONR" /*Tabellnamn*/
   sparaladdatemp.FALTVALAO = "OMRADE" /*Integer field*/
   sparaladdatemp.FALTVALDEL = "KALKNR" /*Integer field*/
   sparaladdatemp.FALTVALDATE = "".   /*DATE field*/
   IF arendekalk = "ÄRENDE" THEN sparaladdatemp.BENAMNING = arendekalk.
   RUN sparabrw_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp). 
END PROCEDURE.

PROCEDURE avbe_UI :
   status-ok = BRW_VKALK:SELECT-FOCUSED-ROW() NO-ERROR. 
   FIND FIRST valdfasttemp WHERE ROWID(valdfasttemp) = valdkalkh:ROWID NO-LOCK NO-ERROR.
   IF AVAILABLE valdfasttemp THEN DO:
      ASSIGN
      sparkalknr = valdfasttemp.KALKNR.
   END.
END PROCEDURE.
PROCEDURE avb_UI :
   IF franvart NE 1 THEN DO:      
      EMPTY TEMP-TABLE valdfasttemp NO-ERROR. 
   END.
   IF franvart = 0 THEN.
   ELSE DO:
      /*
      IF BTN_AVB:IMAGE = "BILDER\xbtn_ater.gif" THEN DO:
         x-multi = c-win:WIDTH-PIXELS / c-win:MIN-WIDTH-PIXELS. 
         y-multi = c-win:HEIGHT-PIXELS / c-win:MIN-HEIGHT-PIXELS.  
         ASSIGN
         BRW_VKALK:WIDTH-CHARS =  x-multi * brworgwith  
         BRW_VKALK:HEIGHT-CHARS =  y-multi * brworghight 
         BRW_VKALK:ROW         =  y-multi * brworgrow   
         BRW_VKALK:COLUMN      =  x-multi * brworgcol   
         BTN_NY:ROW            =  y-multi * btnorgrow   
         BTN_NY:COL            =  x-multi * btnorgcol.
      END.
      */
   END.
   IF franvart = 1 THEN DO:
      RUN avbe_UI.
      
      IF BTN_AVB:IMAGE = "BILDER\xbtn_ater.gif" THEN DO:
         
         RUN goma_UI IN huvprogh (INPUT FALSE,INPUT "AONR").         
      END.
      ELSE DO:
         MESSAGE "Du avslutar nu " + SUBSTRING(foretemp.VERSION,1,10)
         VIEW-AS ALERT-BOX QUESTION BUTTONS OK-CANCEL UPDATE val AS LOGICAL.   
         IF val = FALSE THEN RETURN NO-APPLY.         
         IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph NO-ERROR. 
         edataapph = ?.
         RUN avb_UI IN huvprogh.
      END.
   END.
   
   ELSE IF franvart = 2 THEN RUN goma_UI IN huvprogh (INPUT FALSE,INPUT "AONR").
   ELSE IF franvart = 3 THEN DO:
      RUN goma_UI IN huvprogh (INPUT FALSE,INPUT "PLAN").
      RUN gomfalt_UI IN huvprogh (INPUT "KALK",INPUT 0).
   END.
   
END PROCEDURE.

PROCEDURE mdbrwkalk_UI :
   IF FBTN_KALK:VISIBLE = TRUE THEN APPLY "CHOOSE" TO FBTN_KALK.
END PROCEDURE.

PROCEDURE openb_UI :   
   RUN LaddaTypBen_UI IN KalkClasserStart (INPUT-OUTPUT TABLE valdfasttemp).          
   FOR EACH valdfasttemp WHERE valdfasttemp.SLUTVNR = 99:
      valdfasttemp.SLUTVNR = 0.
   END.
   RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
   FIND FIRST valdfasttemp WHERE valdfasttemp.KALKNR = sparkalknr
   NO-LOCK NO-ERROR.
   RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdfasttemp)).
   RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].     
END PROCEDURE.

PROCEDURE wingom_UI :  
   {AVBGOM2.I} 
END PROCEDURE.
PROCEDURE main_UI :
   {OMSTARTAVGURUH.I}  
   {ALLSTARTDYN.I}
   C-Win:TITLE = "Kalkylering" + "-" + "Systemsupport 090/184540    elpool.ume@elpool.se  " + foretemp.ATRHOME.
   RUN huvud_UI. 
   RUN VISMEDDU.W.
   RUN nypla_UI.      
   RUN frankontroll_UI.
   APPLY "VALUE-CHANGED" TO BRW_VKALK.
   FIND FIRST jurperstemp NO-LOCK NO-ERROR.
   IF NOT AVAILABLE jurperstemp THEN CMB_JURP:HIDDEN = TRUE.
   FIND FIRST avdtemp NO-LOCK NO-ERROR.
   IF NOT AVAILABLE avdtemp THEN CMB_AVD:HIDDEN = TRUE.      
   IF franvart > 1 THEN CMB_JURP:HIDDEN = TRUE.
   IF Guru.Konstanter:varforetypval[45] = 1 THEN DO:
      CMB_BESORG:HIDDEN = TRUE.
   END.  
   IF Guru.Konstanter:varforetypval[27] = 1 THEN DO:
      RUN EkgGom_UI.     
   END. 
   IF Guru.Konstanter:globforetag = "FORS" THEN DO:
      CMB_OMR:SCREEN-VALUE = "Alla".
      CMB_OMR:HIDDEN = TRUE. 
   END.   
   {musarrow.i}
END PROCEDURE.
PROCEDURE EkgGom_UI :
   ASSIGN
   CMB_KANSV:HIDDEN = TRUE
   CMB_BESORG:HIDDEN = TRUE 
   CMB_OMR:HIDDEN = TRUE 
   CMB_UTF:HIDDEN = TRUE.
END PROCEDURE.
PROCEDURE hmtenkalk_UI :
   DEFINE INPUT PARAMETER klknr AS INTEGER NO-UNDO.
   FIND FIRST valdfasttemp WHERE valdfasttemp.KALKNR = klknr NO-LOCK NO-ERROR.   
   IF NOT AVAILABLE valdfasttemp THEN DO:      
      RUN sokkalkyl_UI IN KalkClasserStart (INPUT klknr,OUTPUT TABLE valdfasttemp APPEND).                                      
      FIND FIRST valdfasttemp WHERE valdfasttemp.KALKNR = klknr NO-LOCK NO-ERROR.         
   END.
   IF NOT AVAILABLE valdfasttemp THEN DO:
      IF arendekalkmeny = "ÄRENDE" THEN MESSAGE "Ärendet finns inte!" VIEW-AS ALERT-BOX.
      ELSE MESSAGE "Kalkyl finns inte!" VIEW-AS ALERT-BOX.
   END.    
   ELSE DO:
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdfasttemp)).              
      RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].      
   END.   
END PROCEDURE.

PROCEDURE andra_UI :
   /*
   DEFINE VARIABLE frilog AS LOGICAL NO-UNDO.
   BRW_VKALK:SELECT-FOCUSED-ROW() NO-ERROR.   
   FIND FIRST valdfasttemp WHERE ROWID(valdfasttemp) = valdkalkh:ROWID NO-LOCK NO-ERROR.
   IF AVAILABLE valdfasttemp THEN DO:
      EMPTY TEMP-TABLE extravaldfasttemp NO-ERROR. 
      CREATE extravaldfasttemp.
      BUFFER-COPY valdfasttemp TO extravaldfasttemp.
      {OMSTARTAVGURUH.I}      
      RUN KALKHUV.W.      
      FIND FIRST extravaldfasttemp NO-LOCK NO-ERROR.
      FIND FIRST valdfasttemp WHERE valdfasttemp.KALKNR = extravaldfasttemp.KALKNR NO-LOCK NO-ERROR.
      IF AVAILABLE valdfasttemp THEN BUFFER-COPY extravaldfasttemp TO valdfasttemp.
      RUN fetchselrowid_UI IN brwproc[{&RIGHT-BROWSE}].
      RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
      RUN gorlika_UI IN brwproc[{&ARROWS}] (INPUT "KALKNR", INPUT "").      
      {musarrow.i}      
   END.
   */
END PROCEDURE.

PROCEDURE kalk_UI :
   DEFINE VARIABLE fragavar AS CHARACTER NO-UNDO.
   {OMSTARTAVGURUH.I}
   BRW_VKALK:SELECT-FOCUSED-ROW() NO-ERROR.
   FIND FIRST valdfasttemp WHERE ROWID(valdfasttemp) = valdkalkh:ROWID NO-LOCK NO-ERROR.
   IF valdfasttemp.KALKNR = ? THEN DO:
      IF valdfasttemp.AONR NE ? THEN DO:
         MESSAGE "Det finns ingen kalkyl på " LC(Guru.Konstanter:gaok)  ": "  " " 
         valdfasttemp.AONR  ". Vill du skapa en NY ?" VIEW-AS ALERT-BOX
         QUESTION BUTTONS YES-NO TITLE "Skapa kalkyl?" UPDATE svar.         
         IF svar = TRUE THEN DO: 
            {AVBGOM2.I}         
            RUN ny_UI. 
            IF franvart > 1 THEN .
            ELSE DO:
               {AVBFRAM2.I}   
            END.
         END.
      END.   
      ELSE IF valdfasttemp.PLANNR NE ? THEN DO:         
         MESSAGE "Det finns ingen kalkyl på " LC(Guru.Konstanter:gplk)  ": "  " " 
         valdfasttemp.PLANNR  ". Vill du skapa en NY" VIEW-AS ALERT-BOX
         QUESTION BUTTONS YES-NO TITLE "Skapa kalkyl?" UPDATE svar.         
         IF svar = TRUE THEN DO: 
            {AVBGOM2.I}         
            RUN ny_UI.   
            IF franvart > 1 THEN .
            ELSE DO:
               {AVBFRAM2.I}   
            END.

         END.
      END.
   END.
   ELSE DO:
      IF Guru.Konstanter:globanv NE valdfasttemp.ANVANDARE THEN DO:
         fragavar = valdfasttemp.ANVANDARE. 
         FIND FIRST berkalanvandartemp WHERE berkalanvandartemp.ANVANDARE = valdfasttemp.ANVANDARE NO-LOCK NO-ERROR.
         IF AVAILABLE berkalanvandartemp THEN fragavar = fragavar + " -- " + berkalanvandartemp.AV-NAMN.
         IF arendekalkmeny = "ÄRENDE" THEN MESSAGE "Det är " fragavar " som är utfärdare av detta ärende! Vill du ändå fortsätta?" VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE valfraga AS LOGICAL.
         ELSE  MESSAGE "Det är " fragavar " som är utfärdare av denna kalkyl! Vill du ändå fortsätta?" VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE valfraga.
         CASE valfraga:
            WHEN TRUE THEN DO:
               RUN kalkylera_UI.                     
            END.
            WHEN FALSE THEN DO:                
               musz = FALSE.                     
            END.
         END CASE.
      END.
      ELSE RUN kalkylera_UI. 
   END.
   {musarrow.i}
   musz = FALSE.
END PROCEDURE.
PROCEDURE kalkylera_UI :
   DEFINE VARIABLE status-mus2 AS LOGICAL NO-UNDO.
   IF AVAILABLE valdfasttemp THEN DO:
      {OMSTARTAVGURUH.I}
      IF valdfasttemp.TYP = 6 AND Guru.Konstanter:varforetypchar[48] = "" THEN DO:
        
      END.
      ELSE DO:   
         {AVBGOM2.I}
         /*kalkår*/
         EMPTY TEMP-TABLE extravaldfasttemp NO-ERROR. 
         CREATE extravaldfasttemp.
         BUFFER-COPY valdfasttemp TO extravaldfasttemp.
         
         IF Guru.GlobalaVariabler:retvalkoll = TRUE THEN DO:
            RUN SetDefaultCursors IN Guru.Konstanter:hpApi.
            Guru.GlobalaVariabler:retvalkoll = FALSE.
         END.
         status-mus2 = SESSION:SET-WAIT-STATE("").
         EMPTY TEMP-TABLE uppkalktemp NO-ERROR. 
         EMPTY TEMP-TABLE eutvaldfasttemp NO-ERROR.

         RUN andra_UI IN KalkClasserStart (INPUT valdfasttemp.KALKNR,INPUT valdfasttemp.OMRADE,OUTPUT TABLE eutvaldfasttemp).
         FOR EACH eutvaldfasttemp WHERE NO-LOCK:
            FIND FIRST valdfasttemp WHERE valdfasttemp.KALKNR = eutvaldfasttemp.KALKNR AND valdfasttemp.OMRADE = eutvaldfasttemp.OMRADE NO-LOCK NO-ERROR.
            IF NOT AVAILABLE valdfasttemp THEN CREATE valdfasttemp.
            BUFFER-COPY eutvaldfasttemp TO valdfasttemp.
            RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].                          
         END.     
         RUN selectbyrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdfasttemp)).
         RUN gorlika_UI IN brwproc[{&ARROWS}] (INPUT "KALKNR", INPUT ""). 
         EMPTY TEMP-TABLE eutvaldfasttemp NO-ERROR.
         IF aoplan = FALSE THEN RUN nypla_UI.
         IF franvart > 1 THEN .
         ELSE DO:
            {AVBFRAM2.I}   
         END.
      END.      
      IF franvart NE 1 THEN BTN_NY:HIDDEN = TRUE.
      {musarrow.i}
   END.
END PROCEDURE.
PROCEDURE kalkvisaclasser_UI :
   DEFINE INPUT  PARAMETER vad AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   EMPTY TEMP-TABLE extravaldfasttemp NO-ERROR.
  
   IF arendekalkmeny = "ÄRENDE" THEN DO:
      CREATE extravaldfasttemp.
      BUFFER-COPY valdfasttemp TO extravaldfasttemp.
   END.
   ELSE DO:     
      antal_valda = BRW_VKALK:NUM-SELECTED-ROWS .
      IF antal_valda = 0 THEN RETURN.
      antal_raknare = 1.
      DO WHILE antal_raknare LE antal_valda:
         RUN fetrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT antal_raknare,OUTPUT brwrowid) .
         FIND FIRST valdfasttemp WHERE ROWID(valdfasttemp) = brwrowid NO-LOCK NO-ERROR.
         CREATE extravaldfasttemp.
         BUFFER-COPY valdfasttemp TO extravaldfasttemp.
         antal_raknare = antal_raknare + 1.
      END.
   END.   
   DO: 
      IF vad = 1 THEN RUN kalkvisa_UI IN KalkClasserStart (INPUT TABLE extravaldfasttemp).   
      ELSE IF vad = 2 OR vad = 3 THEN DO:
         IF vad = 2 THEN RUN SlaIhop_UI IN KalkClasserStart (INPUT 0,INPUT "",INPUT TABLE extravaldfasttemp, OUTPUT TABLE eutvaldfasttemp).
         IF vad = 3 THEN RUN JmfKalk_UI IN KalkClasserStart (INPUT 0,INPUT "",INPUT TABLE extravaldfasttemp, OUTPUT TABLE eutvaldfasttemp).
         FOR EACH eutvaldfasttemp WHERE NO-LOCK:
            IF eutvaldfasttemp.AONR = ? AND eutvaldfasttemp.PLANNR = ? THEN DO:
               FIND FIRST valdfasttemp WHERE valdfasttemp.KALKNR = eutvaldfasttemp.KALKNR AND valdfasttemp.OMRADE = eutvaldfasttemp.OMRADE NO-LOCK NO-ERROR.
            END.   
            ELSE DO:
               IF eutvaldfasttemp.AONR NE ? THEN DO:
                  FIND FIRST valdfasttemp WHERE valdfasttemp.AONR = eutvaldfasttemp.AONR AND valdfasttemp.DELNR = eutvaldfasttemp.DELNR AND 
                  valdfasttemp.KALKNR = ? NO-LOCK NO-ERROR.           
               END. 
               ELSE IF eutvaldfasttemp.PLANNR NE ? THEN DO:
                  FIND FIRST valdfasttemp WHERE valdfasttemp.PLANNR = eutvaldfasttemp.PLANNR AND valdfasttemp.ARTAL = eutvaldfasttemp.ARTAL AND 
                  valdfasttemp.KALKNR = ? NO-LOCK NO-ERROR.           
               END.  
            END.               
            IF NOT AVAILABLE valdfasttemp THEN CREATE valdfasttemp.
            BUFFER-COPY eutvaldfasttemp TO valdfasttemp.
            RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].                          
         END.     
         RUN selectbyrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdfasttemp)).
         EMPTY TEMP-TABLE eutvaldfasttemp NO-ERROR. 
      END.
   END.      
   EMPTY TEMP-TABLE extravaldfasttemp NO-ERROR.  
END PROCEDURE.
PROCEDURE kalkvisa_UI :  
         
END PROCEDURE.
PROCEDURE visanat_UI :   
   {AMERICANEUROPEAN.I}
   RUN VISAFKALNAT.W (INPUT FALSE).
   {EUROPEANAMERICAN.I}   
END PROCEDURE.

PROCEDURE inaktiv_UI :
   BRW_VKALK:SELECT-FOCUSED-ROW() NO-ERROR.
   FIND FIRST valdfasttemp WHERE ROWID(valdfasttemp) = valdkalkh:ROWID NO-LOCK NO-ERROR.
   IF AVAILABLE valdfasttemp THEN DO:
      IF valdfasttemp.AONR NE ? OR valdfasttemp.PLANNR NE ? THEN DO:
         IF valdfasttemp.AKTIV = TRUE THEN DO:
            MESSAGE "Kalkylen är kopplad till ett " LC(Guru.Konstanter:gaok) " eller " LC(Guru.Konstanter:gplk) ". Ta bort koppling och inaktivera därefter kalkylen."
            VIEW-AS ALERT-BOX TITLE "Meddelande".
         END.
         ELSE DO:
            MESSAGE "Kalkylen är kopplad till ett " LC(Guru.Konstanter:gaok) " eller " LC(Guru.Konstanter:gplk) " som är avslutat. Ta bort avslutning och kalkylen aktiveras."
            VIEW-AS ALERT-BOX TITLE "Meddelande".         
         END.
      END.
      ELSE DO:         
         ASSIGN valdfasttemp.AKTIV = NOT valdfasttemp.AKTIV.
         RUN kalkaktiv_UI IN KalkClasserStart (INPUT valdfasttemp.KALKNR, INPUT valdfasttemp.AKTIV).
         RUN gorlika_UI IN brwproc[{&ARROWS}] (INPUT "KALKNR", INPUT ""). 
         RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdfasttemp)).
         RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
         RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].      
      END.
   END.
END PROCEDURE.

PROCEDURE inaktivfler_UI :
   DEFINE INPUT  PARAMETER brwrowid AS ROWID NO-UNDO.      
   FIND FIRST valdfasttemp WHERE ROWID(valdfasttemp) = brwrowid  NO-LOCK NO-ERROR.
   IF AVAILABLE valdfasttemp THEN DO:
      IF valdfasttemp.AONR NE ? OR valdfasttemp.PLANNR NE ? THEN DO:
         IF valdfasttemp.AKTIV = TRUE THEN DO:
            MESSAGE "Kalkylen är kopplad till ett " LC(Guru.Konstanter:gaok) " eller " LC(Guru.Konstanter:gplk) ". Ta bort koppling och inaktivera därefter kalkylen."
            VIEW-AS ALERT-BOX TITLE "Meddelande".
         END.
         ELSE DO:
            MESSAGE "Kalkylen är kopplad till ett " LC(Guru.Konstanter:gaok) " eller " LC(Guru.Konstanter:gplk) " som är avslutat. Ta bort avslutning och kalkylen aktiveras."
            VIEW-AS ALERT-BOX TITLE "Meddelande".         
         END.
      END.
      ELSE DO:         
         ASSIGN valdfasttemp.AKTIV = NOT valdfasttemp.AKTIV.
         RUN kalkaktiv_UI IN KalkClasserStart (INPUT valdfasttemp.KALKNR, INPUT valdfasttemp.AKTIV).
         RUN gorlika_UI IN brwproc[{&ARROWS}] (INPUT "KALKNR", INPUT ""). 
         RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdfasttemp)).           
      END.
   END.
END PROCEDURE.


PROCEDURE valkop_UI :
   FIND FIRST kalkinmtemp WHERE kalkinmtemp.AONR = valdfasttemp.AONR AND  kalkinmtemp.DELNR = valdfasttemp.DELNR NO-ERROR.
   IF AVAILABLE kalkinmtemp THEN DO:
      BUFFER-COPY kalkinmtemp TO extravaldfasttemp.
      RUN omradecheck_UI IN kalkproch (INPUT 2, INPUT extravaldfasttemp.AONR, INPUT extravaldfasttemp.DELNR, 
      OUTPUT extravaldfasttemp.OMRADE, OUTPUT extravaldfasttemp.BENAMNING, OUTPUT extravaldfasttemp.BESTID).
      ASSIGN   
      extravaldfasttemp.PLANNR = ?
      extravaldfasttemp.ARTAL = ?   
      extravaldfasttemp.AKTIV = TRUE.  
   END.
   ELSE DO:
      FIND FIRST kalkinmtemp WHERE kalkinmtemp.PLANNR = valdfasttemp.PLANNR AND  kalkinmtemp.ARTAL = valdfasttemp.ARTAL NO-ERROR.
      BUFFER-COPY kalkinmtemp TO extravaldfasttemp.
      RUN omradecheck_UI IN kalkproch (INPUT 3, INPUT extravaldfasttemp.PLANNR, INPUT extravaldfasttemp.ARTAL, 
      OUTPUT extravaldfasttemp.OMRADE, OUTPUT extravaldfasttemp.BENAMNING, OUTPUT extravaldfasttemp.BESTID).
      ASSIGN   
      extravaldfasttemp.AONR = ?
      extravaldfasttemp.DELNR = ?   
      extravaldfasttemp.AKTIV = TRUE.  
   END.       
END PROCEDURE.

PROCEDURE val_UI :
   ASSIGN
   extravaldfasttemp.AONR = ?
   extravaldfasttemp.DELNR = ?
   extravaldfasttemp.PLANNR = ?
   extravaldfasttemp.ARTAL = ?   
   extravaldfasttemp.AKTIV = TRUE.
   FIND FIRST omrtemp WHERE omrtemp.OMRADE = Guru.Konstanter:globomr USE-INDEX OMR NO-LOCK NO-ERROR.                       
   IF NOT AVAILABLE omrtemp THEN DO:                     
      FIND FIRST omrtemp USE-INDEX OMR NO-LOCK NO-ERROR. 
   END.    
   IF AVAILABLE omrtemp THEN extravaldfasttemp.OMRADE = omrtemp.OMRADE.      
END PROCEDURE.
PROCEDURE ny_UI :
   DEFINE VARIABLE fragstr AS CHARACTER NO-UNDO.
   IF Guru.Konstanter:kalk2sekvar[1] = TRUE OR Guru.Konstanter:globniv = 0 THEN DO:
      EMPTY TEMP-TABLE extravaldfasttemp NO-ERROR. 
      CREATE extravaldfasttemp.
      extravaldfasttemp.KALKNR = ?.   
      IF franvart = 1 THEN DO:
         IF AVAILABLE valdfasttemp THEN DO:
            IF valdfasttemp.KALKNR = ? THEN DO:
               IF valdfasttemp.PLANNR = ? THEN fragstr = "Vill du koppla den nya kalkylen  till " + LC(Guru.Konstanter:gaok) + " "  +  valdfasttemp.AONR + " "  + STRING(valdfasttemp.DELNR,Guru.Konstanter:varforetypchar[1]) + "?".
               ELSE fragstr = "Vill du koppla den nya kalkylen till " + LC(Guru.Konstanter:gplk) + " "  +  valdfasttemp.PLANNR + " "  + STRING(valdfasttemp.ARTAL,"9999") + "?".  
               MESSAGE fragstr             
               VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE val AS LOGICAL.
               CASE val:
                  WHEN TRUE THEN DO:
                     RUN valkop_UI.                     
                  END.
                  WHEN FALSE THEN DO:                
                     RUN val_UI.                     
                  END.
               END CASE.
            END.
            ELSE RUN val_UI.                     
         END.
         ELSE DO:
            RUN val_UI.                     
         END.         
      END. 
      ELSE DO:
         IF kalknrao = ? AND kalktypvar NE ? THEN DO:
            FIND FIRST kalkinmtemp WHERE kalkinmtemp.REPO = TRUE NO-ERROR.
            BUFFER-COPY kalkinmtemp TO extravaldfasttemp.
            IF franvart = 2 OR franvart = 22 THEN DO: 
               /*aonr*/
               RUN omradecheck_UI IN kalkproch (INPUT franvart, INPUT extravaldfasttemp.AONR, INPUT extravaldfasttemp.DELNR, 
                                                OUTPUT extravaldfasttemp.OMRADE, OUTPUT extravaldfasttemp.BENAMNING, OUTPUT extravaldfasttemp.BESTID).
               ASSIGN   
               extravaldfasttemp.PLANNR = ?
               extravaldfasttemp.ARTAL = ?   
               extravaldfasttemp.AKTIV = TRUE.
            END.
            ELSE IF franvart = 3 THEN DO:
               /*plan*/
               RUN omradecheck_UI IN kalkproch (INPUT franvart, INPUT extravaldfasttemp.PLANNR, INPUT extravaldfasttemp.ARTAL, 
                                                 OUTPUT extravaldfasttemp.OMRADE, OUTPUT extravaldfasttemp.BENAMNING, OUTPUT extravaldfasttemp.BESTID).
               ASSIGN
               extravaldfasttemp.AONR = ?
               extravaldfasttemp.DELNR = ?
               extravaldfasttemp.AKTIV = TRUE.
            END.
         END.
         ELSE DO: 
            BRW_VKALK:SELECT-FOCUSED-ROW() NO-ERROR.
            FIND FIRST valdfasttemp WHERE ROWID(valdfasttemp) = valdkalkh:ROWID NO-LOCK NO-ERROR.
            BUFFER-COPY valdfasttemp TO extravaldfasttemp.
         END.
      END.
      musz = FALSE.
      RUN nyac_UI.
      RETURN.              
   END.
   ELSE DO:
      MESSAGE "Du har inte behörighet att skapa en NY kalkyl." VIEW-AS ALERT-BOX TITLE "Meddelande".
      SESSION:SET-WAIT-STATE("").    
   END.  
END PROCEDURE.

PROCEDURE nyac_UI :
   EMPTY TEMP-TABLE uppkalktemp NO-ERROR. 
   EMPTY TEMP-TABLE eutvaldfasttemp NO-ERROR. 
   DEFINE VARIABLE status-mus2 AS LOGICAL NO-UNDO.
   DEFINE VARIABLE togsum AS LOGICAL NO-UNDO.
   DEFINE VARIABLE togmtrl AS LOGICAL NO-UNDO.
   DEFINE VARIABLE togkonval AS LOGICAL NO-UNDO.
   DEFINE VARIABLE kbename AS CHARACTER NO-UNDO.
   RUN SetDefaultCursors IN Guru.Konstanter:hpApi.
   Guru.GlobalaVariabler:retvalkoll = FALSE.
   status-mus2 = SESSION:SET-WAIT-STATE("").
   IF franvart = 22 THEN DO:       
      EMPTY TEMP-TABLE kon_val NO-ERROR.
      EMPTY TEMP-TABLE skrivhdschakttemp NO-ERROR.       
      RUN KALKBERCVALd.W (INPUT kalkinmtemp.AONR,INPUT kalkinmtemp.DELNR,OUTPUT togsum, OUTPUT togmtrl, OUTPUT togkonval, OUTPUT kbename, OUTPUT TABLE kon_val, OUTPUT TABLE skrivhdschakttemp).    
      IF musz = TRUE THEN musz = FALSE.
      ELSE RUN BerKalkSkapa_UI IN KalkClasserStart (INPUT kalkinmtemp.AONR,INPUT kalkinmtemp.DELNR,INPUT togsum,INPUT togmtrl, INPUT togkonval, INPUT kbename,  INPUT TABLE kon_val, INPUT TABLE skrivhdschakttemp, OUTPUT TABLE eutvaldfasttemp).      
      EMPTY TEMP-TABLE kon_val NO-ERROR.
      EMPTY TEMP-TABLE skrivhdschakttemp NO-ERROR.      
      franvart = 2.
   END.
   ELSE DO:
      IF AVAILABLE extravaldfasttemp THEN DO:
         IF extravaldfasttemp.TYP = 0 THEN extravaldfasttemp.TYP = kalktypvar.
      END.      
      RUN ny_UI IN KalkClasserStart (INPUT 0,INPUT "",INPUT TABLE extravaldfasttemp, OUTPUT TABLE eutvaldfasttemp).
   END.   
   FOR EACH eutvaldfasttemp WHERE NO-LOCK:
      IF eutvaldfasttemp.AONR = ? AND eutvaldfasttemp.PLANNR = ? THEN DO:
         FIND FIRST valdfasttemp WHERE valdfasttemp.KALKNR = eutvaldfasttemp.KALKNR AND valdfasttemp.OMRADE = eutvaldfasttemp.OMRADE NO-LOCK NO-ERROR.
      END.   
      ELSE DO:
         IF eutvaldfasttemp.AONR NE ? THEN DO:
            FIND FIRST valdfasttemp WHERE valdfasttemp.AONR = eutvaldfasttemp.AONR AND valdfasttemp.DELNR = eutvaldfasttemp.DELNR AND 
            valdfasttemp.KALKNR = ? NO-LOCK NO-ERROR.           
         END. 
         ELSE IF eutvaldfasttemp.PLANNR NE ? THEN DO:
            FIND FIRST valdfasttemp WHERE valdfasttemp.PLANNR = eutvaldfasttemp.PLANNR AND valdfasttemp.ARTAL = eutvaldfasttemp.ARTAL AND 
            valdfasttemp.KALKNR = ? NO-LOCK NO-ERROR.           
         END.  
      END.         
      IF NOT AVAILABLE valdfasttemp THEN CREATE valdfasttemp.
      BUFFER-COPY eutvaldfasttemp TO valdfasttemp.
      RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].                          
   END.     
   RUN selectbyrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdfasttemp)).
   EMPTY TEMP-TABLE eutvaldfasttemp NO-ERROR. 
END PROCEDURE.

PROCEDURE nypla_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/  
   BRW_VKALK:HIDDEN = FALSE.          
   IF franvart = 1 THEN DO:
      IF Guru.Konstanter:kalk2sekvar[1] = TRUE OR Guru.Konstanter:globniv = 0 THEN DO:
         BTN_NY:HIDDEN = FALSE.
      END.
   END. 
   ELSE BTN_NY:HIDDEN = TRUE.
   IF arendekalkmeny = "ÄRENDE" THEN BTN_NY:HIDDEN = TRUE.                                                     
END PROCEDURE.

PROCEDURE PlaceraKnapp_UI :
   Guru.GlobalaVariabler:StartRadForKnappar = BRW_VKALK:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_KALK).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_VISKAL).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_SLAIHOP).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_JMFKALK).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_ARENDESTATUS). 
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_INAKTIV). 
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_ADM). 
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_EKG). 
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_HAOF).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_AOF).
   RUN placeraCmb_UI.
END PROCEDURE.

PROCEDURE placeraCmb_UI :    
   Guru.GlobalaVariabler:StartRadForKnappar = CMB_JURP:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_JURP). 
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_AVD).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_OMR).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_BESORG).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_KTYP).
   Guru.GlobalaVariabler:StartRadForKnappar = CMB_JURP:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_UTF).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_KANSV).  
   RUN placeraFill_UI.      
END PROCEDURE.

PROCEDURE placeraFill_UI :
   Guru.GlobalaVariabler:MellanRumKnappar = 1.
   TOG_ALLAKALK:ROW = FILL-IN_EAONR:ROW.  
      
   Guru.GlobalaVariabler:StartKolumnForKnappar = FILL-IN-VALK:COLUMN.
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN-VALK,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN_EKALNR,TRUE). 
   Guru.Konstanter:LabelFlyttExtra(FILL-IN_EKALNR).
   Guru.GlobalaVariabler:StartKolumnForKnappar = FILL-IN_EKALNR:COLUMN + FILL-IN_EKALNR:WIDTH-CHARS + 1.
   
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN_EAONR,TRUE). 
   Guru.Konstanter:LabelFlyttExtra(FILL-IN_EAONR).
   
   Guru.GlobalaVariabler:StartKolumnForKnappar = FILL-IN_EAONR:COLUMN + FILL-IN_EAONR:WIDTH-CHARS + 1.
  
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN_DELNR,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(TOG_ALLAKALK,TRUE).
   Guru.GlobalaVariabler:MellanRumKnappar = 0.
END PROCEDURE.


PROCEDURE buttplac_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/     
   
   DEFINE VARIABLE arendekalk AS CHARACTER NO-UNDO.
   RUN arendeget_UI IN huvprogh (OUTPUT arendekalk).
   Guru.GlobalaVariabler:collefth = ?.
   IF Guru.Konstanter:kalk2sekvar[4] = TRUE OR Guru.Konstanter:globniv = 0  THEN DO:
      FBTN_KALK:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_KALK:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).    
   END.
   ELSE FBTN_KALK:HIDDEN = TRUE.
   
   FBTN_VISKAL:HIDDEN = TRUE.
   IF Guru.Konstanter:kalk2sekvar[6] = TRUE THEN DO:
      FBTN_VISKAL:HIDDEN = FALSE.      
      Guru.GlobalaVariabler:colrighth = FBTN_VISKAL:HANDLE. 
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.
   BTN_SLAIHOP:HIDDEN = TRUE.
   IF Guru.Konstanter:kalk2sekvar[1] = FALSE  OR Guru.Konstanter:kalk2sekvar[2] = FALSE OR Guru.Konstanter:kalk2sekvar[4] = FALSE THEN BTN_SLAIHOP:HIDDEN = TRUE.
   ELSE DO:
      BTN_SLAIHOP:LOAD-IMAGE("bilder/xbtn_slaihop.gif").
      BTN_SLAIHOP:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = BTN_SLAIHOP:HANDLE. 
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.
   BTN_JMFKALK:HIDDEN = TRUE.
   IF Guru.Konstanter:kalk2sekvar[1] = FALSE  OR Guru.Konstanter:kalk2sekvar[2] = FALSE OR Guru.Konstanter:kalk2sekvar[4] = FALSE THEN BTN_JMFKALK:HIDDEN = TRUE.
   ELSE DO:
      BTN_JMFKALK:LOAD-IMAGE("bilder/xbtn_jmf.gif").
      BTN_JMFKALK:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = BTN_JMFKALK:HANDLE. 
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.   
   BTN_ARENDESTATUS:HIDDEN = TRUE. 
   IF Guru.Konstanter:kalk2sekvar[8] = TRUE OR Guru.Konstanter:globniv = 0 THEN DO:
      ASSIGN
      FBTN_INAKTIV:HIDDEN = FALSE. 
      Guru.GlobalaVariabler:colrighth = FBTN_INAKTIV:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).       
   END.
   ELSE FBTN_INAKTIV:HIDDEN = TRUE.
   IF Guru.Konstanter:kalk2sekvar[10] = TRUE OR Guru.Konstanter:globniv = 0 THEN DO:
      ASSIGN
      FBTN_ADM:HIDDEN = FALSE. 
      Guru.GlobalaVariabler:colrighth = FBTN_ADM:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.
   ELSE FBTN_ADM:HIDDEN = TRUE.   
   IF Guru.Konstanter:varforetypval[27] = 1 THEN DO:
      IF Guru.Konstanter:kalk2sekvar[12] = TRUE THEN DO:
         BTN_EKG:HIDDEN = FALSE. 
         Guru.GlobalaVariabler:colrighth = BTN_EKG:HANDLE.           
         RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
      END.   
   END.
   ELSE BTN_EKG:HIDDEN = TRUE.   
   IF Guru.Konstanter:kalk2sekvar[5] = TRUE OR Guru.Konstanter:globniv = 0 THEN DO:   
   END.   
   BTN_HAOF:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = BTN_HAOF:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).      
   BTN_AOF:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = BTN_AOF:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).  
   IF Guru.Konstanter:varforetypval[27] = 1 THEN DO:
      RUN EKGgom_UI.     
   END.
      
END PROCEDURE.

PROCEDURE utvald_UI :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
   DEFINE VARIABLE status-mus2 AS LOGICAL NO-UNDO.
   {OMSTARTAVGURUH.I}
   FIND FIRST uppkalktemp NO-ERROR.      
   IF NOT AVAILABLE uppkalktemp THEN CREATE uppkalktemp.
   FIND FIRST uppavdjud NO-ERROR.      
   IF NOT AVAILABLE uppavdjud THEN CREATE uppavdjud.
   FIND FIRST avdtemp WHERE avdtemp.AVDELNINGNAMN = CMB_AVD:SCREEN-VALUE NO-LOCK NO-ERROR.   
   IF AVAILABLE avdtemp THEN uppavdjud.AVDNR = STRING(avdtemp.AVDELNINGNR).
   ELSE uppavdjud.AVDNR = "ALLA".
   FIND FIRST jurperstemp WHERE jurperstemp.NAMN = CMB_JURP:SCREEN-VALUE NO-LOCK NO-ERROR.        
   IF AVAILABLE jurperstemp THEN uppavdjud.JUDID = jurperstemp.JUDID.
   ELSE uppavdjud.JUDID = "ALLA".
   ASSIGN            
   uppkalktemp.UTFARD = TRIM(SUBSTRING(CMB_UTF:SCREEN-VALUE,1,INDEX(CMB_UTF:SCREEN-VALUE," -- ") - 1)).
   IF uppkalktemp.UTFARD = ? THEN uppkalktemp.UTFARD = "ALLA".
   IF CMB_KTYP:SCREEN-VALUE = "ALLA" THEN uppkalktemp.TYP = 0.
   ELSE IF CMB_KTYP:SCREEN-VALUE = "Sam B/F" THEN uppkalktemp.TYP = 5.
   ELSE IF CMB_KTYP:SCREEN-VALUE = "Typ fri" THEN uppkalktemp.TYP = 6.
   ELSE IF CMB_KTYP:SCREEN-VALUE = "Nätreg N1" THEN uppkalktemp.TYP = 7.
   ELSE uppkalktemp.TYP = INTEGER(SUBSTRING(CMB_KTYP:SCREEN-VALUE,5,1)).    
   IF TOG_KALKAO:CHECKED = TRUE THEN uppkalktemp.AONR = TRUE.
   ELSE IF TOG_KALKAO:CHECKED = FALSE THEN uppkalktemp.AONR = FALSE.
   IF TOG_AKT:CHECKED = TRUE AND TOG_INAK:CHECKED = TRUE THEN DO:
      uppkalktemp.AKIN = 3.
   END.
   ELSE IF TOG_AKT:CHECKED = FALSE AND TOG_INAK:CHECKED = TRUE THEN DO:
      uppkalktemp.AKIN = 2.
   END.
   ELSE IF TOG_AKT:CHECKED = TRUE AND TOG_INAK:CHECKED = FALSE THEN DO:
      uppkalktemp.AKIN = 1.
   END.
   ELSE DO:
      ASSIGN
      TOG_AKT:CHECKED = TRUE 
      TOG_INAK:CHECKED = TRUE
      uppkalktemp.AKIN = 3.      
   END.
   IF CMB_OMR:SCREEN-VALUE NE "ALLA" THEN DO:
      FIND FIRST omrtemp WHERE omrtemp.NAMN = CMB_OMR:SCREEN-VALUE NO-LOCK NO-ERROR.      
      IF AVAILABLE omrtemp THEN uppkalktemp.OMRADE = omrtemp.OMRADE.
      ELSE uppkalktemp.OMRADE = "ALLA".    
   END.
   ELSE uppkalktemp.OMRADE = "ALLA".   
   IF Guru.Konstanter:varforetypval[45] = 1 THEN uppkalktemp.BESTID = "Alla".
   ELSE DO:     
      IF CMB_BESORG:SCREEN-VALUE NE "ALLA" THEN DO:
         FIND FIRST bestkundallt WHERE bestkundallt.BESTNAMN = CMB_BESORG:SCREEN-VALUE NO-LOCK NO-ERROR.
         IF AVAILABLE bestkundallt THEN uppkalktemp.BESTID = bestkundallt.BESTID.
         ELSE DO:
             IF CMB_BESORG:SCREEN-VALUE = "Samma som ovan" THEN uppkalktemp.BESTID = uppkalktemp.OMRADE.
             ELSE uppkalktemp.BESTID = "ALLA".
         END.
      END.
      ELSE uppkalktemp.BESTID = "ALLA".
   END.            
   IF CMB_KANSV:SCREEN-VALUE NE "ALLA" THEN DO:
      FIND FIRST kalkansv WHERE kalkansv.NAMN = CMB_KANSV:SCREEN-VALUE NO-ERROR.
      IF AVAILABLE kalkansv THEN uppkalktemp.KALKANSVARIG = kalkansv.PERSONALKOD.
      ELSE uppkalktemp.KALKANSVARIG = CMB_KANSV:SCREEN-VALUE.
   END.
   ELSE uppkalktemp.KALKANSVARIG = "ALLA".            
   EMPTY TEMP-TABLE utvaldfasttemp NO-ERROR. 
   status-mus2 = SESSION:SET-WAIT-STATE("").         
   EMPTY TEMP-TABLE utvaldfasttemp NO-ERROR.   
   RUN urvalkalkyl_UI IN KalkClasserStart (INPUT TABLE uppkalktemp,INPUT TABLE uppavdjud,OUTPUT TABLE utvaldfasttemp).                                                
   RUN openbdynspec_UI IN brwproc[{&LEFT-BROWSE}].
   {musarrow.i}
END PROCEDURE.

PROCEDURE huvud_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/   
   DEFINE VARIABLE arendekalk AS CHARACTER NO-UNDO.
   IF franvart = 1 THEN DO: 
      FIND FIRST kalkansv  NO-LOCK NO-ERROR.
      IF NOT AVAILABLE kalkansv THEN DO:
         IF VALID-HANDLE(kalkproch) THEN RUN hamtakalkansv_UI IN kalkproch (OUTPUT TABLE kalkansv).
         Guru.Konstanter:StoppaOmrSek(TEMP-TABLE kalkansv:HANDLE).
         CMB_KANSV:LIST-ITEMS = "".
         CMB_KANSV:ADD-FIRST("Alla").
         FOR EACH kalkansv USE-INDEX NAMN NO-LOCK:
            CMB_KANSV:ADD-LAST(kalkansv.NAMN).
         END.
         CMB_KANSV:SCREEN-VALUE = "Alla".
      END.
      /*direkt här*/
      RUN arendeget_UI IN huvprogh (OUTPUT arendekalk).
      IF arendekalk = "ÄRENDE" THEN DO:
         FIND FIRST valdfasttemp WHERE valdfasttemp.STATUSNIV = arendekalk NO-LOCK NO-ERROR.
      END.
      ELSE DO:
         FIND FIRST valdfasttemp WHERE valdfasttemp.STATUSNIV NE "ÄRENDE" NO-LOCK NO-ERROR.
      END.   
      IF NOT AVAILABLE  valdfasttemp THEN DO:
         EMPTY TEMP-TABLE kalkintemp NO-ERROR. 
         FOR EACH kalkinmtemp:
            CREATE kalkintemp.
            BUFFER-COPY kalkinmtemp TO kalkintemp.
         END.
         IF FRAME-PLAN:HIDDEN = FALSE THEN DO:
             FOR EACH kalkintemp:
               RUN sokplannrkalkyl_UI IN KalkClasserStart (INPUT kalkintemp.PLANNR, INPUT kalkintemp.ARTAL,INPUT FALSE,INPUT TRUE,OUTPUT TABLE valdfasttemp APPEND).
            END.
         END.
         ELSE DO:   
            FOR EACH kalkintemp:               
               RUN sokaonrkalkyl_UI IN KalkClasserStart (INPUT kalkintemp.AONR, INPUT kalkintemp.DELNR,INPUT FALSE,INPUT TRUE,OUTPUT TABLE valdfasttemp APPEND).
            END.
         END.      
         EMPTY TEMP-TABLE kalkintemp NO-ERROR. 
         FOR EACH valdfasttemp:
            IF valdfasttemp.KALKNR = 0 THEN DELETE valdfasttemp.
            ELSE DO:
               IF valdfasttemp.AONR NE ? THEN DO:
                  IF valdfasttemp.AONR NE "" THEN DO:
                     ASSIGN
                     valdfasttemp.ARTAL = ?   
                     valdfasttemp.PLANNR  = ?. 
                  END.
               END.
               IF valdfasttemp.PLANNR NE ? THEN DO:
                  IF valdfasttemp.PLANNR NE "" THEN DO:
                     ASSIGN
                     valdfasttemp.AONR = ?   
                     valdfasttemp.DELNR  = ?. 
                  END.
               END.
            END.
         END.
         
         IF FRAME-PLAN:HIDDEN = FALSE THEN DO:
            FOR EACH valdfasttemp WHERE valdfasttemp.KALKNR = ?,
            EACH kalkinmtemp WHERE kalkinmtemp.PLANNR = valdfasttemp.PLANNR AND 
            kalkinmtemp.ARTAL = valdfasttemp.ARTAL:
               valdfasttemp.BENAMNING = kalkinmtemp.BENAMNING.
               IF kalkinmtemp.PLANNRAVDATUM NE 01/01/91 THEN DELETE valdfasttemp.
            END.         
         END.
         ELSE DO:       
            FOR EACH valdfasttemp WHERE valdfasttemp.KALKNR = ?,
            EACH kalkinmtemp WHERE kalkinmtemp.AONR = valdfasttemp.AONR AND 
            kalkinmtemp.DELNR = valdfasttemp.DELNR:
               valdfasttemp.BENAMNING = kalkinmtemp.BENAMNING.
               IF kalkinmtemp.AONRAVDATUM NE 01/01/91 THEN DELETE valdfasttemp.
            END.         
         END.
         RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
         FIND FIRST kalkinmtemp WHERE kalkinmtemp.REPO = TRUE NO-ERROR.
         IF FRAME-PLAN:HIDDEN = FALSE THEN DO:
            FIND FIRST valdfasttemp WHERE valdfasttemp.PLANNR = kalkinmtemp.PLANNR AND 
            valdfasttemp.ARTAL = kalkinmtemp.ARTAL NO-LOCK NO-ERROR.
         END.
         ELSE DO:
            FIND FIRST valdfasttemp WHERE valdfasttemp.AONR = kalkinmtemp.AONR AND 
            valdfasttemp.DELNR = kalkinmtemp.DELNR NO-LOCK NO-ERROR.
         END.
         IF AVAILABLE valdfasttemp THEN DO:
            RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdfasttemp)).              
            RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].     
         END.
      END.
   END.   
   IF franvart = 2 OR franvart = 3 THEN DO:
      EMPTY TEMP-TABLE kalkintemp NO-ERROR. 
      FOR EACH kalkinmtemp:
         CREATE kalkintemp.
         BUFFER-COPY kalkinmtemp TO kalkintemp.
      END.
      
      IF franvart = 3 THEN DO:
         FOR EACH kalkintemp:
            RUN sokplannrkalkyl_UI IN KalkClasserStart (INPUT kalkintemp.PLANNR, INPUT kalkintemp.ARTAL,INPUT FALSE,INPUT TRUE,OUTPUT TABLE valdfasttemp).
         END.  
      END.   
      ELSE DO:      
         FOR EACH kalkintemp:       
            RUN sokaonrkalkyl_UI IN KalkClasserStart (INPUT kalkintemp.AONR, INPUT kalkintemp.DELNR,INPUT FALSE,INPUT TRUE,OUTPUT TABLE valdfasttemp).
         END.
      END.
      IF franvart = 3 THEN DO:
         FOR EACH valdfasttemp:
            IF valdfasttemp.AONR = "" THEN DO:
               ASSIGN
               valdfasttemp.AONR = ?
               valdfasttemp.DELNR  = ?.
            END.
         END.
      END.
      RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
      FIND FIRST kalkinmtemp WHERE kalkinmtemp.REPO = TRUE NO-ERROR.
      IF kalknrao = ? AND kalktypvar NE ? THEN DO:          
      END.
      ELSE DO:
         RELEASE valdfasttemp NO-ERROR.
         IF kalknrao NE ? THEN DO:
            FIND FIRST valdfasttemp WHERE valdfasttemp.KALKNR = kalknrao AND 
            valdfasttemp.TYP = kalktypvar NO-LOCK NO-ERROR.
         END.
         IF NOT AVAILABLE valdfasttemp THEN DO:
            IF franvart = 2 THEN DO:
               FIND FIRST valdfasttemp WHERE valdfasttemp.AONR = kalkinmtemp.AONR AND 
               valdfasttemp.DELNR = kalkinmtemp.DELNR NO-LOCK NO-ERROR.
            END.
            ELSE DO:
               FIND FIRST valdfasttemp WHERE valdfasttemp.PLANNR = kalkinmtemp.PLANNR AND 
               valdfasttemp.ARTAL = kalkinmtemp.ARTAL NO-LOCK NO-ERROR.            
            END.
         END. 
      END.
      kalktypvar = ?.                                                                         
      IF AVAILABLE valdfasttemp THEN DO:
         RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdfasttemp)).              
         RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].     
      END.
      APPLY "VALUE-CHANGED" TO BRW_VKALK.
      RUN goma_UI.
   END.      
END PROCEDURE.
PROCEDURE goma_UI :
   ASSIGN   
   BRW_UKALK:HIDDEN  = TRUE
   BTN_HAMT:HIDDEN  = TRUE 
   BTN_ALLBACK:HIDDEN  = TRUE 
   BTN_ALLOVER:HIDDEN  = TRUE 
   BTN_BACK:HIDDEN  = TRUE 
   BTN_OVER:HIDDEN  = TRUE
   CMB_BESORG:HIDDEN  = TRUE 
   CMB_KANSV:HIDDEN  = TRUE 
   CMB_KTYP:HIDDEN  = TRUE    
   CMB_OMR:HIDDEN  = TRUE 
   CMB_UTF:HIDDEN  = TRUE       
   FILL-IN_EKALNR:HIDDEN  = TRUE 
   FILL-IN_KALKB:HIDDEN  = TRUE 
   FILL-IN_KALKYL:HIDDEN  = TRUE 
   FILL-IN_KAONR:HIDDEN  = TRUE 
   FILL-IN-KATEXT:HIDDEN  = TRUE 
   FILL-IN-KPLANNR:HIDDEN  = TRUE
   FILL-IN-SOK:HIDDEN  = TRUE 
   FILL-IN-VALK:HIDDEN  = TRUE 
   FILL-IN_EAONR:HIDDEN  = TRUE 
   FILL-IN_DELNR:HIDDEN  = TRUE 
   RECT-51:HIDDEN  = TRUE 
   RECT-53:HIDDEN  = TRUE 
   TOG_AKT:HIDDEN  = TRUE 
   TOG_INAK:HIDDEN  = TRUE.
   RUN gomfalt_UI IN huvprogh (INPUT "KALK",INPUT franvart).   
END PROCEDURE.

PROCEDURE frankontroll_UI :   
   IF franvart = 1 THEN DO:      
      ASSIGN
      TOG_KALKAO:HIDDEN = FALSE
      BTN_HAOF:HIDDEN = FALSE
      BTN_AOF:HIDDEN = FALSE
      BRW_UKALK:HIDDEN  = FALSE 
      BTN_HAMT:HIDDEN  = FALSE 
      BTN_ALLBACK:HIDDEN  = FALSE 
      BTN_ALLOVER:HIDDEN  = FALSE 
      BTN_BACK:HIDDEN  = FALSE 
      BTN_OVER:HIDDEN  = FALSE
      CMB_BESORG:HIDDEN  = FALSE 
      CMB_KANSV:HIDDEN  = FALSE 
      CMB_KTYP:HIDDEN  = FALSE       
      CMB_OMR:HIDDEN  = FALSE 
      CMB_UTF:HIDDEN  = FALSE       
      FILL-IN_EKALNR:HIDDEN  = FALSE 
      FILL-IN_KALKB:HIDDEN  = FALSE 
      FILL-IN_KALKYL:HIDDEN  = FALSE 
      FILL-IN_KAONR:HIDDEN  = FALSE 
      FILL-IN-KATEXT:HIDDEN  = FALSE 
      FILL-IN-KPLANNR:HIDDEN  = FALSE
      FILL-IN-SOK:HIDDEN  = FALSE 
      FILL-IN-VALK:HIDDEN  = FALSE 
      FILL-IN_EAONR:HIDDEN  = FALSE 
      FILL-IN_DELNR:HIDDEN  = FALSE 
      RECT-51:HIDDEN  = FALSE 
      RECT-53:HIDDEN  = FALSE 
      TOG_AKT:HIDDEN  = FALSE 
      TOG_INAK:HIDDEN  = FALSE
      BRW_MAXMALL:HIDDEN = TRUE.      
   END.   
   
   IF franvart = 0 THEN.
   ELSE IF franvart NE 1 THEN DO:  
      /*
      valkbenamn:WIDTH = 40.
      x-multi = c-win:WIDTH-PIXELS / c-win:MIN-WIDTH-PIXELS. 
      y-multi = c-win:HEIGHT-PIXELS / c-win:MIN-HEIGHT-PIXELS.  
      ASSIGN
      brworgwith = BRW_VKALK:WIDTH-CHARS / x-multi
      brworghight = BRW_VKALK:HEIGHT-CHARS / y-multi
      brworgrow = BRW_VKALK:ROW            / y-multi
      brworgcol = BRW_VKALK:COLUMN         / x-multi
      btnorgrow = BTN_NY:ROW               / y-multi
      btnorgcol = BTN_NY:COL              / x-multi.
      ASSIGN
      TOG_KALKAO:HIDDEN = TRUE
      BRW_MAXMALL:HIDDEN = TRUE
      BTN_HAOF:HIDDEN = TRUE
      BTN_AOF:HIDDEN = TRUE
      BRW_VKALK:WIDTH-CHARS =   BRW_MAXMALL:WIDTH-CHARS 
      BRW_VKALK:ROW =           BRW_MAXMALL:ROW       
      BRW_VKALK:COLUMN =         BRW_MAXMALL:COLUMN  
      BRW_VKALK:HEIGHT-CHARS =  BRW_MAXMALL:HEIGHT-CHARS
      BTN_NY:ROW = 24.29        
      BTN_NY:COL = 40.         
        */
   END.   
   ELSE DO:
      valkbenamn:WIDTH = valkbenamnorgsize.      
   END.
END PROCEDURE.
PROCEDURE arendeset_UI :
   DEFINE INPUT  PARAMETER arendekalkin AS CHARACTER NO-UNDO.
   arendekalkmeny = arendekalkin.
   IF arendekalkin = "ÄRENDE" THEN C-Win:TITLE = "Ärende" + "-" + "Systemsupport 090/184540    elpool.ume@elpool.se".
   ELSE C-Win:TITLE = "Kalkylering" + "-" + "Systemsupport 090/184540    elpool.ume@elpool.se  " + foretemp.ATRHOME.   
   IF VALID-HANDLE(KalkClasserStart) THEN RUN arendeset_UI IN KalkClasserStart (INPUT arendekalkin).
   RUN arendeset_UI IN huvprogh (INPUT arendekalkin).
END PROCEDURE.
PROCEDURE arendesethelp_UI :
   DEFINE INPUT  PARAMETER arendekalkin AS CHARACTER NO-UNDO.
   IF arendekalkin = "ÄRENDE" THEN C-Win:TITLE = "Ärende" + "-" + "Systemsupport 090/184540    elpool.ume@elpool.se".
   ELSE C-Win:TITLE = "Kalkylering" + "-" + "Systemsupport 090/184540    elpool.ume@elpool.se  " + foretemp.ATRHOME.
   IF VALID-HANDLE(KalkClasserStart) THEN RUN arendeset_UI IN KalkClasserStart (INPUT arendekalkin).
   RUN arrendeopen_UI.
END PROCEDURE.
PROCEDURE arrendeopen_UI :
   DEFINE VARIABLE arendekalk AS CHARACTER NO-UNDO.
   RUN arendeget_UI IN huvprogh (OUTPUT arendekalk).
   IF arendekalk = "ÄRENDE" THEN DO:
      RUN setcolsortvar_UI IN brwproc[{&LEFT-BROWSE}] (INPUT " STATUSNIV = '" + arendekalk + "'" ).
      RUN setcolsortvar_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT " STATUSNIV = '" + arendekalk + "'" ).
   END.
   ELSE DO:
      RUN setcolsortvar_UI IN brwproc[{&LEFT-BROWSE}] (INPUT " STATUSNIV NE 'ÄRENDE'").
      RUN setcolsortvar_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT " STATUSNIV NE 'ÄRENDE'" ).
   END.
   RUN openbdynspec_UI IN brwproc[{&LEFT-BROWSE}].  
   RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].  
END PROCEDURE.
PROCEDURE allstartbrw_UI :
   DEFINE VARIABLE korextra AS LOGICAL NO-UNDO.
   korextra = FALSE.
   IF Guru.Konstanter:hoppsekvar[3] = TRUE THEN DO:
      IF NOT VALID-HANDLE(KalkClasserStart) THEN RUN Modules\Kalkyl\KalkClasserStart.P PERSISTENT SET KalkClasserStart.
   END.   
   IF Guru.Konstanter:varforetypval[27] = 1 THEN DO:  
      IF NOT VALID-HANDLE(EkgClasserStart) THEN RUN Modules\EKGdata\EkgClasserStart.p PERSISTENT SET EkgClasserStart.
   END. 
   
   IF NOT VALID-HANDLE(brwproc[{&LEFT-BROWSE}]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[{&LEFT-BROWSE}] (INPUT BRW_UKALK).
   IF NOT VALID-HANDLE(brwproc[{&RIGHT-BROWSE}]) THEN DO:
      RUN DYNBRW.P PERSISTENT SET brwproc[{&RIGHT-BROWSE}](INPUT BRW_VKALK).
      valkbenamnorgsize = valkbenamn:WIDTH.
   END.
   IF NOT VALID-HANDLE(brwproc[{&ARROWS}]) THEN DO:
      RUN DYNARROW.P PERSISTENT SET brwproc[{&ARROWS}] (INPUT BRW_UKALK, INPUT BRW_VKALK,INPUT BTN_OVER, 
                                                     INPUT BTN_ALLOVER,INPUT BTN_ALLBACK, INPUT BTN_BACK).
      RUN addfillin_UI IN brwproc[{&ARROWS}] (INPUT FILL-IN-KPLANNR, INPUT "PLANNR").
      RUN addfillin_UI IN brwproc[{&ARROWS}] (INPUT FILL-IN_KALKB, INPUT "BENAMNING").  
      RUN addfillin_UI IN brwproc[{&ARROWS}] (INPUT FILL-IN_KALKYL, INPUT "KALKNR").
      RUN addfillin_UI IN brwproc[{&ARROWS}] (INPUT FILL-IN_KAONR, INPUT "AONR").
   END.
   IF NOT VALID-HANDLE(aonrapph) THEN korextra = TRUE.
   IF Guru.Konstanter:appcon THEN DO:
      IF NOT VALID-HANDLE(edataapph) THEN   RUN EXTRADATAHMT.P PERSISTENT SET edataapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
      IF Guru.Konstanter:varforetypval[27] = 0 THEN IF NOT VALID-HANDLE(aonrapph) THEN    RUN MAONRAPP.P PERSISTENT SET aonrapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT.       
      IF Guru.Konstanter:varforetypval[27] = 0 THEN IF NOT VALID-HANDLE(kalkproch) THEN   RUN KALKAPP1.P PERSISTENT SET kalkproch ON Guru.Konstanter:apphand TRANSACTION DISTINCT.
      IF Guru.Konstanter:varforetypval[27] = 0 THEN IF NOT VALID-HANDLE(kalkhmth) THEN    RUN KALKHMT1.P PERSISTENT SET kalkhmth ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
      IF Guru.Konstanter:varforetypval[27] = 0 THEN IF NOT VALID-HANDLE(nyttaoapph2) THEN RUN NYTTAOAPP.P PERSISTENT SET nyttaoapph2 ON Guru.Konstanter:apphand TRANSACTION DISTINCT.
   END.
   ELSE DO:
      IF NOT VALID-HANDLE(edataapph) THEN  RUN EXTRADATAHMT.P PERSISTENT SET edataapph. 
      IF Guru.Konstanter:varforetypval[27] = 0 THEN IF NOT VALID-HANDLE(aonrapph) THEN   RUN MAONRAPP.P PERSISTENT SET aonrapph.   
      IF Guru.Konstanter:varforetypval[27] = 0 THEN IF NOT VALID-HANDLE(kalkproch) THEN  RUN KALKAPP1.P PERSISTENT SET kalkproch.
      IF Guru.Konstanter:varforetypval[27] = 0 THEN IF NOT VALID-HANDLE(kalkhmth) THEN   RUN KALKHMT1.P PERSISTENT SET kalkhmth.
      IF Guru.Konstanter:varforetypval[27] = 0 THEN IF NOT VALID-HANDLE(nyttaoapph2) THEN RUN NYTTAOAPP.P PERSISTENT SET nyttaoapph2.
   END.   
   IF VALID-HANDLE(kalkhmth) THEN RUN anvglob_UI IN kalkhmth (INPUT Guru.Konstanter:globanv).
   IF VALID-HANDLE(kalkproch) THEN RUN anvglob_UI IN kalkproch (INPUT Guru.Konstanter:globanv).
   RUN arrendeopen_UI.
      
   IF franvart = 1 THEN DO:                  
   END.   
   IF korextra = TRUE THEN DO:
      korextra = FALSE.
      RUN korextra_UI.
      RUN buttplac_UI.     
   END. 
   IF franvart = 2 OR  franvart = 3 THEN BTN_BORT:HIDDEN = TRUE.
   ELSE DO:
      IF Guru.Konstanter:kalk2sekvar[3] = TRUE OR Guru.Konstanter:globniv = 0 THEN DO:
         BTN_BORT:HIDDEN = FALSE.   
      END.
      ELSE BTN_BORT:HIDDEN = TRUE.
   END.   
   FOR EACH valdfasttemp WHERE valdfasttemp.SLUTVNR = 99:
      valdfasttemp.SLUTVNR = 0.
   END.
END PROCEDURE.

PROCEDURE korextra_UI :
   valdutf = 0.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "FAVO"                   
   inextradatatemp.HUVUDCH = Guru.Konstanter:globanv              
   inextradatatemp.HUVUDINT =  ?.   
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:
      valdutf = extradatatemp.SOKINT[2].      
   END.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   IF VALID-HANDLE(kalkproch) THEN RUN laddaebrpristemp_UI IN kalkproch (OUTPUT TABLE ebrpristemp).
   IF Guru.Konstanter:varforetypval[27] = 1 THEN DO:
      
   END.   
   ELSE DO:
      FIND FIRST omrtemp NO-LOCK NO-ERROR.
      IF NOT AVAILABLE omrtemp THEN DO:
         {OMRHMT.I}
      END.                   
      {JURPAVDSTART3.I}
      ASSIGN
      xhuvud = TRUE
      xdeci = TRUE
      xanmark = TRUE
      xanmark2 = FALSE
      xmtrl = TRUE
      xpris = TRUE
      xfaktor = TRUE
      offert = FALSE.
      TOG_AKT:CHECKED = TRUE.
      FIND FIRST bestkundallt NO-LOCK NO-ERROR.
      IF NOT AVAILABLE bestkundallt THEN DO:    
         bestvad = 2.
         {BESTHMT.I}      
      END.      
      FIND FIRST omrtemp WHERE omrtemp.OMRADE = Guru.Konstanter:globomr USE-INDEX OMR NO-LOCK NO-ERROR.
      IF NOT AVAILABLE omrtemp THEN DO:
         FIND FIRST omrtemp USE-INDEX OMR NO-LOCK NO-ERROR.
      END.
      IF NOT AVAILABLE omrtemp THEN ASSIGN CMB_OMR:SCREEN-VALUE = "Alla".
      ELSE ASSIGN CMB_OMR:SCREEN-VALUE = omrtemp.NAMN.
      IF Guru.Konstanter:globomr = "" OR Guru.Konstanter:globallao = TRUE THEN DO:
         CMB_OMR:SCREEN-VALUE = "Alla".                 
      END.                                           
      IF Guru.Konstanter:varforetypval[3] = 0 THEN DO:
         OPEN QUERY oq FOR EACH omrtemp USE-INDEX OMR NO-LOCK.
         GET FIRST oq NO-LOCK.
         DO WHILE AVAILABLE(omrtemp):
            FIND FIRST bestkundallt WHERE bestkundallt.BESTID = omrtemp.OMRADE NO-ERROR.
            IF NOT AVAILABLE bestkundallt THEN DO:
               CREATE bestkundallt.
               ASSIGN 
               bestkundallt.BESTID = omrtemp.OMRADE 
               bestkundallt.BESTNAMN = omrtemp.NAMN.                      
            END.
            GET NEXT oq NO-LOCK.
         END.
      END.
      CMB_BESORG:LIST-ITEMS = "".
      IF Guru.Konstanter:varforetypval[45] = 1 THEN.
      ELSE DO: 
         CMB_BESORG:ADD-FIRST("Alla").
         FOR EACH bestkundallt USE-INDEX BESTID NO-LOCK:
            CMB_BESORG:ADD-LAST(bestkundallt.BESTNAMN).
         END.
         CMB_BESORG:ADD-LAST("Samma som ovan").
         CMB_BESORG:SCREEN-VALUE = "Alla".
      END.       
      
      CMB_UTF:LIST-ITEMS = "".
      CMB_UTF:ADD-FIRST("Alla").
      FIND FIRST berkalanvandartemp WHERE berkalanvandartemp.ANVANDARE = Guru.Konstanter:globanv NO-LOCK NO-ERROR.
      IF AVAILABLE berkalanvandartemp THEN DO:
         status-ok = CMB_UTF:ADD-LAST(Guru.Konstanter:globanv + " -- " + berkalanvandartemp.AV-NAMN).
         IF valdutf = 1 THEN ASSIGN CMB_UTF:SCREEN-VALUE = Guru.Konstanter:globanv + " -- " + berkalanvandartemp.AV-NAMN.
         ELSE ASSIGN CMB_UTF:SCREEN-VALUE = "Alla".   
      END.
      FOR EACH berkalanvandartemp:
         IF berkalanvandartemp.ANVANDARE = Guru.Konstanter:globanv THEN.
         ELSE status-ok = CMB_UTF:ADD-LAST(berkalanvandartemp.ANVANDARE + " -- " + berkalanvandartemp.AV-NAMN).
      END.
   END.
   CMB_KTYP:LIST-ITEMS = "".
   IF Guru.Konstanter:varforetypval[1] = 1 OR Guru.Konstanter:varforetypval[1] = 3 THEN DO:
      CMB_KTYP:ADD-LAST("Typ 1").
      CMB_KTYP:ADD-LAST("Typ 2").
      CMB_KTYP:ADD-LAST("Typ 3"). 
      ASSIGN CMB_KTYP:SCREEN-VALUE = "Typ 2".
   END.
   /*kalkfor*/
   IF Guru.Konstanter:varforetypchar[10] = "1" THEN CMB_KTYP:ADD-LAST("Sam B/F").   
   IF Guru.Konstanter:varforetypval[1] = 1 OR Guru.Konstanter:varforetypval[1] = 2 THEN CMB_KTYP:ADD-LAST("Typ fri").         
   ELSE IF Guru.Konstanter:varforetypval[1] = 2 THEN CMB_KTYP:SCREEN-VALUE = "Typ fri". 
   IF Guru.Konstanter:varforetypval[41] = 1 THEN CMB_KTYP:ADD-LAST("Nätreg N1").  
   CMB_KTYP:ADD-LAST("Alla").
   IF Guru.Konstanter:globforetag = "CELPA" THEN ASSIGN CMB_KTYP:SCREEN-VALUE = "Alla".
   IF Guru.Konstanter:varforetypval[27] = 1 THEN ASSIGN CMB_KTYP:SCREEN-VALUE = "Alla".     
   ASSIGN      
   BTN_ALLBACK:TOOLTIP = "Alla valda tas bort från vallistan"   
   BTN_ALLOVER:TOOLTIP = "Alla väljs"
   BTN_BORT:TOOLTIP = "Ta bort en kalkyl"
   BTN_HAMT:TOOLTIP = "Dina val ovan avgör vilka du får i listan nedan."
   BTN_NY:TOOLTIP = "Skapa en ny kalkyl"
   FILL-IN_EKALNR:TOOLTIP = "Tryck RETURN här för välja enstaka" 
   FILL-IN_KAONR:LABEL = Guru.Konstanter:gaok
   CMB_JURP:LABEL = Guru.Konstanter:gjuk
   CMB_AVD:LABEL= Guru.Konstanter:gavdk   
   CMB_OMR:LABEL = Guru.Konstanter:gomrk
   FILL-IN_EAONR:LABEL = Guru.Konstanter:gaok
   CMB_BESORG:LABEL = RIGHT-TRIM(SUBSTRIN(Guru.Konstanter:gbestk,1,12)).
   &Scoped-define FORMATNAMN FILL-IN_KAONR      
   {AOFORMAT4.I}   
   &Scoped-define FORMATNAMN FILL-IN_EAONR   
   {AOFORMAT4.I}
   &Scoped-define FORMATNAMN FILL-IN_DELNR   
   {DELNRFORMAT2.I}
END PROCEDURE.

PROCEDURE vcbrwkalk_UI :   
   RUN selectfoc_UI.
   IF AVAILABLE valdfasttemp THEN DO:
      ASSIGN
      Guru.GlobalaVariabler:plusaonr = valdfasttemp.AONR
      Guru.GlobalaVariabler:plusdnr = valdfasttemp.DELNR.
   END.
   ELSE DO:
      Guru.GlobalaVariabler:plusaonr = ?.
      RETURN.
   END.
   IF franvart = 2 OR  franvart = 3 THEN DO:
      IF valdfasttemp.KALKNR = ? THEN DO:
         IF Guru.Konstanter:kalk2sekvar[1] = TRUE OR Guru.Konstanter:globniv = 0 THEN DO:
            BTN_NY:HIDDEN = FALSE.
         END.
         ELSE BTN_NY:HIDDEN = TRUE.
         BTN_BORT:HIDDEN = TRUE.
      END.
      ELSE DO:
         BTN_NY:HIDDEN = TRUE.
         IF valdfasttemp.AONR = ? AND valdfasttemp.PLANNR = ? THEN DO:
            IF Guru.Konstanter:kalk2sekvar[3] = TRUE OR Guru.Konstanter:globniv = 0 THEN DO:
               BTN_BORT:HIDDEN  = FALSE.
            END.
         END.
         ELSE BTN_BORT:HIDDEN = TRUE.
      END.     
   END.   
END PROCEDURE.
PROCEDURE repo_UI :                              
   RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
   RUN vcbrwkalk_UI.
END PROCEDURE.

PROCEDURE borthand_UI :
   valdkalkh:EMPTY-TEMP-TABLE()  NO-ERROR.    
   IF VALID-HANDLE(valdkalkh) THEN   DELETE OBJECT valdkalkh NO-ERROR.
   valdkalkh = ?.
   {BORTBRWPROC.I}   
    
   IF VALID-HANDLE(KalkClasserStart) THEN DELETE PROCEDURE KalkClasserStart NO-ERROR.
   IF VALID-HANDLE(EkgClasserStart) THEN DELETE PROCEDURE EkgClasserStart NO-ERROR.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph NO-ERROR.  
   edataapph = ?.          
   IF VALID-HANDLE(aonrapph) THEN DELETE PROCEDURE aonrapph NO-ERROR.      
   IF VALID-HANDLE(kalkhmth) THEN DELETE PROCEDURE kalkhmth NO-ERROR.
   IF VALID-HANDLE(kalkproch) THEN DELETE PROCEDURE kalkproch NO-ERROR.   
   IF VALID-HANDLE(nyttaoapph2) THEN DO:
      RUN borthandle_UI IN nyttaoapph2 NO-ERROR.
      DELETE PROCEDURE nyttaoapph2 NO-ERROR.
      nyttaoapph2 = ?.
   END.
END PROCEDURE.

FUNCTION brwval RETURNS LOGICAL
  ( /* parameter-definitions */ ) :
/*------------------------------------------------------------------------------
  Purpose:  
    Notes:  
------------------------------------------------------------------------------*/
   DEFINE VARIABLE leftbrwakt AS LOGICAL NO-UNDO.
   RUN urvalaktiv_UI IN brwproc[{&ARROWS}] (OUTPUT leftbrwakt).
   IF leftbrwakt = TRUE THEN 
      antal_valda =   BRW_UKALK:NUM-SELECTED-ROWS.
   ELSE antal_valda = BRW_VKALK:NUM-SELECTED-ROWS. 
   IF antal_valda = 0 THEN DO:      
      IF arendekalkmeny = "ÄRENDE" THEN MESSAGE "Inget ärende är valt!" VIEW-AS ALERT-BOX.
      ELSE MESSAGE "Ingen kalkyl är vald!" VIEW-AS ALERT-BOX.
      RETURN TRUE.                
   END.
   IF leftbrwakt = TRUE THEN DO:
      EMPTY TEMP-TABLE valdfasttemp NO-ERROR.       
      RUN sel_over_UI IN brwproc[{&ARROWS}].
      RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].  
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdfasttemp)).
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
   END.
   ELSE DO:
      BRW_VKALK:SELECT-FOCUSED-ROW() NO-ERROR. 
      FIND FIRST valdfasttemp WHERE ROWID(valdfasttemp) = valdkalkh:ROWID NO-LOCK NO-ERROR.
   END.
   RETURN FALSE.   /* Function return value. */
END FUNCTION.
