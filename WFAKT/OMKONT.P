/*OMKONT.P*/
FUNCTION runda RETURNS DECIMAL
  ( INPUT varedin AS DECIMAL) :
  RETURN ROUND(varedin,0).   /* Function return value. */
END FUNCTION.
&Scoped-define NEW NEW
{GLOBVAR2DEL1.I}
FIND FIRST FORETAG NO-LOCK NO-ERROR.
Guru.Konstanter:globforetag = FORETAG.FORETAG.
RUN STYRFORE.P (INPUT Guru.Konstanter:globforetag).

{FAKTTEMP.I}
{FAKTTYPDEF.I}
{FAKTTYPSKAP.I}
{VISKONTAB.I}
DEFINE INPUT PARAMETER vad AS INTEGER NO-UNDO.
DEFINE INPUT PARAMETER infakplannr  AS INTEGER NO-UNDO.
DEFINE INPUT PARAMETER fdelnrvar   AS INTEGER NO-UNDO.
DEFINE OUTPUT PARAMETER TABLE FOR viskonttemp.
/*
DEFINE VARIABLE vad AS INTEGER NO-UNDO.
DEFINE VARIABLE infakplannr  AS INTEGER NO-UNDO.
DEFINE VARIABLE fdelnrvar   AS INTEGER NO-UNDO.
vad = 1.
infakplannr = 7.
fdelnrvar   = 040520.
*/
   {FAKTFRIT.I}
{EXTRADATA.I}  
DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.
DEFINE VARIABLE intaktvarhj  AS LOGICAL NO-UNDO.
DEFINE VARIABLE kundvarhj    AS LOGICAL NO-UNDO.
DEFINE VARIABLE motpartvarhj AS LOGICAL NO-UNDO.
RUN EXTRADATAHMT.P PERSISTENT SET edataapph.
DEFINE VARIABLE vartyp AS INTEGER NO-UNDO.
DEFINE VARIABLE frinr AS INTEGER NO-UNDO.
DEFINE VARIABLE faoff AS DECIMAL NO-UNDO.
DEFINE VARIABLE nyfakttotal AS DECIMAL NO-UNDO.
DEFINE VARIABLE nymomstotal AS DECIMAL NO-UNDO.
DEFINE VARIABLE totkoll AS DECIMAL NO-UNDO.
DEFINE VARIABLE nyber AS DECIMAL NO-UNDO.
DEFINE VARIABLE delfakt AS DECIMAL  NO-UNDO.
DEFINE VARIABLE extrasumma AS DECIMAL  NO-UNDO.
DEFINE VARIABLE musz AS LOGICAL NO-UNDO.
DEFINE TEMP-TABLE artemp NO-UNDO
   FIELD ARTAL AS INTEGER
   INDEX ARTAL ARTAL.

DEFINE TEMP-TABLE frikolltemp NO-UNDO  
   FIELD AONR AS CHARACTER
   FIELD DELNR AS INTEGER 
   FIELD TOTBELOPP AS DECIMAL 
   FIELD TOTFAKT AS DECIMAL
   FIELD FRIBELOPP AS DECIMAL
   FIELD FORDELNING AS LOGICAL
   INDEX AONR IS PRIMARY AONR DELNR.
DEFINE TEMP-TABLE fktemp NO-UNDO  LIKE FAKTKUNDKONTO
   FIELD TYP AS INTEGER
   FIELD K1 AS CHARACTER
   FIELD K2 AS CHARACTER
   FIELD K3 AS CHARACTER
   FIELD K4 AS CHARACTER
   FIELD K5 AS CHARACTER
   INDEX TYP TYP.
DEFINE TEMP-TABLE fitemp NO-UNDO  LIKE FAKTINTAKTKONT
   FIELD TYP AS INTEGER
   FIELD K1 AS CHARACTER
   FIELD K2 AS CHARACTER
   FIELD K3 AS CHARACTER
   FIELD K4 AS CHARACTER
   FIELD K5 AS CHARACTER
   INDEX TYP TYP.
DEFINE TEMP-TABLE fmtemp NO-UNDO  LIKE FAKTMOMS
   FIELD TYP2 AS INTEGER
   FIELD K1 AS CHARACTER
   FIELD K2 AS CHARACTER
   FIELD K3 AS CHARACTER
   FIELD K4 AS CHARACTER
   FIELD K5 AS CHARACTER
   INDEX TYP TYP.
DEFINE VARIABLE varaonr LIKE AONRTAB.AONR NO-UNDO.
DEFINE VARIABLE vardelnr LIKE AONRTAB.DELNR NO-UNDO.
DEFINE VARIABLE varomr LIKE AONRTAB.OMRADE NO-UNDO.
DEFINE VARIABLE orevar AS LOGICAL NO-UNDO.   
DEFINE VARIABLE k1var AS CHARACTER NO-UNDO.
DEFINE VARIABLE k2var AS CHARACTER NO-UNDO.
DEFINE VARIABLE k3var AS CHARACTER NO-UNDO.
DEFINE VARIABLE k4var AS CHARACTER NO-UNDO.
DEFINE VARIABLE k5var AS CHARACTER NO-UNDO.
DEFINE VARIABLE tidfaktvar AS DECIMAL NO-UNDO.
DEFINE VARIABLE tidmomsvar AS DECIMAL NO-UNDO.
DEFINE VARIABLE typvarid AS INTEGER NO-UNDO.
EMPTY TEMP-TABLE viskonttemp NO-ERROR. 

FIND FIRST FAKTPLAN WHERE FAKTPLAN.FAKTNR = infakplannr NO-LOCK NO-ERROR.    
FIND FIRST faktyptemp WHERE faktyptemp.FAKTTYP = FAKTPLAN.FAKTTYP NO-ERROR.
vartyp = faktyptemp.TYP. 
IF vad = 1 THEN DO:
   OPEN QUERY faktuq FOR EACH FAKTURERAD WHERE 
   FAKTURERAD.FAKTNR = FAKTPLAN.FAKTNR USE-INDEX FAKTNR NO-LOCK.
   GET FIRST faktuq NO-LOCK.   
   DO WHILE AVAILABLE(FAKTURERAD):
      IF FAKTURERAD.FDELNR NE fdelnrvar THEN DO:
         ASSIGN                  
         tidmomsvar = tidmomsvar + FAKTURERAD.MOMSBELOPP
         tidfaktvar =  tidfaktvar + FAKTURERAD.TOTPRIS. 
      END.     
      GET NEXT faktuq NO-LOCK.
   END.
   FIND FIRST FAKTURERAD WHERE FAKTURERAD.FAKTNR = infakplannr AND FAKTURERAD.FDELNR = fdelnrvar  NO-LOCK NO-ERROR.   
   typvarid = FAKTURERAD.FAKTTYPID.            
   FIND FIRST FAKTREGLER WHERE FAKTREGLER.FAKTNR = infakplannr 
   USE-INDEX FAKTREGLER NO-LOCK NO-ERROR.
   OPEN QUERY faktaonrq FOR EACH FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR 
   USE-INDEX FAKTA NO-LOCK.  
   EMPTY TEMP-TABLE fktemp NO-ERROR. 
   IF vartyp = 1 THEN DO:            /*FASTPRIS*/
      RUN inaktfast_UI.
      RUN momsfast_UI.
      RUN inaktfria_UI.
      RUN momsfri_UI.                        
   END.
   ELSE IF vartyp = 2 THEN DO:    /*AVTAL*/        
      RUN inaktfast_UI.
      RUN momsfast_UI.
      RUN inaktfria_UI.
      RUN momsfri_UI.                         
   END.   
   ELSE IF vartyp = 3 THEN DO:           /*ACONTO*/
      IF FAKTPLAN.SLUTFAKT = FALSE THEN DO:
         RUN inaktfast_UI.
         RUN momsfast_UI. 
         RUN inaktfria_UI.
         RUN momsfri_UI.
      END.
      ELSE DO:    
         RUN tid_UI.
         RUN kostreg_UI.
         RUN inakttid_UI.
         RUN momstid_UI.         
         RUN inaktkost_UI.
         RUN momskost_UI.          
         RUN inaktfria_UI.
         RUN momsfri_UI.
         /*AVRÄKNING*/            
      END. 
   END.
   ELSE IF vartyp = 4 OR vartyp = 8 THEN DO:                /*LÖPANDE*/      
      RUN tid_UI.
      RUN kostreg_UI.
      RUN inakttid_UI.
      RUN momstid_UI.      
      RUN inaktkost_UI.       
      RUN momskost_UI.      
      RUN inaktfria_UI.       
      RUN momsfri_UI.                       
   END.
   ELSE IF vartyp = 5 THEN DO:       /*TAKPRIS*/
      RUN tid_UI.
      RUN kostreg_UI.
      RUN inakttid_UI.     
      RUN momstid_UI.      
      RUN inaktkost_UI.
      RUN momskost_UI. 
      RUN inaktfria_UI.
      RUN momsfri_UI.              
   END.
   ELSE IF vartyp = 52 THEN DO:            /*TAKPRIS UPPARB*/
      RUN inaktupp_UI.
      RUN momsupp_UI.
      RUN inaktfria_UI.
      RUN momsfri_UI.                         
   END.
   ELSE IF vartyp = 6 THEN DO:       /*FRI FAKT*/
      RUN inaktfria_UI.
      RUN momsfri_UI.              
   END.
   ELSE IF vartyp = 7 THEN DO:       /*BOKFÖRING*/
      RUN inaktfria_UI.
   END.   
   RUN moms_UI.
   RUN visk_UI.
END.

IF vad = 2 THEN DO:
   FIND FIRST FAKTKRED WHERE FAKTKRED.FAKTNR = infakplannr AND FAKTKRED.FDELNR = fdelnrvar  NO-LOCK NO-ERROR.
   typvarid = FAKTKRED.FAKTTYPID.
   FIND FIRST FAKTREGLER WHERE FAKTREGLER.FAKTNR = infakplannr 
   USE-INDEX FAKTREGLER NO-LOCK NO-ERROR.
   OPEN QUERY faktaonrq FOR EACH FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR 
   USE-INDEX FAKTA NO-LOCK.  
   EMPTY TEMP-TABLE fktemp NO-ERROR. 
   IF vartyp = 1 THEN DO:            /*FASTPRIS*/
      RUN inaktfastk_UI.
      RUN momsfastk_UI.
      RUN inaktfriak_UI.
      RUN momsfri_UI.                        
   END.
   ELSE IF vartyp = 2 THEN DO:    /*AVTAL*/        
      RUN inaktfastk_UI.
      RUN momsfastk_UI.
      RUN inaktfriak_UI.
      RUN momsfri_UI.                         
   END.   
   ELSE IF vartyp = 3 THEN DO:           /*ACONTO*/
      FIND FIRST FAKTURERINGSTYP WHERE 
      FAKTURERINGSTYP.FAKTTYPID = FAKTKRED.FAKTTYPID NO-LOCK NO-ERROR. 
      IF AVAILABLE FAKTURERINGSTYP THEN DO:       
         IF FAKTURERINGSTYP.SLUT = TRUE THEN DO:
            RUN tidk_UI.
            RUN kostregk_UI.
            RUN inakttid_UI.
            RUN momstid_UI.         
            RUN inaktkost_UI.
            RUN momskost_UI.          
            RUN inaktfriak_UI.
            RUN momsfri_UI.
            /*AVRÄKNING*/            
         END.
               
         ELSE DO:    
            RUN inaktfastk_UI.
            RUN momsfastk_UI. 
            RUN inaktfriak_UI.
            RUN momsfri_UI.
         END. 
      END.
      ELSE DO:    
         RUN inaktfastk_UI.
         RUN momsfastk_UI. 
         RUN inaktfriak_UI.
         RUN momsfri_UI.
      END.
   END.
   ELSE IF vartyp = 4 OR vartyp = 8 THEN DO:                /*LÖPANDE*/      
      RUN tidk_UI.
      RUN kostregk_UI.
      RUN inakttid_UI.
      RUN momstid_UI.      
      RUN inaktkost_UI.       
      RUN momskost_UI.      
      RUN inaktfriak_UI.       
      RUN momsfri_UI.                       
   END.
   ELSE IF vartyp = 5 THEN DO:       /*TAKPRIS*/
      RUN tidk_UI.
      RUN kostregk_UI.
      RUN inakttid_UI.     
      RUN momstid_UI.      
      RUN inaktkost_UI.
      RUN momskost_UI. 
      RUN inaktfriak_UI.
      RUN momsfri_UI.              
   END.
   ELSE IF vartyp = 52 THEN DO:            /*TAKPRIS UPPARB*/
      RUN inaktuppk_UI.
      RUN momsuppk_UI.
      RUN inaktfriak_UI.
      RUN momsfri_UI.                         
   END.
   ELSE IF vartyp = 6 THEN DO:       /*FRI FAKT*/
      RUN inaktfriak_UI.
      RUN momsfri_UI.              
   END.
   ELSE IF vartyp = 7 THEN DO:       /*BOKFÖRING*/
      RUN inaktfriak_UI.
   END.   
   RUN moms_UI.
   RUN visk_UI.
END.
IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph.        
edataapph = ?.
PROCEDURE moms_UI:
   DEFINE VARIABLE rundavar AS LOGICAL NO-UNDO.
   FOR EACH fmtemp NO-LOCK,
   EACH MOMSTAB WHERE MOMSTAB.MOMSID = fmtemp.MOMSID NO-LOCK.
      IF MOMSTAB.MOMSEXTERNT = 0 THEN rundavar = TRUE.
      ASSIGN
      fmtemp.MOMSBELOPP = fmtemp.BELOPP * MOMSTAB.MOMSEXTERNT / 100 
      fmtemp.MOMSEXTERNT = MOMSTAB.MOMSEXTERNT.
   END.  
   IF rundavar = TRUE THEN DO:
      OPEN QUERY faktkontq FOR EACH fitemp.
      GET FIRST faktkontq NO-LOCK.
      DO WHILE AVAILABLE(fitemp):
         fitemp.BELOPP = runda(fitemp.BELOPP).
         GET NEXT faktkontq NO-LOCK.       
      END.
      OPEN QUERY faktkundq FOR EACH fktemp.
      GET FIRST faktkundq .
      DO WHILE AVAILABLE(fktemp):
         fktemp.BELOPP = runda(fktemp.BELOPP).
         GET NEXT faktkundq NO-LOCK.
      END.
      OPEN QUERY faktmomsq FOR EACH fmtemp.
      GET FIRST faktmomsq NO-LOCK.
      DO WHILE AVAILABLE(fmtemp):
         fmtemp.BELOPP = runda(fmtemp.BELOPP).
         GET NEXT faktmomsq NO-LOCK.
      END.      
   END.                 
   FOR EACH fktemp BREAK BY fktemp.VFAKTNR:
      ACCUMULATE fktemp.BELOPP (TOTAL BY fktemp.VFAKTNR).
      IF LAST-OF(fktemp.VFAKTNR) THEN DO:                                      
         totkoll = (ACCUM TOTAL BY fktemp.VFAKTNR fktemp.BELOPP).             
      END.
   END.       
   IF vad = 1 THEN DO:
      IF FAKTURERAD.TOTPRIS NE totkoll THEN DO:
         FIND FIRST fktemp NO-LOCK NO-ERROR.      
         IF AVAILABLE fktemp THEN DO:
            fktemp.BELOPP = fktemp.BELOPP + (FAKTURERAD.TOTPRIS - totkoll).
            FIND FIRST fitemp WHERE 
            fitemp.AONR = fktemp.AONR AND
            fitemp.DELNR = fmtemp.DELNR AND
            fitemp.TYP = fktemp.TYP
            NO-LOCK NO-ERROR.
            IF AVAILABLE fitemp THEN DO:
               fitemp.BELOPP = fitemp.BELOPP + 
               (FAKTURERAD.TOTPRIS - totkoll).
            END.                  
            FIND FIRST fmtemp WHERE 
            fmtemp.AONR = fktemp.AONR AND
            fmtemp.DELNR = fktemp.DELNR AND 
            fmtemp.TYP2 = fktemp.TYP
            NO-LOCK NO-ERROR.
            IF AVAILABLE fmtemp THEN DO: 
               fmtemp.BELOPP = fmtemp.BELOPP + 
               (FAKTURERAD.TOTPRIS - totkoll).
            END.
         END.
      END.
   END.
      
END PROCEDURE.

PROCEDURE visk_UI :
   
   FOR EACH fktemp,
   EACH KUNDFODRAN WHERE KUNDFODRAN.KUNDKONTOID = fktemp.KUNDKONTOID NO-LOCK, 
   EACH MOTPART WHERE MOTPART.MOTPARTID = fktemp.MOTPARTID NO-LOCK:
     /*har man inga aonr får man inte moms på kundkonto*/
      
      FIND FIRST viskonttemp WHERE viskonttemp.ORDNING = 1 AND 
      viskonttemp.AONR = fktemp.AONR AND viskonttemp.DELNR = fktemp.DELNR AND               
      viskonttemp.KONTO = KUNDFODRAN.KUNDKONTO AND viskonttemp.MOTPART = MOTPART.MOTPART AND 
      viskonttemp.TYP = fktemp.TYP
      NO-LOCK NO-ERROR.
      IF NOT AVAILABLE viskonttemp THEN DO:
         CREATE viskonttemp.
         RUN aokonto_UI (INPUT fktemp.AONR,INPUT fktemp.DELNR).
         ASSIGN
         viskonttemp.OMRADE = varomr.
         IF orevar = FALSE THEN DO:
            orevar = TRUE.
            ASSIGN
            viskonttemp.ORVAR = TRUE.
            IF vad = 1 THEN viskonttemp.DEBET = FAKTURERAD.ORESUTJ.
            ELSE viskonttemp.DEBET = FAKTKRED.ORESUTJ.
         END.   
         ASSIGN
         viskonttemp.K1 = fktemp.K1
         viskonttemp.K2 = fktemp.K2
         viskonttemp.K3 = fktemp.K3
         viskonttemp.K4 = fktemp.K4
         viskonttemp.K5 = fktemp.K5.
         IF viskonttemp.K1 = "" THEN viskonttemp.K1 = k1var.
         IF viskonttemp.K2 = "" THEN viskonttemp.K2 = k2var.
         IF viskonttemp.K3 = "" THEN viskonttemp.K3 = k3var.
         IF viskonttemp.K4 = "" THEN viskonttemp.K4 = k4var.
         IF viskonttemp.K5 = "" THEN viskonttemp.K5 = k5var.
      END.
      ASSIGN 
      viskonttemp.ORDNING = 1
      viskonttemp.TYP = fktemp.TYP
      viskonttemp.AONR = fktemp.AONR      
      viskonttemp.DELNR = fktemp.DELNR 
      viskonttemp.VDELNR = STRING(fktemp.DELNR,Guru.Konstanter:varforetypchar[1])      
      viskonttemp.KONTO = KUNDFODRAN.KUNDKONTO      
      viskonttemp.MOTPART = MOTPART.MOTPART      
      viskonttemp.DEBET = viskonttemp.DEBET + fktemp.BELOPP
      viskonttemp.KREDIT = 0.      
      
   END.
   FOR EACH fitemp,
   EACH INTAKTTAB WHERE INTAKTTAB.INTAKTID = fitemp.INTAKTID NO-LOCK, 
   EACH MOTPART WHERE MOTPART.MOTPARTID = fitemp.MOTPARTID NO-LOCK:   
      FIND FIRST viskonttemp WHERE viskonttemp.ORDNING = 3 AND 
      viskonttemp.AONR = fitemp.AONR AND viskonttemp.DELNR = fitemp.DELNR AND
      viskonttemp.KONTO = INTAKTTAB.INTAKTKONTO AND viskonttemp.MOTPART = MOTPART.MOTPART AND
      viskonttemp.TYP = fitemp.TYP
      NO-LOCK NO-ERROR.
      IF NOT AVAILABLE viskonttemp THEN DO:
         CREATE viskonttemp.
         RUN aokonto_UI (INPUT fitemp.AONR,INPUT fitemp.DELNR).
         ASSIGN
         viskonttemp.OMRADE = varomr.
         ASSIGN
         viskonttemp.K1 = fitemp.K1
         viskonttemp.K2 = fitemp.K2
         viskonttemp.K3 = fitemp.K3
         viskonttemp.K4 = fitemp.K4
         viskonttemp.K5 = fitemp.K5.
         IF viskonttemp.K1 = "" THEN viskonttemp.K1 = k1var.
         IF viskonttemp.K2 = "" THEN viskonttemp.K2 = k2var.
         IF viskonttemp.K3 = "" THEN viskonttemp.K3 = k3var.
         IF viskonttemp.K4 = "" THEN viskonttemp.K4 = k4var.
         IF viskonttemp.K5 = "" THEN viskonttemp.K5 = k5var.            
      END.
      ASSIGN 
      viskonttemp.ORDNING = 3
      viskonttemp.AONR = fitemp.AONR      
      viskonttemp.DELNR = fitemp.DELNR      
      viskonttemp.VDELNR = STRING(fitemp.DELNR,Guru.Konstanter:varforetypchar[1]) 
      viskonttemp.KONTO = INTAKTTAB.INTAKTKONTO      
      viskonttemp.MOTPART = MOTPART.MOTPART      
      viskonttemp.DEBET = 0 
      viskonttemp.KREDIT = viskonttemp.KREDIT + fitemp.BELOPP.            
   END.
   orevar = FALSE.
   FOR EACH fmtemp,
   EACH MOMSTAB WHERE MOMSTAB.MOMSID = fmtemp.MOMSID NO-LOCK.       
      FIND FIRST viskonttemp WHERE viskonttemp.ORDNING = 2 AND 
      viskonttemp.AONR = fmtemp.AONR AND viskonttemp.DELNR = fmtemp.DELNR AND
      viskonttemp.KONTO = MOMSTAB.MOMSKOD AND 
      viskonttemp.TYP = fmtemp.TYP2
      NO-LOCK NO-ERROR.
      IF NOT AVAILABLE viskonttemp THEN DO:
         CREATE viskonttemp.        
         viskonttemp.TYP = fmtemp.TYP2.
         RUN aokonto_UI (INPUT fmtemp.AONR,INPUT fmtemp.DELNR).
      END.
      IF orevar = FALSE THEN DO:
         IF Guru.Konstanter:varforetypval[15] = 0 THEN DO:
            orevar = TRUE.
            IF vad = 1 THEN viskonttemp.KREDIT = FAKTURERAD.ORESUTJ.
            ELSE viskonttemp.KREDIT = FAKTKRED.ORESUTJ.
         END.        
      END.
      /*har man inga aonr får man inte moms på kundkonto*/ 
      ASSIGN 
      viskonttemp.ORDNING = 2
      viskonttemp.KONTO = MOMSTAB.MOMSKOD      
      viskonttemp.MOTPART = ""
      viskonttemp.DEBET = 0 
      viskonttemp.KREDIT = viskonttemp.KREDIT + fmtemp.MOMSBELOPP
      viskonttemp.K1 = fmtemp.K1
      viskonttemp.K2 = fmtemp.K2
      viskonttemp.K3 = fmtemp.K3
      viskonttemp.K4 = fmtemp.K4
      viskonttemp.K5 = fmtemp.K5.
      IF viskonttemp.K1 = "" THEN viskonttemp.K1 = k1var.
      IF viskonttemp.K2 = "" THEN viskonttemp.K2 = k2var.
      IF viskonttemp.K3 = "" THEN viskonttemp.K3 = k3var.
      IF viskonttemp.K4 = "" THEN viskonttemp.K4 = k4var.
      IF viskonttemp.K5 = "" THEN viskonttemp.K5 = k5var.            
      FIND FIRST vismomstemp WHERE vismomstemp.AONR = fmtemp.AONR AND
      vismomstemp.DELNR = fmtemp.DELNR AND
      vismomstemp.K1 = viskonttemp.K1 AND
      vismomstemp.K2 = viskonttemp.K2 AND
      vismomstemp.K3 = viskonttemp.K3 AND
      vismomstemp.K4 = viskonttemp.K4 AND
      vismomstemp.K5 = viskonttemp.K5 
      NO-ERROR.
      
      IF NOT AVAILABLE vismomstemp THEN CREATE vismomstemp.
      ASSIGN
      vismomstemp.AONR = fmtemp.AONR 
      vismomstemp.DELNR = fmtemp.DELNR
      vismomstemp.K1 = viskonttemp.K1
      vismomstemp.K2 = viskonttemp.K2
      vismomstemp.K3 = viskonttemp.K3
      vismomstemp.K4 = viskonttemp.K4
      vismomstemp.K5 = viskonttemp.K5
      vismomstemp.MOMS = vismomstemp.MOMS + fmtemp.MOMSBELOPP.                 
   END.
   FOR EACH vismomstemp:
      FIND FIRST viskonttemp WHERE viskonttemp.ORDNING = 1 AND 
      viskonttemp.AONR = vismomstemp.AONR AND viskonttemp.DELNR = vismomstemp.DELNR AND
      viskonttemp.K1 = vismomstemp.K1 AND
      viskonttemp.K2 = vismomstemp.K2 AND
      viskonttemp.K3 = vismomstemp.K3 AND
      viskonttemp.K4 = vismomstemp.K4 AND
      viskonttemp.K5 = vismomstemp.K5 NO-ERROR.
      viskonttemp.DEBET = viskonttemp.DEBET + vismomstemp.MOMS.                  
   END.          
END PROCEDURE.
PROCEDURE aokonto_UI :
   DEFINE INPUT PARAMETER inao AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER indel AS INTEGER NO-UNDO.
   FIND FIRST AONRTAB WHERE AONRTAB.AONR = inao AND 
   AONRTAB.DELNR = indel NO-LOCK NO-ERROR.
   IF NOT AVAILABLE AONRTAB THEN RETURN.
   /*har man inga aonr får man inte moms på kundkonto*/
   ASSIGN 
   k1var = ""
   k2var = ""
   k3var = ""
   k4var = ""
   k5var = ""
   varomr = AONRTAB.OMRADE
   varaonr = AONRTAB.AONR          
   vardelnr = AONRTAB.DELNR.     
   IF vad = 1 THEN DO:
      FIND FIRST FAKTAONRKONTO WHERE 
      FAKTAONRKONTO.FAKTNR =  infakplannr AND
      FAKTAONRKONTO.VFAKTNR = FAKTURERAD.VFAKTNR AND
      FAKTAONRKONTO.AONR = inao AND 
      FAKTAONRKONTO.DELNR = indel
      NO-LOCK NO-ERROR.
      IF AVAILABLE FAKTAONRKONTO THEN DO:
         ASSIGN
         k1var = FAKTAONRKONTO.K1  
         k2var = FAKTAONRKONTO.K2  
         k3var = FAKTAONRKONTO.K3  
         k4var = FAKTAONRKONTO.K4  
         k5var = FAKTAONRKONTO.K5.  
      END.
      ELSE DO:
         FIND FIRST AONRKONTKOD WHERE 
         AONRKONTKOD.AONR = inao AND 
         AONRKONTKOD.DELNR = indel
         NO-LOCK NO-ERROR.
         IF AVAILABLE AONRKONTKOD THEN DO:
            ASSIGN
            k1var = AONRKONTKOD.K1   
            k2var = AONRKONTKOD.K2   
            k3var = AONRKONTKOD.K3   
            k4var = AONRKONTKOD.K4   
            k5var = AONRKONTKOD.K5.  
         END.
      END.
   END.
   ELSE DO:
      FIND FIRST FAKTAONRKONTOKRED WHERE 
      FAKTAONRKONTOKRED.FAKTNR =  infakplannr AND
      FAKTAONRKONTOKRED.VKREDIT = FAKTKRED.VKREDIT AND
      FAKTAONRKONTOKRED.AONR = inao AND 
      FAKTAONRKONTOKRED.DELNR = indel
      NO-LOCK NO-ERROR.
      IF AVAILABLE FAKTAONRKONTOKRED THEN DO:
         ASSIGN
         k1var = FAKTAONRKONTOKRED.K1  
         k2var = FAKTAONRKONTOKRED.K2  
         k3var = FAKTAONRKONTOKRED.K3  
         k4var = FAKTAONRKONTOKRED.K4  
         k5var = FAKTAONRKONTOKRED.K5.  
      END.
      ELSE DO:
         FIND FIRST AONRKONTKOD WHERE 
         AONRKONTKOD.AONR = inao AND 
         AONRKONTKOD.DELNR = indel
         NO-LOCK NO-ERROR.
         IF AVAILABLE AONRKONTKOD THEN DO:
            ASSIGN
            k1var = AONRKONTKOD.K1   
            k2var = AONRKONTKOD.K2   
            k3var = AONRKONTKOD.K3   
            k4var = AONRKONTKOD.K4   
            k5var = AONRKONTKOD.K5.  
         END.
      END.
   END.
END PROCEDURE.
PROCEDURE inaktfast_UI :  
   GET FIRST faktaonrq NO-LOCK.
   DO WHILE AVAILABLE(FAKTAONR):
       /*ALLA INGÅENDE AONR PRIS*/
      faoff = faoff + FAKTAONR.OPRIS.
      CREATE frikolltemp.
      ASSIGN
      frikolltemp.AONR  = FAKTAONR.AONR
      frikolltemp.DELNR = FAKTAONR.DELNR
      frikolltemp.TOTBELOPP = FAKTAONR.OPRIS.
      GET NEXT faktaonrq NO-LOCK.  
   END.
   FOR EACH FAKTSTART WHERE FAKTSTART.FAKTNR = FAKTPLAN.FAKTNR AND                     
   FAKTSTART.VFAKTNR = FAKTURERAD.VFAKTNR AND FAKTSTART.FAKTURERAD = TRUE NO-LOCK BREAK 
   BY FAKTSTART.FAKTURERAD:              
      ACCUMULATE FAKTSTART.BELOPP (TOTAL BY FAKTSTART.FAKTURERAD).            
      IF LAST-OF(FAKTSTART.FAKTURERAD) THEN DO:
         nyfakttotal = nyfakttotal + (ACCUM TOTAL BY FAKTSTART.FAKTURERAD FAKTSTART.BELOPP).
      END.   
   END.   
   FOR EACH FAKTSTART WHERE FAKTSTART.FAKTNR = FAKTPLAN.FAKTNR AND
   FAKTSTART.VFAKTNR = FAKTURERAD.VFAKTNR AND FAKTSTART.FAKTURERAD = TRUE NO-LOCK.
      IF FAKTSTART.PLANDATUM = ? THEN DO:
         FIND FIRST artemp WHERE artemp.ARTAL = YEAR(TODAY) NO-ERROR.  
      END.
      ELSE FIND FIRST artemp WHERE artemp.ARTAL = YEAR(FAKTSTART.PLANDATUM) NO-ERROR.
      IF NOT AVAILABLE artemp THEN DO:
         CREATE artemp.
         artemp.ARTAL = YEAR(FAKTSTART.PLANDATUM).
         IF artemp.ARTAL = ? THEN artemp.ARTAL = YEAR(TODAY).
      END.      
   END.
   
   FOR EACH FAKTSTART WHERE FAKTSTART.FAKTNR = FAKTPLAN.FAKTNR NO-LOCK:
      IF FAKTSTART.VFAKTNR = FAKTURERAD.VFAKTNR AND FAKTSTART.FAKTURERAD = TRUE THEN DO:
         musz = musz.
      END.
      ELSE DO:
         FIND FIRST artemp WHERE artemp.ARTAL = YEAR(FAKTSTART.PLANDATUM) NO-ERROR.
         IF AVAILABLE artemp THEN musz = musz.
         ELSE extrasumma = extrasumma + FAKTSTART.BELOPP.
      END.
   END.   
   IF FAKTPLAN.OFFERTPRIS > 0 THEN DO:
      delfakt = nyfakttotal / FAKTPLAN.OFFERTPRIS.     
      IF vartyp = 1 THEN RUN nyproc_UI.      
   END.     
   GET FIRST faktaonrq NO-LOCK.   
   IF vartyp = 1 OR vartyp = 3 THEN DO: 
      GET FIRST faktaonrq NO-LOCK.      
      IF faoff = FAKTPLAN.OFFERTPRIS AND faoff > 0 THEN DO:
         DO WHILE AVAILABLE(FAKTAONR) TRANSACTION:      
            FIND FIRST frikolltemp WHERE frikolltemp.AONR = FAKTAONR.AONR AND 
            frikolltemp.DELNR = FAKTAONR.DELNR NO-ERROR.             
            IF frikolltemp.FORDELNING = TRUE THEN DO:           
               FIND FIRST fitemp WHERE 
               fitemp.TYP = 0 AND
               fitemp.FAKTNR = FAKTPLAN.FAKTNR AND  
               fitemp.FDELNR = fdelnrvar AND 
               fitemp.AONR = FAKTAONR.AONR AND
               fitemp.DELNR = FAKTAONR.DELNR AND
               fitemp.MOMSID = 0                                                    
               NO-ERROR.
               IF NOT AVAILABLE fitemp THEN CREATE fitemp.
               ASSIGN 
               fitemp.TYP = 0 
               fitemp.FAKTNR = FAKTPLAN.FAKTNR   
               fitemp.FDELNR = fdelnrvar  
               fitemp.AONR = FAKTAONR.AONR
               fitemp.DELNR = FAKTAONR.DELNR                         
               fitemp.OMRADE = FAKTAONR.OMRADE
               fitemp.INTAKTID = FAKTREGLER.INTAKTID 
               fitemp.MOTPARTID = FAKTREGLER.MOTPARTID            
               fitemp.BELOPP = fitemp.BELOPP + delfakt * FAKTAONR.OPRIS.            
               FIND FIRST fktemp WHERE
               fktemp.TYP = 0 AND
               fktemp.FAKTNR = FAKTPLAN.FAKTNR AND  
               fktemp.FDELNR = fdelnrvar AND 
               fktemp.AONR = FAKTAONR.AONR AND
               fktemp.DELNR = FAKTAONR.DELNR NO-ERROR.
               IF NOT AVAILABLE fktemp THEN CREATE fktemp.
               ASSIGN 
               fktemp.TYP = 0 
               fktemp.FAKTNR = FAKTPLAN.FAKTNR   
               fktemp.FDELNR = fdelnrvar  
               fktemp.AONR = FAKTAONR.AONR
               fktemp.DELNR = FAKTAONR.DELNR                         
               fktemp.KUNDKONTOID = FAKTREGLER.KUNDKONTOID 
               fktemp.MOTPARTID = FAKTREGLER.MOTPARTID            
               fktemp.FDATUM = TODAY + FAKTREGLER.FDAGAR
               fktemp.FAKTDATUM = TODAY         
               fktemp.BELOPP = fktemp.BELOPP + delfakt * FAKTAONR.OPRIS.         
               RUN styrintakt_UI (INPUT TRUE,INPUT TRUE,INPUT TRUE).
            END.
            GET NEXT faktaonrq NO-LOCK.
         END.
      END.      
      ELSE DO TRANSACTION:
         FIND FIRST fktemp WHERE 
         fktemp.TYP = 0 AND
         fktemp.FAKTNR = FAKTPLAN.FAKTNR AND  
         fktemp.FDELNR = fdelnrvar AND 
         fktemp.AONR = FAKTAONR.AONR AND
         fktemp.DELNR = FAKTAONR.DELNR  NO-ERROR.
         IF NOT AVAILABLE fktemp THEN CREATE fktemp.
         ASSIGN 
         fktemp.TYP = 0 
         fktemp.FAKTNR = FAKTPLAN.FAKTNR   
         fktemp.FDELNR = fdelnrvar  
         fktemp.AONR = FAKTAONR.AONR
         fktemp.DELNR = FAKTAONR.DELNR                         
         fktemp.KUNDKONTOID = FAKTREGLER.KUNDKONTOID 
         fktemp.MOTPARTID = FAKTREGLER.MOTPARTID            
         fktemp.FDATUM = TODAY + FAKTREGLER.FDAGAR
         fktemp.FAKTDATUM = TODAY
         fktemp.BELOPP = fktemp.BELOPP + nyfakttotal.         
         RUN styrintakt_UI (INPUT TRUE,INPUT TRUE,INPUT TRUE).
      END.
   END.
   ELSE DO:
      OPEN QUERY BRW_PLAN FOR EACH FAKTSTART WHERE 
      FAKTSTART.FAKTNR = FAKTPLAN.FAKTNR NO-LOCK.
      GET FIRST BRW_PLAN NO-LOCK.      
      DO WHILE AVAILABLE(FAKTSTART):
         IF FAKTSTART.FAKTURERAD = TRUE AND FAKTSTART.VFAKTNR = FAKTURERAD.VFAKTNR THEN DO:
            IF FAKTSTART.START NE "" THEN DO:
               OPEN QUERY faktavtq FOR EACH FAKTAVTALAONR WHERE 
               FAKTAVTALAONR.FAKTNR = FAKTPLAN.FAKTNR AND 
               FAKTAVTALAONR.START = FAKTSTART.START 
               NO-LOCK.
            END.
            ELSE DO:
               OPEN QUERY faktavtq FOR EACH FAKTAVTALAONR WHERE 
               FAKTAVTALAONR.FAKTNR = FAKTPLAN.FAKTNR AND 
               FAKTAVTALAONR.PLANDATUM = FAKTSTART.PLANDATUM 
               NO-LOCK.
            END.
            GET FIRST faktavtq NO-LOCK.
            DO WHILE AVAILABLE(FAKTAVTALAONR) TRANSACTION: 
               FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
               FAKTAONR.AONR = FAKTAVTALAONR.AONR AND FAKTAONR.DELNR = FAKTAVTALAONR.DELNR
               NO-LOCK NO-ERROR.     
               FIND FIRST fitemp WHERE 
               fitemp.TYP = 0 AND
               fitemp.FAKTNR = FAKTPLAN.FAKTNR AND  
               fitemp.FDELNR = fdelnrvar AND 
               fitemp.AONR = FAKTAONR.AONR AND
               fitemp.DELNR = FAKTAONR.DELNR AND
               fitemp.MOMSID = 0                                       
               EXCLUSIVE-LOCK NO-ERROR.
               IF NOT AVAILABLE fitemp THEN CREATE fitemp.
               ASSIGN 
               fitemp.TYP = 0 
               fitemp.FAKTNR = FAKTPLAN.FAKTNR   
               fitemp.FDELNR = fdelnrvar  
               fitemp.AONR = FAKTAONR.AONR
               fitemp.DELNR = FAKTAONR.DELNR                         
               fitemp.OMRADE = FAKTAONR.OMRADE
               fitemp.INTAKTID = FAKTREGLER.INTAKTID 
               fitemp.MOTPARTID = FAKTREGLER.MOTPARTID            
               fitemp.BELOPP = fitemp.BELOPP + FAKTAVTALAONR.BELOPP.
               FIND FIRST fktemp WHERE 
               fktemp.TYP = 0 AND
               fktemp.FAKTNR = FAKTPLAN.FAKTNR AND  
               fktemp.FDELNR = fdelnrvar AND 
               fktemp.AONR = FAKTAONR.AONR AND
               fktemp.DELNR = FAKTAONR.DELNR  NO-ERROR.
               IF NOT AVAILABLE fktemp THEN CREATE fktemp.
               ASSIGN 
               fktemp.TYP = 0 
               fktemp.FAKTNR = FAKTPLAN.FAKTNR   
               fktemp.FDELNR = fdelnrvar  
               fktemp.AONR = FAKTAONR.AONR
               fktemp.DELNR = FAKTAONR.DELNR                         
               fktemp.KUNDKONTOID = FAKTREGLER.KUNDKONTOID 
               fktemp.MOTPARTID = FAKTREGLER.MOTPARTID            
               fktemp.FDATUM = TODAY + FAKTREGLER.FDAGAR
               fktemp.FAKTDATUM = TODAY         
               fktemp.BELOPP = fktemp.BELOPP + FAKTAVTALAONR.BELOPP.         
               RUN styrintakt_UI (INPUT TRUE,INPUT TRUE,INPUT TRUE).
               GET NEXT faktavtq NO-LOCK.
            END.
         END.
         GET NEXT BRW_PLAN NO-LOCK.
      END.      
   END.  
END PROCEDURE.
PROCEDURE inaktfastk_UI :  
   GET FIRST faktaonrq NO-LOCK.
   DO WHILE AVAILABLE(FAKTAONR):
      faoff = faoff + FAKTAONR.OPRIS.
      GET NEXT faktaonrq NO-LOCK.  
   END.
   FOR EACH FAKTSTARTKRED WHERE FAKTSTARTKRED.FAKTNR = FAKTPLAN.FAKTNR AND                     
   FAKTSTARTKRED.FDELNR = fdelnrvar AND                     
   FAKTSTARTKRED.VKREDIT = FAKTKRED.VKREDIT AND FAKTSTARTKRED.FAKTURERAD = TRUE NO-LOCK BREAK 
   BY FAKTSTARTKRED.FAKTURERAD:              
      ACCUMULATE FAKTSTARTKRED.BELOPP (TOTAL BY FAKTSTARTKRED.FAKTURERAD).            
      IF LAST-OF(FAKTSTARTKRED.FAKTURERAD) THEN DO:
         nyfakttotal = nyfakttotal + (ACCUM TOTAL BY FAKTSTARTKRED.FAKTURERAD FAKTSTARTKRED.BELOPP).
      END.   
   END.   
  
   IF FAKTPLAN.OFFERTPRIS > 0 THEN DO:
      delfakt = nyfakttotal / FAKTPLAN.OFFERTPRIS.       
   END.     
   GET FIRST faktaonrq NO-LOCK.   
   
   IF vartyp = 1 OR vartyp = 3 THEN DO: 
      
      GET FIRST faktaonrq NO-LOCK.      
      IF faoff = FAKTPLAN.OFFERTPRIS THEN DO:
         DO WHILE AVAILABLE(FAKTAONR) TRANSACTION:      
            FIND FIRST fitemp WHERE 
            fitemp.TYP = 0 AND
            fitemp.FAKTNR = FAKTPLAN.FAKTNR AND  
            fitemp.FDELNR = fdelnrvar AND 
            fitemp.AONR = FAKTAONR.AONR AND
            fitemp.DELNR = FAKTAONR.DELNR AND
            fitemp.MOMSID = 0                                                    
            NO-ERROR.
            IF NOT AVAILABLE fitemp THEN CREATE fitemp.
            ASSIGN 
            fitemp.TYP = 0 
            fitemp.FAKTNR = FAKTPLAN.FAKTNR   
            fitemp.FDELNR = fdelnrvar  
            fitemp.AONR = FAKTAONR.AONR
            fitemp.DELNR = FAKTAONR.DELNR                         
            fitemp.OMRADE = FAKTAONR.OMRADE
            fitemp.INTAKTID = FAKTREGLER.INTAKTID 
            fitemp.MOTPARTID = FAKTREGLER.MOTPARTID            
            fitemp.BELOPP = fitemp.BELOPP + delfakt * FAKTAONR.OPRIS.            
            FIND FIRST fktemp WHERE
            fktemp.TYP = 0 AND
            fktemp.FAKTNR = FAKTPLAN.FAKTNR AND  
            fktemp.FDELNR = fdelnrvar AND 
            fktemp.AONR = FAKTAONR.AONR AND
            fktemp.DELNR = FAKTAONR.DELNR NO-ERROR.
            IF NOT AVAILABLE fktemp THEN CREATE fktemp.
            ASSIGN 
            fktemp.TYP = 0 
            fktemp.FAKTNR = FAKTPLAN.FAKTNR   
            fktemp.FDELNR = fdelnrvar  
            fktemp.AONR = FAKTAONR.AONR
            fktemp.DELNR = FAKTAONR.DELNR                         
            fktemp.KUNDKONTOID = FAKTREGLER.KUNDKONTOID 
            fktemp.MOTPARTID = FAKTREGLER.MOTPARTID            
            fktemp.FDATUM = TODAY + FAKTREGLER.FDAGAR
            fktemp.FAKTDATUM = TODAY         
            fktemp.BELOPP = fktemp.BELOPP + delfakt * FAKTAONR.OPRIS.         
            RUN styrintakt_UI (INPUT TRUE,INPUT TRUE,INPUT TRUE).
            GET NEXT faktaonrq NO-LOCK.
         END.
      END.      
      ELSE DO TRANSACTION:
         FIND FIRST fktemp WHERE 
         fktemp.TYP = 0 AND
         fktemp.FAKTNR = FAKTPLAN.FAKTNR AND  
         fktemp.FDELNR = fdelnrvar AND 
         fktemp.AONR = FAKTAONR.AONR AND
         fktemp.DELNR = FAKTAONR.DELNR  NO-ERROR.
         IF NOT AVAILABLE fktemp THEN CREATE fktemp.
         ASSIGN 
         fktemp.TYP = 0 
         fktemp.FAKTNR = FAKTPLAN.FAKTNR   
         fktemp.FDELNR = fdelnrvar  
         fktemp.AONR = FAKTAONR.AONR
         fktemp.DELNR = FAKTAONR.DELNR                         
         fktemp.KUNDKONTOID = FAKTREGLER.KUNDKONTOID 
         fktemp.MOTPARTID = FAKTREGLER.MOTPARTID            
         fktemp.FDATUM = TODAY + FAKTREGLER.FDAGAR
         fktemp.FAKTDATUM = TODAY
         fktemp.BELOPP = fktemp.BELOPP + nyfakttotal.         
         RUN styrintakt_UI (INPUT TRUE,INPUT TRUE,INPUT TRUE).
      END.
   END.
   
   ELSE DO:
      OPEN QUERY BRW_PLAN FOR EACH FAKTSTARTKRED WHERE 
      FAKTSTARTKRED.FAKTNR = FAKTPLAN.FAKTNR NO-LOCK.
      GET FIRST BRW_PLAN NO-LOCK.      
      DO WHILE AVAILABLE(FAKTSTART):
         IF FAKTSTARTKRED.FAKTURERAD = TRUE AND FAKTSTARTKRED.VKREDIT = FAKTKRED.VKREDIT THEN DO:
            IF FAKTSTARTKRED.START NE "" THEN DO:
               OPEN QUERY faktavtq FOR EACH FAKTAVTALAONR WHERE 
               FAKTAVTALAONR.FAKTNR = FAKTPLAN.FAKTNR AND 
               FAKTAVTALAONR.START = FAKTSTARTKRED.START 
               NO-LOCK.
            END.
            ELSE DO:
               OPEN QUERY faktavtq FOR EACH FAKTAVTALAONR WHERE 
               FAKTAVTALAONR.FAKTNR = FAKTPLAN.FAKTNR AND 
               FAKTAVTALAONR.PLANDATUM = FAKTSTARTKRED.PLANDATUM 
               NO-LOCK.
            END.
            GET FIRST faktavtq NO-LOCK.
            DO WHILE AVAILABLE(FAKTAVTALAONR) TRANSACTION: 
               FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
               FAKTAONR.AONR = FAKTAVTALAONR.AONR AND FAKTAONR.DELNR = FAKTAVTALAONR.DELNR
               NO-LOCK NO-ERROR.     
               FIND FIRST fitemp WHERE 
               fitemp.TYP = 0 AND
               fitemp.FAKTNR = FAKTPLAN.FAKTNR AND  
               fitemp.FDELNR = fdelnrvar AND 
               fitemp.AONR = FAKTAONR.AONR AND
               fitemp.DELNR = FAKTAONR.DELNR AND
               fitemp.MOMSID = 0                                       
               EXCLUSIVE-LOCK NO-ERROR.
               IF NOT AVAILABLE fitemp THEN CREATE fitemp.
               ASSIGN 
               fitemp.TYP = 0 
               fitemp.FAKTNR = FAKTPLAN.FAKTNR   
               fitemp.FDELNR = fdelnrvar  
               fitemp.AONR = FAKTAONR.AONR
               fitemp.DELNR = FAKTAONR.DELNR                         
               fitemp.OMRADE = FAKTAONR.OMRADE
               fitemp.INTAKTID = FAKTREGLER.INTAKTID 
               fitemp.MOTPARTID = FAKTREGLER.MOTPARTID            
               fitemp.BELOPP = fitemp.BELOPP + FAKTAVTALAONR.BELOPP.
               FIND FIRST fktemp WHERE 
               fktemp.TYP = 0 AND
               fktemp.FAKTNR = FAKTPLAN.FAKTNR AND  
               fktemp.FDELNR = fdelnrvar AND 
               fktemp.AONR = FAKTAONR.AONR AND
               fktemp.DELNR = FAKTAONR.DELNR  NO-ERROR.
               IF NOT AVAILABLE fktemp THEN CREATE fktemp.
               ASSIGN 
               fktemp.TYP = 0 
               fktemp.FAKTNR = FAKTPLAN.FAKTNR   
               fktemp.FDELNR = fdelnrvar  
               fktemp.AONR = FAKTAONR.AONR
               fktemp.DELNR = FAKTAONR.DELNR                         
               fktemp.KUNDKONTOID = FAKTREGLER.KUNDKONTOID 
               fktemp.MOTPARTID = FAKTREGLER.MOTPARTID            
               fktemp.FDATUM = TODAY + FAKTREGLER.FDAGAR
               fktemp.FAKTDATUM = TODAY         
               fktemp.BELOPP = fktemp.BELOPP + FAKTAVTALAONR.BELOPP.         
               RUN styrintakt_UI (INPUT TRUE,INPUT TRUE,INPUT TRUE).
               GET NEXT faktavtq NO-LOCK.
            END.
         END.
         GET NEXT BRW_PLAN NO-LOCK.
      END.      
   END.  
   
END PROCEDURE.
PROCEDURE inaktupp_UI :  
   FOR EACH FAKTUPPARB WHERE FAKTUPPARB.FAKTNR = FAKTPLAN.FAKTNR AND                     
   FAKTUPPARB.FDELNR = fdelnrvar AND FAKTUPPARB.FAKTURERAD = TRUE NO-LOCK BREAK 
   BY FAKTUPPARB.FAKTURERAD:              
      ACCUMULATE FAKTUPPARB.FAKTBELOPP (TOTAL BY FAKTUPPARB.FAKTURERAD).            
      IF LAST-OF(FAKTUPPARB.FAKTURERAD) THEN DO:
         nyfakttotal = nyfakttotal + (ACCUM TOTAL BY FAKTUPPARB.FAKTURERAD FAKTUPPARB.FAKTBELOPP).
      END.   
   END.   
   IF FAKTPLAN.OFFERTPRIS > 0 THEN DO:
      delfakt = nyfakttotal / FAKTPLAN.OFFERTPRIS.      
   END.
   OPEN QUERY BRW_UPP FOR EACH FAKTUPPARB WHERE 
   FAKTUPPARB.FAKTNR = FAKTPLAN.FAKTNR AND FAKTUPPARB.FAKTURERAD = TRUE AND                     
   FAKTUPPARB.VFAKTNR = FAKTURERAD.VFAKTNR
   NO-LOCK BY FAKTUPPARB.UPLAN%.
   GET FIRST BRW_UPP NO-LOCK.
   DO WHILE AVAILABLE(FAKTUPPARB):  
      FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
      FAKTAONR.AONR = FAKTUPPARB.AONR AND FAKTAONR.DELNR = FAKTUPPARB.DELNR
      NO-LOCK NO-ERROR.     
      FIND FIRST fktemp WHERE 
      fktemp.TYP = 0 AND
      fktemp.FAKTNR = FAKTPLAN.FAKTNR AND  
      fktemp.FDELNR = fdelnrvar AND 
      fktemp.AONR = FAKTUPPARB.AONR AND
      fktemp.DELNR = FAKTUPPARB.DELNR  NO-ERROR.
      IF NOT AVAILABLE fktemp THEN CREATE fktemp.
      ASSIGN 
      fktemp.FAKTNR = FAKTPLAN.FAKTNR   
      fktemp.FDELNR = fdelnrvar  
      fktemp.AONR = FAKTUPPARB.AONR
      fktemp.DELNR = FAKTUPPARB.DELNR                         
      fktemp.KUNDKONTOID = FAKTREGLER.KUNDKONTOID 
      fktemp.MOTPARTID = FAKTREGLER.MOTPARTID            
      fktemp.FDATUM = TODAY + FAKTREGLER.FDAGAR
      fktemp.FAKTDATUM = TODAY         
      fktemp.BELOPP = fktemp.BELOPP + FAKTUPPARB.FAKTBELOPP.         
      RUN styrintakt_UI (INPUT TRUE,INPUT TRUE,INPUT TRUE).     
      GET NEXT BRW_UPP NO-LOCK.
   END.   
END PROCEDURE.

PROCEDURE inaktuppk_UI :  
   FOR EACH FAKTUPPARBKRED WHERE FAKTUPPARBKRED.FAKTNR = FAKTPLAN.FAKTNR AND                     
   FAKTUPPARBKRED.FDELNR = fdelnrvar AND FAKTUPPARBKRED.FAKTURERAD = TRUE NO-LOCK BREAK 
   BY FAKTUPPARBKRED.FAKTURERAD:              
      ACCUMULATE FAKTUPPARBKRED.FAKTBELOPP (TOTAL BY FAKTUPPARBKRED.FAKTURERAD).            
      IF LAST-OF(FAKTUPPARBKRED.FAKTURERAD) THEN DO:
         nyfakttotal = nyfakttotal + (ACCUM TOTAL BY FAKTUPPARBKRED.FAKTURERAD FAKTUPPARBKRED.FAKTBELOPP).
      END.   
   END.   
   IF FAKTPLAN.OFFERTPRIS > 0 THEN DO:
      delfakt = nyfakttotal / FAKTPLAN.OFFERTPRIS.      
   END.
   OPEN QUERY BRW_UPP FOR EACH FAKTUPPARBKRED WHERE 
   FAKTUPPARBKRED.FAKTNR = FAKTPLAN.FAKTNR AND FAKTUPPARBKRED.FAKTURERAD = TRUE AND                     
   FAKTUPPARBKRED.VFAKTNR = FAKTKRED.VFAKTNR
   NO-LOCK BY FAKTUPPARBKRED.UPLAN%.
   GET FIRST BRW_UPP NO-LOCK.
   DO WHILE AVAILABLE(FAKTUPPARBKRED):  
      FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
      FAKTAONR.AONR = FAKTUPPARBKRED.AONR AND FAKTAONR.DELNR = FAKTUPPARBKRED.DELNR
      NO-LOCK NO-ERROR.     
      FIND FIRST fktemp WHERE 
      fktemp.TYP = 0 AND
      fktemp.FAKTNR = FAKTPLAN.FAKTNR AND  
      fktemp.FDELNR = fdelnrvar AND 
      fktemp.AONR = FAKTUPPARBKRED.AONR AND
      fktemp.DELNR = FAKTUPPARBKRED.DELNR  NO-ERROR.
      IF NOT AVAILABLE fktemp THEN CREATE fktemp.
      ASSIGN 
      fktemp.FAKTNR = FAKTPLAN.FAKTNR   
      fktemp.FDELNR = fdelnrvar  
      fktemp.AONR = FAKTUPPARBKRED.AONR
      fktemp.DELNR = FAKTUPPARBKRED.DELNR                         
      fktemp.KUNDKONTOID = FAKTREGLER.KUNDKONTOID 
      fktemp.MOTPARTID = FAKTREGLER.MOTPARTID            
      fktemp.FDATUM = TODAY + FAKTREGLER.FDAGAR
      fktemp.FAKTDATUM = TODAY         
      fktemp.BELOPP = fktemp.BELOPP + FAKTUPPARBKRED.FAKTBELOPP.         
      RUN styrintakt_UI (INPUT TRUE,INPUT TRUE,INPUT TRUE).     
      GET NEXT BRW_UPP NO-LOCK.
   END.   
END PROCEDURE.


PROCEDURE inaktfria_UI :
   EMPTY TEMP-TABLE efaktfriatemp NO-ERROR. 
   EMPTY TEMP-TABLE faktfriatemp NO-ERROR. 
   FOR EACH FAKTFRIA WHERE FAKTFRIA.FAKTNR = FAKTPLAN.FAKTNR AND
   FAKTFRIA.FDELNR = fdelnrvar AND FAKTFRIA.FAKTURERAD = TRUE NO-LOCK:      
      IF FAKTFRIA.TYP BEGINS "FAKT" THEN DO:
         CREATE efaktfriatemp.
         BUFFER-COPY FAKTFRIA TO efaktfriatemp.
         efaktfriatemp.TYP = SUBSTRING(efaktfriatemp.TYP,5).
      END.
      ELSE DO:
         CREATE faktfriatemp.                     
         BUFFER-COPY FAKTFRIA TO faktfriatemp.
      END.            
   END.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.
   ASSIGN
   inextradatatemp.PROGRAM = "FRIPRIS"                   
   inextradatatemp.HUVUDCH = ?              
   inextradatatemp.HUVUDINT = ?.      

   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp,OUTPUT TABLE extradatatemp).
   FOR EACH efaktfriatemp:
      FIND FIRST extradatatemp WHERE extradatatemp.HUVUDINT = INTEGER(efaktfriatemp.TYP)
      NO-LOCK NO-ERROR.
      IF NOT AVAILABLE extradatatemp THEN DO:
         CREATE faktfriatemp.                     
         BUFFER-COPY efaktfriatemp TO faktfriatemp.
         DELETE efaktfriatemp.
         NEXT.
      END.
      FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
      FAKTAONR.AONR = efaktfriatemp.AONR AND
      FAKTAONR.DELNR = efaktfriatemp.DELNR NO-LOCK NO-ERROR.                  
      IF NOT AVAILABLE FAKTAONR THEN DO:
         FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
         FAKTAONR.AONR = efaktfriatemp.AONR NO-LOCK NO-ERROR.
      END.
      FIND FIRST fitemp WHERE fitemp.TYP = extradatatemp.HUVUDINT AND
      fitemp.AONR = FAKTAONR.AONR  AND fitemp.DELNR = FAKTAONR.DELNR 
      NO-ERROR.
      IF NOT AVAILABLE fitemp THEN DO:
         CREATE fitemp.
         ASSIGN
         fitemp.TYP = extradatatemp.HUVUDINT
         fitemp.INTAKTID = extradatatemp.SOKINT[2]  
         fitemp.MOTPARTID = extradatatemp.SOKINT[3] 
         fitemp.K1 = extradatatemp.SOKCHAR[1]
         fitemp.K2 = extradatatemp.SOKCHAR[2]
         fitemp.K3 = extradatatemp.SOKCHAR[3]
         fitemp.K4 = extradatatemp.SOKCHAR[4]
         fitemp.K5 = extradatatemp.SOKCHAR[5].
      END.
      ASSIGN 
      fitemp.FAKTNR = FAKTPLAN.FAKTNR   
      fitemp.FDELNR = fdelnrvar  
      fitemp.AONR = FAKTAONR.AONR
      fitemp.DELNR = FAKTAONR.DELNR 
      fitemp.OMRADE = FAKTAONR.OMRADE                        
      fitemp.MOMSID = efaktfriatemp.MOMSID
      fitemp.BELOPP = fitemp.BELOPP + efaktfriatemp.TOTALT.                        
      IF extradatatemp.SOKINT[2] = 0 THEN  fitemp.INTAKTID = FAKTREGLER.INTAKTID. 
      ELSE DO:
         fitemp.INTAKTID = extradatatemp.SOKINT[2]. 
      END.
      IF extradatatemp.SOKINT[3] = 0 THEN fitemp.MOTPARTID = FAKTREGLER.MOTPARTID.
      ELSE fitemp.MOTPARTID = extradatatemp.SOKINT[3].
      nyfakttotal = nyfakttotal + efaktfriatemp.TOTALT.
      FIND FIRST fktemp WHERE fktemp.TYP = extradatatemp.HUVUDINT AND
      fktemp.AONR = FAKTAONR.AONR  AND fktemp.DELNR = FAKTAONR.DELNR 
      NO-ERROR.
      IF NOT AVAILABLE fktemp THEN DO:
         CREATE fktemp.
         ASSIGN
         fktemp.TYP = extradatatemp.HUVUDINT
         fktemp.KUNDKONTOID = extradatatemp.SOKINT[1]  
         fktemp.MOTPARTID = extradatatemp.SOKINT[3] 
         fktemp.K1 = extradatatemp.SOKCHAR[1]
         fktemp.K2 = extradatatemp.SOKCHAR[2]
         fktemp.K3 = extradatatemp.SOKCHAR[3]
         fktemp.K4 = extradatatemp.SOKCHAR[4]
         fktemp.K5 = extradatatemp.SOKCHAR[5].
      END.
      ASSIGN
      fktemp.FAKTNR = FAKTPLAN.FAKTNR   
      fktemp.FDELNR = fdelnrvar  
      fktemp.AONR = FAKTAONR.AONR
      fktemp.DELNR = FAKTAONR.DELNR                                        
      fktemp.FDATUM = TODAY + FAKTREGLER.FDAGAR
      fktemp.FAKTDATUM = TODAY           
      fktemp.BELOPP = fktemp.BELOPP + efaktfriatemp.TOTALT.                                   

      ASSIGN
      intaktvarhj = TRUE
      kundvarhj   = TRUE
      motpartvarhj = TRUE.
      IF fitemp.INTAKTID NE 0 THEN intaktvarhj = FALSE.
      IF extradatatemp.SOKINT[1] = 0 THEN fktemp.KUNDKONTOID = FAKTREGLER.KUNDKONTOID. 
      ELSE DO:
         ASSIGN
         kundvarhj   = FALSE
         fktemp.KUNDKONTOID = extradatatemp.SOKINT[1]. 
      END.
      IF extradatatemp.SOKINT[3] = 0 THEN fktemp.MOTPARTID = FAKTREGLER.MOTPARTID.
      ELSE DO:
         ASSIGN
         motpartvarhj   = FALSE
         fktemp.MOTPARTID = extradatatemp.SOKINT[3].
      END.           
      RUN styrintakt_UI (INPUT intaktvarhj,INPUT kundvarhj,INPUT motpartvarhj).
   END.
   FOR EACH faktfriatemp WHERE faktfriatemp.FAKTNR = FAKTPLAN.FAKTNR AND
   faktfriatemp.FDELNR = fdelnrvar AND faktfriatemp.FAKTURERAD = TRUE NO-LOCK BREAK 
   BY faktfriatemp.AONR BY faktfriatemp.DELNR BY faktfriatemp.MOMSID:              
      ACCUMULATE 
      faktfriatemp.TOTALT (TOTAL BY faktfriatemp.AONR BY faktfriatemp.DELNR BY faktfriatemp.MOMSID).            
      IF LAST-OF(faktfriatemp.MOMSID) THEN DO TRANSACTION:
         FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
         FAKTAONR.AONR = faktfriatemp.AONR AND
         FAKTAONR.DELNR = faktfriatemp.DELNR NO-LOCK NO-ERROR.                  
         IF NOT AVAILABLE FAKTAONR THEN DO:
            FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
            FAKTAONR.AONR = faktfriatemp.AONR NO-LOCK NO-ERROR.
         END.
         FIND FIRST fitemp WHERE 
         fitemp.TYP = 0 AND
         fitemp.FAKTNR = FAKTPLAN.FAKTNR AND  
         fitemp.FDELNR = fdelnrvar AND 
         fitemp.AONR = FAKTAONR.AONR AND
         fitemp.DELNR = FAKTAONR.DELNR AND
         fitemp.MOMSID = faktfriatemp.MOMSID                                       
          NO-ERROR.
         IF NOT AVAILABLE fitemp THEN CREATE fitemp.
         ASSIGN 
         fitemp.TYP = 0 
         fitemp.FAKTNR = FAKTPLAN.FAKTNR   
         fitemp.FDELNR = fdelnrvar  
         fitemp.AONR = FAKTAONR.AONR
         fitemp.DELNR = FAKTAONR.DELNR 
         fitemp.OMRADE = FAKTAONR.OMRADE                        
         fitemp.MOMSID = faktfriatemp.MOMSID
         fitemp.INTAKTID = FAKTREGLER.INTAKTID 
         fitemp.MOTPARTID = FAKTREGLER.MOTPARTID            
         fitemp.BELOPP = fitemp.BELOPP +
         (ACCUM TOTAL BY faktfriatemp.MOMSID faktfriatemp.TOTALT).                        
         nyfakttotal = nyfakttotal + (ACCUM TOTAL BY faktfriatemp.MOMSID faktfriatemp.TOTALT).
         FIND FIRST fktemp WHERE 
         fktemp.TYP = 0 AND
         fktemp.FAKTNR = FAKTPLAN.FAKTNR AND  
         fktemp.FDELNR = fdelnrvar AND 
         fktemp.AONR = FAKTAONR.AONR AND
         fktemp.DELNR = FAKTAONR.DELNR  NO-ERROR.
         IF NOT AVAILABLE fktemp THEN CREATE fktemp.
         ASSIGN
         fktemp.TYP = 0 
         fktemp.FAKTNR = FAKTPLAN.FAKTNR   
         fktemp.FDELNR = fdelnrvar  
         fktemp.AONR = FAKTAONR.AONR
         fktemp.DELNR = FAKTAONR.DELNR                         
         fktemp.KUNDKONTOID = FAKTREGLER.KUNDKONTOID 
         fktemp.MOTPARTID = FAKTREGLER.MOTPARTID            
         fktemp.FDATUM = TODAY + FAKTREGLER.FDAGAR
         fktemp.FAKTDATUM = TODAY           
         fktemp.BELOPP = fktemp.BELOPP + 
         (ACCUM TOTAL BY faktfriatemp.MOMSID faktfriatemp.TOTALT).                                   
         RUN styrintakt_UI (INPUT TRUE,INPUT TRUE,INPUT TRUE).
      END.
   END.
     
END PROCEDURE.

PROCEDURE inaktfriak_UI :
   EMPTY TEMP-TABLE efaktfriatemp NO-ERROR. 
   EMPTY TEMP-TABLE faktfriatemp NO-ERROR. 
   FOR EACH FAKTFRIAKRED WHERE FAKTFRIAKRED.FAKTNR = FAKTPLAN.FAKTNR AND
   FAKTFRIAKRED.FDELNR = fdelnrvar AND FAKTFRIAKRED.FAKTURERAD = TRUE NO-LOCK:      
      IF FAKTFRIAKRED.TYP BEGINS "FAKT" THEN DO:
         CREATE efaktfriatemp.
         BUFFER-COPY FAKTFRIAKRED TO efaktfriatemp.
         efaktfriatemp.TYP = SUBSTRING(efaktfriatemp.TYP,5).
      END.
      ELSE DO:
         CREATE faktfriatemp.                     
         BUFFER-COPY FAKTFRIAKRED TO faktfriatemp.
      END.            
   END.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.
   ASSIGN
   inextradatatemp.PROGRAM = "FRIPRIS"                   
   inextradatatemp.HUVUDCH = ?              
   inextradatatemp.HUVUDINT = ?.      

   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp,OUTPUT TABLE extradatatemp).
   FOR EACH efaktfriatemp:
      FIND FIRST extradatatemp WHERE extradatatemp.HUVUDINT = INTEGER(efaktfriatemp.TYP)
      NO-LOCK NO-ERROR.
      IF NOT AVAILABLE extradatatemp THEN DO:
         CREATE faktfriatemp.                     
         BUFFER-COPY efaktfriatemp TO faktfriatemp.
         DELETE efaktfriatemp.
         NEXT.
      END.
      FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
      FAKTAONR.AONR = efaktfriatemp.AONR AND
      FAKTAONR.DELNR = efaktfriatemp.DELNR NO-LOCK NO-ERROR.                  
      IF NOT AVAILABLE FAKTAONR THEN DO:
         FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
         FAKTAONR.AONR = efaktfriatemp.AONR NO-LOCK NO-ERROR.
      END.
      FIND FIRST fitemp WHERE fitemp.TYP = extradatatemp.HUVUDINT AND
      fitemp.AONR = FAKTAONR.AONR  AND fitemp.DELNR = FAKTAONR.DELNR 
      NO-ERROR.
      IF NOT AVAILABLE fitemp THEN DO:
         CREATE fitemp.
         ASSIGN
         fitemp.TYP = extradatatemp.HUVUDINT
         fitemp.INTAKTID = extradatatemp.SOKINT[2]  
         fitemp.MOTPARTID = extradatatemp.SOKINT[3] 
         fitemp.K1 = extradatatemp.SOKCHAR[1]
         fitemp.K2 = extradatatemp.SOKCHAR[2]
         fitemp.K3 = extradatatemp.SOKCHAR[3]
         fitemp.K4 = extradatatemp.SOKCHAR[4]
         fitemp.K5 = extradatatemp.SOKCHAR[5].
      END.
      ASSIGN 
      fitemp.FAKTNR = FAKTPLAN.FAKTNR   
      fitemp.FDELNR = fdelnrvar  
      fitemp.AONR = FAKTAONR.AONR
      fitemp.DELNR = FAKTAONR.DELNR 
      fitemp.OMRADE = FAKTAONR.OMRADE                        
      fitemp.MOMSID = efaktfriatemp.MOMSID
      fitemp.BELOPP = fitemp.BELOPP + efaktfriatemp.TOTALT.                        
      IF extradatatemp.SOKINT[2] = 0 THEN  fitemp.INTAKTID = FAKTREGLER.INTAKTID. 
      ELSE DO:
         fitemp.INTAKTID = extradatatemp.SOKINT[2]. 
      END.
      IF extradatatemp.SOKINT[3] = 0 THEN fitemp.MOTPARTID = FAKTREGLER.MOTPARTID.
      ELSE fitemp.MOTPARTID = extradatatemp.SOKINT[3].
      nyfakttotal = nyfakttotal + efaktfriatemp.TOTALT.
      FIND FIRST fktemp WHERE fktemp.TYP = extradatatemp.HUVUDINT AND
      fktemp.AONR = FAKTAONR.AONR  AND fktemp.DELNR = FAKTAONR.DELNR 
      NO-ERROR.
      IF NOT AVAILABLE fktemp THEN DO:
         CREATE fktemp.
         ASSIGN
         fktemp.TYP = extradatatemp.HUVUDINT
         fktemp.KUNDKONTOID = extradatatemp.SOKINT[1]  
         fktemp.MOTPARTID = extradatatemp.SOKINT[3] 
         fktemp.K1 = extradatatemp.SOKCHAR[1]
         fktemp.K2 = extradatatemp.SOKCHAR[2]
         fktemp.K3 = extradatatemp.SOKCHAR[3]
         fktemp.K4 = extradatatemp.SOKCHAR[4]
         fktemp.K5 = extradatatemp.SOKCHAR[5].
      END.
      ASSIGN
      fktemp.FAKTNR = FAKTPLAN.FAKTNR   
      fktemp.FDELNR = fdelnrvar  
      fktemp.AONR = FAKTAONR.AONR
      fktemp.DELNR = FAKTAONR.DELNR                                        
      fktemp.FDATUM = TODAY + FAKTREGLER.FDAGAR
      fktemp.FAKTDATUM = TODAY           
      fktemp.BELOPP = fktemp.BELOPP + efaktfriatemp.TOTALT.                                   

      ASSIGN
      intaktvarhj = TRUE
      kundvarhj   = TRUE
      motpartvarhj = TRUE.
      IF fitemp.INTAKTID NE 0 THEN intaktvarhj = FALSE.
      IF extradatatemp.SOKINT[1] = 0 THEN fktemp.KUNDKONTOID = FAKTREGLER.KUNDKONTOID. 
      ELSE DO:
         ASSIGN
         kundvarhj   = FALSE
         fktemp.KUNDKONTOID = extradatatemp.SOKINT[1]. 
      END.
      IF extradatatemp.SOKINT[3] = 0 THEN fktemp.MOTPARTID = FAKTREGLER.MOTPARTID.
      ELSE DO:
         ASSIGN
         motpartvarhj   = FALSE
         fktemp.MOTPARTID = extradatatemp.SOKINT[3].
      END.           
      RUN styrintakt_UI (INPUT intaktvarhj,INPUT kundvarhj,INPUT motpartvarhj).
   END.
   FOR EACH faktfriatemp WHERE faktfriatemp.FAKTNR = FAKTPLAN.FAKTNR AND
   faktfriatemp.FDELNR = fdelnrvar AND faktfriatemp.FAKTURERAD = TRUE NO-LOCK BREAK 
   BY faktfriatemp.AONR BY faktfriatemp.DELNR BY faktfriatemp.MOMSID:              
      ACCUMULATE 
      faktfriatemp.TOTALT (TOTAL BY faktfriatemp.AONR BY faktfriatemp.DELNR BY faktfriatemp.MOMSID).            
      IF LAST-OF(faktfriatemp.MOMSID) THEN DO TRANSACTION:
         FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
         FAKTAONR.AONR = faktfriatemp.AONR AND
         FAKTAONR.DELNR = faktfriatemp.DELNR NO-LOCK NO-ERROR.                  
         IF NOT AVAILABLE FAKTAONR THEN DO:
            FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
            FAKTAONR.AONR = faktfriatemp.AONR NO-LOCK NO-ERROR.
         END.
         FIND FIRST fitemp WHERE 
         fitemp.TYP = 0 AND
         fitemp.FAKTNR = FAKTPLAN.FAKTNR AND  
         fitemp.FDELNR = fdelnrvar AND 
         fitemp.AONR = FAKTAONR.AONR AND
         fitemp.DELNR = FAKTAONR.DELNR AND
         fitemp.MOMSID = faktfriatemp.MOMSID                                       
          NO-ERROR.
         IF NOT AVAILABLE fitemp THEN CREATE fitemp.
         ASSIGN 
         fitemp.TYP = 0 
         fitemp.FAKTNR = FAKTPLAN.FAKTNR   
         fitemp.FDELNR = fdelnrvar  
         fitemp.AONR = FAKTAONR.AONR
         fitemp.DELNR = FAKTAONR.DELNR 
         fitemp.OMRADE = FAKTAONR.OMRADE                        
         fitemp.MOMSID = faktfriatemp.MOMSID
         fitemp.INTAKTID = FAKTREGLER.INTAKTID 
         fitemp.MOTPARTID = FAKTREGLER.MOTPARTID            
         fitemp.BELOPP = fitemp.BELOPP +
         (ACCUM TOTAL BY faktfriatemp.MOMSID faktfriatemp.TOTALT).                        
         nyfakttotal = nyfakttotal + (ACCUM TOTAL BY faktfriatemp.MOMSID faktfriatemp.TOTALT).
         FIND FIRST fktemp WHERE 
         fktemp.TYP = 0 AND
         fktemp.FAKTNR = FAKTPLAN.FAKTNR AND  
         fktemp.FDELNR = fdelnrvar AND 
         fktemp.AONR = FAKTAONR.AONR AND
         fktemp.DELNR = FAKTAONR.DELNR  NO-ERROR.
         IF NOT AVAILABLE fktemp THEN CREATE fktemp.
         ASSIGN
         fktemp.TYP = 0 
         fktemp.FAKTNR = FAKTPLAN.FAKTNR   
         fktemp.FDELNR = fdelnrvar  
         fktemp.AONR = FAKTAONR.AONR
         fktemp.DELNR = FAKTAONR.DELNR                         
         fktemp.KUNDKONTOID = FAKTREGLER.KUNDKONTOID 
         fktemp.MOTPARTID = FAKTREGLER.MOTPARTID            
         fktemp.FDATUM = TODAY + FAKTREGLER.FDAGAR
         fktemp.FAKTDATUM = TODAY           
         fktemp.BELOPP = fktemp.BELOPP + 
         (ACCUM TOTAL BY faktfriatemp.MOMSID faktfriatemp.TOTALT).                                   
         RUN styrintakt_UI (INPUT TRUE,INPUT TRUE,INPUT TRUE).
      END.
   END.
     
END PROCEDURE.

PROCEDURE inaktkost_UI :    
   FOR EACH kosttemp WHERE kosttemp.MED = TRUE BREAK 
   BY kosttemp.AONR BY kosttemp.DELNR BY kosttemp.MOMSID:         
      ACCUMULATE 
      kosttemp.PERSKOST (TOTAL BY kosttemp.AONR BY kosttemp.DELNR BY kosttemp.MOMSID).
      ACCUMULATE 
      kosttemp.TRAKTKOST (TOTAL BY kosttemp.AONR BY kosttemp.DELNR BY kosttemp.MOMSID).
      ACCUMULATE 
      kosttemp.FRTJPAKR (TOTAL BY kosttemp.AONR BY kosttemp.DELNR BY kosttemp.MOMSID). 
      ACCUMULATE 
      kosttemp.MTRLPAKR (TOTAL BY kosttemp.AONR BY kosttemp.DELNR BY kosttemp.MOMSID).
      ACCUMULATE 
      kosttemp.MASKKOST (TOTAL BY kosttemp.AONR BY kosttemp.DELNR BY kosttemp.MOMSID). 
      ACCUMULATE 
      kosttemp.MTRL (TOTAL BY kosttemp.AONR BY kosttemp.DELNR BY kosttemp.MOMSID).
      ACCUMULATE             
      kosttemp.OVRKR (TOTAL BY kosttemp.AONR BY kosttemp.DELNR BY kosttemp.MOMSID).      
      IF LAST-OF(kosttemp.MOMSID) THEN DO TRANSACTION:
         FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
         FAKTAONR.AONR = kosttemp.AONR AND
         FAKTAONR.DELNR = kosttemp.DELNR NO-LOCK NO-ERROR.
         IF NOT AVAILABLE FAKTAONR THEN DO:
            FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
            FAKTAONR.AONR = kosttemp.AONR NO-LOCK NO-ERROR.
         END.
         FIND FIRST fitemp WHERE 
         fitemp.TYP = 0 AND
         fitemp.FAKTNR = FAKTPLAN.FAKTNR AND  
         fitemp.FDELNR = fdelnrvar AND 
         fitemp.AONR = FAKTAONR.AONR AND
         fitemp.DELNR = FAKTAONR.DELNR AND
         fitemp.MOMSID = kosttemp.MOMSID                                        
          NO-ERROR.
         IF NOT AVAILABLE fitemp THEN CREATE fitemp.
         ASSIGN 
         fitemp.TYP = 0 
         fitemp.FAKTNR = FAKTPLAN.FAKTNR   
         fitemp.FDELNR = fdelnrvar
         fitemp.AONR = FAKTAONR.AONR
         fitemp.DELNR = FAKTAONR.DELNR  
         fitemp.OMRADE = FAKTAONR.OMRADE        
         fitemp.MOMSID = kosttemp.MOMSID               
         fitemp.INTAKTID = FAKTREGLER.INTAKTID 
         fitemp.MOTPARTID = FAKTREGLER.MOTPARTID            
         fitemp.BELOPP = fitemp.BELOPP +
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.PERSKOST) +            
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.TRAKTKOST) +           
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.FRTJPAKR) +            
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.MTRLPAKR) +                          
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.MASKKOST) +
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.MTRL) +
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.OVRKR).
         nyfakttotal = nyfakttotal + (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.PERSKOST) +            
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.TRAKTKOST) +           
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.FRTJPAKR) +            
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.MTRLPAKR) +                          
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.MASKKOST) +
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.MTRL) +
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.OVRKR).
         FIND FIRST fktemp WHERE 
         fktemp.TYP = 0 AND
         fktemp.FAKTNR = FAKTPLAN.FAKTNR AND  
         fktemp.FDELNR = fdelnrvar AND 
         fktemp.AONR = FAKTAONR.AONR AND
         fktemp.DELNR = FAKTAONR.DELNR  NO-ERROR.
         IF NOT AVAILABLE fktemp THEN CREATE fktemp.
         ASSIGN 
         fktemp.TYP = 0 
         fktemp.FAKTNR = FAKTPLAN.FAKTNR   
         fktemp.FDELNR = fdelnrvar
         fktemp.AONR = FAKTAONR.AONR
         fktemp.DELNR = FAKTAONR.DELNR                         
         fktemp.KUNDKONTOID = FAKTREGLER.KUNDKONTOID 
         fktemp.MOTPARTID = FAKTREGLER.MOTPARTID            
         fktemp.FDATUM = TODAY + FAKTREGLER.FDAGAR
         fktemp.FAKTDATUM = TODAY            
         fktemp.BELOPP = fktemp.BELOPP +
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.PERSKOST) +            
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.TRAKTKOST) +           
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.FRTJPAKR) +            
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.MTRLPAKR) +                          
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.MASKKOST) +
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.MTRL) +
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.OVRKR).               
         RUN styrintakt_UI (INPUT TRUE,INPUT TRUE,INPUT TRUE).
      END.
   END.  
END PROCEDURE.

PROCEDURE inakttid_UI :    
   FOR EACH sumtidtemp WHERE sumtidtemp.MED = TRUE BREAK 
   BY sumtidtemp.AONR BY sumtidtemp.DELNR:         
      ACCUMULATE 
      sumtidtemp.BELOPP (TOTAL BY sumtidtemp.AONR BY sumtidtemp.DELNR).
      ACCUMULATE 
      sumtidtemp.OBELOPP (TOTAL BY sumtidtemp.AONR BY sumtidtemp.DELNR).
      ACCUMULATE 
      sumtidtemp.LONKOST (TOTAL BY sumtidtemp.AONR BY sumtidtemp.DELNR). 
      ACCUMULATE 
      sumtidtemp.TBELOPP (TOTAL BY sumtidtemp.AONR BY sumtidtemp.DELNR).
      ACCUMULATE 
      sumtidtemp.RESKOSTDEC (TOTAL BY sumtidtemp.AONR BY sumtidtemp.DELNR).
      IF LAST-OF(sumtidtemp.DELNR) THEN DO TRANSACTION:         
         FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
         FAKTAONR.AONR = sumtidtemp.AONR AND
         FAKTAONR.DELNR = sumtidtemp.DELNR NO-LOCK NO-ERROR.
         IF NOT AVAILABLE FAKTAONR THEN DO:
            FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
            FAKTAONR.AONR = sumtidtemp.AONR NO-LOCK NO-ERROR.
         END.
         FIND FIRST fitemp WHERE 
         fitemp.TYP = 0 AND
         fitemp.FAKTNR = FAKTPLAN.FAKTNR AND  
         fitemp.FDELNR = fdelnrvar AND 
         fitemp.AONR = FAKTAONR.AONR AND
         fitemp.DELNR = FAKTAONR.DELNR AND
         fitemp.MOMSID = 0         
          NO-ERROR.
         IF NOT AVAILABLE fitemp THEN CREATE fitemp.
         ASSIGN 
         fitemp.TYP = 0 
         fitemp.FAKTNR = FAKTPLAN.FAKTNR 
         fitemp.FDELNR = fdelnrvar
         fitemp.AONR = FAKTAONR.AONR
         fitemp.DELNR = FAKTAONR.DELNR                         
         fitemp.OMRADE = FAKTAONR.OMRADE
         fitemp.INTAKTID = FAKTREGLER.INTAKTID 
         fitemp.MOTPARTID = FAKTREGLER.MOTPARTID            
         fitemp.BELOPP = fitemp.BELOPP +
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.BELOPP) +            
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.LONKOST) +           
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.OBELOPP) +            
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.TBELOPP) +                          
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.RESKOSTDEC).
         nyfakttotal = nyfakttotal + (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.BELOPP) +            
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.LONKOST) +           
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.OBELOPP) +            
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.TBELOPP) +                          
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.RESKOSTDEC).
         FIND FIRST fktemp WHERE 
         fktemp.TYP = 0 AND
         fktemp.FAKTNR = FAKTPLAN.FAKTNR AND  
         fktemp.FDELNR = fdelnrvar AND 
         fktemp.AONR = FAKTAONR.AONR AND
         fktemp.DELNR = FAKTAONR.DELNR  NO-ERROR.
         IF NOT AVAILABLE fktemp THEN CREATE fktemp.
         CREATE fktemp.
         ASSIGN 
         fktemp.FAKTNR = FAKTPLAN.FAKTNR   
         fktemp.FDELNR = fdelnrvar
         fktemp.AONR = FAKTAONR.AONR
         fktemp.DELNR = FAKTAONR.DELNR                         
         fktemp.KUNDKONTOID = FAKTREGLER.KUNDKONTOID 
         fktemp.MOTPARTID = FAKTREGLER.MOTPARTID            
         fktemp.FDATUM = TODAY + FAKTREGLER.FDAGAR
         fktemp.FAKTDATUM = TODAY            
         fktemp.BELOPP = fktemp.BELOPP +
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.BELOPP) +            
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.LONKOST) +           
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.OBELOPP) +            
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.TBELOPP) +                          
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.RESKOSTDEC).                        
         RUN styrintakt_UI (INPUT TRUE,INPUT TRUE,INPUT TRUE).
      END.
   END.  
END PROCEDURE.

PROCEDURE styrmoms_UI :    
   IF fmtemp.MOMSID = 0 THEN DO:
      FIND FIRST STYRMOMS WHERE STYRMOMS.KUNDID = FAKTREGLER.KUNDID AND
      STYRMOMS.FAKTTYPID = typvarid NO-LOCK NO-ERROR.
      IF AVAILABLE STYRMOMS THEN DO: 
         fmtemp.MOMSID = STYRMOMS.MOMSID.
      END.              
      ELSE DO:
         MESSAGE "Det är något fel på momsupplägget. Kontakta ansvarig!" 
         VIEW-AS ALERT-BOX.
      END.
   END.      
END PROCEDURE.
PROCEDURE styrintakt_UI :    
   DEFINE INPUT PARAMETER intaktvar  AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER kundvar    AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER motpartvar AS LOGICAL NO-UNDO.
   IF motpartvar = TRUE OR intaktvar = TRUE THEN DO:
      FIND FIRST STYRMOT WHERE STYRMOT.KUNDID = FAKTREGLER.KUNDID NO-LOCK NO-ERROR.
      IF AVAILABLE STYRMOT THEN DO:
         IF motpartvar = TRUE THEN fktemp.MOTPARTID = STYRMOT.MOTPARTID.         
         IF intaktvar = TRUE THEN fitemp.MOTPARTID = STYRMOT.MOTPARTID.
      END.      
      ELSE DO:
         MESSAGE "Det är något fel på motpartsupplägget. Kontakta ansvarig!" 
         VIEW-AS ALERT-BOX.
      END.
   END.
   IF kundvar = TRUE THEN DO:
      FIND FIRST STYRKUND WHERE STYRKUND.KUNDID = FAKTREGLER.KUNDID NO-LOCK NO-ERROR.
      IF AVAILABLE STYRKUND THEN DO:
         fktemp.KUNDKONTOID = STYRKUND.KUNDKONTOID.
      END.              
      ELSE DO:
         MESSAGE "Det är något fel på kundfodransupplägget. Kontakta ansvarig!" 
         VIEW-AS ALERT-BOX.
      END.
   END.
   IF fitemp.MOMSID = 0 THEN DO:
      FIND FIRST STYRMOMS WHERE STYRMOMS.KUNDID = FAKTREGLER.KUNDID AND
      STYRMOMS.FAKTTYPID = typvarid NO-LOCK NO-ERROR.
      IF AVAILABLE STYRMOMS THEN DO:
         FIND FIRST STYRINTAKT WHERE STYRINTAKT.KUNDID = FAKTREGLER.KUNDID AND
         STYRINTAKT.FAKTTYPID = typvarid AND 
         STYRINTAKT.MOMSID = STYRMOMS.MOMSID
         NO-LOCK NO-ERROR.
         IF AVAILABLE STYRINTAKT THEN DO:
            IF intaktvar = TRUE THEN fitemp.INTAKTID = STYRINTAKT.INTAKTID.
         END.              
         ELSE DO:
            MESSAGE "Det är något fel på intäktskonteringen. Kontakta ansvarig!" 
            VIEW-AS ALERT-BOX.
         END.      
      END.                 
      ELSE DO:
         MESSAGE "Det är något fel på momskoder som skall styra intäktskonteringen. Kontakta ansvarig!" 
         VIEW-AS ALERT-BOX.
      END.
   END.
   ELSE DO:      
      FIND FIRST STYRINTAKT WHERE STYRINTAKT.KUNDID = FAKTREGLER.KUNDID AND
      STYRINTAKT.FAKTTYPID = 11 AND 
      STYRINTAKT.MOMSID = fitemp.MOMSID
      NO-LOCK NO-ERROR.
      IF AVAILABLE STYRINTAKT THEN DO:
         IF intaktvar = TRUE THEN fitemp.INTAKTID = STYRINTAKT.INTAKTID.
      END.              
      ELSE DO:
         MESSAGE "Det är något fel på intäktskonteringen med differentierad moms.
         Kontakta ansvarig!" 
         VIEW-AS ALERT-BOX.      
      END.                       
   END.      
END PROCEDURE.
PROCEDURE tid_UI :
   FOR EACH FAKTTID WHERE FAKTTID.FAKTNR = infakplannr AND FAKTTID.FDELNR = fdelnrvar AND FAKTTID.MED = TRUE EXCLUSIVE-LOCK:  
      CREATE sumtidtemp.  
      BUFFER-COPY FAKTTID EXCEPT FAKTTID.DECRESTID FAKTTID.RESTIM TO sumtidtemp. 
      ASSIGN FAKTTID.DECRESTID    = sumtidtemp.RESTIM. 
      
   END.                                                /*
         
         ASSIGN     
         FAKTTID.PERSONALKOD  = sumtidtemp.PERSONALKOD
         FAKTTID.NAMN         = sumtidtemp.NAMN 
         FAKTTID.AONR         = sumtidtemp.AONR
         FAKTTID.DELNR        = sumtidtemp.DELNR
         FAKTTID.TIMMAR       = sumtidtemp.TIMMAR
         FAKTTID.BELOPP       = sumtidtemp.BELOPP        
         FAKTTID.OBELOPP      = sumtidtemp.OBELOPP 
         FAKTTID.TBELOPP      = sumtidtemp.TBELOPP             
         FAKTTID.OTIMMAR      = sumtidtemp.OTIMMAR 
         FAKTTID.RESPRIS      = sumtidtemp.RESPRIS
         FAKTTID.OPRIS        = sumtidtemp.OPRIS
         FAKTTID.LONKOST      = sumtidtemp.LONKOST
         FAKTTID.BEFATTNING   = sumtidtemp.BEFATTNING 
         FAKTTID.PERSMASK     = sumtidtemp.PERSMASK
         FAKTTID.TRAKTKOD     = sumtidtemp.TRAKTKOD
         FAKTTID.TRAKTANTAL   = sumtidtemp.TRAKTANTAL  
         FAKTTID.LONTILLAGG   = sumtidtemp.LONTILLAGG      
         FAKTTID.LONTILLANTAL = sumtidtemp.LONTILLANTAL 
         FAKTTID.PRISA        = sumtidtemp.PRISA 
         FAKTTID.ENDAGS       = sumtidtemp.ENDAGS       
         FAKTTID.MED          = sumtidtemp.MED      
         FAKTTID.PRISTYP      = sumtidtemp.PRISTYP
         FAKTTID.DECRESTID    = sumtidtemp.RESTIM
         FAKTTID.RESKOSTDEC   = sumtidtemp.RESKOSTDEC
         FAKTTID.OTEXTID      = sumtidtemp.OTEXTID
         FAKTTID.DATUM        = sumtidtemp.DATUM
         FAKTTID.START        = sumtidtemp.START 
         FAKTTID.SLUT         = sumtidtemp.SLUT
         FAKTTID.GSTART       = sumtidtemp.GSTART 
         FAKTTID.GSLUT        = sumtidtemp.GSLUT
         FAKTTID.LUNCH        = sumtidtemp.LUNCH          
         FAKTTID.OANT1        = sumtidtemp.OANT1.       
         */
      
END PROCEDURE.
PROCEDURE tidk_UI :
   FOR EACH FAKTTIDKRED WHERE FAKTTIDKRED.FAKTNR = infakplannr AND FAKTTIDKRED.FDELNR = fdelnrvar AND FAKTTIDKRED.MED = TRUE EXCLUSIVE-LOCK:  
      CREATE sumtidtemp.  
      BUFFER-COPY FAKTTIDKRED EXCEPT FAKTTIDKRED.DECRESTID FAKTTIDKRED.RESTIM TO sumtidtemp. 
      ASSIGN FAKTTIDKRED.DECRESTID    = sumtidtemp.RESTIM. 
      
   END.                                                /*
         
         ASSIGN     
         FAKTTID.PERSONALKOD  = sumtidtemp.PERSONALKOD
         FAKTTID.NAMN         = sumtidtemp.NAMN 
         FAKTTID.AONR         = sumtidtemp.AONR
         FAKTTID.DELNR        = sumtidtemp.DELNR
         FAKTTID.TIMMAR       = sumtidtemp.TIMMAR
         FAKTTID.BELOPP       = sumtidtemp.BELOPP        
         FAKTTID.OBELOPP      = sumtidtemp.OBELOPP 
         FAKTTID.TBELOPP      = sumtidtemp.TBELOPP             
         FAKTTID.OTIMMAR      = sumtidtemp.OTIMMAR 
         FAKTTID.RESPRIS      = sumtidtemp.RESPRIS
         FAKTTID.OPRIS        = sumtidtemp.OPRIS
         FAKTTID.LONKOST      = sumtidtemp.LONKOST
         FAKTTID.BEFATTNING   = sumtidtemp.BEFATTNING 
         FAKTTID.PERSMASK     = sumtidtemp.PERSMASK
         FAKTTID.TRAKTKOD     = sumtidtemp.TRAKTKOD
         FAKTTID.TRAKTANTAL   = sumtidtemp.TRAKTANTAL  
         FAKTTID.LONTILLAGG   = sumtidtemp.LONTILLAGG      
         FAKTTID.LONTILLANTAL = sumtidtemp.LONTILLANTAL 
         FAKTTID.PRISA        = sumtidtemp.PRISA 
         FAKTTID.ENDAGS       = sumtidtemp.ENDAGS       
         FAKTTID.MED          = sumtidtemp.MED      
         FAKTTID.PRISTYP      = sumtidtemp.PRISTYP
         FAKTTID.DECRESTID    = sumtidtemp.RESTIM
         FAKTTID.RESKOSTDEC   = sumtidtemp.RESKOSTDEC
         FAKTTID.OTEXTID      = sumtidtemp.OTEXTID
         FAKTTID.DATUM        = sumtidtemp.DATUM
         FAKTTID.START        = sumtidtemp.START 
         FAKTTID.SLUT         = sumtidtemp.SLUT
         FAKTTID.GSTART       = sumtidtemp.GSTART 
         FAKTTID.GSLUT        = sumtidtemp.GSLUT
         FAKTTID.LUNCH        = sumtidtemp.LUNCH          
         FAKTTID.OANT1        = sumtidtemp.OANT1.       
         */
      
END PROCEDURE.
PROCEDURE kostreg_UI:
   FOR EACH FAKTKOST WHERE FAKTKOST.FAKTNR = infakplannr AND FAKTKOST.FDELNR = fdelnrvar AND FAKTKOST.MED = TRUE NO-LOCK:
      CREATE kosttemp.               
      ASSIGN         
      kosttemp.FAKTNR      =    FAKTKOST.VERNR         
      kosttemp.MED         =    FAKTKOST.MED           
      kosttemp.AONR        =    FAKTKOST.AONR          
      kosttemp.DELNR       =    FAKTKOST.DELNR                    
      kosttemp.RADNR       =    FAKTKOST.RADNR         
      kosttemp.MASKKOST    =    FAKTKOST.MASKKOST      
      kosttemp.PERSKOST    =    FAKTKOST.PERSKOST      
      kosttemp.TRAKTKOST   =    FAKTKOST.TRAKTKOST     
      kosttemp.MTRL        =    FAKTKOST.MTRL          
      kosttemp.OVRKR       =    FAKTKOST.OVRKR                                         
      kosttemp.BENAMNING   =    FAKTKOST.BENAMNING     
      kosttemp.RADNR       =    FAKTKOST.RADNR         
      kosttemp.MOMSEXTERNT =    FAKTKOST.MOMSEXTERNT    
      kosttemp.MOMSID     =    FAKTKOST.MOMSID.               
   END.
END PROCEDURE.
PROCEDURE kostregk_UI:
   FOR EACH FAKTKOSTKRED WHERE FAKTKOSTKRED.FAKTNR = infakplannr AND FAKTKOSTKRED.FDELNR = fdelnrvar AND FAKTKOSTKRED.MED = TRUE NO-LOCK:
      CREATE kosttemp.               
      ASSIGN         
      kosttemp.FAKTNR      =    FAKTKOSTKRED.VERNR         
      kosttemp.MED         =    FAKTKOSTKRED.MED           
      kosttemp.AONR        =    FAKTKOSTKRED.AONR          
      kosttemp.DELNR       =    FAKTKOSTKRED.DELNR                    
      kosttemp.RADNR       =    FAKTKOSTKRED.RADNR         
      kosttemp.MASKKOST    =    FAKTKOSTKRED.MASKKOST      
      kosttemp.PERSKOST    =    FAKTKOSTKRED.PERSKOST      
      kosttemp.TRAKTKOST   =    FAKTKOSTKRED.TRAKTKOST     
      kosttemp.MTRL        =    FAKTKOSTKRED.MTRL          
      kosttemp.OVRKR       =    FAKTKOSTKRED.OVRKR                                         
      kosttemp.BENAMNING   =    FAKTKOSTKRED.BENAMNING     
      kosttemp.RADNR       =    FAKTKOSTKRED.RADNR         
      kosttemp.MOMSEXTERNT =    FAKTKOSTKRED.MOMSEXTERNT    
      kosttemp.MOMSID     =    FAKTKOSTKRED.MOMSID.               
   END.
END PROCEDURE.
PROCEDURE nyproc_UI :
   DEFINE VARIABLE delbelopp AS DECIMAL NO-UNDO.
   FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND      
   FAKTAONR.EXTRAPRIS NE 0 NO-LOCK NO-ERROR.
   IF AVAILABLE FAKTAONR THEN DO:
      FOR EACH frikolltemp:
         frikolltemp.FORDELNING = TRUE.              
      END.
      ASSIGN
      extrasumma = 0
      delbelopp = 0.   
   END.
   ELSE DO:
      FOR EACH frikolltemp:
         FOR EACH FAKTFRIA WHERE FAKTFRIA.FAKTNR = FAKTPLAN.FAKTNR AND      
         FAKTFRIA.AONR = frikolltemp.AONR AND FAKTFRIA.DELNR = frikolltemp.DELNR AND FAKTFRIA.FAKTURERAD = TRUE AND 
         FAKTFRIA.VFAKTNR NE FAKTURERAD.VFAKTNR NO-LOCK:
            frikolltemp.FRIBELOPP = frikolltemp.FRIBELOPP + FAKTFRIA.TOTALT.
         END.     
         FOR EACH FAKTINTAKTKONT WHERE FAKTINTAKTKONT.FAKTNR = FAKTPLAN.FAKTNR AND      
         FAKTINTAKTKONT.AONR = frikolltemp.AONR AND FAKTINTAKTKONT.DELNR = frikolltemp.DELNR AND
         FAKTINTAKTKONT.VFAKTNR NE FAKTURERAD.VFAKTNR NO-LOCK:
            frikolltemp.TOTFAKT = frikolltemp.TOTFAKT + fitemp.BELOPP.
         END.      
         IF frikolltemp.TOTBELOPP >= ROUND((frikolltemp.TOTFAKT - frikolltemp.FRIBELOPP),0) THEN DO:
            frikolltemp.FORDELNING = TRUE.
         END.      
         ELSE DO:
            frikolltemp.FORDELNING = FALSE.
            delbelopp = delbelopp + frikolltemp.TOTBELOPP.
         END.      
      END.
   END.
   
   delfakt = nyfakttotal / (FAKTPLAN.OFFERTPRIS - (extrasumma + delbelopp)). 
   IF delfakt = ? THEN delfakt = 0.
   /*
   CCC
   FIND FAKTSTART WHERE FAKTSTART.FAKTNR = FAKTPLAN.FAKTNR AND FAKTSTART.START = "START" NO-ERROR.
   delfakt = nyfakttotal / (FAKTPLAN.OFFERTPRIS - (delbelopp + FAKTSTART.BELOPP)).
   */   
END PROCEDURE.

PROCEDURE momsfast_UI :    
   IF vartyp = 1 OR vartyp = 3 THEN DO:       
      GET FIRST faktaonrq NO-LOCK.
      IF faoff = FAKTPLAN.OFFERTPRIS AND faoff > 0 THEN DO:
         DO WHILE AVAILABLE(FAKTAONR) TRANSACTION:               
            FIND FIRST frikolltemp WHERE frikolltemp.AONR = FAKTAONR.AONR AND 
            frikolltemp.DELNR = FAKTAONR.DELNR NO-ERROR.             
            IF frikolltemp.FORDELNING = TRUE THEN DO:           
               FIND FIRST fmtemp WHERE 
               fmtemp.TYP2 = 0 AND
               fmtemp.FAKTNR = FAKTPLAN.FAKTNR AND  
               fmtemp.FDELNR = fdelnrvar AND 
               fmtemp.AONR = FAKTAONR.AONR AND
               fmtemp.DELNR = FAKTAONR.DELNR AND
               fmtemp.TYP = "FAST"                                        
                NO-ERROR.
               IF NOT AVAILABLE fmtemp THEN DO:
                  CREATE fmtemp.
                  IF FAKTPLAN.SLUTFAKT = TRUE AND tidmomsvar = 0 THEN DO:
                     fmtemp.BELOPP = tidfaktvar.
                  END.       
               END.
               ASSIGN 
               fmtemp.TYP2 = 0 
               fmtemp.FAKTNR = FAKTPLAN.FAKTNR   
               fmtemp.FDELNR = fdelnrvar  
               fmtemp.AONR = FAKTAONR.AONR
               fmtemp.DELNR = FAKTAONR.DELNR
               fmtemp.TYP = "FAST"                         
               fmtemp.FRITEXT = "Del betalningar"                      
               fmtemp.BELOPP = fmtemp.BELOPP + delfakt * FAKTAONR.OPRIS.         
               nymomstotal = nymomstotal + fmtemp.BELOPP.                          
               RUN styrmoms_UI.
            END.
            GET NEXT faktaonrq NO-LOCK.
         END.      
      END.
      ELSE DO:
         FOR EACH FAKTSTART WHERE FAKTSTART.FAKTNR = FAKTPLAN.FAKTNR AND                     
         FAKTSTART.FDELNR = fdelnrvar AND FAKTSTART.FAKTURERAD = TRUE NO-LOCK BREAK 
         BY FAKTSTART.FAKTURERAD:              
            ACCUMULATE  FAKTSTART.BELOPP (TOTAL BY FAKTSTART.FAKTURERAD).            
            IF LAST-OF(FAKTSTART.FAKTURERAD) THEN DO TRANSACTION:         
               FIND FIRST fmtemp WHERE 
               fmtemp.TYP2 = 0 AND
               fmtemp.FAKTNR = FAKTPLAN.FAKTNR AND  
               fmtemp.FDELNR = fdelnrvar AND 
               fmtemp.AONR = FAKTAONR.AONR AND
               fmtemp.DELNR = FAKTAONR.DELNR AND
               fmtemp.TYP = "FAST"                                        
                NO-ERROR.
               IF NOT AVAILABLE fmtemp THEN DO:
                  CREATE fmtemp.
                  IF FAKTPLAN.SLUTFAKT = TRUE AND tidmomsvar = 0 THEN DO:
                     fmtemp.BELOPP = tidfaktvar.
                  END.       
               END.
               ASSIGN 
               fmtemp.TYP2 = 0 
               fmtemp.FAKTNR = FAKTPLAN.FAKTNR   
               fmtemp.FDELNR = fdelnrvar  
               fmtemp.AONR = FAKTAONR.AONR
               fmtemp.DELNR = FAKTAONR.DELNR
               fmtemp.TYP = "FAST"                         
               fmtemp.FRITEXT = "Del betalningar"               
               fmtemp.BELOPP = fmtemp.BELOPP +
               (ACCUM TOTAL BY FAKTSTART.FAKTURERAD FAKTSTART.BELOPP).  
               nymomstotal = nymomstotal + fmtemp.BELOPP.                          
               RUN styrmoms_UI.
            END.
         END.            
      END.
   END.
   ELSE DO:
      OPEN QUERY BRW_PLAN FOR EACH FAKTSTART WHERE 
      FAKTSTART.FAKTNR = FAKTPLAN.FAKTNR NO-LOCK.
      GET FIRST BRW_PLAN NO-LOCK.
      DO WHILE AVAILABLE(FAKTSTART):
         IF FAKTSTART.FAKTURERAD = TRUE AND FAKTSTART.FDELNR = fdelnrvar THEN DO:
            IF FAKTSTART.START NE "" THEN DO:
               OPEN QUERY faktavtq FOR EACH FAKTAVTALAONR WHERE 
               FAKTAVTALAONR.FAKTNR = FAKTPLAN.FAKTNR AND 
               FAKTAVTALAONR.START = FAKTSTART.START 
               NO-LOCK.
            END.
            ELSE DO:
               OPEN QUERY faktavtq FOR EACH FAKTAVTALAONR WHERE 
               FAKTAVTALAONR.FAKTNR = FAKTPLAN.FAKTNR AND 
               FAKTAVTALAONR.PLANDATUM = FAKTSTART.PLANDATUM 
               NO-LOCK.
            END.
            GET FIRST faktavtq NO-LOCK.
            DO WHILE AVAILABLE(FAKTAVTALAONR) TRANSACTION: 
               FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
               FAKTAONR.AONR = FAKTAVTALAONR.AONR AND FAKTAONR.DELNR = FAKTAVTALAONR.DELNR
               NO-LOCK NO-ERROR.     
               FIND FIRST fmtemp WHERE 
               fmtemp.TYP2 = 0 AND
               fmtemp.FAKTNR = FAKTPLAN.FAKTNR AND  
               fmtemp.FDELNR = fdelnrvar AND 
               fmtemp.AONR = FAKTAONR.AONR AND
               fmtemp.DELNR = FAKTAONR.DELNR AND
               fmtemp.TYP = "FAST"                                        
                NO-ERROR.
               IF NOT AVAILABLE fmtemp THEN DO:
                  CREATE fmtemp.
                  IF FAKTPLAN.SLUTFAKT = TRUE AND tidmomsvar = 0 THEN DO:
                     fmtemp.BELOPP = tidfaktvar.
                  END.       
               END.
               ASSIGN 
               fmtemp.TYP2 = 0 
               fmtemp.FAKTNR = FAKTPLAN.FAKTNR   
               fmtemp.FDELNR = fdelnrvar
               fmtemp.AONR = FAKTAONR.AONR
               fmtemp.DELNR = FAKTAONR.DELNR
               fmtemp.TYP = "FAST"                         
               fmtemp.FRITEXT = "Del betalningar"                         
               fmtemp.BELOPP = fmtemp.BELOPP + FAKTAVTALAONR.BELOPP.         
               nymomstotal = nymomstotal + fmtemp.BELOPP.         
               RUN styrmoms_UI.
               GET NEXT faktavtq NO-LOCK.
            END.
         END.
         GET NEXT BRW_PLAN NO-LOCK.
      END.      
   END.  
END PROCEDURE.
      
PROCEDURE momsfastk_UI :    
   IF vartyp = 1 OR vartyp = 3 THEN DO:       
      GET FIRST faktaonrq NO-LOCK.
      IF faoff = FAKTPLAN.OFFERTPRIS THEN DO:
         DO WHILE AVAILABLE(FAKTAONR) TRANSACTION:               
            FIND FIRST fmtemp WHERE 
            fmtemp.TYP2 = 0 AND
            fmtemp.FAKTNR = FAKTPLAN.FAKTNR AND  
            fmtemp.FDELNR = fdelnrvar AND 
            fmtemp.AONR = FAKTAONR.AONR AND
            fmtemp.DELNR = FAKTAONR.DELNR AND
            fmtemp.TYP = "FAST"                                        
             NO-ERROR.
            IF NOT AVAILABLE fmtemp THEN DO:
               CREATE fmtemp.
               IF FAKTPLAN.SLUTFAKT = TRUE AND tidmomsvar = 0 THEN DO:
                  fmtemp.BELOPP = tidfaktvar.
               END.       
            END.
            ASSIGN 
            fmtemp.TYP2 = 0 
            fmtemp.FAKTNR = FAKTPLAN.FAKTNR   
            fmtemp.FDELNR = fdelnrvar  
            fmtemp.AONR = FAKTAONR.AONR
            fmtemp.DELNR = FAKTAONR.DELNR
            fmtemp.TYP = "FAST"                         
            fmtemp.FRITEXT = "Del betalningar"                      
            fmtemp.BELOPP = fmtemp.BELOPP + delfakt * FAKTAONR.OPRIS.         
            nymomstotal = nymomstotal + fmtemp.BELOPP.                          
            RUN styrmoms_UI.
            GET NEXT faktaonrq NO-LOCK.
         END.         
      END.      
      ELSE DO:
         FOR EACH FAKTSTARTKRED WHERE FAKTSTARTKRED.FAKTNR = FAKTPLAN.FAKTNR AND                     
         FAKTSTARTKRED.FDELNR = fdelnrvar AND FAKTSTARTKRED.FAKTURERAD = TRUE NO-LOCK BREAK 
         BY FAKTSTARTKRED.FAKTURERAD:              
            ACCUMULATE  FAKTSTARTKRED.BELOPP (TOTAL BY FAKTSTARTKRED.FAKTURERAD).            
            IF LAST-OF(FAKTSTARTKRED.FAKTURERAD) THEN DO TRANSACTION:         
               FIND FIRST fmtemp WHERE 
               fmtemp.TYP2 = 0 AND
               fmtemp.FAKTNR = FAKTPLAN.FAKTNR AND  
               fmtemp.FDELNR = fdelnrvar AND 
               fmtemp.AONR = FAKTAONR.AONR AND
               fmtemp.DELNR = FAKTAONR.DELNR AND
               fmtemp.TYP = "FAST"                                        
                NO-ERROR.
               IF NOT AVAILABLE fmtemp THEN DO:
                  CREATE fmtemp.
                  IF FAKTPLAN.SLUTFAKT = TRUE AND tidmomsvar = 0 THEN DO:
                     fmtemp.BELOPP = tidfaktvar.
                  END.       
               END.
               ASSIGN 
               fmtemp.TYP2 = 0 
               fmtemp.FAKTNR = FAKTPLAN.FAKTNR   
               fmtemp.FDELNR = fdelnrvar
               fmtemp.AONR = FAKTAONR.AONR
               fmtemp.DELNR = FAKTAONR.DELNR
               fmtemp.TYP = "FAST"                         
               fmtemp.FRITEXT = "Del betalningar"               
               fmtemp.BELOPP = fmtemp.BELOPP +
               (ACCUM TOTAL BY FAKTSTARTKRED.FAKTURERAD FAKTSTARTKRED.BELOPP).  
               nymomstotal = nymomstotal + fmtemp.BELOPP.                          
               RUN styrmoms_UI.
            END.
         END.            
      END.
   END.
   ELSE DO:
      OPEN QUERY BRW_PLAN FOR EACH FAKTSTARTKRED WHERE 
      FAKTSTARTKRED.FAKTNR = FAKTPLAN.FAKTNR NO-LOCK.
      GET FIRST BRW_PLAN NO-LOCK.
      DO WHILE AVAILABLE(FAKTSTARTKRED):
         IF FAKTSTARTKRED.FAKTURERAD = TRUE AND FAKTSTARTKRED.FDELNR = fdelnrvar THEN DO:
            IF FAKTSTARTKRED.START NE "" THEN DO:
               OPEN QUERY faktavtq FOR EACH FAKTAVTALAONR WHERE 
               FAKTAVTALAONR.FAKTNR = FAKTPLAN.FAKTNR AND 
               FAKTAVTALAONR.START = FAKTSTARTKRED.START 
               NO-LOCK.
            END.
            ELSE DO:
               OPEN QUERY faktavtq FOR EACH FAKTAVTALAONR WHERE 
               FAKTAVTALAONR.FAKTNR = FAKTPLAN.FAKTNR AND 
               FAKTAVTALAONR.PLANDATUM = FAKTSTARTKRED.PLANDATUM 
               NO-LOCK.
            END.
            GET FIRST faktavtq NO-LOCK.
            DO WHILE AVAILABLE(FAKTAVTALAONR) TRANSACTION: 
               FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
               FAKTAONR.AONR = FAKTAVTALAONR.AONR AND FAKTAONR.DELNR = FAKTAVTALAONR.DELNR
               NO-LOCK NO-ERROR.     
               FIND FIRST fmtemp WHERE 
               fmtemp.TYP2 = 0 AND
               fmtemp.FAKTNR = FAKTPLAN.FAKTNR AND  
               fmtemp.FDELNR = fdelnrvar AND 
               fmtemp.AONR = FAKTAONR.AONR AND
               fmtemp.DELNR = FAKTAONR.DELNR AND
               fmtemp.TYP = "FAST"                                        
                NO-ERROR.
               IF NOT AVAILABLE fmtemp THEN DO:
                  CREATE fmtemp.
                  IF FAKTPLAN.SLUTFAKT = TRUE AND tidmomsvar = 0 THEN DO:
                     fmtemp.BELOPP = tidfaktvar.
                  END.       
               END.
               ASSIGN 
               fmtemp.TYP2 = 0 
               fmtemp.FAKTNR = FAKTPLAN.FAKTNR   
               fmtemp.FDELNR = fdelnrvar
               fmtemp.AONR = FAKTAONR.AONR
               fmtemp.DELNR = FAKTAONR.DELNR
               fmtemp.TYP = "FAST"                         
               fmtemp.FRITEXT = "Del betalningar"                         
               fmtemp.BELOPP = fmtemp.BELOPP + FAKTAVTALAONR.BELOPP.         
               nymomstotal = nymomstotal + fmtemp.BELOPP.         
               RUN styrmoms_UI.
               GET NEXT faktavtq NO-LOCK.
            END.
         END.
         GET NEXT BRW_PLAN NO-LOCK.
      END.      
   END.  
END PROCEDURE.

PROCEDURE momsupp_UI :     
   OPEN QUERY BRW_UPP FOR EACH FAKTUPPARB WHERE 
   FAKTUPPARB.FAKTNR = FAKTPLAN.FAKTNR AND FAKTUPPARB.FAKTURERAD = TRUE AND                     
   FAKTUPPARB.FDELNR = fdelnrvar
   NO-LOCK BY FAKTUPPARB.UPLAN%.
   GET FIRST BRW_UPP NO-LOCK.
   DO WHILE AVAILABLE(FAKTUPPARB):       
      FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
      FAKTAONR.AONR = FAKTUPPARB.AONR AND FAKTAONR.DELNR = FAKTUPPARB.DELNR
      NO-LOCK NO-ERROR.     
      FIND FIRST fmtemp WHERE 
      fmtemp.TYP2 = 0 AND
      fmtemp.FAKTNR = FAKTPLAN.FAKTNR AND  
      fmtemp.FDELNR = fdelnrvar AND 
      fmtemp.AONR = FAKTAONR.AONR AND
      fmtemp.DELNR = FAKTAONR.DELNR AND
      fmtemp.TYP = "FAST"                                        
       NO-ERROR.
      IF NOT AVAILABLE fmtemp THEN DO:
         CREATE fmtemp.
         IF FAKTPLAN.SLUTFAKT = TRUE AND tidmomsvar = 0 THEN DO:
            fmtemp.BELOPP = tidfaktvar.
         END.       
      END.
      ASSIGN 
      fmtemp.TYP2 = 0 
      fmtemp.FAKTNR = FAKTPLAN.FAKTNR   
      fmtemp.FDELNR = fdelnrvar  
      fmtemp.AONR = FAKTAONR.AONR
      fmtemp.DELNR = FAKTAONR.DELNR
      fmtemp.TYP = "UPP"                         
      fmtemp.FRITEXT = "Del betalningar"                         
      fmtemp.BELOPP = fmtemp.BELOPP + FAKTUPPARB.FAKTBELOPP.         
      nymomstotal = nymomstotal + fmtemp.BELOPP.               
      RUN styrmoms_UI.
      GET NEXT BRW_UPP NO-LOCK.      
   END.  
END PROCEDURE.


PROCEDURE momsuppk_UI :     
   OPEN QUERY BRW_UPP FOR EACH FAKTUPPARBKRED WHERE 
   FAKTUPPARBKRED.FAKTNR = FAKTPLAN.FAKTNR AND FAKTUPPARBKRED.FAKTURERAD = TRUE AND                     
   FAKTUPPARBKRED.FDELNR = fdelnrvar
   NO-LOCK BY FAKTUPPARBKRED.UPLAN%.
   GET FIRST BRW_UPP NO-LOCK.
   DO WHILE AVAILABLE(FAKTUPPARBKRED):       
      FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
      FAKTAONR.AONR = FAKTUPPARBKRED.AONR AND FAKTAONR.DELNR = FAKTUPPARBKRED.DELNR
      NO-LOCK NO-ERROR.     
      FIND FIRST fmtemp WHERE 
      fmtemp.TYP2 = 0 AND
      fmtemp.FAKTNR = FAKTPLAN.FAKTNR AND  
      fmtemp.FDELNR = fdelnrvar AND 
      fmtemp.AONR = FAKTAONR.AONR AND
      fmtemp.DELNR = FAKTAONR.DELNR AND
      fmtemp.TYP = "FAST"                                        
       NO-ERROR.
      IF NOT AVAILABLE fmtemp THEN DO:
         CREATE fmtemp.
         IF FAKTPLAN.SLUTFAKT = TRUE AND tidmomsvar = 0 THEN DO:
            fmtemp.BELOPP = tidfaktvar.
         END.       
      END.
      ASSIGN 
      fmtemp.TYP2 = 0 
      fmtemp.FAKTNR = FAKTPLAN.FAKTNR   
      fmtemp.FDELNR = fdelnrvar  
      fmtemp.AONR = FAKTAONR.AONR
      fmtemp.DELNR = FAKTAONR.DELNR
      fmtemp.TYP = "UPP"                         
      fmtemp.FRITEXT = "Del betalningar"                         
      fmtemp.BELOPP = fmtemp.BELOPP + FAKTUPPARBKRED.FAKTBELOPP.         
      nymomstotal = nymomstotal + fmtemp.BELOPP.               
      RUN styrmoms_UI.
      GET NEXT BRW_UPP NO-LOCK.      
   END.  
END PROCEDURE.

PROCEDURE momsfri_UI :    
   FOR EACH efaktfriatemp:
      FIND FIRST extradatatemp WHERE extradatatemp.HUVUDINT = INTEGER(efaktfriatemp.TYP)
      NO-LOCK NO-ERROR.
      IF NOT AVAILABLE extradatatemp THEN DO:
         CREATE faktfriatemp.                     
         BUFFER-COPY efaktfriatemp TO faktfriatemp.
         DELETE efaktfriatemp.
         NEXT.
      END.
      FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
      FAKTAONR.AONR = efaktfriatemp.AONR AND
      FAKTAONR.DELNR = efaktfriatemp.DELNR NO-LOCK NO-ERROR.
      IF NOT AVAILABLE FAKTAONR THEN DO:
         FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
         FAKTAONR.AONR = efaktfriatemp.AONR NO-LOCK NO-ERROR.
      END.                         
      FIND FIRST fmtemp WHERE fmtemp.TYP2 = extradatatemp.HUVUDINT AND
      fmtemp.AONR = FAKTAONR.AONR  AND fmtemp.DELNR = FAKTAONR.DELNR 
      NO-ERROR.
      IF NOT AVAILABLE fmtemp THEN DO:
         CREATE fmtemp.
         ASSIGN
         fmtemp.TYP2 = extradatatemp.HUVUDINT
         fmtemp.MOMSID = extradatatemp.SOKINT[4]
         fmtemp.K1 = extradatatemp.SOKCHAR[1]
         fmtemp.K2 = extradatatemp.SOKCHAR[2]
         fmtemp.K3 = extradatatemp.SOKCHAR[3]
         fmtemp.K4 = extradatatemp.SOKCHAR[4]
         fmtemp.K5 = extradatatemp.SOKCHAR[5].         
      END.
      ASSIGN            
      fmtemp.FAKTNR = FAKTPLAN.FAKTNR   
      fmtemp.FDELNR = fdelnrvar
      fmtemp.AONR = FAKTAONR.AONR
      fmtemp.DELNR = FAKTAONR.DELNR
      fmtemp.TYP = efaktfriatemp.TYP  
      fmtemp.BELOPP = fmtemp.BELOPP + efaktfriatemp.TOTALT.
      nymomstotal = nymomstotal + fmtemp.BELOPP.                     
      fmtemp.FRITEXT = "Från prislista " + LC(extradatatemp.SOKCHAR[10]).            
      IF fmtemp.MOMSID = 0 THEN RUN styrmoms_UI.      
   END.

   FOR EACH faktfriatemp WHERE faktfriatemp.FAKTNR = FAKTPLAN.FAKTNR AND
   faktfriatemp.FDELNR = fdelnrvar AND faktfriatemp.FAKTURERAD = TRUE NO-LOCK BREAK 
   BY faktfriatemp.AONR BY faktfriatemp.DELNR BY faktfriatemp.TYP BY faktfriatemp.MOMSID:              
      ACCUMULATE 
      faktfriatemp.TOTALT (TOTAL BY faktfriatemp.AONR BY faktfriatemp.DELNR BY faktfriatemp.TYP BY faktfriatemp.MOMSID).            
      IF LAST-OF(faktfriatemp.MOMSID) THEN DO TRANSACTION:
         FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
         FAKTAONR.AONR = faktfriatemp.AONR AND
         FAKTAONR.DELNR = faktfriatemp.DELNR NO-LOCK NO-ERROR.
         IF NOT AVAILABLE FAKTAONR THEN DO:
            FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
            FAKTAONR.AONR = faktfriatemp.AONR NO-LOCK NO-ERROR.
         END.
         FIND FIRST fmtemp WHERE
         fmtemp.TYP2 = 0 AND
         fmtemp.FAKTNR = FAKTPLAN.FAKTNR AND  
         fmtemp.FDELNR = fdelnrvar AND 
         fmtemp.AONR = FAKTAONR.AONR AND
         fmtemp.DELNR = FAKTAONR.DELNR AND
         fmtemp.TYP = faktfriatemp.TYP AND
         fmtemp.MOMSID = faktfriatemp.MOMSID                                        
          NO-ERROR.
         IF NOT AVAILABLE fmtemp THEN CREATE fmtemp.
         ASSIGN 
         fmtemp.TYP2 = 0 
         fmtemp.FAKTNR = FAKTPLAN.FAKTNR   
         fmtemp.FDELNR = fdelnrvar  
         fmtemp.AONR = FAKTAONR.AONR
         fmtemp.DELNR = FAKTAONR.DELNR
         fmtemp.TYP = faktfriatemp.TYP  
         fmtemp.MOMSID = faktfriatemp.MOMSID                                          
         fmtemp.BELOPP = fmtemp.BELOPP +
         (ACCUM TOTAL BY faktfriatemp.MOMSID faktfriatemp.TOTALT).
         nymomstotal = nymomstotal + fmtemp.BELOPP.                     
         IF faktfriatemp.TYP BEGINS "PERS" THEN DO:
            fmtemp.FRITEXT = "Övriga personalkostnader".            
         END.
         ELSE IF faktfriatemp.TYP = "MASK" THEN DO:
            fmtemp.FRITEXT = "Övriga främmande tj.".            
         END.
         ELSE IF faktfriatemp.TYP = "MIL" THEN DO:
            fmtemp.FRITEXT = "Övriga mil/Resor".            
         END.
         ELSE IF faktfriatemp.TYP = "TRAKT" THEN DO:
            fmtemp.FRITEXT = "Övriga traktamente mm.".            
         END.
         ELSE IF faktfriatemp.TYP = "OVER" THEN DO:
            fmtemp.FRITEXT = "Övriga kostnader".            
         END.
         ELSE IF faktfriatemp.TYP = "MATRL" THEN DO:
            fmtemp.FRITEXT = "Övriga materielkostnader".            
         END.
         RUN styrmoms_UI.
      END.
   END.
     
END PROCEDURE.


PROCEDURE momskost_UI :    
   FOR EACH kosttemp WHERE kosttemp.MED = TRUE BREAK 
   BY kosttemp.AONR BY kosttemp.DELNR BY kosttemp.MOMSID:         
      ACCUMULATE 
      kosttemp.PERSKOST (TOTAL BY kosttemp.AONR BY kosttemp.DELNR BY kosttemp.MOMSID).
      ACCUMULATE 
      kosttemp.TRAKTKOST (TOTAL BY kosttemp.AONR BY kosttemp.DELNR BY kosttemp.MOMSID).
      ACCUMULATE 
      kosttemp.FRTJPAKR (TOTAL BY kosttemp.AONR BY kosttemp.DELNR BY kosttemp.MOMSID). 
      ACCUMULATE 
      kosttemp.MTRLPAKR (TOTAL BY kosttemp.AONR BY kosttemp.DELNR BY kosttemp.MOMSID).
      ACCUMULATE 
      kosttemp.MASKKOST (TOTAL BY kosttemp.AONR BY kosttemp.DELNR BY kosttemp.MOMSID). 
      ACCUMULATE 
      kosttemp.MTRL (TOTAL BY kosttemp.AONR BY kosttemp.DELNR BY kosttemp.MOMSID).
      ACCUMULATE             
      kosttemp.OVRKR (TOTAL BY kosttemp.AONR BY kosttemp.DELNR BY kosttemp.MOMSID).
      IF LAST-OF(kosttemp.MOMSID) THEN DO TRANSACTION:
         FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
         FAKTAONR.AONR = kosttemp.AONR AND
         FAKTAONR.DELNR = kosttemp.DELNR NO-LOCK NO-ERROR.
         IF NOT AVAILABLE FAKTAONR THEN DO:
            FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
            FAKTAONR.AONR = kosttemp.AONR NO-LOCK NO-ERROR.
         END.
         FIND FIRST fmtemp WHERE 
         fmtemp.TYP2 = 0 AND
         fmtemp.FAKTNR = FAKTPLAN.FAKTNR AND  
         fmtemp.FDELNR = fdelnrvar AND 
         fmtemp.AONR = FAKTAONR.AONR AND
         fmtemp.DELNR = FAKTAONR.DELNR AND
         fmtemp.TYP = "KOST" AND 
         fmtemp.MOMSID = kosttemp.MOMSID                                      
          NO-ERROR.
         IF NOT AVAILABLE fmtemp THEN CREATE fmtemp.
         ASSIGN 
         fmtemp.TYP2 = 0 
         fmtemp.FAKTNR = FAKTPLAN.FAKTNR   
         fmtemp.FDELNR = fdelnrvar  
         fmtemp.AONR = FAKTAONR.AONR 
         fmtemp.DELNR = FAKTAONR.DELNR 
         fmtemp.TYP = "KOST"   
         fmtemp.FRITEXT = "Konterat belopp"         
         fmtemp.MOMSID = kosttemp.MOMSID         
         fmtemp.BELOPP = fmtemp.BELOPP +         
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.PERSKOST) +            
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.TRAKTKOST) +           
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.FRTJPAKR) +            
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.MTRLPAKR) +                          
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.MASKKOST) +
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.MTRL) +
         (ACCUM TOTAL BY kosttemp.MOMSID kosttemp.OVRKR).                  
         nymomstotal = nymomstotal + fmtemp.BELOPP.         
         RUN styrmoms_UI.
      END.
   END.     
END PROCEDURE.


PROCEDURE momstid_UI :    
   FOR EACH sumtidtemp WHERE sumtidtemp.MED = TRUE BREAK 
   BY sumtidtemp.AONR BY sumtidtemp.DELNR:         
      ACCUMULATE 
      sumtidtemp.BELOPP (TOTAL BY sumtidtemp.AONR BY sumtidtemp.DELNR).
      ACCUMULATE 
      sumtidtemp.OBELOPP (TOTAL BY sumtidtemp.AONR BY sumtidtemp.DELNR).
      ACCUMULATE 
      sumtidtemp.LONKOST (TOTAL BY sumtidtemp.AONR BY sumtidtemp.DELNR). 
      ACCUMULATE 
      sumtidtemp.TBELOPP (TOTAL BY sumtidtemp.AONR BY sumtidtemp.DELNR).
      ACCUMULATE 
      sumtidtemp.RESKOSTDEC (TOTAL BY sumtidtemp.AONR BY sumtidtemp.DELNR).
      IF LAST-OF(sumtidtemp.DELNR) THEN DO TRANSACTION:
         FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
         FAKTAONR.AONR = sumtidtemp.AONR AND
         FAKTAONR.DELNR = sumtidtemp.DELNR NO-LOCK NO-ERROR.
         IF NOT AVAILABLE FAKTAONR THEN DO:
            FIND FIRST FAKTAONR WHERE FAKTAONR.FAKTNR = FAKTPLAN.FAKTNR AND
            FAKTAONR.AONR = sumtidtemp.AONR NO-LOCK NO-ERROR.
         END.
         FIND FIRST fmtemp WHERE 
         fmtemp.TYP2 = 0 AND
         fmtemp.FAKTNR = FAKTPLAN.FAKTNR AND  
         fmtemp.FDELNR = fdelnrvar AND 
         fmtemp.AONR = FAKTAONR.AONR AND
         fmtemp.DELNR = FAKTAONR.DELNR AND
         fmtemp.TYP = "TID"                                        
          NO-ERROR.         
         IF NOT AVAILABLE fmtemp THEN DO:
            CREATE fmtemp.
            /*
            IF FILL-IN_SLUTFAKT = TRUE AND tidmomsvar = 0 THEN DO:
               fmtemp.BELOPP = tidfaktvar.
            END.
            */       
         END.         
         ASSIGN 
         fmtemp.TYP2 = 0 
         fmtemp.FAKTNR = FAKTPLAN.FAKTNR   
         fmtemp.FDELNR = fdelnrvar  
         fmtemp.AONR = FAKTAONR.AONR 
         fmtemp.DELNR = FAKTAONR.DELNR 
         fmtemp.TYP = "TID"       
         fmtemp.FRITEXT = "Tidskrivning"              
         fmtemp.BELOPP = fmtemp.BELOPP +
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.BELOPP) +            
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.LONKOST) +           
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.OBELOPP) +            
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.TBELOPP) +                          
         (ACCUM TOTAL BY sumtidtemp.DELNR sumtidtemp.RESKOSTDEC).         
         nymomstotal = nymomstotal + fmtemp.BELOPP.         
         RUN styrmoms_UI.         
      END.
   END.     
END PROCEDURE.


