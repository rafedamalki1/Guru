/*SKAPPROTOU7.P PROTOKOLL VARDERING*/
{APP.I}

DEFINE VARIABLE samman AS LOGICAL NO-UNDO.
DEFINE VARIABLE stamp AS LOGICAL NO-UNDO.
DEFINE VARIABLE arrhjsum AS INTEGER NO-UNDO.
DEFINE VARIABLE arrhj1 AS DECIMAL NO-UNDO.     
DEFINE VARIABLE arrhj2 AS INTEGER NO-UNDO.
DEFINE VARIABLE arrhj3 AS INTEGER NO-UNDO.    
DEFINE VARIABLE arrhj4 AS DECIMAL NO-UNDO.   
DEFINE VARIABLE arrhj5 AS INTEGER NO-UNDO.  
DEFINE VARIABLE arrhj6 AS INTEGER NO-UNDO.
DEFINE VARIABLE arrhj7 AS DECIMAL NO-UNDO.   
DEFINE VARIABLE arrhj8 AS INTEGER NO-UNDO.  
DEFINE VARIABLE arrhj9 AS INTEGER NO-UNDO.
DEFINE VARIABLE arrhj10 AS DECIMAL NO-UNDO.   
DEFINE VARIABLE arrhj11 AS INTEGER NO-UNDO.
DEFINE VARIABLE suakertot AS INTEGER NO-UNDO. 
DEFINE VARIABLE sumkabel AS INTEGER NO-UNDO. 
DEFINE VARIABLE sumskogn AS INTEGER NO-UNDO.
DEFINE VARIABLE sumskognpro AS INTEGER NO-UNDO.
DEFINE VARIABLE sumskogb AS INTEGER NO-UNDO.
DEFINE VARIABLE sumakern AS INTEGER NO-UNDO.
DEFINE VARIABLE sumakernpro AS INTEGER NO-UNDO.
DEFINE VARIABLE sumakerb AS INTEGER NO-UNDO.
DEFINE VARIABLE sumtrafon AS INTEGER NO-UNDO.
DEFINE VARIABLE sumtrafopro AS INTEGER NO-UNDO.
DEFINE VARIABLE sumtrafob AS INTEGER NO-UNDO.
DEFINE VARIABLE sumtillfskada AS INTEGER NO-UNDO.
DEFINE VARIABLE sumkabeln AS INTEGER NO-UNDO.
DEFINE VARIABLE sumkabelnDEC AS DECIMAL NO-UNDO.
DEFINE VARIABLE sumkabelnpro AS INTEGER NO-UNDO.
DEFINE VARIABLE sumkabelb AS INTEGER NO-UNDO.
DEFINE VARIABLE sumallan AS decimal NO-UNDO.
DEFINE VARIABLE sumallab AS INTEGER NO-UNDO.
DEFINE VARIABLE sumplus AS decimal NO-UNDO.
DEFINE VARIABLE sumproc AS DECIMAL  NO-UNDO.
DEFINE VARIABLE tillagg AS DECIMAL  NO-UNDO.
DEFINE VARIABLE sumvol AS INTEGER NO-UNDO.
DEFINE VARIABLE sumvol2 AS DECIMAL NO-UNDO.
DEFINE VARIABLE totsumma AS DECIMAL  NO-UNDO.
/*DEFINE VARIABLE tsumma AS INTEGER NO-UNDO.*/
DEFINE VARIABLE tsumma AS DECIMAL NO-UNDO.
DEFINE VARIABLE minus AS INTEGER NO-UNDO.
DEFINE VARIABLE moms AS INTEGER NO-UNDO.
DEFINE VARIABLE rottot AS INTEGER NO-UNDO.
DEFINE VARIABLE str AS CHARACTER FORMAT "X(92)" NO-UNDO.
DEFINE VARIABLE st2 AS CHARACTER FORMAT "X(92)" NO-UNDO.
DEFINE VARIABLE str3 AS CHARACTER FORMAT "X(92)" NO-UNDO.
DEFINE VARIABLE minsumma AS LOGICAL NO-UNDO.
DEFINE VARIABLE vaghallare AS CHARACTER  NO-UNDO.
DEFINE VARIABLE markvagh AS CHARACTER  NO-UNDO.
DEFINE VARIABLE markvagh2 AS CHARACTER  NO-UNDO.
DEFINE VARIABLE markvagh3 AS CHARACTER  NO-UNDO.
DEFINE VARIABLE markvagh4 AS CHARACTER  NO-UNDO.
DEFINE VARIABLE kontaktp AS LOGICAL NO-UNDO.
DEFINE VARIABLE allnamn AS CHARACTER NO-UNDO.
DEFINE VARIABLE allpersnr AS CHARACTER NO-UNDO.
/*DEFINE VARIABLE tlagg AS INTEGER NO-UNDO.*/
DEFINE VARIABLE tlagg AS DECIMAL NO-UNDO.
DEFINE VARIABLE kabstn AS CHARACTER NO-UNDO.
DEFINE VARIABLE lagjord AS LOGICAL NO-UNDO.
DEFINE VARIABLE fpris AS INTEGER NO-UNDO.
DEFINE VARIABLE tillfskada AS LOGICAL NO-UNDO.
DEFINE VARIABLE storsu AS INTEGER NO-UNDO.
DEFINE VARIABLE stosu AS DECIMAL NO-UNDO.
DEFINE VARIABLE stsuad AS INTEGER NO-UNDO.
DEFINE VARIABLE moment2 AS CHARACTER NO-UNDO.
DEFINE VARIABLE paslag AS DECIMAL NO-UNDO.
/*DEFINE VARIABLE pslag AS INTEGER NO-UNDO.*/
DEFINE VARIABLE pslag AS DECIMAL NO-UNDO.
DEFINE VARIABLE hjarst AS INTEGER NO-UNDO.
DEFINE VARIABLE hjar AS INTEGER NO-UNDO.
DEFINE VARIABLE indexup AS DECIMAL NO-UNDO.
DEFINE VARIABLE paslagfaktor AS DECIMAL NO-UNDO.
DEFINE VARIABLE kopindex AS DECIMAL NO-UNDO.
DEFINE VARIABLE overenskom AS DECIMAL NO-UNDO.
DEFINE VARIABLE vardartal AS INTEGER NO-UNDO.
DEFINE VARIABLE bbelopp AS INTEGER NO-UNDO.
DEFINE VARIABLE vexprop AS DECIMAL NO-UNDO.
DEFINE VARIABLE korroveraker AS DECIMAL NO-UNDO.
DEFINE VARIABLE gerspro AS DECIMAL NO-UNDO.
DEFINE VARIABLE gers AS DECIMAL NO-UNDO.
DEFINE VARIABLE minproc AS INTEGER NO-UNDO.
DEFINE VARIABLE nypolicygers AS LOGICAL NO-UNDO.
DEFINE VARIABLE nypolicykab AS LOGICAL NO-UNDO.
DEFINE VARIABLE azon1 AS DECIMAL NO-UNDO.
DEFINE VARIABLE azon2 AS DECIMAL NO-UNDO.
DEFINE VARIABLE afastb AS INTEGER NO-UNDO.
DEFINE VARIABLE fbstor AS INTEGER NO-UNDO.
DEFINE BUFFER kbuff FOR KINDEX.
{MARAG.I}

DEFINE BUFFER mahj FOR marag.

{allavardtemp.I}


   
DEFINE TEMP-TABLE vvard                                 
   FIELD MARKNR LIKE MARKAGARE.MARKNR 
   FIELD VARDNR LIKE VARDERING.VARDNR  
   FIELD BETECKNING LIKE VOLSKOG.BETECKNING
   FIELD DIAM LIKE VOLSKOG.DIAM  
   FIELD BANT LIKE VOLSKOG.BANT
   FIELD BHKL LIKE VOLSKOG.BHKL 
   FIELD BKR LIKE VOLSKOG.BKR 
   FIELD BM3 LIKE VOLSKOG.BM3      
   FIELD GANT LIKE VOLSKOG.GANT
   FIELD GHKL LIKE VOLSKOG.GHKL
   FIELD GKR LIKE VOLSKOG.GKR
   FIELD GM3 LIKE VOLSKOG.GM3
   FIELD TANT LIKE VOLSKOG.TANT
   FIELD THKL LIKE VOLSKOG.THKL
   FIELD TKR LIKE VOLSKOG.TKR
   FIELD TM3 LIKE VOLSKOG.TM3  
   FIELD OANT LIKE VOLSKOG.OANT
   FIELD OHKL LIKE VOLSKOG.OHKL
   FIELD OKORR LIKE VOLSKOG.OKORR
   FIELD OM3 LIKE VOLSKOG.OM3
   FIELD OKR LIKE VOLSKOG.OKR
   FIELD TRAD AS CHARACTER FORMAT "X(8)"
   INDEX MARKNR IS PRIMARY MARKNR ASCENDING
   INDEX HKL MARKNR THKL BHKL GHKL DIAM.
   
DEFINE TEMP-TABLE ockvol                                 
   FIELD MARKNR LIKE MARKAGARE.MARKNR 
   FIELD VARDNR LIKE VARDERING.VARDNR  
   FIELD BETECKNING LIKE VOLSKOG.BETECKNING
   FIELD BESTAND AS INTEGER
   FIELD GT AS CHARACTER
   FIELD SLENH AS DECIMAL
   FIELD MHOJD AS INTEGER
   FIELD HA AS DECIMAL
   FIELD TABVARD AS INTEGER
   FIELD VOLUTR AS DECIMAL   
   INDEX BESTAND BETECKNING MARKNR BESTAND.   

DEFINE TEMP-TABLE vva2                                 
   FIELD MARKNR LIKE MARKAGARE.MARKNR 
   FIELD VARDNR LIKE VARDERING.VARDNR  
   FIELD BETECKNING LIKE VOLSKOG.BETECKNING
   FIELD DIAM LIKE VOLSKOG.DIAM    
   FIELD BANT LIKE VOLSKOG.BANT
   FIELD BHKL LIKE VOLSKOG.BHKL 
   FIELD BKR LIKE VOLSKOG.BKR 
   FIELD BM3 LIKE VOLSKOG.BM3      
   FIELD GANT LIKE VOLSKOG.GANT
   FIELD GHKL LIKE VOLSKOG.GHKL
   FIELD GKR LIKE VOLSKOG.GKR
   FIELD GM3 LIKE VOLSKOG.GM3
   FIELD TANT LIKE VOLSKOG.TANT
   FIELD THKL LIKE VOLSKOG.THKL
   FIELD TKR LIKE VOLSKOG.TKR
   FIELD TM3 LIKE VOLSKOG.TM3  
   FIELD OANT LIKE VOLSKOG.OANT
   FIELD OHKL LIKE VOLSKOG.OHKL
   FIELD OKORR LIKE VOLSKOG.OKORR
   FIELD OM3 LIKE VOLSKOG.OM3
   FIELD OKR LIKE VOLSKOG.OKR  
   FIELD TRAD AS CHARACTER FORMAT "X(8)"
   INDEX MARKNR IS PRIMARY MARKNR ASCENDING.         
DEFINE TEMP-TABLE suskog         
   FIELD MARKNR LIKE MARKAGARE.MARKNR 
   FIELD BETECKNING LIKE FASTIGHET.BETECKNING
   FIELD MARKTYP LIKE SKOGVARD.MARKTYP     
   FIELD KRONOR LIKE SKOGVARD.KRONOR
   FIELD TOTKR LIKE SKOGVARD.KRONOR
   FIELD HA LIKE SKOGVARD.HA
   INDEX MARKNR IS PRIMARY MARKNR ASCENDING.    
DEFINE TEMP-TABLE suskog2        
   FIELD MARKNR LIKE MARKAGARE.MARKNR 
   FIELD BETECKNING LIKE FASTIGHET.BETECKNING
   FIELD MARKTYP LIKE SKOGVARD.MARKTYP     
   FIELD KRONOR LIKE SKOGVARD.KRONOR
   FIELD TOTKR LIKE SKOGVARD.KRONOR
   FIELD HA LIKE SKOGVARD.HA
   FIELD FASTPRIS LIKE SKOGVARD.FASTPRIS
   INDEX MARKNR IS PRIMARY MARKNR ASCENDING.    

DEFINE TEMP-TABLE suvol         
   FIELD MARKNR LIKE MARKAGARE.MARKNR 
   FIELD VARDNR LIKE VARDERING.VARDNR  
   FIELD BETECKNING LIKE FASTIGHET.BETECKNING
   FIELD BANT LIKE VOLSKOG.BANT     
   FIELD BKR LIKE VOLSKOG.BKR    
   FIELD BM3 LIKE VOLSKOG.BM3 
   FIELD TANT LIKE VOLSKOG.BANT     
   FIELD TKR LIKE VOLSKOG.BKR    
   FIELD TM3 LIKE VOLSKOG.BM3 
   FIELD GANT LIKE VOLSKOG.BANT     
   FIELD GKR LIKE VOLSKOG.BKR    
   FIELD GM3 LIKE VOLSKOG.BM3 
   FIELD OANT LIKE VOLSKOG.BANT     
   FIELD OKR LIKE VOLSKOG.BKR    
   FIELD OM3 LIKE VOLSKOG.BM3 
   FIELD DIAM LIKE VOLSKOG.DIAM 
   FIELD TRAD AS CHARACTER FORMAT "X(8)"
   INDEX MARKNR IS PRIMARY MARKNR ASCENDING.   
DEFINE TEMP-TABLE suvol1         
   FIELD MARKNR LIKE MARKAGARE.MARKNR 
   FIELD VARDNR LIKE VARDERING.VARDNR  
   FIELD BETECKNING LIKE FASTIGHET.BETECKNING
   FIELD ANTAL LIKE VOLSKOG.BANT     
   FIELD KRONOR LIKE VOLSKOG.BKR    
   FIELD M3 LIKE VOLSKOG.BM3 
   FIELD FORFAK LIKE FASTVARD.FORDYRAD
   FIELD FORKR AS INTEGER   
   INDEX MARKNR IS PRIMARY MARKNR ASCENDING.                  
DEFINE TEMP-TABLE suaker         
   FIELD MARKNR LIKE MARKAGARE.MARKNR 
   FIELD BETECKNING LIKE FASTIGHET.BETECKNING
   FIELD PLUS AS LOGICAL 
   FIELD FASTPRIS LIKE AKERVARD.FASTPRIS   
   FIELD KRONOR LIKE AKERVARD.KRONOR     
   FIELD L5 LIKE AKERVARD.L5   
   INDEX MARKNR IS PRIMARY MARKNR ASCENDING. 
DEFINE TEMP-TABLE suaker2         
   FIELD MARKNR LIKE MARKAGARE.MARKNR 
   FIELD BETECKNING LIKE FASTIGHET.BETECKNING
   FIELD PLUS AS LOGICAL     
   FIELD FASTPRIS LIKE AKERVARD.FASTPRIS
   FIELD KRONOR LIKE AKERVARD.KRONOR     
   FIELD L5 LIKE AKERVARD.L5
   FIELD STOLPNR LIKE AKERVARD.STOLPNR
   INDEX MARKNR IS PRIMARY MARKNR ASCENDING.       
DEFINE TEMP-TABLE sukab         
   FIELD MARKNR LIKE MARKAGARE.MARKNR 
   FIELD BETECKNING LIKE FASTIGHET.BETECKNING
   FIELD PLUS AS LOGICAL     
   FIELD KRONOR LIKE AKERKAB.KRONOR     
   FIELD FASTPRIS LIKE AKERKAB.FASTPRIS
   FIELD KRDEC AS DECIMAL
   INDEX MARKNR IS PRIMARY MARKNR ASCENDING.
DEFINE TEMP-TABLE sukab2         
   FIELD MARKNR LIKE MARKAGARE.MARKNR 
   FIELD BETECKNING LIKE FASTIGHET.BETECKNING
   FIELD PLUS AS LOGICAL     
   FIELD KRONOR LIKE AKERKAB.KRONOR     
   FIELD FASTPRIS LIKE AKERKAB.FASTPRIS
   FIELD KRDEC AS DECIMAL
   INDEX MARKNR IS PRIMARY MARKNR ASCENDING.   
DEFINE TEMP-TABLE sumvard         
   FIELD MARKNR LIKE MARKAGARE.MARKNR 
   FIELD BETECKNING LIKE FASTIGHET.BETECKNING       
   FIELD KRONOR LIKE AKERKAB.KRONOR     
   INDEX MARKNR IS PRIMARY MARKNR ASCENDING.      
DEFINE TEMP-TABLE fastaga         
   FIELD MARKNR AS INTEGER
   FIELD MARKAGARE AS CHARACTER
   FIELD PERSONNUMMER AS CHARACTER     
   INDEX MARKNR IS PRIMARY MARKNR ASCENDING.      

DEFINE BUFFER subuff FOR vva2.

DEFINE  VARIABLE TOG_ALLAMA AS LOGICAL INITIAL no 
     LABEL "ALLA MARKÄGARE":L 
     VIEW-AS TOGGLE-BOX
     SIZE 24.25 BY 1 NO-UNDO.
{TIDUTTTNEW.I}

DEFINE TEMP-TABLE uppfoltemp   
   FIELD FORETAG LIKE FORETAG.FORETAG
   FIELD ANVANDARE LIKE ANVANDARE.ANVANDARE   
   FIELD ALLAMA AS LOGICAL
   FIELD VALVARD AS CHARACTER
   FIELD FORSTA AS LOGICAL
   FIELD STAMP AS LOGICAL.      
{MARKVAL.I}        
{SUMTEMP.I}
{MAGA.I}

DEFINE BUFFER magabuff FOR maga.   
DEFINE BUFFER akebuff FOR akekab.
DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.
{EXTRADATA.I}

   DEFINE VARIABLE valvard AS CHARACTER NO-UNDO.
   DEFINE VARIABLE fbeteckn AS CHARACTER NO-UNDO.
   DEFINE VARIABLE markarec AS RECID NO-UNDO.
   DEFINE VARIABLE al1namn AS CHARACTER NO-UNDO.
   DEFINE VARIABLE al1persnr AS CHARACTER NO-UNDO.
   DEFINE VARIABLE froterb  AS INTEGER NO-UNDO.
   DEFINE VARIABLE sumfrotpa AS INTEGER NO-UNDO.
   DEFINE VARIABLE sumfrotpaexp  AS INTEGER NO-UNDO.
   DEFINE VARIABLE sumfrotpaok  AS INTEGER NO-UNDO.
   

RUN EXTRADATAHMT.P PERSISTENT SET edataapph.      
FIND FIRST FORETAG NO-LOCK NO-ERROR.
Guru.Konstanter:globforetag = FORETAG.FORETAG.

/* Koppling AKERKAB AKERVARD
   AKERKAB har ingen BENAMNING. Sparas istället på AKERVARD
   Fastpris = true FIND FIRST AKERVARD WHERE AKERVARD.VARDNR = AKERKAB.VARDNR  AND AKERVARD.BETECKNING = AKERKAB.BETECKNING AND AKERVARD.L5 = AKERKAB.L1 NO-LOCK NO-ERROR. 
   Fastpris = false  FIND FIRST AKERVARD WHERE AKERVARD.VARDNR = AKERKAB.VARDNR  AND AKERVARD.BETECKNING = AKERKAB.BETECKNING AND AKERVARD.L5 = AKERKAB.KRONOR NO-LOCK NO-ERROR.

   AKERVARD sparar både Trafo/ksk och åker
   Åker  L5 = 0  använd L1  L2,L3
   Trafo L5 = 1  L4 = 0   L1 = antal L2 = pris/st 
   Ksk   L5 = 1  L4 = 1   L1 = antal L2 = pris/st
    
*/



PROCEDURE arrendat_UI:
   DEFINE INPUT PARAMETER beteckn AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER arendator AS CHARACTER NO-UNDO.
   arendator = "".
   FIND FIRST FASTIGHET WHERE FASTIGHET.BETECKNING = beteckn USE-INDEX FAST NO-LOCK NO-ERROR.
   IF AVAILABLE FASTIGHET THEN DO:
      IF FASTIGHET.ARRENDATOR = TRUE THEN DO:
         arendator = SUBSTRING(FASTIGHET.ANAMN,1,30).
         Guru.GlobalaVariabler:GDPRtyp = "M".
         Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + arendator.
      END.
   END.
   Guru.GlobalaVariabler:GDPRtyp = "M". 
   {GDPRLOGGCLIENT.I}
END.

PROCEDURE kommentarnat_UI:
   DEFINE INPUT PARAMETER beteckn AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER vnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER kommnatkab AS CHARACTER NO-UNDO.
   kommnatkab = "".
   
   FOR EACH AKERVARD WHERE AKERVARD.BETECKNING = beteckn AND AKERVARD.VARDNR = vnr AND AKERVARD.L5 = 1  AND AKERVARD.L4 = 0 NO-LOCK:
      IF AKERVARD.BENAMNING NE "" THEN kommnatkab = kommnatkab + TRIM(AKERVARD.BENAMNING) + " ".
   END.
END.

PROCEDURE kommentarkskap_UI:
   DEFINE INPUT PARAMETER beteckn AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER vnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER kommkskap AS CHARACTER NO-UNDO.
   kommkskap = "".
  
   FOR EACH AKERVARD WHERE AKERVARD.BETECKNING = beteckn AND AKERVARD.VARDNR = vnr AND AKERVARD.L5 = 1 AND AKERVARD.L4 = 1  NO-LOCK:
      IF AKERVARD.BENAMNING NE "" THEN kommkskap = kommkskap + TRIM(AKERVARD.BENAMNING) + " ".
   END.
END.

PROCEDURE kommentarluft_UI:
   DEFINE INPUT PARAMETER beteckn AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER vnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER kommluft AS CHARACTER NO-UNDO.
   kommluft = "".
 
   FOR EACH SKOGVARD WHERE SKOGVARD.BETECKNING = beteckn AND SKOGVARD.VARDNR = vnr  NO-LOCK:
      IF SKOGVARD.BENAMNING NE "" THEN kommluft = kommluft + TRIM(SKOGVARD.BENAMNING) + " ".
   END.
   FIND FIRST AKERVARD WHERE AKERVARD.VARDNR = vnr AND AKERVARD.BETECKNING = beteckn AND AKERVARD.L5 = 0 AND AKERVARD.STOLPNR NE 0  NO-LOCK NO-ERROR.
   IF AVAILABLE AKERVARD THEN DO:
      IF AKERVARD.BENAMNING NE "" THEN kommluft = kommluft + TRIM(AKERVARD.BENAMNING) + " ".
   END.
END.   
PROCEDURE kommentarjk_UI:
   DEFINE INPUT PARAMETER beteckn AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER vnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER kommjk AS CHARACTER NO-UNDO.
   kommjk = "".   
   
   FOR EACH AKERKAB  WHERE AKERKAB.BETECKNING = beteckn AND AKERKAB.VARDNR = vnr  NO-LOCK:
      IF AKERKAB.FASTPRIS = FALSE THEN DO: 
         FIND FIRST AKERVARD WHERE AKERVARD.VARDNR = AKERKAB.VARDNR 
         AND AKERVARD.BETECKNING = AKERKAB.BETECKNING AND AKERVARD.L5 = AKERKAB.L1 NO-LOCK NO-ERROR. 
      END.
      ELSE DO:
         FIND FIRST AKERVARD WHERE AKERVARD.VARDNR = AKERKAB.VARDNR 
         AND AKERVARD.BETECKNING = AKERKAB.BETECKNING AND AKERVARD.L5 = AKERKAB.KRONOR NO-LOCK NO-ERROR.               
      END.
      IF AVAILABLE AKERVARD THEN DO:  
         IF AKERVARD.BENAMNING NE "" THEN kommjk = kommjk + TRIM(AKERVARD.BENAMNING) + " ".
      END.
   END.   
   
END.
PROCEDURE maka_UI:
   DEFINE INPUT PARAMETER TABLE FOR markval.
   DEFINE OUTPUT PARAMETER TABLE FOR marag.
   IF NOT VALID-HANDLE(edataapph) THEN DO:
      RUN EXTRADATAHMT.P PERSISTENT SET edataapph.                           
   END.
   FOR EACH markval:
      FIND FIRST MARKAGARE WHERE MARKAGARE.MARKNR = markval.MARKNR NO-LOCK NO-ERROR.   
      CREATE marag.
      BUFFER-COPY markval TO marag.
      Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + STRING(MARKAGARE.MARKNR).
      IF marag.PNR2 BEGINS "000" THEN.
      ELSE DO:
         marag.MARKAGARE = MARKAGARE.MARKAGARE.
         marag.PNR2 = "0000000000".
         CREATE mahj.
         BUFFER-COPY marag TO mahj.
         EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
         CREATE inextradatatemp.          
         ASSIGN
         inextradatatemp.PROGRAM = "MARKAG"                   
         inextradatatemp.HUVUDINT = MARKAGARE.MARKNR.                    
         RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
         FIND FIRST extradatatemp NO-LOCK NO-ERROR.
         IF AVAILABLE extradatatemp THEN DO:      
            ASSIGN       
            mahj.MARKAGARE = extradatatemp.SOKCHAR[3]
            mahj.PERSONNUMMER = markval.PNR2
            mahj.PNR2 = "0000000000".
         END. 
      END.
      FIND FIRST FASTIGHET WHERE FASTIGHET.BETECKNING = markval.BETECKNING 
      USE-INDEX FAST NO-LOCK NO-ERROR.
      ASSIGN marag.KOMMUN = FASTIGHET.KOMMUN 
      marag.SOCKEN = FASTIGHET.SOCKEN
      marag.PAKER = FASTIGHET.PAKER
      marag.VAKER = FASTIGHET.VAKER.       
   END.
   Guru.GlobalaVariabler:GDPRtyp = "M".
   {GDPRLOGGCLIENT.I}
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph.        
   
END.

PROCEDURE basuppg_UI:
   DEFINE OUTPUT PARAMETER minimi AS INTEGER NO-UNDO.
   /*används ej längre 20220118 Lena
   FIND FIRST MARKDIV NO-LOCK NO-ERROR.
   minimi = MARKDIV.BASBELOPP * 3.*/
END.

PROCEDURE vardnrnatag_UI:
   DEFINE INPUT PARAMETER vnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER vardnrnatag AS CHARACTER NO-UNDO.
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = vnr USE-INDEX VARDNR  NO-LOCK NO-ERROR.
   IF AVAILABLE VARDERING  THEN DO:   
      vardnrnatag = VARDERING.NATAGARE.
   END.   
END.

PROCEDURE vartal_UI:
   DEFINE INPUT PARAMETER vnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER vartal AS INTEGER  NO-UNDO.
   
   IF NOT VALID-HANDLE(edataapph) THEN DO:
      RUN EXTRADATAHMT.P PERSISTENT SET edataapph.                           
   END.
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = vnr USE-INDEX VARDNR
   NO-LOCK NO-ERROR.   
      
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR.
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "VARDNRARTAL"                   
   inextradatatemp.HUVUDINT = vnr.                    
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:      
      ASSIGN
      vartal = extradatatemp.SOKINT[1].      
   END.
   ELSE vartal = YEAR(TODAY).   
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR.
   EMPTY TEMP-TABLE extradatatemp NO-ERROR.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph.        
   edataapph = ?.         
END.

PROCEDURE vardman_UI:
   DEFINE INPUT PARAMETER vnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER vardman AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER vardtel AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER kabersatt AS DECIMAL NO-UNDO.
   IF NOT VALID-HANDLE(edataapph) THEN DO:
      RUN EXTRADATAHMT.P PERSISTENT SET edataapph.                           
   END.
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = vnr USE-INDEX VARDNR
   NO-LOCK NO-ERROR.   
   FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = VARDERING.VARDANV USE-INDEX
   PERSONALKOD NO-LOCK NO-ERROR.
   IF AVAILABLE PERSONALTAB THEN DO:
       Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + PERSONALTAB.PERSONALKOD.
      vardman = CAPS(SUBSTRING(PERSONALTAB.FORNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.FORNAMN,2)) + " " + CAPS(SUBSTRING(PERSONALTAB.EFTERNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.EFTERNAMN,2)).
      IF PERSONALTAB.TELEFON NE "" THEN vardtel = PERSONALTAB.TELEFON.
      ELSE IF PERSONALTAB.MOBILTEL NE "" THEN vardtel = PERSONALTAB.MOBILTEL.
      ELSE vardtel = "".
   END.
   ELSE DO:
      /*DUMMY*/
      FIND FIRST VARDERING WHERE VARDERING.VARDNR = vnr USE-INDEX VARDNR NO-LOCK NO-ERROR.
   END.         
   
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR.
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "VARDNRARTAL"                   
   inextradatatemp.HUVUDINT = vnr.                    
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:      
      ASSIGN
      vardartal = extradatatemp.SOKINT[1].      
   END.
   ELSE vardartal = YEAR(TODAY).   
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR.
   EMPTY TEMP-TABLE extradatatemp NO-ERROR.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph.        
   edataapph = ?.
     
   /*oktober 1995 = 256.9
   föregående års oktober =  kopindex
   starters per meter = 3.10 */

   nypolicykab = FALSE.         
   IF vardartal GE 2020 AND Guru.Konstanter:varforetypval[58] = 1 THEN nypolicykab = TRUE.
   IF Guru.Konstanter:globforetag = "POWE" OR Guru.Konstanter:globforetag = "PFBK" OR Guru.Konstanter:globforetag = "KEWA" OR Guru.Konstanter:globforetag = "GULL" THEN DO:
      nypolicykab = FALSE.
      FIND FIRST VARDERING WHERE VARDERING.VARDNR = vnr NO-LOCK NO-ERROR.
      IF AVAILABLE VARDERING THEN DO:
         IF VARDERING.NATAGARE BEGINS "Ellevio" THEN nypolicykab = ?. /*2020   4,10 VARKEN ELLER*/
         IF VARDERING.NATAGARE = "Dala Energi" THEN nypolicykab = FALSE.  
         IF VARDERING.NATAGARE BEGINS "Vattenfall" THEN nypolicykab = TRUE.                            
      END.
   END.   
      
   RUN kopindex_UI (INPUT  (vardartal - 1), OUTPUT kopindex, OUTPUT bbelopp ).
   
   IF nypolicykab = ? THEN DO:
      /*Ellevo har KPI okt 2018 = 330,42  istället för 330,72 som det står på SCB hemsida Lena 20221021*/
      nypolicykab = FALSE.    
        
      IF kopindex > 0 THEN kabersatt = 4.0 * kopindex / 330.42.
      ELSE DO:
         FIND FIRST KINDEX WHERE KINDEX.AR = 2018 AND KINDEX.MANAD = 10 USE-INDEX AR NO-LOCK NO-ERROR.   
         FIND FIRST kbuff WHERE kbuff.AR = (YEAR(TODAY)- 1) AND kbuff.MANAD = 10 USE-INDEX AR NO-LOCK NO-ERROR.     
         kabersatt = 4.0 * kbuff.VARDE / KINDEX.VARDE.
      END.            
   END.   
   ELSE IF nypolicykab = TRUE THEN DO:           
      nypolicykab = FALSE.    
      IF kopindex > 0 THEN kabersatt = 4.0 * kopindex / 330.72.
      ELSE DO:
         FIND FIRST KINDEX WHERE KINDEX.AR = 2018 AND KINDEX.MANAD = 10 USE-INDEX AR NO-LOCK NO-ERROR.   
         FIND FIRST kbuff WHERE kbuff.AR = (YEAR(TODAY)- 1) AND kbuff.MANAD = 10 USE-INDEX AR NO-LOCK NO-ERROR.     
         kabersatt = 4.0 * kbuff.VARDE / KINDEX.VARDE.
      END.
   END.
   ELSE DO:         
      IF kopindex > 0 THEN kabersatt = 3.1 * kopindex / 256.9.
      ELSE DO:
         FIND FIRST KINDEX WHERE KINDEX.AR = 1995 AND KINDEX.MANAD = 10 USE-INDEX AR NO-LOCK NO-ERROR.   
         FIND FIRST kbuff WHERE kbuff.AR = (YEAR(TODAY)- 1) AND kbuff.MANAD = 10 USE-INDEX AR NO-LOCK NO-ERROR.     
         kabersatt = 3.1 * kbuff.VARDE / KINDEX.VARDE.
      END.
   END.      
   Guru.GlobalaVariabler:GDPRtyp = "M". 
   {GDPRLOGGCLIENT.I} 
END.
PROCEDURE vardman3_UI:
   DEFINE INPUT PARAMETER vnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER vardman AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER vardtel AS CHARACTER NO-UNDO.   
   DEFINE OUTPUT PARAMETER vadress AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER vboxnr AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER vpostnr AS CHARACTER  NO-UNDO.
   DEFINE OUTPUT PARAMETER vpostadress AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER vtelefonvxl AS CHARACTER NO-UNDO.   
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = vnr USE-INDEX VARDNR
   NO-LOCK NO-ERROR.   
   FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = VARDERING.VARDANV USE-INDEX
   PERSONALKOD NO-LOCK NO-ERROR.
   IF AVAILABLE PERSONALTAB THEN DO:
      Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + PERSONALTAB.PERSONALKOD.
      vardman = CAPS(SUBSTRING(PERSONALTAB.FORNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.FORNAMN,2)) + " " + CAPS(SUBSTRING(PERSONALTAB.EFTERNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.EFTERNAMN,2)).
      IF PERSONALTAB.TELEFON NE "" THEN vardtel = PERSONALTAB.TELEFON.
      ELSE IF PERSONALTAB.MOBILTEL NE "" THEN vardtel = PERSONALTAB.MOBILTEL.
      IF  PERSONALTAB.TELEFON2 NE "" THEN vtelefonvxl = PERSONALTAB.TELEFON2.
      IF PERSONALTAB.GATUADRESS NE "" THEN vadress = PERSONALTAB.GATUADRESS.
      IF PERSONALTAB.BOXEN NE "" THEN vboxnr = PERSONALTAB.BOXEN.
      IF PERSONALTAB.POSTNUMMER NE "" THEN vpostnr = PERSONALTAB.POSTNUMMER.
      IF PERSONALTAB.POSTADRESS NE "" THEN vpostadress = PERSONALTAB.POSTADRESS.       
   END.        
   ELSE DO:
      /*DUMMY*/
      FIND FIRST VARDERING WHERE VARDERING.VARDNR = vnr USE-INDEX VARDNR NO-LOCK NO-ERROR.
   END.  
   Guru.GlobalaVariabler:GDPRtyp = "M".  
   {GDPRLOGGCLIENT.I}   
END PROCEDURE.

PROCEDURE vardman4_UI:
   DEFINE INPUT PARAMETER vnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER vardman AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER vardtel AS CHARACTER NO-UNDO.   
   
   DEFINE OUTPUT PARAMETER vepost AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER vort AS CHARACTER NO-UNDO.
   
      
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = vnr USE-INDEX VARDNR  NO-LOCK NO-ERROR.   
   vort = VARDERING.BENAMNING.
   FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = VARDERING.VARDANV USE-INDEX
   PERSONALKOD NO-LOCK NO-ERROR.
   IF AVAILABLE PERSONALTAB THEN DO:
      Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + PERSONALTAB.PERSONALKOD.
      vardman = CAPS(SUBSTRING(PERSONALTAB.FORNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.FORNAMN,2)) + " " + CAPS(SUBSTRING(PERSONALTAB.EFTERNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.EFTERNAMN,2)).
      IF PERSONALTAB.TELEFON NE "" THEN vardtel = PERSONALTAB.TELEFON.
      ELSE IF PERSONALTAB.MOBILTEL NE "" THEN vardtel = PERSONALTAB.MOBILTEL.          
      IF SUBSTRING(PERSONALTAB.PERSONSOK,20) NE "" THEN vepost =  SUBSTRING(PERSONALTAB.PERSONSOK,20).  
   END.        
   ELSE DO:
      /*DUMMY*/
      FIND FIRST VARDERING WHERE VARDERING.VARDNR = vnr USE-INDEX VARDNR NO-LOCK NO-ERROR.
   END.     
   Guru.GlobalaVariabler:GDPRtyp = "M".  
   {GDPRLOGGCLIENT.I}     
END PROCEDURE.


PROCEDURE projledup_UI:
   DEFINE INPUT PARAMETER vnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER projledf AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER projtel AS CHARACTER NO-UNDO.   
   DEFINE OUTPUT PARAMETER projepost AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER vaman AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER vatel AS CHARACTER NO-UNDO.   
   DEFINE OUTPUT PARAMETER vaepost AS CHARACTER NO-UNDO.
   
   projledf = "".
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = vnr USE-INDEX VARDNR
   NO-LOCK NO-ERROR.
   IF Guru.Konstanter:globforetag = "UMEA" THEN DO:
      /*Umeå Energi har alltid Stefan Lindgren som projektledare Lena 20221110*/
      FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = "STL" USE-INDEX  PERSONALKOD NO-LOCK NO-ERROR.
      IF AVAILABLE PERSONALTAB THEN DO:   
         projledf = CAPS(SUBSTRING(PERSONALTAB.FORNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.FORNAMN,2)) + " " + CAPS(SUBSTRING(PERSONALTAB.EFTERNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.EFTERNAMN,2)).
         projtel = PERSONALTAB.TELEFON + " " + PERSONALTAB.MOBILTEL.
         projepost =  SUBSTRING(PERSONALTAB.PERSONSOK,20).
      END.
   END.  
   FIND FIRST AOVARD  WHERE AOVARD.VARDNR = vnr USE-INDEX VARDNR NO-LOCK NO-ERROR.
   IF AVAILABLE AOVARD THEN DO:
      IF AOVARD.AONR = ?  THEN.
      ELSE IF AOVARD.AONR = ""  THEN.
      ELSE DO:           
         FIND FIRST AONRTAB WHERE AONRTAB.AONR = AOVARD.AONR AND AONRTAB.AONR = AOVARD.AONR  NO-LOCK NO-ERROR.
         IF AVAILABLE AONRTAB THEN DO:
            FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = AONRTAB.ARBANSVARIG USE-INDEX  PERSONALKOD NO-LOCK NO-ERROR.
            IF AVAILABLE PERSONALTAB THEN DO:   
               projledf = CAPS(SUBSTRING(PERSONALTAB.FORNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.FORNAMN,2)) + " " + CAPS(SUBSTRING(PERSONALTAB.EFTERNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.EFTERNAMN,2)).
               projtel = PERSONALTAB.TELEFON + " " + PERSONALTAB.MOBILTEL.
               projepost =  SUBSTRING(PERSONALTAB.PERSONSOK,20).
            END.
         END.           
      END.
   END.                          
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = vnr USE-INDEX VARDNR   NO-LOCK NO-ERROR.
   FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = VARDERING.VARDANV USE-INDEX  PERSONALKOD NO-LOCK NO-ERROR.
   IF AVAILABLE PERSONALTAB THEN DO:
      vaman = CAPS(SUBSTRING(PERSONALTAB.FORNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.FORNAMN,2)) + " " + CAPS(SUBSTRING(PERSONALTAB.EFTERNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.EFTERNAMN,2)).
      vatel = PERSONALTAB.TELEFON + " " + PERSONALTAB.MOBILTEL.
      vaepost =  SUBSTRING(PERSONALTAB.PERSONSOK,20).
   END.   
        
   Guru.GlobalaVariabler:GDPRtyp = "M".  
   {GDPRLOGGCLIENT.I}   
END PROCEDURE.


PROCEDURE vardberanv_UI:
   DEFINE INPUT PARAMETER vnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER vardanv AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER beranvin AS CHARACTER NO-UNDO.   
      
  /*RUN inbokvaluearial10_UI (INPUT "mpostadress" ,INPUT (STRING(markval.POSTNUMMER,"xxx xx") + " " + markval.POSTADRESS) ).*/
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = vnr USE-INDEX VARDNR
   NO-LOCK NO-ERROR.   
   FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = VARDERING.VARDANV USE-INDEX
   PERSONALKOD NO-LOCK NO-ERROR.
   IF AVAILABLE PERSONALTAB THEN DO:
      FIND FIRST ANVANDARE WHERE ANVANDARE.PERSONALKOD = PERSONALTAB.PERSONALKOD NO-LOCK NO-ERROR.
      IF AVAILABLE ANVANDARE  THEN DO:
         vardanv = ANVANDARE.ANVANDARE.
      END.           
   END.
   
   IF VARDERING.AONR = "" OR VARDERING.AONR = ? THEN.
   ELSE DO:
      FIND FIRST AONRTAB WHERE AONRTAB.AONR = VARDERING.AONR AND AONRTAB.DELNR = VARDERING.DELNR NO-LOCK NO-ERROR.
      IF AVAILABLE AONRTAB THEN DO:       
         FIND FIRST ANVANDARE WHERE ANVANDARE.PERSONALKOD = AONRTAB.BEREDARE NO-LOCK NO-ERROR.
         IF AVAILABLE ANVANDARE THEN DO:
            beranvin = ANVANDARE.ANVANDARE.            
         END.           
      END.
   END.         
END.
PROCEDURE berman2_UI:
   DEFINE INPUT PARAMETER vnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER berman AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER bertel AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER berepost AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER berforetag AS CHARACTER NO-UNDO.
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = vnr USE-INDEX VARDNR
   NO-LOCK NO-ERROR.   
   IF VARDERING.AONR = "" OR VARDERING.AONR = ?  THEN.
   ELSE DO:      
      FIND FIRST AONRTAB WHERE AONRTAB.AONR = VARDERING.AONR AND AONRTAB.DELNR = VARDERING.DELNR NO-LOCK NO-ERROR.
      IF AVAILABLE AONRTAB THEN DO:
         berman = AONRTAB.BEREDARE. 
       END.  
   END.   
   /*IF berman = "" THEN berman = VARDERING.VARDANV.*/
   FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = berman USE-INDEX
   PERSONALKOD NO-LOCK NO-ERROR.
   IF AVAILABLE PERSONALTAB THEN DO:
      Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + PERSONALTAB.PERSONALKOD.
      berman = CAPS(SUBSTRING(PERSONALTAB.FORNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.FORNAMN,2)) + " " + CAPS(SUBSTRING(PERSONALTAB.EFTERNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.EFTERNAMN,2)).
      IF PERSONALTAB.MOBILTEL NE "" THEN bertel = PERSONALTAB.MOBILTEL.
      ELSE IF PERSONALTAB.TELEFON NE "" THEN bertel = PERSONALTAB.TELEFON.      
      ELSE bertel = "".
      berepost =  SUBSTRING(PERSONALTAB.PERSONSOK,20).
   END.           
   
   FIND FIRST FORETAG NO-LOCK NO-ERROR.
   berforetag = FORETAG.ATRHOME.
   Guru.GlobalaVariabler:GDPRtyp = "M".     
   {GDPRLOGGCLIENT.I}        
END.
PROCEDURE berman3_UI:
   DEFINE INPUT PARAMETER vnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER berman AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER bertel AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER berepost AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER bermane AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER bertele AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER bereposte AS CHARACTER NO-UNDO.
   
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = vnr USE-INDEX VARDNR
   NO-LOCK NO-ERROR.   
   IF VARDERING.AONR = "" OR VARDERING.AONR = ? THEN.
   ELSE DO:
      FIND FIRST AONRTAB WHERE AONRTAB.AONR = VARDERING.AONR AND AONRTAB.DELNR = VARDERING.DELNR NO-LOCK NO-ERROR.
      IF AVAILABLE AONRTAB THEN DO:                    
         FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = AONRTAB.BEREDARE USE-INDEX  PERSONALKOD NO-LOCK NO-ERROR.
         IF AVAILABLE PERSONALTAB THEN DO:
            Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + PERSONALTAB.PERSONALKOD.
            berman = CAPS(SUBSTRING(PERSONALTAB.FORNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.FORNAMN,2)) + " " + CAPS(SUBSTRING(PERSONALTAB.EFTERNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.EFTERNAMN,2)).
            IF PERSONALTAB.MOBILTEL NE "" THEN bertel = PERSONALTAB.MOBILTEL.
            ELSE IF PERSONALTAB.TELEFON NE "" THEN bertel = PERSONALTAB.TELEFON.      
            ELSE bertel = "".
            berepost =  SUBSTRING(PERSONALTAB.PERSONSOK,20).
         END.            
         IF AONRTAB.BEREDARE NE AONRTAB.ARBANSVARIG THEN DO:
            FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = AONRTAB.ARBANSVARIG USE-INDEX
            PERSONALKOD NO-LOCK NO-ERROR.
            IF AVAILABLE PERSONALTAB THEN DO:
               Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + PERSONALTAB.PERSONALKOD.
               bermane = CAPS(SUBSTRING(PERSONALTAB.FORNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.FORNAMN,2)) + " " + CAPS(SUBSTRING(PERSONALTAB.EFTERNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.EFTERNAMN,2)).
               IF PERSONALTAB.MOBILTEL NE "" THEN bertele = PERSONALTAB.MOBILTEL.
               ELSE IF PERSONALTAB.TELEFON NE "" THEN bertele = PERSONALTAB.TELEFON.      
               ELSE bertele = "".
               bereposte =  SUBSTRING(PERSONALTAB.PERSONSOK,20).
            END.
         END.
      END.
   END.  
   Guru.GlobalaVariabler:GDPRtyp = "M".     
   {GDPRLOGGCLIENT.I}                
END.

PROCEDURE fordyrad_UI:   
   DEFINE INPUT PARAMETER vnr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER fbet AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER fdyr AS INTEGER NO-UNDO.
   FIND FIRST FASTVARD WHERE FASTVARD.VARDNR = vnr AND FASTVARD.BETECKNING = fbet NO-LOCK NO-ERROR.   
   IF AVAILABLE FASTVARD THEN DO:
      fdyr = FASTVARD.FORDYRAD.
   END.
   ELSE fdyr = 0.
END.



PROCEDURE tuppgREV_UI:      
   DEFINE INPUT PARAMETER fbeteckn AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER vman AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER vadress AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER vpadress AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER vtelef AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER telebost AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER mobil AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER epost AS CHARACTER NO-UNDO.
   IF NOT VALID-HANDLE(edataapph) THEN DO:
      RUN EXTRADATAHMT.P PERSISTENT SET edataapph.                           
   END.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "FASTLOPNR"                   
   inextradatatemp.HUVUDCH = fbeteckn.                    
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:      
      IF extradatatemp.SOKINT[1] NE 0 THEN DO:
         FIND FIRST MARKAGARE WHERE MARKAGARE.MARKNR = extradatatemp.SOKINT[1] USE-INDEX MARKNR NO-LOCK NO-ERROR.    
         IF AVAILABLE MARKAGARE THEN DO:
            Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + STRING(MARKAGARE.MARKNR).
            vman = MARKAGARE.MARKAGARE.
            
            vadress = MARKAGARE.GATUADRESS.
            vpadress = (STRING(MARKAGARE.POSTNUMMER,"xxx xx") + " " + MARKAGARE.POSTADRESS).
            vtelef = MARKAGARE.TELEFON .
            EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
            EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
            CREATE inextradatatemp.          
            ASSIGN
            inextradatatemp.PROGRAM = "MARKAG"                   
            inextradatatemp.HUVUDINT = MARKAGARE.MARKNR.                    
            RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
            FIND FIRST extradatatemp NO-LOCK NO-ERROR.
            IF AVAILABLE extradatatemp THEN DO:      
               ASSIGN
               mobil = extradatatemp.SOKCHAR[1].
               epost = extradatatemp.SOKCHAR[2].            
            END.
         END.
      END.
   END.          
   
   Guru.GlobalaVariabler:GDPRtyp = "M". 
   {GDPRLOGGCLIENT.I}
END PROCEDURE.         

PROCEDURE tuppg_UI:      
   DEFINE INPUT PARAMETER mnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER telearb AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER telebost AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER mobil AS CHARACTER NO-UNDO.
   FIND FIRST MARKAGARE WHERE MARKAGARE.MARKNR = mnr USE-INDEX MARKNR NO-LOCK NO-ERROR.    
   IF AVAILABLE MARKAGARE THEN DO:
      Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + STRING(MARKAGARE.MARKNR).
      IF NOT VALID-HANDLE(edataapph) THEN DO:
         RUN EXTRADATAHMT.P PERSISTENT SET edataapph.                           
      END.
      ASSIGN         
      telebost = MARKAGARE.TELEFON 
      telearb = MARKAGARE.TELEFON2.
      EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
      EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
      CREATE inextradatatemp.          
      ASSIGN
      inextradatatemp.PROGRAM = "MARKAG"                   
      inextradatatemp.HUVUDINT = MARKAGARE.MARKNR.                    
      RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
      FIND FIRST extradatatemp NO-LOCK NO-ERROR.
      IF AVAILABLE extradatatemp THEN DO:      
         ASSIGN
         mobil = extradatatemp.SOKCHAR[1].
                     
      END. 
   END.   
   Guru.GlobalaVariabler:GDPRtyp = "M". 
   {GDPRLOGGCLIENT.I}
END.
PROCEDURE tuppg2_UI:      
   DEFINE INPUT PARAMETER mnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER telearb AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER telebost AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER mobil AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER epost AS CHARACTER NO-UNDO.
   IF NOT VALID-HANDLE(edataapph) THEN DO:
      RUN EXTRADATAHMT.P PERSISTENT SET edataapph.                           
   END.
   FIND FIRST MARKAGARE WHERE MARKAGARE.MARKNR = mnr USE-INDEX MARKNR NO-LOCK NO-ERROR.    
   IF AVAILABLE MARKAGARE THEN DO:
      Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + STRING(MARKAGARE.MARKNR).
   
      ASSIGN         
      telebost = MARKAGARE.TELEFON 
      telearb = MARKAGARE.TELEFON2.
      EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
      EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
      CREATE inextradatatemp.          
      ASSIGN
      inextradatatemp.PROGRAM = "MARKAG"                   
      inextradatatemp.HUVUDINT = MARKAGARE.MARKNR.                    
      RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
      FIND FIRST extradatatemp NO-LOCK NO-ERROR.
      IF AVAILABLE extradatatemp THEN DO:      
         ASSIGN
         mobil = extradatatemp.SOKCHAR[1].            
         epost = extradatatemp.SOKCHAR[2].            
      END. 
   END. 
   Guru.GlobalaVariabler:GDPRtyp = "M". 
   {GDPRLOGGCLIENT.I}  
END PROCEDURE.



PROCEDURE ktakt_UI:      
   DEFINE INPUT PARAMETER fbet AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER mnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER kontpers AS CHARACTER NO-UNDO.        
   FIND FIRST MARKAGARE WHERE  MARKAGARE.MARKNR = mnr NO-LOCK NO-ERROR.
   IF AVAILABLE MARKAGARE THEN DO:
      kontpers = MARKAGARE.MARKAGARE.
   END.      
END.

PROCEDURE varderingsprotokoll_UI.
   DEFINE INPUT PARAMETER vlvard AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER fbteckn AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER mkarec AS RECID NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR uppfoltemp.
   DEFINE INPUT PARAMETER TABLE FOR markval.
   DEFINE INPUT PARAMETER TABLE FOR maga.
   FOR EACH mval WHERE NO-LOCK:
      Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + STRING(mval.MARKNR).
   END.
   DEFINE OUTPUT PARAMETER TABLE FOR tidut.   
   ASSIGN
   valvard = vlvard 
   fbeteckn = fbteckn
   markarec = mkarec.
   tillfskada = FALSE.
   FIND FIRST uppfoltemp NO-LOCK NO-ERROR.
   ASSIGN
   Guru.Konstanter:globforetag = uppfoltemp.FORETAG          
   TOG_ALLAMA = uppfoltemp.ALLAMA
   valvard = uppfoltemp.VALVARD
   samman = uppfoltemp.FORSTA
   stamp = uppfoltemp.STAMP
   vaghallare = uppfoltemp.ANVANDARE.
   Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + uppfoltemp.ANVANDARE.
   IF Guru.Konstanter:globforetag = "Cgran" THEN stamp = uppfoltemp.STAMP.
   ELSE DO:
      ASSIGN
      stamp = FALSE
      kontaktp = uppfoltemp.STAMP.
      IF kontaktp = TRUE THEN DO:
         FIND FIRST markval NO-ERROR.      
         markval.PROCENT = 100.
      END.
   END.
   RUN mval_UI.
   EMPTY TEMP-TABLE sumtemp NO-ERROR. 
   EMPTY TEMP-TABLE svard  NO-ERROR. 
   EMPTY TEMP-TABLE vvard NO-ERROR. 
   EMPTY TEMP-TABLE akevard NO-ERROR. 
   EMPTY TEMP-TABLE akekab NO-ERROR. 
   EMPTY TEMP-TABLE ockvol NO-ERROR. 
   IF vaghallare = "JA" THEN markvagh = "Väghållare:".
   ELSE markvagh = "Markägare:".
   IF vaghallare = "JA" THEN markvagh2 = "väghållarens".
   ELSE markvagh2 = "markägarens".
   IF vaghallare = "JA" THEN markvagh3 = "Väghållarens".
   ELSE markvagh3 = "Markägarens".
   IF vaghallare = "JA" THEN markvagh4 = "VÄGHÅLLARE".
   ELSE markvagh4 = "MARKÄGARE".
        
   EMPTY TEMP-TABLE suvol1 NO-ERROR. 
   RUN skaptabell_UI.
   
   EMPTY TEMP-TABLE tidut NO-ERROR.    
   IF Guru.Konstanter:globforetag = "UMEA" OR Guru.Konstanter:globforetag = "UMBR" THEN DO:
      str=                                                                    
   "_______________________________________________________________________________________".
   END.
   ELSE DO:
   str=                                                                    
   "________________________________________________________________________________________".
   END.
   RUN skapain_UI.
   RUN protokoll_UI.    
   FIND LAST tidut NO-ERROR.
   IF AVAILABLE tidut THEN DO:
      IF SUBSTRING(tidut.UT,132,1) = "$" THEN DO:
         DELETE tidut.
      END.
   END.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph.      
   edataapph = ?.
   Guru.GlobalaVariabler:GDPRtyp = "M". 
   {GDPRLOGGCLIENT.I}  
END PROCEDURE.

PROCEDURE vptillfsk_UI.
   DEFINE INPUT PARAMETER vlvard AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER fbteckn AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER mkarec AS RECID NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR uppfoltemp.
   DEFINE INPUT PARAMETER TABLE FOR markval.
   DEFINE INPUT PARAMETER TABLE FOR maga.
   DEFINE OUTPUT PARAMETER TABLE FOR tidut.
   FOR EACH mval WHERE NO-LOCK:
      Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + STRING(mval.MARKNR).
   END.   
   
   ASSIGN
   valvard = vlvard 
   fbeteckn = fbteckn
   markarec = mkarec.
   tillfskada = TRUE.
   
   FIND FIRST uppfoltemp NO-LOCK NO-ERROR.
   ASSIGN
   Guru.Konstanter:globforetag = uppfoltemp.FORETAG          
   TOG_ALLAMA = uppfoltemp.ALLAMA
   valvard = uppfoltemp.VALVARD
   samman = uppfoltemp.FORSTA
   stamp = uppfoltemp.STAMP
   vaghallare = uppfoltemp.ANVANDARE.   
   IF Guru.Konstanter:globforetag = "Cgran" THEN stamp = uppfoltemp.STAMP.
   ELSE DO:
      ASSIGN
      stamp = FALSE
      kontaktp = uppfoltemp.STAMP.
      IF kontaktp = TRUE THEN DO:
         FIND FIRST markval NO-ERROR.      
         markval.PROCENT = 100.
      END.
   END.
   RUN mval_UI.
   EMPTY TEMP-TABLE sumtemp NO-ERROR. 
   EMPTY TEMP-TABLE svard  NO-ERROR. 
   EMPTY TEMP-TABLE vvard NO-ERROR. 
   EMPTY TEMP-TABLE akevard NO-ERROR. 
   EMPTY TEMP-TABLE akekab NO-ERROR. 
   EMPTY TEMP-TABLE ockvol NO-ERROR. 
   IF vaghallare = "JA" THEN markvagh = "Väghållare:".
   ELSE markvagh = "Markägare:".
   IF vaghallare = "JA" THEN markvagh2 = "väghållarens".
   ELSE markvagh2 = "markägarens".
   IF vaghallare = "JA" THEN markvagh3 = "Väghållarens".
   ELSE markvagh3 = "Markägarens".
   IF vaghallare = "JA" THEN markvagh4 = "VÄGHÅLLARE".
   ELSE markvagh4 = "MARKÄGARE".
        
   EMPTY TEMP-TABLE suvol1 NO-ERROR. 
   RUN skaptabellts_UI.
   
   EMPTY TEMP-TABLE tidut NO-ERROR.    
   IF Guru.Konstanter:globforetag = "UMEA" OR Guru.Konstanter:globforetag = "UMBR" THEN DO:
      str=                                                                    
   "_______________________________________________________________________________________".
   END.
   ELSE DO:
   str=                                                                    
   "________________________________________________________________________________________".
   END.
   RUN skapain_UI.
   RUN protokoll_UI.    
   FIND LAST tidut NO-ERROR.
   IF AVAILABLE tidut THEN DO:
      IF SUBSTRING(tidut.UT,132,1) = "$" THEN DO:
         DELETE tidut.
      END.
   END.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph.      
   edataapph = ?.
   Guru.GlobalaVariabler:GDPRtyp = "M". 
   {GDPRLOGGCLIENT.I}
END PROCEDURE.


PROCEDURE markupp_UI.
   DEFINE INPUT PARAMETER vlvard AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER fbteckn AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER mkarec AS RECID NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR uppfoltemp.
   DEFINE INPUT PARAMETER TABLE FOR markval.
   DEFINE INPUT PARAMETER TABLE FOR maga.   
   DEFINE OUTPUT PARAMETER TABLE FOR sumtemp.
   FOR EACH mval WHERE NO-LOCK:
      Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + STRING(mval.MARKNR).
   END.   
   
   tillfskada = FALSE.
   ASSIGN
   valvard = vlvard 
   fbeteckn = fbteckn
   markarec = mkarec.
   
   FIND FIRST uppfoltemp NO-LOCK NO-ERROR.
   ASSIGN
   Guru.Konstanter:globforetag = uppfoltemp.FORETAG    
   TOG_ALLAMA = uppfoltemp.ALLAMA
   valvard = uppfoltemp.VALVARD
   samman = uppfoltemp.FORSTA
   stamp = uppfoltemp.STAMP
   vaghallare = uppfoltemp.ANVANDARE.
   IF Guru.Konstanter:globforetag = "Cgran" THEN stamp = uppfoltemp.STAMP.
   ELSE DO:
      ASSIGN
      stamp = FALSE
      kontaktp = uppfoltemp.STAMP.
      IF kontaktp = TRUE THEN DO:
         FIND FIRST markval NO-ERROR.      
         markval.PROCENT = 100.
      END.
   END.
   RUN mval_UI.
   EMPTY TEMP-TABLE sumtemp NO-ERROR. 
   EMPTY TEMP-TABLE svard  NO-ERROR. 
   EMPTY TEMP-TABLE vvard NO-ERROR. 
   EMPTY TEMP-TABLE akevard NO-ERROR. 
   EMPTY TEMP-TABLE akekab NO-ERROR.    
   EMPTY TEMP-TABLE ockvol NO-ERROR. 
   IF vaghallare = "JA" THEN markvagh = "Väghållare:".
   ELSE markvagh = "Markägare:".
   IF vaghallare = "JA" THEN markvagh2 = "väghållarens".
   ELSE markvagh2 = "markägarens".
   IF vaghallare = "JA" THEN markvagh3 = "Väghållarens".
   ELSE markvagh3 = "Markägarens".
   IF vaghallare = "JA" THEN markvagh4 = "VÄGHÅLLARE".
   ELSE markvagh4 = "MARKÄGARE".
        
   RUN skaptabell_UI.
   
   EMPTY TEMP-TABLE tidut NO-ERROR. 
   
   IF Guru.Konstanter:globforetag = "UMEA" OR Guru.Konstanter:globforetag = "UMBR" THEN DO:
      str=                                                                    
   "_______________________________________________________________________________________".
   END.
   ELSE DO:
   str=                                                                    
   "________________________________________________________________________________________".
   END.
   RUN skapain_UI.
   RUN protokoll_UI.    
   FIND LAST tidut NO-ERROR.
   IF AVAILABLE tidut THEN DO:
      IF SUBSTRING(tidut.UT,132,1) = "$" THEN DO:
         DELETE tidut.
      END.
   END.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph.      
edataapph = ?.
   Guru.GlobalaVariabler:GDPRtyp = "M". 
   {GDPRLOGGCLIENT.I}
END PROCEDURE.

PROCEDURE vpVSAB_UI.
   DEFINE INPUT PARAMETER vlvard AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER fbteckn AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER mkarec AS RECID NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR uppfoltemp.
   DEFINE INPUT PARAMETER TABLE FOR markval.
   DEFINE INPUT PARAMETER TABLE FOR maga.
   /*DEFINE OUTPUT PARAMETER TABLE FOR tidut.    */
   DEFINE OUTPUT PARAMETER TABLE FOR akevard.
   DEFINE OUTPUT PARAMETER TABLE FOR svard.
   DEFINE OUTPUT PARAMETER TABLE FOR akekab.
   DEFINE OUTPUT PARAMETER TABLE FOR sumtemp.
   DEFINE OUTPUT PARAMETER alnamn AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER alpersnr AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR fastaga.
   FOR EACH mval WHERE NO-LOCK:
      Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + STRING(mval.MARKNR).
   END.   
 
   ASSIGN
   valvard = vlvard 
   fbeteckn = fbteckn
   markarec = mkarec.
   tillfskada = FALSE.
   FIND FIRST uppfoltemp NO-LOCK NO-ERROR.
   ASSIGN
   Guru.Konstanter:globforetag = uppfoltemp.FORETAG 
   /*globanv = uppfoltemp.ANVANDARE */
   TOG_ALLAMA = uppfoltemp.ALLAMA
   valvard = uppfoltemp.VALVARD
   samman = uppfoltemp.FORSTA
   stamp = uppfoltemp.STAMP
   vaghallare = uppfoltemp.ANVANDARE.
   IF Guru.Konstanter:globforetag = "Cgran" THEN stamp = uppfoltemp.STAMP.
   ELSE DO:
      ASSIGN
      stamp = FALSE
      kontaktp = uppfoltemp.STAMP.
      IF kontaktp = TRUE THEN DO:
         FIND FIRST markval NO-ERROR.      
         markval.PROCENT = 100.
      END.
   END.
   RUN mval_UI.
   EMPTY TEMP-TABLE sumtemp NO-ERROR. 
   EMPTY TEMP-TABLE svard  NO-ERROR. 
   EMPTY TEMP-TABLE vvard NO-ERROR. 
   EMPTY TEMP-TABLE akevard NO-ERROR. 
   EMPTY TEMP-TABLE akekab NO-ERROR. 
   EMPTY TEMP-TABLE ockvol NO-ERROR. 
   EMPTY TEMP-TABLE fastaga NO-ERROR. 
   
   IF vaghallare = "JA" THEN markvagh = "Väghållare:".
   ELSE markvagh = "Markägare:".
   IF vaghallare = "JA" THEN markvagh2 = "väghållarens".
   ELSE markvagh2 = "markägarens".
   IF vaghallare = "JA" THEN markvagh3 = "Väghållarens".
   ELSE markvagh3 = "Markägarens".
   IF vaghallare = "JA" THEN markvagh4 = "VÄGHÅLLARE".
   ELSE markvagh4 = "MARKÄGARE".
        
   RUN skaptabell_UI.
   
   EMPTY TEMP-TABLE tidut NO-ERROR. 
   
   IF Guru.Konstanter:globforetag = "UMEA" OR Guru.Konstanter:globforetag = "UMBR" THEN DO:
      str=                                                                    
   "_______________________________________________________________________________________".
   END.
   ELSE DO:
   str=                                                                    
   "________________________________________________________________________________________".
   END.
   RUN skapain_UI.   
   RUN protokoll_UI.    
   FIND LAST tidut NO-ERROR.
   IF AVAILABLE tidut THEN DO:
      IF SUBSTRING(tidut.UT,132,1) = "$" THEN DO:
         DELETE tidut.
      END.
   END.
   ASSIGN
   alnamn = allnamn
   alpersnr = allpersnr.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph.      
   edataapph = ?.
    Guru.GlobalaVariabler:GDPRtyp = "M". 
   {GDPRLOGGCLIENT.I}
END PROCEDURE.


PROCEDURE skaptabell_UI.
   FIND FIRST mval NO-ERROR.
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = mval.VARDNR USE-INDEX VARDNR
   NO-LOCK NO-ERROR.       
   IF AVAILABLE VARDERING THEN DO:
      FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = VARDERING.OMRADE NO-LOCK NO-ERROR.      
   END. 
   FOR EACH mval USE-INDEX ORDNING:
      FIND FIRST FASTIGHET WHERE FASTIGHET.BETECKNING = mval.BETECKNING 
      USE-INDEX FAST NO-LOCK NO-ERROR.
      ASSIGN mval.KOMMUN = FASTIGHET.KOMMUN 
      mval.SOCKEN = FASTIGHET.SOCKEN
      mval.PAKER = FASTIGHET.PAKER
      mval.VAKER = FASTIGHET.VAKER.       
      FIND FIRST AOVARD WHERE AOVARD.VARDNR = mval.VARDNR USE-INDEX VARDNR NO-LOCK NO-ERROR.
      IF AVAILABLE AOVARD THEN DO:
         ASSIGN mval.AONR = AOVARD.AONR
         mval.DELNR = AOVARD.DELNR.
      END.
      ELSE DO:
         ASSIGN mval.AONR = ?
         mval.DELNR = ?.
      END.     
   END.     
   IF stamp = TRUE THEN ASSIGN valvard = "STAMP".
   IF valvard = "" OR valvard = "skog" THEN DO:
      OPEN QUERY skvard FOR EACH mval USE-INDEX MARKNR NO-LOCK,
      EACH SKOGVARD WHERE SKOGVARD.BETECKNING = mval.BETECKNING AND  
      SKOGVARD.VARDNR = mval.VARDNR USE-INDEX VARDNR NO-LOCK.
      GET FIRST skvard NO-LOCK.
      DO WHILE AVAILABLE(mval):         
         CREATE svard.
         ASSIGN 
         svard.MARKNR = mval.MARKNR
         svard.BETECKNING = SKOGVARD.BETECKNING
         svard.BESTAND = SKOGVARD.BESTAND
         svard.BARRLOV = SKOGVARD.BARRLOV
         svard.BENAMNING = SKOGVARD.BENAMNING
         svard.BREDD = SKOGVARD.BREDD
         svard.LANGD = SKOGVARD.LANGD
         svard.BESTTYP = SKOGVARD.BESTTYP 
         svard.MARKTYP = SKOGVARD.MARKTYP
         svard.SLENH = SKOGVARD.SLENH
         svard.HA = SKOGVARD.HA
         svard.FASTPRIS = SKOGVARD.FASTPRIS
         svard.PROCENT = SKOGVARD.PROCENT 
         svard.KR-HA = SKOGVARD.KR-HA 
         svard.KRONOR = SKOGVARD.KRONOR.                               
         IF SKOGVARD.PROCENT = 0 THEN svard.PROCENT = 100.
         GET NEXT skvard NO-LOCK.          
      END.   
      CLOSE QUERY skvard.     
      FIND FIRST mval NO-ERROR.
      EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
      EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
      CREATE inextradatatemp.          
      ASSIGN
      inextradatatemp.PROGRAM = "FSVOL"                   
      inextradatatemp.HUVUDINT = mval.VARDNR                    
      inextradatatemp.HUVUDCH = mval.BETECKNING.                          
      RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
      FIND FIRST extradatatemp WHERE extradatatemp.SOKDEC[2] > 0 NO-LOCK NO-ERROR.
      IF AVAILABLE extradatatemp THEN DO:
         OPEN QUERY ockvard FOR EACH mval NO-LOCK,
         EACH extradatatemp WHERE extradatatemp.HUVUDCH =
         mval.BETECKNING AND extradatatemp.HUVUDINT = mval.VARDNR NO-LOCK.
         GET FIRST ockvard NO-LOCK.
         DO WHILE AVAILABLE(mval):                     
            CREATE ockvol. 
            ASSIGN 
            ockvol.MARKNR = mval.MARKNR
            ockvol.VARDNR = mval.VARDNR
            ockvol.BETECKNING = extradatatemp.HUVUDCH
            ockvol.BESTAND = extradatatemp.SOKINT[1] 
            ockvol.GT = extradatatemp.SOKCHAR[1]
            ockvol.SLENH = extradatatemp.SOKDEC[1]
            ockvol.MHOJD = extradatatemp.SOKINT[2]
            ockvol.HA = extradatatemp.SOKDEC[3]
            ockvol.TABVARD = extradatatemp.SOKINT[3]
            ockvol.VOLUTR = extradatatemp.SOKDEC[2].                                                     
            GET NEXT ockvard NO-LOCK.          
         END.   
      END.
      CLOSE QUERY ockvard.     
      FOR EACH ockvol WHERE ockvol.VOLUTR > 0 BREAK BY ockvol.BETECKNING BY ockvol.MARKNR:
         ACCUMULATE ockvol.VOLUTR(TOTAL  BY ockvol.BETECKNING BY ockvol.MARKNR).             
         IF LAST-OF(ockvol.MARKNR) THEN DO:         
            CREATE suvol1.
            ASSIGN   
            suvol1.VARDNR = ockvol.VARDNR  
            suvol1.MARKNR = ockvol.MARKNR  
            suvol1.BETECKNING = ockvol.BETECKNING
            suvol1.ANTAL = 0.
            FIND FIRST FASTVARD WHERE FASTVARD.VARDNR = suvol1.VARDNR AND FASTVARD.BETECKNING = suvol1.BETECKNING NO-LOCK
            NO-ERROR.
            suvol1.M3 = (ACCUM TOTAL BY ockvol.MARKNR ockvol.VOLUTR).                      
            fpris = FASTVARD.FORDYRAD.            
            IF suvol1.M3 > 0 AND suvol1.M3 < 4 THEN fpris = 180.       
            IF suvol1.M3 GE 4 AND suvol1.M3 < 5 THEN fpris = 165.
            IF suvol1.M3 GE 5 AND suvol1.M3 < 6 THEN fpris = 140.
            IF suvol1.M3 GE 6 AND suvol1.M3 < 7 THEN fpris = 123.
            IF suvol1.M3 GE 7 AND suvol1.M3 < 8 THEN fpris = 111.
            IF suvol1.M3 GE 8 AND suvol1.M3 < 9 THEN fpris = 102.
            IF suvol1.M3 GE 9 AND suvol1.M3 < 10 THEN fpris = 95.
            IF suvol1.M3 GE 10 AND suvol1.M3 < 15 THEN fpris = 90.
            IF suvol1.M3 GE 15 AND suvol1.M3 < 20 THEN fpris = 73.
            IF suvol1.M3 GE 20 AND suvol1.M3 < 25 THEN fpris = 67.
            IF suvol1.M3 GE 25 AND suvol1.M3 < 30 THEN fpris = 65.
            IF suvol1.M3 GE 30 AND suvol1.M3 < 40 THEN fpris = 64.
            IF suvol1.M3 GE 40 AND suvol1.M3 < 50 THEN fpris = 62.
            IF suvol1.M3 GE 50 AND suvol1.M3 < 60 THEN fpris = 60.
            IF suvol1.M3 GE 60 AND suvol1.M3 < 70 THEN fpris = 59.
            IF suvol1.M3 GE 70 AND suvol1.M3 < 80 THEN fpris = 58.
            IF suvol1.M3 GE 80 AND suvol1.M3 < 90 THEN fpris = 57.
            IF suvol1.M3 GE 90 AND suvol1.M3 < 100 THEN fpris = 56.
            IF suvol1.M3 GE 100 AND suvol1.M3 < 110 THEN fpris = 55.
            IF suvol1.M3 GE 110 AND suvol1.M3 < 120 THEN fpris = 53.
            IF suvol1.M3 GE 120 AND suvol1.M3 < 160 THEN fpris = 51.
            IF suvol1.M3 GE 160 AND suvol1.M3 < 200 THEN fpris = 49.
            IF suvol1.M3 GE 200 THEN fpris = 40.                                          
            IF fpris > 0 THEN DO:
               ASSIGN suvol1.FORFAK = fpris 
               suvol1.FORKR = suvol1.M3 * fpris.
            END.                 
         END.
      END.
      
                  
   END.
   IF valvard = "" OR valvard = "volym" THEN DO:   
      OPEN QUERY vovard FOR EACH mval NO-LOCK,
      EACH VOLSKOG WHERE VOLSKOG.BETECKNING =
      mval.BETECKNING AND VOLSKOG.VARDNR = mval.VARDNR USE-INDEX VARDNR NO-LOCK.
      GET FIRST vovard NO-LOCK.
      DO WHILE AVAILABLE(mval):         
         CREATE vvard. 
         ASSIGN 
         vvard.MARKNR = mval.MARKNR
         vvard.VARDNR = mval.VARDNR
         vvard.BETECKNING = VOLSKOG.BETECKNING
         vvard.DIAM = VOLSKOG.DIAM
         vvard.BANT = VOLSKOG.BANT
         vvard.BHKL = VOLSKOG.BHKL
         vvard.BKR = VOLSKOG.BKR
         vvard.BM3 = VOLSKOG.BM3
         vvard.GANT = VOLSKOG.GANT 
         vvard.GHKL = VOLSKOG.GHKL
         vvard.GKR = VOLSKOG.GKR
         vvard.GM3 = VOLSKOG.GM3
         vvard.TANT = VOLSKOG.TANT
         vvard.THKL = VOLSKOG.THKL 
         vvard.TKR = VOLSKOG.TKR 
         vvard.TM3 = VOLSKOG.TM3
         vvard.OANT = VOLSKOG.OANT
         vvard.OHKL = VOLSKOG.OHKL
         vvard.OKORR = VOLSKOG.OKORR
         vvard.OM3 = VOLSKOG.OM3
         vvard.OKR = VOLSKOG.OKR.                                  
         GET NEXT vovard NO-LOCK.          
      END.   
      CLOSE QUERY vovard.           
   END.   
   IF valvard = "stamp" THEN DO:   
      OPEN QUERY vovard FOR EACH mval NO-LOCK,
      EACH VOLSKOG WHERE VOLSKOG.BETECKNING =
      mval.BETECKNING AND VOLSKOG.VARDNR = mval.VARDNR USE-INDEX VARDNR NO-LOCK.
      GET FIRST vovard NO-LOCK.
      DO WHILE AVAILABLE(mval):   
         FIND FIRST vvard WHERE vvard.MARKNR NE mval.MARKNR AND vvard.BETECKNING = mval.BETECKNING NO-LOCK NO-ERROR.
         IF AVAILABLE vvard  THEN .
         ELSE DO:      
            IF  VOLSKOG.BANT > 0 THEN DO:     
               CREATE vvard. 
               ASSIGN 
               vvard.MARKNR = mval.MARKNR
               vvard.VARDNR = mval.VARDNR
               vvard.VARDNR = mval.VARDNR
               vvard.BETECKNING = VOLSKOG.BETECKNING
               vvard.DIAM = VOLSKOG.DIAM
               vvard.TANT = VOLSKOG.BANT
               vvard.THKL = VOLSKOG.BHKL
               vvard.TKR = VOLSKOG.BKR
               vvard.TM3 = VOLSKOG.BM3
               vvard.TRAD = "BJORK".         
            END.
            IF VOLSKOG.GANT > 0 THEN DO:  
               CREATE vvard.
               ASSIGN
               vvard.MARKNR = mval.MARKNR
               vvard.VARDNR = mval.VARDNR
               vvard.BETECKNING = VOLSKOG.BETECKNING
               vvard.DIAM = VOLSKOG.DIAM
               vvard.TANT = VOLSKOG.GANT 
               vvard.THKL = VOLSKOG.GHKL
               vvard.TKR = VOLSKOG.GKR
               vvard.TM3 = VOLSKOG.GM3
               vvard.TRAD = "GRAN".
            END.
            IF VOLSKOG.TANT > 0 THEN DO:   
               CREATE vvard.
               ASSIGN
               vvard.MARKNR = mval.MARKNR
               vvard.VARDNR = mval.VARDNR
               vvard.BETECKNING = VOLSKOG.BETECKNING
               vvard.DIAM = VOLSKOG.DIAM
               vvard.TANT = VOLSKOG.TANT
               vvard.THKL = VOLSKOG.THKL 
               vvard.TKR = VOLSKOG.TKR 
               vvard.TM3 = VOLSKOG.TM3
               vvard.TRAD = "TALL".
            END.
            IF  VOLSKOG.OANT > 0 THEN DO:       
               CREATE vvard.
               ASSIGN
               vvard.MARKNR = mval.MARKNR
               vvard.VARDNR = mval.VARDNR
               vvard.BETECKNING = VOLSKOG.BETECKNING
               vvard.DIAM = VOLSKOG.DIAM
               vvard.TANT = VOLSKOG.OANT
               vvard.THKL = VOLSKOG.OHKL
               vvard.OKORR = VOLSKOG.OKORR
               vvard.TM3 = VOLSKOG.OM3
               vvard.TKR = VOLSKOG.OKR
               vvard.TRAD = "OVRIG".                                  
            END.   
         END.
         GET NEXT vovard NO-LOCK.          
      END.   
      CLOSE QUERY vovard.     
   END.   
   
   IF valvard = "" OR valvard = "aker" THEN DO: 
      OPEN QUERY akvard FOR EACH mval NO-LOCK,
      EACH AKERVARD WHERE AKERVARD.BETECKNING =
      mval.BETECKNING AND AKERVARD.VARDNR = mval.VARDNR AND AKERVARD.L5 = 0 AND AKERVARD.STOLPNR NE 0 USE-INDEX vardnr NO-LOCK.
      GET FIRST akvard NO-LOCK.
      DO WHILE AVAILABLE(mval):       
         CREATE akevard.
         ASSIGN 
         akevard.MARKNR = mval.MARKNR
         akevard.BETECKNING = AKERVARD.BETECKNING
         akevard.L1 = AKERVARD.L1
         akevard.L2 = AKERVARD.L2
         akevard.L3 = AKERVARD.L3
         akevard.L4 = AKERVARD.L4
         akevard.L5 = AKERVARD.L5
         akevard.SORT = AKERVARD.SORT
         akevard.BENAMNING = AKERVARD.BENAMNING
         akevard.STOLPNR = AKERVARD.STOLPNR
         akevard.VARDEPKT = AKERVARD.VARDEPKT     
         akevard.FASTPRIS = AKERVARD.FASTPRIS       
         akevard.KRONOR = AKERVARD.KRONOR.                         
         IF akevard.KRONOR > 0 THEN ASSIGN akevard.PLUS = TRUE.
         ELSE ASSIGN akevard.PLUS = FALSE. 
         GET NEXT akvard NO-LOCK.          
      END.   
      CLOSE QUERY akvard.     
   END.
   IF valvard = "" OR valvard = "trafo" THEN DO: 
      OPEN QUERY akvard FOR EACH mval NO-LOCK,
      EACH AKERVARD WHERE AKERVARD.BETECKNING =
      mval.BETECKNING AND AKERVARD.VARDNR = mval.VARDNR AND AKERVARD.L5 = 1 USE-INDEX vardnr NO-LOCK.
      GET FIRST akvard NO-LOCK.
      DO WHILE AVAILABLE(mval):       
         CREATE akevard.
         ASSIGN 
         akevard.MARKNR = mval.MARKNR
         akevard.BETECKNING = AKERVARD.BETECKNING
         akevard.L1 = AKERVARD.L1
         akevard.L2 = AKERVARD.L2
         akevard.L3 = AKERVARD.L3
         akevard.L4 = AKERVARD.L4
         akevard.L5 = AKERVARD.L5      
         akevard.BENAMNING = AKERVARD.BENAMNING
         akevard.STOLPNR = AKERVARD.STOLPNR      
         akevard.FASTPRIS = AKERVARD.FASTPRIS       
         akevard.KRONOR = AKERVARD.KRONOR.                         
         IF akevard.KRONOR > 0 THEN ASSIGN akevard.PLUS = TRUE.
         ELSE ASSIGN akevard.PLUS = FALSE. 
         GET NEXT akvard NO-LOCK.          
      END.   
      CLOSE QUERY akvard.     
   END.
   IF valvard = "" OR valvard = "kabel" THEN DO:    
      OPEN QUERY akkab FOR EACH mval NO-LOCK,
      EACH AKERKAB WHERE AKERKAB.BETECKNING =
      mval.BETECKNING AND AKERKAB.VARDNR = mval.VARDNR USE-INDEX VARDNR NO-LOCK.
      GET FIRST akkab NO-LOCK.
      DO WHILE AVAILABLE(mval):      
         CREATE akekab.
         ASSIGN 
         akekab.MARKNR = mval.MARKNR
         akekab.BETECKNING = AKERKAB.BETECKNING
         akekab.L1 = AKERKAB.L1
         akekab.L2 = AKERKAB.L2
         akekab.FASTPRIS = AKERKAB.FASTPRIS
         akekab.FLKAB = AKERKAB.FLKAB      
         akekab.KRONOR = AKERKAB.KRONOR.
         akekab.KRDEC = AKERKAB.KRONOR.
         /*Avrund Lena. testa med att räkna fram kabel med decimal istället för att använda det framräknade AKERKAB.KRONOR*/
         IF Guru.Konstanter:varforetypval[40] = 1 THEN paslagfaktor = 1.25.
         ELSE paslagfaktor = 1.
         IF akekab.FASTPRIS = TRUE THEN.       
         ELSE DO:         
            FIND FIRST KINDEX WHERE KINDEX.AR = 1995 AND KINDEX.MANAD = 10 USE-INDEX AR NO-LOCK NO-ERROR.
            FIND FIRST kbuff WHERE kbuff.AR = (YEAR(TODAY)- 1) AND kbuff.MANAD = 10 USE-INDEX AR NO-LOCK NO-ERROR.
            FIND FIRST MARKDIV NO-LOCK NO-ERROR.                
            nypolicykab = FALSE.         
            IF vardartal GE 2020 AND Guru.Konstanter:varforetypval[58] = 1 THEN nypolicykab = TRUE.
            IF Guru.Konstanter:globforetag = "POWE" OR Guru.Konstanter:globforetag = "PFBK" OR Guru.Konstanter:globforetag = "KEWA" OR Guru.Konstanter:globforetag = "GULL" THEN DO:
               FIND FIRST VARDERING WHERE VARDERING.VARDNR = mval.VARDNR NO-LOCK NO-ERROR.
               IF AVAILABLE VARDERING THEN DO:
                  IF VARDERING.NATAGARE BEGINS "Ellevio" THEN nypolicykab = ?. 
                  IF VARDERING.NATAGARE = "Dala Energi" THEN nypolicykab = FALSE.                              
               END.
            END.               
            IF nypolicykab = ? THEN DO:
               /*Ellevo har KPI okt 2018 = 330,42  istället för 330,72 som det står på SCB hemsida Lena 20221021*/
               nypolicykab = FALSE.
               
               FIND FIRST KINDEX WHERE KINDEX.AR = 2018 AND KINDEX.MANAD = 10 USE-INDEX AR NO-LOCK NO-ERROR.
               IF akekab.FLKAB = FALSE THEN DO:
                  IF kopindex > 0 THEN DO:
                      ASSIGN 
                      akekab.KRDEC = paslagfaktor * akekab.L1 * 4.0 * kopindex / 330.42.                   
                  END.   
                  ELSE DO:               
                     IF AVAILABLE KINDEX THEN DO:                  
                        IF AVAILABLE kbuff THEN DO:                                                         
                           ASSIGN
                           akekab.KRDEC = paslagfaktor * akekab.L1 * 4.0 * kbuff.VARDE / KINDEX.VARDE.                                       
                        END.
                     END.
                  END.              
               END.
               ELSE DO:  
                  IF kopindex > 0 THEN DO:
                      ASSIGN
                      akekab.KRDEC = paslagfaktor * akekab.L1 * 4.0 * ( ( 6 + akekab.L2) / 6 ) * kopindex / 330.42.                   
                  END.    
                  ELSE DO:                         
                     IF AVAILABLE KINDEX THEN DO:
                         IF AVAILABLE kbuff THEN DO:                         
                            ASSIGN 
                            akekab.KRDEC = paslagfaktor * akekab.L1 * 4.0 * ( ( 6 + akekab.L2) / 6 ) * kbuff.VARDE / KINDEX.VARDE.                         
                         END.
                     END.
                  END.   
               END.
               
               /*IF akekab.FLKAB = FALSE THEN DO:
                  akekab.KRDEC = paslagfaktor * akekab.L1 * 4.10.
               END.
               ELSE DO:
                  akekab.KRDEC = paslagfaktor * akekab.L1 * 4.10 * ( ( 6 + akekab.L2) / 6 ) .                  
               END.*/      
            END. 
            ELSE IF nypolicykab = TRUE THEN DO:           
               nypolicykab = FALSE. 
               FIND FIRST KINDEX WHERE KINDEX.AR = 2018 AND KINDEX.MANAD = 10 USE-INDEX AR NO-LOCK NO-ERROR.
               IF akekab.FLKAB = FALSE THEN DO:
                  IF kopindex > 0 THEN DO:
                      ASSIGN 
                      akekab.KRDEC = paslagfaktor * akekab.L1 * 4.0 * kopindex / 330.72.                   
                  END.   
                  ELSE DO:               
                     IF AVAILABLE KINDEX THEN DO:                  
                        IF AVAILABLE kbuff THEN DO:                                                         
                           ASSIGN
                           akekab.KRDEC = paslagfaktor * akekab.L1 * 4.0 * kbuff.VARDE / KINDEX.VARDE.                                       
                        END.
                     END.
                  END.              
               END.
               ELSE DO:  
                  IF kopindex > 0 THEN DO:
                      ASSIGN
                      akekab.KRDEC = paslagfaktor * akekab.L1 * 4.0 * ( ( 6 + akekab.L2) / 6 ) * kopindex / 330.72.                   
                  END.    
                  ELSE DO:                         
                     IF AVAILABLE KINDEX THEN DO:
                         IF AVAILABLE kbuff THEN DO:                         
                            ASSIGN 
                            akekab.KRDEC = paslagfaktor * akekab.L1 * 4.0 * ( ( 6 + akekab.L2) / 6 ) * kbuff.VARDE / KINDEX.VARDE.                         
                         END.
                     END.
                  END.   
               END.
            END.
            ELSE DO:    
               IF akekab.FLKAB = FALSE THEN DO:
                  IF kopindex > 0 THEN DO:
                      ASSIGN 
                      akekab.KRDEC = paslagfaktor * akekab.L1 * 3.1 * kopindex / 256.9.                   
                  END.   
                  ELSE DO:               
                     IF AVAILABLE KINDEX THEN DO:                  
                        IF AVAILABLE kbuff THEN DO:                                                         
                           ASSIGN
                           akekab.KRDEC = paslagfaktor * akekab.L1 * 3.1 * kbuff.VARDE / KINDEX.VARDE.                                       
                        END.
                     END.
                  END.              
               END.
               ELSE DO:  
                  IF kopindex > 0 THEN DO:
                      ASSIGN
                      akekab.KRDEC = paslagfaktor * akekab.L1 * 3.1 * ( ( 6 + akekab.L2) / 6 ) * kopindex / 256.9.                   
                  END.    
                  ELSE DO:                         
                     IF AVAILABLE KINDEX THEN DO:
                         IF AVAILABLE kbuff THEN DO:                         
                            ASSIGN 
                            akekab.KRDEC = paslagfaktor * akekab.L1 * 3.1 * ( ( 6 + akekab.L2) / 6 ) * kbuff.VARDE / KINDEX.VARDE.                         
                         END.
                     END.
                  END.   
               END.
            END.
         END.   
         
         IF akekab.FASTPRIS = FALSE THEN DO:
            FIND FIRST AKERVARD WHERE AKERVARD.VARDNR = AKERKAB.VARDNR 
            AND AKERVARD.BETECKNING = AKERKAB.BETECKNING AND AKERVARD.L5 = AKERKAB.L1
            AND AKERVARD.L1 = 0 AND AKERVARD.L2 = 0 AND AKERVARD.L3 = 0 
            AND AKERVARD.STOLPNR = 0 AND AKERVARD.L4 = INTEGER(RECID(AKERKAB)) EXCLUSIVE-LOCK NO-ERROR.               
            IF NOT AVAILABLE AKERVARD THEN DO:                      
               FIND FIRST AKERVARD WHERE AKERVARD.VARDNR = AKERKAB.VARDNR 
               AND AKERVARD.BETECKNING = AKERKAB.BETECKNING AND AKERVARD.L5 = AKERKAB.L1 NO-LOCK NO-ERROR.
            END.    
         END.
         ELSE DO:
            FIND FIRST AKERVARD WHERE AKERVARD.VARDNR = AKERKAB.VARDNR 
            AND AKERVARD.BETECKNING = AKERKAB.BETECKNING AND AKERVARD.L5 = AKERKAB.KRONOR AND AKERVARD.L4 = INTEGER(RECID(AKERKAB)) NO-LOCK NO-ERROR.
            IF NOT AVAILABLE AKERVARD THEN DO:
               FIND FIRST AKERVARD WHERE AKERVARD.VARDNR = AKERKAB.VARDNR 
               AND AKERVARD.BETECKNING = AKERKAB.BETECKNING AND AKERVARD.L5 = AKERKAB.KRONOR NO-LOCK NO-ERROR.
            END.               
         END.
         IF AVAILABLE AKERVARD THEN DO:             
            ASSIGN akekab.BENAMNING = AKERVARD.BENAMNING.            
         END.
         IF akekab.KRONOR > 0 THEN ASSIGN akekab.PLUS = TRUE.
         ELSE ASSIGN akekab.PLUS = FALSE. 
         GET NEXT akkab NO-LOCK.          
      END.   
      CLOSE QUERY akkab.           
   END.   
END PROCEDURE.

PROCEDURE skaptabellts_UI.
   FIND FIRST mval NO-ERROR.
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = mval.VARDNR USE-INDEX VARDNR
   NO-LOCK NO-ERROR.       
   IF AVAILABLE VARDERING THEN DO:
      FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = VARDERING.OMRADE NO-LOCK NO-ERROR.      
   END. 
   FOR EACH mval USE-INDEX ORDNING:
      FIND FIRST FASTIGHET WHERE FASTIGHET.BETECKNING = mval.BETECKNING 
      USE-INDEX FAST NO-LOCK NO-ERROR.
      ASSIGN mval.KOMMUN = FASTIGHET.KOMMUN 
      mval.SOCKEN = FASTIGHET.SOCKEN
      mval.PAKER = FASTIGHET.PAKER
      mval.VAKER = FASTIGHET.VAKER.       
      FIND FIRST AOVARD WHERE AOVARD.VARDNR = mval.VARDNR USE-INDEX VARDNR NO-LOCK NO-ERROR.
      IF AVAILABLE AOVARD THEN DO:
         ASSIGN mval.AONR = AOVARD.AONR
         mval.DELNR = AOVARD.DELNR.
      END.
      ELSE DO:
         ASSIGN mval.AONR = ?
         mval.DELNR = ?.
      END.     
   END.        
   IF valvard = "" OR valvard = "trafo" THEN DO: 
      OPEN QUERY akvard FOR EACH mval NO-LOCK,
      EACH AKERVARD WHERE AKERVARD.BETECKNING =
      mval.BETECKNING AND AKERVARD.VARDNR = mval.VARDNR AND AKERVARD.L5 = 1 AND AKERVARD.STOLPNR = 0 USE-INDEX vardnr NO-LOCK.
      GET FIRST akvard NO-LOCK.
      DO WHILE AVAILABLE(mval):       
         CREATE akevard.
         ASSIGN 
         akevard.MARKNR = mval.MARKNR
         akevard.BETECKNING = AKERVARD.BETECKNING
         akevard.L1 = AKERVARD.L1
         akevard.L2 = AKERVARD.L2
         akevard.L3 = AKERVARD.L3
         akevard.L4 = AKERVARD.L4
         akevard.L5 = AKERVARD.L5      
         akevard.BENAMNING = AKERVARD.BENAMNING
         akevard.STOLPNR = AKERVARD.STOLPNR      
         akevard.FASTPRIS = AKERVARD.FASTPRIS       
         akevard.KRONOR = AKERVARD.KRONOR.                         
         IF akevard.KRONOR > 0 THEN ASSIGN akevard.PLUS = TRUE.
         ELSE ASSIGN akevard.PLUS = FALSE. 
         GET NEXT akvard NO-LOCK.          
      END.   
      CLOSE QUERY akvard.     
   END.   
END PROCEDURE.

PROCEDURE protokoll_UI :
   /*IF Guru.Konstanter:globforetag = "UMBR" THEN kabstn = "Optobrunn/teknikbod ".*/
   IF Guru.Konstanter:globforetag = "UMBR" THEN kabstn = "Teknikbod ".
   ELSE kabstn = "Station/kabelskåp ".      
   IF valvard = "" THEN DO:      
      FOR EACH mval USE-INDEX ORDNING:       
         markarec = mval.MARKREC.
         fbeteckn = mval.BETECKNING.
         IF Guru.Konstanter:globforetag = "UMEA" OR Guru.Konstanter:globforetag = "UMBR" THEN.
         ELSE DO:               
            FIND FIRST akevard  WHERE akevard.MARKNR = mval.MARKNR AND akevard.BETECKNING = mval.BETECKNING
            AND akevard.L5 = 1 AND akevard.STOLPNR > 0 AND akevard.L4 = 0 NO-LOCK NO-ERROR.
            IF NOT AVAILABLE akevard  THEN DO:
               kabstn = "Kabelskåp ".
            END.
         END.         
         RUN sumsida_UI.
         IF samman = FALSE THEN DO:
            FIND FIRST akevard WHERE akevard.MARKNR = mval.MARKNR AND akevard.BETECKNING = mval.BETECKNING
            AND akevard.L5 = 0 AND akevard.STOLPNR NE 0  NO-LOCK NO-ERROR.
            IF AVAILABLE akevard THEN DO:   
               RUN akervard_UI.
            END.     
            FIND FIRST svard WHERE svard.MARKNR = mval.MARKNR AND svard.BETECKNING = mval.BETECKNING NO-LOCK NO-ERROR.
            IF AVAILABLE svard THEN DO: 
               RUN skogvard_UI.
            END.
            FIND FIRST akekab WHERE akekab.MARKNR = mval.MARKNR AND akekab.BETECKNING = mval.BETECKNING NO-LOCK NO-ERROR.
            IF AVAILABLE akekab THEN DO:   
               RUN akerkab_UI.
            END.  
            FIND FIRST akevard WHERE akevard.MARKNR = mval.MARKNR AND akevard.BETECKNING = mval.BETECKNING
            AND akevard.L5 = 1 AND akevard.KRONOR > 0  NO-LOCK NO-ERROR.
            IF AVAILABLE akevard THEN DO:   
               RUN trafovard_UI.
            END.     
            FIND FIRST vvard WHERE vvard.MARKNR = mval.MARKNR AND vvard.BETECKNING = mval.BETECKNING NO-LOCK NO-ERROR.
            IF AVAILABLE vvard THEN DO:   
               RUN volym_UI.
               RUN rotnetto_UI.
            END.         
            ELSE DO:            
               FIND FIRST ockvol WHERE ockvol.MARKNR = mval.MARKNR AND ockvol.BETECKNING = mval.BETECKNING NO-LOCK NO-ERROR.
               IF AVAILABLE ockvol THEN DO:   
                  RUN volym_UI.
                  RUN rotnetto_UI.
               END.
            END.         
            IF Guru.Konstanter:globforetag = "Cgran"  THEN DO:
               RUN bilaga7_UI. 
            END.
         END.   
      END.   
   END.   
   ELSE IF valvard = "aker" THEN DO:
      FOR EACH mval USE-INDEX ORDNING:
         markarec = mval.MARKREC.
         fbeteckn = mval.BETECKNING.         
         FIND FIRST akevard WHERE akevard.MARKNR = mval.MARKNR AND akevard.BETECKNING = mval.BETECKNING 
         AND akevard.L5 = 0 AND akevard.STOLPNR NE 0  NO-LOCK NO-ERROR.
         IF AVAILABLE akevard THEN DO:   
            RUN akervard_UI.
         END.     
      END.   
   END.   
   ELSE IF valvard = "trafo" THEN DO:
      FOR EACH mval USE-INDEX ORDNING:
         markarec = mval.MARKREC.
         fbeteckn = mval.BETECKNING.
         IF Guru.Konstanter:globforetag = "UMEA" OR  Guru.Konstanter:globforetag = "UMBR" THEN.
         ELSE DO:               
            FIND FIRST akevard  WHERE akevard.MARKNR = mval.MARKNR AND akevard.BETECKNING = mval.BETECKNING
            AND akevard.L5 = 1 AND akevard.STOLPNR > 0 AND akevard.L4 = 0 NO-LOCK NO-ERROR.
            IF NOT AVAILABLE akevard  THEN DO:
               kabstn = "Kabelskåp ".
            END.
         END.
         FIND FIRST akevard WHERE akevard.MARKNR = mval.MARKNR AND akevard.BETECKNING = mval.BETECKNING
         AND akevard.L5 = 1 AND akevard.KRONOR > 0 NO-LOCK NO-ERROR.
         IF AVAILABLE akevard THEN DO:   
            RUN trafovard_UI.
         END.     
      END.   
   END.   
   ELSE IF valvard = "skog" THEN DO:
      FOR EACH mval USE-INDEX ORDNING:
         markarec = mval.MARKREC.
         fbeteckn = mval.BETECKNING.
         FIND FIRST svard WHERE svard.MARKNR = mval.MARKNR AND svard.BETECKNING = mval.BETECKNING NO-LOCK NO-ERROR.
         IF AVAILABLE svard THEN DO: 
            RUN skogvard_UI.
         END.
         FIND FIRST ockvol WHERE ockvol.MARKNR = mval.MARKNR AND ockvol.BETECKNING = mval.BETECKNING NO-LOCK NO-ERROR.
         IF AVAILABLE ockvol THEN DO:   
            RUN volym_UI.
            RUN rotnetto_UI.
         END.                     
      END.   
   END.   
   ELSE IF valvard = "kabel" THEN DO:
      FOR EACH mval USE-INDEX ORDNING:
         markarec = mval.MARKREC.
         fbeteckn = mval.BETECKNING.
         FIND FIRST akekab WHERE akekab.MARKNR = mval.MARKNR AND akekab.BETECKNING = mval.BETECKNING NO-LOCK NO-ERROR.
         IF AVAILABLE akekab THEN DO:   
            RUN akerkab_UI.
         END.  
      END.   
   END.   
   ELSE IF valvard = "volym" THEN DO:
      FOR EACH mval USE-INDEX ORDNING:
         markarec = mval.MARKREC.
         fbeteckn = mval.BETECKNING.
         FIND FIRST vvard WHERE vvard.MARKNR = mval.MARKNR AND vvard.BETECKNING = mval.BETECKNING NO-LOCK NO-ERROR.
         IF AVAILABLE vvard THEN DO:   
            RUN volym_UI.
            RUN rotnetto_UI.
         END.            
      END.
   END.   
   ELSE IF valvard = "stamp" THEN DO:
      RUN huvudstamp_UI.     
      RUN stamp_UI.              
   END.   
   ASSIGN valvard = "".
END PROCEDURE.

PROCEDURE skogvard_UI :
   RUN huvudskog_UI.
   FIND FIRST mval WHERE mval.MARKREC = markarec
   AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.   

   FIND FIRST svard WHERE svard.BETECKNING = mval.BETECKNING AND svard.MARKNR = mval.MARKNR NO-LOCK NO-ERROR.
   IF AVAILABLE svard THEN DO:
      IF svard.MARKTYP = "Norrlands inland" OR svard.MARKTYP = "Norrlands kustland ej Gävleborgs län" OR svard.MARKTYP = "Tillväxtområde 3 (2009 års skognorm)" 
      OR svard.MARKTYP = "Tillväxtområde 4A (2009 års skognorm)" OR svard.MARKTYP = "Tillväxtområde 4B (2009 års skognorm)"
      OR svard.MARKTYP = "Norrlands kustland" OR svard.MARKTYP = "Svealand" OR svard.MARKTYP = "Götaland" THEN DO:      
         FOR EACH svard WHERE svard.MARKNR = mval.MARKNR AND svard.BETECKNING = mval.BETECKNING BY svard.BESTAND :
            CREATE tidut.                        
            ASSIGN             
            SUBSTRING(tidut.UT,1) = STRING(svard.BESTAND,">>9")
            SUBSTRING(tidut.UT,6) = STRING(svard.LANGD,">>>>9")
            SUBSTRING(tidut.UT,12) = STRING(svard.BREDD,">>>>9")
            SUBSTRING(tidut.UT,18) = STRING(svard.HA,">9.999")
            SUBSTRING(tidut.UT,25) = svard.MARKTYP
            SUBSTRING(tidut.UT,62) = STRING(svard.KRONOR,"->>>>>>9").
            IF LENGTH(svard.BENAMNING) > 19 THEN DO:         
               CREATE tidut.         
               SUBSTRING(tidut.UT,1) = svard.BENAMNING.   
               CREATE tidut.
            END.
            ELSE SUBSTRING(tidut.UT,72) = svard.BENAMNING.         
         END.      
      END.
      ELSE DO:
         FOR EACH svard WHERE svard.MARKNR = mval.MARKNR AND svard.BETECKNING = mval.BETECKNING BY svard.BESTAND :
            CREATE tidut.                        
            ASSIGN             
            SUBSTRING(tidut.UT,1) = STRING(svard.BESTAND,">>9")
            SUBSTRING(tidut.UT,6) = STRING(svard.LANGD,">>>>9")
            SUBSTRING(tidut.UT,12) = STRING(svard.BREDD,">>>>9")
            SUBSTRING(tidut.UT,18) = STRING(svard.HA,">9.999")
            SUBSTRING(tidut.UT,25) = svard.MARKTYP
            SUBSTRING(tidut.UT,31) = svard.BESTTYP
            SUBSTRING(tidut.UT,34) = svard.BARRLOV
            SUBSTRING(tidut.UT,40) = STRING(svard.SLENH,">9.9")
            SUBSTRING(tidut.UT,46) = STRING(svard.PROCENT,">>9")
            SUBSTRING(tidut.UT,51) = STRING(svard.KR-HA,">>>>9")   
            SUBSTRING(tidut.UT,57) = STRING(svard.KRONOR,"->>>>>>9").
            IF LENGTH(svard.BENAMNING) > 20 THEN DO:         
               CREATE tidut.         
               SUBSTRING(tidut.UT,1) = svard.BENAMNING.   
               CREATE tidut.
            END.
            ELSE SUBSTRING(tidut.UT,67) = svard.BENAMNING.         
         END.      
      END.
   END.
   DO:   
      FIND FIRST suskog2 WHERE suskog2.MARKNR = mval.MARKNR AND suskog2.BETECKNING = mval.BETECKNING
      AND suskog2.KRONOR > 0 NO-LOCK NO-ERROR.
      FOR EACH suskog WHERE suskog.MARKNR = mval.MARKNR AND suskog.BETECKNING = mval.BETECKNING AND suskog.KRONOR > 0:
         CREATE tidut.   
         CREATE tidut.
         CREATE tidut.                     
         ASSIGN                 
         SUBSTRING(tidut.UT,30) = "Nytt intrång , kronor:".                   
         IF AVAILABLE suskog2 THEN ASSIGN SUBSTRING(tidut.UT,62) = STRING((suskog.KRONOR - suskog2.KRONOR),"->>>>>>9").               
         ELSE ASSIGN SUBSTRING(tidut.UT,62) = STRING(suskog.KRONOR,"->>>>>>9").
      END.
      FIND FIRST suskog WHERE suskog.MARKNR = mval.MARKNR AND suskog.BETECKNING = mval.BETECKNING AND suskog.KRONOR < 0 NO-ERROR.
      IF AVAILABLE suskog THEN DO:   
         minus = 0.
         CREATE tidut.                        
         ASSIGN                 
         SUBSTRING(tidut.UT,15) = "Borttaget intrång: marktyp" .
         FOR EACH suskog WHERE suskog.MARKNR = mval.MARKNR AND suskog.BETECKNING = mval.BETECKNING AND suskog.KRONOR < 0:                      
            ASSIGN                                
            SUBSTRING(tidut.UT,41) = STRING(suskog.MARKTYP,"X(3)") 
            SUBSTRING(tidut.UT,45) = STRING(suskog.HA,">9.999")
            SUBSTRING(tidut.UT,52) = "ha" 
            SUBSTRING(tidut.UT,62) = STRING(suskog.KRONOR,"->>>>>>9").  
           CREATE tidut.  
            minus = minus + suskog.KRONOR.           
         END.
      END.      
      IF AVAILABLE suskog2 THEN DO:
         CREATE tidut.   
         CREATE tidut.                     
         ASSIGN                 
         SUBSTRING(tidut.UT,30) = "Fast pris  kronor:".                            
         ASSIGN SUBSTRING(tidut.UT,62) = STRING(suskog2.KRONOR,"->>>>>>9").
      END.   
   END.   
   CREATE tidut.  
   CREATE tidut.
   SUBSTRING(tidut.UT,62) = "___________". 
   FIND FIRST suskog WHERE suskog.MARKNR = mval.MARKNR AND 
   suskog.BETECKNING = mval.BETECKNING
   AND suskog.KRONOR > 0 NO-LOCK NO-ERROR.
   IF AVAILABLE suskog THEN DO:
      ASSIGN minus = suskog.TOTKR + minus.
   END.
   CREATE tidut.                     
   ASSIGN                 
   SUBSTRING(tidut.UT,30) = "Totalt kronor skogsmark:"                   
   SUBSTRING(tidut.UT,62) = STRING(minus,"->>>>>>9"). 
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,132) = "$".
END PROCEDURE.

PROCEDURE huvudskog_UI :
   FIND FIRST mval WHERE mval.MARKREC = markarec
   AND mval.BETECKNING = fbeteckn  NO-LOCK NO-ERROR.
   IF Guru.Konstanter:globforetag = "CGRAN"  THEN DO:
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "V Ä R D E R I N G S P R O T O K O L L aktbilaga nr 2"
      SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
   END.
   ELSE DO:
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "V Ä R D E R I N G S P R O T O K O L L    bilaga nr 2"
      SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
   END.   
   CREATE tidut.
   ASSIGN                
   SUBSTRING(tidut.UT,5) =   "-------------------------------------".
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,5) = "Avseende ersättning för intrång i skogsmark enligt förenklad skogsnorm".
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = mval.VARDNR USE-INDEX VARDNR
   NO-LOCK NO-ERROR.       
   CREATE tidut.
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = VARDERING.BENAMNING.   
   IF SUBSTRING(mval.ANAMN,31,80) NE "" THEN DO:   
      CREATE tidut. 
      SUBSTRING(tidut.UT,1) = SUBSTRING(mval.ANAMN,31,80).
   END.
   IF Guru.Konstanter:varforetypval[5] = 1 OR Guru.Konstanter:globforetag = "CELPA" THEN DO:       
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Nätägare:".   
      SUBSTRING(tidut.UT,13) = VARDERING.NATAGARE.
   END.
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "Beteckning:"
   SUBSTRING(tidut.UT,13) = mval.BETECKNING
   SUBSTRING(tidut.UT,49) = "Markägarnr:"
   SUBSTRING(tidut.UT,60) = STRING(mval.MARKNR).
   IF mval.AONR NE ? THEN DO:
      ASSIGN
      SUBSTRING(tidut.UT,66) = Guru.Konstanter:gaok + ":"  
      SUBSTRING(tidut.UT,72) = mval.AONR
      SUBSTRING(tidut.UT,79) = STRING(mval.DELNR,Guru.Konstanter:varforetypchar[1]). 
   END.      
   CREATE tidut.   
   RUN markagupp_UI.
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = str.   
   FIND FIRST svard WHERE svard.BETECKNING = mval.BETECKNING AND svard.MARKNR = mval.MARKNR NO-LOCK NO-ERROR.
   IF AVAILABLE svard THEN DO:
      IF svard.MARKTYP = "Norrlands inland" OR svard.MARKTYP = "Norrlands kustland ej Gävleborgs län" OR svard.MARKTYP = "Tillväxtområde 3 (2009 års skognorm)" 
      OR svard.MARKTYP = "Tillväxtområde 4A (2009 års skognorm)" OR svard.MARKTYP = "Tillväxtområde 4B (2009 års skognorm)"
      OR svard.MARKTYP = "Norrlands kustland" OR svard.MARKTYP = "Svealand" OR svard.MARKTYP = "Götaland" THEN DO:
         CREATE tidut.                        
         ASSIGN             
         SUBSTRING(tidut.UT,1) = "Be-"
         SUBSTRING(tidut.UT,6) ="<Skogsgatan      >"   
         SUBSTRING(tidut.UT,25) = "Skog-"
         SUBSTRING(tidut.UT,56) = "<  Ersättning   >".      
         CREATE tidut.                        
         ASSIGN             
         SUBSTRING(tidut.UT,1) = "stånd"
         SUBSTRING(tidut.UT,6) = "Längd"
         SUBSTRING(tidut.UT,12) = "Bredd"
         SUBSTRING(tidut.UT,18) = "Areal"
         SUBSTRING(tidut.UT,25) = "område"
         SUBSTRING(tidut.UT,63) = "Kronor".   
         CREATE tidut.
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,1) = "nr"
         SUBSTRING(tidut.UT,6) = "m"
         SUBSTRING(tidut.UT,12) = "m"
         SUBSTRING(tidut.UT,18) = "ha"  
         SUBSTRING(tidut.UT,63) = "Kronor".         
           st2=                                                                    
      "----.-----.-----.------.---------------------------------------.------.".
      END.
      ELSE DO:
         CREATE tidut.                        
         ASSIGN             
         SUBSTRING(tidut.UT,15) = "Marktyper"
         SUBSTRING(tidut.UT,35) ="Beståndstyper".
         CREATE tidut.                        
         ASSIGN             
         SUBSTRING(tidut.UT,15) = "I   = mycket god"
         SUBSTRING(tidut.UT,35) ="1  = plantskog".
         CREATE tidut.                        
         ASSIGN             
         SUBSTRING(tidut.UT,15) = "II  = medel god"
         SUBSTRING(tidut.UT,35) ="2  = röjningsskog".
         CREATE tidut.                        
         ASSIGN             
         SUBSTRING(tidut.UT,15) = "III = dålig"
         SUBSTRING(tidut.UT,35) ="3  = massavedsskog".
         CREATE tidut.                        
         ASSIGN             
         SUBSTRING(tidut.UT,15) = "Imp = impedement"
         SUBSTRING(tidut.UT,35) ="4  = yngre timmerskog".
         CREATE tidut.                        
         ASSIGN              
         SUBSTRING(tidut.UT,35) ="5a  = äldre timmerskog".
         CREATE tidut.                        
         ASSIGN                
         SUBSTRING(tidut.UT,35) ="5b  = kalmark".
         CREATE tidut.
           
         CREATE tidut.                        
         ASSIGN             
         SUBSTRING(tidut.UT,1) = "Be-"
         SUBSTRING(tidut.UT,6) ="<Skogsgatan      >"   
         SUBSTRING(tidut.UT,25) = "Mark-"
         SUBSTRING(tidut.UT,31) = "Best-"
         SUBSTRING(tidut.UT,34) = "Barr/"
         SUBSTRING(tidut.UT,40) = "Slut-"
         SUBSTRING(tidut.UT,46) = "Pro-"
         SUBSTRING(tidut.UT,51) = "<  Ersättning   >".      
         CREATE tidut.                        
         ASSIGN             
         SUBSTRING(tidut.UT,1) = "stånd"
         SUBSTRING(tidut.UT,6) = "Längd"
         SUBSTRING(tidut.UT,12) = "Bredd"
         SUBSTRING(tidut.UT,18) = "Areal"
         SUBSTRING(tidut.UT,25) = "typ"
         SUBSTRING(tidut.UT,31) = "typ"
         SUBSTRING(tidut.UT,34) = "löv"
         SUBSTRING(tidut.UT,40) = "enh."
         SUBSTRING(tidut.UT,46) = "cent"
         SUBSTRING(tidut.UT,51) = "Kr/ha"   
         SUBSTRING(tidut.UT,58) = "Kronor".   
         CREATE tidut.
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,1) = "nr"
         SUBSTRING(tidut.UT,6) = "m"
         SUBSTRING(tidut.UT,12) = "m"
         SUBSTRING(tidut.UT,18) = "ha"  
         SUBSTRING(tidut.UT,46) = "%"
         SUBSTRING(tidut.UT,51) = "Kr/ha"   
         SUBSTRING(tidut.UT,58) = "Kronor".         
           st2=                                                                    
      "----.-----.-----.------.-----.--.-----.-----.----.------.-------.".
      END.
    END.
    CREATE tidut.
    ASSIGN             
    SUBSTRING(tidut.UT,1) = st2.
END PROCEDURE.

PROCEDURE volym_UI :
   FIND FIRST vvard WHERE vvard.MARKNR = mval.MARKNR AND vvard.BETECKNING = mval.BETECKNING
   AND vvard.DIAM = 0 NO-LOCK NO-ERROR.
   IF NOT AVAILABLE vvard THEN DO:      
      FIND FIRST ockvol WHERE ockvol.MARKNR = mval.MARKNR AND ockvol.BETECKNING = mval.BETECKNING
      AND ockvol.VOLUTR > 0 NO-LOCK NO-ERROR.
      IF AVAILABLE ockvol THEN DO:                     
         RUN huvudvolupp_UI.
         FIND FIRST mval WHERE mval.MARKREC = markarec
         AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.                          
         FOR EACH ockvol WHERE ockvol.MARKNR = mval.MARKNR AND ockvol.BETECKNING = mval.BETECKNING AND ockvol.VOLUTR > 0:
            CREATE tidut.                        
            ASSIGN                                     
            SUBSTRING(tidut.UT,1) = STRING(ockvol.BESTAND,">>9")            
            SUBSTRING(tidut.UT,10) = STRING(ockvol.SLENH,"9.9")
            SUBSTRING(tidut.UT,16) =  STRING(ockvol.MHOJD,">9")
            SUBSTRING(tidut.UT,23) =  STRING(ockvol.HA,">9.999")
            SUBSTRING(tidut.UT,31) =  STRING(ockvol.TABVARD,">>9")            
            SUBSTRING(tidut.UT,37) =  STRING(ockvol.VOLUTR,">>>9.99").                        
         END.   
         CREATE tidut.
         CREATE tidut.
         FOR EACH suvol1 WHERE suvol1.MARKNR = mval.MARKNR AND suvol1.BETECKNING = mval.BETECKNING:
            CREATE tidut.                        
            ASSIGN                 
            SUBSTRING(tidut.UT,23) = "Total summa:"                     
            SUBSTRING(tidut.UT,37) = STRING(suvol1.M3,">>>9.99")
            SUBSTRING(tidut.UT,46) = "m3sk". 
         END.        
      END.
      ELSE DO:      
         RUN huvudvolym_UI.
         FIND FIRST mval WHERE mval.MARKREC = markarec
         AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.
         FOR EACH vvard WHERE vvard.MARKNR = mval.MARKNR AND vvard.BETECKNING = mval.BETECKNING USE-INDEX HKL:
            CREATE tidut.                        
            ASSIGN             
            SUBSTRING(tidut.UT,1) = STRING(vvard.DIAM,">9")
            SUBSTRING(tidut.UT,7) = STRING(vvard.TANT,">>9")
            SUBSTRING(tidut.UT,11) = vvard.THKL
            SUBSTRING(tidut.UT,15) = STRING(vvard.TM3,">9.999")
            SUBSTRING(tidut.UT,22) = STRING(vvard.GANT,">>9")
            SUBSTRING(tidut.UT,26) = vvard.GHKL
            SUBSTRING(tidut.UT,30) = STRING(vvard.GM3,">9.999")
            SUBSTRING(tidut.UT,37) = STRING(vvard.BANT,">>9")
            SUBSTRING(tidut.UT,41) = vvard.BHKL
            SUBSTRING(tidut.UT,45) = STRING(vvard.BM3,">9.999")
            SUBSTRING(tidut.UT,52) = STRING(vvard.OANT,">>9")
            SUBSTRING(tidut.UT,56) = vvard.OHKL
            SUBSTRING(tidut.UT,60) = STRING(vvard.OM3,">9.999").          
         END.   
         FOR EACH suvol WHERE suvol.MARKNR = mval.MARKNR AND suvol.BETECKNING = mval.BETECKNING :
            CREATE tidut.   
            ASSIGN                                             
            SUBSTRING(tidut.UT,7) = "---"   
            SUBSTRING(tidut.UT,15) = "------"
            SUBSTRING(tidut.UT,22) = "---"    
            SUBSTRING(tidut.UT,30) = "------"
            SUBSTRING(tidut.UT,37) = "---"   
            SUBSTRING(tidut.UT,45) = "------"
            SUBSTRING(tidut.UT,52) = "---"  
            SUBSTRING(tidut.UT,60) = "------".
            CREATE tidut.                     
            ASSIGN                 
            SUBSTRING(tidut.UT,1) = "S:a:"
            SUBSTRING(tidut.UT,7) = STRING(suvol.TANT,">>>9")   
            SUBSTRING(tidut.UT,13) = STRING(suvol.TM3,">>>9.999")
            SUBSTRING(tidut.UT,22) = STRING(suvol.GANT,">>>9")    
            SUBSTRING(tidut.UT,28) = STRING(suvol.GM3,">>>9.999")
            SUBSTRING(tidut.UT,37) = STRING(suvol.BANT,">>>9")   
            SUBSTRING(tidut.UT,43) = STRING(suvol.BM3,">>>9.999")
            SUBSTRING(tidut.UT,52) = STRING(suvol.OANT,">>>9")  
            SUBSTRING(tidut.UT,58) = STRING(suvol.OM3,">>>9.999").
            CREATE tidut.               
         END.       
         CREATE tidut.
         CREATE tidut.
         FOR EACH suvol1 WHERE suvol1.MARKNR = mval.MARKNR AND suvol1.BETECKNING = mval.BETECKNING:
            CREATE tidut.                        
            ASSIGN                 
            SUBSTRING(tidut.UT,30) = "Total summa:"         
            SUBSTRING(tidut.UT,45) = STRING(suvol1.ANTAL,">>>>9")
            SUBSTRING(tidut.UT,52) = "st"
            SUBSTRING(tidut.UT,55) = STRING(suvol1.M3,">>>9.99")
            SUBSTRING(tidut.UT,64) = "m3sk". 
         END.        
      END.
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,132) = "$".
   END.   
END PROCEDURE.

PROCEDURE huvudvolym_UI :
   FIND FIRST mval WHERE mval.MARKREC = markarec
   AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.
   IF Guru.Konstanter:globforetag = "CGRAN" THEN DO: 
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "S T Ä M P L I N G S L Ä N G D         aktbilaga nr 5"
      SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
   END.
   ELSE  DO: 
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "S T Ä M P L I N G S L Ä N G D            bilaga nr 5"
      SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
   END.   
   CREATE tidut.
   ASSIGN                
   SUBSTRING(tidut.UT,5) =   "-----------------------------".
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,5) = "Cernolds tabeller. Avser inom inlöst bredd".
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = mval.VARDNR USE-INDEX VARDNR
   NO-LOCK NO-ERROR.     
   CREATE tidut.
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = VARDERING.BENAMNING.      
   IF SUBSTRING(mval.ANAMN,31,80) NE "" THEN DO:   
      CREATE tidut. 
      SUBSTRING(tidut.UT,1) = SUBSTRING(mval.ANAMN,31,80).
   END.
   IF Guru.Konstanter:varforetypval[5] = 1 OR Guru.Konstanter:globforetag = "CELPA" THEN DO:       
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Nätägare:".   
      SUBSTRING(tidut.UT,13) = VARDERING.NATAGARE.
   END. 
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "Beteckning:"
   SUBSTRING(tidut.UT,13) = mval.BETECKNING
   SUBSTRING(tidut.UT,49) = "Markägarnr:"
   SUBSTRING(tidut.UT,60) = STRING(mval.MARKNR).
   IF mval.AONR NE ? THEN DO:
      ASSIGN
      SUBSTRING(tidut.UT,66) = Guru.Konstanter:gaok + ":"  
      SUBSTRING(tidut.UT,72) = mval.AONR
      SUBSTRING(tidut.UT,79) = STRING(mval.DELNR,Guru.Konstanter:varforetypchar[1]). 
   END.
   CREATE tidut.
   RUN markagupp_UI.   
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = str.    
   CREATE tidut.                                       
   CREATE tidut.                        
   ASSIGN             
   SUBSTRING(tidut.UT,1) = "Brh-"
   SUBSTRING(tidut.UT,7) = "<--- TALL ---->"   
   SUBSTRING(tidut.UT,22) = "<--- GRAN ---->" 
   SUBSTRING(tidut.UT,37) = "<--- BJÖRK --->"
   SUBSTRING(tidut.UT,52) = "<--- ÖVRIGA -->".
   CREATE tidut.                        
   ASSIGN             
   SUBSTRING(tidut.UT,1) = "diam".   
   CREATE tidut.                        
   ASSIGN             
   SUBSTRING(tidut.UT,1) = "i cm"
   SUBSTRING(tidut.UT,7) = "Ant"
   SUBSTRING(tidut.UT,11) = "Hkl"
   SUBSTRING(tidut.UT,15) = "m3sk"
   SUBSTRING(tidut.UT,22) = "Ant"
   SUBSTRING(tidut.UT,26) = "Hkl"
   SUBSTRING(tidut.UT,30) = "m3sk"
   SUBSTRING(tidut.UT,37) = "Ant"
   SUBSTRING(tidut.UT,41) = "Hkl"
   SUBSTRING(tidut.UT,45) = "m3sk"
   SUBSTRING(tidut.UT,52) = "Ant"
   SUBSTRING(tidut.UT,56) = "Hkl"
   SUBSTRING(tidut.UT,60) = "m3sk".  
     st2=                                                                    
"-----.---.---.------.---.---.------.---.---.------.---.---.------.".
    CREATE tidut.
    ASSIGN             
    SUBSTRING(tidut.UT,1) = st2.
END PROCEDURE.

PROCEDURE huvudvolupp_UI :
   FIND FIRST mval WHERE mval.MARKREC = markarec
   AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,5) = "OCKULÄRUPPSKATTNING AV BESTÅNDSVOLYM     bilaga nr 5"
   SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
   CREATE tidut.
   ASSIGN                
   SUBSTRING(tidut.UT,5) =   "-----------------------------------".
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,5) = "Enligt T.Jonsson".
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = mval.VARDNR USE-INDEX VARDNR
   NO-LOCK NO-ERROR.     
   CREATE tidut.
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = VARDERING.BENAMNING.      
   IF SUBSTRING(mval.ANAMN,31,80) NE "" THEN DO:   
      CREATE tidut. 
      SUBSTRING(tidut.UT,1) = SUBSTRING(mval.ANAMN,31,80).
   END.
   IF Guru.Konstanter:varforetypval[5] = 1 OR Guru.Konstanter:globforetag = "CELPA" THEN DO:       
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Nätägare:".   
      SUBSTRING(tidut.UT,13) = VARDERING.NATAGARE.
   END. 
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "Beteckning:"
   SUBSTRING(tidut.UT,13) = mval.BETECKNING
   SUBSTRING(tidut.UT,49) = "Markägarnr:"
   SUBSTRING(tidut.UT,60) = STRING(mval.MARKNR).
   IF mval.AONR NE ? THEN DO:
      ASSIGN
      SUBSTRING(tidut.UT,66) = Guru.Konstanter:gaok + ":"  
      SUBSTRING(tidut.UT,72) = mval.AONR
      SUBSTRING(tidut.UT,79) = STRING(mval.DELNR,Guru.Konstanter:varforetypchar[1]). 
   END.
   CREATE tidut.
   RUN markagupp_UI.
   
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = str.    
   CREATE tidut.                                       
   CREATE tidut.                        
   ASSIGN             
   SUBSTRING(tidut.UT,10) = "Slut-"
   SUBSTRING(tidut.UT,16) = "Medel-"
   SUBSTRING(tidut.UT,30) = "Tabell".   
   CREATE tidut.                        
   ASSIGN             
   SUBSTRING(tidut.UT,1) = "Bestånd"   
   SUBSTRING(tidut.UT,10) = "enhet"
   SUBSTRING(tidut.UT,16) = "höjd m"
   SUBSTRING(tidut.UT,23) = " Ha"
   SUBSTRING(tidut.UT,30) = "värde"
   SUBSTRING(tidut.UT,37) = "m3sk".   
     st2=                                                                    
"--------.-----.------.------.------.-------.".
    CREATE tidut.
    ASSIGN             
    SUBSTRING(tidut.UT,1) = st2.    
END PROCEDURE.


PROCEDURE stamp_UI :
   FOR EACH vva2 BY vva2.MARKNR BY vva2.BETECKNING BY vva2.DIAM BY vva2.GHKL:
      CREATE tidut.                        
      ASSIGN             
      SUBSTRING(tidut.UT,1) = STRING(vva2.DIAM,">9")   
      SUBSTRING(tidut.UT,7) = STRING(vva2.TANT,">>9")
      SUBSTRING(tidut.UT,11) = vva2.THKL
      SUBSTRING(tidut.UT,15) = STRING(vva2.TM3,">9.999")
      SUBSTRING(tidut.UT,22) = STRING(vva2.GANT,">>9")
      SUBSTRING(tidut.UT,26) = vva2.GHKL
      SUBSTRING(tidut.UT,30) = STRING(vva2.GM3,">9.999")           
      SUBSTRING(tidut.UT,37) = STRING(vva2.BANT,">>9")
      SUBSTRING(tidut.UT,41) = vva2.BHKL
      SUBSTRING(tidut.UT,45) = STRING(vva2.BM3,">9.999")
      SUBSTRING(tidut.UT,52) = STRING(vva2.OANT,">>9")
      SUBSTRING(tidut.UT,56) = vva2.OHKL
      SUBSTRING(tidut.UT,60) = STRING(vva2.OM3,">9.999").             
   END.   
   FOR EACH suvol WHERE  suvol.MARKNR = mval.MARKNR AND suvol.BETECKNING = mval.BETECKNING:
      CREATE tidut.   
      ASSIGN                                             
      SUBSTRING(tidut.UT,7) = "---"   
      SUBSTRING(tidut.UT,15) = "------"
      SUBSTRING(tidut.UT,22) = "---"    
      SUBSTRING(tidut.UT,30) = "------"
      SUBSTRING(tidut.UT,37) = "---"   
      SUBSTRING(tidut.UT,45) = "------"
      SUBSTRING(tidut.UT,52) = "---"  
      SUBSTRING(tidut.UT,60) = "------".

      CREATE tidut.                     
      ASSIGN                 
      SUBSTRING(tidut.UT,1) = "S:a:"
      SUBSTRING(tidut.UT,5) = STRING(suvol.TANT,">>>>9")   
      SUBSTRING(tidut.UT,13) = STRING(suvol.TM3,">>>9.999")
      SUBSTRING(tidut.UT,20) = STRING(suvol.GANT,">>>>9")    
      SUBSTRING(tidut.UT,28) = STRING(suvol.GM3,">>>9.999")
      SUBSTRING(tidut.UT,36) = STRING(suvol.BANT,">>>>9")   
      SUBSTRING(tidut.UT,44) = STRING(suvol.BM3,">>>9.999")
      SUBSTRING(tidut.UT,51) = STRING(suvol.OANT,">>>>9")  
      SUBSTRING(tidut.UT,59) = STRING(suvol.OM3,">>>9.999").
      CREATE tidut.               
   END.   
   CREATE tidut.
   CREATE tidut.
   FOR EACH suvol1 WHERE suvol1.MARKNR = mval.MARKNR AND suvol1.BETECKNING = mval.BETECKNING:
      CREATE tidut.                        
      ASSIGN                 
      SUBSTRING(tidut.UT,10) = "Total summa:"         
      SUBSTRING(tidut.UT,25) = STRING(suvol1.ANTAL,">>>>>9")
      SUBSTRING(tidut.UT,33) = "st"
      SUBSTRING(tidut.UT,35) = STRING(suvol1.M3,">>>>9.99")
      SUBSTRING(tidut.UT,46) = "m3sk". 
   END.        
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,132) = "$".
END PROCEDURE.

PROCEDURE huvudstamp_UI :
   IF Guru.Konstanter:globforetag = "CGRAN" THEN DO: 
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "S T Ä M P L I N G S L Ä N G D         aktbilaga nr 5"
      SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
   END.
   ELSE DO: 
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "S T Ä M P L I N G S L Ä N G D            bilaga nr 5"
      SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
   END.
   
   CREATE tidut.
   ASSIGN                
   SUBSTRING(tidut.UT,5) = "-----------------------------".
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,5) = "Cernolds tabeller. Avser inom inlöst bredd".
   CREATE tidut.
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = "Stämplingslängd avser följande markägare:".
   CREATE tidut.
   FOR EACH mval USE-INDEX ORDNING:
      CREATE tidut.
      ASSIGN
      SUBSTRING(tidut.UT,1) = "Markägarnr:"
      SUBSTRING(tidut.UT,13) = STRING(mval.MARKNR).
   END.     
   FIND FIRST mval  NO-LOCK NO-ERROR.
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = mval.VARDNR USE-INDEX VARDNR
   NO-LOCK NO-ERROR.      
   CREATE tidut.
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = VARDERING.BENAMNING.
   IF SUBSTRING(mval.ANAMN,31,80) NE "" THEN DO:   
      CREATE tidut. 
      SUBSTRING(tidut.UT,1) = SUBSTRING(mval.ANAMN,31,80).
   END.
   IF Guru.Konstanter:varforetypval[5] = 1 OR Guru.Konstanter:globforetag = "CELPA" THEN DO:       
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Nätägare:".   
      SUBSTRING(tidut.UT,13) = VARDERING.NATAGARE.
   END.
   IF mval.AONR NE ? THEN DO:
      CREATE tidut.
      ASSIGN
      SUBSTRING(tidut.UT,30) = Guru.Konstanter:gaok + ":"  
      SUBSTRING(tidut.UT,35) = mval.AONR
      SUBSTRING(tidut.UT,42) = STRING(mval.DELNR,Guru.Konstanter:varforetypchar[1]). 
   END.      
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = str.    
   CREATE tidut.                                       
   CREATE tidut.                        
   ASSIGN             
   SUBSTRING(tidut.UT,1) = "Brh-"
   SUBSTRING(tidut.UT,7) =  "<--- TALL ---->"   
   SUBSTRING(tidut.UT,22) = "<--- GRAN ---->"
   SUBSTRING(tidut.UT,37) = "<--- BJÖRK --->"
   SUBSTRING(tidut.UT,52) = "<--- ÖVRIGA -->".
   CREATE tidut.                        
   ASSIGN             
   SUBSTRING(tidut.UT,1) = "diam".   
   CREATE tidut.                        
   ASSIGN             
   SUBSTRING(tidut.UT,1) = "i cm"
   SUBSTRING(tidut.UT,7) = "Ant"
   SUBSTRING(tidut.UT,11) = "Hkl"
   SUBSTRING(tidut.UT,15) = "m3sk"
   SUBSTRING(tidut.UT,22) = "Ant"
   SUBSTRING(tidut.UT,26) = "Hkl"
   SUBSTRING(tidut.UT,30) = "m3sk"
   SUBSTRING(tidut.UT,37) = "Ant"
   SUBSTRING(tidut.UT,41) = "Hkl"
   SUBSTRING(tidut.UT,45) = "m3sk"
   SUBSTRING(tidut.UT,52) = "Ant"
   SUBSTRING(tidut.UT,56) = "Hkl"
   SUBSTRING(tidut.UT,60) = "m3sk".  
     st2=                                                                    
"-----.---.---.------.---.---.------.---.---.------.---.---.------.".
    CREATE tidut.
    ASSIGN             
    SUBSTRING(tidut.UT,1) = st2.
END PROCEDURE.


PROCEDURE rotnetto_UI :
   RUN huvudrot_UI.
   FIND FIRST mval WHERE mval.MARKREC = markarec
   AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.   
   IF suvol1.FORKR = 0 AND suvol1.ANTAL > 0 THEN DO:
      FOR EACH vvard WHERE vvard.MARKNR = mval.MARKNR AND vvard.BETECKNING = mval.BETECKNING USE-INDEX HKL:
         CREATE tidut.                        
         ASSIGN             
         SUBSTRING(tidut.UT,1) = STRING(vvard.DIAM,">9")
         SUBSTRING(tidut.UT,11) = vvard.THKL
         SUBSTRING(tidut.UT,15) = STRING(vvard.TKR,">>>>>9")
         SUBSTRING(tidut.UT,26) = vvard.GHKL
         SUBSTRING(tidut.UT,30) = STRING(vvard.GKR,">>>>>9") 
         SUBSTRING(tidut.UT,41) = vvard.BHKL
         SUBSTRING(tidut.UT,45) = STRING(vvard.BKR,">>>>>9") 
         SUBSTRING(tidut.UT,56) = vvard.OHKL
         SUBSTRING(tidut.UT,60) = STRING(vvard.OKR,">>>>>9").          
      END.   
      FOR EACH suvol WHERE suvol.MARKNR = mval.MARKNR AND suvol.BETECKNING = mval.BETECKNING:
         CREATE tidut.   
         ASSIGN                                                    
         SUBSTRING(tidut.UT,15) = "------" 
         SUBSTRING(tidut.UT,30) = "------" 
         SUBSTRING(tidut.UT,45) = "------"
         SUBSTRING(tidut.UT,60) = "------".

         CREATE tidut.                     
         ASSIGN                 
         SUBSTRING(tidut.UT,1) = "S:a:"   
         SUBSTRING(tidut.UT,15) = STRING(suvol.TKR,">>>>>9")
         SUBSTRING(tidut.UT,30) = STRING(suvol.GKR,">>>>>9")   
         SUBSTRING(tidut.UT,45) = STRING(suvol.BKR,">>>>>9")
         SUBSTRING(tidut.UT,60) = STRING(suvol.OKR,">>>>>9").
         CREATE tidut.               
      END.   
      FIND FIRST suvol1 WHERE suvol1.MARKNR = mval.MARKNR AND suvol1.BETECKNING = mval.BETECKNING NO-LOCK NO-ERROR.
      CREATE tidut.                        
      ASSIGN                 
      SUBSTRING(tidut.UT,18) = "Rotnetto:"         
      SUBSTRING(tidut.UT,54) = STRING(suvol1.KRONOR,">>>>>>9")
      SUBSTRING(tidut.UT,62) = "kr".         
      FIND FIRST MARKDIV NO-LOCK NO-ERROR.
      moms = suvol1.KRONOR * MARKDIV.MOMS.
      rottot = suvol1.KRONOR * ( MARKDIV.MOMS + 1).
      CREATE tidut.                        
      ASSIGN                 
      SUBSTRING(tidut.UT,18) = "Moms :"         
      SUBSTRING(tidut.UT,54) = STRING(moms,">>>>>>9")
      SUBSTRING(tidut.UT,62) = "kr". 
      CREATE tidut.                        
      ASSIGN                 
      SUBSTRING(tidut.UT,18) = "Totalt rotnetto:"         
      SUBSTRING(tidut.UT,54) = STRING(rottot,">>>>>>9")
      SUBSTRING(tidut.UT,62) = "kr". 
   END.
   ELSE DO:      
      FIND FIRST FASTVARD WHERE FASTVARD.VARDNR = suvol1.VARDNR AND FASTVARD.BETECKNING = suvol1.BETECKNING NO-LOCK
      NO-ERROR.
      fpris = FASTVARD.FORDYRAD.
      FIND FIRST ockvol WHERE ockvol.MARKNR = mval.MARKNR AND ockvol.BETECKNING = mval.BETECKNING NO-LOCK NO-ERROR.
      IF AVAILABLE ockvol THEN DO:   
         IF suvol1.M3 > 0 AND suvol1.M3 < 4 THEN fpris = 180.       
         IF suvol1.M3 GE 4 AND suvol1.M3 < 5 THEN fpris = 165.
         IF suvol1.M3 GE 5 AND suvol1.M3 < 6 THEN fpris = 140.
         IF suvol1.M3 GE 6 AND suvol1.M3 < 7 THEN fpris = 123.
         IF suvol1.M3 GE 7 AND suvol1.M3 < 8 THEN fpris = 111.
         IF suvol1.M3 GE 8 AND suvol1.M3 < 9 THEN fpris = 102.
         IF suvol1.M3 GE 9 AND suvol1.M3 < 10 THEN fpris = 95.
         IF suvol1.M3 GE 10 AND suvol1.M3 < 15 THEN fpris = 90.
         IF suvol1.M3 GE 15 AND suvol1.M3 < 20 THEN fpris = 73.
         IF suvol1.M3 GE 20 AND suvol1.M3 < 25 THEN fpris = 67.
         IF suvol1.M3 GE 25 AND suvol1.M3 < 30 THEN fpris = 65.
         IF suvol1.M3 GE 30 AND suvol1.M3 < 40 THEN fpris = 64.
         IF suvol1.M3 GE 40 AND suvol1.M3 < 50 THEN fpris = 62.
         IF suvol1.M3 GE 50 AND suvol1.M3 < 60 THEN fpris = 60.
         IF suvol1.M3 GE 60 AND suvol1.M3 < 70 THEN fpris = 59.
         IF suvol1.M3 GE 70 AND suvol1.M3 < 80 THEN fpris = 58.
         IF suvol1.M3 GE 80 AND suvol1.M3 < 90 THEN fpris = 57.
         IF suvol1.M3 GE 90 AND suvol1.M3 < 100 THEN fpris = 56.
         IF suvol1.M3 GE 100 AND suvol1.M3 < 110 THEN fpris = 55.
         IF suvol1.M3 GE 110 AND suvol1.M3 < 120 THEN fpris = 53.
         IF suvol1.M3 GE 120 AND suvol1.M3 < 160 THEN fpris = 51.
         IF suvol1.M3 GE 160 AND suvol1.M3 < 200 THEN fpris = 49.
         IF suvol1.M3 GE 200 THEN fpris = 40.                  
      END.
      suvol1.FORKR = suvol1.M3 * fpris.      
      CREATE tidut.     
      CREATE tidut.                
      ASSIGN                                         
      SUBSTRING(tidut.UT,54) = STRING(suvol1.M3,">>>>>9.99")
      SUBSTRING(tidut.UT,62) = "m3sk".
      CREATE tidut.                
      ASSIGN                                   
      SUBSTRING(tidut.UT,54) = STRING(fpris,"->>>>>9")
      SUBSTRING(tidut.UT,62) = "kr/m3sk".
      CREATE tidut.                
      ASSIGN                 
      SUBSTRING(tidut.UT,18) = "Ersättning för fördyrad avverkning:"                   
      SUBSTRING(tidut.UT,54) = STRING(suvol1.FORKR,"->>>>>9")
      SUBSTRING(tidut.UT,62) = "kr".
   END.          
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,132) = "$".
END PROCEDURE.

PROCEDURE huvudrot_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/  
   FIND FIRST mval WHERE mval.MARKREC = markarec
   AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.
   IF Guru.Konstanter:globforetag = "CGRAN" THEN DO: 
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "ROTNETTO /FÖRDYRAD AVVERKNING         aktbilaga nr 6"
      SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
   END.
   ELSE DO: 
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "ROTNETTO /FÖRDYRAD AVVERKNING            bilaga nr 6"
      SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
   END.   
   CREATE tidut.
   ASSIGN                
   SUBSTRING(tidut.UT,5) = "------------------------------".
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = mval.VARDNR USE-INDEX VARDNR
   NO-LOCK NO-ERROR.      
   CREATE tidut.
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = VARDERING.BENAMNING.      
   IF SUBSTRING(mval.ANAMN,31,80) NE "" THEN DO:   
      CREATE tidut. 
      SUBSTRING(tidut.UT,1) = SUBSTRING(mval.ANAMN,31,80).
   END.
   IF Guru.Konstanter:varforetypval[5] = 1 OR Guru.Konstanter:globforetag = "CELPA" THEN DO:       
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Nätägare:".   
      SUBSTRING(tidut.UT,13) = VARDERING.NATAGARE.
   END.
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "Beteckning:"
   SUBSTRING(tidut.UT,13) = mval.BETECKNING
   SUBSTRING(tidut.UT,49) = "Markägarnr:"
   SUBSTRING(tidut.UT,60) = STRING(mval.MARKNR).
   IF mval.AONR NE ? THEN DO:
      ASSIGN
      SUBSTRING(tidut.UT,66) = Guru.Konstanter:gaok + ":"  
      SUBSTRING(tidut.UT,72) = mval.AONR
      SUBSTRING(tidut.UT,79) = STRING(mval.DELNR,Guru.Konstanter:varforetypchar[1]). 
   END.
   CREATE tidut.
   RUN markagupp_UI.
   
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = str.   
   FIND FIRST suvol1 WHERE suvol1.MARKNR = mval.MARKNR AND suvol1.BETECKNING = mval.BETECKNING NO-LOCK NO-ERROR.
   IF suvol1.FORKR = 0 AND suvol1.ANTAL > 0 THEN DO: 
      CREATE tidut.                                       
      CREATE tidut.                        
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Brh-"
      SUBSTRING(tidut.UT,7) = "<--- TALL ---->"   
      SUBSTRING(tidut.UT,22) = "<--- GRAN ---->" 
      SUBSTRING(tidut.UT,37) = "<-- BJÖRK ---->"
      SUBSTRING(tidut.UT,52) = "<-- ÖVRIGA --->".
      CREATE tidut.                        
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "diam".   
      CREATE tidut.                        
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "i cm" 
      SUBSTRING(tidut.UT,11) = "Hkl"
      SUBSTRING(tidut.UT,15) = "Kronor"
      SUBSTRING(tidut.UT,26) = "Hkl"
      SUBSTRING(tidut.UT,30) = "Kronor"
      SUBSTRING(tidut.UT,41) = "Hkl"
      SUBSTRING(tidut.UT,45) = "Kronor"
      SUBSTRING(tidut.UT,56) = "Hkl"
      SUBSTRING(tidut.UT,60) = "Kronor".  
      st2=                                                                    
   "-----.   .---.------.   .---.------.   .---.------.   .---.------.".

      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = st2.
   END.   
END PROCEDURE.

PROCEDURE akervard_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/
   RUN huvudaker_UI.
   FIND FIRST mval WHERE mval.MARKREC = markarec
   AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.
   FOR EACH akevard WHERE akevard.MARKNR = mval.MARKNR AND akevard.BETECKNING = mval.BETECKNING
   AND akevard.L5 = 0 AND akevard.STOLPNR NE 0 :
      CREATE tidut.
      CREATE tidut.                        
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Stolpnr:"
      SUBSTRING(tidut.UT,10) = STRING(akevard.STOLPNR,">>9")
      SUBSTRING(tidut.UT,17) = akevard.SORT
      SUBSTRING(tidut.UT,28) = akevard.BENAMNING.
      CREATE tidut.                        
      ASSIGN     
      SUBSTRING(tidut.UT,1) = "L1 ="
      SUBSTRING(tidut.UT,6) = STRING(akevard.L1,">>>9")
      SUBSTRING(tidut.UT,11) = "m"
      SUBSTRING(tidut.UT,13) = "L2 ="
      SUBSTRING(tidut.UT,18) = STRING(akevard.L2,">>>9")
      SUBSTRING(tidut.UT,23) = "m".
      IF akevard.SORT = "Åker" THEN DO:
         ASSIGN
         SUBSTRING(tidut.UT,26) = "L3 ="
         SUBSTRING(tidut.UT,31) = STRING(akevard.L3,">>>9")
         SUBSTRING(tidut.UT,36) = "m".
      END.       
      ASSIGN
      SUBSTRING(tidut.UT,66) = STRING(akevard.KRONOR,"->>>>>9")
      SUBSTRING(tidut.UT,74) = "Kr".
      st2 = 
"----------------------------------------------------------------------------------------".
      CREATE tidut.                        
      ASSIGN             
      SUBSTRING(tidut.UT,1) = st2.
   END.      
   DO:
   
      FIND FIRST suaker2 WHERE suaker2.MARKNR = mval.MARKNR AND
      suaker2.BETECKNING = mval.BETECKNING AND suaker2.PLUS = TRUE AND suaker2.L5 = 0 NO-LOCK NO-ERROR.
      IF AVAILABLE suaker2 THEN ASSIGN  sumakernpro = suaker2.KRONOR.
      FIND FIRST suaker WHERE suaker.MARKNR = mval.MARKNR
      AND suaker.BETECKNING = mval.BETECKNING AND suaker.PLUS = TRUE
      AND suaker.L5 = 0 NO-LOCK NO-ERROR.  
      IF AVAILABLE suaker THEN DO:
         suakertot = suaker.KRONOR. 
         CREATE tidut.
         CREATE tidut.                        
         ASSIGN                 
         SUBSTRING(tidut.UT,25) = "Summa kronor nytt intrång åker:"                  
         SUBSTRING(tidut.UT,74) = "kr". 
         IF AVAILABLE suaker2  THEN DO:
            ASSIGN                 
            SUBSTRING(tidut.UT,66) = STRING((suaker.KRONOR - suaker2.KRONOR),"->>>>>>9").
            CREATE tidut.
            CREATE tidut.                        
            ASSIGN                 
            SUBSTRING(tidut.UT,25) = "Summa kronor fast pris åker:"
            SUBSTRING(tidut.UT,66) = STRING(suaker2.KRONOR,"->>>>>>9")                  
            SUBSTRING(tidut.UT,74) = "kr". 
         END.   
         ELSE ASSIGN SUBSTRING(tidut.UT,66) = STRING(suaker.KRONOR,"->>>>>>9").                  
      END.           
      FIND FIRST suaker WHERE suaker.MARKNR = mval.MARKNR AND suaker.BETECKNING = mval.BETECKNING
      AND suaker.PLUS = FALSE
      AND suaker.L5 = 0 NO-LOCK NO-ERROR.  
      IF AVAILABLE suaker THEN DO:
         suakertot = suakertot + suaker.KRONOR. 
         CREATE tidut.                        
         ASSIGN                 
         SUBSTRING(tidut.UT,25) = "Summa kronor borttaget intrång åker:"         
         SUBSTRING(tidut.UT,66) = STRING(suaker.KRONOR,"->>>>>>9")
         SUBSTRING(tidut.UT,74) = "kr". 
      END.           
      CREATE tidut.
      ASSIGN
      SUBSTRING(tidut.UT,66) = "__________". 
      CREATE tidut.                         
      ASSIGN                 
      SUBSTRING(tidut.UT,25) = "Summa TOTALT åker:"         
      SUBSTRING(tidut.UT,66) = STRING(suakertot,"->>>>>>9")
      SUBSTRING(tidut.UT,74) = "kr".
   END.
  
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,132) = "$".
END PROCEDURE.

PROCEDURE trafovard_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/
   RUN huvudtrafo_UI.
   FIND FIRST mval WHERE mval.MARKREC = markarec
   AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.   
   FOR EACH akevard WHERE akevard.MARKNR = mval.MARKNR AND akevard.BETECKNING = mval.BETECKNING
   AND akevard.L5 = 1 AND akevard.STOLPNR > 0:
      
      CREATE tidut.
      CREATE tidut.                        
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Nr"
      SUBSTRING(tidut.UT,5) = STRING(akevard.STOLPNR,">>9")
      SUBSTRING(tidut.UT,17) = akevard.SORT
      SUBSTRING(tidut.UT,28) = SUBSTRING(akevard.BENAMNING,1,59).
      CREATE tidut.                    
      IF akevard.L1 > 0  THEN  DO:        
         ASSIGN
         SUBSTRING(tidut.UT,1) = "Antal   ="
         SUBSTRING(tidut.UT,12) = STRING(akevard.L1,">>>9").
         SUBSTRING(tidut.UT,17) = "st".
      END.
      IF SUBSTRING(akevard.BENAMNING,60,20) NE "" THEN DO:
         ASSIGN
         SUBSTRING(tidut.UT,28) = "Ritning nr:"
         SUBSTRING(tidut.UT,40) = SUBSTRING(akevard.BENAMNING,60,20).      
      END.
      CREATE tidut.                        
      IF akevard.L2 > 0  THEN  DO:        
         ASSIGN
         SUBSTRING(tidut.UT,1) = "Pris/st ="
         SUBSTRING(tidut.UT,12) = STRING(akevard.L2,">>>>9")
         SUBSTRING(tidut.UT,17) = "kr".
      END.
      CREATE tidut.                                    
      ASSIGN
      SUBSTRING(tidut.UT,66) = STRING(akevard.KRONOR,"->>>>>9")
      SUBSTRING(tidut.UT,74) = "Kr".
      st2 = 
"----------------------------------------------------------------------------------------".
      CREATE tidut.                        
      ASSIGN             
      SUBSTRING(tidut.UT,1) = st2.
   END.      
   FOR EACH akevard WHERE akevard.MARKNR = mval.MARKNR AND akevard.BETECKNING = mval.BETECKNING
   AND akevard.L5 = 1 AND akevard.STOLPNR = 0 AND akevard.KRONOR > 0:
      CREATE tidut.
      CREATE tidut.                        
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Tillfällig skada"      
      SUBSTRING(tidut.UT,28) = akevard.BENAMNING.
      CREATE tidut.              
      ASSIGN
      SUBSTRING(tidut.UT,66) = STRING(akevard.KRONOR,"->>>>>9")
      SUBSTRING(tidut.UT,74) = "Kr".
      st2 = 
"----------------------------------------------------------------------------------------".
      CREATE tidut.                        
      ASSIGN             
      SUBSTRING(tidut.UT,1) = st2.

   END.
   DO:   
      IF Guru.Konstanter:globforetag = "UMEA" OR Guru.Konstanter:globforetag = "UMBR" OR Guru.Konstanter:globforetag = "cELPA" THEN DO:
         /*KOLLA UMEÅ ENERGI BREDBAND*/
         FIND FIRST suaker2 WHERE suaker2.MARKNR = mval.MARKNR AND suaker2.BETECKNING = mval.BETECKNING
         AND suaker2.PLUS = TRUE AND suaker2.L5 = 1 AND suaker2.STOLPNR > 0 NO-LOCK NO-ERROR.
         IF AVAILABLE suaker2 THEN ASSIGN  sumakernpro = suaker2.KRONOR.
      END.
      ELSE DO:      
         FIND FIRST suaker2 WHERE suaker2.MARKNR = mval.MARKNR AND suaker2.BETECKNING = mval.BETECKNING
         AND suaker2.PLUS = TRUE AND suaker2.L5 = 1 NO-LOCK NO-ERROR.
         IF AVAILABLE suaker2 THEN ASSIGN  sumakernpro = suaker2.KRONOR.
      END.
      FIND FIRST suaker WHERE suaker.MARKNR = mval.MARKNR AND suaker.BETECKNING = mval.BETECKNING
      AND suaker.PLUS = TRUE AND suaker.L5 = 1 NO-LOCK NO-ERROR.  
      IF AVAILABLE suaker THEN DO:
         /*suakertot = suaker.KRONOR. */
         CREATE tidut.
         IF tillfskada = TRUE THEN DO:
         END.
         ELSE DO:    
             CREATE tidut.        
             IF Guru.Konstanter:globforetag = "UMEA" OR  Guru.Konstanter:globforetag = "UMBR" THEN DO:
                ASSIGN                 
                SUBSTRING(tidut.UT,23) = "Ny " + kabstn + " kronor:"
                /*SUBSTRING(tidut.UT,23) = "Ny transformatorstation kronor:"*/                  
                SUBSTRING(tidut.UT,74) = "kr".
             END.   
             ELSE DO:                        
                ASSIGN                 
                SUBSTRING(tidut.UT,23) = "Ny " + kabstn + " kronor:"                  
                SUBSTRING(tidut.UT,74) = "kr". 
             END.             
             IF AVAILABLE suaker2  THEN DO:
                
                suakertot = suaker2.KRONOR. 
                ASSIGN
                SUBSTRING(tidut.UT,66) = STRING(suaker2.KRONOR,"->>>>>>9")                  
                SUBSTRING(tidut.UT,74) = "kr". 
             END.   
             ELSE IF Guru.Konstanter:globforetag = "UMEA" OR Guru.Konstanter:globforetag = "UMBR" THEN .         
             ELSE ASSIGN SUBSTRING(tidut.UT,66) = STRING(suaker.KRONOR,"->>>>>>9").
          END.                     
      END.           

      IF Guru.Konstanter:globforetag = "UMEA" OR Guru.Konstanter:globforetag = "UMBR" THEN DO:
         FIND FIRST suaker2 WHERE suaker2.MARKNR = mval.MARKNR AND suaker2.BETECKNING = mval.BETECKNING
         AND suaker2.PLUS = TRUE AND suaker2.L5 = 1 AND suaker2.STOLPNR = 0 NO-LOCK NO-ERROR.
         IF AVAILABLE suaker2 THEN DO:
            CREATE tidut.
            CREATE tidut.                  
            ASSIGN                 
            SUBSTRING(tidut.UT,23) = "Tillfällig skada:"                              
            SUBSTRING(tidut.UT,66) = STRING(suaker2.KRONOR,"->>>>>>9")                  
            SUBSTRING(tidut.UT,74) = "kr". 
            suakertot = suakertot + suaker2.KRONOR. 
         END.
      END.
      IF tillfskada = FALSE THEN DO:            
          FIND FIRST suaker WHERE suaker.MARKNR = mval.MARKNR AND suaker.BETECKNING = mval.BETECKNING
          AND suaker.PLUS = FALSE AND suaker.L5 = 1 NO-LOCK NO-ERROR.  
          IF AVAILABLE suaker THEN DO:
             suakertot = suakertot + suaker.KRONOR. 
             CREATE tidut.          
             IF Guru.Konstanter:globforetag = "UMEA" OR  Guru.Konstanter:globforetag = "UMBR" THEN DO:
                ASSIGN
                SUBSTRING(tidut.UT,23) = "Summa kronor borttagen " + kabstn + ":"                 
                /*SUBSTRING(tidut.UT,23) = "Summa kronor borttagen transformatorstation:"*/         
                SUBSTRING(tidut.UT,66) = STRING(suaker.KRONOR,"->>>>>>9")
                SUBSTRING(tidut.UT,74) = "kr".
             END.
             ELSE DO:             
                ASSIGN                 
                SUBSTRING(tidut.UT,23) = "Summa kronor borttagen " + kabstn + ":"                  
                SUBSTRING(tidut.UT,66) = STRING(suaker.KRONOR,"->>>>>>9")
                SUBSTRING(tidut.UT,74) = "kr". 
             END.             
          END.           
          CREATE tidut.
          ASSIGN
          SUBSTRING(tidut.UT,66) = "__________". 
          CREATE tidut. 
          IF Guru.Konstanter:globforetag = "UMEA" OR  Guru.Konstanter:globforetag = "UMBR" THEN DO:
             ASSIGN                 
             SUBSTRING(tidut.UT,23) = "Summa TOTALT :"                     
             SUBSTRING(tidut.UT,66) = STRING(suakertot,"->>>>>>9")
             SUBSTRING(tidut.UT,74) = "kr".
          END.
          ELSE DO:                      
             ASSIGN                 
             SUBSTRING(tidut.UT,23) = "Summa TOTALT " + kabstn + ":"         
             SUBSTRING(tidut.UT,66) = STRING(suakertot,"->>>>>>9")
             SUBSTRING(tidut.UT,74) = "kr".
          END.
       END.   
    END.   
   
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,132) = "$".
END PROCEDURE.


PROCEDURE huvudaker_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/  
   FIND FIRST mval WHERE mval.MARKREC = markarec
   AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.
   IF Guru.Konstanter:globforetag = "CGRAN"  THEN DO:
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "V Ä R D E R I N G S P R O T O K O L L aktbilaga nr 1"
      SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
   END.
   ELSE DO:
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "V Ä R D E R I N G S P R O T O K O L L    bilaga nr 1"
      SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
   END.   
   CREATE tidut.
   ASSIGN                
   SUBSTRING(tidut.UT,5) = "-------------------------------------".
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,5) = "Kraftledningsintrång enligt 1974 års åkernorm".
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = mval.VARDNR USE-INDEX VARDNR
   NO-LOCK NO-ERROR.   
   CREATE tidut.   
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = VARDERING.BENAMNING.   
   IF SUBSTRING(mval.ANAMN,31,80) NE "" THEN DO:   
      CREATE tidut. 
      SUBSTRING(tidut.UT,1) = SUBSTRING(mval.ANAMN,31,80).
   END.
   IF Guru.Konstanter:varforetypval[5] = 1 OR Guru.Konstanter:globforetag = "CELPA" THEN DO:       
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Nätägare:".   
      SUBSTRING(tidut.UT,13) = VARDERING.NATAGARE.
   END.
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "Beteckning:"
   SUBSTRING(tidut.UT,13) = mval.BETECKNING   
   SUBSTRING(tidut.UT,49) = "Markägarnr:"
   SUBSTRING(tidut.UT,60) = STRING(mval.MARKNR).
   IF mval.AONR NE ? THEN DO:
      ASSIGN
      SUBSTRING(tidut.UT,66) = Guru.Konstanter:gaok + ":"  
      SUBSTRING(tidut.UT,72) = mval.AONR
      SUBSTRING(tidut.UT,79) = STRING(mval.DELNR,Guru.Konstanter:varforetypchar[1]). 
   END.
   CREATE tidut.
   RUN markagupp_UI.   
   IF SUBSTRING(mval.ANAMN,1,30) NE "" THEN DO:   
      CREATE tidut.
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Arrendator:"
      SUBSTRING(tidut.UT,13) = SUBSTRING(mval.ANAMN,1,30).      
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Adress:"
      SUBSTRING(tidut.UT,9) = mval.AADRESS
      SUBSTRING(tidut.UT,45) = "Postnr:"
      SUBSTRING(tidut.UT,53) = STRING(mval.APONR,"999 99")
      SUBSTRING(tidut.UT,60) = "Postadress:"
      SUBSTRING(tidut.UT,72) = mval.APADRESS.      
   END.   
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = str. 
   FIND FIRST KINDEX WHERE KINDEX.AR = YEAR(akevard.VARDEPKT) AND
   KINDEX.MANAD = MONTH(akevard.VARDEPKT) USE-INDEX AR NO-LOCK NO-ERROR.    
   FIND FIRST MARKDIV NO-LOCK NO-ERROR.     
   CREATE tidut.                                       
   CREATE tidut.                        
   ASSIGN             
   SUBSTRING(tidut.UT,1) = "Produktionsområde"
   SUBSTRING(tidut.UT,28) = mval.PAKER   
   SUBSTRING(tidut.UT,35) = "Värdetidpunkt"
   SUBSTRING(tidut.UT,58) = STRING(akevard.VARDEPKT)
   SUBSTRING(tidut.UT,67) = "Index Iv = "
   SUBSTRING(tidut.UT,78) = STRING(KINDEX.VARDE,">>>>9").
   CREATE tidut.                        
   CREATE tidut.                        
   ASSIGN 
   SUBSTRING(tidut.UT,35) = "Pristidpunkt"
   SUBSTRING(tidut.UT,58) = STRING(MARKDIV.PRISTIDPUNKT)
   SUBSTRING(tidut.UT,67) = "Index Ip ="
   SUBSTRING(tidut.UT,78) = STRING(MARKDIV.IPVARDE,">>>>9").
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = str.  
END PROCEDURE.

PROCEDURE huvudtrafo_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/  
   FIND FIRST mval WHERE mval.MARKREC = markarec
   AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.
   IF Guru.Konstanter:globforetag = "CGRAN" THEN DO:
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "V Ä R D E R I N G S P R O T O K O L L aktbilaga nr 4"
      SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
   END.   
   ELSE DO:                
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "V Ä R D E R I N G S P R O T O K O L L    bilaga nr 4"
      SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").                           
   END.   
   CREATE tidut.
   ASSIGN                
   SUBSTRING(tidut.UT,5) = "-------------------------------------".
   CREATE tidut.
   IF Guru.Konstanter:globforetag = "UMEA" THEN DO:
      IF tillfskada = TRUE THEN DO:
         ASSIGN SUBSTRING(tidut.UT,5) = "Avseende ersättning för tillfällig skada".    
      END.    
      ELSE ASSIGN SUBSTRING(tidut.UT,5) = "Avseende ersättning för nätstation / kabelskåp".             
   END.
   IF Guru.Konstanter:globforetag = "UMBR" THEN DO:
      IF tillfskada = TRUE THEN DO:
         ASSIGN SUBSTRING(tidut.UT,5) = "Avseende ersättning för tillfällig skada".    
      END.          
      ELSE ASSIGN SUBSTRING(tidut.UT,5) = "Avseende ersättning för teknikbod".            
   END.
   ELSE ASSIGN  SUBSTRING(tidut.UT,5) = "Avseende ersättning för station / kabelskåp".    
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = mval.VARDNR USE-INDEX VARDNR
   NO-LOCK NO-ERROR.   
   CREATE tidut.
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = VARDERING.BENAMNING.   
   IF SUBSTRING(mval.ANAMN,31,80) NE "" THEN DO:   
      CREATE tidut. 
      SUBSTRING(tidut.UT,1) = SUBSTRING(mval.ANAMN,31,80).
   END.
   IF Guru.Konstanter:varforetypval[5] = 1 OR Guru.Konstanter:globforetag = "CELPA" THEN DO:       
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Nätägare:".   
      SUBSTRING(tidut.UT,13) = VARDERING.NATAGARE.
   END.
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "Beteckning:"
   SUBSTRING(tidut.UT,13) = mval.BETECKNING   
   SUBSTRING(tidut.UT,49) = "Markägarnr:"
   SUBSTRING(tidut.UT,60) = STRING(mval.MARKNR).
   IF mval.AONR NE ? THEN DO:
      ASSIGN
      SUBSTRING(tidut.UT,66) = Guru.Konstanter:gaok + ":"  
      SUBSTRING(tidut.UT,72) = mval.AONR
      SUBSTRING(tidut.UT,79) = STRING(mval.DELNR,Guru.Konstanter:varforetypchar[1]). 
   END.
   CREATE tidut.
   RUN markagupp_UI.   
   IF SUBSTRING(mval.ANAMN,1,30) NE "" THEN DO:
      CREATE tidut.
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Arrendator:"
      SUBSTRING(tidut.UT,13) = SUBSTRING(mval.ANAMN,1,30).
      
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Adress:"
      SUBSTRING(tidut.UT,9) = mval.AADRESS
      SUBSTRING(tidut.UT,45) = "Postnr:"
      SUBSTRING(tidut.UT,53) = STRING(mval.APONR,"999 99")
      SUBSTRING(tidut.UT,60) = "Postadress:"
      SUBSTRING(tidut.UT,72) = mval.APADRESS.      
   END.   
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = str.  
END PROCEDURE.

PROCEDURE akerkab_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/
   RUN huvudkab_UI.
   FIND FIRST mval WHERE mval.MARKREC = markarec
   AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.
   FOR EACH akekab WHERE akekab.MARKNR = mval.MARKNR AND akekab.BETECKNING = mval.BETECKNING:
      CREATE tidut.
      CREATE tidut.                  
      IF akekab.L1 > 0 THEN DO:      
         ASSIGN             
         SUBSTRING(tidut.UT,1) = "Längd"
         SUBSTRING(tidut.UT,10) = STRING(akekab.L1,">>>9")
         SUBSTRING(tidut.UT,16) = "m".
      END.
      IF akekab.L2 > 0 THEN DO:
         ASSIGN
         SUBSTRING(tidut.UT,19) = "Bredd kabelförband"
         SUBSTRING(tidut.UT,38) = STRING(akekab.L2,">>9.99")
         SUBSTRING(tidut.UT,45) = "meter".
      END.        
      ELSE IF Guru.Konstanter:globforetag = "CGRAN" THEN DO:
         ASSIGN
         SUBSTRING(tidut.UT,19) = "Kabelförband mindre än 1 meter".
      END.
      IF akekab.KRONOR > 0 THEN DO:      
         ASSIGN
         SUBSTRING(tidut.UT,50) = STRING(akekab.KRONOR,"->>>>>>9")
         SUBSTRING(tidut.UT,62) = "Kr".         
      END.
      IF LENGTH(akekab.BENAMNING) > 20 THEN DO:           
         CREATE tidut.
         SUBSTRING(tidut.UT,1) = akekab.BENAMNING.   
         CREATE tidut.
      END.
      ELSE SUBSTRING(tidut.UT,65) = akekab.BENAMNING.
   END.      
      
   FIND FIRST suskog2 WHERE suskog2.MARKNR = mval.MARKNR AND suskog2.BETECKNING = mval.BETECKNING
   AND suskog2.KRONOR > 0 NO-LOCK NO-ERROR.
   sumkabel = 0.
   FIND FIRST sukab WHERE sukab.MARKNR = mval.MARKNR AND sukab.BETECKNING = mval.BETECKNING 
   AND sukab.PLUS = TRUE NO-LOCK NO-ERROR.  
   IF AVAILABLE sukab THEN DO:
      sumkabel = sukab.KRONOR.
      CREATE tidut.    
      CREATE tidut.    
      IF Guru.Konstanter:globforetag = "UMBR" THEN SUBSTRING(tidut.UT,14) = "Ny optokanalisation kronor:".
      ELSE ASSIGN SUBSTRING(tidut.UT,25) = "Ny kabel kronor:".         
      SUBSTRING(tidut.UT,62) = "kr". 
      IF AVAILABLE sukab2 THEN DO:
         ASSIGN SUBSTRING(tidut.UT,50) = STRING((sukab.KRONOR - sukab2.KRONOR),"->>>>>>9").
         CREATE tidut.    
         CREATE tidut.            
         IF Guru.Konstanter:globforetag = "UMBR" THEN SUBSTRING(tidut.UT,14) = "Fast pris kronor:".
         ELSE ASSIGN SUBSTRING(tidut.UT,25) = "Fast pris kronor:".
         ASSIGN         
         SUBSTRING(tidut.UT,50) = STRING(sukab2.KRONOR,"->>>>>>9")
         SUBSTRING(tidut.UT,62) = "kr". 
      END.   
      ELSE ASSIGN SUBSTRING(tidut.UT,50) = STRING(sukab.KRONOR,"->>>>>>9").
   END.           
   CREATE tidut.                        
   IF Guru.Konstanter:globforetag = "UMBR" THEN SUBSTRING(tidut.UT,14) = "Borttagen optokanalisation kronor:".
   ELSE ASSIGN SUBSTRING(tidut.UT,25) = "Borttagen kabel kronor:".
   FIND FIRST sukab WHERE sukab.MARKNR = mval.MARKNR AND sukab.BETECKNING = mval.BETECKNING AND sukab.PLUS = FALSE NO-LOCK NO-ERROR.  
   IF AVAILABLE sukab THEN DO:
      sumkabel = sumkabel + sukab.KRONOR.
      ASSIGN              
      SUBSTRING(tidut.UT,50) = STRING(sukab.KRONOR,"->>>>>>9")
      SUBSTRING(tidut.UT,62) = "kr". 
   END.        
   CREATE tidut.                        
   ASSIGN                 
   SUBSTRING(tidut.UT,50) = "____________". 
   CREATE tidut.                        
   IF Guru.Konstanter:globforetag = "UMBR" THEN SUBSTRING(tidut.UT,14) = "Summa optokanalisation:".   
   ELSE  SUBSTRING(tidut.UT,25) = "Summa kronor jordkabel:".
   ASSIGN          
   SUBSTRING(tidut.UT,50) = STRING(sumkabel,"->>>>>>9")
   SUBSTRING(tidut.UT,62) = "kr". 
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,132) = "$".
END PROCEDURE.

PROCEDURE huvudkab_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/  
   FIND FIRST mval WHERE mval.MARKREC = markarec
   AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.
   IF Guru.Konstanter:globforetag = "CGRAN" THEN DO:
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "V Ä R D E R I N G S P R O T O K O L L aktbilaga nr 3"
      SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
   END.
   ELSE DO:
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "V Ä R D E R I N G S P R O T O K O L L    bilaga nr 3"
      SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
   END.   
   CREATE tidut.
   ASSIGN                
   SUBSTRING(tidut.UT,5) = "-------------------------------------".
   CREATE tidut.
   IF Guru.Konstanter:globforetag = "UMBR" THEN ASSIGN SUBSTRING(tidut.UT,5) = "Avseende ersättning för optokanalisation".
   ELSE  ASSIGN SUBSTRING(tidut.UT,5) = "Avseende ersättning för jordkabel".
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = mval.VARDNR USE-INDEX VARDNR
   NO-LOCK NO-ERROR.   
   CREATE tidut.
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = VARDERING.BENAMNING.      
   IF SUBSTRING(mval.ANAMN,31,80) NE "" THEN DO:   
      CREATE tidut. 
      SUBSTRING(tidut.UT,1) = SUBSTRING(mval.ANAMN,31,80).
   END.
   IF Guru.Konstanter:varforetypval[5] = 1 OR Guru.Konstanter:globforetag = "CELPA"  THEN DO:       
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Nätägare:".   
      SUBSTRING(tidut.UT,13) = VARDERING.NATAGARE.
   END.
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "Beteckning:"
   SUBSTRING(tidut.UT,13) = mval.BETECKNING
   SUBSTRING(tidut.UT,49) = "Markägarnr:"
   SUBSTRING(tidut.UT,60) = STRING(mval.MARKNR).
   IF mval.AONR NE ? THEN DO:
      ASSIGN
      SUBSTRING(tidut.UT,66) = Guru.Konstanter:gaok + ":"  
      SUBSTRING(tidut.UT,72) = mval.AONR
      SUBSTRING(tidut.UT,79) = STRING(mval.DELNR,Guru.Konstanter:varforetypchar[1]). 
   END.
   CREATE tidut.
   RUN markagupp_UI.   
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = str. 
END PROCEDURE.

PROCEDURE sumsida_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/
   RUN huvudsum_UI.
   ASSIGN 
   froterb = 0
   sumfrotpa = 0
   sumfrotpaexp = 0
   sumfrotpaOK = 0.
   FIND FIRST mval WHERE mval.MARKREC = markarec  AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.      
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR.
   EMPTY TEMP-TABLE extradatatemp NO-ERROR.
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "VARDFAST2"     
   inextradatatemp.HUVUDINT = mval.VARDNR
   inextradatatemp.HUVUDCH = mval.BETECKNING.
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:
      IF extradatatemp.SOKLOG[1] = TRUE OR extradatatemp.SOKLOG[2] = TRUE THEN DO:
      /*20181026 ändrat att exprop och överens tillkommer för både F-Försäljning och T-Tillvaratagende */          
         /*försäljning rotnetto erbjudande  och påslag*/
         IF extradatatemp.SOKLOG[1] = TRUE THEN froterb = extradatatemp.SOKINT[1].
         sumfrotpaexp = (extradatatemp.SOKINT[1] * 0.25).
         sumfrotpaok = (extradatatemp.SOKINT[1] * 0.25 * 0.2).
         sumfrotpa = (extradatatemp.SOKINT[1] * 0.25) + (extradatatemp.SOKINT[1] * 0.25 * 0.2).  
      END.          
   END.
   
   IF Guru.Konstanter:globforetag = "UMEA" OR Guru.Konstanter:globforetag = "UMBR" THEN RUN umeasumsida_UI.
   ELSE IF Guru.Konstanter:globforetag = "CGRAN" OR Guru.Konstanter:globforetag = "cELPA" THEN RUN graningesumsida_UI.
   ELSE IF Guru.Konstanter:varforetypval[5] = 1 OR Guru.Konstanter:globforetag = "ELPA" THEN RUN vesabsumsida_UI.
   ELSE RUN vesabsumsida_UI.
   
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = str.     
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = mval.VARDNR USE-INDEX VARDNR
   NO-LOCK NO-ERROR.   
   FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = VARDERING.VARDANV USE-INDEX
   PERSONALKOD NO-LOCK NO-ERROR.
   IF Guru.Konstanter:globforetag = "CGRAN" THEN DO:
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Ort och datum"
      SUBSTRING(tidut.UT,30) = "Värderingsman:".
      IF AVAILABLE PERSONALTAB THEN DO:
         Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + PERSONALTAB.PERSONALKOD.
         SUBSTRING(tidut.UT,47) = CAPS(SUBSTRING(PERSONALTAB.FORNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.FORNAMN,2)) + " " + CAPS(SUBSTRING(PERSONALTAB.EFTERNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.EFTERNAMN,2)).
      END.      
      CREATE tidut.
      CREATE tidut.
      CREATE tidut.
      CREATE tidut.
   END.
   ELSE IF Guru.Konstanter:globforetag = "UMEA"  OR Guru.Konstanter:globforetag = "UMBR" THEN DO:
      CREATE tidut.
      ASSIGN                   
      SUBSTRING(tidut.UT,1) = "Värderingsman:".
      IF AVAILABLE PERSONALTAB THEN DO:
         Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + PERSONALTAB.PERSONALKOD.
         SUBSTRING(tidut.UT,17) = CAPS(SUBSTRING(PERSONALTAB.FORNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.FORNAMN,2)) + " " + CAPS(SUBSTRING(PERSONALTAB.EFTERNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.EFTERNAMN,2)).
      END.         
      IF SUBSTRING(VARDERING.ANVANDARE,40,20) = ? OR SUBSTRING(VARDERING.ANVANDARE,40,20) = ""  THEN.
      ELSE DO:
         SUBSTRING(tidut.UT,47) = "Värderingstidpunkt:".
         SUBSTRING(tidut.UT,67) = SUBSTRING(VARDERING.ANVANDARE,40,20).
      END.
      CREATE tidut.
   END.
   ELSE DO:
      CREATE tidut.
      ASSIGN                   
      SUBSTRING(tidut.UT,1) = "Värderingsman:".
      IF AVAILABLE PERSONALTAB THEN DO:
         Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + PERSONALTAB.PERSONALKOD.
   
         SUBSTRING(tidut.UT,17) = CAPS(SUBSTRING(PERSONALTAB.FORNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.FORNAMN,2)) + " " + CAPS(SUBSTRING(PERSONALTAB.EFTERNAMN,1,1)) + LC(SUBSTRING(PERSONALTAB.EFTERNAMN,2)).
      END.         
      CREATE tidut.
   END.   
   ASSIGN             
   SUBSTRING(tidut.UT,1) = str. 
   IF Guru.Konstanter:globforetag = "UMEA" OR Guru.Konstanter:globforetag = "UMBR" THEN DO:
      IF tillfskada = FALSE THEN DO:
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,1) = "Ovanstående ersättning godkännes som full ersättning för intrång av ovanstående".
         IF Guru.Konstanter:globforetag = "UMBR" THEN.
         ELSE DO:
            CREATE tidut.
            ASSIGN             
            SUBSTRING(tidut.UT,1) = "kraftledning.".
         END.   
      END.   
   END.
   ELSE DO:   
      IF AVAILABLE OMRADETAB AND Guru.Konstanter:globforetag = "VAST"  THEN DO: 
         IF OMRADETAB.AVDELNINGNR = 1 OR OMRADETAB.AVDELNINGNR = 2 OR OMRADETAB.AVDELNINGNR = 3  THEN DO:               
            IF mval.MARKAGARE = "Jönköpings kommun" THEN DO:
                CREATE tidut.
                ASSIGN             
                SUBSTRING(tidut.UT,1) = "Angiven ersättning utgör full intrångsersättning för ledningen och dess tillbehör,som på ".
             END.
             ELSE DO:
                CREATE tidut.
                ASSIGN             
                SUBSTRING(tidut.UT,1) = "Angiven ersättning utgör full gottgörelse för skada och allt intrång, som på ".
             END.
         END.
         ELSE DO:   
            CREATE tidut.
            ASSIGN             
            SUBSTRING(tidut.UT,1) = "Angiven ersättning utgör full gottgörelse för skada och allt intrång, som på ".
         END.
      END.
      ELSE DO:   
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,1) = "Angiven ersättning utgör full gottgörelse för skada och allt intrång, som på ".
      END.
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "ifrågavarande del av ledningssträckan förorsakas av ledningsägarens rätt att på ".
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "fastigheten under all framtid bibehålla  rubricerade nät/ledning med tillhörande".
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "stolpar,stag,strävor och övriga anordningar samt att efter eget beprövande fälla".
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "för ledningen hinderliga och för dess driftsäkerhet farliga träd och buskar.(1)".
   END.
   CREATE tidut.  
   IF AVAILABLE OMRADETAB AND Guru.Konstanter:globforetag = "VAST"  THEN DO: 
      IF OMRADETAB.AVDELNINGNR = 1 OR OMRADETAB.AVDELNINGNR = 2 OR OMRADETAB.AVDELNINGNR = 3  THEN DO:      
         IF mval.MARKAGARE = "Jönköpings kommun" THEN DO:
             CREATE tidut.                      
             ASSIGN       
             SUBSTRING(tidut.UT,1) = "Villkoren för upplåtelsen regleras i separat servitutsavtal.".   
          END.
          ELSE DO:
             CREATE tidut.                      
             ASSIGN       
             SUBSTRING(tidut.UT,1) = "Detta avtal får ligga till grund för upplåtelse av ledningsrätt".   
          END.
      END.
      ELSE DO:
         CREATE tidut.                      
         ASSIGN       
         SUBSTRING(tidut.UT,1) = "Detta avtal får ligga till grund för upplåtelse av ledningsrätt".   
      END.
   END.
   ELSE DO:
      IF tillfskada = FALSE THEN DO:
         CREATE tidut.                      
         ASSIGN       
         SUBSTRING(tidut.UT,1) = "Detta avtal får ligga till grund för upplåtelse av ledningsrätt".
      END.      
   END.
   IF Guru.Konstanter:globforetag = "CGRAN"  THEN DO:
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Detta avtal får ligga till grund för upplåtelse av ledningsrätt med".             
      CREATE tidut.                      
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "bestämmelser enligt aktbilaga 7. Ansökan om ledningsrätt biträdes härmed.".   
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = str.   
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "OVANSTÅENDE ERSÄTTNING OCH LEDNINGSRÄTTSÖVERENSKOMMELSE GODKÄNNES".   
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Utbetalas till " + markvagh2 + " konto".  
      CREATE tidut.
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Konto nr:.........................".            
      FIND FIRST NRPREFISERIE WHERE NRPREFISERIE.PREFIX = VARDERING.NATAGARE NO-LOCK NO-ERROR.
      IF AVAILABLE NRPREFISERIE THEN DO:         
         IF NRPREFISERIE.PREFIX = "14"  OR NRPREFISERIE.PREFIX = "15" OR
         NRPREFISERIE.PREFIX = "17"  THEN DO:
            ASSIGN SUBSTRING(tidut.UT,40) = "Graninge Elnät Nord AB".
         END.
         ELSE IF NRPREFISERIE.PREFIX = "11"  OR NRPREFISERIE.PREFIX = "12" OR
         NRPREFISERIE.PREFIX = "13" OR NRPREFISERIE.PREFIX = "16" OR NRPREFISERIE.PREFIX = "18"  THEN DO:
            ASSIGN SUBSTRING(tidut.UT,40) = "Graninge Elnät AB".
         END.
         ELSE ASSIGN SUBSTRING(tidut.UT,40) = NRPREFISERIE.NRTEXT.
      END.                  
      CREATE tidut.
      CREATE tidut.
      ASSIGN              
      SUBSTRING(tidut.UT,1) = "Ort och datum".
      SUBSTRING(tidut.UT,40) = "Ort och datum".
      CREATE tidut.
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = ".................................".
      SUBSTRING(tidut.UT,40) = ".................................".
      CREATE tidut.
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = ".................................".      
      CREATE tidut.
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = ".................................".
      SUBSTRING(tidut.UT,40) = ".................................".
      CREATE tidut.
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = markvagh3 + " underskrift".
      SUBSTRING(tidut.UT,40) = "Ledningsägarens underskrift".
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Då fastigheten ägs av flera".   
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "ska samtliga underteckna".      
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = str.
   END.
   ELSE DO:
      str3 = str.
      ASSIGN SUBSTRING(str3,30) = " IFYLLES AV " + markvagh4.
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = str3.   
      CREATE tidut.
      IF Guru.Konstanter:globforetag = "UMEA" OR Guru.Konstanter:globforetag = "UMBR" THEN DO:
         ASSIGN                               
         SUBSTRING(tidut.UT,1) = "OVANSTÅENDE ERSÄTTNING GODKÄNNES AV " + markvagh4
         /*SUBSTRING(tidut.UT,50) = "Utbetalas till " + markvagh2 + " bankgiro,".   ny text 20210526 Lena*/
         SUBSTRING(tidut.UT,50) = "Uppgift om bankkonto eller bankgiro ".                                         
         SUBSTRING(tidut.UT,88) = "I".
         CREATE tidut.
         ASSIGN                       
         SUBSTRING(tidut.UT,1) = "Ort, datum och underskrift"
         /*SUBSTRING(tidut.UT,50) = "postgiro eller bankkonto:".*/
         SUBSTRING(tidut.UT,50) = "för utbetalning av ersättning:".
         SUBSTRING(tidut.UT,88) = "I".
         CREATE tidut.
         ASSIGN                       
         SUBSTRING(tidut.UT,88) = "I".
         CREATE tidut.
         ASSIGN                      
         SUBSTRING(tidut.UT,1) = ".................................".
         SUBSTRING(tidut.UT,50) = "_________________________________". 
         SUBSTRING(tidut.UT,88) = "I".
         CREATE tidut.      
         SUBSTRING(tidut.UT,88) = "I".
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,1) = ".................................".
         SUBSTRING(tidut.UT,88) = "I".
         IF tillfskada = FALSE THEN DO:
            CREATE tidut.
            ASSIGN             
            SUBSTRING(tidut.UT,35) = "Då fastigheten ägs av makar".
            SUBSTRING(tidut.UT,88) = "I".
            CREATE tidut.
            ASSIGN              
            SUBSTRING(tidut.UT,1) = "................................."
            SUBSTRING(tidut.UT,35) = "ska båda underteckna".         
            SUBSTRING(tidut.UT,88) = "I".
         END.              
      END.
      ELSE DO:      
         ASSIGN                      
         SUBSTRING(tidut.UT,1) = "Utbetalas till " + markvagh2 + " bankgiro,"
         SUBSTRING(tidut.UT,40) = "OVANSTÅENDE ERSÄTTNING GODKÄNNES AV " + markvagh4.
         SUBSTRING(tidut.UT,88) = "I".
         CREATE tidut.
         ASSIGN              
         SUBSTRING(tidut.UT,1) = "postgiro eller konto med clearingnr:"
         SUBSTRING(tidut.UT,40) = "Ort, datum och underskrift".
         SUBSTRING(tidut.UT,88) = "I".
         CREATE tidut.
         ASSIGN                       
         SUBSTRING(tidut.UT,88) = "I".
         CREATE tidut.
         ASSIGN                      
         SUBSTRING(tidut.UT,1) = "_________________________________". 
         SUBSTRING(tidut.UT,40) = ".................................".
         SUBSTRING(tidut.UT,88) = "I".
         CREATE tidut.      
         SUBSTRING(tidut.UT,88) = "I".
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,40) = ".................................".
         SUBSTRING(tidut.UT,88) = "I".
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,10) = "Då fastigheten ägs av makar".
         SUBSTRING(tidut.UT,88) = "I".
         CREATE tidut.
         ASSIGN              
         SUBSTRING(tidut.UT,10) = "ska båda underteckna"
         SUBSTRING(tidut.UT,40) = ".................................".   
         SUBSTRING(tidut.UT,88) = "I".        
      END.
      str3 = str.         
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = str3.   
      str3 = str.
      ASSIGN SUBSTRING(str3,30) = " IFYLLES AV NÄTÄGARE ".      
      IF Guru.Konstanter:globforetag = "UMEA" OR Guru.Konstanter:globforetag = "UMBR" THEN DO:
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,1) = str3.                     
         CREATE tidut.
         ASSIGN                   
         SUBSTRING(tidut.UT,1) = "Ort och datum".
         SUBSTRING(tidut.UT,88) = "I".
         CREATE tidut.
         SUBSTRING(tidut.UT,88) = "I".
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,1) = "................................."         
         SUBSTRING(tidut.UT,88) = "I".
         CREATE tidut.
         ASSIGN                      
         SUBSTRING(tidut.UT,1) = "Godkännes för betalning".
         SUBSTRING(tidut.UT,88) = "I".
         CREATE tidut.
         SUBSTRING(tidut.UT,88) = "I".
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,1) = "................................."         
         SUBSTRING(tidut.UT,88) = 'I'.
         str3 = str.         
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,1) = str3.
      END.
      ELSE DO:      
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,1) = str3.      
         /*  gamla VOST*/
         IF AVAILABLE OMRADETAB AND Guru.Konstanter:globforetag = "VAST" AND OMRADETAB.AVDELNINGNR = 3 THEN DO:         
            CREATE tidut.
            CREATE tidut.
            CREATE tidut.
            CREATE tidut.
            CREATE tidut.
            CREATE tidut.
            CREATE tidut.         
         END.
         ELSE DO:         
            CREATE tidut.
            ASSIGN             
            SUBSTRING(tidut.UT,1) = "Utbetalas "
            SUBSTRING(tidut.UT,40) = "Ort och datum".
            SUBSTRING(tidut.UT,88) = "I".
            CREATE tidut.
            SUBSTRING(tidut.UT,88) = "I".
            CREATE tidut.
            ASSIGN             
            SUBSTRING(tidut.UT,1) = "................................."
            SUBSTRING(tidut.UT,40) = ".................................".
            SUBSTRING(tidut.UT,88) = "I".
            CREATE tidut.
            ASSIGN             
            SUBSTRING(tidut.UT,1) = "Konto"
            SUBSTRING(tidut.UT,40) = "Godkännes för betalning".
            SUBSTRING(tidut.UT,88) = "I".
            CREATE tidut.
            SUBSTRING(tidut.UT,88) = "I".
            CREATE tidut.
            ASSIGN             
            SUBSTRING(tidut.UT,1) = "................................."
            SUBSTRING(tidut.UT,40) = ".................................".      
            SUBSTRING(tidut.UT,88) = 'I'.
            str3 = str.            
         END.
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,1) = str3.
      END.
   END.
   
   IF tillfskada = FALSE THEN DO:
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "(1) markägaren bör beakta möjligheten att erhålla hjälp av ledningsägarens ". 
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "personal med avverkning, som kan medföra risker på grund av närhet till".
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "spänningsförande ledningar. Tillfälliga skador, regleras vid skadetillfället.".
   END.
   ELSE DO:
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Tillfälliga skador, regleras vid skadetillfället.".
   END.
   IF Guru.Konstanter:globforetag = "UMEA"  OR Guru.Konstanter:globforetag = "UMBR" THEN DO:
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = str3.
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Umeå Energi Elnät AB är personuppgiftsansvarig för personuppgifter som lämnas av".
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "respektive markägare vid avtalstecknandet. Umeå Energi-koncernen behandlar".
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "personuppgifter enligt gällande dataskyddslagstiftning.".
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Mer information finns på Umeå Energis webb: www.umeaenergi.se/integritetspolicy".
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = str3.       
   END.          
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,132) = "$".
   
END PROCEDURE.

PROCEDURE vesabsumsida_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/
 
   FIND FIRST mval WHERE mval.MARKREC = markarec
   AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = str.
   CREATE tidut.                        
   ASSIGN           
   SUBSTRING(tidut.UT,48) = "Fast"  
   SUBSTRING(tidut.UT,64) = "Borttaget"
   SUBSTRING(tidut.UT,78) = "Nytt".
    CREATE tidut.                        
   ASSIGN             
   SUBSTRING(tidut.UT,48) = "pris Kr"
   SUBSTRING(tidut.UT,64) = "intrång Kr"
   SUBSTRING(tidut.UT,78) = "intrång Kr".
   CREATE tidut.                        
   ASSIGN             
   SUBSTRING(tidut.UT,48) = "----------"
   SUBSTRING(tidut.UT,64) = "----------"
   SUBSTRING(tidut.UT,78) = "----------".
   sumakern = 0.
   FIND FIRST suaker WHERE suaker.MARKNR = mval.MARKNR AND suaker.BETECKNING = mval.BETECKNING AND
   suaker.PLUS = TRUE AND suaker.L5 = 0 NO-LOCK NO-ERROR.
   IF AVAILABLE suaker THEN ASSIGN  sumakern = suaker.KRONOR.
   sumakernpro = 0.
   FIND FIRST suaker2 WHERE suaker2.MARKNR = mval.MARKNR AND suaker2.BETECKNING = mval.BETECKNING AND
   suaker2.PLUS = TRUE AND suaker2.L5 = 0 NO-LOCK NO-ERROR.
   IF AVAILABLE suaker2 THEN ASSIGN  sumakernpro = suaker2.KRONOR.
   sumakerb = 0.
   FIND FIRST suaker WHERE suaker.MARKNR = mval.MARKNR AND suaker.BETECKNING = mval.BETECKNING AND
   suaker.PLUS = FALSE AND suaker.L5 = 0 NO-LOCK NO-ERROR.
   IF AVAILABLE suaker THEN ASSIGN  sumakerb = suaker.KRONOR.    
   CREATE sumtemp.
   ASSIGN
   /*sumtemp.VARDNR = mval.VARDNR*/
   sumtemp.BETECKNING = mval.BETECKNING
   sumtemp.MARKNR = mval.MARKNR
   sumtemp.PROCENT = mval.PRODEL
   /*sumtemp.PRODEL = mval.PRODEL   /*  DECIMALER*/*/
   sumtemp.OMF = sumakernpro  
   sumtemp.OMB = sumakerb 
   sumtemp.OMN = sumakern - sumakernpro
   sumtemp.FROTPAEXP = sumfrotpaexp
   sumtemp.FROTPAOK = sumfrotpaok
   sumtemp.FROTPA = sumfrotpa.
         
   IF mval.PROCENT NE 100 THEN DO:
      sumakerb = sumakerb * mval.PRODEL / 100. 
      sumakern = sumakern * mval.PRODEL / 100.
      sumakernpro = sumakernpro * mval.PRODEL / 100.
      sumfrotpaexp = sumfrotpaexp * mval.PRODEL / 100.
      sumfrotpaok = sumfrotpaok * mval.PRODEL / 100.
      sumfrotpa = sumfrotpa * mval.PRODEL / 100.   
   END.
   /*Lägg bara ut bilagorna om det finns något belopp - handfast 02/17/2005*/
   IF sumakernpro = 0 AND sumakerb = 0 AND (sumakern - sumakernpro) = 0  THEN sumakernpro = sumakernpro.
   ELSE DO:   
      CREATE tidut.                        
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Öppen mark enligt bilaga nr 1".      
      IF mval.PROCENT NE 100 THEN DO:
         IF mval.ANDEL NE "" THEN DO:            
            ASSIGN SUBSTRING(tidut.UT,38) = mval.ANDEL.            
         END.
         ELSE DO:         
            ASSIGN
            SUBSTRING(tidut.UT,32) = string(mval.PROCENT,">>9")
            SUBSTRING(tidut.UT,35) = "%".
         END.
      END.
      
      ASSIGN                                          
      SUBSTRING(tidut.UT,48) = STRING(sumakernpro,"->>>>>>9")
      SUBSTRING(tidut.UT,63) = STRING(sumakerb,"->>>>>>9") 
      SUBSTRING(tidut.UT,80) = STRING((sumakern - sumakernpro),"->>>>>>9").
   END.
   
   ASSIGN sumskogb = 0
   sumskogn = 0.
   sumskognpro = 0.
   FIND FIRST suskog WHERE suskog.MARKNR = mval.MARKNR AND suskog.BETECKNING = mval.BETECKNING AND
   suskog.KRONOR > 0 NO-LOCK NO-ERROR.
   IF AVAILABLE suskog THEN ASSIGN  sumskogn = suskog.KRONOR.
   FIND FIRST suskog2 WHERE suskog2.MARKNR = mval.MARKNR AND suskog2.BETECKNING = mval.BETECKNING AND
   suskog2.KRONOR > 0 NO-LOCK NO-ERROR.   
   IF AVAILABLE suskog2 THEN ASSIGN  sumskognpro = suskog2.KRONOR.
   /*TECTEL LÄGGER IN 50-ÅR SKOGNORM SOM FAST PRIS*/
   /*omgjort - alla kan lägga in skognorm 2009- som harmnar som FAST PRIS */
   sumskognpro = 0.
   /*IF Guru.Konstanter:globforetag = "TECT" OR Guru.Konstanter:globforetag = "PICA" OR Guru.Konstanter:globforetag = "SWEO" OR Guru.Konstanter:globforetag = "REJI" OR Guru.Konstanter:globforetag = "ELPC" OR
    Guru.Konstanter:globforetag = "SKOK" OR Guru.Konstanter:globforetag = "JSBF" OR Guru.Konstanter:globforetag = "ATS" OR Guru.Konstanter:globforetag = "ELPA" THEN sumskognpro = 0.*/
   sumskogb = 0.
   FOR EACH suskog WHERE suskog.MARKNR = mval.MARKNR AND suskog.BETECKNING = mval.BETECKNING AND
   suskog.KRONOR < 0 NO-LOCK.
      sumskogb = sumskogb + suskog.KRONOR.
   END.   

   stsuad = 0.
   RUN storskog_UI.     
   FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
   IF AVAILABLE sumtemp THEN DO:
      ASSIGN
      sumtemp.SMF = sumskognpro
      sumtemp.SMB = sumskogb 
      sumtemp.SMN = sumskogn - sumskognpro.
   END.   
   IF mval.PROCENT NE 100 THEN DO:
      sumskogb = sumskogb * mval.PRODEL / 100. 
      sumskogn = sumskogn * mval.PRODEL / 100. 
      sumskognpro = sumskognpro * mval.PRODEL / 100.        
   END.   
   /*Lägg bara ut bilagorna om det finns något belopp- handfast 02/17/2005*/
   IF sumskognpro = 0 AND sumskogb = 0 AND (sumskogn - sumskognpro) = 0  THEN sumskognpro = sumskognpro.
   ELSE DO:   
      CREATE tidut.                        
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Skogsmark  enligt bilaga nr 2".
      IF mval.PROCENT NE 100 THEN DO:
         IF mval.ANDEL NE "" THEN DO:            
            ASSIGN SUBSTRING(tidut.UT,38) = mval.ANDEL.            
         END.
         ELSE DO:  
            ASSIGN
            SUBSTRING(tidut.UT,32) = string(mval.PROCENT,">>9")
            SUBSTRING(tidut.UT,35) = "%".
         END.
      END.
      ASSIGN  
      SUBSTRING(tidut.UT,48) = STRING(sumskognpro,"->>>>>>9")       
      SUBSTRING(tidut.UT,63) = STRING(sumskogb,"->>>>>>9") 
      SUBSTRING(tidut.UT,80) = STRING((sumskogn - sumskognpro),"->>>>>>9").
   END.         
   
   sumkabeln = 0.
   sumkabelndec = 0.
   FIND FIRST sukab WHERE sukab.MARKNR = mval.MARKNR AND sukab.BETECKNING = mval.BETECKNING AND
   sukab.PLUS = TRUE NO-LOCK NO-ERROR.   
   IF AVAILABLE sukab THEN DO:
      ASSIGN  
      sumkabeln = sukab.KRONOR.
      sumkabelndec = sukab.KRDEC.
   END.           
   /* sumkabelnpro = FAST PRIS*/
   sumkabelnpro = 0.
   FIND FIRST sukab2 WHERE sukab2.MARKNR = mval.MARKNR AND sukab2.BETECKNING = mval.BETECKNING AND
   sukab2.PLUS = TRUE NO-LOCK NO-ERROR.
   IF AVAILABLE sukab2 THEN ASSIGN  sumkabelnpro = sukab2.KRONOR.
   sumkabelb = 0.
   FIND FIRST sukab WHERE sukab.MARKNR = mval.MARKNR AND sukab.BETECKNING = mval.BETECKNING AND
   sukab.PLUS = FALSE NO-LOCK NO-ERROR.
   IF AVAILABLE sukab THEN ASSIGN  sumkabelb = sukab.KRONOR. 
   
   FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
   IF AVAILABLE sumtemp THEN DO:
      ASSIGN
      sumtemp.JKF = sumkabelnpro 
      sumtemp.JKB = sumkabelb 
      sumtemp.JKN = sumkabeln - sumkabelnpro.
      sumtemp.JKNDEC = sumkabelndec - sumkabelnpro.    
      IF Guru.Konstanter:globforetag = "UMEA" OR Guru.Konstanter:globforetag = "UMBR" THEN lagjord = FALSE.
      ELSE lagjord = TRUE.                              
      IF lagjord = TRUE THEN DO:      
         lagjord = FALSE.      
         /*skilj ut jordkabel lågspännning öst tectel*/
         ASSIGN
         sumtemp.JKLN = 0
         sumtemp.JKLF = 0
         sumtemp.JKLB = 0.         
         IF sumtemp.JKLN NE 0 THEN sumtemp.JKN = sumtemp.JKN - sumtemp.JKLN.
         IF sumtemp.JKLN NE 0 THEN sumtemp.JKNDEC = sumtemp.JKNDEC - sumtemp.JKLN.         
         IF sumtemp.JKLF NE 0 THEN sumtemp.JKF = sumtemp.JKF - sumtemp.JKLF.
         IF sumtemp.JKLB NE 0 THEN sumtemp.JKB = sumtemp.JKB - sumtemp.JKLB.         
      END.
   END.
   
   IF mval.PROCENT NE 100 THEN DO:
      sumkabelb = sumkabelb * mval.PRODEL / 100. 
      sumkabeln = sumkabeln * mval.PRODEL / 100.
      sumkabelndec = sumkabelndec * mval.PRODEL / 100.   
      sumkabelnpro = sumkabelnpro * mval.PRODEL / 100.
   END. 
   /*Lägg bara ut bilagorna om det finns något belopp - handfast 02/17/2005*/
   IF sumkabelnpro = 0 AND sumkabelb = 0 AND (sumkabeln - sumkabelnpro) = 0  THEN sumkabelnpro = sumkabelnpro.
   ELSE DO:   
      CREATE tidut.                        
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Jordkabel  enligt bilaga nr 3".
      IF mval.PROCENT NE 100 THEN DO:
         IF mval.ANDEL NE "" THEN DO:            
            ASSIGN SUBSTRING(tidut.UT,38) = mval.ANDEL.            
         END.
         ELSE DO:  
            ASSIGN
            SUBSTRING(tidut.UT,32) = string(mval.PROCENT,">>9")
            SUBSTRING(tidut.UT,35) = "%".
         END.
      END.
      ASSIGN     
      SUBSTRING(tidut.UT,48) = STRING(sumkabelnpro,"->>>>>>9")
      SUBSTRING(tidut.UT,63) = STRING(sumkabelb,"->>>>>>9").
      IF sumkabeln > 0 THEN  SUBSTRING(tidut.UT,80) = STRING((sumkabelndec - sumkabelnpro),"->>>>>>9").
      ELSE SUBSTRING(tidut.UT,80) = STRING((sumkabeln - sumkabelnpro),"->>>>>>9").
   END.
   
   sumtrafon = 0.
   FIND FIRST suaker WHERE suaker.MARKNR = mval.MARKNR AND suaker.BETECKNING = mval.BETECKNING AND
   suaker.PLUS = TRUE AND suaker.L5 = 1 NO-LOCK NO-ERROR.
   IF AVAILABLE suaker THEN ASSIGN  sumtrafon = suaker.KRONOR.
   sumtrafopro = 0.
   FIND FIRST suaker2 WHERE suaker2.MARKNR = mval.MARKNR AND suaker2.BETECKNING = mval.BETECKNING AND
   suaker2.PLUS = TRUE AND suaker2.L5 = 1 NO-LOCK NO-ERROR.
   IF AVAILABLE suaker2 THEN ASSIGN  sumtrafopro = suaker2.KRONOR.
   sumtrafob = 0.
   FIND FIRST suaker WHERE suaker.MARKNR = mval.MARKNR AND suaker.BETECKNING = mval.BETECKNING AND
   suaker.PLUS = FALSE AND suaker.L5 = 1 NO-LOCK NO-ERROR.
   IF AVAILABLE suaker THEN ASSIGN  sumtrafob = suaker.KRONOR. 
   FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
   IF AVAILABLE sumtemp THEN DO:
      /* sumtrafopro = sumtrafon alltså är alltid  sumtemp.TSN = 0 */      
      ASSIGN
      sumtemp.TSF = sumtrafopro 
      sumtemp.TSB = sumtrafob 
      sumtemp.TSN = sumtrafon - sumtrafopro.                  
       
      /*IF Guru.Konstanter:globforetag = "UMEA" OR  Guru.Konstanter:globforetag = "UMBR" THEN lagjord = FALSE.
      ELSE lagjord = TRUE.
      Umeå energi har börjat ersätta kabelskåp 201709*/
      lagjord = TRUE.                                          
      IF lagjord = TRUE THEN DO:      
         lagjord = FALSE.      
         /*skilj ut kabelskåp */
         ASSIGN
         sumtemp.TSKN = 0
         sumtemp.TSKF = 0
         sumtemp.TSKB = 0.
         /*kabelskåp och trafo sparas alltid med FASTPRIS = TRUE
         bara sumtemp.TSKF som används*/
         FOR EACH akevard WHERE akevard.MARKNR = mval.MARKNR AND akevard.BETECKNING = mval.BETECKNING
         AND akevard.L5 = 1 AND akevard.L4 = 1 AND akevard.FASTPRIS = TRUE NO-LOCK:
            sumtemp.TSKF = sumtemp.TSKF  + akevard.KRONOR.
         END.
         
         FOR EACH akevard WHERE akevard.MARKNR = mval.MARKNR AND akevard.BETECKNING = mval.BETECKNING
         AND akevard.L5 = 1 AND akevard.L4 = 1 AND akevard.PLUS = TRUE AND akevard.FASTPRIS = FALSE NO-LOCK:
            sumtemp.TSKN = sumtemp.TSKN + akevard.KRONOR.
         END.
                 
         FOR EACH akevard WHERE akevard.MARKNR = mval.MARKNR AND akevard.BETECKNING = mval.BETECKNING
         AND akevard.L5 = 1 AND akevard.L4 = 1 AND akevard.PLUS = FALSE AND akevard.FASTPRIS = FALSE NO-LOCK:
            sumtemp.TSKB = sumtemp.TSKB  + akevard.KRONOR.
         END.
         IF sumtemp.TSKF NE 0 THEN sumtemp.TSF = sumtemp.TSF - sumtemp.TSKF.
         IF sumtemp.TSKN NE 0 THEN sumtemp.TSN = sumtemp.TSN - sumtemp.TSKN.         
         IF sumtemp.TSKB NE 0 THEN sumtemp.TSB = sumtemp.TSB - sumtemp.TSKB.                  
      END.          
      /* lagt till + sumtemp.TSKF TSKB TSKN + sumtemp.JKLF sumtemp.JKLB sumtemp.JKLN*/
      
      ASSIGN
      sumtemp.SUMF = sumtemp.SMF + sumtemp.JKF + sumtemp.JKLF + sumtemp.OMF + sumtemp.TSF + sumtemp.TSKF  /*bara fast pris*/
      sumtemp.SUMB = sumtemp.SMB + sumtemp.JKB + sumtemp.JKLB + sumtemp.OMB + sumtemp.TSB + sumtemp.TSKB      
      sumtemp.SUMN = sumtemp.SMN + sumtemp.JKN + sumtemp.JKLN + sumtemp.OMN + sumtemp.TSN + sumtemp.TSKN + sumtemp.FROTPAEXP
      sumtemp.SUMNDEC = sumtemp.SMN + sumtemp.JKNDEC + sumtemp.JKLN + sumtemp.OMN + sumtemp.TSN + sumtemp.TSKN + sumtemp.FROTPAEXP          
      sumtemp.NINTRANG = sumtemp.SMN + sumtemp.JKN + sumtemp.JKLN + + sumtemp.OMN + sumtemp.TSN + sumtemp.TSKN + sumtemp.SMB + sumtemp.JKB + sumtemp.JKLB + sumtemp.OMB + sumtemp.TSB + sumtemp.TSKB + sumtemp.FROTPAEXP.                                                                                                             
      sumtemp.NINTRANGDEC = sumtemp.SMN + sumtemp.JKNDEC + sumtemp.JKLN + + sumtemp.OMN + sumtemp.TSN + sumtemp.TSKN + sumtemp.SMB + sumtemp.JKB + sumtemp.JKLB + sumtemp.OMB + sumtemp.TSB + sumtemp.TSKB + sumtemp.FROTPAEXP.                                                                                                              
   END.
   
   IF mval.PROCENT NE 100 THEN DO:
      sumtrafob = sumtrafob * mval.PRODEL / 100. 
      sumtrafon = sumtrafon * mval.PRODEL / 100.
      sumtrafopro = sumtrafopro * mval.PRODEL / 100.   
   END.
   
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "REVAVTAL"                   
   inextradatatemp.HUVUDINT = mval.VARDNR
   inextradatatemp.HUVUDCH = mval.BETECKNING.                          
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FOR EACH extradatatemp : 
      sumtemp.revers = sumtemp.revers +  extradatatemp.SOKDEC[3].                       
   END.
    
   /*Lägg bara ut bilagorna om det finns något belopp - handfast 02/17/2005*/
   IF sumtrafopro = 0 AND sumtrafob = 0 AND (sumtrafon - sumtrafopro) = 0  THEN sumtrafopro = sumtrafopro.
   ELSE DO:   
      CREATE tidut.                        
      ASSIGN       
      SUBSTRING(tidut.UT,1) = kabstn + "enligt bilaga 4".      
      IF mval.PROCENT NE 100 THEN DO:
         IF mval.ANDEL NE "" THEN DO:            
            ASSIGN SUBSTRING(tidut.UT,38) = mval.ANDEL.            
         END.
         ELSE DO:  
            ASSIGN
            SUBSTRING(tidut.UT,38) = string(mval.PROCENT,">>9")
            SUBSTRING(tidut.UT,41) = "%".
         END.
      END.
      ASSIGN   
      SUBSTRING(tidut.UT,48) = STRING(sumtrafopro,"->>>>>>9")
      SUBSTRING(tidut.UT,63) = STRING(sumtrafob,"->>>>>>9") 
      SUBSTRING(tidut.UT,80) = STRING((sumtrafon - sumtrafopro),"->>>>>>9").
   END.
   
   IF sumkabelndec > 0 THEN sumallan = sumskogn + sumkabelndec + sumakern  + sumtrafon + sumfrotpaexp.
   ELSE sumallan = sumskogn + sumkabeln + sumakern  + sumtrafon + sumfrotpaexp.
   sumallab = sumskogb + sumkabelb + sumakerb  + sumtrafob.   
   sumplus = sumallan + sumallab.      
   sumproc = sumplus - sumskognpro - sumkabelnpro - sumakernpro  - sumtrafopro.   
      
/*   sumproc = sumskognpro + sumkabelnpro + sumakernpro + sumallab.*/
   IF sumfrotpa > 0 THEN DO:
      CREATE tidut.                        
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Exprop för virkesvärde(virke ersätts separat)"       
      SUBSTRING(tidut.UT,80) = STRING((sumfrotpaexp),"->>>>>>9").
   END.

   CREATE tidut.                        
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "Summa intrång"
   SUBSTRING(tidut.UT,48) = STRING((sumskognpro + sumkabelnpro + sumakernpro  + sumtrafopro),"->>>>>>9")
   SUBSTRING(tidut.UT,63) = STRING(sumallab,"->>>>>>9") 
   SUBSTRING(tidut.UT,80) = STRING((sumallan - sumskognpro - sumkabelnpro - sumakernpro - sumtrafopro),"->>>>>>9").
   CREATE tidut.                        
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "Borttaget intrång"      
   SUBSTRING(tidut.UT,80) = STRING(sumallab,"->>>>>>9"). 
   CREATE tidut.                        
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "Nytt intrång"         
   SUBSTRING(tidut.UT,80) = STRING((sumproc),"->>>>>>9").
   
   IF Guru.Konstanter:varforetypval[40] = 1 THEN DO:
      ASSIGN
      paslag = 0
      pslag = 0.
   END.
   ELSE DO:         
      /*Påslag 25% på inrångsersättning 20100801*/
      /*för åkernorm avser 66% av ersättningsbeloppen intrångsersättning*/
      
      paslag = ( sumproc + sumtrafopro) * 0.25  - ((sumakern + sumakerb) * 0.34 * 0.25).
      IF  sumtemp.NINTRANGDEC > 0 THEN pslag = (sumtemp.NINTRANGDEC + sumtemp.TSF + sumtemp.TSKF) * 0.25 - ((sumtemp.OMN + sumtemp.OMB) * 0.34 * 0.25).
      ELSE pslag = (sumtemp.NINTRANG + sumtemp.TSF  + sumtemp.TSKF) * 0.25 - ((sumtemp.OMN + sumtemp.OMB) * 0.34 * 0.25).
      paslag = ROUND(paslag,0).
      pslag = ROUND(pslag,0).
        
   END.
   
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = str. 
   minsumma = FALSE.
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = "Ersättning för intrång genom ledning enl ovan".   
   /*Obs ändrat alla har minimiersättningskoll    */   
   FIND FIRST MARKDIV NO-LOCK NO-ERROR.
   /* ändrat från 0.15 till 0.2 20141105 Lena*/  
   overenskom = 0.15.
   IF TODAY ge 11/15/2014 THEN   overenskom = 0.2.
   
   IF Guru.Konstanter:globforetag = "skok" THEN DO:
      /*luleå boden och Jukkasjärvi har kvar 15% 20150209*/
      FIND FIRST VARDERING WHERE VARDERING.VARDNR = mval.VARDNR USE-INDEX VARDNR   NO-LOCK NO-ERROR.
      IF AVAILABLE VARDERING THEN DO:
        /* Enligt Emil Rolfs har Jukkasjärvi gått över från 15 till 20 procent  Lena 20180816 
        IF VARDERING.NATAGARE BEGINS "Vattenfall" THEN .
         ELSE overenskom = 0.15.*/
         /*enligt pernilla hansson skok har luleå 0.20 20181001*/
         /*IF VARDERING.NATAGARE BEGINS "Luleå" THEN overenskom = 0.15.*/
         IF VARDERING.NATAGARE BEGINS "Boden" THEN overenskom = 0.15.
      END.   
   END.  
   IF Guru.Konstanter:globforetag = "KRIN" THEN overenskom = 0.15.
   /*IF Guru.Konstanter:globforetag = "snat" THEN overenskom = 0.25.  Birgitta har ok:at 20% 20151210*/ 
    
  
   IF  ( ((sumproc + sumtrafopro ) * 100 / mval.PRODEL ) * overenskom )  > (bbelopp * 20 ) THEN DO:       
      tillagg = (bbelopp * 20) * mval.PROCENT / 100.
      tlagg = (bbelopp * 20).      
   END.   
   ELSE DO:   
      /* ÖVERENSKOMMELSE FÖR ÅKER ÄNDRAD 20170208 
      Enligt Fredrik Henriksson
      beräkningen anpassats till att både expropriationslagstillägget (25%) och frivillighet/överenskommelse (20%) ska beräknas på 66% av ersättningsbeloppet i åkernormen. 
      Detta beror på att endast 66% anses vara intrångsersättning och resterande del övrig ersättning.*/
      korroveraker = ( 1 /( 1 + (0.25 * 0.66))) * 0.66 + (1 - ( 1 /( 1 + (0.25 * 0.66)))).
      
      tillagg = ( sumproc  + sumtrafopro + paslag - (( sumakern + sumakerb ) * (1 - korroveraker))  ) * overenskom.     
      FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
      IF AVAILABLE sumtemp THEN DO:   
         IF  sumtemp.NINTRANGDEC > 0 THEN tlagg = (sumtemp.NINTRANGDEC + sumtemp.TSF + sumtemp.TSKF + pslag - ((sumtemp.OMN + sumtemp.OMB) * (1 - korroveraker))) * overenskom.              
         ELSE tlagg = (sumtemp.NINTRANG + sumtemp.TSF + sumtemp.TSKF  + pslag - ((sumtemp.OMN + sumtemp.OMB) * (1 - korroveraker))) * overenskom.         
      END.      
   END.
   tillagg = ROUND(tillagg,0).
   tlagg = ROUND(tlagg,0). 
   gerspro = 0.
   gers = 0.

   IF storsu > 0 THEN RUN moment2_UI.   
   IF stsuad > 0 THEN DO: 
    
      /* tillägg storskog ska ersätta vanligt tillägg enligt TureÖstberg 20090929*/
      sumtemp.OVRIG = tlagg.     
      tillagg = stsuad * mval.PROCENT / 100.
      tlagg = stsuad.
      SUBSTRING(tidut.UT,80) = STRING((sumproc + sumtrafopro),"->>>>>>9").          
      IF Guru.Konstanter:varforetypval[40] = 0 THEN DO:
         IF paslag > 0  THEN DO:
            CREATE tidut.
            ASSIGN
            SUBSTRING(tidut.UT,1) = "Påslag 25% på intrångsersättning"      
            SUBSTRING(tidut.UT,80) = STRING((paslag),"->>>>>>9").            
         END.
      END.                       
      CREATE tidut.
      ASSIGN SUBSTRING(tidut.UT,1) = "Tillägg enligt avtal med storskogsbruket" + moment2.      
      ASSIGN SUBSTRING(tidut.UT,80) = STRING((tillagg),"->>>>>>9").
      FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
      IF AVAILABLE sumtemp THEN DO:                     
         ASSIGN                           
         sumtemp.TILLAGG = tlagg.             
      END.       
     
      IF Guru.Konstanter:varforetypval[40] = 1 THEN DO:           
         /*inget påslag om storskog*/
         ASSIGN
         paslag = 0
         pslag = 0.
      END.   
   END.
   ELSE DO:
         
      nypolicygers = FALSE.         
      IF vardartal GE 2020 AND Guru.Konstanter:varforetypval[58] = 1 THEN nypolicygers = TRUE.
      IF Guru.Konstanter:globforetag = "POWE" OR Guru.Konstanter:globforetag = "PFBK" OR Guru.Konstanter:globforetag = "KEWA" OR Guru.Konstanter:globforetag = "GULL" THEN DO:
         FIND FIRST VARDERING WHERE VARDERING.VARDNR = mval.VARDNR NO-LOCK NO-ERROR.
         IF AVAILABLE VARDERING THEN DO:
            IF VARDERING.NATAGARE BEGINS "Ellevio" THEN nypolicygers = TRUE. 
            IF VARDERING.NATAGARE = "Dala Energi" THEN nypolicygers = FALSE.                              
         END.
      END.                 
      IF nypolicygers = TRUE THEN DO:           
         nypolicygers = FALSE.                                     
         ASSIGN
         SUBSTRING(tidut.UT,80) = STRING((sumproc + sumtrafopro),"->>>>>>9").
         IF Guru.Konstanter:varforetypval[40] = 1 THEN DO: 
            FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
            IF AVAILABLE sumtemp THEN DO:
               /* varav exprop*/ 
               vexprop = ((sumtemp.OMN + sumtemp.OMB) * ( 1 - ( 1 / ( 1 + (0.25 * 0.66)))))  + ((sumtemp.SMN + sumtemp.SMB) * ( 1 - (1 / 1.25))) + ((sumtemp.TSF + sumtemp.TSKF) * ( 1 - (1 / 1.25))) +  (sumtemp.JKNDEC * ( 1 - (1 / 1.25))) + sumtemp.FROTPAEXP.
               vexprop = vexprop * mval.PRODEL / 100.
               CREATE tidut.           
               SUBSTRING(tidut.UT,1) = "Varav tillägg enligt expropriationslagen".      
               SUBSTRING(tidut.UT,80) = STRING(vexprop ,"->>>>>>9").
                     
            END.   
         END.             
         /*påslag 25% på intrångsersättning (bil 1,2,3) 20100801*/         
         IF paslag > 0  THEN DO:
            CREATE tidut.
            ASSIGN
            SUBSTRING(tidut.UT,1) = "Påslag 25% på intrångsersättning"      
            SUBSTRING(tidut.UT,80) = STRING((paslag),"->>>>>>9").         
         END.
        
         CREATE tidut.
         ASSIGN                       
         SUBSTRING(tidut.UT,1) = "Tillägg till uppgörelsen " + STRING(overenskom * 100) + " %".      
         SUBSTRING(tidut.UT,80) = STRING((tillagg),"->>>>>>9").
         FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
         IF AVAILABLE sumtemp THEN DO:                     
            ASSIGN         
            sumtemp.OVRIG = tlagg.          
            sumtemp.TILLAGG = tlagg.                      
         END.
         
         /*om det bara finns rev inlagt - nolla grunders och lägg in rev delarna i översikt   LENA 20200406*/         
         IF sumproc + sumtrafopro = 0 AND sumtemp.REVERS > 0 THEN DO:
   
            RUN revadmhmt_UI (INPUT vardartal, OUTPUT azon1, OUTPUT azon2, OUTPUT afastb).
            sumtemp.revfb =  afastb.                        
            sumtemp.revsum = sumtemp.REVERS + sumtemp.revfb.                           
         END.   
         ELSE DO:
            gerspro = bbelopp * 5 * mval.PRODEL / 100.
            gers = bbelopp * 5. 
            sumtemp.GRUNDERS =  bbelopp * 5.
            gerspro = ROUND(gerspro,0).                
            
         END. 
         CREATE tidut.
         ASSIGN                       
         SUBSTRING(tidut.UT,1) = "Grundersättning vid överenskommelse".      
         SUBSTRING(tidut.UT,80) = STRING((gerspro),"->>>>>>9").
         
         
      END.
      ELSE DO:
         
         /*2019 och tidigare år*/   
         /* OBS! sumproc är bara andelen för vald markägare*/

         minproc = 3.
         IF Guru.Konstanter:globforetag = "POWE" OR Guru.Konstanter:globforetag = "PFBK" OR Guru.Konstanter:globforetag = "KEWA" OR Guru.Konstanter:globforetag = "GULL" THEN DO:            
            FIND FIRST VARDERING WHERE VARDERING.VARDNR = mval.VARDNR USE-INDEX VARDNR   NO-LOCK NO-ERROR.
            IF AVAILABLE VARDERING THEN DO:            
               IF VARDERING.NATAGARE BEGINS "Dala" THEN minproc = 5.
            END.
         END.      
         IF ( sumproc + tillagg  + sumtrafopro + paslag ) * 100 / mval.PRODEL < ( bbelopp * minproc ) THEN DO:
            tillagg =  bbelopp * minproc * mval.PRODEL / 100.   
            tlagg = bbelopp * minproc.
            /*minimiers skall alltid betalas ut Ulrika Johansson Tectel 2018-10-25 */
            IF Guru.Konstanter:globforetag = "TECT" THEN .
            ELSE   IF sumproc + sumtrafopro = 0 THEN ASSIGN tillagg = 0 tlagg = 0.
            IF sumproc < 0 THEN sumproc = 0.         
            ASSIGN
            SUBSTRING(tidut.UT,80) = STRING((sumproc + sumtrafopro),"->>>>>>9").
            IF Guru.Konstanter:varforetypval[40] = 1 THEN DO:
               FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
               IF AVAILABLE sumtemp THEN DO:
                  /* varav exprop*/ 
                  vexprop = ((sumtemp.OMN + sumtemp.OMB) * ( 1 - ( 1 / ( 1 + (0.25 * 0.66)))))  + ((sumtemp.SMN + sumtemp.SMB) * ( 1 - (1 / 1.25))) + ((sumtemp.TSF + sumtemp.TSKF) * ( 1 - (1 / 1.25))) +  (sumtemp.JKNDEC * ( 1 - (1 / 1.25))) + sumtemp.FROTPAEXP.
                  vexprop = vexprop * mval.PRODEL / 100.            
                  CREATE tidut.
                  SUBSTRING(tidut.UT,1) = "Varav tillägg enligt expropriationslagen".      
                  SUBSTRING(tidut.UT,80) = STRING(vexprop,"->>>>>>9").               
                  
               END.   
            END.
            CREATE tidut.
            ASSIGN           
            SUBSTRING(tidut.UT,1) = "Om ersättningen understiger 3% av ett basbelopp utbetalas minimiersättn."  
            /*SUBSTRING(tidut.UT,1) = "Minimiersättning(3% av basbelopp) ersätter föregående rad"      */
            SUBSTRING(tidut.UT,82) = STRING((tillagg),">>>>>9").
            
            sumproc = 0.
            FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
            IF AVAILABLE sumtemp THEN DO:                  
               /*tectel vill ha ut illägget även för minimiers*/
               /* ändrat från 0.15 till 0.2 20141105 Lena*/            
               overenskom = 0.15.
               IF TODAY ge 11/15/2014 THEN   overenskom = 0.2.    
               IF Guru.Konstanter:globforetag = "skok" THEN DO:
                  
                  /*luleå boden och Jukkasjärvi har kvar 15% 20150209*/
                  FIND FIRST VARDERING WHERE VARDERING.VARDNR = mval.VARDNR USE-INDEX VARDNR   NO-LOCK NO-ERROR.
                  IF AVAILABLE VARDERING THEN DO:
                    /* Enligt Emil Rolfs har Jukkasjärvi gått över från 15 till 20 procent  Lena 20180816 
                    IF VARDERING.NATAGARE BEGINS "Vattenfall" THEN .
                     ELSE overenskom = 0.15.*/
                     /*enligt pernilla hansson skok har luleå 0.20 20181001*/
                     /*IF VARDERING.NATAGARE BEGINS "Luleå" THEN overenskom = 0.15.*/
                     IF VARDERING.NATAGARE BEGINS "Boden" THEN overenskom = 0.15.
                  END.   
                 
               END.
               IF Guru.Konstanter:globforetag = "KRIN" THEN overenskom = 0.15.  
              /* IF Guru.Konstanter:globforetag = "snat" THEN overenskom = 0.25.Birgitta har ok:at 20% 20151210*/    
               
               IF sumtemp.NINTRANGDEC > 0 THEN sumtemp.TILLAGG = (sumtemp.NINTRANGDEC + sumtemp.TSF + sumtemp.TSKF + pslag ) * overenskom.
               ELSE sumtemp.TILLAGG = (sumtemp.NINTRANG + sumtemp.TSF + sumtemp.TSKF  + pslag) * overenskom.
                                    
               sumtemp.NINTRANG = 0.
               sumtemp.NINTRANGDEC = 0.
            END.
            minsumma = TRUE.
            /*påslag 25% på intrångsersättning (bil 1,2,3) 20100801*/         
            IF paslag > 0  THEN DO:
               CREATE tidut.
               ASSIGN
               SUBSTRING(tidut.UT,1) = "Påslag 25% på intrångsersättning"      
               SUBSTRING(tidut.UT,80) = STRING((paslag),"->>>>>>9").
               paslag = 0.
               pslag = 0.
            END.
         END.    
         ELSE DO:
            ASSIGN
            SUBSTRING(tidut.UT,80) = STRING((sumproc + sumtrafopro),"->>>>>>9").
            IF Guru.Konstanter:varforetypval[40] = 1 THEN DO: 
               FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
               IF AVAILABLE sumtemp THEN DO:
                  /* varav exprop*/ 
                  vexprop = ((sumtemp.OMN + sumtemp.OMB) * ( 1 - ( 1 / ( 1 + (0.25 * 0.66)))))  + ((sumtemp.SMN + sumtemp.SMB) * ( 1 - (1 / 1.25))) + ((sumtemp.TSF + sumtemp.TSKF) * ( 1 - (1 / 1.25))) +  (sumtemp.JKNDEC * ( 1 - (1 / 1.25))) + sumtemp.FROTPAEXP.
                  vexprop = vexprop * mval.PRODEL / 100.
                  CREATE tidut.           
                  SUBSTRING(tidut.UT,1) = "Varav tillägg enligt expropriationslagen".      
                  SUBSTRING(tidut.UT,80) = STRING(vexprop ,"->>>>>>9").
               END.   
            END.             
            /*påslag 25% på intrångsersättning (bil 1,2,3) 20100801*/         
            IF paslag > 0  THEN DO:
               CREATE tidut.
               ASSIGN
               SUBSTRING(tidut.UT,1) = "Påslag 25% på intrångsersättning"      
               SUBSTRING(tidut.UT,80) = STRING((paslag),"->>>>>>9").         
            END.
           
            CREATE tidut.
            ASSIGN                       
            SUBSTRING(tidut.UT,1) = "Tillägg till uppgörelsen " + STRING(overenskom * 100) + " %".      
            SUBSTRING(tidut.UT,80) = STRING((tillagg),"->>>>>>9").
            FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
            IF AVAILABLE sumtemp THEN DO:                     
               ASSIGN         
               sumtemp.OVRIG = tlagg.          
               sumtemp.TILLAGG = tlagg.   
                      
            END.      
         END.
      END.    
   END.   
   IF sumproc + sumtrafopro = 0 AND sumtemp.REVERS > 0 THEN DO:   
      RUN revadmhmt_UI (INPUT vardartal, OUTPUT azon1, OUTPUT azon2, OUTPUT afastb).
      sumtemp.revfb =  afastb.                        
      sumtemp.revsum = sumtemp.REVERS + sumtemp.revfb.
   END.   
   FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
   IF AVAILABLE sumtemp THEN DO:         
      sumtemp.paslag = pslag.
   END.   
   FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
   IF AVAILABLE sumtemp THEN DO:          
      ASSIGN         
      sumtemp.ERSATT = sumtemp.NINTRANG + sumtemp.TSF.            
      IF minsumma = TRUE THEN DO: 
         ASSIGN sumtemp.MINIERS = tlagg.               
      END.
   END.          
   FIND FIRST suvol1 WHERE suvol1.MARKNR = mval.MARKNR AND suvol1.BETECKNING = mval.BETECKNING NO-LOCK NO-ERROR.
   IF AVAILABLE suvol1 THEN DO:      
      IF suvol1.M3 > 0 THEN DO:      
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,1) = "Stämplingslängd                 enl bil.5".            
         IF mval.PROCENT NE 100 THEN DO:
            IF mval.ANDEL NE "" THEN DO:            
               ASSIGN SUBSTRING(tidut.UT,45) = mval.ANDEL.            
            END.
            ELSE DO:  
               ASSIGN
               SUBSTRING(tidut.UT,45) = string(mval.PROCENT,">>9")
               SUBSTRING(tidut.UT,49) = "%".
            END.
         END.   
         IF suvol1.M3  > 0 AND mval.PROCENT > 0 THEN DO:         
            sumvol2 = suvol1.M3 * mval.PRODEL / 100.
         END.
         ELSE ASSIGN sumvol2 = 0.   
         ASSIGN
         SUBSTRING(tidut.UT,50) = STRING(sumvol2,">>9.99")
         SUBSTRING(tidut.UT,60) = "m3sk".                 
      END.               
      IF suvol1.FORKR > 0 THEN DO:
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,1) = "Fördyrad avverkning             enl bil.6".
         FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
         IF AVAILABLE sumtemp THEN DO:
            ASSIGN sumtemp.ROT = suvol1.FORKR.                  
         END.
         ASSIGN sumvol = suvol1.FORKR * mval.PRODEL / 100.      
      END.
      ELSE DO:   
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,1) = "Rotnettoersättning              enl bil.6".
         FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
         IF AVAILABLE sumtemp THEN DO:
            ASSIGN sumtemp.ROT = suvol1.KRONOR.                  
         END.
         ASSIGN sumvol = suvol1.KRONOR * mval.PRODEL / 100.      
      END.   
      IF mval.PROCENT NE 100 THEN DO:
         IF mval.ANDEL NE "" THEN DO:            
            ASSIGN SUBSTRING(tidut.UT,45) = mval.ANDEL.            
         END.
         ELSE DO:  
            ASSIGN
            SUBSTRING(tidut.UT,45) = string(mval.PROCENT,">>9")
            SUBSTRING(tidut.UT,49) = "%".
         END.
      END. 
      ASSIGN 
      SUBSTRING(tidut.UT,50) = STRING(sumvol2,">>9.99")
      SUBSTRING(tidut.UT,60) = "m3sk"
      SUBSTRING(tidut.UT,80) = STRING(sumvol,"->>>>>>9").               
   END.
   FIND FIRST MARKDIV NO-LOCK NO-ERROR.
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,60) = "Moms".   
   
   totsumma = sumproc + sumskognpro + sumkabelnpro + sumakernpro .      
   FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
   IF AVAILABLE sumtemp THEN DO:
                  
      IF sumtemp.NINTRANGDEC > 0 THEN tsumma =  sumtemp.NINTRANGDEC + sumtemp.SMF + sumtemp.JKF + sumtemp.OMF .
      ELSE tsumma =  sumtemp.NINTRANG + sumtemp.SMF + sumtemp.JKF + sumtemp.OMF .
                                                                                      
   END.   
   IF AVAILABLE suvol1 THEN DO:
      IF suvol1.FORKR > 0 THEN DO:
         ASSIGN         
         totsumma = totsumma + (suvol1.FORKR * mval.PRODEL / 100 ).
         tsumma = tsumma + suvol1.FORKR.
      END.
      ELSE DO:
         ASSIGN
         SUBSTRING(tidut.UT,80) = STRING((suvol1.KRONOR * MARKDIV.MOMS * mval.PRODEL / 100),"->>>>>>9").
         totsumma = totsumma + ( (suvol1.KRONOR * mval.PRODEL / 100 )* (1 + MARKDIV.MOMS)).         
         tsumma = tsumma + ( (suvol1.KRONOR )* (1 + MARKDIV.MOMS)).         
         FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
         IF AVAILABLE sumtemp THEN DO:
            ASSIGN
            sumtemp.ROT = sumtemp.ROT + (suvol1.KRONOR * MARKDIV.MOMS ).                    
         END.
      END.   
   END.              
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = "Övrig ersättning(fast pris)"
   SUBSTRING(tidut.UT,80) = STRING((sumskognpro + sumkabelnpro + sumakernpro),"->>>>>>9").     
   /*MESSAGE "1" "To" tsumma totsumma "P" pslag paslag "TL" tlagg tillagg  VIEW-AS ALERT-BOX.*/
   
   
   totsumma = paslag + totsumma + tillagg + gerspro.         
   tsumma = pslag + tsumma + tlagg +  gers.
   
   IF stsuad > 0 THEN DO:
      EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
      EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
      CREATE inextradatatemp.          
      ASSIGN
      inextradatatemp.PROGRAM = "REVAVTAL"                   
      inextradatatemp.HUVUDINT = mval.VARDNR
      inextradatatemp.HUVUDCH = mval.BETECKNING.                          
      RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
      FOR EACH extradatatemp :                           
         totsumma = totsumma + (extradatatemp.SOKDEC[3] * mval.PROCENT / 100).
         tsumma = tsumma + (extradatatemp.SOKDEC[3] ).         
      END.      
   END.   
   /*MESSAGE "2" "To" tsumma totsumma "P" pslag paslag "TL" tlagg tillagg  VIEW-AS ALERT-BOX.*/
   IF minsumma = FALSE THEN DO:
       totsumma = totsumma + sumtrafopro.
       IF AVAILABLE sumtemp THEN DO:
          tsumma = tsumma + sumtemp.TSF + sumtemp.TSKF.          
          /*MESSAGE "3" tsumma sumtemp.TSF totsumma  VIEW-AS ALERT-BOX.*/
       END.
   END.   
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,80) = "--------".   
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = "Summa kr"
   SUBSTRING(tidut.UT,80) = STRING(totsumma,"->>>>>>9").
   FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
   IF AVAILABLE sumtemp THEN DO:      
      ASSIGN
      sumtemp.OVRIG = sumtemp.OVRIG + sumtemp.SMF + sumtemp.JKF + sumtemp.OMF.               
      sumtemp.SUMMA = tsumma.               
      
   END.
END PROCEDURE.

PROCEDURE umeasumsida_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/
   
   FIND FIRST mval WHERE mval.MARKREC = markarec
   AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.   
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = str.
   CREATE tidut.                        
   ASSIGN           
   SUBSTRING(tidut.UT,46) = "Fast"  
   SUBSTRING(tidut.UT,61) = "Borttaget"
   SUBSTRING(tidut.UT,78) = "Nytt".
    CREATE tidut.                        
   ASSIGN             
   SUBSTRING(tidut.UT,46) = "pris Kr"
   SUBSTRING(tidut.UT,61) = "intrång Kr"
   SUBSTRING(tidut.UT,78) = "intrång Kr".
   CREATE tidut.                        
   ASSIGN             
   SUBSTRING(tidut.UT,46) = "----------"
   SUBSTRING(tidut.UT,61) = "----------"
   SUBSTRING(tidut.UT,78) = "----------".
   sumakern = 0.
   FIND FIRST suaker WHERE suaker.MARKNR = mval.MARKNR AND suaker.BETECKNING = mval.BETECKNING AND
   suaker.PLUS = TRUE AND suaker.L5 = 0 NO-LOCK NO-ERROR.
   IF AVAILABLE suaker THEN ASSIGN  sumakern = suaker.KRONOR.
   sumakernpro = 0.
   FIND FIRST suaker2 WHERE suaker2.MARKNR = mval.MARKNR AND suaker2.BETECKNING = mval.BETECKNING AND
   suaker2.PLUS = TRUE AND suaker2.L5 = 0 NO-LOCK NO-ERROR.
   IF AVAILABLE suaker2 THEN ASSIGN  sumakernpro = suaker2.KRONOR.
   sumakerb = 0.
   FIND FIRST suaker WHERE suaker.MARKNR = mval.MARKNR AND suaker.BETECKNING = mval.BETECKNING AND
   suaker.PLUS = FALSE AND suaker.L5 = 0 NO-LOCK NO-ERROR.
   IF AVAILABLE suaker THEN ASSIGN  sumakerb = suaker.KRONOR. 
   CREATE sumtemp.
   ASSIGN
   /*sumtemp.VARDNR = mval.VARDNR*/
   sumtemp.BETECKNING = mval.BETECKNING
   sumtemp.MARKNR = mval.MARKNR
   sumtemp.PROCENT = mval.PROCENT
   sumtemp.OMF = sumakernpro
   sumtemp.OMB = sumakerb
   sumtemp.OMN = sumakern - sumakernpro.
      
   IF mval.PROCENT NE 100 THEN DO:
      IF Guru.Konstanter:varforetypval[22] = 1 THEN DO:
         sumakerb = sumakerb * mval.PRODEL / 100. 
         sumakern = sumakern * mval.PRODEL / 100.
         sumakernpro = sumakernpro * mval.PRODEL / 100.
      END.
      ELSE DO:   
         sumakerb = sumakerb * mval.PROCENT / 100. 
         sumakern = sumakern * mval.PROCENT / 100.
         sumakernpro = sumakernpro * mval.PROCENT / 100.
      END.      
   END.
      
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "REVAVTAL"                   
   inextradatatemp.HUVUDINT = mval.VARDNR
   inextradatatemp.HUVUDCH = mval.BETECKNING.                          
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FOR EACH extradatatemp : 
      sumtemp.revers = sumtemp.revers +  extradatatemp.SOKDEC[3].                       
   END.
   
   IF sumakernpro = 0 AND sumakerb = 0 AND (sumakern - sumakernpro) = 0  THEN sumakernpro = sumakernpro.
   ELSE DO: 
      CREATE tidut.                        
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Öppen mark enligt bilaga nr 1".
      IF mval.PROCENT NE 100 THEN DO:
         IF Guru.Konstanter:varforetypval[22] = 1 THEN DO:     
            IF mval.ANDEL NE "" THEN DO:            
               ASSIGN SUBSTRING(tidut.UT,38) = mval.ANDEL.            
            END.
         END.   
         ELSE DO:                   
            ASSIGN
            SUBSTRING(tidut.UT,32) = string(mval.PROCENT,">>9")
            SUBSTRING(tidut.UT,35) = "%".   
         END.
      END.             
      ASSIGN                                    
      SUBSTRING(tidut.UT,48) = STRING(sumakernpro,"->>>>>>9")
      SUBSTRING(tidut.UT,63) = STRING(sumakerb,"->>>>>>9") 
      SUBSTRING(tidut.UT,80) = STRING((sumakern - sumakernpro),"->>>>>>9").
   END.      
   
   ASSIGN sumskogb = 0
   sumskogn = 0.
   sumskognpro = 0.
   FIND FIRST suskog WHERE suskog.MARKNR = mval.MARKNR AND suskog.BETECKNING = mval.BETECKNING AND
   suskog.KRONOR > 0 NO-LOCK NO-ERROR.
   IF AVAILABLE suskog THEN ASSIGN  sumskogn = suskog.KRONOR.
   FIND FIRST suskog2 WHERE suskog2.MARKNR = mval.MARKNR AND suskog2.BETECKNING = mval.BETECKNING AND
   suskog2.KRONOR > 0 NO-LOCK NO-ERROR.   
   IF AVAILABLE suskog2 THEN ASSIGN  sumskognpro = suskog2.KRONOR.
   /*TECTEL LÄGGER IN 50-ÅR SKOGNORM SOM FAST PRIS*/
   /*omgjort - alla kan lägga in skognorm 2009- som harmnar som FAST PRIS */
   sumskognpro = 0.
   IF Guru.Konstanter:globforetag = "TECT" OR Guru.Konstanter:globforetag = "PICA" OR Guru.Konstanter:globforetag = "SWEO" OR Guru.Konstanter:globforetag = "REJI" OR Guru.Konstanter:globforetag = "ELPC" OR 
   Guru.Konstanter:globforetag = "SKOK" OR Guru.Konstanter:globforetag = "JSBF" OR Guru.Konstanter:globforetag = "ATS" OR Guru.Konstanter:globforetag = "LULE" OR Guru.Konstanter:globforetag = "SKEL" THEN sumskognpro = 0.
   sumskogb = 0.
   FOR EACH suskog WHERE suskog.MARKNR = mval.MARKNR AND suskog.BETECKNING = mval.BETECKNING AND
   suskog.KRONOR < 0 NO-LOCK.
      sumskogb = sumskogb + suskog.KRONOR.
   END.      
   stsuad = 0.
   RUN storskog_UI.   
   FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
   IF AVAILABLE sumtemp THEN DO:
      ASSIGN
      sumtemp.SMF = sumskognpro
      sumtemp.SMB = sumskogb
      sumtemp.SMN = sumskogn - sumskognpro.
   END.
   IF Guru.Konstanter:varforetypval[22] = 1 THEN DO:
      IF mval.PROCENT NE 100 THEN DO:
         sumskogb = sumskogb * mval.PRODEL / 100. 
         sumskogn = sumskogn * mval.PRODEL / 100. 
         sumskognpro = sumskognpro * mval.PRODEL / 100.        
      END.            
   END.
   ELSE DO:
      IF mval.PROCENT NE 100 THEN DO:
         sumskogb = sumskogb * mval.PROCENT / 100. 
         sumskogn = sumskogn * mval.PROCENT / 100. 
         sumskognpro = sumskognpro * mval.PROCENT / 100.        
      END.
   END.  
   /*Lägg bara ut bilagorna om det finns något belopp- handfast 02/17/2005*/
   IF sumskognpro = 0 AND sumskogb = 0 AND (sumskogn - sumskognpro) = 0  THEN sumskognpro = sumskognpro.
   ELSE DO:    
      CREATE tidut.                        
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Skogsmark  enligt bilaga nr 2".
      IF mval.PROCENT NE 100 THEN DO:   
         IF Guru.Konstanter:varforetypval[22] = 1 THEN DO:     
            IF mval.ANDEL NE "" THEN DO:            
               ASSIGN SUBSTRING(tidut.UT,38) = mval.ANDEL.            
            END.
         END.   
         ELSE DO:                   
            ASSIGN
            SUBSTRING(tidut.UT,32) = string(mval.PROCENT,">>9")
            SUBSTRING(tidut.UT,35) = "%".       
         END.
      END.         
      ASSIGN  
      SUBSTRING(tidut.UT,48) = STRING(sumskognpro,"->>>>>>9")       
      SUBSTRING(tidut.UT,63) = STRING(sumskogb,"->>>>>>9") 
      SUBSTRING(tidut.UT,80) = STRING((sumskogn - sumskognpro),"->>>>>>9").
   END.      
   sumkabeln = 0.
   sumkabelndec = 0.
   FIND FIRST sukab WHERE sukab.MARKNR = mval.MARKNR AND sukab.BETECKNING = mval.BETECKNING AND
   sukab.PLUS = TRUE NO-LOCK NO-ERROR.
   IF AVAILABLE sukab THEN ASSIGN  sumkabeln = sukab.KRONOR.
   sumkabelnpro = 0.
   FIND FIRST sukab2 WHERE sukab2.MARKNR = mval.MARKNR AND sukab2.BETECKNING = mval.BETECKNING AND
   sukab2.PLUS = TRUE NO-LOCK NO-ERROR.
   IF AVAILABLE sukab2 THEN ASSIGN  sumkabelnpro = sukab2.KRONOR.
   sumkabelb = 0.
   FIND FIRST sukab WHERE sukab.MARKNR = mval.MARKNR AND sukab.BETECKNING = mval.BETECKNING AND
   sukab.PLUS = FALSE NO-LOCK NO-ERROR.
   IF AVAILABLE sukab THEN ASSIGN  sumkabelb = sukab.KRONOR. 
   FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
   IF AVAILABLE sumtemp THEN DO:
      ASSIGN
      sumtemp.JKF = sumkabelnpro
      sumtemp.JKB = sumkabelb
      sumtemp.JKN = sumkabeln - sumkabelnpro.
   END.   
   IF mval.PROCENT NE 100 THEN DO:
      IF Guru.Konstanter:varforetypval[22] = 1 THEN DO:
         sumkabelb = sumkabelb * mval.PRODEL / 100. 
         sumkabeln = sumkabeln * mval.PRODEL / 100.   
         sumkabelnpro = sumkabelnpro * mval.PRODEL / 100.
      END.
      ELSE DO:   
         sumkabelb = sumkabelb * mval.PROCENT / 100. 
         sumkabeln = sumkabeln * mval.PROCENT / 100.   
         sumkabelnpro = sumkabelnpro * mval.PROCENT / 100.
      END.   
   END. 
   /*Lägg bara ut bilagorna om det finns något belopp - handfast 02/17/2005*/
   IF sumkabelnpro = 0 AND sumkabelb = 0 AND (sumkabeln - sumkabelnpro) = 0  THEN sumkabelnpro = sumkabelnpro.
   ELSE DO:
      CREATE tidut.
      IF Guru.Konstanter:globforetag = "UMBR" THEN  ASSIGN SUBSTRING(tidut.UT,1) = "Optokanalisation enligt bilaga nr 3".
      ELSE  ASSIGN SUBSTRING(tidut.UT,1) = "Jordkabel  enligt bilaga nr 3".
      IF mval.PROCENT NE 100 THEN DO:
         IF Guru.Konstanter:varforetypval[22] = 1 THEN DO:     
            IF mval.ANDEL NE "" THEN DO:            
               ASSIGN SUBSTRING(tidut.UT,38) = mval.ANDEL.            
            END.
         END.   
         ELSE DO:                   
            ASSIGN
            SUBSTRING(tidut.UT,32) = string(mval.PROCENT,">>9")
            SUBSTRING(tidut.UT,35) = "%".
         END.
      END.      
      ASSIGN     
      SUBSTRING(tidut.UT,48) = STRING(sumkabelnpro,"->>>>>>9")
      SUBSTRING(tidut.UT,63) = STRING(sumkabelb,"->>>>>>9") 
      SUBSTRING(tidut.UT,80) = STRING((sumkabeln - sumkabelnpro),"->>>>>>9").
   END.   
   sumtrafon = 0.   
   FIND FIRST suaker WHERE suaker.MARKNR = mval.MARKNR AND suaker.BETECKNING = mval.BETECKNING AND
   suaker.PLUS = TRUE AND suaker.L5 = 1 NO-LOCK NO-ERROR.
   IF AVAILABLE suaker THEN ASSIGN  sumtrafon = suaker.KRONOR.
   sumtrafopro = 0.
   FIND FIRST suaker2 WHERE suaker2.MARKNR = mval.MARKNR AND suaker2.BETECKNING = mval.BETECKNING AND
   suaker2.PLUS = TRUE AND suaker2.L5 = 1 AND suaker2.STOLPNR > 0 NO-LOCK NO-ERROR.
   IF AVAILABLE suaker2 THEN ASSIGN  sumtrafopro = suaker2.KRONOR.
   sumtillfskada = 0.
   FIND FIRST suaker2 WHERE suaker2.MARKNR = mval.MARKNR AND suaker2.BETECKNING = mval.BETECKNING AND
   suaker2.PLUS = TRUE AND suaker2.L5 = 1 AND suaker2.STOLPNR = 0 NO-LOCK NO-ERROR.
   IF AVAILABLE suaker2 THEN ASSIGN  sumtillfskada = suaker2.KRONOR.
   sumtrafob = 0.
   FIND FIRST suaker WHERE suaker.MARKNR = mval.MARKNR AND suaker.BETECKNING = mval.BETECKNING AND
   suaker.PLUS = FALSE AND suaker.L5 = 1 NO-LOCK NO-ERROR.
   IF AVAILABLE suaker THEN ASSIGN  sumtrafob = suaker.KRONOR.    
   FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
   IF AVAILABLE sumtemp THEN DO:
      ASSIGN
      sumtemp.TSF = sumtrafopro
      sumtemp.TSB = sumtrafob
      sumtemp.TSN = sumtrafon - sumtrafopro.
      
      /*  Umeå energi har börjat ersätta kabelskåp 201709*/
      lagjord = TRUE.                                          
      IF lagjord = TRUE THEN DO:      
         lagjord = FALSE.      
         /*skilj ut kabelskåp */
         ASSIGN
         sumtemp.TSKN = 0
         sumtemp.TSKF = 0
         sumtemp.TSKB = 0.
         /*kabelskåp och trafo sparas alltid med FASTPRIS = TRUE
         bara sumtemp.TSKF som används*/
         FOR EACH akevard WHERE akevard.MARKNR = mval.MARKNR AND akevard.BETECKNING = mval.BETECKNING
         AND akevard.L5 = 1 AND akevard.L4 = 1 AND akevard.FASTPRIS = TRUE NO-LOCK:
            sumtemp.TSKF = sumtemp.TSKF  + akevard.KRONOR.
         END.
         
         FOR EACH akevard WHERE akevard.MARKNR = mval.MARKNR AND akevard.BETECKNING = mval.BETECKNING
         AND akevard.L5 = 1 AND akevard.L4 = 1 AND akevard.PLUS = TRUE AND akevard.FASTPRIS = FALSE NO-LOCK:
            sumtemp.TSKN = sumtemp.TSKN + akevard.KRONOR.
         END.
                 
         FOR EACH akevard WHERE akevard.MARKNR = mval.MARKNR AND akevard.BETECKNING = mval.BETECKNING
         AND akevard.L5 = 1 AND akevard.L4 = 1 AND akevard.PLUS = FALSE AND akevard.FASTPRIS = FALSE NO-LOCK:
            sumtemp.TSKB = sumtemp.TSKB  + akevard.KRONOR.
         END.
         IF sumtemp.TSKF NE 0 THEN sumtemp.TSF = sumtemp.TSF - sumtemp.TSKF.
         IF sumtemp.TSKN NE 0 THEN sumtemp.TSN = sumtemp.TSN - sumtemp.TSKN.         
         IF sumtemp.TSKB NE 0 THEN sumtemp.TSB = sumtemp.TSB - sumtemp.TSKB.                  
      END.          
      /* lagt till + sumtemp.TSKF TSKB TSKN + sumtemp.JKLF sumtemp.JKLB sumtemp.JKLN*/
      
      ASSIGN
      sumtemp.SUMF = sumtemp.SMF + sumtemp.JKF + sumtemp.JKLF + sumtemp.OMF + sumtemp.TSF + sumtemp.TSKF  /*bara fast pris*/
      sumtemp.SUMB = sumtemp.SMB + sumtemp.JKB + sumtemp.JKLB + sumtemp.OMB + sumtemp.TSB + sumtemp.TSKB      
      sumtemp.SUMN = sumtemp.SMN + sumtemp.JKN + sumtemp.JKLN + sumtemp.OMN + sumtemp.TSN + sumtemp.TSKN
      sumtemp.SUMNDEC = sumtemp.SMN + sumtemp.JKNDEC + sumtemp.JKLN + sumtemp.OMN + sumtemp.TSN + sumtemp.TSKN          
      sumtemp.NINTRANG = sumtemp.SMN + sumtemp.JKN + sumtemp.JKLN + + sumtemp.OMN + sumtemp.TSN + sumtemp.TSKN + sumtemp.SMB + sumtemp.JKB + sumtemp.JKLB + sumtemp.OMB + sumtemp.TSB + sumtemp.TSKB.                                                                                                             
      sumtemp.NINTRANGDEC = sumtemp.SMN + sumtemp.JKNDEC + sumtemp.JKLN + + sumtemp.OMN + sumtemp.TSN + sumtemp.TSKN + sumtemp.SMB + sumtemp.JKB + sumtemp.JKLB + sumtemp.OMB + sumtemp.TSB + sumtemp.TSKB.
   END.
   IF mval.PROCENT NE 100 THEN DO:
      IF Guru.Konstanter:varforetypval[22] = 1 THEN DO:
         sumtrafob = sumtrafob * mval.PRODEL / 100. 
         sumtrafon = sumtrafon * mval.PRODEL / 100.
         sumtrafopro = sumtrafopro * mval.PRODEL / 100.
         sumtillfskada = sumtillfskada  * mval.PRODEL / 100.
      END.
      ELSE DO:   
         sumtrafob = sumtrafob * mval.PROCENT / 100. 
         sumtrafon = sumtrafon * mval.PROCENT / 100.
         sumtrafopro = sumtrafopro * mval.PROCENT / 100.
         sumtillfskada = sumtillfskada  * mval.PROCENT / 100.
      END.      
   END.   
   /*Lägg bara ut bilagorna om det finns något belopp - handfast 02/17/2005*/
   IF sumtrafopro = 0 AND sumtrafob = 0 AND (sumtrafon - sumtrafopro) = 0  THEN sumtrafopro = sumtrafopro.
   ELSE DO:
      CREATE tidut.                        
      /*IF Guru.Konstanter:globforetag = "UMBR" THEN  ASSIGN SUBSTRING(tidut.UT,1) = "Optobrunn/teknikbod enl bilaga nr 4".*/
      IF Guru.Konstanter:globforetag = "UMBR" THEN  ASSIGN SUBSTRING(tidut.UT,1) = "Teknikbod enligt        bilaga nr 4".
      ELSE ASSIGN  SUBSTRING(tidut.UT,1) = "Nätstation/kabelskåp enligt bilaga 4".
      /*SUBSTRING(tidut.UT,1) = "Transformatorstation enligt bilaga 4".*/
      IF mval.PROCENT NE 100 THEN DO:   
         IF Guru.Konstanter:varforetypval[22] = 1 THEN DO:     
            IF mval.ANDEL NE "" THEN DO:            
               ASSIGN SUBSTRING(tidut.UT,38) = mval.ANDEL.            
            END.
         END.   
         ELSE DO:                   
            ASSIGN
            SUBSTRING(tidut.UT,38) = string(mval.PROCENT,">>9")
            SUBSTRING(tidut.UT,41) = "%".
         END.
      END.   
      ASSIGN   
      SUBSTRING(tidut.UT,48) = STRING(sumtrafopro,"->>>>>>9")
      SUBSTRING(tidut.UT,63) = STRING(sumtrafob,"->>>>>>9").
   END.       
   sumallan = sumskogn + sumkabeln + sumakern /*+ sumtrafon*/.
   sumallab = sumskogb + sumkabelb + sumakerb + sumtrafob.   
   sumplus = sumallan + sumallab.      
   sumproc = sumplus - sumskognpro - sumkabelnpro - sumakernpro /*- sumtrafopro*/.
   CREATE tidut.                        
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "Summa intrång"
   SUBSTRING(tidut.UT,48) = STRING((sumskognpro + sumkabelnpro + sumakernpro + sumtrafopro),"->>>>>>9")
   SUBSTRING(tidut.UT,63) = STRING(sumallab,"->>>>>>9") 
   SUBSTRING(tidut.UT,80) = STRING((sumallan - sumskognpro - sumkabelnpro - sumakernpro /*- sumtrafopro*/),"->>>>>>9").
   CREATE tidut.                        
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "Borttaget intrång"      
   SUBSTRING(tidut.UT,80) = STRING(sumallab,"->>>>>>9").
    CREATE tidut.                        
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "Nytt intrång"         
   SUBSTRING(tidut.UT,80) = STRING((sumproc),"->>>>>>9").   
   /*Påslag 25% på inrångsersättning 20100801*/
   /*för åkernorm avser 66% av ersättningsbeloppen intrångsersättning*/
   paslag = ( sumproc + sumtrafopro) * 0.25  - ((sumakern + sumakerb) * 0.34 * 0.25).
   pslag = (sumtemp.NINTRANG + sumtemp.TSF + sumtemp.TSKF) * 0.25 - ((sumtemp.OMN + sumtemp.OMB) * 0.34 * 0.25).
   paslag = ROUND(paslag,0).
   pslag = ROUND(pslag,0).
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = str. 
   minsumma = FALSE.
   CREATE tidut.
   IF Guru.Konstanter:globforetag = "UMBR" THEN DO:
      IF sumtrafopro = 0 AND sumtrafob = 0 AND (sumtrafon - sumtrafopro) = 0  THEN DO:
         ASSIGN SUBSTRING(tidut.UT,1) = "Ersättning för intrång genom ledning samt enl ovan ".
      END.   
      ELSE DO:
         ASSIGN SUBSTRING(tidut.UT,1) = "Ersättning för intrång genom ledning samt fast ersättning teknikbod enligt ovan ".         
      END. 
   END.                                           
   ELSE ASSIGN SUBSTRING(tidut.UT,1) = "Ersättning för intrång genom ledning samt fast ers. station/ksk enl ovan ".
   

   /* ändrat från 0.15 till 0.2 20141105 Lena*/
   overenskom = 0.15.
   IF TODAY ge 11/15/2014 THEN   overenskom = 0.2.
   FIND FIRST MARKDIV NO-LOCK NO-ERROR.
   IF  ( (sumproc + sumtrafopro )  * 100 / mval.PRODEL * overenskom )  > (bbelopp * 20 ) THEN DO:
      tillagg = (bbelopp * 20) * mval.PROCENT / 100.
      tlagg = (bbelopp * 20).       
   END.   
   ELSE DO:
      tillagg = ( sumproc + sumtrafopro + paslag ) * overenskom.     
      FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
      IF AVAILABLE sumtemp THEN DO:         
         tlagg = (sumtemp.NINTRANG + sumtemp.TSF  + sumtemp.TSKF + pslag) * overenskom.
      END.
   END. 
   tillagg = ROUND(tillagg,0).
   tlagg = ROUND(tlagg,0). 
   IF tillfskada = FALSE THEN DO:
      gerspro = 0.
      gers = 0.
      IF storsu > 0 THEN RUN moment2_UI.    
      IF stsuad > 0 THEN DO:                            
         /* tillägg storskog ska ersätta vanligt tillägg enligt TureÖstberg 20090929*/
         tillagg = stsuad * mval.PROCENT / 100.
         tlagg = stsuad.
         SUBSTRING(tidut.UT,80) = STRING((sumproc + sumtrafopro),"->>>>>>9").
         /*Påslag 25% ÄVEN vid storskog Ture Östberg 20110304*/
         /*påslag 25% på intrångsersättning (bil 1,2,3) 20100801*/         
         IF paslag > 0  THEN DO:
            CREATE tidut.
            ASSIGN
            SUBSTRING(tidut.UT,1) = "Påslag 25% på intrångsersättning"    /* (bilaga 1 ,2 3)"      */
            SUBSTRING(tidut.UT,80) = STRING((paslag),"->>>>>>9").         
         END.
         
         CREATE tidut.
         ASSIGN SUBSTRING(tidut.UT,1) = "Tillägg enligt avtal med storskogsbruket" + moment2.      
         ASSIGN SUBSTRING(tidut.UT,80) = STRING((tillagg),"->>>>>>9").               
      END.
      ELSE DO:                
         IF vardartal GE 2020 AND Guru.Konstanter:varforetypval[58] = 1 THEN DO:  
                  
            ASSIGN
            SUBSTRING(tidut.UT,80) = STRING((sumproc + sumtrafopro),"->>>>>>9").
            /*påslag 25% på intrångsersättning (bil 1,2,3) 20100801*/         
            IF paslag > 0  THEN DO:
               CREATE tidut.
               ASSIGN
               SUBSTRING(tidut.UT,1) = "Påslag 25% på intrångsersättning " /* (bilaga 1 ,2 3)"      */
               SUBSTRING(tidut.UT,80) = STRING((paslag),"->>>>>>9").
            END.
            /* ändrat från 0.15 till 02. 20141105 Lena*/
            overenskom = 0.15.
            IF TODAY ge 11/15/2014 THEN   overenskom = 0.2.
            CREATE tidut.      
            IF  ( (sumproc + sumtrafopro ) * overenskom )  LE (bbelopp * 20 ) THEN ASSIGN SUBSTRING(tidut.UT,1) = "Tillägg till uppgörelsen " + STRING(overenskom * 100) + " %".      
            ELSE ASSIGN SUBSTRING(tidut.UT,1) = "Tillägg till uppgörelsen".      
            ASSIGN SUBSTRING(tidut.UT,80) = STRING((tillagg),"->>>>>>9").
            FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
            IF AVAILABLE sumtemp THEN DO:
               ASSIGN         
               sumtemp.OVRIG = tlagg.      
            END.
            
            /*om det bara finns rev inlagt - nolla grunders och lägg in rev delarna i översikt   LENA 20200406*/         
            IF sumproc + sumtrafopro = 0 AND sumtemp.REVERS > 0 THEN DO:      
               RUN revadmhmt_UI (INPUT vardartal, OUTPUT azon1, OUTPUT azon2, OUTPUT afastb).
               sumtemp.revfb =  afastb.                        
               sumtemp.revsum = sumtemp.REVERS + sumtemp.revfb.                           
            END.   
            ELSE DO:
               gerspro = bbelopp * 5 * mval.PRODEL / 100.
               gers = bbelopp * 5. 
               sumtemp.GRUNDERS =  bbelopp * 5.
               gerspro = ROUND(gerspro,0).                
               
            END.
            
            CREATE tidut.
            ASSIGN                       
            SUBSTRING(tidut.UT,1) = "Grundersättning vid överenskommelse".      
            SUBSTRING(tidut.UT,80) = STRING((gerspro),"->>>>>>9").
         END.
         ELSE DO:
             /*2019 OCH ÄLDRE*/  
            IF (( sumproc + tillagg + sumtrafopro + paslag ) * 100 / mval.PROCENT ) < ( bbelopp * 3 ) THEN DO:
               /*minimiers skall alltid betalas ut Ture östberg Umeå Energi 2004-04-13 förutom om det enbart finns tillfällig skada registrerad Ture 20120618*/
               IF sumtillfskada > 0 AND ( sumproc + tillagg + sumtrafopro + paslag ) = 0 THEN DO:
                  ASSIGN tillagg = 0 tlagg = 0.
               END.   
               ELSE DO:
                  tillagg =  bbelopp * 3 * mval.PROCENT / 100.
                  tlagg = bbelopp * 3.
                  IF Guru.Konstanter:globforetag = "umbr" THEN DO:
                     IF sumproc + sumtrafopro = 0 THEN ASSIGN tillagg = 0 tlagg = 0.
                     IF sumproc < 0 THEN sumproc = 0.
                  END.            
               END.   
               /*IF sumproc + sumtrafopro = 0 THEN tillagg = 0.*/
               /*minimiers skall alltid betalas ut Ture östberg Umeå Energi 2004-04-13*/
               IF tillfskada = TRUE THEN tillagg = 0.
               
               IF sumproc < 0 THEN sumproc = 0.         
               ASSIGN
               SUBSTRING(tidut.UT,80) = STRING((sumproc + sumtrafopro),"->>>>>>9").
               /*påslag 25% på intrångsersättning (bil 1,2,3) 20100801*/         
               IF paslag > 0  THEN DO:
                  CREATE tidut.
                  ASSIGN
                  SUBSTRING(tidut.UT,1) = "Påslag 25% på intrångsersättning"    /* (bilaga 1 ,2 3)"      */
                  SUBSTRING(tidut.UT,80) = STRING((paslag),"->>>>>>9").
                  paslag = 0.
                  pslag = 0.
               END.              
               CREATE tidut.
               ASSIGN             
               SUBSTRING(tidut.UT,1) = "Om ersättningen understiger 3% av ett prisbasbelopp utbetalas minimiersättn."      
               SUBSTRING(tidut.UT,80) = STRING((tillagg),"->>>>>>9").
                  
               sumproc = 0.
               FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
               IF AVAILABLE sumtemp THEN DO:         
                  sumtemp.NINTRANG = 0.
               END.
               minsumma = TRUE.
            END.    
            ELSE DO:
               ASSIGN
               SUBSTRING(tidut.UT,80) = STRING((sumproc + sumtrafopro),"->>>>>>9").
               /*påslag 25% på intrångsersättning (bil 1,2,3) 20100801*/         
               IF paslag > 0  THEN DO:
                  CREATE tidut.
                  ASSIGN
                  SUBSTRING(tidut.UT,1) = "Påslag 25% på intrångsersättning " /* (bilaga 1 ,2 3)"      */
                  SUBSTRING(tidut.UT,80) = STRING((paslag),"->>>>>>9").
               END.
               /* ändrat från 0.15 till 02. 20141105 Lena*/
               overenskom = 0.15.
               IF TODAY ge 11/15/2014 THEN   overenskom = 0.2.
               CREATE tidut.      
               IF  ( (sumproc + sumtrafopro ) * overenskom )  LE (bbelopp * 20 ) THEN ASSIGN SUBSTRING(tidut.UT,1) = "Tillägg till uppgörelsen " + STRING(overenskom * 100) + " %".      
               ELSE ASSIGN SUBSTRING(tidut.UT,1) = "Tillägg till uppgörelsen".      
               ASSIGN SUBSTRING(tidut.UT,80) = STRING((tillagg),"->>>>>>9").
               FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
               IF AVAILABLE sumtemp THEN DO:
                  ASSIGN         
                  sumtemp.OVRIG = tlagg.      
               END.
            END.
         END.        
      END.
      IF sumproc + sumtrafopro = 0 AND sumtemp.REVERS > 0 THEN DO:   
         RUN revadmhmt_UI (INPUT vardartal, OUTPUT azon1, OUTPUT azon2, OUTPUT afastb).
         sumtemp.revfb =  afastb.                        
         sumtemp.revsum = sumtemp.REVERS + sumtemp.revfb.
      END.
      
      FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
      IF AVAILABLE sumtemp THEN DO:         
         sumtemp.paslag = pslag.
      END.
       
      FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
      IF AVAILABLE sumtemp THEN DO:
         ASSIGN
         sumtemp.ERSATT = sumtemp.NINTRANG + sumtemp.TSF      
         sumtemp.TILLAGG = tlagg.      
         IF minsumma = TRUE THEN ASSIGN sumtemp.MINIERS = tlagg.
      END.
   END.       
   FIND FIRST suvol1 WHERE suvol1.MARKNR = mval.MARKNR AND suvol1.BETECKNING = mval.BETECKNING NO-LOCK NO-ERROR.
   IF AVAILABLE suvol1 THEN DO:
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Stämplingslängd                 enl bil.5".      
      IF suvol1.M3 > 0 THEN DO:
         IF mval.PROCENT NE 100 THEN DO:
            IF Guru.Konstanter:varforetypval[22] = 1 THEN DO:     
               IF mval.ANDEL NE "" THEN DO:            
                  ASSIGN SUBSTRING(tidut.UT,49) = mval.ANDEL.            
               END.
            END.   
            ELSE DO:                      
               ASSIGN
               SUBSTRING(tidut.UT,45) = string(mval.PROCENT,">>9")
               SUBSTRING(tidut.UT,49) = "%".
            END.
         END.         
         IF suvol1.M3  > 0 AND mval.PROCENT > 0 THEN DO:         
            sumvol2 = suvol1.M3 * mval.PROCENT / 100.
         END.
         ELSE ASSIGN sumvol2 = 0.   
         ASSIGN
         SUBSTRING(tidut.UT,50) = STRING(sumvol2,">>9.99")
         SUBSTRING(tidut.UT,60) = "m3sk".        
      END.   
   END.   
   IF AVAILABLE suvol1 THEN DO:                   
      IF suvol1.FORKR > 0 THEN DO:
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,1) = "Fördyrad avverkning             enl bil.6".
         ASSIGN
         sumvol = suvol1.FORKR * mval.PROCENT / 100.      
         FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
         IF AVAILABLE sumtemp THEN DO:
            ASSIGN
            sumtemp.ROT = suvol1.FORKR.         
         END.
      END.
      ELSE DO:   
         CREATE tidut.
         ASSIGN             
         SUBSTRING(tidut.UT,1) = "Rotnettoersättning              enl bil.6".
         ASSIGN
         sumvol = suvol1.KRONOR * mval.PROCENT / 100.      
         FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
         IF AVAILABLE sumtemp THEN DO:
            ASSIGN
            sumtemp.ROT = suvol1.KRONOR.         
         END.
      END.   
      IF mval.PROCENT NE 100 THEN DO:
         IF Guru.Konstanter:varforetypval[22] = 1 THEN DO:     
            IF mval.ANDEL NE "" THEN DO:            
               ASSIGN SUBSTRING(tidut.UT,49) = mval.ANDEL.            
            END.
         END.   
         ELSE DO:                   
            ASSIGN
            SUBSTRING(tidut.UT,45) = string(mval.PROCENT,">>9")
            SUBSTRING(tidut.UT,49) = "%".
         END.
      END.
      
      ASSIGN 
      SUBSTRING(tidut.UT,50) = STRING(sumvol2,">>9.99")
      SUBSTRING(tidut.UT,60) = "m3sk"
      SUBSTRING(tidut.UT,80) = STRING(sumvol,"->>>>>>9").               
   END.   
   FIND FIRST MARKDIV NO-LOCK NO-ERROR.
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,60) = "Moms".
   
   totsumma = sumproc + sumskognpro + sumkabelnpro + sumakernpro /*+ sumtrafopro*/.   
   FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
   IF AVAILABLE sumtemp THEN DO:
      tsumma =  sumtemp.NINTRANG + sumtemp.SMF + sumtemp.JKF + sumtemp.OMF.
   END.
   /*MESSAGE "to" totsumma sumproc  sumskognpro  sumkabelnpro  sumakernpro "ts" tsumma  sumtemp.NINTRANG sumtemp.SMF  sumtemp.JKF  sumtemp.OMF
   VIEW-AS ALERT-BOX.*/
   IF AVAILABLE suvol1 THEN DO:
      IF suvol1.FORKR > 0 THEN DO:
         ASSIGN       
         totsumma = totsumma + (suvol1.FORKR * mval.PROCENT / 100 ).
         tsumma = tsumma + suvol1.FORKR.
      END.
      ELSE DO:
         ASSIGN
         SUBSTRING(tidut.UT,80) = STRING((suvol1.KRONOR * MARKDIV.MOMS * mval.PROCENT / 100),"->>>>>>9").
         totsumma = totsumma + ( (suvol1.KRONOR * mval.PROCENT / 100 )* (1 + MARKDIV.MOMS)).         
         FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
         IF AVAILABLE sumtemp THEN DO:
            ASSIGN               
            sumtemp.ROT = sumtemp.ROT + (suvol1.KRONOR * MARKDIV.MOMS ).         
         END.
      END.   
   END.      
   IF tillfskada = FALSE THEN DO:     
      CREATE tidut.
      IF Guru.Konstanter:globforetag = "UMBR" THEN DO:
         IF sumtrafopro = 0 AND sumtrafob = 0 AND (sumtrafon - sumtrafopro) = 0  THEN DO:
            SUBSTRING(tidut.UT,1) = "Övrig ersättning(fast pris)".
         END.   
         ELSE DO:      
            SUBSTRING(tidut.UT,1) = "Övrig ersättning(fast pris  EXKL teknikbod)".
         END.     
      END.     
      ELSE ASSIGN SUBSTRING(tidut.UT,1) = "Övrig ersättning(fast pris  EXKL station/ksk)".
      SUBSTRING(tidut.UT,80) = STRING((sumskognpro + sumkabelnpro + sumakernpro /*+ sumtrafopro*/),"->>>>>>9").
   END.      
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = "Ersättning tillfällig skada enligt bilaga nr 4".
   
   SUBSTRING(tidut.UT,80) = STRING(sumtillfskada,"->>>>>>9").
                          
   totsumma = paslag + totsumma + tillagg + sumtillfskada  + gerspro.
   tsumma = pslag + tsumma + tlagg + sumtillfskada  +  gers.
   /*MESSAGE "to2" totsumma paslag tillagg  sumtillfskada   gerspro "ts2" tsumma  pslag tlagg  sumtillfskada   gers
   VIEW-AS ALERT-BOX.*/
   IF minsumma = FALSE THEN DO:
       totsumma = totsumma + sumtrafopro.
       
       FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
       IF AVAILABLE sumtemp THEN DO:                   
          tsumma = tsumma + sumtemp.TSF + sumtemp.TSKF.  
       END.
   END.   

   /*MESSAGE minsumma sumtrafopro "to3"  totsumma paslag tillagg  sumtillfskada   gerspro "ts3" tsumma  pslag tlagg  sumtillfskada   gers   
   VIEW-AS ALERT-BOX.*/
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = "Summa kr"
   SUBSTRING(tidut.UT,80) = STRING(totsumma,"->>>>>>9").
   FIND FIRST sumtemp WHERE sumtemp.BETECKNING = mval.BETECKNING AND sumtemp.MARKNR = mval.MARKNR NO-ERROR.
   IF AVAILABLE sumtemp THEN DO:
      ASSIGN
      sumtemp.OVRIG = sumtemp.SMF + sumtemp.JKF + sumtemp.OMF
      sumtemp.TILLF = sumtillfskada      
      sumtemp.SUMMA = tsumma.        
      
   END.
END PROCEDURE.



PROCEDURE huvudsum_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/  
   
   EMPTY TEMP-TABLE fastaga NO-ERROR. 
   FIND FIRST mval WHERE mval.MARKREC = markarec
   AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.
   IF mval.AONR NE "" THEN DO:
      FIND FIRST AONRTIDLAGE WHERE AONRTIDLAGE.AONR = mval.AONR AND AONRTIDLAGE.DELNR = mval.DELNR
      AND AONRTIDLAGE.IDTIDLAG = "Markvärdering" AND AONRTIDLAGE.DATUM2 NE ? NO-LOCK NO-ERROR.
   END.      
   IF Guru.Konstanter:globforetag = "CGRAN"  THEN DO:
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = " A V T A L  ".  
      ASSIGN
      SUBSTRING(tidut.UT,45) = "Utskriftsdatum"
      SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
      CREATE tidut.
      ASSIGN                
      SUBSTRING(tidut.UT,5) = "-----------".
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "Sammanställning av ersättning för intrång enligt aktbilagor".
   END.
   ELSE IF Guru.Konstanter:globforetag = "UMEA" OR Guru.Konstanter:globforetag = "UMBR" THEN DO:
      CREATE tidut.
      CREATE tidut.
      CREATE tidut.
      CREATE tidut.
      CREATE tidut.
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "V Ä R D E R I N G S P R O T O K O L L  ".  
      ASSIGN
      SUBSTRING(tidut.UT,45) = "Utskriftsdatum"
      SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
      CREATE tidut.
      ASSIGN                   
      SUBSTRING(tidut.UT,5) = "--------------------------------------".
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "Sammanställning av ersättning för intrång på nedanstående fastighet".
   END.
   ELSE IF Guru.Konstanter:globforetag = "VAST" OR  Guru.Konstanter:globforetag = "VELD"  OR Guru.Konstanter:globforetag = "elpa" THEN DO:
      CREATE tidut.
      ASSIGN      
      SUBSTRING(tidut.UT,30) = "VÄRDERINGSPROTOKOLL"
      SUBSTRING(tidut.UT,53) = "Utskriftsdatum"
      SUBSTRING(tidut.UT,68) = STRING(TODAY). /* + " " + STRING(TIME,"HH:MM")*/.
      CREATE tidut.
      ASSIGN                 
      SUBSTRING(tidut.UT,30) = "___________________".      
      CREATE tidut.
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,1) = "Sammanställning av ersättning för intrång på nedanstående fastighet".
   END.
   ELSE  DO:     
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "V Ä R D E R I N G S P R O T O K O L L  ".  
      ASSIGN
      SUBSTRING(tidut.UT,45) = "Utskriftsdatum"
      SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
      CREATE tidut.
      ASSIGN                   
      SUBSTRING(tidut.UT,5) = "--------------------------------------".
      CREATE tidut.
      ASSIGN             
      SUBSTRING(tidut.UT,5) = "Sammanställning av ersättning för intrång på nedanstående fastighet".
   END.   
   IF AVAILABLE AONRTIDLAGE THEN DO:
      CREATE tidut.
      ASSIGN
      SUBSTRING(tidut.UT,5) = "Markvärdering klar"
      SUBSTRING(tidut.UT,25) = STRING(AONRTIDLAGE.DATUM2).
   END.
   FIND FIRST mval WHERE mval.MARKREC = markarec
   AND mval.BETECKNING = fbeteckn NO-LOCK NO-ERROR.
   FIND FIRST VARDERING WHERE VARDERING.VARDNR = mval.VARDNR USE-INDEX VARDNR
   NO-LOCK NO-ERROR.      
   CREATE tidut.
   ASSIGN             
   SUBSTRING(tidut.UT,1) = VARDERING.BENAMNING.      
   IF Guru.Konstanter:varforetypval[5] = 1 OR Guru.Konstanter:globforetag = "CELPA" THEN DO:          
      ASSIGN             
      SUBSTRING(tidut.UT,49) = "Nätägare:".   
      SUBSTRING(tidut.UT,60) = VARDERING.NATAGARE.
   END.
   IF SUBSTRING(mval.ANAMN,31,80) NE "" THEN DO:   
      CREATE tidut. 
      SUBSTRING(tidut.UT,1) = SUBSTRING(mval.ANAMN,31,80).
   END.   
   IF Guru.Konstanter:globforetag = "CGRAN" THEN DO:
      CREATE tidut.   
      ASSIGN
      SUBSTRING(tidut.UT,1) = "Markägarnr:"
      SUBSTRING(tidut.UT,13) = STRING(mval.MARKNR).  
      CREATE tidut.   
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Beteckning:"
      SUBSTRING(tidut.UT,13) = mval.BETECKNING.           
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Kommun:"
      SUBSTRING(tidut.UT,9) = mval.KOMMUN
      SUBSTRING(tidut.UT,25) = "Län:"
      SUBSTRING(tidut.UT,30) = mval.VAKER.          
      IF kontaktp = TRUE THEN DO:              
         EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
         CREATE inextradatatemp.          
         ASSIGN
         inextradatatemp.PROGRAM = "FASTLOPNR"                   
         inextradatatemp.HUVUDCH = mval.BETECKNING.                    
         RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
         FIND FIRST extradatatemp NO-LOCK NO-ERROR.
         IF AVAILABLE extradatatemp THEN DO:      
            IF extradatatemp.SOKINT[1] NE 0 THEN DO:
               /*markägarnummer sparat på fastigheten*/
               FIND FIRST magabuff WHERE magabuff.BETECKNING = mval.BETECKNING AND magabuff.MARKNR = extradatatemp.SOKINT[1] NO-LOCK NO-ERROR.
               IF AVAILABLE magabuff THEN DO:
                  allnamn = magabuff.MARKAGARE + "-kontaktperson " .
                  IF magabuff.PNR2 BEGINS "0000" THEN allpersnr = STRING(magabuff.PERSONNUMMER,"999999-9999").
                  ELSE allpersnr = STRING(magabuff.PERSONNUMMER,"999999-9999") + " " + STRING(magabuff.PNR2,"999999-9999").
                  FOR EACH maga WHERE maga.BETECKNING = magabuff.BETECKNING AND maga.MARKNR NE magabuff.MARKNR :         
                     allnamn = allnamn + ", " + maga.MARKAGARE.
                     IF maga.PNR2 BEGINS "0000" THEN DO:         
                        allpersnr =  allpersnr + " " + STRING(maga.PERSONNUMMER,"999999-9999").
                     END.
                     ELSE DO:
                        allpersnr =  allpersnr + " " + STRING(maga.PERSONNUMMER,"999999-9999") + " " + STRING(maga.PNR2,"999999-9999").
                     END.
                  END.
               END.
            END.
            ELSE DO:               
               allnamn = mval.MARKAGARE + "-kontaktperson " .
               IF mval.PNR2 BEGINS "0000" THEN allpersnr = STRING(mval.PERSONNUMMER,"999999-9999").
               ELSE allpersnr = STRING(mval.PERSONNUMMER,"999999-9999") + " " + STRING(mval.PNR2,"999999-9999").
               FOR EACH maga WHERE maga.BETECKNING = mval.BETECKNING AND maga.MARKNR NE mval.MARKNR :         
                  allnamn = allnamn + ", " + maga.MARKAGARE.
                  IF maga.PNR2 BEGINS "0000" THEN DO:         
                     allpersnr =  allpersnr + " " + STRING(maga.PERSONNUMMER,"999999-9999").
                  END.
                  ELSE DO:
                     allpersnr =  allpersnr + " " + STRING(maga.PERSONNUMMER,"999999-9999") + " " + STRING(maga.PNR2,"999999-9999").
                  END.
               END.
            END.
         END.
         IF allnamn = "" THEN DO:
            allnamn = mval.MARKAGARE.
            IF mval.PNR2 BEGINS "0000" THEN allpersnr = STRING(mval.PERSONNUMMER,"999999-9999").
            ELSE allpersnr = STRING(mval.PERSONNUMMER,"999999-9999") + " " + STRING(mval.PNR2,"999999-9999").
         END.         
         CREATE tidut.
         CREATE tidut.
         ASSIGN       
         SUBSTRING(tidut.UT,1) = markvagh
         SUBSTRING(tidut.UT,12) = allnamn.         
      END.
      ELSE DO:       
         CREATE tidut.
         ASSIGN       
         SUBSTRING(tidut.UT,1) = markvagh
         SUBSTRING(tidut.UT,12) = mval.MARKAGARE.                        
      END.
      FIND FIRST NRPREFISERIE WHERE NRPREFISERIE.PREFIX = VARDERING.NATAGARE NO-LOCK NO-ERROR.
      IF AVAILABLE NRPREFISERIE THEN DO:         
         IF NRPREFISERIE.PREFIX = "14"  OR NRPREFISERIE.PREFIX = "15" OR
         NRPREFISERIE.PREFIX = "17"  THEN DO:
            ASSIGN SUBSTRING(tidut.UT,54) = "Graninge Elnät Nord AB".
         END.
         ELSE IF NRPREFISERIE.PREFIX = "11"  OR NRPREFISERIE.PREFIX = "12" OR
         NRPREFISERIE.PREFIX = "13" OR NRPREFISERIE.PREFIX = "16" OR NRPREFISERIE.PREFIX = "18"  THEN DO:
            ASSIGN SUBSTRING(tidut.UT,54) = "Graninge Elnät AB".
         END.
         ELSE ASSIGN SUBSTRING(tidut.UT,54) = NRPREFISERIE.NRTEXT.
      END.      
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Adress:"
      SUBSTRING(tidut.UT,9) = mval.GATUADRESS.
      ASSIGN
      SUBSTRING(tidut.UT,54) = "Organisationsnr:".
      IF VARDERING.NATAGARE = "11" THEN SUBSTRING(tidut.UT,71) = "556536-8599".      
      ELSE IF VARDERING.NATAGARE = "12" THEN SUBSTRING(tidut.UT,71) = "556536-8599".      
      ELSE IF VARDERING.NATAGARE = "13" THEN SUBSTRING(tidut.UT,71) = "556536-8599".      
      ELSE IF VARDERING.NATAGARE = "14" THEN SUBSTRING(tidut.UT,71) = "556017-6306".      
      ELSE IF VARDERING.NATAGARE = "15" THEN SUBSTRING(tidut.UT,71) = "556017-6306".      
      ELSE IF VARDERING.NATAGARE = "16" THEN SUBSTRING(tidut.UT,71) = "556536-8599".      
      ELSE IF VARDERING.NATAGARE = "17" THEN SUBSTRING(tidut.UT,71) = "556017-6306".      
      ELSE IF VARDERING.NATAGARE = "18" THEN SUBSTRING(tidut.UT,71) = "556536-8599".      
      CREATE tidut.
      ASSIGN
      SUBSTRING(tidut.UT,1) = "Pnr:"
      SUBSTRING(tidut.UT,6) = STRING(mval.POSTNUMMER,"999 99")
      SUBSTRING(tidut.UT,13) = "Postadr:"
      SUBSTRING(tidut.UT,22) = mval.POSTADRESS.      
   END.
   ELSE DO:   
      CREATE tidut.   
      ASSIGN       
      SUBSTRING(tidut.UT,1) = "Beteckning:"
      SUBSTRING(tidut.UT,13) = mval.BETECKNING
      SUBSTRING(tidut.UT,49) = "Markägarnr:"
      SUBSTRING(tidut.UT,60) = STRING(mval.MARKNR).  
      IF Guru.Konstanter:globforetag = "UMEA" OR Guru.Konstanter:globforetag = "UMBR"  OR Guru.Konstanter:globforetag = "VAST" OR  Guru.Konstanter:globforetag = "VELD" OR Guru.Konstanter:globforetag = "ELPA" THEN DO:
         ASSIGN SUBSTRING(tidut.UT,65) = "Prisbasbelopp:".
         FIND FIRST MARKDIV NO-LOCK NO-ERROR.
         ASSIGN SUBSTRING(tidut.UT,80) = STRING(bbelopp * 100).               
      END.                  
      IF kontaktp = TRUE THEN DO:                           
         EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
         CREATE inextradatatemp.          
         ASSIGN
         inextradatatemp.PROGRAM = "FASTLOPNR"                   
         inextradatatemp.HUVUDCH = mval.BETECKNING.                    
         RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
         FIND FIRST extradatatemp NO-LOCK NO-ERROR.
         IF AVAILABLE extradatatemp THEN DO:      
            IF extradatatemp.SOKINT[1] NE 0 THEN DO:
               /*markägarnummer sparat på fastigheten*/
               FIND FIRST magabuff WHERE magabuff.BETECKNING = mval.BETECKNING AND magabuff.MARKNR = extradatatemp.SOKINT[1] NO-LOCK NO-ERROR.
               IF AVAILABLE magabuff THEN DO:
                  allnamn = magabuff.MARKAGARE + "-kontaktperson " .
                  CREATE fastaga.
                  ASSIGN
                  fastaga.MARKNR = magabuff.MARKNR 
                  fastaga.MARKAGARE = magabuff.MARKAGARE
                  fastaga.PERSONNUMMER = magabuff.PERSONNUMMER.
                  FIND FIRST MARKAGARE WHERE MARKAGARE.MARKNR = magabuff.MARKNR NO-LOCK NO-ERROR.
                  IF MARKAGARE.PNR2 BEGINS "0000" THEN .
                  ELSE DO:            
                     EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
                     CREATE inextradatatemp.          
                     ASSIGN
                     inextradatatemp.PROGRAM = "MARKAG"                   
                     inextradatatemp.HUVUDINT = MARKAGARE.MARKNR.                    
                     RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
                     FIND FIRST extradatatemp NO-LOCK NO-ERROR.
                     IF AVAILABLE extradatatemp THEN DO:                      
                        fastaga.MARKAGARE = MARKAGARE.MARKAGARE.
                        CREATE fastaga.
                        ASSIGN
                        fastaga.MARKNR = magabuff.MARKNR 
                        fastaga.MARKAGARE = extradatatemp.SOKCHAR[3]
                        fastaga.PERSONNUMMER = magabuff.PNR2.
                     END. 
                  END.
         
                  IF magabuff.PNR2 BEGINS "0000" THEN allpersnr = STRING(magabuff.PERSONNUMMER,"999999-9999").
                  ELSE allpersnr = STRING(magabuff.PERSONNUMMER,"999999-9999") + " " + STRING(magabuff.PNR2,"999999-9999").
                  FOR EACH maga WHERE maga.BETECKNING = magabuff.BETECKNING AND maga.MARKNR NE magabuff.MARKNR :         
                     allnamn = allnamn + ", " + maga.MARKAGARE.
                     CREATE fastaga.
                     ASSIGN
                     fastaga.MARKNR = maga.MARKNR 
                     fastaga.MARKAGARE = maga.MARKAGARE
                     fastaga.PERSONNUMMER = maga.PERSONNUMMER.
                     FIND FIRST MARKAGARE WHERE MARKAGARE.MARKNR = maga.MARKNR NO-LOCK NO-ERROR.
                     IF MARKAGARE.PNR2 BEGINS "0000" THEN .
                     ELSE DO:            
                        EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
                        CREATE inextradatatemp.          
                        ASSIGN
                        inextradatatemp.PROGRAM = "MARKAG"                   
                        inextradatatemp.HUVUDINT = MARKAGARE.MARKNR.                    
                        RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
                        FIND FIRST extradatatemp NO-LOCK NO-ERROR.
                        IF AVAILABLE extradatatemp THEN DO:                      
                           fastaga.MARKAGARE = MARKAGARE.MARKAGARE.
                           CREATE fastaga.
                           ASSIGN
                           fastaga.MARKNR = maga.MARKNR 
                           fastaga.MARKAGARE = extradatatemp.SOKCHAR[3]
                           fastaga.PERSONNUMMER = maga.PNR2.
                        END. 
                     END.
         
                     IF maga.PNR2 BEGINS "0000" THEN allpersnr =  allpersnr + " " + STRING(maga.PERSONNUMMER,"999999-9999").                     
                     ELSE allpersnr =  allpersnr + " " + STRING(maga.PERSONNUMMER,"999999-9999") + " " + STRING(maga.PNR2,"999999-9999").                     
                  END.
               END.
            END.
            ELSE DO:
               /* de som kör vardurval2.w och inte har kontaktperson i browsern utan bara markerar raden*/
               allnamn = mval.MARKAGARE + "-kontaktperson " .         
               CREATE fastaga.
               ASSIGN
               fastaga.MARKNR = mval.MARKNR 
               fastaga.MARKAGARE = mval.MARKAGARE
               fastaga.PERSONNUMMER = mval.PERSONNUMMER.
               FIND FIRST MARKAGARE WHERE MARKAGARE.MARKNR = mval.MARKNR NO-LOCK NO-ERROR.
               IF MARKAGARE.PNR2 BEGINS "0000" THEN .
               ELSE DO:            
                  EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
                  CREATE inextradatatemp.          
                  ASSIGN
                  inextradatatemp.PROGRAM = "MARKAG"                   
                  inextradatatemp.HUVUDINT = MARKAGARE.MARKNR.                    
                  RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
                  FIND FIRST extradatatemp NO-LOCK NO-ERROR.
                  IF AVAILABLE extradatatemp THEN DO:                      
                     fastaga.MARKAGARE = MARKAGARE.MARKAGARE.
                     CREATE fastaga.
                     ASSIGN
                     fastaga.MARKNR = mval.MARKNR 
                     fastaga.MARKAGARE = extradatatemp.SOKCHAR[3]
                     fastaga.PERSONNUMMER = mval.PNR2.
                  END. 
               END.
               IF mval.PNR2 BEGINS "0000" THEN allpersnr = STRING(mval.PERSONNUMMER,"999999-9999").
               ELSE allpersnr = STRING(mval.PERSONNUMMER,"999999-9999") + " " + STRING(mval.PNR2,"999999-9999").
               FOR EACH maga WHERE maga.BETECKNING = mval.BETECKNING AND maga.MARKNR NE mval.MARKNR :         
                  allnamn = allnamn + ", " + maga.MARKAGARE.
                  CREATE fastaga.
                  ASSIGN
                  fastaga.MARKNR = maga.MARKNR 
                  fastaga.MARKAGARE = maga.MARKAGARE
                  fastaga.PERSONNUMMER = maga.PERSONNUMMER.
                  FIND FIRST MARKAGARE WHERE MARKAGARE.MARKNR = maga.MARKNR NO-LOCK NO-ERROR.
                  IF MARKAGARE.PNR2 BEGINS "0000" THEN .
                  ELSE DO:            
                     EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
                     CREATE inextradatatemp.          
                     ASSIGN
                     inextradatatemp.PROGRAM = "MARKAG"                   
                     inextradatatemp.HUVUDINT = MARKAGARE.MARKNR.                    
                     RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
                     FIND FIRST extradatatemp NO-LOCK NO-ERROR.
                     IF AVAILABLE extradatatemp THEN DO:                      
                        fastaga.MARKAGARE = MARKAGARE.MARKAGARE.
                        CREATE fastaga.
                        ASSIGN
                        fastaga.MARKNR = maga.MARKNR 
                        fastaga.MARKAGARE = extradatatemp.SOKCHAR[3]
                        fastaga.PERSONNUMMER = maga.PNR2.
                     END. 
                  END.      
                  IF maga.PNR2 BEGINS "0000" THEN allpersnr =  allpersnr + " " + STRING(maga.PERSONNUMMER,"999999-9999").                  
                  ELSE allpersnr =  allpersnr + " " + STRING(maga.PERSONNUMMER,"999999-9999") + " " + STRING(maga.PNR2,"999999-9999").                  
               END.
            END.
         END. 
         IF allnamn = "" THEN DO:
            /* en ägare */
            allnamn = mval.MARKAGARE.
            IF mval.PNR2 BEGINS "0000" THEN allpersnr = STRING(mval.PERSONNUMMER,"999999-9999").
            ELSE allpersnr = STRING(mval.PERSONNUMMER,"999999-9999") + " " + STRING(mval.PNR2,"999999-9999").
            CREATE fastaga.
            ASSIGN
            fastaga.MARKNR = mval.MARKNR 
            fastaga.MARKAGARE = mval.MARKAGARE
            fastaga.PERSONNUMMER = mval.PERSONNUMMER.
            FIND FIRST MARKAGARE WHERE MARKAGARE.MARKNR = mval.MARKNR NO-LOCK NO-ERROR.
            IF MARKAGARE.PNR2 BEGINS "0000" THEN .
            ELSE DO:            
               EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
               CREATE inextradatatemp.          
               ASSIGN
               inextradatatemp.PROGRAM = "MARKAG"                   
               inextradatatemp.HUVUDINT = MARKAGARE.MARKNR.                    
               RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
               FIND FIRST extradatatemp NO-LOCK NO-ERROR.
               IF AVAILABLE extradatatemp THEN DO:                      
                  fastaga.MARKAGARE = MARKAGARE.MARKAGARE.
                  CREATE fastaga.
                  ASSIGN
                  fastaga.MARKNR = mval.MARKNR 
                  fastaga.MARKAGARE = extradatatemp.SOKCHAR[3]
                  fastaga.PERSONNUMMER = mval.PNR2.
               END. 
            END.
         END.         
      END.
      RUN markagupp_UI.
      
   END.
END PROCEDURE.

PROCEDURE skapain_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/ 
   EMPTY TEMP-TABLE suskog NO-ERROR. 
   EMPTY TEMP-TABLE suskog2 NO-ERROR. 
   EMPTY TEMP-TABLE suvol NO-ERROR. 
   EMPTY TEMP-TABLE suaker NO-ERROR. 
   EMPTY TEMP-TABLE sukab NO-ERROR. 
   EMPTY TEMP-TABLE sumvard NO-ERROR.    
   FOR EACH svard WHERE svard.KRONOR > 0 BREAK BY svard.FASTPRIS BY svard.MARKNR BY svard.BETECKNING:    
      ACCUMULATE svard.KRONOR(TOTAL BY svard.FASTPRIS BY svard.MARKNR BY svard.BETECKNING).             
      IF LAST-OF(svard.BETECKNING) THEN DO:         
         CREATE suskog2.                    
         ASSIGN   
         suskog2.MARKNR = svard.MARKNR 
         suskog2.MARKTYP = ""                                                          
         suskog2.BETECKNING = svard.BETECKNING
         suskog2.FASTPRIS = svard.FASTPRIS.
         ASSIGN
         suskog2.KRONOR = (ACCUM TOTAL BY svard.BETECKNING svard.KRONOR)                                                           
         suskog2.TOTKR = (ACCUM TOTAL BY svard.BETECKNING svard.KRONOR).
      END.
   END.
   FOR EACH suskog2 BREAK BY suskog2.MARKNR BY suskog2.BETECKNING:    
      ACCUMULATE suskog2.KRONOR(TOTAL BY suskog2.MARKNR BY suskog2.BETECKNING).             
      IF LAST-OF(suskog2.BETECKNING) THEN DO:         
         CREATE suskog.                    
         ASSIGN   
         suskog.MARKNR = suskog2.MARKNR 
         suskog.MARKTYP = ""                                                          
         suskog.BETECKNING = suskog2.BETECKNING
         suskog.KRONOR = (ACCUM TOTAL BY suskog2.BETECKNING suskog2.KRONOR)                                                           
         suskog.TOTKR = (ACCUM TOTAL BY suskog2.BETECKNING suskog2.KRONOR).         
      END.
   END.   
   FOR EACH suskog2 WHERE suskog2.FASTPRIS = FALSE:
      DELETE suskog2.
   END.    
   ASSIGN  arrhjsum = 0
   arrhj1 = 0. 
   FOR EACH svard WHERE svard.KRONOR < 0 BREAK BY svard.MARKNR BY svard.BETECKNING BY svard.MARKTYP:    
      ACCUMULATE svard.KRONOR(TOTAL BY svard.MARKNR BY svard.BETECKNING BY svard.MARKTYP).  
      ACCUMULATE svard.HA(TOTAL BY svard.MARKNR BY svard.BETECKNING BY svard.MARKTYP).           
      IF LAST-OF(svard.MARKTYP) THEN DO:
         CREATE suskog.                    
         ASSIGN   
         suskog.MARKNR = svard.MARKNR  
         suskog.BETECKNING = svard.BETECKNING                                                
         suskog.MARKTYP = svard.MARKTYP
         suskog.KRONOR = (ACCUM TOTAL svard.KRONOR) - arrhjsum                  
         arrhjsum = ACCUM TOTAL svard.KRONOR
         suskog.HA = (ACCUM TOTAL svard.HA) - arrhj1                  
         arrhj1 = ACCUM TOTAL svard.HA.                                                  
      END.
   END.   
   IF stamp = TRUE THEN DO:
      ASSIGN  arrhjsum = 0    
      arrhj6 = 0
      arrhj7 = 0
      arrhj8 = 0.         
      FOR EACH vvard BREAK BY vvard.MARKNR BY vvard.BETECKNING BY vvard.DIAM BY vvard.THKL BY vvard.TRAD:    
         ACCUMULATE vvard.TANT(TOTAL BY vvard.MARKNR BY vvard.BETECKNING BY vvard.DIAM BY vvard.THKL BY vvard.TRAD).
         ACCUMULATE vvard.TM3(TOTAL BY vvard.MARKNR BY vvard.BETECKNING BY vvard.DIAM BY vvard.THKL BY vvard.TRAD).
         ACCUMULATE vvard.TKR(TOTAL BY vvard.MARKNR BY vvard.BETECKNING BY vvard.DIAM BY vvard.THKL BY vvard.TRAD).       
         IF LAST-OF(vvard.TRAD) THEN DO:
            CREATE vva2.                    
            ASSIGN      
            vva2.MARKNR = vvard.MARKNR
            vva2.BETECKNING = vvard.BETECKNING
            vva2.VARDNR = vvard.VARDNR
            vva2.TRAD = vvard.TRAD
            vva2.DIAM = vvard.DIAM
            vva2.THKL = vvard.THKL
            vva2.TANT = (ACCUM TOTAL vvard.TANT) - arrhj6                  
            arrhj6 = ACCUM TOTAL vvard.TANT   
            vva2.TM3 = (ACCUM TOTAL vvard.TM3) - arrhj7                  
            arrhj7 = ACCUM TOTAL vvard.TM3 
            vva2.TKR = (ACCUM TOTAL vvard.TKR) - arrhj8                  
            arrhj8 = ACCUM TOTAL vvard.TKR.                                  
         END.
      END.  
      FOR EACH vva2 WHERE vva2.TRAD = "GRAN" BY vva2.THKL:
         FIND FIRST subuff WHERE subuff.MARKNR = vva2.MARKNR AND subuff.BETECKNING = vva2.BETECKNING 
         AND subuff.TRAD = "TALL" AND
         subuff.DIAM = vva2.DIAM AND subuff.GANT = 0  NO-ERROR.
         IF AVAILABLE subuff THEN DO:
            ASSIGN subuff.GANT = vva2.TANT
            subuff.GHKL = vva2.THKL
            subuff.GM3 = vva2.TM3.
            DELETE vva2.
         END.
         ELSE DO:
            ASSIGN
            vva2.GANT = vva2.TANT
            vva2.GHKL = vva2.THKL
            vva2.GM3 = vva2.TM3         
            vva2.TANT = 0
            vva2.THKL = ""
            vva2.TM3 = 0.  
         END.
      END.            
      FOR EACH vva2 WHERE vva2.TRAD = "BJORK" BY vva2.THKL:
         FIND FIRST subuff WHERE subuff.MARKNR = vva2.MARKNR AND subuff.BETECKNING = vva2.BETECKNING
         AND subuff.TRAD = "TALL" AND
         subuff.DIAM = vva2.DIAM AND subuff.BANT = 0  NO-ERROR.
         IF AVAILABLE subuff THEN DO:
            ASSIGN subuff.BANT = vva2.TANT
            subuff.BHKL = vva2.THKL
            subuff.BM3 = vva2.TM3.
            DELETE vva2.
         END.         
         ELSE DO:
            FIND FIRST subuff WHERE subuff.TRAD = "GRAN" AND
            subuff.DIAM = vva2.DIAM AND subuff.BANT = 0  NO-ERROR.
            IF AVAILABLE subuff THEN DO:
               ASSIGN subuff.BANT = vva2.TANT
               subuff.BHKL = vva2.THKL
               subuff.BM3 = vva2.TM3.
               DELETE vva2.
            END.
            ELSE DO:
               ASSIGN vva2.BANT = vva2.TANT
               vva2.BHKL = vva2.THKL
               vva2.BM3 = vva2.TM3
               vva2.TANT = 0
               vva2.THKL = ""
               vva2.TM3 = 0.  
            END.   
         END.
      END.      
      FOR EACH vva2 WHERE vva2.TRAD = "OVRIG" BY vva2.THKL:
         FIND FIRST subuff WHERE subuff.MARKNR = vva2.MARKNR AND subuff.BETECKNING = vva2.BETECKNING 
         AND subuff.TRAD = "TALL" AND
         subuff.DIAM = vva2.DIAM AND subuff.OANT = 0  NO-ERROR.
         IF AVAILABLE subuff THEN DO:
            ASSIGN subuff.OANT = vva2.TANT
            subuff.OHKL = vva2.THKL
            subuff.OM3 = vva2.TM3.
            DELETE vva2.
         END.         
         ELSE DO:
            FIND FIRST subuff WHERE subuff.TRAD = "GRAN" AND
            subuff.DIAM = vva2.DIAM AND subuff.OANT = 0  NO-ERROR.
            IF AVAILABLE subuff THEN DO:
               ASSIGN subuff.OANT = vva2.TANT
               subuff.OHKL = vva2.THKL
               subuff.OM3 = vva2.TM3.
               DELETE vva2.
            END.
            ELSE DO:
               ASSIGN vva2.OANT = vva2.TANT
               vva2.OHKL = vva2.THKL
               vva2.OM3 = vva2.TM3
               vva2.TANT = 0
               vva2.THKL = ""
               vva2.TM3 = 0.  
            END.   
         END.
      END.      
      ASSIGN  arrhjsum = 0
      arrhj1  = 0
      arrhj2 = 0
      arrhj3 = 0
      arrhj4 = 0
      arrhj5 = 0
      arrhj6 = 0
      arrhj7 = 0
      arrhj8 = 0
      arrhj9 = 0
      arrhj10 = 0
      arrhj11 = 0.   
      FOR EACH vva2:            
         ACCUMULATE vva2.GANT(TOTAL).
         ACCUMULATE vva2.GM3(TOTAL).        
         ACCUMULATE vva2.TANT(TOTAL).
         ACCUMULATE vva2.TM3(TOTAL).      
         ACCUMULATE vva2.BANT(TOTAL).
         ACCUMULATE vva2.BM3(TOTAL).        
         ACCUMULATE vva2.OANT(TOTAL).
         ACCUMULATE vva2.OM3(TOTAL).      
      END.                     
      CREATE suvol.  
      IF AVAILABLE vva2 THEN DO:   
         ASSIGN suvol.VARDNR = vva2.VARDNR.
      END.
      ASSIGN
      suvol.GANT = (ACCUM TOTAL vva2.GANT) - arrhj3                  
      arrhj3 = ACCUM TOTAL vva2.GANT   
      suvol.GM3 = (ACCUM TOTAL vva2.GM3) - arrhj4                  
      arrhj4 = ACCUM TOTAL vva2.GM3      
      suvol.TANT = (ACCUM TOTAL vva2.TANT) - arrhj6                  
      arrhj6 = ACCUM TOTAL vva2.TANT   
      suvol.TM3 = (ACCUM TOTAL vva2.TM3) - arrhj7                  
      arrhj7 = ACCUM TOTAL vva2.TM3           
      suvol.BANT = (ACCUM TOTAL vva2.BANT) - arrhj1                  
      arrhj1 = ACCUM TOTAL vva2.BANT   
      suvol.BM3 = (ACCUM TOTAL vva2.BM3) - arrhj2                  
      arrhj2 = ACCUM TOTAL vva2.BM3     
      suvol.OANT = (ACCUM TOTAL vva2.OANT) - arrhj9
      arrhj9 = ACCUM TOTAL vva2.OANT   
      suvol.OM3 = (ACCUM TOTAL vva2.OM3) - arrhj10                  
      arrhj10 = ACCUM TOTAL vva2.OM3.             
      CREATE suvol1.
      FOR EACH suvol:                                    
         ASSIGN          
         suvol1.ANTAL = suvol1.ANTAL + suvol.TANT + suvol.GANT + suvol.BANT + suvol.OANT.
         suvol1.M3 = suvol1.M3 + suvol.TM3 + suvol.GM3 + suvol.BM3 + suvol.OM3.
         suvol1.KRONOR = suvol1.KRONOR + suvol.TKR + suvol.GKR + suvol.BKR + suvol.OKR.       
      END.   
   END.
   ELSE DO:
      ASSIGN  arrhjsum = 0
      arrhj1  = 0
      arrhj2 = 0
      arrhj3 = 0
      arrhj4 = 0
      arrhj5 = 0
      arrhj6 = 0
      arrhj7 = 0
      arrhj8 = 0
      arrhj9 = 0
      arrhj10 = 0
      arrhj11 = 0.   
      FOR EACH vvard BREAK BY vvard.MARKNR BY vvard.BETECKNING:    
         ACCUMULATE vvard.TANT(TOTAL BY vvard.MARKNR BY vvard.BETECKNING).
         ACCUMULATE vvard.TM3(TOTAL BY vvard.MARKNR BY vvard.BETECKNING).
         ACCUMULATE vvard.TKR(TOTAL BY vvard.MARKNR BY vvard.BETECKNING).
         ACCUMULATE vvard.GANT(TOTAL BY vvard.MARKNR BY vvard.BETECKNING).
         ACCUMULATE vvard.GM3(TOTAL BY vvard.MARKNR BY vvard.BETECKNING).
         ACCUMULATE vvard.GKR(TOTAL BY vvard.MARKNR BY vvard.BETECKNING).
         ACCUMULATE vvard.BANT(TOTAL BY vvard.MARKNR BY vvard.BETECKNING).
         ACCUMULATE vvard.BM3(TOTAL BY vvard.MARKNR BY vvard.BETECKNING).
         ACCUMULATE vvard.BKR(TOTAL BY vvard.MARKNR BY vvard.BETECKNING).
         ACCUMULATE vvard.OANT(TOTAL BY vvard.MARKNR BY vvard.BETECKNING).
         ACCUMULATE vvard.OM3(TOTAL BY vvard.MARKNR BY vvard.BETECKNING).            
         ACCUMULATE vvard.OKR(TOTAL BY vvard.MARKNR BY vvard.BETECKNING).
         IF LAST-OF(vvard.BETECKNING) THEN DO:
            CREATE suvol.                    
            ASSIGN   
            suvol.MARKNR = vvard.MARKNR
            suvol.VARDNR = vvard.VARDNR
            suvol.BETECKNING = vvard.BETECKNING                                                          
            suvol.TANT = (ACCUM TOTAL vvard.TANT) - arrhjsum                  
            arrhjsum = ACCUM TOTAL vvard.TANT   
            suvol.TM3 = (ACCUM TOTAL vvard.TM3) - arrhj1                  
            arrhj1 = ACCUM TOTAL vvard.TM3 
            suvol.TKR = (ACCUM TOTAL vvard.TKR) - arrhj2                  
            arrhj2 = ACCUM TOTAL vvard.TKR     
            suvol.GANT = (ACCUM TOTAL vvard.GANT) - arrhj3                  
            arrhj3 = ACCUM TOTAL vvard.GANT   
            suvol.GM3 = (ACCUM TOTAL vvard.GM3) - arrhj4                  
            arrhj4 = ACCUM TOTAL vvard.GM3 
            suvol.GKR = (ACCUM TOTAL vvard.GKR) - arrhj5                  
            arrhj5 = ACCUM TOTAL vvard.GKR   
            suvol.BANT = (ACCUM TOTAL vvard.BANT) - arrhj6                  
            arrhj6 = ACCUM TOTAL vvard.BANT   
            suvol.BM3 = (ACCUM TOTAL vvard.BM3) - arrhj7                  
            arrhj7 = ACCUM TOTAL vvard.BM3 
            suvol.BKR = (ACCUM TOTAL vvard.BKR) - arrhj8                  
            arrhj8 = ACCUM TOTAL vvard.BKR   
            suvol.OANT = (ACCUM TOTAL vvard.OANT) - arrhj9                  
            arrhj9 = ACCUM TOTAL vvard.OANT   
            suvol.OM3 = (ACCUM TOTAL vvard.OM3) - arrhj10                  
            arrhj10 = ACCUM TOTAL vvard.OM3 
           suvol.OKR = (ACCUM TOTAL vvard.OKR) - arrhj11                  
           arrhj11 = ACCUM TOTAL vvard.OKR.                                              
         END.
      END.  
      FOR EACH suvol BREAK BY suvol.MARKNR BY suvol.BETECKNING:         
         CREATE suvol1.                    
         ASSIGN   
         suvol1.MARKNR = suvol.MARKNR
         suvol1.VARDNR = suvol.VARDNR
         suvol1.BETECKNING = suvol.BETECKNING  
         suvol1.ANTAL = suvol.TANT + suvol.GANT + suvol.BANT + suvol.OANT.
         suvol1.M3 = suvol.TM3 + suvol.GM3 + suvol.BM3 + suvol.OM3.
         suvol1.KRONOR = suvol.TKR + suvol.GKR + suvol.BKR + suvol.OKR.
         FIND FIRST FASTVARD WHERE FASTVARD.VARDNR = suvol1.VARDNR AND FASTVARD.BETECKNING = suvol1.BETECKNING NO-LOCK
         NO-ERROR.
         
         fpris = FASTVARD.FORDYRAD.
         FIND FIRST ockvol WHERE ockvol.MARKNR = mval.MARKNR AND ockvol.BETECKNING = mval.BETECKNING NO-LOCK NO-ERROR.
         IF AVAILABLE ockvol THEN DO:   
            IF suvol1.M3 > 0 AND suvol1.M3 < 4 THEN fpris = 180.       
            IF suvol1.M3 GE 4 AND suvol1.M3 < 5 THEN fpris = 165.
            IF suvol1.M3 GE 5 AND suvol1.M3 < 6 THEN fpris = 140.
            IF suvol1.M3 GE 6 AND suvol1.M3 < 7 THEN fpris = 123.
            IF suvol1.M3 GE 7 AND suvol1.M3 < 8 THEN fpris = 111.
            IF suvol1.M3 GE 8 AND suvol1.M3 < 9 THEN fpris = 102.
            IF suvol1.M3 GE 9 AND suvol1.M3 < 10 THEN fpris = 95.
            IF suvol1.M3 GE 10 AND suvol1.M3 < 15 THEN fpris = 90.
            IF suvol1.M3 GE 15 AND suvol1.M3 < 20 THEN fpris = 73.
            IF suvol1.M3 GE 20 AND suvol1.M3 < 25 THEN fpris = 67.
            IF suvol1.M3 GE 25 AND suvol1.M3 < 30 THEN fpris = 65.
            IF suvol1.M3 GE 30 AND suvol1.M3 < 40 THEN fpris = 64.
            IF suvol1.M3 GE 40 AND suvol1.M3 < 50 THEN fpris = 62.
            IF suvol1.M3 GE 50 AND suvol1.M3 < 60 THEN fpris = 60.
            IF suvol1.M3 GE 60 AND suvol1.M3 < 70 THEN fpris = 59.
            IF suvol1.M3 GE 70 AND suvol1.M3 < 80 THEN fpris = 58.
            IF suvol1.M3 GE 80 AND suvol1.M3 < 90 THEN fpris = 57.
            IF suvol1.M3 GE 90 AND suvol1.M3 < 100 THEN fpris = 56.
            IF suvol1.M3 GE 100 AND suvol1.M3 < 110 THEN fpris = 55.
            IF suvol1.M3 GE 110 AND suvol1.M3 < 120 THEN fpris = 53.
            IF suvol1.M3 GE 120 AND suvol1.M3 < 160 THEN fpris = 51.
            IF suvol1.M3 GE 160 AND suvol1.M3 < 200 THEN fpris = 49.
            IF suvol1.M3 GE 200 THEN fpris = 40.                              
         END.
         IF fpris > 0 THEN DO:
            ASSIGN suvol1.FORFAK = fpris 
            suvol1.FORKR = suvol1.M3 * fpris.
         END.     
      END.   
   END.   
   /*ÅKER - L5 = 0*/
   FOR EACH akevard WHERE akevard.L5 = 0 AND akevard.STOLPNR NE 0 BREAK BY akevard.MARKNR BY akevard.BETECKNING BY akevard.PLUS BY akevard.FASTPRIS:    
      ACCUMULATE akevard.KRONOR(TOTAL BY akevard.MARKNR BY akevard.BETECKNING BY akevard.PLUS BY akevard.FASTPRIS).             
      IF LAST-OF(akevard.FASTPRIS) THEN DO:
         CREATE suaker2.                    
         ASSIGN   
         suaker2.MARKNR = akevard.MARKNR 
         suaker2.BETECKNING = akevard.BETECKNING
         suaker2.FASTPRIS = akevard.FASTPRIS
         suaker2.PLUS = akevard.PLUS                                                                   
         suaker2.L5 = akevard.L5
         suaker2.KRONOR = (ACCUM TOTAL BY akevard.FASTPRIS akevard.KRONOR).                  
      END.
   END.
   FOR EACH suaker2 WHERE suaker2.L5 = 0 BREAK BY suaker2.MARKNR BY suaker2.BETECKNING BY suaker2.PLUS:    
      ACCUMULATE suaker2.KRONOR(TOTAL BY suaker2.MARKNR BY suaker2.BETECKNING BY suaker2.PLUS).             
      IF LAST-OF(suaker2.PLUS) THEN DO:
         CREATE suaker.                    
         ASSIGN   
         suaker.MARKNR = suaker2.MARKNR 
         suaker.BETECKNING = suaker2.BETECKNING
         suaker.FASTPRIS = suaker2.FASTPRIS
         suaker.PLUS = suaker2.PLUS 
         suaker.L5 = suaker2.L5
         suaker.KRONOR = (ACCUM TOTAL BY suaker2.PLUS suaker2.KRONOR).                  
      END.
   END.
   FOR EACH suaker2 WHERE suaker2.FASTPRIS = FALSE AND suaker2.L5 = 0:
      DELETE suaker2.
   END.  
   /*Transformatorstation - L5 = 1*/
   IF Guru.Konstanter:globforetag = "UMEA" OR Guru.Konstanter:globforetag = "UMBR" THEN DO:
      FOR EACH akevard WHERE akevard.L5 = 1 AND akevard.STOLPNR > 0 BREAK BY akevard.MARKNR BY akevard.BETECKNING BY akevard.PLUS BY akevard.FASTPRIS:    
         ACCUMULATE akevard.KRONOR(TOTAL BY akevard.MARKNR BY akevard.BETECKNING BY akevard.PLUS BY akevard.FASTPRIS).             
         IF LAST-OF(akevard.FASTPRIS) THEN DO:
            CREATE suaker2.                    
            ASSIGN   
            suaker2.MARKNR = akevard.MARKNR 
            suaker2.BETECKNING = akevard.BETECKNING
            suaker2.FASTPRIS = akevard.FASTPRIS
            suaker2.PLUS = akevard.PLUS                                                                   
            suaker2.L5 = akevard.L5
            suaker2.STOLPNR = akevard.STOLPNR 
            suaker2.KRONOR = (ACCUM TOTAL BY akevard.FASTPRIS akevard.KRONOR).                  
         END.
      END.
      FOR EACH akevard WHERE akevard.L5 = 1 AND akevard.STOLPNR = 0 BREAK BY akevard.MARKNR BY akevard.BETECKNING BY akevard.PLUS BY akevard.FASTPRIS:    
         ACCUMULATE akevard.KRONOR(TOTAL BY akevard.MARKNR BY akevard.BETECKNING BY akevard.PLUS BY akevard.FASTPRIS).             
         IF LAST-OF(akevard.FASTPRIS) THEN DO:
            CREATE suaker2.                    
            ASSIGN   
            suaker2.MARKNR = akevard.MARKNR 
            suaker2.BETECKNING = akevard.BETECKNING
            suaker2.FASTPRIS = akevard.FASTPRIS
            suaker2.PLUS = akevard.PLUS                                                                   
            suaker2.L5 = akevard.L5
            suaker2.KRONOR = (ACCUM TOTAL BY akevard.FASTPRIS akevard.KRONOR).                  
         END.
      END.
   END.
   ELSE DO:
      /*ALLTID FASTPRIS = TRUE alltså ingen skillnad på suaker2 och suaker utom för Umeå*/   
      FOR EACH akevard WHERE akevard.L5 = 1 BREAK BY akevard.MARKNR BY akevard.BETECKNING BY akevard.PLUS BY akevard.FASTPRIS:    
         ACCUMULATE akevard.KRONOR(TOTAL BY akevard.MARKNR BY akevard.BETECKNING BY akevard.PLUS BY akevard.FASTPRIS).             
         IF LAST-OF(akevard.FASTPRIS) THEN DO:
            CREATE suaker2.                    
            ASSIGN   
            suaker2.MARKNR = akevard.MARKNR 
            suaker2.BETECKNING = akevard.BETECKNING
            suaker2.FASTPRIS = akevard.FASTPRIS
            suaker2.PLUS = akevard.PLUS                                                                   
            suaker2.L5 = akevard.L5
            suaker2.STOLPNR = akevard.STOLPNR 
            suaker2.KRONOR = (ACCUM TOTAL BY akevard.FASTPRIS akevard.KRONOR).                  
         END.
      END.
   END.
   FOR EACH suaker2 WHERE suaker2.L5 = 1 BREAK BY suaker2.MARKNR BY suaker2.BETECKNING BY suaker2.PLUS:    
      ACCUMULATE suaker2.KRONOR(TOTAL BY suaker2.MARKNR BY suaker2.BETECKNING BY suaker2.PLUS).             
      IF LAST-OF(suaker2.PLUS) THEN DO:
         CREATE suaker.                    
         ASSIGN   
         suaker.MARKNR = suaker2.MARKNR 
         suaker.BETECKNING = suaker2.BETECKNING
         suaker.FASTPRIS = suaker2.FASTPRIS
         suaker.PLUS = suaker2.PLUS 
         suaker.L5 = suaker2.L5
         suaker.KRONOR = (ACCUM TOTAL BY suaker2.PLUS suaker2.KRONOR).                  
      END.
   END.
   FOR EACH suaker2 WHERE suaker2.FASTPRIS = FALSE AND suaker2.L5 = 1:
      DELETE suaker2.
   END.    
   
   FOR EACH akekab BREAK BY akekab.MARKNR BY akekab.BETECKNING BY akekab.PLUS BY akekab.FASTPRIS:    
      ACCUMULATE akekab.KRONOR(TOTAL BY akekab.MARKNR BY akekab.BETECKNING BY akekab.PLUS BY akekab.FASTPRIS).
      ACCUMULATE akekab.KRDEC(TOTAL BY akekab.MARKNR BY akekab.BETECKNING BY akekab.PLUS BY akekab.FASTPRIS).             
      IF LAST-OF(akekab.FASTPRIS) THEN DO:
         CREATE sukab2.                    
         ASSIGN   
         sukab2.MARKNR = akekab.MARKNR 
         sukab2.BETECKNING = akekab.BETECKNING 
         sukab2.PLUS = akekab.PLUS                                                                   
         sukab2.FASTPRIS = akekab.FASTPRIS
         sukab2.KRONOR = (ACCUM TOTAL BY akekab.FASTPRIS akekab.KRONOR ).
         sukab2.KRDEC = (ACCUM TOTAL BY akekab.FASTPRIS akekab.KRDEC ).                                                                
      END.
   END. 
   
   FOR EACH sukab2 BREAK BY sukab2.MARKNR BY sukab2.BETECKNING BY sukab2.PLUS:    
      ACCUMULATE sukab2.KRONOR(TOTAL BY sukab2.MARKNR BY sukab2.BETECKNING BY sukab2.PLUS).
      ACCUMULATE sukab2.KRDEC(TOTAL BY sukab2.MARKNR BY sukab2.BETECKNING BY sukab2.PLUS).             
      IF LAST-OF(sukab2.PLUS) THEN DO:
         CREATE sukab.                    
         ASSIGN   
         sukab.MARKNR = sukab2.MARKNR 
         sukab.BETECKNING = sukab2.BETECKNING 
         sukab.PLUS = sukab2.PLUS                                                                          
         sukab.KRONOR = (ACCUM TOTAL BY sukab2.PLUS sukab2.KRONOR).
         sukab.KRDEC = (ACCUM TOTAL BY sukab2.PLUS sukab2.KRDEC).                                                                
      END.
   END.
   FOR EACH sukab2 WHERE sukab2.FASTPRIS = FALSE:
      DELETE sukab2.
   END.   
   FOR EACH mval USE-INDEX ORDNING:
      FIND FIRST sumvard WHERE sumvard.MARKNR = mval.MARKNR AND sumvard.BETECKNING = mval.BETECKNING NO-LOCK NO-ERROR.
      IF NOT AVAILABLE sumvard THEN DO:
         CREATE sumvard.
         ASSIGN sumvard.MARKNR = mval.MARKNR sumvard.KRONOR = 0.
      END.         
      FOR EACH suskog WHERE suskog.MARKNR = mval.MARKNR AND suskog.BETECKNING = mval.BETECKNING NO-LOCK:
         ASSIGN sumvard.KRONOR = sumvard.KRONOR + suskog.KRONOR.
      END.   
      FOR EACH suvol1 WHERE suvol1.MARKNR = mval.MARKNR AND suvol1.BETECKNING = mval.BETECKNING NO-LOCK:      
         ASSIGN sumvard.KRONOR = sumvard.KRONOR + suvol1.KRONOR + suvol1.FORKR.            
      END.   
      FOR EACH suaker WHERE suaker.MARKNR = mval.MARKNR AND suaker.BETECKNING = mval.BETECKNING NO-LOCK:
         ASSIGN sumvard.KRONOR = sumvard.KRONOR + suaker.KRONOR.
      END. 
      FOR EACH sukab WHERE sukab.MARKNR = mval.MARKNR AND sukab.BETECKNING = mval.BETECKNING NO-LOCK:
         ASSIGN sumvard.KRONOR = sumvard.KRONOR + sukab.KRONOR.
      END. 
   END.    
END PROCEDURE.

PROCEDURE bilaga7_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/     
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "1".
   SUBSTRING(tidut.UT,5) = "För ledningshavaren gäller:           Aktbilaga :  7".
   SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
   CREATE tidut.   
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "1.1".
   SUBSTRING(tidut.UT,5) = "Ledningshavaren har rätt att för all framtid anlägga , bibehålla och förnya elektrisk".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "starkströmsledning (jordkabel och luftledning) om högst 24 kV och transformatorkiosk i".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "det läge de har på marken eller blivit utstakade på marken.".
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "1.2"
   SUBSTRING(tidut.UT,5) = "Tillbehör till ledningen är stolpar, stag, linor, jordtag och övriga". 
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "säkerhetsanordningar.".
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "1.3"
   SUBSTRING(tidut.UT,5) = "Ledningshavaren har rätt att röja befintlig och tillkommande vegetation inom".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "ledningsgatan eller annan upplåten mark för vilka framtida produktionsbortfall har".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "ersatts eller utan ersättning upplåtits vid ledningen framdragande. Intrångets".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "omfattning framgår av bif. värderingsprotokoll." .
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "1.4"
   SUBSTRING(tidut.UT,5) = "Ledningshavaren har därutöver rätt att fälla för ledningen hindrande eller för".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "dess säkerhet farliga träd och buskar. Dessa förblir fastighetsägarens egendom.".
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "1.5"
   SUBSTRING(tidut.UT,5) ="Ledningshavaren har för ledningens anläggande och bibehållande rätt att ta ".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) ="erforderlig sten som inte upplagts för särskilt ändamål.".
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "1.6"
   SUBSTRING(tidut.UT,5) = "Ledningshavaren äger i den omfattning som erfordras, tillträde till de belastade".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "fastigheterna för ledningens anläggande samt för tillsyn, underhåll, ombyggnad och".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "reparation av densamma. Ledningshavaren skall då iaktta de anvisningar som".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) ="fastighetsägaren ger beträffande rätten att ta väg, i den mån det kan ske utan att".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "väsentlig olägenhet uppkommer." .
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "1.7"
   SUBSTRING(tidut.UT,5) = "Ledningshavaren är skyldig att genom sakkunnig personal och utan kostnad för".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "fastighetsägaren anvisa eller vidta lämpliga skyddsåtgärder vid fastighetsägarens".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "utförande av arbeten enligt punkt 2.2 nedan.".
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "1.8"
   SUBSTRING(tidut.UT,5) = "Ledningshavaren skall utöva rättigheterna så att belastade fastigheter inte betungas".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "mer än nödvändigt. Ledningshavaren skall skyndsamt reparera eller ersätta skador som".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "uppkommer vid reparationsarbeten eller dylikt.".
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "1.9"
   SUBSTRING(tidut.UT,5) = "Har fastighetsägaren byggnad eller annan anläggning i anslutning till ledningen är ".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "han skyldig att hålla den i sådant skick att skada eller olägenhet inte uppstår.".
   CREATE tidut.
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "2"
   SUBSTRING(tidut.UT,5) = "För ägaren av belastad fastighet gäller:".
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "2.1"
   SUBSTRING(tidut.UT,5) = "Fastighetsägaren får inte i ledningens närhet ändra markanvändningen så att ".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "ledningens bibehållande enligt gällande säkerhetsbestämmelser äventyras.".
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "2.2"
   SUBSTRING(tidut.UT,5) = "Fastighetsägaren får inte heller utan att i god tid inhämta ledningshavarens ".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "medgivande spränga, fälla träd, gräva  uppsätta stängsel, schakta eller på annat". 
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "sätt ändra marknivån eller vidta annan åtgärd som kan medföra fara för ledningen".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "eller dess tillbehör eller medföra att ledningen kan vålla skada på person eller".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "egendom.".
   CREATE tidut.
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "3"
   SUBSTRING(tidut.UT,5) = "Ledningshavaren och berörda fastighetsägare är överens om att följande skall gälla vid".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "sidan av ledningsrätten:".
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "3.1"
   SUBSTRING(tidut.UT,5) = "Ledningshavaren åtager sig att informera berörda fastighetsägare om förestående".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "avverkning av farliga träd utanför skogsgatan. De träd som avses fällas skall märkas".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "upp. När besiktningen är klar skall en stämplingslängd i god tid skickas till ".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "markägaren med ersättningserbjudande för den stämplade skogen.".
   CREATE tidut.
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "3.2"
   SUBSTRING(tidut.UT,5) = "Ledningshavaren skall därvid erbjuda markägaren att antingen tillvarata de fällda ".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "träden eller om inte fastighetsägaren antar detta erbjudande, inlösa träden. Om bara".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "något enstaka träd behöver huggas lämnas detta i ledningsgatan. Trädstammarna ".
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,5) = "upparbetas och barkas då enligt gällande skogsskyddsbestämmelser.".   
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,132) = "$".
END PROCEDURE.

PROCEDURE markagupp_UI :
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "Kommun:"
   SUBSTRING(tidut.UT,9) = mval.KOMMUN   
   SUBSTRING(tidut.UT,32) = "Län:"
   SUBSTRING(tidut.UT,37) = mval.VAKER.
   IF mval.SOCKEN NE "" THEN
   ASSIGN SUBSTRING(tidut.UT,63) = "Socken:"
   SUBSTRING(tidut.UT,71) = mval.SOCKEN.   
   IF kontaktp = TRUE THEN DO:           
      CREATE tidut.
      ASSIGN       
      SUBSTRING(tidut.UT,1) = markvagh
      SUBSTRING(tidut.UT,12) = allnamn.
      CREATE tidut.      
   END.
   ELSE DO:         
      CREATE tidut.
      CREATE tidut.
      ASSIGN                 
      SUBSTRING(tidut.UT,1) = markvagh.
      SUBSTRING(tidut.UT,12) = mval.MARKAGARE.
      CREATE tidut.      
      CREATE fastaga.
      ASSIGN
      fastaga.MARKNR = mval.MARKNR 
      fastaga.MARKAGARE = mval.MARKAGARE
      fastaga.PERSONNUMMER = mval.PERSONNUMMER.
      FIND FIRST MARKAGARE WHERE MARKAGARE.MARKNR = mval.MARKNR NO-LOCK NO-ERROR.
      IF MARKAGARE.PNR2 BEGINS "0000" THEN .
      ELSE DO:            
         EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
         CREATE inextradatatemp.          
         ASSIGN
         inextradatatemp.PROGRAM = "MARKAG"                   
         inextradatatemp.HUVUDINT = MARKAGARE.MARKNR.                    
         RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
         FIND FIRST extradatatemp NO-LOCK NO-ERROR.
         IF AVAILABLE extradatatemp THEN DO:                      
            fastaga.MARKAGARE = MARKAGARE.MARKAGARE.
            CREATE fastaga.
            ASSIGN
            fastaga.MARKNR = mval.MARKNR 
            fastaga.MARKAGARE = extradatatemp.SOKCHAR[3]
            fastaga.PERSONNUMMER = mval.PNR2.
         END. 
      END.
   END.   
   CREATE tidut.
   ASSIGN       
   SUBSTRING(tidut.UT,1) = "Adress:"
   SUBSTRING(tidut.UT,9) = mval.GATUADRESS
   SUBSTRING(tidut.UT,45) = "Postnr:"
   SUBSTRING(tidut.UT,53) = STRING(mval.POSTNUMMER,"999 99")
   SUBSTRING(tidut.UT,60) = "Postadress:"
   SUBSTRING(tidut.UT,72) = mval.POSTADRESS.
END PROCEDURE.

PROCEDURE mval_UI :
   IF NOT VALID-HANDLE(edataapph) THEN DO:
      RUN EXTRADATAHMT.P PERSISTENT SET edataapph.                           
   END.
   
   FIND FIRST markval WHERE NO-LOCK NO-ERROR.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR.
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "VARDNRARTAL"                   
   inextradatatemp.HUVUDINT = markval.VARDNR.                    
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:      
      ASSIGN
      vardartal = extradatatemp.SOKINT[1].      
   END.
   ELSE vardartal = YEAR(TODAY).   
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR.
   EMPTY TEMP-TABLE extradatatemp NO-ERROR.
     
   /*oktober 1995 = 256.9
   föregående års oktober =  kopindex
   starters per meter = 3.10 */
   RUN kopindex_UI (INPUT  (vardartal - 1), OUTPUT kopindex, OUTPUT bbelopp ).
   
   /*markval = markerade markägare*/
   EMPTY TEMP-TABLE mval NO-ERROR. 
  
   FOR EACH markval:
      CREATE mval.
      BUFFER-COPY markval TO mval.
      ASSIGN mval.PRODEL = mval.procent
      mval.ANDEL = "".
      /*Om andel istället för procent*/
      IF Guru.Konstanter:varforetypval[22] = 1 THEN DO:       
         IF mval.PROCENT = 100 THEN DO:
            ASSIGN
            mval.ANDEL = "1/1"        
            mval.PRODEL = mval.PROCENT.         
         END.
         ELSE DO:      
            EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
            CREATE inextradatatemp.          
            ASSIGN
            inextradatatemp.PROGRAM = "MARKFASTANDEL"                   
            inextradatatemp.HUVUDINT = mval.MARKNR.                    
            inextradatatemp.HUVUDCH = mval.BETECKNING.                    
            RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
            FIND FIRST extradatatemp NO-LOCK NO-ERROR.
            IF AVAILABLE extradatatemp THEN DO:      
               ASSIGN
               mval.ANDEL = extradatatemp.SOKCHAR[1]               
               mval.PRODEL = extradatatemp.SOKDEC[1].         
            END.       
            ELSE DO:
               mval.PRODEL = markval.PROCENT.
               IF mval.PROCENT = 100 THEN mval.ANDEL = "1/1".
               ELSE IF mval.PROCENT = 80 THEN mval.ANDEL = "4/5".         
               ELSE IF mval.PROCENT = 66 THEN mval.ANDEL = "2/3".         
               ELSE IF mval.PROCENT = 60 THEN mval.ANDEL = "3/5".         
               ELSE IF mval.PROCENT = 50 THEN mval.ANDEL = "1/2".         
               ELSE IF mval.PROCENT = 40 THEN mval.ANDEL = "2/5".         
               ELSE IF mval.PROCENT = 33 THEN mval.ANDEL = "1/3".         
               ELSE IF mval.PROCENT = 34 THEN mval.ANDEL = "1/3".   
               ELSE IF mval.PROCENT = 25 THEN mval.ANDEL = "1/4".
               ELSE IF mval.PROCENT = 20 THEN mval.ANDEL = "1/5".
               ELSE IF mval.PROCENT = 10 THEN mval.ANDEL = "1/10".
               ELSE mval.ANDEL = STRING(mval.PROCENT) + "/100".
            END.
         END.
      END.
      EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
      CREATE inextradatatemp.          
      ASSIGN
      inextradatatemp.PROGRAM = "FASTLOPNR"                   
      inextradatatemp.HUVUDCH = mval.BETECKNING.                    
      RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
      FIND FIRST extradatatemp NO-LOCK NO-ERROR.
      IF AVAILABLE extradatatemp THEN DO:      
         IF mval.MARKNR = extradatatemp.SOKINT[1] THEN mval.KONTAKT = TRUE.         
      END. 
   END.
END PROCEDURE.

PROCEDURE storskog_UI.
  
   storsu = 0.   
   /* nystorskog from 20140224*/
   /*man måste söka på mval.MARKNR också 20150211 annars får man hela summan för alla markägare på fastigheten*/
   FOR EACH svard WHERE svard.BETECKNING = mval.BETECKNING AND svard.MARKNR = mval.MARKNR:      
      IF svard.MARKTYP = "Norrlands inland" OR svard.MARKTYP = "Norrlands kustland ej Gävleborgs län" OR svard.MARKTYP = "Tillväxtområde 3 (2009 års skognorm)" 
      OR svard.MARKTYP = "Tillväxtområde 4A (2009 års skognorm)" OR svard.MARKTYP = "Tillväxtområde 4B (2009 års skognorm)" 
      THEN DO:
         storsu = storsu + svard.KRONOR.
      END.
   END.
   FIND FIRST svard WHERE svard.BETECKNING = mval.BETECKNING AND (svard.MARKTYP = "Norrlands inland" OR svard.MARKTYP = "Norrlands kustland ej Gävleborgs län" OR svard.MARKTYP = "Tillväxtområde 3 (2009 års skognorm)" 
   OR svard.MARKTYP = "Tillväxtområde 4A (2009 års skognorm)" OR svard.MARKTYP = "Tillväxtområde 4B (2009 års skognorm)" )  NO-ERROR.
   IF AVAILABLE svard THEN DO:      
      FOR EACH akekab WHERE akekab.MARKNR = mval.MARKNR AND akekab.BETECKNING = mval.BETECKNING NO-LOCK:
         /*lägg till kabel*/
         storsu = storsu + akekab.KRONOR.
      END.        
      FOR EACH akevard WHERE akevard.MARKNR = mval.MARKNR AND akevard.BETECKNING = mval.BETECKNING
      AND akevard.L5 = 1 AND akevard.KRONOR > 0 :
         /* Ej station enligt Ture Ösberg 20100825*/
         IF Guru.Konstanter:globforetag = "UMEA" OR  Guru.Konstanter:globforetag = "UMBR" THEN.
         ELSE DO:         
            /*lägg till Station och kabelskåp*/
            storsu = storsu + akevard.KRONOR.
         END.
      END.
      
                     
      EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
      EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
      CREATE inextradatatemp.          
      ASSIGN
      inextradatatemp.PROGRAM = "REVAVTAL"                   
      inextradatatemp.HUVUDINT = mval.VARDNR
      inextradatatemp.HUVUDCH = mval.BETECKNING.                          
      RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
      FOR EACH extradatatemp :               
         storsu = storsu + extradatatemp.SOKDEC[3].
      END.
          
      IF Guru.Konstanter:globforetag = "UMEA" OR  Guru.Konstanter:globforetag = "UMBR" THEN DO:      
         /*enligt Ture östberg ska allt med i underlaget  20090929*/
         FOR EACH akevard WHERE  akevard.BETECKNING = mval.BETECKNING
         AND akevard.L5 = 0 AND akevard.STOLPNR NE 0  NO-LOCK:
            /*åkervärdering*/
            storsu = storsu + akevard.KRONOR.
         END.     
         FIND FIRST suvol1 WHERE suvol1.BETECKNING = mval.BETECKNING NO-LOCK NO-ERROR.
         IF AVAILABLE suvol1 THEN DO:
            /*fördyrad avverkning*/
            storsu = storsu + suvol1.FORKR.         
         END.                  
      END.
      IF sumfrotpaexp > 0 THEN DO:
         /*exprop för virke , måste räkna på hela summan*/    
         EMPTY TEMP-TABLE inextradatatemp NO-ERROR.
         EMPTY TEMP-TABLE extradatatemp NO-ERROR.
         CREATE inextradatatemp.          
         ASSIGN
         inextradatatemp.PROGRAM = "VARDFAST2"     
         inextradatatemp.HUVUDINT = mval.VARDNR
         inextradatatemp.HUVUDCH = mval.BETECKNING.
         RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
         FIND FIRST extradatatemp NO-LOCK NO-ERROR.
         IF AVAILABLE extradatatemp THEN DO:
            IF extradatatemp.SOKLOG[1] = TRUE OR extradatatemp.SOKLOG[2] = TRUE THEN DO:
            /*20181026 ändrat att exprop och överens tillkommer för både F-Försäljning och T-Tillvaratagende */          
               /*försäljning rotnetto erbjudande  och påslag*/
               
               storsu = storsu +  (extradatatemp.SOKINT[1] * 0.25).                 
            END.          
         END.
         

      END.   
      
      /*om exprop görs efteråt skall även den läggas till summan - gäller bara Umeå*/
/*      FUNKAR INTE PASLAG SÄTT SENARE
      IF Guru.Konstanter:varforetypval[40] = 0 THEN   storsu = storsu + paslag.*/
   END.
END PROCEDURE.

PROCEDURE moment2_UI.
   
   moment2 = "".
  /* nystorskog from 20140224*/
   IF storsu > 0 THEN DO:
      indexup = 1.
      IF Guru.Konstanter:globforetag = "UMEA" OR  Guru.Konstanter:globforetag = "UMBR" THEN DO:
         /* nystorskog from 20140224 nytt år = 2013*/
         hjar = 2013.                  
         FIND FIRST KINDEX WHERE KINDEX.AR = hjar AND
         KINDEX.MANAD = 10 USE-INDEX AR NO-LOCK NO-ERROR.  
         IF AVAILABLE KINDEX  THEN DO:
            hjarst = KINDEX.VARDE.            
            hjar = hjar + 1.
            REPEAT:             
               FIND FIRST KINDEX WHERE KINDEX.AR = hjar AND
               KINDEX.MANAD = 10 USE-INDEX AR NO-LOCK NO-ERROR.  
               IF AVAILABLE KINDEX  THEN DO:
                  indexup = KINDEX.VARDE / hjarst.                  
               END.
               ELSE LEAVE.
               IF hjar GE YEAR(TODAY) - 1 THEN LEAVE.
               ELSE DO:
                  ASSIGN
                  hjar = hjar + 1.                
               END.
            END.
         END.
      END.
      /*om exprop görs efteråt skall även den läggas till summan - gäller bara Umeå*/
      IF Guru.Konstanter:globforetag = "UMEA" OR  Guru.Konstanter:globforetag = "UMBR" THEN DO:
         /* Ej station enligt Ture Ösberg 20100825*/              
         storsu = storsu + pslag - (sumtrafopro * 0.25).         
      END.   
      ELSE IF Guru.Konstanter:varforetypval[40] = 0 THEN DO:   
         storsu = storsu + pslag.
      END.         

      IF Guru.Konstanter:globforetag = "UMEA" OR  Guru.Konstanter:globforetag = "UMBR" THEN DO:
         fbstor = 2572.
      END.
      ELSE DO: 
         IF vardartal GE 2022 THEN DO:
           fbstor = 2834.
         END.  
         ELSE IF vardartal = 2021 THEN DO:
           fbstor = 2757.
         END.
         ELSE IF vardartal = 2020 THEN DO:
           fbstor = 2749.
         END.
         ELSE IF vardartal = 2019 THEN DO:
           fbstor = 2706.
         END.
         ELSE IF vardartal = 2018 THEN DO:
           fbstor = 2645.
         END.
         ELSE IF vardartal = 2017 THEN DO:
           fbstor = 2601.
         END.     
      END.   
      FIND FIRST MARKDIV NO-LOCK NO-ERROR.  
      IF storsu LE 5000 THEN DO:      
         stsuad = fbstor * indexup.
         moment2 = " enligt Moment 2 punkt1".
      END.      
      ELSE IF storsu > 5000 THEN DO:
         stsuad = 0.2 * storsu.
         IF stsuad > bbelopp * 20 THEN stsuad = bbelopp * 20. 
         moment2 = " enligt Moment 2 punkt2".
      END.
                
      /*EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
      EMPTY TEMP-TABLE extradatatemp NO-ERROR.
      CREATE inextradatatemp.          
      ASSIGN
      inextradatatemp.PROGRAM = "STORSKOG"                                  
      inextradatatemp.HUVUDINT =  1
      inextradatatemp.HUVUDCH = "1".                    
      RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp).
      FIND FIRST extradatatemp NO-LOCK NO-ERROR.
      IF AVAILABLE extradatatemp THEN DO:            
         IF storsu LE 5000 THEN DO:      
            stsuad = extradatatemp.SOKINT[1] * indexup.
            moment2 = " enligt Moment 2 punkt1".
         END.      
         ELSE IF storsu > 5000 THEN DO:
            stsuad = 0.2 * storsu.
            IF stsuad > bbelopp * 20 THEN stsuad =bbelopp * 20. 
            moment2 = " enligt Moment 2 punkt2".
         END.
      END.*/
   END.
   
END PROCEDURE.

PROCEDURE kopindex_UI.
DEFINE INPUT PARAMETER artal AS INTEGER NO-UNDO.
DEFINE OUTPUT PARAMETER kopindex AS DECIMAL NO-UNDO.
DEFINE OUTPUT PARAMETER bbelopp AS INTEGER NO-UNDO.
/*oktobers värden föregående år. För lite decimaler i Admin markvärd. Använd detta istället. Ligger i ANDVARDSPECAPP.P SKAPPROTOU7.P och EXVPFAKT.P*/
   IF artal = 2022 THEN DO:
      ASSIGN
      kopindex = 384.04
      bbelopp = 525.    /*2023  */      
   END.
   IF artal = 2021 THEN DO:
      ASSIGN
      kopindex = 346.44.
      bbelopp = 483.    /*2022*/      
   END.
   IF artal = 2020 THEN DO:
      ASSIGN
      kopindex = 336.97.
      bbelopp = 476.    /*2021*/      
   END.
   IF artal = 2019 THEN DO:
      ASSIGN
      kopindex = 336.04.
      bbelopp = 473.    /*2020*/      
   END.
   IF artal = 2018 THEN DO:
      ASSIGN
      kopindex = 330.72.
      bbelopp = 465.    /*2019*/      
   END.
   IF artal = 2017 THEN DO:
      ASSIGN
      kopindex = 323.38.
      bbelopp = 455.    /*2018*/      
   END.
   IF artal = 2016 THEN DO:
      ASSIGN
      kopindex = 318.00.
      bbelopp = 448.    /*2017*/      
   END.
   IF artal = 2015 THEN DO:
      ASSIGN
      kopindex = 314.29.
      bbelopp = 443.    /*2016 */      
   END.
   IF artal = 2014 THEN DO:
      ASSIGN
      kopindex = 314.02.
      bbelopp = 445.    /*2015*/      
   END.   
   IF artal = 2013 THEN DO: 
      ASSIGN
      kopindex = 314.40
      bbelopp = 444.    /*2014*/
   END.   
   IF artal = 2012 THEN DO:
      ASSIGN
      kopindex = 314.59
      bbelopp = 445.    /*2013*/
   END.   
   IF artal = 2011 THEN DO:
      ASSIGN
      kopindex = 313.42
      bbelopp = 440.    /*2012*/
   END.   
   IF artal = 2010 THEN DO:
      ASSIGN
       kopindex = 305.57
       bbelopp = 428.    /*2011*/
   END.    
   
END PROCEDURE.

PROCEDURE revadmhmt_UI.
DEFINE INPUT PARAMETER artal AS INTEGER NO-UNDO.
DEFINE OUTPUT PARAMETER azon1 AS DECIMAL NO-UNDO.
DEFINE OUTPUT PARAMETER azon2 AS DECIMAL NO-UNDO.
DEFINE OUTPUT PARAMETER afastb AS INTEGER NO-UNDO.
/*revavtal uppdateras årligen finns i revadmhmt_UI i ANDVARDSPECAPP.P och SKAPPROTOU7.P*/
   
    
   IF artal = 2019 THEN DO:
      ASSIGN
      azon1 = 10.75
      azon2 = 4.18
      afastb = 2104.
      
   END.
   ELSE IF artal = 2020 THEN DO:
      ASSIGN
      azon1 = 10.92
      azon2 = 4.25
      afastb = 2138.
      
   END. 
   ELSE IF artal = 2021 THEN DO:
      ASSIGN
      azon1 = 10.77
      azon2 = 4.18
      afastb = 2144.
            
   END.
   ELSE IF artal = 2022 then DO:
      ASSIGN
      azon1 = 11.66
      azon2 = 4.53
      afastb = 2204. 
   END.   
   ELSE  DO:
      /*2023 innan man vet*/
      ASSIGN
      azon1 = 11.66
      azon2 = 4.53
      afastb = 2204. 
   END.   
   
  
END PROCEDURE.


PROCEDURE kskapnatbelopp_UI.
DEFINE OUTPUT PARAMETER kskapkr AS INTEGER  NO-UNDO.
DEFINE OUTPUT PARAMETER nstnakerkr AS INTEGER  NO-UNDO.
DEFINE OUTPUT PARAMETER nstnovrigkr AS INTEGER  NO-UNDO.
/*hårdkodning kabelskåp och station */
/*Används ej längre
IF Guru.Konstanter:varforetypval[40] = 1 THEN DO:
   ASSIGN   
   kskapkr = 625
   nstnakerkr = 5375
   nstnovrigkr = 2750.                 
END.
ELSE DO:
   ASSIGN   
   kskapkr = 500
   nstnakerkr = 4300
   nstnovrigkr = 2200.                    
END. 
IF Guru.Konstanter:globforetag = "KRIN" THEN DO:
   /*varforetypval[40] = 0*/
   ASSIGN 
   kskapkr = 500
   nstnakerkr = 4500
   nstnovrigkr = 2200.
   
END.   
*/

END PROCEDURE.

PROCEDURE hmtvaonr_UI :
   DEFINE INPUT PARAMETER vdnr AS INTEGER  NO-UNDO.
   DEFINE OUTPUT PARAMETER pnr AS CHARACTER   NO-UNDO.
   DEFINE OUTPUT PARAMETER dnr AS INTEGER  NO-UNDO.
   DEFINE OUTPUT PARAMETER pben AS CHARACTER  NO-UNDO.
   FIND FIRST VARDERING  WHERE VARDERING.VARDNR = vdnr NO-LOCK NO-ERROR.
   FIND FIRST AOVARD  WHERE AOVARD.VARDNR = vdnr  NO-LOCK NO-ERROR.
   IF AVAILABLE AOVARD  THEN DO:   
      FIND FIRST AONRTAB WHERE AONRTAB.AONR = AOVARD.AONR AND AONRTAB.DELNR = AOVARD.DELNR  NO-LOCK NO-ERROR.
      IF AVAILABLE AONRTAB THEN DO:
         ASSIGN 
         pnr = AONRTAB.AONR
         dnr = AONRTAB.DELNR
         pben =  AONRTAB.ORT. 
      END.  
   END.
   ELSE DO:
      ASSIGN      
      pben =  VARDERING.BENAMNING.
   END.       
END PROCEDURE.