/*BEREXCELIN.P*/
&SCOPED-DEFINE NEW NEW
&SCOPED-DEFINE SHARED SHARED
{BLOB.I}
&SCOPED-DEFINE NEW 
&SCOPED-DEFINE SHARED 
{GLOBVAR2DEL1.I}

{REGVAR.I}
{SOKDEF.I}
DEFINE VARIABLE antalbladstart AS INTEGER NO-UNDO.
DEFINE VARIABLE sidraknare AS INTEGER NO-UNDO.   
DEFINE VARIABLE koppsvarkonst AS LOGICAL NO-UNDO.
     


DEFINE VARIABLE felexcel AS LOGICAL NO-UNDO.
DEFINE VARIABLE link AS CHARACTER NO-UNDO.
link = ?.
DEFINE VARIABLE blobproch AS HANDLE NO-UNDO.
DEFINE VARIABLE chWindow           AS COM-HANDLE NO-UNDO.
DEFINE VARIABLE chExcelApplication AS COM-HANDLE NO-UNDO.
DEFINE VARIABLE chWorkbook         AS COM-HANDLE NO-UNDO.
DEFINE VARIABLE chWorksheet        AS COM-HANDLE NO-UNDO.
DEFINE VARIABLE chWorkSheetRange   AS COM-HANDLE NO-UNDO.
DEFINE VARIABLE chChart            AS COM-HANDLE NO-UNDO.
DEFINE VARIABLE chCell             AS COM-HANDLE NO-UNDO.
DEFINE VARIABLE chPageBreak        AS COM-HANDLE NO-UNDO.
DEFINE VARIABLE cActiveCell        AS COM-HANDLE NO-UNDO.
DEFINE VARIABLE cActiveSheet       AS COM-HANDLE NO-UNDO.
DEFINE VARIABLE cHyperlink         AS COM-HANDLE NO-UNDO.
DEFINE VARIABLE iCount             AS INTEGER    NO-UNDO.
DEFINE VARIABLE iIndex             AS INTEGER    NO-UNDO.
DEFINE VARIABLE iMonth             AS INTEGER    NO-UNDO.
DEFINE VARIABLE dAnnualQuota       AS DECIMAL    NO-UNDO.
DEFINE VARIABLE dTotalSalesAmount  AS DECIMAL    NO-UNDO.
DEFINE VARIABLE iRad               AS INTEGER    INITIAL 0.
DEFINE VARIABLE iRadslut           AS INTEGER    INITIAL 0.
DEFINE VARIABLE cRad               AS CHARACTER  NO-UNDO.
DEFINE VARIABLE cRange             AS CHARACTER  NO-UNDO.
DEFINE VARIABLE aRange             AS CHARACTER  NO-UNDO.
DEFINE VARIABLE dRange             AS CHARACTER  NO-UNDO.
DEFINE VARIABLE cRangefont         AS CHARACTER  NO-UNDO.
DEFINE VARIABLE radnrS             AS CHARACTER  NO-UNDO.
DEFINE VARIABLE allac              AS CHARACTER  EXTENT 50 NO-UNDO. /*alla kolumner*/
DEFINE VARIABLE allacolumtext      AS CHARACTER  EXTENT 50 NO-UNDO. /*inläsning från excel*/
DEFINE VARIABLE allachar           AS LOGICAL    EXTENT 50 NO-UNDO. /*skall kolumn vara text även om den innehåller tal*/
DEFINE VARIABLE slutbredd          AS INTEGER    NO-UNDO.
DEFINE VARIABLE raknare            AS INTEGER    NO-UNDO.
DEFINE VARIABLE rubrikvar          AS LOGICAL    NO-UNDO.
DEFINE VARIABLE utnr               AS INTEGER    EXTENT 50 NO-UNDO.
DEFINE VARIABLE estartnr           AS INTEGER    EXTENT 50 NO-UNDO.
DEFINE VARIABLE bredd              AS INTEGER    EXTENT 50 NO-UNDO.
DEFINE VARIABLE nrcol              AS INTEGER    EXTENT 50 NO-UNDO.
DEFINE VARIABLE konr               AS INTEGER    EXTENT 50 NO-UNDO.
DEFINE VARIABLE breddantal         AS INTEGER    NO-UNDO.
DEFINE VARIABLE datchar            AS CHARACTER  NO-UNDO.
DEFINE VARIABLE arvar              AS INTEGER    NO-UNDO.
DEFINE VARIABLE manvar             AS INTEGER    NO-UNDO.
DEFINE VARIABLE dagvar             AS INTEGER    NO-UNDO.
DEFINE VARIABLE datvar             AS DATE       NO-UNDO.
DEFINE VARIABLE bladvar            AS INTEGER    NO-UNDO.
DEFINE VARIABLE radanmrak          AS INTEGER    NO-UNDO.
DEFINE VARIABLE helaben            AS CHARACTER  NO-UNDO.           /*lägga ut hela benämningen*/
DEFINE VARIABLE startnu            AS LOGICAL    NO-UNDO.
DEFINE VARIABLE slutnu             AS LOGICAL    NO-UNDO.
DEFINE VARIABLE bermtrlvar             AS LOGICAL    NO-UNDO.
DEFINE VARIABLE bild AS CHARACTER NO-UNDO.
DEFINE VARIABLE textspar1 AS CHARACTER NO-UNDO.
DEFINE VARIABLE textspar2 AS CHARACTER NO-UNDO.
DEFINE VARIABLE savedrow AS INTEGER NO-UNDO.
DEFINE VARIABLE inrow AS INTEGER NO-UNDO.
DEFINE VARIABLE vcol AS CHARACTER NO-UNDO.
/*RAD variabler*/
DEFINE VARIABLE vilkencol AS CHARACTER NO-UNDO.
DEFINE VARIABLE helafalt AS LOGICAL   NO-UNDO.
DEFINE VARIABLE coltext  AS CHARACTER NO-UNDO.
DEFINE VARIABLE coltextrange  AS CHARACTER NO-UNDO.
DEFINE VARIABLE radklar  AS LOGICAL   NO-UNDO.
DEFINE VARIABLE max-row AS INTEGER NO-UNDO.
DEFINE VARIABLE totheight AS DECIMAL NO-UNDO.
DEFINE VARIABLE bgfargexcel AS INTEGER NO-UNDO.
DEFINE VARIABLE ingabyggnr AS LOGICAL NO-UNDO.
DEFINE INPUT PARAMETER startc AS CHARACTER NO-UNDO.
DEFINE INPUT PARAMETER slutc AS CHARACTER NO-UNDO.
DEFINE VARIABLE sistaradtillexcel AS INTEGER NO-UNDO.
/*utnr = positioner i tidut.UT
  estartnr = start pos i excel dvs utnr[4] av tidut.UT hamnar pos estartnr[4]
  i excel*/

DEFINE SHARED TEMP-TABLE extemp
   {EXTEMPDEF.I}
   DEFINE TEMP-TABLE innehall NO-UNDO
   {BYGGINNEHALL.I}
DEFINE SHARED VARIABLE bildvar AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE rowspar AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE samerow AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE valaonr AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE valdelnr AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE valort AS CHARACTER NO-UNDO. 
DEFINE SHARED VARIABLE valomrade AS CHARACTER NO-UNDO. 
DEFINE VARIABLE startpos AS INTEGER NO-UNDO.
DEFINE VARIABLE data AS CHARACTER NO-UNDO.
DEFINE VARIABLE exrowvar AS INTEGER NO-UNDO.
DEFINE VARIABLE filvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE excelapph AS HANDLE NO-UNDO.
DEFINE VARIABLE utberapph AS HANDLE NO-UNDO.
DEFINE VARIABLE svar AS LOGICAL NO-UNDO.
DEFINE VARIABLE kompsida AS LOGICAL NO-UNDO.

DEFINE {&NEW} {&SHARED} TEMP-TABLE extraextemp NO-UNDO LIKE extemp.

DEFINE {&NEW} {&SHARED} TEMP-TABLE excoltemp
   FIELD COLNAME AS CHARACTER
   FIELD COLNUM AS INTEGER
   FIELD WDTH AS INTEGER.

DEFINE {&NEW} {&SHARED} TEMP-TABLE bryttemp NO-UNDO
   FIELD ROWVAR AS INTEGER
   INDEX ROWVAR ROWVAR.

&Scoped-define SHARED SHARED 
{BILDBERTEMP.I}
   
IF Guru.Konstanter:appcon THEN DO:
   RUN UTBERAPP.P PERSISTENT SET utberapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT.
END.
ELSE DO:
   RUN UTBERAPP.P PERSISTENT SET utberapph.
END.

PROCEDURE koppsvarkonst_UI :
   DEFINE INPUT  PARAMETER koppsvarkonstin AS LOGICAL NO-UNDO.
   koppsvarkonst = koppsvarkonstin.
END PROCEDURE.
PROCEDURE kompsida_UI :
   DEFINE INPUT PARAMETER kompsidain AS LOGICAL NO-UNDO.
   kompsida = kompsidain.
END PROCEDURE.
PROCEDURE raknare_UI :
   DEFINE INPUT PARAMETER hurm AS INTEGER NO-UNDO.
   raknare = raknare + hurm. 
END PROCEDURE.

PROCEDURE extemp_UI :   
   ASSIGN
   raknare = 1
   totheight = 0
   rowspar = 1.
   RUN sattinbild_UI.
   /*KOMPSIDA*/
   IF kompsida = TRUE THEN DO:
      FOR EACH extemp WHERE extemp.DATA = "" AND extemp.BILD = TRUE NO-LOCK:
         extemp.BORT = TRUE.
      END.
      IF link NE ? THEN raknare = 5.
   END.
   {EXCELFEL.I}
  
   FOR EACH extemp WHERE extemp.BORT = FALSE: 
      IF extemp.BCOLOR = -1 THEN RUN KonstruktionPasidan_UI.            
      IF extemp.ROWVAR = samerow THEN DO:
         /*horizontal linje*/
      END.
      ELSE DO:
         IF extemp.ROWVAR NE rowspar THEN DO:
            /*rowspar = radnummer på föregående extemp*/
            raknare = raknare + 1.            
         END.
         IF bildvar = TRUE THEN DO:
            RUN sattinbild_UI.
            bildvar = FALSE.
         END.         
         IF SUBSTRING(extemp.DATA,131,1) = "£" THEN DO:  
            IF kompsida = TRUE THEN DO:
               IF SUBSTRING(extemp.DATA,1,5) = "*****" THEN DO:
                  RUN utdataexcel_UI (INPUT FALSE,INPUT 1,INPUT 4,INPUT 4,INPUT raknare).                  
               END.
               ELSE IF SUBSTRING(extemp.DATA,1,6) =  "BILDER" THEN DO: 
                  IF koppsvarkonst = TRUE THEN DO:
                     RUN koppdokvidkonst_UI (INPUT INTEGER(TRIM(SUBSTRING(extemp.DATA,7)))).
                  END.
               END.    
            END.
            ELSE DO:
               CREATE bryttemp.
               ASSIGN bryttemp.ROWVAR = raknare. 
               bildvar = TRUE.
               IF SUBSTRING(extemp.DATA,1,6) =  "BILDER" THEN DO: 
                  IF koppsvarkonst = TRUE THEN DO:
                     RUN koppdokvidkonst_UI (INPUT INTEGER(TRIM(SUBSTRING(extemp.DATA,7)))).
                  END.
               END.   
            END.            
         END.
         ELSE DO:
            IF SUBSTRING(extemp.DATA,1,5) = "*****" THEN DO:
               IF kompsida = TRUE THEN DO:
                  RUN utdataexcel_UI (INPUT FALSE,INPUT 1,INPUT 4,INPUT 4,INPUT raknare).                  
               END.
               ELSE IF Guru.Konstanter:globforetag = "cELPA" OR Guru.Konstanter:globforetag = "BORL" THEN DO:
                  RUN utdataexcel_UI (INPUT FALSE,INPUT 1,INPUT 4,INPUT 4,INPUT raknare).                  
               END.
            END.
            ELSE IF SUBSTRING(extemp.DATA,1,19) = "Materiel ej kopplat" OR SUBSTRING(extemp.DATA,1,6) = "P3-KOD" THEN DO:
               RUN utdataexcel_UI (INPUT TRUE,INPUT ?,INPUT ?,INPUT ?,INPUT raknare).               
            END.
            ELSE IF SUBSTRING(extemp.DATA,1,5) = "-----" AND extemp.COLVAR = "A" THEN DO:
               samerow = extemp.ROWVAR.
            END.            
            ELSE IF SUBSTRING(extemp.DATA,1,3) =  SUBSTRING(Guru.Konstanter:genk,1,3) THEN DO: 
               RUN utdataexcel_UI (INPUT TRUE,INPUT 2,INPUT ?,INPUT 2,INPUT raknare).               
            END.                          
            ELSE IF SUBSTRING(extemp.DATA,1,6) =  "BILDER" THEN DO: 
               IF koppsvarkonst = TRUE THEN DO:
                  RUN koppdokvidkonst_UI (INPUT INTEGER(TRIM(SUBSTRING(extemp.DATA,7)))).
                  
               END.   
            END.
            ELSE IF extemp.DATA =  "Kryssruta" THEN DO: 
               RUN Kryssruta_UI (INPUT raknare). 
            END.
            ELSE DO:
               RUN utdataexcel_UI (INPUT TRUE,INPUT ?,INPUT ?,INPUT ?,INPUT raknare).               
            END.    
         END.
         {EXCELFEL.I}      
         IF extemp.ROWVAR NE rowspar THEN DO:
            cRange = extemp.COLVAR + STRING(raknare).
            totheight = totheight + (chWorkSheet:Range(cRange):RowHeight) NO-ERROR.      
         END.
         rowspar = extemp.ROWVAR.
      END.
   END.
   RUN sattbryt_UI (INPUT TABLE bryttemp).
   {EXCELFEL.I}    
   RUN koppdok_UI.              
   /*              SIDOR*/
   RUN sidbrytbredd_UI  (INPUT 1).    
   IF VALID-HANDLE(utberapph) THEN DELETE PROCEDURE utberapph NO-ERROR.
   utberapph = ?.
END PROCEDURE.

PROCEDURE extemp2_UI :
   /*BERLISTA2*/
   IF raknare = 0 THEN raknare = 1.
   ASSIGN
   totheight = 0
   rowspar = 1.
   RUN sattinbild_UI.
   {EXCELFEL.I}      
   IF link NE ? THEN RUN raknare_UI (INPUT 5).  
   FOR EACH extemp: 
      {EXCELFEL.I}      
      IF extemp.ROWVAR = samerow THEN DO:
         /*horizontal linje*/
      END.
      ELSE DO:
         IF extemp.ROWVAR NE rowspar THEN DO:
            /*rowspar = radnummer på föregående extemp*/
            raknare = raknare + 1.            
         END.
         IF SUBSTRING(extemp.DATA,131,1) = "£" THEN DO:
            CREATE bryttemp.
            ASSIGN bryttemp.ROWVAR = raknare. 
            bildvar = TRUE.
         END.
         ELSE DO:
            IF SUBSTRING(extemp.DATA,1,5) = "*****" OR SUBSTRING(extemp.DATA,1,5) = "=====" THEN DO:
               IF Guru.Konstanter:globforetag = "CELPA" OR Guru.Konstanter:globforetag = "BORL" THEN DO:
                  RUN utdataexcel_UI (INPUT FALSE,INPUT 1,INPUT 4,INPUT 4,INPUT raknare).                  
               END.
            END.
            ELSE IF SUBSTRING(extemp.DATA,1,19) = "Materiel ej kopplat" OR SUBSTRING(extemp.DATA,1,6) = "P3-KOD" THEN DO:
               RUN utdataexcel_UI (INPUT TRUE,INPUT 2,INPUT ?,INPUT 2,INPUT raknare).               
            END.
            ELSE IF SUBSTRING(extemp.DATA,1,5) = "-----" AND extemp.COLVAR = "A" THEN DO:
               samerow = extemp.ROWVAR.
            END.
            ELSE IF SUBSTRING(extemp.DATA,1,3) =  SUBSTRING(Guru.Konstanter:genk,1,3) THEN DO: 
               RUN utdataexcel_UI (INPUT TRUE,INPUT 2,INPUT ?,INPUT 2,INPUT raknare).               
            END.
            ELSE DO:
               RUN utdataexcel_UI (INPUT TRUE,INPUT ?,INPUT ?,INPUT ?,INPUT raknare).               
            END.    
         END.
         IF extemp.ROWVAR NE rowspar THEN DO:
            cRange = extemp.COLVAR + STRING(raknare).
            totheight = totheight + (chWorkSheet:Range(cRange):RowHeight) NO-ERROR.      
         END.
         rowspar = extemp.ROWVAR.
      END.
   END.
   RUN sattbryt_UI (INPUT TABLE bryttemp).
   IF VALID-HANDLE(utberapph) THEN DELETE PROCEDURE utberapph NO-ERROR.
END PROCEDURE.

PROCEDURE sattinbild_UI :
   sidraknare = sidraknare + 1.   
   /*FOREBILDER*/
   IF link = ? THEN DO:
      {LOGGOR.I}  
   END.
   IF link NE ? THEN DO:
      IF raknare = 0 OR raknare = 1 THEN RUN imageexcel_UI (INPUT link,INPUT "A",INPUT 1).
      ELSE DO:
         /*kompsida*/
         IF Guru.Konstanter:globforetag = "Celpa" OR Guru.Konstanter:globforetag = "UMEA" OR Guru.Konstanter:globforetag = "ALTE" THEN DO:         
         END.
         ELSE IF kompsida = TRUE THEN .
         ELSE RUN imageexcel_UI (INPUT link,INPUT "A",INPUT raknare).
      END.
   END.   
   {EXCELFEL.I}      
END PROCEDURE.   
PROCEDURE dubbelrad_UI :
   DEFINE INPUT  PARAMETER ddr AS LOGICAL NO-UNDO. 
   /*
   IF ddr = TRUE THEN chWorkSheet:Range(cRange):RowHeight = chWorkSheet:Range(cRange):RowHeight * 2. 
   */
   chWorkSheet:Range(cRange):WrapText = ddr. 
END PROCEDURE.
PROCEDURE blobut_UI :
   DEFINE VARIABLE resid AS INTEGER NO-UNDO.
   DEFINE VARIABLE infillong AS MEMPTR NO-UNDO.
   {FINNSDYNBLOB.I}
   RUN SkapaVirutiellBild_UI IN blobproch (INPUT bildbertemp.FILNAMN, OUTPUT infillong).
   data = bildbertemp.FILNAMN + " (se nedan) är kopplad till:".
   RUN dataexcel_UI (INPUT exrowvar,INPUT data).                     
   bildvar = TRUE. 
   exrowvar = exrowvar + 1.
   RUN htmkonval_UI IN utberapph (INPUT valaonr,INPUT valomrade,INPUT bildbertemp.NUM,OUTPUT TABLE valsoktemp).
   FIND FIRST valsoktemp NO-LOCK NO-ERROR.
   RUN dataexcel_UI (INPUT exrowvar,INPUT data).
   IF valsoktemp.SOKCHAR[2] NE "" THEN DO:
      data = valsoktemp.SOKCHAR[6] + ": " + valsoktemp.SOKCHAR[2].
      RUN dataexcel_UI (INPUT exrowvar,INPUT data).                     
      exrowvar = exrowvar + 1.
   END.
   IF valsoktemp.SOKCHAR[3] NE "" THEN DO:
      data = valsoktemp.SOKCHAR[7] + ": " + valsoktemp.SOKCHAR[3].
      RUN dataexcel_UI (INPUT exrowvar,INPUT data).                                         
      exrowvar = exrowvar + 1.
   END.
   IF valsoktemp.SOKCHAR[4] NE "" THEN DO:
      data = valsoktemp.SOKCHAR[8] + ": " + valsoktemp.SOKCHAR[4].
      RUN dataexcel_UI (INPUT exrowvar,INPUT data).                    
      exrowvar = exrowvar + 1.
   END.
   IF valsoktemp.SOKINT[1] NE ? THEN DO:
      data = valsoktemp.SOKCHAR[9] + ": " + STRING(valsoktemp.SOKINT[1]).
      RUN dataexcel_UI (INPUT exrowvar,INPUT data).                     
      exrowvar = exrowvar + 1.
   END.
   IF valsoktemp.SOKINT[2] NE ? THEN DO:
      data = valsoktemp.SOKCHAR[10] + ": " + STRING(valsoktemp.SOKINT[2]).
      RUN dataexcel_UI (INPUT exrowvar,INPUT data).                                         
      exrowvar = exrowvar + 1.
   END.
   IF valsoktemp.SOKCHAR[5] NE "" THEN DO:
      data = "Fri ID: " + valsoktemp.SOKCHAR[5].
      RUN dataexcel_UI (INPUT exrowvar,INPUT data).                    
      exrowvar = exrowvar + 1.
   END.
   IF valsoktemp.SOKCHAR[1] NE "" THEN DO:
      data = "Konstruktion: " + valsoktemp.SOKCHAR[1].
      RUN dataexcel_UI (INPUT exrowvar,INPUT data).                       
      exrowvar = exrowvar + 1.
   END.
   IF bildvar = TRUE THEN DO:      
      totheight = (chWorkSheet:Range(cRange):RowHeight) * (exrowvar) NO-ERROR. 
      IF bildbertemp.FILNAMN NE "" THEN DO:
         RUN imageBlobexcel_UI (INPUT infillong,INPUT "A",INPUT exrowvar).         
         exrowvar = exrowvar + 30.                              
         RUN brytning_UI (INPUT exrowvar).                      
      END.
   END.   
END PROCEDURE.


PROCEDURE koppdok_UI:
   FIND FIRST bildbertemp NO-ERROR.
   IF NOT AVAILABLE bildbertemp THEN.
   ELSE DO:
      ASSIGN
      exrowvar = rowspar
      bildvar = FALSE.   
      RUN brytning_UI (INPUT exrowvar).
      {EXCELFEL.I}      
      FOR EACH bildbertemp NO-LOCK:
         IF INDEX(bildbertemp.FILNAMN,"\") = 0 AND INDEX(bildbertemp.FILNAMN,":") = 0 THEN DO:            
            RUN blobut_UI.
            NEXT.      
         END.   
         {EXCELFEL.I}      
         filvar = "".
         EMPTY TEMP-TABLE valsoktemp NO-ERROR.
         RUN htmkonval_UI IN utberapph (INPUT valaonr,INPUT valomrade,INPUT bildbertemp.NUM,OUTPUT TABLE valsoktemp).
         FIND FIRST valsoktemp NO-LOCK NO-ERROR.
         IF bildbertemp.FILNAMN = "" THEN DO:
            NEXT.
         END.
         ELSE DO:
            FILE-INFO:FILE-NAME = bildbertemp.FILNAMN.
            IF SEARCH(FILE-INFO:FULL-PATHNAME) = ? THEN DO:
               NEXT.
            END.
            ELSE DO:
               bildvar = FALSE.
               bildbertemp.FILNAMN = REPLACE(bildbertemp.FILNAMN,"\","/").
               startpos = INDEX(bildbertemp.FILNAMN,".",LENGTH(bildbertemp.FILNAMN) - 5).
               DEFINE VARIABLE pos AS INTEGER NO-UNDO.
               DEFINE VARIABLE pos2 AS INTEGER NO-UNDO.
               pos = 0.
               REPEAT :
                  pos2 = pos.
                  pos = pos + 1.
                  pos = INDEX(bildbertemp.FILNAMN,"/",pos).                                        
                  IF pos = 0 THEN LEAVE.
               END.
               pos = pos2 + 1.
               IF pos GE 0 THEN filvar = SUBSTRING(bildbertemp.FILNAMN,pos,LENGTH(bildbertemp.FILNAMN)).
               ELSE filvar = bildbertemp.FILNAMN.
               IF SUBSTRING(bildbertemp.FILNAMN,startpos,LENGTH(bildbertemp.FILNAMN)) = ".gif" OR
               SUBSTRING(bildbertemp.FILNAMN,startpos,LENGTH(bildbertemp.FILNAMN)) = ".jpg" OR
               SUBSTRING(bildbertemp.FILNAMN,startpos,LENGTH(bildbertemp.FILNAMN)) = ".jpeg" OR
               SUBSTRING(bildbertemp.FILNAMN,startpos,LENGTH(bildbertemp.FILNAMN)) = ".bmp" OR 
               SUBSTRING(bildbertemp.FILNAMN,startpos,LENGTH(bildbertemp.FILNAMN)) = ".png" THEN DO:
                  data = filvar + " (se nedan) är kopplad till:".
                  RUN dataexcel_UI (INPUT exrowvar,INPUT data).                     
                  bildvar = TRUE.
               END.
               ELSE DO:
                  data = filvar + " (se länk nedan) är kopplad till:".
                  RUN dataexcel_UI (INPUT exrowvar,INPUT data).                                                         
               END.
               exrowvar = exrowvar + 1.
               RUN dataexcel_UI (INPUT exrowvar,INPUT data).
               IF valsoktemp.SOKCHAR[2] NE "" THEN DO:
                  data = valsoktemp.SOKCHAR[6] + ": " + valsoktemp.SOKCHAR[2].
                  RUN dataexcel_UI (INPUT exrowvar,INPUT data).                     
                  exrowvar = exrowvar + 1.
               END.
               IF valsoktemp.SOKCHAR[3] NE "" THEN DO:
                  data = valsoktemp.SOKCHAR[7] + ": " + valsoktemp.SOKCHAR[3].
                  RUN dataexcel_UI (INPUT exrowvar,INPUT data).                                         
                  exrowvar = exrowvar + 1.
               END.
               IF valsoktemp.SOKCHAR[4] NE "" THEN DO:
                  data = valsoktemp.SOKCHAR[8] + ": " + valsoktemp.SOKCHAR[4].
                  RUN dataexcel_UI (INPUT exrowvar,INPUT data).                    
                  exrowvar = exrowvar + 1.
               END.
               IF valsoktemp.SOKINT[1] NE ? THEN DO:
                  data = valsoktemp.SOKCHAR[9] + ": " + STRING(valsoktemp.SOKINT[1]).
                  RUN dataexcel_UI (INPUT exrowvar,INPUT data).                     
                  exrowvar = exrowvar + 1.
               END.
               IF valsoktemp.SOKINT[2] NE ? THEN DO:
                  data = valsoktemp.SOKCHAR[10] + ": " + STRING(valsoktemp.SOKINT[2]).
                  RUN dataexcel_UI (INPUT exrowvar,INPUT data).                                         
                  exrowvar = exrowvar + 1.
               END.
               IF valsoktemp.SOKCHAR[5] NE "" THEN DO:
                  data = "Fri ID: " + valsoktemp.SOKCHAR[5].
                  RUN dataexcel_UI (INPUT exrowvar,INPUT data).                    
                  exrowvar = exrowvar + 1.
               END.
               IF valsoktemp.SOKCHAR[1] NE "" THEN DO:
                  data = "Konstruktion: " + valsoktemp.SOKCHAR[1].
                  RUN dataexcel_UI (INPUT exrowvar,INPUT data).                       
                  exrowvar = exrowvar + 1.
               END.
               IF bildvar = TRUE THEN DO:
                  
                  totheight = (chWorkSheet:Range(cRange):RowHeight) * (exrowvar) NO-ERROR. 
                  
                  IF bildbertemp.FILNAMN NE "" THEN DO:
                     RUN imageexcel_UI (INPUT bildbertemp.FILNAMN,INPUT "A",INPUT exrowvar).
                     
                     exrowvar = exrowvar + 1.                     
                  END.
               END.
               ELSE DO:
                  RUN hyperdataexcel_UI (INPUT exrowvar,INPUT bildbertemp.FILNAMN).
                  exrowvar = exrowvar + 1.
               END.
            END.
         END.
         exrowvar = exrowvar + 30.                              
         RUN brytning_UI (INPUT exrowvar).                        
      END.
   END.
END PROCEDURE.

PROCEDURE koppdokvidkonst_UI:
   DEFINE INPUT  PARAMETER knum AS INTEGER NO-UNDO.
   ASSIGN 
   exrowvar = rowspar
   bildvar = FALSE.  
   {EXCELFEL.I}      
   FOR EACH bildbertemp WHERE bildbertemp.NUM = knum NO-LOCK:
      {EXCELFEL.I}      
      
      EMPTY TEMP-TABLE valsoktemp NO-ERROR.
      RUN htmkonval_UI IN utberapph (INPUT valaonr,INPUT valomrade,INPUT bildbertemp.NUM,OUTPUT TABLE valsoktemp).
      FIND FIRST valsoktemp NO-LOCK NO-ERROR.
      IF bildbertemp.FILNAMN = "" THEN DO:
         DELETE bildbertemp.
         NEXT.
      END.
      ELSE DO:
         IF bildbertemp.FILNAMN MATCHES "*.gif" THEN.
         ELSE IF bildbertemp.FILNAMN MATCHES "*.jpg" THEN.
         ELSE IF bildbertemp.FILNAMN MATCHES "*.jpeg" THEN.
         ELSE IF bildbertemp.FILNAMN MATCHES "*.bmp" THEN.
         ELSE IF bildbertemp.FILNAMN MATCHES "*.png" THEN.
         ELSE NEXT. 
         IF SEARCH(FILE-INFO:FULL-PATHNAME) = ? THEN DO:
            NEXT.
         END.
         ELSE DO:
            bildvar = TRUE.
            IF bildvar = TRUE THEN DO:               
               totheight = (chWorkSheet:Range(cRange):RowHeight) * (exrowvar) NO-ERROR. 
               IF bildbertemp.FILNAMN NE "" THEN DO:
                  RUN imageexcel_UI (INPUT bildbertemp.FILNAMN,INPUT "A",INPUT exrowvar).                 
                  exrowvar = exrowvar + 1.                     
               END.
            END.
            ELSE DO:
               RUN hyperdataexcel_UI (INPUT exrowvar,INPUT bildbertemp.FILNAMN).
               exrowvar = exrowvar + 1.
            END.
         END.
      END.
      exrowvar = exrowvar + 30.                              
      RUN brytning_UI (INPUT exrowvar).  
      DELETE bildbertemp.                      
   END.   
END PROCEDURE.

PROCEDURE excelhead_UI :
   DEFINE INPUT PARAMETER leftcenterright AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER head AS CHARACTER NO-UNDO.
   head = head + " sid &S".
   IF leftcenterright = 1 THEN chWorkSheet:PageSetup:LeftHeader = head NO-ERROR.
   IF leftcenterright = 2 THEN chWorkSheet:PAGESETUP:CENTERHEADER = head NO-ERROR.
   IF leftcenterright = 3 THEN chWorkSheet:PAGESETUP:RIGHTHEADER = head NO-ERROR.        
END PROCEDURE.
/*För att inte se screenvalue under pågående*/
PROCEDURE noscreenexcel_UI.
   chExcelApplication:ScreenUpdating = FALSE.
   
   {EXCELFEL.I}      
END.
/*För att se screenvalue när det är klart*/
PROCEDURE screenexcel_UI.
   chExcelApplication:ScreenUpdating = TRUE.
   chExcelApplication:VISIBLE = TRUE NO-ERROR.
   {EXCELFEL.I}      
END.
/*Lägga in blob*/
PROCEDURE imageBlobexcel_UI:
   DEFINE INPUT PARAMETER infillong AS MEMPTR NO-UNDO.
   DEFINE INPUT PARAMETER vilkencol AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER inrow AS INTEGER NO-UNDO.
   DEFINE VARIABLE fildir AS CHARACTER NO-UNDO.
   fildir = SESSION:TEMP-DIRECTORY.
   {SESSIONTEMPDIR.I}
   IF SESSION:CLIENT-TYPE = "WEBCLIENT" THEN fildir = webclienttempdir.
   fildir = REPLACE(fildir,"/","\").
   cRad = STRING(inrow).
   IF cRad = "" THEN DO:
      ASSIGN cRad = "1".
   END.  
   bild  = vilkencol + cRad.      
   chWorkSheet:range(bild):SELECT NO-ERROR.               
   fildir = fildir + bildbertemp.FILNAMN.    
   COPY-LOB infillong TO FILE   fildir.   
   chWorkSheetRange = chWorkSheet:Pictures:INSERT(fildir) NO-ERROR.            
   chWorkSheetRange:TOP = totheight NO-ERROR.
   chWorkSheetRange:LEFT = 1 NO-ERROR.
   RELEASE OBJECT chWorkSheetRange NO-ERROR.
   chWorkSheetRange = ?.
   OS-DELETE VALUE(fildir). 
   chExcelApplication:VISIBLE = TRUE NO-ERROR.  
   IF cRad = "1" THEN cRad = "0".
   {EXCELFEL.I}      
END PROCEDURE.

/*Lägga in bild*/
PROCEDURE imageexcel_UI:
   DEFINE INPUT PARAMETER linkin AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER vilkencol AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER inrow AS INTEGER NO-UNDO.
   DEFINE VARIABLE bisz AS DECIMAL NO-UNDO.
   linkin = REPLACE(linkin,"/","\").
   
   cRad = STRING(inrow).
   IF cRad = "" THEN DO:
      ASSIGN cRad = "1".
   END.  
   bild  = vilkencol + cRad.      
   chWorkSheet:range(bild):SELECT NO-ERROR.                 
   chWorkSheetRange = chWorkSheet:Pictures:INSERT(linkin) NO-ERROR.      
   chWorkSheetRange:TOP = totheight. 
   chWorkSheetRange:LEFT = 1  .
   bisz = 360.   
   IF link = linkin THEN.
   ELSE IF  chWorkSheetRange:HEIGHT < bisz THEN DO:
      bisz = bisz / chWorkSheetRange:HEIGHT.
      chWorkSheetRange:HEIGHT = chWorkSheetRange:HEIGHT * bisz.      
   END.
   ELSE IF chWorkSheetRange:HEIGHT > bisz THEN DO:
      bisz = bisz / chWorkSheetRange:HEIGHT.
      chWorkSheetRange:HEIGHT = chWorkSheetRange:HEIGHT * bisz.      
   END. 
   RELEASE OBJECT chWorkSheetRange NO-ERROR.
   chWorkSheetRange = ?.
   chExcelApplication:VISIBLE = TRUE NO-ERROR.    
   IF cRad = "1" THEN cRad = "0".
   {EXCELFEL.I}  
END PROCEDURE.

PROCEDURE bildsize_UI :
    DEFINE INPUT PARAMETER link AS CHARACTER NO-UNDO.   
   DEFINE INPUT PARAMETER vilkencol AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER inrow AS INTEGER NO-UNDO.
   cRad = STRING(inrow).
   IF cRad = "" THEN DO:
      ASSIGN cRad = "1".
   END.  
   bild  = vilkencol + cRad.      
   chWorkSheetRange = chWorkSheetRange:Pictures:HEIGHT NO-ERROR.                      
   RELEASE OBJECT chWorkSheetRange NO-ERROR.
   chWorkSheetRange = ?.
   chExcelApplication:VISIBLE = TRUE NO-ERROR.
   
   IF cRad = "1" THEN cRad = "0".
{EXCELFEL.I}
      
END PROCEDURE.
PROCEDURE readexcel_UI:
   DEFINE VARIABLE i AS INTEGER NO-UNDO.
   i = 1.
   REPEAT:
      {EXCELFEL.I}      
      IF allac[i] = startc THEN startnu = TRUE.
      IF startnu = TRUE THEN DO:
         cRange = allac[i] + STRING(iRad).
         allacolumtext[i] = chWorkSheet:Range(cRange):TEXT NO-ERROR.
      END.
      IF slutnu = TRUE THEN DO:
         ASSIGN
         startnu = FALSE
         slutnu = FALSE.
         LEAVE.
      END.
      i = i + 1.
      IF allac[ i ] = slutc THEN slutnu = TRUE.
   END.
END PROCEDURE.
PROCEDURE readexcelstart_UI:
   DEFINE INPUT PARAMETER kommando AS CHARACTER NO-UNDO.
   
   CREATE "Excel.Application" chExcelApplication.
   {OPENEXCEL.I}
   ASSIGN chWorkbook = chExcelApplication:Workbooks:OPEN(kommando) NO-ERROR.
   ASSIGN chWorkSheet = chExcelApplication:Sheets:ITEM(1) NO-ERROR.
   ASSIGN iRadslut = chWorksheet:Cells:SpecialCells(11):ROW NO-ERROR.
   {EXCELFEL.I}      
END PROCEDURE.

PROCEDURE startexcel_UI :
   DEFINE INPUT  PARAMETER namnblad AS CHARACTER NO-UNDO.
  
   CREATE "Excel.Application" chExcelApplication.
   chExcelApplication:VISIBLE = TRUE.
   chWorkbook = chExcelApplication:Workbooks:ADD() NO-ERROR. /*nytt exceldoc*/
   chWorksheet = chWorkbook:Worksheets:ITEM(1) NO-ERROR.
   chWindow = chExcelApplication:Windows:ITEM(1) NO-ERROR.
   IF chExcelApplication:VERSION = "15.0" OR chExcelApplication:VERSION = "16.0" THEN antalbladstart = 2.
   RUN nyttbladexcel_UI.
   RUN namnbladexcel_UI (namnblad).   
   RUN noscreenexcel_UI.  
   chExcelApplication:VISIBLE = TRUE.   
   {EXCELFEL.I}      
END PROCEDURE.
PROCEDURE slutreadexcel_UI:
   NO-RETURN-VALUE chWorkbook:CLOSE().
   NO-RETURN-VALUE chExcelApplication:QUIT().
   RUN slutexcel_UI.
   {EXCELFEL.I}      
END PROCEDURE.
PROCEDURE slut2excel_UI:
   RUN slutexcel_UI.
   {EXCELFEL.I}      
END PROCEDURE.
PROCEDURE slutexcel_UI:   
   RUN screenexcel_UI.   
   chExcelApplication:DisplayAlerts = TRUE NO-ERROR.   /*all prompts will be shutoff/on*/
   RELEASE OBJECT chCell      NO-ERROR.                       
   RELEASE OBJECT cActiveCell NO-ERROR.
   RELEASE OBJECT chPageBreak NO-ERROR.                  
   RELEASE OBJECT chChart      NO-ERROR.                      
   RELEASE OBJECT chWorkSheetRange NO-ERROR.
   RELEASE OBJECT chWorksheet       NO-ERROR.                  
   RELEASE OBJECT chWorkbook        NO-ERROR.                   
   RELEASE OBJECT chExcelApplication NO-ERROR.  
   RELEASE OBJECT cActiveSheet NO-ERROR.
   RELEASE OBJECT chWindow NO-ERROR.
   IF VALID-HANDLE(blobproch) THEN DO: 
      RUN deleteproc_UI IN blobproch.
      DELETE PROCEDURE blobproch NO-ERROR.
   END.
   ASSIGN
   chCell = ?
   cActiveCell = ? 
   chPageBreak = ?
   chChart = ?
   chWorksheet = ?
   chWorkbook = ?
   chExcelApplication = ?
   cActiveSheet = ?
   chWindow = ?.
  {EXCELFEL.I}   
END PROCEDURE.
PROCEDURE innehall_UI :
   RUN nyttbladexcel_UI.
   RUN namnbladexcel_UI ("Innehållsförteckning").
   raknare = 1.
   totheight = 1 .
   RUN sattinbild_UI.
   raknare = 6.   
   FOR EACH innehall WHERE innehall.SIDA = 9999999 NO-LOCK:      
      raknare = raknare + 1.
      cRad = STRING(raknare).
      cRangefont = "c" + cRad + ":" + "D" + cRad.
      chWorkSheet:Range(cRangefont):FONT:NAME = "CALIBRI" NO-ERROR.
      chWorkSheet:Range(cRangefont):FONT:SIZE = 9 NO-ERROR.
      chWorkSheet:Range(cRangefont):FONT:Bold = FALSE NO-ERROR.
      chWorkSheet:Range(cRangefont):RowHeight = 12 NO-ERROR.
      chWorkSheet:Range(cRangefont):FONT:ColorIndex = 11 NO-ERROR.
      IF INDEX(innehall.UT," :") > 0 THEN DO:
         RUN Csel_UI ("C",SUBSTRING(innehall.UT,1,27)).
         RUN Csel_UI ("D",SUBSTRING(innehall.UT,28)).
      END.
      ELSE RUN Csel_UI ("D",innehall.UT).     
      DELETE innehall.
   END.   
   raknare = raknare + 1.
   cRad = STRING(raknare).
   cRangefont = "A" + cRad + ":" + "F" + cRad.
   chWorkSheet:Range(cRangefont):FONT:NAME = "CALIBRI" NO-ERROR.
   chWorkSheet:Range(cRangefont):FONT:SIZE = 10 NO-ERROR.
   chWorkSheet:Range(cRangefont):FONT:Bold = FALSE NO-ERROR.
   chWorkSheet:Range(cRangefont):RowHeight = 12 NO-ERROR.
   chWorkSheet:Range(cRangefont):FONT:ColorIndex = 11 NO-ERROR.
   RUN Csel_UI ("A","Byggnr").
   RUN Csel_UI ("B","Fri Id").
   RUN Csel_UI ("C",Guru.Konstanter:varforetypchar[13]).
   RUN Csel_UI ("D","Konstruktion").
   RUN Csel_UI ("F","Sid").   
   FOR EACH innehall  NO-LOCK BY SIDA :
     raknare = raknare + 1.    
     cRad = STRING(raknare).
     RUN InnehallSida_UI.    
  END.
  chWorkSheet:Columns("a:ab"):EntireColumn:AutoFit NO-ERROR.
  chWindow = chExcelApplication:Windows:ITEM(1) NO-ERROR.
  RUN sidbrytbredd_UI  (INPUT 1).
  RUN valjblad_UI (2).
END PROCEDURE.

PROCEDURE InnehallSida_UI:
   cRangefont = "A" + cRad + ":" + "F" + cRad.
   chWorkSheet:Range(cRangefont):FONT:NAME = "CALIBRI" NO-ERROR.
   chWorkSheet:Range(cRangefont):FONT:SIZE = 10 NO-ERROR.
   chWorkSheet:Range(cRangefont):FONT:Bold = FALSE NO-ERROR.
   chWorkSheet:Range(cRangefont):RowHeight = 12 NO-ERROR.
   chWorkSheet:Range(cRangefont):FONT:ColorIndex = 11 NO-ERROR.
  
   RUN Csel_UI ("A",innehall.BYGGNR).
   RUN Csel_UI ("B",innehall.FRIID).
   RUN Csel_UI ("C",innehall.KARTREF).
   RUN Csel_UI ("D",innehall.F1) .
   RUN Csel_UI ("F",STRING(innehall.SIDA)).
      {EXCELFEL.I}
END PROCEDURE.
PROCEDURE Csel_UI :
   DEFINE INPUT  PARAMETER cin AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER varut AS CHARACTER NO-UNDO.
   cin = cin + cRad. 
   chWorkSheet:Range(cin):SELECT NO-ERROR.
   ASSIGN
   cActiveCell = chExcelApplication:ActiveCell 
   cActiveCell:VALUE = varut NO-ERROR. 
   RELEASE OBJECT cActiveCell NO-ERROR.      
END PROCEDURE.

PROCEDURE flerbladslut_UI :
   RELEASE OBJECT chWorksheet NO-ERROR. 
   chWorkSheet = chExcelApplication:Sheets:ITEM(1) NO-ERROR.
   chWorkSheet:SELECT NO-ERROR. 
   {EXCELFEL.I}
END PROCEDURE.
PROCEDURE valjblad_UI:
   DEFINE INPUT PARAMETER valbald AS INTEGER NO-UNDO.
   chWorkSheet = chExcelApplication:Sheets:ITEM(valbald) .
   chWorkSheet:SELECT NO-ERROR. 
   {EXCELFEL.I}
END PROCEDURE.
PROCEDURE nyttbladexcel_UI:
   bladvar = bladvar + 1.   
   IF bladvar < antalbladstart THEN DO: 
      chWorkSheet = chExcelApplication:Sheets:ITEM(bladvar) NO-ERROR.
   END.
   ELSE DO:
      chWorkSheet = chExcelApplication:Sheets:ADD NO-ERROR.
   END.
   chWorkSheet:PageSetup:LeftFooter = "Genererad av GURU från Elpool i Umeå AB" NO-ERROR. 
   chWorkSheet:PageSetup:RightFooter = "Skapad: " + STRING(TODAY) + " " + STRING(TIME,"HH:MM") NO-ERROR. 
   {EXCELFEL.I}      
END PROCEDURE.
PROCEDURE namnbladexcel_UI:
   DEFINE INPUT PARAMETER namnvar AS CHARACTER NO-UNDO.
   chWorkSheet:NAME = namnvar NO-ERROR.
   {EXCELFEL.I}      
END PROCEDURE.

PROCEDURE understryk_UI:
   DEFINE INPUT PARAMETER varstryk AS INTEGER NO-UNDO. /*3= över 4= under*/
   DEFINE INPUT PARAMETER vartjock AS INTEGER NO-UNDO. /*2= tunn 4= tjock*/
   DEFINE VARIABLE bgcolorstopp AS CHARACTER NO-UNDO.
   cRange = startc + cRad.
   radnrS = slutc + cRad.   /*Slutkolumn*/
   cRangefont = cRange + ":" + radnrS.
   bgcolorstopp = REPLACE(cRangefont,":I",":G").
   chWorkSheet:Range(bgcolorstopp):Borders(varstryk):Weight = vartjock NO-ERROR.
   {EXCELFEL.I}      
END PROCEDURE.

PROCEDURE sattcolumner_UI:
   DEFINE INPUT PARAMETER TABLE FOR excoltemp.
   FIND FIRST excoltemp NO-LOCK NO-ERROR.
   IF AVAILABLE excoltemp THEN DO:
      FOR EACH excoltemp:
         {EXCELFEL.I}      
         chWorkSheet:COLUMNS(excoltemp.COLNAME):ColumnWidth = excoltemp.WDTH NO-ERROR.         
      END.
   END.
   ELSE DO:
      LEAVE.
   END.   
   {EXCELFEL.I}      
END PROCEDURE.

PROCEDURE line_UI:
   DEFINE INPUT PARAMETER varstryk AS INTEGER NO-UNDO. /*3= över 4= under*/
   DEFINE INPUT PARAMETER vartjock AS INTEGER NO-UNDO. /*2= tunn 4= tjock*/
   DEFINE INPUT PARAMETER inrow AS INTEGER NO-UNDO.
   DEFINE VARIABLE bgcolorstopp AS CHARACTER NO-UNDO.
   cRange = startc + STRING(inrow).
   radnrS = slutc + STRING(inrow).
   cRangefont = cRange + ":" + radnrS.
   bgcolorstopp = REPLACE(cRangefont,":I",":G").
   IF Guru.GlobalaVariabler:EgenskaperTillByggkontroll[1] = TRUE THEN bgcolorstopp = REPLACE(cRangefont,":I",":L").
   chWorkSheet:Range(bgcolorstopp):Borders(varstryk):Weight = vartjock NO-ERROR.
   {EXCELFEL.I}      
END PROCEDURE.

PROCEDURE utdataexcel_UI:
/* utdata = om data ska läggas ut lr inte    
   linevar = antal linjer                              
   overvar = egenskaper på för linje - över lr under   
   tunnvar = tunn lr tjock linje                       */
   
   DEFINE INPUT PARAMETER utdata AS LOGICAL NO-UNDO.   
   DEFINE INPUT PARAMETER linevar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER overvar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER tunnvar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER inrow AS INTEGER NO-UNDO.
   DEFINE VARIABLE bgcolorstopp AS CHARACTER NO-UNDO.
   IF linevar = 1 THEN DO:
      RUN line_UI (INPUT overvar,INPUT tunnvar,INPUT inrow).
      RETURN.
   END.
   IF linevar = 2 THEN DO:
      RUN line_UI (INPUT 3,INPUT tunnvar,INPUT inrow).
      RUN line_UI (INPUT 4,INPUT tunnvar,INPUT inrow).
      {EXCELFEL.I}      
   END.   
   IF inrow = savedrow THEN DO:
      /* DATA PÅ SAMMA RAD SOM TIDIGARE*/
      /*JUST NU BORDE DET IONTE KUNNA INTRÄFFA???*/
      utdata = FALSE.
   END.
   IF utdata = TRUE THEN DO:
      cRange = extemp.COLVAR + STRING(inrow).
      radnrS = slutc + STRING(inrow).
      cRangefont = cRange + ":" + radnrS.
      IF extemp.COLVAR = "A" THEN DO:
         IF extemp.INGENFONT = TRUE THEN DO:
             IF Guru.GlobalaVariabler:EgenskaperTillByggkontroll[1] = TRUE THEN cRangefont = REPLACE(cRangefont,":I",":L"). 
            chWorkSheet:Range(cRangefont):FONT:NAME = extemp.FNAME NO-ERROR.
            chWorkSheet:Range(cRangefont):FONT:SIZE = extemp.FSIZE NO-ERROR.
            chWorkSheet:Range(cRangefont):FONT:Bold = extemp.FBOLD NO-ERROR.
            chWorkSheet:Range(cRangefont):RowHeight = extemp.FHEIGHT NO-ERROR.
            IF extemp.FCOLOR NE 0 THEN DO:
               chWorkSheet:Range(cRangefont):FONT:ColorIndex = extemp.FCOLOR NO-ERROR.
            END.
            {EXCELFEL.I}                  
         END.         
      END.
      /*HÖGER JUSTERING chWorkSheet:Range(cRange):HorizontalAlignment = -4108 NO-ERROR.*/
      /*VÄNSTER JUSTERING*/
      IF extemp.CHARVAR = TRUE THEN DO:
         chWorkSheet:Range(cRange):NumberFormat = "@" NO-ERROR. 
         {EXCELFEL.I}      
      END.      
      ELSE IF extemp.COLFORMAT NE "" THEN DO:
         chWorkSheet:Range(cRange):NumberFormat = extemp.COLFORMAT.
         chWorkSheet:Range(cRange):FONT:SIZE = extemp.FSIZE NO-ERROR.
         {EXCELFEL.I}    
      END.        
      IF extemp.DATA NE "" THEN DO:
         IF ingabyggnr = TRUE AND extemp.BCOLOR > 0 AND (extemp.COLVAR = "D" OR extemp.COLVAR = "E") THEN.
         ELSE DO:
            RUN dubbelrad_UI (INPUT extemp.DUBBELRAD).
            chWorkSheet:Range(cRange):VALUE = extemp.DATA NO-ERROR.
         END.   
         {EXCELFEL.I}
         IF extemp.BCOLOR NE 0 THEN DO:
            RUN KonstruktionPasidan_UI.
            IF extemp.BCOLOR = -1 THEN.
            ELSE DO:
               RUN profexcelfarg_UI (INPUT extemp.BCOLOR,OUTPUT bgfargexcel). 
               bgcolorstopp = REPLACE(cRangefont,":I",":G").
               chWorkSheet:Range(bgcolorstopp):Interior:ColorIndex = bgfargexcel NO-ERROR.
            END.   
            {EXCELFEL.I}
         END.
      END.
   END.
   ELSE DO:
      savedrow = inrow.      
      IF ingabyggnr = TRUE AND extemp.BCOLOR NE 0 THEN.
      ELSE DO:
         RUN dubbelrad_UI (INPUT extemp.DUBBELRAD).
         chWorkSheet:Range(cRange):VALUE = extemp.DATA NO-ERROR.
      END.   
      {EXCELFEL.I}      
      IF extemp.BCOLOR NE 0 THEN DO:
         RUN KonstruktionPasidan_UI.
         IF extemp.BCOLOR = -1 THEN.
         ELSE DO:
            RUN profexcelfarg_UI (INPUT extemp.BCOLOR,OUTPUT bgfargexcel). 
            bgcolorstopp = REPLACE(cRangefont,":I",":G").
           
            chWorkSheet:Range(bgcolorstopp):Interior:ColorIndex = bgfargexcel NO-ERROR.
         END.   
         {EXCELFEL.I}
      END.
   END.  
   {EXCELFEL.I}      
END PROCEDURE.

PROCEDURE Kryssruta_UI:
   DEFINE INPUT PARAMETER inrow AS INTEGER NO-UNDO.
   DEFINE VARIABLE topvalue AS INTEGER NO-UNDO.
   DEFINE VARIABLE leftvalue AS INTEGER NO-UNDO.
   cRange = extemp.COLVAR + STRING(inrow).
   cRangefont = cRange.
   chWorkSheet:Range(cRange):SELECT NO-ERROR.
   topvalue = chWorkSheet:Range(cRange):TOP - 2.
   leftvalue = chWorkSheet:Range(cRange):LEFT + 15.
   chWorkSheet:CheckBoxes:Add(leftvalue, topvalue, 6, 6) NO-ERROR.
   chWorkSheet:CheckBoxes:Text = "".
   {EXCELFEL.I}      
END PROCEDURE.

{PROEXCELFARG.I}

PROCEDURE dataexcel_UI:
   DEFINE INPUT PARAMETER inrow AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER data AS CHARACTER NO-UNDO.
   cRange = "A" + STRING(inrow).
   radnrS = slutc + STRING(inrow).
   cRangefont = cRange + ":" + radnrS.
   chWorkSheet:Range(cRange):SELECT NO-ERROR.
   ASSIGN
   cActiveCell = chExcelApplication:ActiveCell NO-ERROR.
   cActiveCell:VALUE = data NO-ERROR. 
   RELEASE OBJECT cActiveCell NO-ERROR.
   cActiveCell = ?.
   {EXCELFEL.I}         
END PROCEDURE.

PROCEDURE hyperdataexcel_UI:
   DEFINE INPUT PARAMETER inrow AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER data AS CHARACTER NO-UNDO.
   DEFINE VARIABLE Myfile AS CHARACTER NO-UNDO.
   cRange = "A" + STRING(inrow).
   chWorkSheet:Range(cRange):SELECT NO-ERROR.
   cActiveCell = chExcelApplication:activecell NO-ERROR.
   cHyperlink = chWorkSheet:Hyperlinks:add(cActiveCell,data,"","",data) NO-ERROR.
   RELEASE OBJECT cHyperlink NO-ERROR.
   RELEASE OBJECT cActiveCell NO-ERROR. 
   ASSIGN
   cHyperlink = ?
   cActiveCell = ?.

/*    Myfile = "".                                                                      */
/*    Myfile = SEARCH("C:\Documents and Settings\elpgg.ELPOOL\Mina dokument\Dok1.doc"). */
/*    MESSAGE Myfile VIEW-AS ALERT-BOX.                                                 */
/*    chExcelApplication:chWorkSheet:OLEObjects:ADD((MyFile),FALSE,FALSE):SELECT. */
/*    chExcelApplication:chWorkSheet:OLEObjects:Add:Filename(MyFile):Link(False):DisplayAsIcon(False):SELECT. */
/*    chWorkSheet:OLEObjects:Add(MyFile):SELECT. */
/*    chWorkSheet:OLEObjects:Add((MyFile),FALSE,FALSE):SELECT. */
/*    chWorkSheet:Range(cRange):SELECT. */
/*    chWorkSheet:OLEObjects:ADD(MyFile,FALSE,FALSE). */
/*    chWorkSheet:OLEObjects:ADD("Word.Document.8"). */
/*ActiveSheet.OLEObjects.Add(Filename:=(MyFile), Link:=False, DisplayAsIcon:=False).Select */
   {EXCELFEL.I}      
END PROCEDURE.

PROCEDURE sidbrytbredd_UI:
   DEFINE INPUT PARAMETER orientvar AS INTEGER NO-UNDO.
   DEFINE VARIABLE num AS INTEGER NO-UNDO.
   chWorkSheet:PageSetup:Orientation = orientvar NO-ERROR.
   chWindow:VIEW = 2 NO-ERROR.
   chPageBreak = chWorkSheet:VPageBreaks:ITEM(1) NO-ERROR.
   chPageBreak:DragOff(-4161,1) NO-ERROR.
   chWindow:VIEW = 1 NO-ERROR.
   RELEASE OBJECT chWindow NO-ERROR.
   chWindow = ?.
   {EXCELFEL.I} 
END PROCEDURE.
 
PROCEDURE sidbryt_UI:
   
   chCell = chWorkSheet:Range(cRange) NO-ERROR.
   chPageBreak = chWorkSheet:HPageBreaks:ADD(chCell) NO-ERROR. 
   RELEASE OBJECT chCell      NO-ERROR.
   RELEASE OBJECT chPageBreak NO-ERROR. 
   ASSIGN
   chCell     = ?
   chPageBreak = ?.
   {EXCELFEL.I}      
END PROCEDURE.

PROCEDURE sattbryt_UI:
   DEFINE INPUT PARAMETER TABLE FOR bryttemp.
   /*KOMPSIDA*/  
   DEFINE VARIABLE val1 AS LOGICAL NO-UNDO.   
   IF kompsida = TRUE THEN RETURN.
   FIND LAST bryttemp WHERE NO-LOCK NO-ERROR.
   IF AVAILABLE bryttemp THEN DO:
      sistaradtillexcel = bryttemp.ROWVAR. 
      IF bryttemp.ROWVAR > 1000 THEN DO:
         MESSAGE "Vill du att Guru ska beräkna sidbrytning? Det kan ta lite tid!" SKIP 
         "Du kan få några extra sidbrytningar annars."
         VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE val1.
         CASE val1:
            WHEN TRUE THEN DO:
               
            END.
            WHEN FALSE THEN DO:
               
            END.      
         END CASE.      
      END.
      ELSE val1 = TRUE.
   END.     
   FOR EACH bryttemp:
      cRange = "A" + STRING(bryttemp.ROWVAR).
      /*Anders Olsson Elpool i Umeå AB  2 maj 2019 10:59:07 
      OM DET FINNS EN SID BRYTNING INOM DESSA RADER GÖR INGEN. 
      */
      IF sistaradtillexcel <= bryttemp.ROWVA + 3 AND Guru.GlobalaVariabler:EgenskaperTillByggkontroll[2] = TRUE  THEN. 
      ELSE DO:
         IF val1 = TRUE THEN DO:
            IF chWorkSheet:rows(bryttemp.ROWVAR - 1):PageBreak = -4105 THEN DO:
               cRange = "A" + STRING(bryttemp.ROWVAR - 1).
               RUN versid_UI.
            END.   
            ELSE IF chWorkSheet:rows(bryttemp.ROWVAR - 2):PageBreak = -4105 THEN DO:
               cRange = "A" + STRING(bryttemp.ROWVAR - 2).
               RUN versid_UI.
            END.   
            ELSE IF chWorkSheet:rows(bryttemp.ROWVAR - 3):PageBreak = -4105 THEN DO:
               cRange = "A" + STRING(bryttemp.ROWVAR - 3).
               RUN versid_UI.
            END.   
            ELSE IF chWorkSheet:rows(bryttemp.ROWVAR - 4):PageBreak = -4105 THEN DO:
               cRange = "A" + STRING(bryttemp.ROWVAR - 4).
               RUN versid_UI.
            END.   
            ELSE DO: 
               RUN versid_UI.
            END.
         END.
         ELSE RUN versid_UI.
      END.      
      {EXCELFEL.I}      
   END.
   
END PROCEDURE.
PROCEDURE versid_UI :
   chWorkSheet:Range(cRange):SELECT NO-ERROR.
   ASSIGN
   cActiveCell = chExcelApplication:ActiveCell NO-ERROR.
   chCell = chWorkSheet:Range(cRange) NO-ERROR.                
   chPageBreak = chWorkSheet:HPageBreaks:ADD(chCell) NO-ERROR.
   RELEASE OBJECT chCell NO-ERROR.
   RELEASE OBJECT chPageBreak NO-ERROR.
   RELEASE OBJECT cActiveCell NO-ERROR. 
   ASSIGN
   chCell = ?
   chPageBreak = ?
   cActiveCell = ?.
END PROCEDURE.
PROCEDURE brytning_UI:
   DEFINE INPUT PARAMETER inrow AS INTEGER NO-UNDO.
   cRange = "A" + STRING(inrow).
   chWorkSheet:Range(cRange):SELECT NO-ERROR.
   ASSIGN
   cActiveCell = chExcelApplication:ActiveCell NO-ERROR.
   chCell = chWorkSheet:Range(cRange) NO-ERROR.                
   chPageBreak = chWorkSheet:HPageBreaks:ADD(chCell) NO-ERROR.
   RELEASE OBJECT chCell NO-ERROR.
   RELEASE OBJECT chPageBreak NO-ERROR.
   RELEASE OBJECT cActiveCell NO-ERROR. 
   ASSIGN
   chCell = ?
   chPageBreak = ?
   cActiveCell = ?.
   {EXCELFEL.I}      
END PROCEDURE.
PROCEDURE bortbrytrad_UI :
   DEFINE INPUT  PARAMETER raknare AS INTEGER NO-UNDO.
   IF chWorkSheet:rows(raknare):PageBreak = -4105 THEN DO:
         /** to remove a page break from line **/
      chWorkSheet:rows(raknare):PageBreak = -4142 NO-ERROR.
   END.
   {EXCELFEL.I}
END PROCEDURE.
PROCEDURE bortbryt_UI:
   DEFINE VARIABLE raknare AS INTEGER NO-UNDO.
   max-row = chWorksheet:Cells:SpecialCells(11):ROW NO-ERROR.
   raknare = 1.
   DO WHILE raknare <= max-row:
      /** to check if a page break exists on row **/
      IF chWorkSheet:rows(raknare):PageBreak = -4105 THEN DO:
         /** to remove a page break from line **/
         chWorkSheet:rows(raknare):PageBreak = -4142 NO-ERROR.
      END.
      {EXCELFEL.I}      
      raknare = raknare + 1.
   END.
   {EXCELFEL.I}      
END PROCEDURE.
PROCEDURE Ininnehall_UI :
   DEFINE INPUT PARAMETER TABLE FOR innehall.
   IF Guru.Konstanter:globforetag = "ATS"  THEN DO:
      MESSAGE "Vill du visa Byggnr? Svara Ja, annars visas bara FriID"
      VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE svar AS LOGICAL.
      IF svar = TRUE THEN DO:
         ingabyggnr = FALSE.
      END.   
      ELSE ingabyggnr = TRUE.
   END.   
   
END PROCEDURE.
PROCEDURE KonstruktionPasidan_UI :
   FIND FIRST innehall WHERE innehall.rowvar = extemp.rowvar NO-LOCK NO-ERROR.
   IF AVAILABLE innehall THEN innehall.SIDA = sidraknare.
 END PROCEDURE.
