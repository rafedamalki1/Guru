/*GJBESTAPP.P*/
&Scoped-define NEW NEW
{GLOBVAR2DEL1.I}


FIND FIRST FORETAG NO-LOCK NO-ERROR.
Guru.Konstanter:globforetag = FORETAG.FORETAG.
RUN STYRFORE.P (INPUT Guru.Konstanter:globforetag).
&Scoped-define NEW NEW
{FAKTTYPDEF.I}
&Scoped-define NEW 
{FAKTTYPSKAP.I}
FUNCTION klockan100 RETURNS DECIMAL
  ( INPUT ber60 AS DECIMAL ):

  RETURN  (TRUNCATE(ber60,0) * 3600 + (ber60 - TRUNCATE(ber60,0)) * 100 * 60) / 3600.

END FUNCTION.


FUNCTION klockan60 RETURNS DECIMAL
  ( INPUT ber100 AS DECIMAL ):
  RETURN TRUNCATE(ber100,0) + ((ber100 - TRUNCATE(ber100,0)) / 100) * 60 . 

END FUNCTION.
DEFINE VARIABLE superhandle AS HANDLE.
DEFINE VARIABLE vartvar AS CHARACTER NO-UNDO. 
DEFINE VARIABLE kalktotvar AS DECIMAL NO-UNDO. 
DEFINE VARIABLE intkalktotvar AS DECIMAL NO-UNDO. 
DEFINE VARIABLE exkalktotvar AS DECIMAL NO-UNDO. 
DEFINE VARIABLE summakostvar AS DECIMAL NO-UNDO. 
DEFINE VARIABLE hjalpvar AS DECIMAL NO-UNDO. 
DEFINE QUERY fq FOR FAKTINTAKTKONT,FAKTURERAD.
DEFINE QUERY fkq FOR FAKTINTAKTKONTKRED,FAKTKRED.
DEFINE QUERY kq FOR KOSTREG.
DEFINE QUERY sq FOR SUMTID.
DEFINE QUERY stq FOR SUMTIDDAG.
DEFINE QUERY tq FOR TIDREGITAB.
{DIRDEF.I}
{KALKTEMP.I}
FIND FIRST FORETAG NO-LOCK NO-ERROR.
IF FORETAG.FORETAG = "GRIT" THEN DO:
   RUN GRITIN.P PERSISTENT SET superhandle (INPUT 1).
   THIS-PROCEDURE:ADD-SUPER-PROCEDURE (superhandle).
END.
{TIDUTTT.I}
{BESTSTATTEMP.I}

DEFINE TEMP-TABLE kosttemp     
   FIELD AONR LIKE KOSTREG.AONR 
   FIELD DELNR LIKE KOSTREG.DELNR         
   FIELD BOKKONTO LIKE KOSTREG.BOKKONTO   
   FIELD FAKTNR LIKE KOSTREG.FAKTNR    
   FIELD REGDATUM LIKE KOSTREG.REGDATUM    
   FIELD BENAMNING LIKE KOSTREG.BENAMNING
   FIELD BELOPP LIKE KOSTREG.MTRL   
   FIELD BELOPP1P LIKE KOSTREG.MTRL   
   FIELD BELOPP2P LIKE KOSTREG.MTRL   
   FIELD GRAVARE LIKE KOSTREG.MASKKOST  
   FIELD MASKOVRIG LIKE KOSTREG.MASKKOST     
   FIELD TBELOPP LIKE KOSTREG.MTRL   
   FIELD MTRL LIKE KOSTREG.MTRL   
   FIELD OVRKR LIKE KOSTREG.MTRL 
   FIELD INKOMST LIKE KOSTREG.MTRL   
   INDEX BOK IS PRIMARY BOKKONTO REGDATUM
   INDEX AONR AONR DELNR.

DEFINE TEMP-TABLE kalksumsum   
   FIELD TYP AS INTEGER
   FIELD MASKGBELOPP AS DECIMAL
   FIELD MONTBELOPP  AS DECIMAL
   FIELD MONTTIMMAR  AS DECIMAL
   FIELD BERBELOPP   AS DECIMAL
   FIELD AONR LIKE KOSTREG.AONR 
   FIELD DELNR LIKE KOSTREG.DELNR         
   FIELD BOKKONTO LIKE KOSTREG.BOKKONTO   
   FIELD FAKTNR LIKE KOSTREG.FAKTNR    
   FIELD REGDATUM LIKE KOSTREG.REGDATUM    
   FIELD BENAMNING LIKE KOSTREG.BENAMNING
   FIELD BELOPP LIKE KOSTREG.MTRL   
   FIELD MBELOPP LIKE KOSTREG.MTRL   
   FIELD TBELOPP LIKE KOSTREG.MTRL   
   FIELD MTRL LIKE KOSTREG.MTRL   
   FIELD OVRKR LIKE KOSTREG.MTRL 
   FIELD INKOMST LIKE KOSTREG.MTRL 
   FIELD TIMMAR LIKE KOSTREG.MTRL 
   FIELD BTIMMAR LIKE KOSTREG.MTRL
   FIELD OTIMMAR LIKE KOSTREG.MTRL
   FIELD OBELOPP LIKE KOSTREG.MTRL
   FIELD LONKOST LIKE KOSTREG.MTRL
   INDEX BOK IS PRIMARY BOKKONTO REGDATUM
   INDEX AONR AONR DELNR.

DEFINE TEMP-TABLE kosttemp2
   FIELD ANVANDARE LIKE KOSTREG.ANVANDARE
   FIELD AONR LIKE KOSTREG.AONR 
   FIELD DELNR LIKE KOSTREG.DELNR
   FIELD BENAMNING LIKE KOSTREG.BENAMNING 
   FIELD BETDATUM LIKE KOSTREG.BETDATUM 
   FIELD BOKKONTO LIKE KOSTREG.BOKKONTO    
   FIELD FAKBES LIKE KOSTREG.FAKBES 
   FIELD FAKTNR LIKE KOSTREG.FAKTNR 
  /*FIELD FAKTURERAD LIKE KOSTREG.FAKTURERAD */
   FIELD INKOMST LIKE KOSTREG.INKOMST  
  /* FIELD KOSTAUTO LIKE KOSTREG.KOSTAUTO */
   FIELD LEVKOD LIKE KOSTREG.LEVKOD  
   FIELD GRAVARE LIKE KOSTREG.MASKKOST  
   FIELD MASKOVRIG LIKE KOSTREG.MASKKOST  
   FIELD MOMS LIKE KOSTREG.MOMS 
   FIELD MTRL LIKE KOSTREG.MTRL 
   FIELD OVRKR LIKE KOSTREG.OVRKR 
   FIELD PERSKOST LIKE KOSTREG.PERSKOST 
   FIELD PERSKOST2 LIKE KOSTREG.PERSKOST 
   FIELD RADNR LIKE KOSTREG.RADNR 
   FIELD REGDATUM LIKE KOSTREG.REGDATUM 
   FIELD TRAKTKOST LIKE KOSTREG.TRAKTKOST
   INDEX AONR IS PRIMARY AONR DELNR BOKKONTO REGDATUM.

DEFINE TEMP-TABLE dagtemp
   FIELD AONR LIKE TIDREGITAB.AONR
   FIELD DELNR LIKE TIDREGITAB.DELNR 
   FIELD ORT LIKE AONRTAB.ORT
   FIELD PERSMASK LIKE SUMTIDDAG.PERSMASK
   FIELD BELOPP LIKE EKRAPPRESULT.EBELOPP LABEL "ARBKOSTNAD"           
   FIELD TIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "TIMMAR"         
   FIELD NTIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "TIMMAR"         
   FIELD OATIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "OTIMMAR"
   FIELD ABELOPP LIKE EKRAPPRESULT.EBELOPP LABEL "ARBKOSTNAD"           
   FIELD BTIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "OTIMMAR" 
   FIELD NBTIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "TIMMAR"
   FIELD OBTIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "OTIMMAR"
   FIELD BBELOPP LIKE EKRAPPRESULT.EBELOPP LABEL "ARBKOSTNAD"           
   FIELD OTIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "OTIMMAR"  
   FIELD NOTIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "TIMMAR"
   FIELD OOTIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "OTIMMAR"
   FIELD OBELOPP LIKE EKRAPPRESULT.EBELOPP LABEL "ARBKOSTNAD"           
   FIELD BEFATTNING AS CHARACTER           
   FIELD LONKOST AS DECIMAL
   FIELD OMRADE AS CHARACTER
   FIELD GEOMRADE AS CHARACTER
   
   INDEX AONR IS PRIMARY AONR DELNR. 

DEFINE TEMP-TABLE slutsum           
   FIELD PERSONALKOD LIKE TIDREGITAB.PERSONALKOD 
   FIELD PRIS LIKE TIDREGITAB.PRIS     
   FIELD PRISTYP LIKE TIDREGITAB.PRISTYP 
   FIELD AONR LIKE TIDREGITAB.AONR
   FIELD DELNR LIKE TIDREGITAB.DELNR 
   FIELD ORT LIKE AONRTAB.ORT
   FIELD TIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "TIMMAR"      
   FIELD NTIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "TIMMAR"      
   FIELD OATIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "TIMMAR"      
   FIELD OTIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "OTIMMAR"
   FIELD NOTIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "TIMMAR"      
   FIELD OOTIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "TIMMAR"
   FIELD BTIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "OTIMMAR"
   FIELD NBTIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "TIMMAR"      
   FIELD OBTIMMAR LIKE EKRAPPRESULT.EANTAL LABEL "TIMMAR"
   FIELD BELOPP LIKE EKRAPPRESULT.EBELOPP LABEL "ARBKOSTNAD"           
   FIELD ABELOPP LIKE EKRAPPRESULT.EBELOPP LABEL "ARBKOSTNAD"           
   FIELD BBELOPP LIKE EKRAPPRESULT.EBELOPP LABEL "ARBKOSTNAD"           
   FIELD OBELOPP LIKE EKRAPPRESULT.EBELOPP LABEL "Ö-KOSTNAD"  
   FIELD MBELOPP LIKE EKRAPPRESULT.EBELOPP LABEL "Ö-KOSTNAD"  
   FIELD IBELOPP LIKE EKRAPPRESULT.EBELOPP LABEL "Ö-KOSTNAD"  
   FIELD FBELOPP LIKE EKRAPPRESULT.EBELOPP LABEL "Ö-KOSTNAD"  
   FIELD OANTAL LIKE EKRAPPRESULT.EANTAL  LABEL "Ö-ANTAL"         
   FIELD TBELOPP LIKE EKRAPPRESULT.EBELOPP LABEL "T-KOSTNAD"
   FIELD TANTAL LIKE EKRAPPRESULT.EANTAL  LABEL "T-ANTAL"       
   FIELD LONKOST LIKE EKRAPPRESULT.EBELOPP LABEL "L-KOSTNAD"    
   FIELD MTRL LIKE KOSTREG.MTRL    
   FIELD OVRKR LIKE KOSTREG.OVRKR    
   FIELD INKOMST LIKE KOSTREG.INKOMST   
   FIELD NY AS LOGICAL INITIAL FALSE  
   INDEX AONR IS PRIMARY AONR DELNR ASCENDING.    
DEFINE INPUT PARAMETER TABLE FOR uppvaltemp.
DEFINE INPUT PARAMETER TABLE FOR valdaao.
DEFINE OUTPUT PARAMETER TABLE FOR tidut.

DEFINE NEW SHARED VARIABLE fastrec AS RECID NO-UNDO.
DEFINE VARIABLE offert AS LOGICAL NO-UNDO.
DEFINE VARIABLE xtypmtrl AS INTEGER NO-UNDO.
DEFINE VARIABLE monpris LIKE EBRPRIS.MONT NO-UNDO.
DEFINE VARIABLE berpris AS DECIMAL NO-UNDO.

DEFINE VARIABLE musz AS LOGICAL NO-UNDO.
DEFINE VARIABLE i AS INTEGER NO-UNDO.
DEFINE VARIABLE breddantal AS INTEGER NO-UNDO.
DEFINE VARIABLE utnr AS INTEGER EXTENT 50 NO-UNDO.
DEFINE VARIABLE bredd AS INTEGER EXTENT 50 NO-UNDO.
DEFINE VARIABLE nrcol AS INTEGER EXTENT 50 NO-UNDO.

DEFINE VARIABLE stim AS DECIMAL NO-UNDO.   
DEFINE VARIABLE o50 AS DECIMAL NO-UNDO. 
DEFINE VARIABLE o75 AS DECIMAL NO-UNDO. 
DEFINE VARIABLE o100 AS DECIMAL NO-UNDO. 
DEFINE VARIABLE stimk AS DECIMAL NO-UNDO.   
DEFINE VARIABLE o50k AS DECIMAL NO-UNDO. 
DEFINE VARIABLE o75k AS DECIMAL NO-UNDO. 
DEFINE VARIABLE o100k AS DECIMAL NO-UNDO.
DEFINE VARIABLE varin AS DECIMAL NO-UNDO.
DEFINE VARIABLE varkalk AS DECIMAL NO-UNDO.
DEFINE VARIABLE vartot AS DECIMAL NO-UNDO.
DEFINE VARIABLE str AS CHARACTER FORMAT "X(256)" NO-UNDO.

/*BEREDNING*/
{LISTDEF.I} 
DEFINE NEW SHARED TEMP-TABLE mtrl_temp2   
   {MTRLTEMP2TT.I}
/*SLUT BEREDNING*/
FIND FIRST FORETAG USE-INDEX FORETAG NO-LOCK NO-ERROR. 
Guru.Konstanter:globforetag = FORETAG.FORETAG.

FIND FIRST uppvaltemp NO-ERROR.
OPEN QUERY aq FOR EACH valdaao NO-LOCK. 
GET FIRST aq NO-LOCK.
GET NEXT aq  NO-LOCK.

GET FIRST aq NO-LOCK.
DO WHILE AVAILABLE(valdaao):      
   FIND FIRST BEREDNING WHERE BEREDNING.AONR = valdaao.AONR  AND BEREDNING.DELNR = valdaao.DELNR
   NO-LOCK NO-ERROR.
   IF AVAILABLE BEREDNING THEN DO:
      FIND FIRST BESTSTAT WHERE BESTSTAT.BERNR = INTEGER(BEREDNING.BERAONR) AND BESTSTAT.OMRADE = BEREDNING.OMRADE 
      AND BESTSTAT.DATUM GE uppvaltemp.STARTDATUM AND BESTSTAT.DATUM LE uppvaltemp.SLUTDATUM  NO-LOCK NO-ERROR.
      IF AVAILABLE BESTSTAT THEN DO:
         FIND FIRST LEVERANTOR WHERE LEVERANTOR.LEVKOD = BESTSTAT.LEVKOD NO-LOCK NO-ERROR.
         CREATE bestatlevtemp.
         BUFFER-COPY BESTSTAT TO bestatlevtemp.
         BUFFER-COPY LEVERANTOR TO bestatlevtemp.    
         FIND FIRST LEVTRP WHERE LEVTRP.BERNR = INTEGER(BEREDNING.BERAONR) AND LEVTRP.OMRADE = BEREDNING.OMRADE  AND LEVTRP.BESTNR = BESTSTAT.BESTNR
         NO-LOCK NO-ERROR.
         IF AVAILABLE LEVTRP THEN bestatlevtemp.LEVNAMN = LEVTRP.BERBESTNR  + "    " +  bestatlevtemp.LEVNAMN.
      END.
   END.
   GET NEXT aq NO-LOCK.
END.      
/*RUN summa_UI.*/
RUN huvud_UI.
PROCEDURE huvud_UI :  
   CREATE tidut. 
   SUBSTRING(tidut.UT,60) = STRING(TODAY) + " " + STRING(TIME,"HH:MM").
   CREATE tidut.
   CREATE tidut.
   tidut.UT = uppvaltemp.VALDLISTA. 
   IF uppvaltemp.VISPERAR = TRUE THEN DO: 
      SUBSTRING(tidut.UT,64) = "ÅR " + STRING(YEAR(uppvaltemp.STARTDATUM),"9999").
   END.                        
   ELSE IF uppvaltemp.VISPERAR = FALSE THEN DO:
      SUBSTRING(tidut.UT,64) = "PERIOD " +  STRING(uppvaltemp.STARTDATUM) + 
      " - " + STRING(uppvaltemp.SLUTDATUM).     
   END.
   ELSE DO:
      SUBSTRING(tidut.UT,64) = "VISNING AV ALLT".
   END.
   CREATE tidut.
   {KUURV.I}
   
   ASSIGN
   nrcol[1] = 1
   nrcol[2] = 2
   nrcol[3] = 27 /*ANVÄNDS EJ*/ 
   nrcol[4] = 9
   nrcol[5] = 12
   nrcol[6] = 15
   nrcol[7] = 11
   nrcol[8] = 19
   nrcol[9] = 20
   nrcol[10] = 21
   nrcol[11] = 22
   nrcol[12] = 25
   nrcol[13] = 28 /*ANVÄNDS EJ*/
   nrcol[14] = 28 /*ANVÄNDS EJ*/
   nrcol[15] = 24    /*ny kolumn*/
   nrcol[16] = 3
   nrcol[17] = 4
   nrcol[18] = 5
   nrcol[19] = 6
   nrcol[20] = 7
   nrcol[21] = 8
   nrcol[22] = 10
   nrcol[23] = 13
   nrcol[24] = 14
   nrcol[25] = 16
   nrcol[26] = 17
   nrcol[27] = 23           
   nrcol[28] = 18      
   breddantal = 28   /*antal kolumner*/
   bredd[1] = 9
   bredd[2] = 40
   bredd[3] = 6
   bredd[4] = 6
   bredd[5] = 6
   bredd[6] = 6
   bredd[7] = 7
   bredd[8] = 7
   bredd[9] = 8
   bredd[10] = 8
   bredd[11] = 7
   bredd[12] = 8
   bredd[13] = 8
   bredd[14] = 8
   bredd[15] = 8
   bredd[16] = 8
   bredd[17] = 8
   bredd[18] = 8
   bredd[19] = 8
   bredd[20] = 8
   bredd[21] = 8
   bredd[22] = 8
   bredd[23] = 8
   bredd[24] = 8
   bredd[25] = 8
   bredd[26] = 8
   bredd[27] = 8
   bredd[28] = 8.

   ASSIGN
   i = 2.     
   utnr[nrcol[1]] = 1.
   DO WHILE i <= breddantal:             
      utnr[i] = utnr[i - 1] + bredd[i - 1] + 1.            
      i = i + 1.
   END.   
   ASSIGN
   str = "".  
   i = 1.
   DO WHILE i <= utnr[breddantal] + bredd[breddantal] - 1:
      str = str + "=".     
      i = i + 1.
   END.   
   i = 2.      
   DO WHILE i <= breddantal:             
      SUBSTRING(str,(utnr[i] - 1),1) = ".".      
      i = i + 1.
   END.          
   CREATE tidut.  
   CREATE tidut.   
   CREATE tidut.             
   
   ASSIGN                                                                                                       
   SUBSTRING(tidut.UT,utnr[nrcol[4]]) = "MONTÖR"             
   SUBSTRING(tidut.UT,utnr[nrcol[5]]) = "BERED."         
   SUBSTRING(tidut.UT,utnr[nrcol[6]]) = "ÖVRIGA"     
   SUBSTRING(tidut.UT,utnr[nrcol[8]]) = "Främmande tj."
   SUBSTRING(tidut.UT,utnr[nrcol[28]]) = "Löne-"   
   SUBSTRING(tidut.UT,utnr[nrcol[10]]) = "Materiel"
   SUBSTRING(tidut.UT,utnr[nrcol[11]]) = "Övrig"
   SUBSTRING(tidut.UT,utnr[nrcol[15]]) = "Summa".
   CREATE tidut.      
   ASSIGN                               
   SUBSTRING(tidut.UT,utnr[nrcol[1]]) = CAPS(Guru.Konstanter:gaok)      
   SUBSTRING(tidut.UT,utnr[nrcol[2]]) = CAPS(Guru.Konstanter:gaonamnk) 
   SUBSTRING(tidut.UT,utnr[nrcol[16]]) = KBENAMNING.K1             
   SUBSTRING(tidut.UT,utnr[nrcol[17]]) = KBENAMNING.K2         
   SUBSTRING(tidut.UT,utnr[nrcol[18]]) = KBENAMNING.K3
   SUBSTRING(tidut.UT,utnr[nrcol[19]]) = KBENAMNING.K4                                          
   SUBSTRING(tidut.UT,utnr[nrcol[20]]) = KBENAMNING.K5
   SUBSTRING(tidut.UT,utnr[nrcol[21]]) = "%"
   SUBSTRING(tidut.UT,utnr[nrcol[4]]) = "Normaltid"     
   SUBSTRING(tidut.UT,utnr[nrcol[22]]) = "Övertid"             
   SUBSTRING(tidut.UT,utnr[nrcol[7]]) = "Kostnad"             
   SUBSTRING(tidut.UT,utnr[nrcol[5]]) = "Normaltid"         
   SUBSTRING(tidut.UT,utnr[nrcol[23]]) = "Övertid"             
   SUBSTRING(tidut.UT,utnr[nrcol[24]]) = "Kostnad"             
   SUBSTRING(tidut.UT,utnr[nrcol[6]]) = "Normaltid"  
   SUBSTRING(tidut.UT,utnr[nrcol[25]]) = "Övertid"             
   SUBSTRING(tidut.UT,utnr[nrcol[26]]) = "Kostnad"   
   SUBSTRING(tidut.UT,utnr[nrcol[28]]) = "tillägg"   
   SUBSTRING(tidut.UT,utnr[nrcol[8]]) = "Grävare"  
   SUBSTRING(tidut.UT,utnr[nrcol[9]]) = "Övriga" 
   SUBSTRING(tidut.UT,utnr[nrcol[10]]) = "Kostnad"
   SUBSTRING(tidut.UT,utnr[nrcol[11]]) = "Kostnad"
   SUBSTRING(tidut.UT,utnr[nrcol[27]]) = "Kostnad"
   SUBSTRING(tidut.UT,utnr[nrcol[15]]) = "Kostnad"
   SUBSTRING(tidut.UT,utnr[nrcol[12]]) = "Intäkt"
   SUBSTRING(tidut.UT,300) = CAPS(Guru.Konstanter:garbal)
   SUBSTRING(tidut.UT,320) = CAPS(Guru.Konstanter:gberel)
   SUBSTRING(tidut.UT,340) = CAPS(Guru.Konstanter:gprojl).
   
   CREATE tidut.      
   tidut.UT = str.
   
   FOR EACH valdaao: 
      FIND FIRST slutsum WHERE slutsum.AONR = valdaao.AONR AND
      slutsum.DELNR = valdaao.DELNR NO-ERROR.
      IF NOT AVAILABLE slutsum THEN DO:
         FIND FIRST kosttemp WHERE kosttemp.AONR = valdaao.AONR AND
         kosttemp.DELNR = valdaao.DELNR USE-INDEX AONR NO-ERROR.
         FIND FIRST kalksumsum WHERE kalksumsum.AONR = valdaao.AONR AND
         kalksumsum.DELNR = kalksumsum.DELNR USE-INDEX AONR NO-ERROR.
         IF AVAILABLE kosttemp THEN musz = musz.                  
         ELSE IF AVAILABLE kalksumsum THEN musz = musz.
         ELSE NEXT.         
         CREATE slutsum.
         ASSIGN
         slutsum.AONR  = valdaao.AONR 
         slutsum.DELNR = valdaao.DELNR
         slutsum.ORT   = valdaao.ORT.           
      END.   
   END.
   FOR EACH slutsum USE-INDEX AONR:      
      ASSIGN
      varin = 0
      varkalk = 0.
      FIND FIRST valdaao WHERE valdaao.AONR = slutsum.AONR AND valdaao.DELNR = slutsum.DELNR NO-ERROR.
      
      FOR EACH AONRKONTKOD WHERE AONRKONTKOD.AONR = slutsum.AONR AND AONRKONTKOD.DELNR = slutsum.DELNR NO-LOCK:
         CREATE tidut.                       
         IF NOT AVAILABLE kosttemp THEN DO:                        
            ASSIGN 
            SUBSTRING(tidut.UT,utnr[nrcol[1]]) = slutsum.AONR + STRING(slutsum.DELNR,Guru.Konstanter:varforetypchar[1])
            SUBSTRING(tidut.UT,utnr[nrcol[2]]) = SUBSTRING(slutsum.ORT,1,bredd[2])              
            /*SUBSTRING(tidut.UT,utnr[nrcol[3]]) = "UF"        */
            SUBSTRING(tidut.UT,utnr[nrcol[16]]) = AONRKONTKOD.K1
            SUBSTRING(tidut.UT,utnr[nrcol[17]]) = AONRKONTKOD.K2
            SUBSTRING(tidut.UT,utnr[nrcol[18]]) = AONRKONTKOD.K3
            SUBSTRING(tidut.UT,utnr[nrcol[19]]) = AONRKONTKOD.K4
            SUBSTRING(tidut.UT,utnr[nrcol[20]]) = AONRKONTKOD.K5
            SUBSTRING(tidut.UT,utnr[nrcol[21]]) = STRING(AONRKONTKOD.SATS%,">>9")
            SUBSTRING(tidut.UT,utnr[nrcol[4]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.NTIMMAR,">>>>>9.99")
            SUBSTRING(tidut.UT,utnr[nrcol[22]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.OATIMMAR,">>>>>9.99")                                                          
            SUBSTRING(tidut.UT,utnr[nrcol[7]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.ABELOPP,">>>>>>>9")                                                          
            SUBSTRING(tidut.UT,utnr[nrcol[5]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.NBTIMMAR,">>>>>9.99")
            SUBSTRING(tidut.UT,utnr[nrcol[23]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.OBTIMMAR,">>>>>9.99")                                                          
            SUBSTRING(tidut.UT,utnr[nrcol[24]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.BBELOPP,">>>>>>>9")                                                          
            SUBSTRING(tidut.UT,utnr[nrcol[6]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.NOTIMMAR,">>>>>9.99")  
            SUBSTRING(tidut.UT,utnr[nrcol[25]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.OOTIMMAR,">>>>>9.99")                                                          
            SUBSTRING(tidut.UT,utnr[nrcol[26]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.OBELOPP,">>>>>>>9")                                                                               
            SUBSTRING(tidut.UT,utnr[nrcol[28]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.LONKOST,">>>>>>>9") 
            SUBSTRING(tidut.UT,utnr[nrcol[15]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.BELOPP,">>>>>>>9")
            SUBSTRING(tidut.UT,utnr[nrcol[10]]) = STRING(0)
            SUBSTRING(tidut.UT,utnr[nrcol[11]]) = STRING(0)
            SUBSTRING(tidut.UT,utnr[nrcol[12]]) = STRING(0).
            IF AVAILABLE valdaao THEN DO:
               RUN pnamn_UI.                       
            END. 
       
          END.
         ELSE DO:                        
            ASSIGN
            SUBSTRING(tidut.UT,utnr[nrcol[1]]) = slutsum.AONR + STRING(slutsum.DELNR,Guru.Konstanter:varforetypchar[1])
            SUBSTRING(tidut.UT,utnr[nrcol[2]]) = SUBSTRING(slutsum.ORT,1,bredd[2])      
          
            SUBSTRING(tidut.UT,utnr[nrcol[16]]) = AONRKONTKOD.K1
            SUBSTRING(tidut.UT,utnr[nrcol[17]]) = AONRKONTKOD.K2
            SUBSTRING(tidut.UT,utnr[nrcol[18]]) = AONRKONTKOD.K3
            SUBSTRING(tidut.UT,utnr[nrcol[19]]) = AONRKONTKOD.K4
            SUBSTRING(tidut.UT,utnr[nrcol[20]]) = AONRKONTKOD.K5
            SUBSTRING(tidut.UT,utnr[nrcol[21]]) = STRING(AONRKONTKOD.SATS%,">>9")
            SUBSTRING(tidut.UT,utnr[nrcol[6]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.NOTIMMAR,">>>>>9.99")
            SUBSTRING(tidut.UT,utnr[nrcol[25]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.OOTIMMAR,">>>>>9.99").
           
            ASSIGN
            SUBSTRING(tidut.UT,utnr[nrcol[4]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.NTIMMAR,">>>>>9.99")                                                          
            SUBSTRING(tidut.UT,utnr[nrcol[22]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.OATIMMAR,">>>>>9.99")                                                                         
            SUBSTRING(tidut.UT,utnr[nrcol[5]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.NBTIMMAR,">>>>>9.99")
            SUBSTRING(tidut.UT,utnr[nrcol[23]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.OBTIMMAR,">>>>>9.99").            
           
            IF kosttemp.BELOPP < 0 
            THEN SUBSTRING(tidut.UT,utnr[nrcol[7]]) = STRING(AONRKONTKOD.SATS% / 100 * (slutsum.ABELOPP + kosttemp.BELOPP),"->>>>>>9").
            ELSE SUBSTRING(tidut.UT,utnr[nrcol[7]]) = STRING(AONRKONTKOD.SATS% / 100 * (slutsum.ABELOPP + kosttemp.BELOPP),">>>>>>>9").
            SUBSTRING(tidut.UT,utnr[nrcol[24]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.BBELOPP,">>>>>>>9").
            SUBSTRING(tidut.UT,utnr[nrcol[26]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.OBELOPP,">>>>>>>9").
            SUBSTRING(tidut.UT,utnr[nrcol[28]]) = STRING(AONRKONTKOD.SATS% / 100 * slutsum.LONKOST,">>>>>>>9").

            IF kosttemp.GRAVARE < 0 
            THEN SUBSTRING(tidut.UT,utnr[nrcol[8]]) = STRING(AONRKONTKOD.SATS% / 100 * kosttemp.GRAVARE,"->>>>>9").
            ELSE SUBSTRING(tidut.UT,utnr[nrcol[8]]) = STRING(AONRKONTKOD.SATS% / 100 * kosttemp.GRAVARE,">>>>>>9").
            IF kosttemp.MASKOVRIG < 0 
            THEN SUBSTRING(tidut.UT,utnr[nrcol[9]]) = STRING(AONRKONTKOD.SATS% / 100 * kosttemp.MASKOVRIG,"->>>>>9").
            ELSE SUBSTRING(tidut.UT,utnr[nrcol[9]]) = STRING(AONRKONTKOD.SATS% / 100 * kosttemp.MASKOVRIG,">>>>>>9").
            IF kosttemp.MTRL < 0 
            THEN SUBSTRING(tidut.UT,utnr[nrcol[10]]) = STRING(AONRKONTKOD.SATS% / 100 * kosttemp.MTRL,"->>>>>>9").
            ELSE SUBSTRING(tidut.UT,utnr[nrcol[10]]) = STRING(AONRKONTKOD.SATS% / 100 * kosttemp.MTRL,">>>>>>>9").            
            summakostvar = slutsum.BELOPP + kosttemp.MTRL + kosttemp.GRAVARE + 
            kosttemp.MASKOVRIG + kosttemp.OVRKR + slutsum.LONKOST.            
            IF summakostvar > 0 THEN DO:
               SUBSTRING(tidut.UT,utnr[nrcol[15]]) = STRING(AONRKONTKOD.SATS% / 100 * summakostvar,">>>>>>>9").                       
            END.
            ELSE DO:           
               SUBSTRING(tidut.UT,utnr[nrcol[15]]) = STRING(AONRKONTKOD.SATS% / 100 * summakostvar,"->>>>>>9").            
            END.
            ASSIGN
            SUBSTRING(tidut.UT,utnr[nrcol[11]]) = STRING(AONRKONTKOD.SATS% / 100 * kosttemp.OVRKR,"->>>>>9").
            IF kosttemp.INKOMST > 0 THEN
            SUBSTRING(tidut.UT,utnr[nrcol[12]]) = STRING(AONRKONTKOD.SATS% / 100 * kosttemp.INKOMST,">>>>>>>9").
            ELSE SUBSTRING(tidut.UT,utnr[nrcol[12]]) = STRING(AONRKONTKOD.SATS% / 100 * kosttemp.INKOMST,"->>>>>>9").
           
            
            IF AVAILABLE valdaao THEN DO:
               RUN pnamn_UI.                       
            END.             
         END.
      END.
               

   END.
   
END PROCEDURE.




PROCEDURE pnamn_UI:
   ASSIGN
   SUBSTRING(tidut.UT,300) = valdaao.ARBANSVARIG
   SUBSTRING(tidut.UT,320) = valdaao.BEREDARE   
   SUBSTRING(tidut.UT,340) = valdaao.PROJEKTOR.
   FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = valdaao.ARBANSVARIG NO-LOCK NO-ERROR.
   IF AVAILABLE PERSONALTAB THEN DO: 
      SUBSTRING(tidut.UT,300) = CAPS(SUBSTRING(PERSONALTAB.FORNAMN,1,1)) + " " + CAPS(PERSONALTAB.EFTERNAMN).
      Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + PERSONALTAB.PERSONALKOD.
   END.   
   ELSE SUBSTRING(tidut.UT,300) = valdaao.ARBANSVARIG.
  
   FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = valdaao.BEREDARE NO-LOCK NO-ERROR.
   IF AVAILABLE PERSONALTAB THEN DO: 
      SUBSTRING(tidut.UT,320) = CAPS(SUBSTRING(PERSONALTAB.FORNAMN,1,1)) + " " + CAPS(PERSONALTAB.EFTERNAMN).
      Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + PERSONALTAB.PERSONALKOD.
   END.
   ELSE SUBSTRING(tidut.UT,320) = valdaao.BEREDARE.
   FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = valdaao.PROJEKTOR NO-LOCK NO-ERROR.
   IF AVAILABLE PERSONALTAB THEN DO:
      SUBSTRING(tidut.UT,340) = CAPS(SUBSTRING(PERSONALTAB.FORNAMN,1,1)) + " " + CAPS(PERSONALTAB.EFTERNAMN).
      Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + PERSONALTAB.PERSONALKOD.
   END.
   ELSE SUBSTRING(tidut.UT,340) = valdaao.PROJEKTOR.
   {GDPRLOGGCLIENT.I}
END PROCEDURE.
