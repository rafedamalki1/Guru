/*EDIBERAPP2.P*/
{STARTFORAPP.I}
{ANMARKD.I}
{DEFBESTU.I}
{KONVALTEMP.I}
DEFINE VARIABLE enkabval AS LOGICAL    NO-UNDO.
DEFINE VARIABLE priset AS LOGICAL NO-UNDO.              
DEFINE VARIABLE detvar AS LOGICAL NO-UNDO. 
DEFINE VARIABLE datvar AS DATE NO-UNDO.  
DEFINE VARIABLE alla AS LOGICAL NO-UNDO.  
DEFINE VARIABLE vald_lev AS CHARACTER NO-UNDO.  
DEFINE VARIABLE skrivut AS LOGICAL NO-UNDO.
DEFINE VARIABLE musz AS LOGICAL NO-UNDO. 
DEFINE VARIABLE valaonr AS CHARACTER NO-UNDO.
DEFINE VARIABLE valdelnr AS INTEGER NO-UNDO.
DEFINE VARIABLE valort AS CHARACTER NO-UNDO. 
DEFINE VARIABLE valomrade AS CHARACTER NO-UNDO.   
DEFINE VARIABLE bestoff AS CHARACTER NO-UNDO.
DEFINE VARIABLE epostvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE kalkrow AS ROWID NO-UNDO.
DEFINE VARIABLE mailvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE edivar AS LOGICAL NO-UNDO.
DEFINE VARIABLE EDITOR_MEDD AS CHARACTER  VIEW-AS EDITOR SCROLLBAR-VERTICAL LARGE SIZE 53 BY 9 FONT 25 NO-UNDO.
DEFINE VARIABLE status-ok AS LOGICAL NO-UNDO.        
DEFINE VARIABLE arrhjsum AS DECIMAL NO-UNDO.    
DEFINE VARIABLE str AS CHARACTER FORMAT "X(130)" NO-UNDO. 
DEFINE VARIABLE str1 AS CHARACTER FORMAT "X(130)" NO-UNDO.
DEFINE VARIABLE str2 AS CHARACTER FORMAT "X(130)" NO-UNDO. 
DEFINE VARIABLE str0 AS CHARACTER FORMAT "X(130)" NO-UNDO.
DEFINE VARIABLE totalt AS DECIMAL NO-UNDO. 
DEFINE VARIABLE totalt2 AS DECIMAL NO-UNDO. 
DEFINE VARIABLE leverant AS CHARACTER NO-UNDO.
DEFINE VARIABLE lev AS CHARACTER NO-UNDO.  
DEFINE VARIABLE sumpris AS DECIMAL NO-UNDO.    
DEFINE VARIABLE totalsum AS DECIMAL NO-UNDO.
DEFINE VARIABLE sumantal AS INTEGER NO-UNDO.
DEFINE VARIABLE xkordvar AS INTEGER NO-UNDO. 
DEFINE VARIABLE stopvar AS LOGICAL NO-UNDO. 
DEFINE VARIABLE prisvar AS INTEGER NO-UNDO.
DEFINE VARIABLE antvar AS INTEGER NO-UNDO. 
DEFINE VARIABLE antvar2 AS INTEGER NO-UNDO.  
DEFINE VARIABLE firstlev AS CHARACTER NO-UNDO.   
DEFINE VARIABLE mtrlrak AS INTEGER NO-UNDO.  
DEFINE VARIABLE mtrlrak2 AS INTEGER NO-UNDO.
DEFINE VARIABLE radrak AS INTEGER NO-UNDO.   
DEFINE VARIABLE langd AS INTEGER NO-UNDO.  
DEFINE VARIABLE upp AS LOGICAL NO-UNDO.            
DEFINE VARIABLE prognamn AS CHARACTER FORMAT "X(41)" NO-UNDO.
DEFINE VARIABLE prognamn1 AS CHARACTER FORMAT "X(41)" NO-UNDO.
DEFINE VARIABLE prognamn2 AS CHARACTER FORMAT "X(41)" NO-UNDO.
DEFINE VARIABLE skick AS LOGICAL NO-UNDO.
DEFINE VARIABLE efel AS CHARACTER FORMAT "X(30)" NO-UNDO.
DEFINE VARIABLE bytgrupp AS CHARACTER NO-UNDO. 
DEFINE VARIABLE enrvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE utrec AS RECID NO-UNDO.
DEFINE VARIABLE utrec2 AS RECID NO-UNDO.
DEFINE VARIABLE kant AS INTEGER NO-UNDO.
DEFINE VARIABLE tant AS INTEGER NO-UNDO.
DEFINE VARIABLE uppvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE sidlangd AS INTEGER NO-UNDO.
DEFINE VARIABLE ediraknare AS INTEGER NO-UNDO.
DEFINE VARIABLE radantal AS INTEGER NO-UNDO.
DEFINE VARIABLE anmlangd AS INTEGER NO-UNDO.
DEFINE VARIABLE idvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE numsok AS LOGICAL NO-UNDO.
DEFINE VARIABLE byggnr AS INTEGER NO-UNDO.
DEFINE VARIABLE skapkab AS INTEGER NO-UNDO.
DEFINE VARIABLE remotLogin  AS CHARACTER NO-UNDO.
DEFINE VARIABLE remotpasswd AS CHARACTER NO-UNDO.
DEFINE VARIABLE skicka      AS LOGICAL NO-UNDO.
DEFINE VARIABLE ascibin     AS INTEGER NO-UNDO.
DEFINE VARIABLE cLocalFile  AS CHARACTER NO-UNDO.
DEFINE VARIABLE cRemoteFile AS CHARACTER NO-UNDO.
DEFINE VARIABLE motagandemaskin AS CHARACTER NO-UNDO.
DEFINE VARIABLE cemi AS CHARACTER NO-UNDO.

DEFINE VARIABLE delbest AS LOGICAL NO-UNDO.

{EXTRADATA.I}
DEFINE VARIABLE bloblog AS LOGICAL NO-UNDO.
DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.


DEFINE QUERY mtrlprisq FOR BERMTRL.
DEFINE QUERY upplq FOR BERVAL.
DEFINE QUERY berq FOR BERUPP.
DEFINE QUERY gruppq FOR KONSTGRUPP.
DEFINE QUERY beridq FOR BERID.
DEFINE QUERY skyddq FOR KSKYDD.

DEFINE BUFFER idbuff FOR id_temp.
DEFINE BUFFER mtrlbuff FOR mtrl_temp2. 
DEFINE BUFFER gruppbuff FOR grupp_temp.
DEFINE BUFFER linbuff FOR lin_upp.
DEFINE BUFFER skyddbuff FOR skydd_temp2.

DEFINE TEMP-TABLE Body1
   FIELD UT AS CHARACTER.
   
DEFINE TEMP-TABLE Body2
   FIELD UT AS CHARACTER.

DEFINE TEMP-TABLE qmtrl_temp 
   FIELD NUM AS INTEGER
   FIELD ENR AS CHARACTER
   FIELD BENAMNING AS CHARACTER
   FIELD ENHET AS CHARACTER
   FIELD ANTAL AS INTEGER
   FIELD PRIS AS DECIMAL      
   FIELD TOTPRIS AS DECIMAL
   FIELD LEVKOD AS CHARACTER
   FIELD UPPLAG AS INTEGER      
   FIELD GRUPP AS INTEGER 
   FIELD XKORD AS INTEGER
   FIELD FORNR AS CHARACTER
   FIELD LINNR AS CHARACTER
   FIELD NATNR AS CHARACTER
   FIELD FRI1 AS INTEGER
   FIELD FRI2 AS INTEGER
   FIELD MTRLTEXT AS CHARACTER
   FIELD ORD AS INTEGER
   INDEX ENR IS PRIMARY ENR ASCENDING
   INDEX NUM NUM ASCENDING.

{NAMNDB.I}
PROCEDURE kolldb_UI.
   DEFINE OUTPUT PARAMETER utbivar AS LOGICAL NO-UNDO.
   IF namndb() = "UTBI" THEN utbivar = TRUE.
   ELSE utbivar = FALSE.   
END PROCEDURE.

PROCEDURE hamtaaonr_UI.
   DEFINE INPUT PARAMETER kalkrow AS ROWID NO-UNDO.
   DEFINE OUTPUT PARAMETER hmtaonr AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER hmtdelnr AS INTEGER NO-UNDO.
   FIND FIRST BEREDNING WHERE ROWID(BEREDNING) = kalkrow NO-LOCK NO-ERROR.
   ASSIGN
   hmtaonr = BEREDNING.AONR
   hmtdelnr = BEREDNING.DELNR.
END PROCEDURE.
PROCEDURE kolraindance_UI.
   DEFINE INPUT PARAMETER bestnr AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER hmtaonr AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER hmtdelnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER skickad AS DATE NO-UNDO.
   /*EN BESTÄLLNING FÅR BARA SKICKAS ENGÅNG TILL EKONOMISYSTEMET RAINDANCE*/

   RUN FINNSTABELL.P (INPUT "EXTRADATA", OUTPUT bloblog).   
   IF bloblog = FALSE THEN RETURN.
   RUN EXTRADATAHMT.P PERSISTENT SET edataapph.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "RAIND"                   
   inextradatatemp.HUVUDCH = hmtaonr              
   inextradatatemp.HUVUDINT =  hmtdelnr.         
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp WHERE extradatatemp.SOKCHAR[1] = bestnr NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:      
      skickad = extradatatemp.SOKDATE[1].
   END.   
   ELSE DO:
      skickad = ?.
   END.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph. 
   edataapph = ?. 
END PROCEDURE.

PROCEDURE sparraindance:
   DEFINE INPUT PARAMETER bestnr AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER hmtaonr AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER hmtdelnr AS INTEGER NO-UNDO.
   
   RUN FINNSTABELL.P (INPUT "EXTRADATA", OUTPUT bloblog).   
   IF bloblog = FALSE THEN RETURN.
   RUN EXTRADATAHMT.P PERSISTENT SET edataapph.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "RAIND"                   
   inextradatatemp.HUVUDCH = hmtaonr              
   inextradatatemp.HUVUDINT =  hmtdelnr
   inextradatatemp.SOKCHAR[1] =  bestnr
   inextradatatemp.SOKDATE[1] =  TODAY.         
   RUN extraspar_UI IN edataapph (INPUT TABLE inextradatatemp).           
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph. 
   edataapph = ?. 
END PROCEDURE.

PROCEDURE skapalista_UI.            
   DEFINE INPUT PARAMETER epostvar2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER bestoff2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER vald_lev2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER kalkrow2 AS ROWID NO-UNDO.
   DEFINE INPUT PARAMETER valaonr2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER detvar2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER mailvar2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER edivar2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER priset2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER alla2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER datvar2 AS DATE NO-UNDO.

   DEFINE OUTPUT PARAMETER musz2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR skapa_mtrl.
   DEFINE INPUT PARAMETER TABLE FOR trp_mtrl.
   DEFINE OUTPUT PARAMETER TABLE FOR tidut.
   DEFINE INPUT PARAMETER TABLE FOR kon_val.
   DEFINE INPUT PARAMETER delbest2 AS LOGICAL NO-UNDO.
   
   EMPTY TEMP-TABLE mtrl_temp NO-ERROR. 
   EMPTY TEMP-TABLE mtrl_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE uppl_temp NO-ERROR. 
   EMPTY TEMP-TABLE grupp_temp NO-ERROR. 
   EMPTY TEMP-TABLE grupp_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE lin_upp NO-ERROR. 
   EMPTY TEMP-TABLE skydd_temp NO-ERROR. 
   EMPTY TEMP-TABLE skydd_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE tidut NO-ERROR. 
   ASSIGN
   bestoff = bestoff2
   vald_lev = vald_lev2
   kalkrow = kalkrow2
   valaonr =  valaonr2  
   valomrade = valomrade2
   priset =   priset2   
   detvar =   detvar2   
   mailvar =  mailvar2  
   edivar =   edivar2
   alla = alla2
   datvar = datvar2
   epostvar = epostvar2
   delbest = delbest2.     
   FIND FIRST skapa_mtrl NO-LOCK NO-ERROR. 
   FIND best_mtrl WHERE best_mtrl.LEVKOD = vald_lev NO-LOCK NO-ERROR.
   FIND FIRST LEVERANTOR WHERE LEVERANTOR.LEVKOD = vald_lev NO-LOCK NO-ERROR.                                                      
   
   str=
"=============================================================================". 
   str1 =
"*****************************************************************************".  
   str0 = 
"-----------------------------------------------------------------------------".     

   RUN huvud_UI.         
   IF detvar = TRUE THEN DO:      
      IF musz = FALSE THEN RUN skapa_UI.   
      RUN summa_UI.                              
   END.
   ELSE DO:
      RUN klar_UI.
   END.                              
   musz2 = musz.
END PROCEDURE.

PROCEDURE anmark_UI :
   DEFINE VARIABLE nyanm AS CHARACTER NO-UNDO.
   IF INDEX (BERUPP.ANMARK,"$") > 0 THEN nyanm = SUBSTRING(BERUPP.ANMARK,1,INDEX(BERUPP.ANMARK,"$") - 1).
   ELSE nyanm = BERUPP.ANMARK.
   anmlangd = LENGTH(nyanm).
   CREATE tidut.         
   ASSIGN 
   SUBSTRING(tidut.UT,1) = "L04;GEN;" + SUBSTRING(nyanm,1,60).
   tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
   anmlangd = anmlangd - 60.
   IF anmlangd > 0 THEN DO:
      CREATE tidut.
      ASSIGN 
      SUBSTRING(tidut.UT,1) = "L04;GEN;" + SUBSTRING(nyanm,61,60).
      tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
      anmlangd = anmlangd - 60.
   END.
   IF anmlangd > 0 THEN DO:
      CREATE tidut.
      ASSIGN 
      SUBSTRING(tidut.UT,1) = "L04;GEN;" + SUBSTRING(nyanm,121,60).
      tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
      anmlangd = anmlangd - 60.
   END.
   IF anmlangd > 0 THEN DO:
      CREATE tidut.
      ASSIGN 
      SUBSTRING(tidut.UT,1) = "L04;GEN;" + SUBSTRING(nyanm,181,60).
      tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
      anmlangd = anmlangd - 60.
   END.
END PROCEDURE.


PROCEDURE depa2_UI :

   {DEPA2TRP.I}
END PROCEDURE.

PROCEDURE depa3_UI :

   {DEPA3TRP.I}
END PROCEDURE.

PROCEDURE depa_UI :

   {DEPATRP.I} 
END PROCEDURE.

PROCEDURE ett_UI :

   {ETTTRP.I}
END PROCEDURE.

PROCEDURE huvud_UI :

     /*HUVUD*/ 
   DO TRANSACTION:         
      IF musz = TRUE THEN musz = musz.   
      ELSE DO: 
         FIND LEVERANTOR WHERE LEVERANTOR.LEVKOD = vald_lev NO-LOCK NO-ERROR.
         FIND FIRST skapa_mtrl NO-LOCK NO-ERROR.         
         FIND FIRST BEREDNING WHERE ROWID(BEREDNING) = kalkrow NO-LOCK NO-ERROR.
         CREATE tidut.  
         IF globforetag = "ELPA" THEN DO:                
            ASSIGN SUBSTRING(tidut.UT,1) = "H01;GURUNORD;SE.ABB.SKA;228;".
         END.
         IF globforetag = "VAST"  THEN DO:                
            ASSIGN SUBSTRING(tidut.UT,1) = "H01;GURUVAST;SE.ABB.SKA;228;".
         END.
         IF globforetag = "VORD" THEN DO:                
            ASSIGN SUBSTRING(tidut.UT,1) = "H01;GURUNORD;SE.ABB.SKA;228;".
         END.
         IF globforetag = "VSYD" THEN DO:                
            ASSIGN SUBSTRING(tidut.UT,1) = "H01;GURUSYD;SE.ABB.SKA;228;".
         END.
         IF globforetag = "VOST" THEN DO:                
            ASSIGN SUBSTRING(tidut.UT,1) = "H01;GURUOST;SE.ABB.SKA;228;".
         END.   
         
         CREATE tidut.
         ASSIGN
         SUBSTRING(tidut.UT,1) = "H02;" + STRING(skapa_mtrl.bestnr).
         
         CREATE tidut.
         ASSIGN 
         SUBSTRING(tidut.UT,1) = "H03;" + STRING(TODAY,"999999") + ";" + STRING(skapa_mtrl.DATUM,"999999").
                  
         IF skapa_mtrl.MARK NE " " THEN DO:
            CREATE tidut.         
            ASSIGN SUBSTRING(tidut.UT,1) = "H04;MKS;" + REPLACE(skapa_mtrl.MARK,";"," ").
         END.                                                                   
         
         IF skapa_mtrl.KOM NE " " THEN DO:
            CREATE tidut.         
            cemi = SUBSTRING(skapa_mtrl.KOM,1,40).
            ASSIGN SUBSTRING(tidut.UT,1) = "H04;GEN;" + REPLACE(cemi,";"," ").
            IF LENGTH(skapa_mtrl.KOM) > 40 THEN DO:
               cemi = SUBSTRING(skapa_mtrl.KOM,41,40).
               CREATE tidut.         
               ASSIGN SUBSTRING(tidut.UT,1) = "H04;GEN;" + REPLACE(cemi,";"," ").
            END.
         END.
         IF skapa_mtrl.AVIS = TRUE THEN DO:   
            CREATE tidut.         
            ASSIGN SUBSTRING(tidut.UT,1) = "H04;GEN;" + "Avisering" + ";" + REPLACE(skapa_mtrl.AVISPERS,";"," ").  
         END.                                                 
         IF epostvar NE "" THEN DO:         
            CREATE tidut.
            ASSIGN SUBSTRING(tidut.UT,1) = "H04;ZZZ;" + epostvar.
         END.

         FIND FIRST AONRTAB WHERE AONRTAB.AONR = BEREDNING.AONR AND 
         AONRTAB.DELNR = BEREDNING.DELNR USE-INDEX AONR NO-LOCK NO-ERROR.      
         
         CREATE tidut.    
         ASSIGN SUBSTRING(tidut.UT,1) = "H07;;;;" + SUBSTRING(AONRTAB.ORT,1,35) + ";;" + 
         AONRTAB.AONR.                 
         
         CREATE tidut.
         ASSIGN SUBSTRING(tidut.UT,1) = "H08;" + STRING(skapa_mtrl.KUNDNR,"99999").          
         CREATE tidut.
         ASSIGN SUBSTRING(tidut.UT,1) = "H10;" + skapa_mtrl.KIKONTAKT + ";" +
         STRING(skapa_mtrl.KITELE) + ";" + STRING(skapa_mtrl.KIMOBIL) + ";" + 
         STRING(skapa_mtrl.FAX).
         
         IF skapa_mtrl.KTKONTAKT NE " " THEN DO:
            CREATE tidut.
            ASSIGN SUBSTRING(tidut.UT,1) = "H11;" + skapa_mtrl.KTKONTAKT + ";" +
            STRING(skapa_mtrl.KTTELE) + ";" + STRING(skapa_mtrl.KTMOBIL) + ";".        
         END.   
 
         CREATE tidut.
         ASSIGN SUBSTRING(tidut.UT,1) = "H12;SE.ABB.SKA".
         
         CREATE tidut.
         ASSIGN SUBSTRING(tidut.UT,1) = "H15;;" + skapa_mtrl.FORE.        
         
         CREATE tidut.
/*          ASSIGN SUBSTRING(tidut.UT,1) = "H16;" +                                                            */
/*          REPLACE(skapa_mtrl.L1,";"," ")skapa_mtrl.L1 + ";;;" + STRING(skapa_mtrl.L3) + ";" + skapa_mtrl.L2. */
         ASSIGN SUBSTRING(tidut.UT,1) = "H16;" +   
         REPLACE(skapa_mtrl.L1,";"," ") + ";;;" + STRING(skapa_mtrl.L3) + ";" + REPLACE(skapa_mtrl.L2,";"," ").                              
      END.
   END.                    
END PROCEDURE.

PROCEDURE id_UI :
   
  {IDTRP.I}              
END PROCEDURE.

PROCEDURE kanmark_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/   
   IF globforetag = "gran" OR globforetag = "elpa" THEN DO:
      FIND FIRST uppl_temp WHERE uppl_temp.NUM = mtrl_temp2.NUM NO-LOCK NO-ERROR.
      IF AVAILABLE uppl_temp THEN DO:                                    
         ASSIGN
         retvar = 1 
         ednum = 1    
         ednum3 = LENGTH(uppl_temp.ANMARK)      
         retvar = INDEX(uppl_temp.ANMARK,CHR(10),ednum)
         edtecken = 50   
         edtext = uppl_temp.ANMARK
         tidtext = "".   
         IF ednum3 > 1 THEN DO:
            CREATE tidut.
            kant = kant + 1.
            CREATE tidut.
            kant = kant + 1.
            ASSIGN SUBSTRING(tidut.UT,1) = "Anmärkning:".      
            {ANMARK2.I}  
         END.
      END.
   END.
END PROCEDURE.

PROCEDURE klar_UI :
 
   CREATE tidut.
   ASSIGN
   ediraknare = ediraknare + 1.
   SUBSTRING(tidut.UT,1) = "L01;" + STRING(ediraknare) + 
   ";" + "0" + ";" + "20".
   CREATE tidut.
   ASSIGN 
   SUBSTRING(tidut.UT,1) = "L04;GEN;" + "Kompletteringsbeställning".
   tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
   CREATE tidut.
   ASSIGN
   ediraknare = ediraknare + 1  
   SUBSTRING(tidut.UT,1) = "L01;" + STRING(ediraknare) + 
   ";" + "B0001" + " Kompletteringsbeställning" + ";30".  
   FOR EACH trp_mtrl WHERE trp_mtrl.LEVKOD = vald_lev AND trp_mtrl.ANTAL > 0: 
      IF trp_mtrl.DBEST NE "RETUR" THEN DO:     
         CREATE tidut.
         ASSIGN
         ediraknare = ediraknare + 1.
         IF SUBSTRING(trp_mtrl.ENR,1,1) = "E" THEN DO:
            SUBSTRING(tidut.UT,1) = "L01;" + STRING(ediraknare) + ";" + TRIM(trp_mtrl.ENR) + ";40".
            CREATE tidut.
            ASSIGN   
            SUBSTRING(tidut.UT,1) = "L02;" + TRIM(trp_mtrl.ENR) + ";" + 
            SUBSTRING(trp_mtrl.BENAMNING,1,25). 
            CREATE tidut.
            ASSIGN   
            SUBSTRING(tidut.UT,1) = "L03;" + TRIM(STRING(trp_mtrl.ANTAL,">>>>9")) + ";" + 
            trp_mtrl.ENHET.
         END.
         ELSE DO:
            SUBSTRING(tidut.UT,1) = "L01;" + STRING(ediraknare) + ";" + "E" + TRIM(trp_mtrl.ENR) + ";40".
            CREATE tidut.
            ASSIGN   
            SUBSTRING(tidut.UT,1) = "L02;" + "E" + TRIM(trp_mtrl.ENR) + ";" + 
            SUBSTRING(trp_mtrl.BENAMNING,1,25). 
            CREATE tidut.
            ASSIGN   
            SUBSTRING(tidut.UT,1) = "L03;" + TRIM(STRING(trp_mtrl.ANTAL,">>>>9")) + ";" + 
            trp_mtrl.ENHET.
         END.   
      END.   
   END.                                           
END PROCEDURE.

PROCEDURE linor_UI :
  
   {LINORTRP.I}  
END PROCEDURE.

PROCEDURE materiel_UI :
  
   
   CREATE tidut.
   ASSIGN
   ediraknare = ediraknare + 1.
   IF SUBSTRING(mtrlbuff.ENR,1,1) = "E" THEN DO:
      SUBSTRING(tidut.UT,1) = "L01;" + STRING(ediraknare) + ";" + TRIM(mtrlbuff.ENR) + ";40".
      CREATE tidut.
      ASSIGN   
      SUBSTRING(tidut.UT,1) = "L02;" + TRIM(mtrlbuff.ENR) + ";" + 
      SUBSTRING(mtrlbuff.BENAMNING,1,25).      
   END.
   ELSE DO:
      SUBSTRING(tidut.UT,1) = "L01;" + STRING(ediraknare) + ";" + "E" + TRIM(mtrlbuff.ENR) + ";40".
      CREATE tidut.
      ASSIGN   
      SUBSTRING(tidut.UT,1) = "L02;" + "E" + TRIM(mtrlbuff.ENR) + ";" + 
      SUBSTRING(mtrlbuff.BENAMNING,1,25).      
   END.    
   CREATE tidut.
   ASSIGN   
   SUBSTRING(tidut.UT,1) = "L03;" + TRIM(STRING(mtrlbuff.ANTAL,">>>>9")) + ";" + 
   mtrlbuff.ENHET. 
   IF numsok = FALSE THEN DO:
      FOR EACH mtrl_temp WHERE mtrl_temp.XKORD = mtrlbuff.XKORD AND
      mtrl_temp.ENR = mtrlbuff.ENR AND mtrl_temp.LEVKOD = mtrlbuff.LEVKOD:
         IF mtrl_temp.MTRLTEXT NE "" THEN DO:
            anmlangd = LENGTH(mtrl_temp.MTRLTEXT).
            CREATE tidut.         
            ASSIGN 
            SUBSTRING(tidut.UT,1) = "L04;GEN;" + SUBSTRING(mtrl_temp.MTRLTEXT,1,60).
            tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
            anmlangd = anmlangd - 60.
            IF anmlangd > 0 THEN DO:
               CREATE tidut.
               ASSIGN 
               SUBSTRING(tidut.UT,1) = "L04;GEN;" + SUBSTRING(mtrl_temp.MTRLTEXT,61,60).
               tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
               anmlangd = anmlangd - 60.
            END.
            IF anmlangd > 0 THEN DO:
               CREATE tidut.
               ASSIGN 
               SUBSTRING(tidut.UT,1) = "L04;GEN;" + SUBSTRING(mtrl_temp.MTRLTEXT,121,60).
               tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
               anmlangd = anmlangd - 60.
            END.
            IF anmlangd > 0 THEN DO:
               CREATE tidut.
               ASSIGN 
               SUBSTRING(tidut.UT,1) = "L04;GEN;" + SUBSTRING(mtrl_temp.MTRLTEXT,181,60).
               tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
               anmlangd = anmlangd - 60.
            END.                              
         END.   
      END.
   END.
   ELSE DO:
      FOR EACH mtrl_temp WHERE mtrl_temp.NUM = mtrlbuff.NUM AND
      mtrl_temp.ENR = mtrlbuff.ENR AND mtrl_temp.LEVKOD = mtrlbuff.LEVKOD:
         IF mtrl_temp.MTRLTEXT NE "" THEN DO:
            anmlangd = LENGTH(mtrl_temp.MTRLTEXT).
            CREATE tidut.         
            ASSIGN 
            SUBSTRING(tidut.UT,1) = "L04;GEN;" + SUBSTRING(mtrl_temp.MTRLTEXT,1,60).
            tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
            anmlangd = anmlangd - 60.
            IF anmlangd > 0 THEN DO:
               CREATE tidut.
               ASSIGN 
               SUBSTRING(tidut.UT,1) = "L04;GEN;" + SUBSTRING(mtrl_temp.MTRLTEXT,61,60).
               tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
               anmlangd = anmlangd - 60.
            END.
            IF anmlangd > 0 THEN DO:
               CREATE tidut.
               ASSIGN 
               SUBSTRING(tidut.UT,1) = "L04;GEN;" + SUBSTRING(mtrl_temp.MTRLTEXT,121,60).
               tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
               anmlangd = anmlangd - 60.
            END.
            IF anmlangd > 0 THEN DO:
               CREATE tidut.
               ASSIGN 
               SUBSTRING(tidut.UT,1) = "L04;GEN;" + SUBSTRING(mtrl_temp.MTRLTEXT,181,60).
               tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
               anmlangd = anmlangd - 60.
            END.
         END.   
      END.
   END.    
END PROCEDURE.

PROCEDURE nedepa2_UI :
 
   {NEDEPA2.I}
END PROCEDURE.
 
PROCEDURE nedepa3_UI :
 
   {NEDEPA3.I}
END PROCEDURE.

PROCEDURE nedepa_UI :
 
   {NEDEPA.I}
END PROCEDURE.
 
PROCEDURE rubrik_UI :
   
   CREATE tidut.      
   ASSIGN  
   SUBSTRING(tidut.UT,1) = CAPS(Guru.Konstanter:genk)                                                                          
   SUBSTRING(tidut.UT,13) = "BENÄMNING"                     
   SUBSTRING(tidut.UT,49) = "NETTOPRIS"         
   SUBSTRING(tidut.UT,59) = "ENHET"
   SUBSTRING(tidut.UT,65) = "ANTAL"
   SUBSTRING(tidut.UT,71) = "SUMMA".           
   CREATE tidut.         
END PROCEDURE.

PROCEDURE skapa_UI :
     
   {SKAPATRP.I}         
END PROCEDURE.

PROCEDURE skydd_UI :
/*
   {SKYDDTRP.I}
   */
END PROCEDURE.

PROCEDURE summa_UI :
 
   {SUMMATRP.I}      
END PROCEDURE.

PROCEDURE tva_UI :

   {TVATRP.I}
END PROCEDURE.

   PROCEDURE kskrubr_UI:
      ASSIGN                  
      SUBSTRING(tidut.UT,1) = "Position"
      SUBSTRING(tidut.UT,10) = "Kablar"
      SUBSTRING(tidut.UT,20) = "Ansl.don"
      SUBSTRING(tidut.UT,30) = "E-nummer"
      SUBSTRING(tidut.UT,40) = "Nollklämma"
      SUBSTRING(tidut.UT,55) = "Säkring"
      SUBSTRING(tidut.UT,65) = "Koppl.typ".
      CREATE tidut.
      kant = kant + 1.
      skapkab = 1. 
      FOR EACH BERVAL WHERE BERVAL.AONR = valaonr
      AND BERVAL.OMRADE = valomrade AND 
      BERVAL.NUM = uppl_temp.NUM NO-LOCK BY BERVAL.SKAPNUM:                        
          IF BERVAL.F2 NE "" THEN DO:                        
             ASSIGN                  
             SUBSTRING(tidut.UT,1) = STRING(skapkab)
             SUBSTRING(tidut.UT,10) = TRIM(BERVAL.F2)
             SUBSTRING(tidut.UT,20) = TRIM(BERVAL.F3).
             FIND FIRST MTRLBER WHERE MTRLBER.KTYPKOD = BERVAL.KTYPKOD
             AND MTRLBER.F2 = BERVAL.F3 AND 
             MTRLBER.MODUL > 0 NO-LOCK NO-ERROR.
             IF AVAILABLE MTRLBER THEN DO:
                SUBSTRING(tidut.UT,30) = MTRLBER.ENR.
                IF MTRLBER.TYPBER = TRUE THEN DO:
                   SUBSTRING(tidut.UT,65) = STRING(BERVAL.TYP).
                END.
             END.                           
             ASSIGN
             SUBSTRING(tidut.UT,40) = TRIM(BERVAL.F4)
             SUBSTRING(tidut.UT,55) = TRIM(BERVAL.F5).
             skapkab = skapkab + 1.
             CREATE tidut.
             kant = kant + 1.
          END.
       END.
   END PROCEDURE.

   PROCEDURE mstnrubr_UI:
      ASSIGN                  
      SUBSTRING(tidut.UT,1) = "Position"
      SUBSTRING(tidut.UT,10) = "Kablar"
      SUBSTRING(tidut.UT,20) = "HSP-förd"
      SUBSTRING(tidut.UT,30) = "LSP-förd"
      SUBSTRING(tidut.UT,40) = "E-nummer"
      SUBSTRING(tidut.UT,55) = "Säkring" .
      CREATE tidut.
      kant = kant + 1.
      skapkab = 1. 
      FOR EACH BERVAL WHERE BERVAL.AONR = valaonr
      AND BERVAL.OMRADE = valomrade AND 
      BERVAL.NUM = uppl_temp.NUM NO-LOCK BY BERVAL.SKAPNUM:                        
          IF BERVAL.F5 NE "" THEN DO:                        
             ASSIGN                  
             SUBSTRING(tidut.UT,1) = STRING(skapkab)
             SUBSTRING(tidut.UT,10) = TRIM(BERVAL.F5)
             SUBSTRING(tidut.UT,20) = TRIM(BERVAL.F2)
             SUBSTRING(tidut.UT,30) = TRIM(BERVAL.F3).

             IF BERVAL.F2 NE "" THEN DO:
                 FIND FIRST MTRLBER WHERE MTRLBER.KTYPKOD = BERVAL.KTYPKOD
                 AND MTRLBER.F1 = BERVAL.F2 AND 
                 MTRLBER.MODUL > 0 NO-LOCK NO-ERROR.
                 IF AVAILABLE MTRLBER THEN DO:
                    SUBSTRING(tidut.UT,40) = MTRLBER.ENR.
                 END.                           
             END.
             ELSE IF BERVAL.F3 NE "" THEN DO:
                 FIND FIRST MTRLBER WHERE MTRLBER.KTYPKOD = BERVAL.KTYPKOD
                 AND MTRLBER.F2 = BERVAL.F3 AND 
                 MTRLBER.MODUL > 0 NO-LOCK NO-ERROR.
                 IF AVAILABLE MTRLBER THEN DO:
                    SUBSTRING(tidut.UT,40) = MTRLBER.ENR.
                 END.                           
             END.
             SUBSTRING(tidut.UT,55) = TRIM(BERVAL.F4).
             skapkab = skapkab + 1.
             CREATE tidut.
             kant = kant + 1.
          END.
       END.
   END PROCEDURE.

