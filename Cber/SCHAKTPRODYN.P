/*SCHAKTPRODYN.P*/
{temphandelsett.i}
{TTFORLAG.I}
{KONVALTEMP.I}
{GLOBVAR2DEL1.I}
{REGVAR.I}
{EXECLIN.I}
{SCHAKTPROWID.I}
&Scoped-define SHARED SHARED 
{HDTEMP.I}
{HOPALLA.I}
{SCHAKTPROFILTT.I}
DEFINE VARIABLE vstartad AS LOGICAL NO-UNDO.

DEFINE VARIABLE SchVisClasserStart AS HANDLE NO-UNDO.
DEFINE VARIABLE sprofilvar AS CHARACTER NO-UNDO.  /*oftas blank*/
DEFINE VARIABLE sprofilfaltvarde AS CHARACTER NO-UNDO.
DEFINE BUFFER hdprotkopbertempbuff FOR hdprotkopbertemp.
DEFINE BUFFER hdschakprottempbuff FOR hdschakprottemp.
DEFINE VARIABLE VolymClassStart AS HANDLE NO-UNDO.
DEFINE SHARED VARIABLE ejanv AS LOGICAL NO-UNDO.
DEFINE VARIABLE KalkClasserStart AS HANDLE NO-UNDO.
DEFINE SHARED VARIABLE schapph AS HANDLE NO-UNDO.
DEFINE SHARED VARIABLE valaonr AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE valdelnr AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE valort AS CHARACTER NO-UNDO. 
DEFINE SHARED VARIABLE valomrade AS CHARACTER NO-UNDO.  

DEFINE VARIABLE status-ok AS LOGICAL NO-UNDO.
DEFINE VARIABLE brwproch AS HANDLE NO-UNDO.
DEFINE VARIABLE dynbrwh AS HANDLE NO-UNDO.
DEFINE VARIABLE dynfrmh AS HANDLE NO-UNDO.
DEFINE VARIABLE dynbuffh AS HANDLE NO-UNDO.
DEFINE VARIABLE dynqueh AS HANDLE NO-UNDO.
DEFINE VARIABLE openquery AS CHARACTER NO-UNDO.
DEFINE VARIABLE tmpcolh AS HANDLE NO-UNDO.
DEFINE VARIABLE tempcolh AS HANDLE NO-UNDO.
DEFINE VARIABLE fieldh AS HANDLE NO-UNDO.
DEFINE VARIABLE entryfieldh AS HANDLE NO-UNDO.
DEFINE VARIABLE fieldh2 AS HANDLE NO-UNDO.
DEFINE VARIABLE tempnum AS INTEGER NO-UNDO.
DEFINE NEW SHARED VARIABLE musz AS LOGICAL NO-UNDO.
DEFINE VARIABLE bg AS INTEGER NO-UNDO.
DEFINE VARIABLE colraknare AS INTEGER NO-UNDO.
DEFINE VARIABLE tabort AS LOGICAL NO-UNDO.
DEFINE VARIABLE colvalue AS INTEGER NO-UNDO.
DEFINE VARIABLE labelvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE brwradnr AS INTEGER NO-UNDO.
DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
DEFINE VARIABLE brwvalrowid AS ROWID NO-UNDO.
DEFINE VARIABLE lastbrwrow AS ROWID NO-UNDO.
DEFINE VARIABLE andrastart AS LOGICAL NO-UNDO.
DEFINE VARIABLE linkhj AS CHARACTER NO-UNDO.
DEFINE VARIABLE temph AS HANDLE NO-UNDO. 
DEFINE VARIABLE tempstart AS DATE NO-UNDO.
DEFINE VARIABLE tempslut AS DATE NO-UNDO.
DEFINE VARIABLE goringet AS LOGICAL NO-UNDO.
DEFINE VARIABLE invar AS CHARACTER NO-UNDO.
DEFINE VARIABLE excelrad AS INTEGER NO-UNDO.
DEFINE VARIABLE valschakt AS INTEGER NO-UNDO.
DEFINE VARIABLE muspl AS INTEGER NO-UNDO.
DEFINE VARIABLE slutcol AS INTEGER NO-UNDO.
DEFINE VARIABLE flschakt AS LOGICAL NO-UNDO.
DEFINE VARIABLE strad AS INTEGER NO-UNDO.
DEFINE VARIABLE slrad AS INTEGER NO-UNDO.
DEFINE VARIABLE schaktvar AS INTEGER NO-UNDO.
DEFINE VARIABLE blankrader AS LOGICAL NO-UNDO.
DEFINE VARIABLE frantillh AS HANDLE NO-UNDO EXTENT 3.
DEFINE VARIABLE genauto AS LOGICAL NO-UNDO.
DEFINE VARIABLE rsort AS INTEGER NO-UNDO.
DEFINE VARIABLE spauto AS INTEGER NO-UNDO.

DEFINE VARIABLE ExtradataAppServerHandleSet AS HANDLE NO-UNDO. 
DEFINE VARIABLE ExtraDataDS AS HANDLE NO-UNDO.
DEFINE VARIABLE ExtraFieldH AS HANDLE NO-UNDO.
DEFINE VARIABLE ExtraFielChdH AS HANDLE NO-UNDO.
DEFINE VARIABLE ExtraVadHmt AS CHARACTER NO-UNDO.
DEFINE VARIABLE queryvar AS CHARACTER NO-UNDO.




DEFINE TEMP-TABLE omrubrik NO-UNDO
   FIELD RUBRIK AS CHARACTER
   FIELD ORDNING AS INTEGER
   FIELD CORDNING AS INTEGER
   INDEX ORDNING ORDNING DESCENDING
   INDEX RUBRIK RUBRIK DESCENDING.
   
DEFINE BUFFER omrubrikbuff FOR omrubrik.   

DEFINE TEMP-TABLE VolymStracka NO-UNDO
   FIELD STRACKA AS CHARACTER
   FIELD SID AS INTEGER
   FIELD ORDNING AS INTEGER
   INDEX ORDNING  ORDNING.  


DEFINE TEMP-TABLE celltemp
   FIELD PROCH AS HANDLE
   FIELD CH AS HANDLE
   FIELD PROCNAME AS CHARACTER
   FIELD CNAME AS CHARACTER
   FIELD DTYP AS CHARACTER
   FIELD NUM AS INTEGER
   FIELD FARG AS INTEGER
   FIELD CROWID AS ROWID
   INDEX NUM AS PRIMARY NUM CNAME.


DEFINE TEMP-TABLE menutemp
   FIELD MENUH AS HANDLE
   FIELD MENUITEMH AS HANDLE
   FIELD BRWH AS HANDLE.

/* tt för rubrikordning */   
DEFINE TEMP-TABLE hdprotkopbertemp2 NO-UNDO LIKE hdprotkopbertemp.
DEFINE TEMP-TABLE hdschakprottemp2 NO-UNDO LIKE hdschakprottemp.

DEFINE TEMP-TABLE ttordning
   FIELD ID AS INTEGER
   FIELD TYP AS CHARACTER
   FIELD ORDNING AS INTEGER
   FIELD ADMINORD AS INTEGER
   INDEX ADMINORD AS PRIMARY ADMINORD. 

{EXTRADATA.I}
DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.
DEFINE VARIABLE antalbrw AS INTEGER NO-UNDO.
DEFINE VARIABLE vilkenbrw AS INTEGER NO-UNDO.
DEFINE VARIABLE spartidvar AS INTEGER NO-UNDO.
DEFINE VARIABLE Snabbspara AS WIDGET-HANDLE NO-UNDO.
DEFINE VARIABLE chSnabbspara AS COMPONENT-HANDLE NO-UNDO.
DEFINE TEMP-TABLE sumk NO-UNDO
  FIELD TYP   AS CHARACTER
  FIELD SID   AS INTEGER
  FIELD ID    AS INTEGER
  FIELD ANTAL AS DECIMAL
  FIELD RUBRIK AS CHARACTER
  INDEX RUBRIK RUBRIK.
  
FUNCTION antal RETURNS DECIMAL
  ( INPUT ordvar AS INTEGER):
   IF ordvar = 1 THEN RETURN exschaktprotemp.DEC1.
   IF ordvar = 2 THEN RETURN exschaktprotemp.DEC2. 
   IF ordvar = 3 THEN RETURN exschaktprotemp.DEC3. 
   IF ordvar = 4 THEN RETURN exschaktprotemp.DEC4. 
   IF ordvar = 5 THEN RETURN exschaktprotemp.DEC5. 
   IF ordvar = 6 THEN RETURN exschaktprotemp.DEC6. 
   IF ordvar = 7 THEN RETURN exschaktprotemp.DEC7. 
   IF ordvar = 8 THEN RETURN exschaktprotemp.DEC8. 
   IF ordvar = 9 THEN RETURN exschaktprotemp.DEC9. 
   IF ordvar = 10 THEN RETURN exschaktprotemp.DEC10.
   IF ordvar = 11 THEN RETURN exschaktprotemp.DEC11.
   IF ordvar = 12 THEN RETURN exschaktprotemp.DEC12.
   IF ordvar = 13 THEN RETURN exschaktprotemp.DEC13.
   IF ordvar = 14 THEN RETURN exschaktprotemp.DEC14.
   IF ordvar = 15 THEN RETURN exschaktprotemp.DEC15.
   IF ordvar = 16 THEN RETURN exschaktprotemp.DEC16.
   IF ordvar = 17 THEN RETURN exschaktprotemp.DEC17.
   IF ordvar = 18 THEN RETURN exschaktprotemp.DEC18.
   IF ordvar = 19 THEN RETURN exschaktprotemp.DEC19.
   IF ordvar = 20 THEN RETURN exschaktprotemp.DEC20.
   IF ordvar = 21 THEN RETURN exschaktprotemp.DEC21.
   IF ordvar = 22 THEN RETURN exschaktprotemp.DEC22.
   IF ordvar = 23 THEN RETURN exschaktprotemp.DEC23.
   IF ordvar = 24 THEN RETURN exschaktprotemp.DEC24.
   IF ordvar = 25 THEN RETURN exschaktprotemp.DEC25.
   IF ordvar = 26 THEN RETURN exschaktprotemp.DEC26.
   IF ordvar = 27 THEN RETURN exschaktprotemp.DEC27.
   IF ordvar = 28 THEN RETURN exschaktprotemp.DEC28.
   IF ordvar = 29 THEN RETURN exschaktprotemp.DEC29.
   IF ordvar = 30 THEN RETURN exschaktprotemp.DEC30.
   IF ordvar = 31 THEN RETURN exschaktprotemp.DEC31.
   IF ordvar = 32 THEN RETURN exschaktprotemp.DEC32.
   IF ordvar = 33 THEN RETURN exschaktprotemp.DEC33.
   IF ordvar = 34 THEN RETURN exschaktprotemp.DEC34.
   IF ordvar = 35 THEN RETURN exschaktprotemp.DEC35.
   IF ordvar = 36 THEN RETURN exschaktprotemp.DEC36.
   IF ordvar = 37 THEN RETURN exschaktprotemp.DEC37.
   IF ordvar = 38 THEN RETURN exschaktprotemp.DEC38.
   IF ordvar = 39 THEN RETURN exschaktprotemp.DEC39.
   IF ordvar = 40 THEN RETURN exschaktprotemp.DEC40.

END FUNCTION.  

FUNCTION brwantal RETURNS LOGICAL (INPUT brnr AS INTEGER):
   DEFINE VARIABLE antalibrw AS INTEGER NO-UNDO.
   RUN getnumresult_UI IN  brwproc[brnr] (OUTPUT antalibrw).
   IF antalibrw > 0 THEN RETURN TRUE.
   ELSE RETURN FALSE.
END FUNCTION.

ASSIGN
dynfrmh = frm
tabort = FALSE.
vilkenbrw = 1.
IF Guru.Konstanter:appcon THEN DO:
   RUN EXTRADATAHMT.P PERSISTENT SET edataapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT.                  
END.
ELSE DO:
   RUN EXTRADATAHMT.P PERSISTENT SET edataapph.      
END.
ON CTRL-S OF c-win ANYWHERE DO:
   RUN fbtnsnabb_UI IN THIS-PROCEDURE.
END.
ON 'VALUE-CHANGED':U OF RADVAL PERSISTENT RUN vcradval_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_EXCEL PERSISTENT RUN btnexcel_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_VISA PERSISTENT RUN btnvisa_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_VISAMARK PERSISTENT RUN btnvisamark_UI IN THIS-PROCEDURE.

ON 'CHOOSE':U OF BTN_SKRIV PERSISTENT RUN btnskriv_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK':U OF BTN_SKRIV PERSISTENT RUN btnskrivm_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_ANDKALK PERSISTENT RUN btnnykod_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_GRUNDUPP PERSISTENT RUN btnhmtkalkkod_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_BORTKALK PERSISTENT RUN bortkalk_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_GENKALK PERSISTENT RUN btngenkalk_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_GENKALKV PERSISTENT RUN btngenkalkv_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_VAL PERSISTENT RUN vcbrwvaltrigg_UI IN THIS-PROCEDURE.
ON 'ENTRY' OF hdbenh PERSISTENT RUN entryhdbenh_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF hdbenh PERSISTENT RUN leavebenh_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_SNABB PERSISTENT RUN fbtnsnabb_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_SCH PERSISTENT RUN mknapp_UI IN THIS-PROCEDURE (INPUT 1).
ON 'CHOOSE':U OF BTN_HAND PERSISTENT RUN mknapp_UI IN THIS-PROCEDURE (INPUT 2).
ON 'CHOOSE':U OF BTN_KORD PERSISTENT RUN mknapp_UI IN THIS-PROCEDURE (INPUT 3).
ON 'CHOOSE':U OF BTN_KALK PERSISTENT RUN mknapp_UI IN THIS-PROCEDURE (INPUT 4).
ON 'CHOOSE':U OF BTN_PROFIL PERSISTENT RUN mknapp_UI IN THIS-PROCEDURE (INPUT 6).
ON 'CHOOSE':U OF BTN_RAKNA PERSISTENT RUN volberDS_UI IN THIS-PROCEDURE .

ON 'VALUE-CHANGED' OF TOG_SORTRUB PERSISTENT RUN OmRubrikSort_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF TOG_SPROFIL PERSISTENT RUN AutoSprofil_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_MANRUBRIK PERSISTENT RUN manrubrik_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_BORTRUBRIK PERSISTENT RUN bortrubrik_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_MANSTRACK PERSISTENT RUN nystrecka_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_IMPSTRACK PERSISTENT RUN ImpStrecka_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_MANNY PERSISTENT RUN mannyschakt_UI IN THIS-PROCEDURE.

ON 'CHOOSE':U OF BTN_MANSTRBORT PERSISTENT RUN manstreckbort_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_MANSCBORT PERSISTENT RUN manschaktbort_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_NYPROFIL PERSISTENT RUN NyProfil_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_BORTPROFIL PERSISTENT RUN BortProfil_UI IN THIS-PROCEDURE.

IF Guru.Konstanter:GForetag = "AKEAUTBI" THEN Guru.GlobalaVariabler:KalkyUppIschakt  = TRUE.
IF Guru.Konstanter:globforetag = "FORS"  THEN Guru.GlobalaVariabler:KalkyUppIschakt  = TRUE. 
IF Guru.GlobalaVariabler:KalkyUppIschakt  = TRUE THEN DO :
   BTN_IMPSTRACK:LABEL ="Imp.Byggnr från Bered.".
   BTN_MANSTRBORT:LABEL ="Ta bort Byggnr.".
   BTN_MANSTRACK:LABEL ="Nytt Byggnr".
   BTN_BORTRUBRIK:LABEL = "Ta Bort P2-kod".
   BTN_MANRUBRIK:LABEL = "Ny P2-kod".
   TOG_SORTRUB:LABEL = "P2-koder sorterade i bokstavsordning". 
   TOG_SORTRUB:TOOLTIP = "Sortering i bokstavsordning eller i Förlaggning, Händelse, Ytbelägg".
   BTN_MANNY:TOOLTIP = "Lägg upp ett nytt schakt. Lägg sedan till de P2-koder som skall finnas med, samt ingående Byggnr.".
   BTN_MANSCBORT:TOOLTIP = "Ta bort markerat schakt med ingående P2-koder och Byggnr.".
   BTN_MANRUBRIK:TOOLTIP = "Lägg upp den/de P2-koder som skall vara med i aktuellt schakt.".
   BTN_BORTRUBRIK:TOOLTIP = "Ta bort vald P2-kod i valt schakt.".
   BTN_MANSTRACK:TOOLTIP = "Lägg upp den/de Byggnr som skall vara med i valt schakt.".
   BTN_MANSTRBORT:TOOLTIP = "Ta bort markerat Byggnr i valt schakt.".
   BTN_IMPSTRACK:TOOLTIP = "Importera Byggnr från Beredningskonstruktioner.".
END.
IF Guru.Konstanter:globforetag = "krin" THEN DO:
   BTN_IMPSTRACK:LABEL ="Imp.Byggnr från Bered.".
   BTN_MANSTRBORT:LABEL ="Ta bort Byggnr.".
   BTN_MANSTRACK:LABEL ="Nytt Byggnr".   
   BTN_MANSTRACK:TOOLTIP = "Lägg upp den/de Byggnr som skall vara med i valt schakt.".
   BTN_MANSTRBORT:TOOLTIP = "Ta bort markerat Byggnr i valt schakt.".
   BTN_IMPSTRACK:TOOLTIP = "Importera Byggnr från Beredningskonstruktioner.".
END.   
RUN Rubsort_UI IN schapph (INPUT INTEGER(valaonr),INPUT valomrade,OUTPUT rsort,OUTPUT spauto).
Guru.GlobalaVariabler:RubrikSortSchakt = rsort.
IF Guru.GlobalaVariabler:RubrikSortSchakt = 0 THEN TOG_SORTRUB:CHECKED = FALSE.
ELSE TOG_SORTRUB:CHECKED = TRUE.
Guru.GlobalaVariabler:SprofilAuto = spauto.
IF Guru.GlobalaVariabler:SprofilAuto = 0 THEN TOG_SPROFIL:CHECKED = FALSE.
ELSE TOG_SPROFIL:CHECKED = TRUE.

IF Guru.Konstanter:appcon THEN DO:
   RUN EXTRADATAHMTDS.P PERSISTENT SET ExtradataAppServerHandleSet ON Guru.Konstanter:apphand TRANSACTION DISTINCT.
END.
ELSE DO:
   RUN EXTRADATAHMTDS.p PERSISTENT SET ExtradataAppServerHandleSet.
END. 
Guru.SharedVariable:ExtradataAppServerHandle = ExtradataAppServerHandleSet.

RUN Styrprofil_UI IN schapph (OUTPUT TABLE schackprofilstyrtt, OUTPUT TABLE tempforlagg,OUTPUT TABLE temphandelse).

RUN HamtaSchaktProfil_UI.



RUN genkalk_UI IN schapph (INPUT INTEGER(valaonr),INPUT valomrade,OUTPUT genauto).
IF genauto = FALSE THEN DO:
   BTN_GENKALK:HIDDEN = TRUE.
   BTN_GENKALKV:HIDDEN = TRUE.
END.   
BTN_BORTKALK:HIDDEN = TRUE.
/*Bara för valad schakt*/
BTN_GENKALK:HIDDEN = TRUE.
DEFINE VARIABLE btnnovit AS HANDLE NO-UNDO. 
RUN DYNBRW.P PERSISTENT SET brwproc[1] (INPUT BRW_VAL).
RUN DYNBRW.P PERSISTENT SET brwproc[2] (INPUT BRW_SKRIVVAL).
RUN DYNARROW.P PERSISTENT SET brwproc[3] (INPUT BRW_VAL,INPUT BRW_SKRIVVAL,
                                                     INPUT BTN_OVER, INPUT ?,
                                                     INPUT ?, INPUT BTN_BACK).
BTN_VISAMARK:HIDDEN = FALSE.                                                     
BTN_VISA:HIDDEN = FALSE. 
BRW_VAL:PRIVATE-DATA = "ejh".
BRW_SKRIVVAL:PRIVATE-DATA = "ejh".
RUN mouseselclick_UI IN brwproc[1] (INPUT FALSE).
RUN spartid_UI.
RUN spartidh_UI (OUTPUT spartidvar).
FOR EACH hdschakttemp NO-LOCK: 
   CREATE skrivhdschakttemp.
   BUFFER-COPY hdschakttemp TO skrivhdschakttemp.
END.   
RUN openbdynspec_UI IN brwproc[1].
RUN openbdynspec_UI IN brwproc[2].
RUN extratrigg_UI.
ASSIGN
BTN_HAND:HIDDEN = TRUE.
BTN_KORD:HIDDEN = TRUE.
BTN_SCH:LOAD-IMAGE("BILDER\xbtn_scprot.gif") NO-ERROR.
BTN_HAND:LOAD-IMAGE("BILDER\xbtn_handel.gif") NO-ERROR.
BTN_KORD:LOAD-IMAGE("BILDER\xbtn_koord.gif") NO-ERROR.
BTN_KALK:LOAD-IMAGE("BILDER\xbtn_sckalk.gif") NO-ERROR.
BTN_RAKNA:LOAD-IMAGE("BILDER\xbtn_volym.gif") NO-ERROR.
BTN_ANDKALK:LOAD-IMAGE("BILDER\xbtn_kalkyl.gif") NO-ERROR.
BTN_PROFIL:LOAD-IMAGE("BILDER\btn_schaktprofil.gif") NO-ERROR.
BTN_SNABB:LOAD-IMAGE("BILDER\xbtn_sspara.gif") NO-ERROR.
BTN_PROFIL:TOOLTIP = "Skapa Schaktprofiler!".
    
BTN_RAKNA:ROW = 0.
BTN_PROFIL:ROW = 0.
TOG_SORTRUB:COLUMN = BTN_SCH:COLUMN.
TOG_SORTRUB:ROW = BTN_SCH:ROW + BTN_SCH:HEIGHT-CHARS + 0.2. 
BTN_MANSCBORT:ROW = TOG_SORTRUB:ROW + 1.  
BTN_MANNY:ROW = BTN_MANSCBORT:ROW.
BTN_GRUNDUPP:TOOLTIP = "Hämtar grundupplägget av Kalkylkoder.".
IF Guru.Konstanter:hoppsekvar[3] = TRUE THEN DO:
    BTN_KALK:HIDDEN = FALSE.
   IF Guru.Konstanter:kalk2sekvar[2] = TRUE THEN DO:
      BTN_ANDKALK:HIDDEN = FALSE.
      BTN_GRUNDUPP:HIDDEN = FALSE.
   END.   
   ELSE DO:
      BTN_ANDKALK:HIDDEN = TRUE.
      BTN_GRUNDUPP:HIDDEN = TRUE.
   END.    
END.
ELSE DO:
   BTN_KALK:HIDDEN = TRUE.
   BTN_ANDKALK:HIDDEN = TRUE.
   BTN_GRUNDUPP:HIDDEN = TRUE.
END. 
/*ska INTEGER köras!*/
BTN_GRUNDUPP:HIDDEN = TRUE.
RADVAL:HIDDEN = TRUE.     

&Scoped-define TimerKor "fbtnsnabb_UI"
{TIMERSTART.I}
TOG_SPROFIL:LABEL = "Visa kolumn Schaktprofiler".
RUN PlaceraKnapp_UI.
PROCEDURE PlaceraKnapp_UI :
   c-win:HIDDEN = FALSE.
   DEFAULT-FRAME:HIDDEN = FALSE.
   FRAME-KALK:HIDDEN = FALSE.   
   Guru.GlobalaVariabler:StartKolumnForKnappar = BTN_SCH:COLUMN.
   Guru.Konstanter:PlaceraKnapparVagratt(BTN_SCH,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(BTN_HAND,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(BTN_KORD,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(BTN_KALK,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(BTN_RAKNA,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(BTN_PROFIL,TRUE).
   Guru.GlobalaVariabler:StartRadForKnappar = BTN_SCH:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_SCH). 
   Guru.Konstanter:PlaceraKnapparLodratt(TOG_SORTRUB).
   Guru.Konstanter:PlaceraKnapparLodratt(TOG_SPROFIL).
   TOG_SPROFIL:COLUMN = TOG_SORTRUB:COLUMN.   
   Guru.GlobalaVariabler:StartRadForKnappar = BRW_VAL:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_MANNY).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_MANSCBORT).

   
   Guru.GlobalaVariabler:StartKolumnForKnappar = BRW_VAL:COLUMN - 0.5.  
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(BTN_MANNY).
   BTN_MANSCBORT:COLUMN = BTN_MANNY:COLUMN. 
   
   Guru.GlobalaVariabler:StartRadForKnappar = BTN_OK:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_OK).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_AVB).
   Guru.GlobalaVariabler:StartKolumnForKnappar = DEFAULT-FRAME:WIDTH-CHARS.  
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(BTN_OK).
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(BTN_SNABB).   
   BTN_AVB:COLUMN = BTN_OK:COLUMN.   
   Guru.GlobalaVariabler:StartKolumnForKnappar = DEFAULT-FRAME:WIDTH-CHARS.  
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(BTN_EXCEL).
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(BTN_VISA).
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(BTN_BORTRUBRIK).
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(BTN_MANRUBRIK).
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(BTN_MANSTRBORT).
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(BTN_MANSTRACK).
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(BTN_IMPSTRACK).   
   Guru.GlobalaVariabler:StartKolumnForKnappar = DEFAULT-FRAME:WIDTH-CHARS.  
   BTN_SKRIV:ROW = BTN_EXCEL:ROW - 1.1.
   BTN_VISAMARK:ROW = BTN_SKRIV:ROW.
   CMB_RUBRIK:ROW = BTN_SKRIV:ROW.
   CMB_RUBRIK:WIDTH = BTN_SKRIV:WIDTH.
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(BTN_SKRIV).
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(BTN_VISAMARK).
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(CMB_RUBRIK).   
   Guru.GlobalaVariabler:StartKolumnForKnappar = FRAME-KALK:WIDTH-CHARS.  
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(BTN_GENKALKV).
   Guru.Konstanter:PlaceraKnapparVagrattFranHoger(BTN_ANDKALK).   
   FILL-IN_AONR:COLUMN = BRW_VAL:COLUMN.   
   Guru.GlobalaVariabler:StartRadForKnappar = FILL-IN-BB:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(FILL-IN-BB).
   Guru.Konstanter:PlaceraKnapparLodratt(FILL-IN-TB).
   Guru.Konstanter:PlaceraKnapparLodratt(FILL-IN-DJP).
   Guru.Konstanter:PlaceraKnapparLodratt(FILL-IN-DJM).
   FILL-IN-PROCENTTK:ROW = FILL-IN-DJM:ROW.
   FILL-IN-PROCENTTK:HIDDEN = TRUE.
   BTN_NYPROFIL:ROW = FILL-IN-DJM:ROW.
   Guru.GlobalaVariabler:StartKolumnForKnappar = FILL-IN-DJM:COLUMN.
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN-DJM,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN-PROCENTTK,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(BTN_NYPROFIL,TRUE).
   
END PROCEDURE.


RETURN.

/* manuella knappar*/
PROCEDURE manknapp_UI :        
   BTN_MANSTRBORT:HIDDEN = TRUE. 
   BTN_MANNY:HIDDEN = TRUE.
   BTN_MANSCBORT:HIDDEN = TRUE. 
   BTN_MANSTRACK:HIDDEN = TRUE.
   BTN_IMPSTRACK:HIDDEN = TRUE. 
   BTN_MANRUBRIK:HIDDEN = TRUE.
   BTN_BORTRUBRIK:HIDDEN = TRUE.
   CMB_RUBRIK:HIDDEN = TRUE. 
  
   BTN_MANSTRBORT:HIDDEN = FALSE. 
   BTN_MANNY:HIDDEN = FALSE. 
   BTN_MANSCBORT:HIDDEN = FALSE.
   BTN_MANSTRACK:HIDDEN = FALSE.
   BTN_IMPSTRACK:HIDDEN = FALSE. 
   BTN_MANRUBRIK:HIDDEN = FALSE.
   BTN_BORTRUBRIK:HIDDEN = FALSE.
   CMB_RUBRIK:HIDDEN = FALSE.

END PROCEDURE.

PROCEDURE startschakt_UI :
   BRW_SKRIVVAL:HEIGHT = 4.
   brw_val:HEIGHT = 4.
   FIND FIRST hdschakprottemp NO-LOCK NO-ERROR.
   FIND FIRST hdschakttemp WHERE hdschakttemp.SID = hdschakprottemp.SID NO-LOCK NO-ERROR.
   RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(hdschakttemp)).
   RUN lastselectdyn_UI IN brwproc[1].    
END PROCEDURE.
PROCEDURE fbtnsnabb_UI :
   IF ejanv = TRUE THEN RETURN.
   IF VALID-HANDLE(entryfieldh) THEN DO:
      RUN leave_UI.   
      IF invar NE ? THEN entryfieldh:BUFFER-VALUE = invar.      
   END.
   BRW_VAL:SELECT-FOCUSED-ROW() NO-ERROR.
   RUN selectrowid_UI IN brwproc[1] (OUTPUT brwvalrowid).
   FIND FIRST hdschakttemp WHERE ROWID(hdschakttemp) = brwvalrowid NO-LOCK NO-ERROR.
   IF AVAILABLE hdschakttemp THEN valschakt = hdschakttemp.SID.
   dynbrwh:SELECT-FOCUSED-ROW() NO-ERROR.
   RUN selectrowid_UI IN brwproch (OUTPUT brwvalrowid).
   IF vilkenbrw = 1 THEN DO:
      FIND FIRST hdschakprottemp WHERE ROWID(hdschakprottemp)= brwvalrowid NO-LOCK NO-ERROR.         
   END.
   ELSE IF vilkenbrw = 2 THEN DO:     
      FIND FIRST hdschakprothandtemp WHERE ROWID(hdschakprothandtemp)= brwvalrowid NO-LOCK NO-ERROR.
   END.
   ELSE IF vilkenbrw = 3 THEN DO:     
      FIND FIRST schkordstartsluttemp WHERE ROWID(schkordstartsluttemp)= brwvalrowid NO-LOCK NO-ERROR.
   END.
    ELSE IF vilkenbrw = 4 THEN DO:     
      FIND FIRST hdkalktemp  WHERE ROWID(hdkalktemp)= brwvalrowid NO-LOCK NO-ERROR.
   END.
   RUN setlastrowid_UI IN brwproch (INPUT brwvalrowid).      
   RUN manfixbort_UI.  
   RUN sparpro_UI IN schapph (INPUT valaonr,INPUT valomrade, INPUT TABLE hdschakttemp,INPUT TABLE hdschakprottemp,INPUT TABLE hdschakprothandtemp,INPUT TABLE hdprotkopbertemp,INPUT TABLE hdkalktemp).
   RUN RubsortSpar_UI IN schapph (INPUT INTEGER(valaonr),INPUT valomrade, INPUT Guru.GlobalaVariabler:RubrikSortSchakt, INPUT Guru.GlobalaVariabler:SprofilAuto).
   /*deleta alla bort.*/
   FOR EACH hdschakttemp WHERE hdschakttemp.BORT NO-LOCK:
      DELETE hdschakttemp.      
   END.
   FOR EACH hdprotkopbertemp WHERE hdprotkopbertemp.BORT NO-LOCK:
      DELETE hdprotkopbertemp.
   END.
   FOR EACH hdschakprottemp WHERE hdschakprottemp.BORT NO-LOCK:
      DELETE hdschakprottemp.
   END.
   FOR EACH hdkalktemp WHERE hdkalktemp.BORT NO-LOCK:
      DELETE hdkalktemp.
   END.
   FIND FIRST hdschakttemp WHERE hdschakttemp.SID = valschakt NO-LOCK NO-ERROR.
   
   IF vilkenbrw = 1 THEN DO:
      FIND FIRST hdschakprottemp WHERE ROWID(hdschakprottemp)= brwvalrowid NO-LOCK NO-ERROR.         
   END.
   ELSE IF vilkenbrw = 2 THEN DO:     
      FIND FIRST hdschakprothandtemp WHERE ROWID(hdschakprothandtemp)= brwvalrowid NO-LOCK NO-ERROR.
   END.
   ELSE IF vilkenbrw = 3 THEN DO:     
      FIND FIRST schkordstartsluttemp WHERE ROWID(schkordstartsluttemp)= brwvalrowid NO-LOCK NO-ERROR.
   END.
    ELSE IF vilkenbrw = 4 THEN DO:     
      FIND FIRST hdkalktemp  WHERE ROWID(hdkalktemp)= brwvalrowid NO-LOCK NO-ERROR.
   END.        
   IF VALID-HANDLE(entryfieldh) THEN DO:
      IF muspl > 0 THEN entryfieldh:CURSOR-OFFSET = muspl.                     
   END.
   
END PROCEDURE.
PROCEDURE fbtnsnabbsid_UI:
   DEFINE INPUT  PARAMETER vadsid AS INTEGER NO-UNDO.
   
   RUN sparprosid_UI IN schapph (INPUT valaonr,INPUT valomrade, INPUT TABLE hdschakttemp,INPUT TABLE hdschakprottemp,INPUT TABLE hdschakprothandtemp,INPUT TABLE hdprotkopbertemp,INPUT TABLE hdkalktemp, INPUT vadsid).
   FOR EACH hdschakttemp WHERE hdschakttemp.BORT AND hdschakttemp.SID = vadsid NO-LOCK:
      DELETE hdschakttemp.      
   END.
   FOR EACH hdprotkopbertemp WHERE hdprotkopbertemp.BORT AND hdprotkopbertemp.SID = vadsid NO-LOCK:
      DELETE hdprotkopbertemp.
   END.
   FOR EACH hdschakprottemp WHERE hdschakprottemp.BORT AND hdschakprottemp.SID = vadsid NO-LOCK:
      DELETE hdschakprottemp.
   END.
   FOR EACH hdkalktemp WHERE hdkalktemp.BORT AND hdkalktemp.SID = vadsid NO-LOCK:
      DELETE hdkalktemp.
   END.
   
END PROCEDURE.
PROCEDURE btnhmtkalkkod_UI :
   
   IF Guru.Konstanter:appcon THEN DO:
      RUN SCHKALKSTOPP.P  ON Guru.Konstanter:apphand TRANSACTION DISTINCT (INPUT INTEGER(valaonr),INPUT valomrade,INPUT hdschakttemp.SID, INPUT FALSE).
   END.
   ELSE DO:
      RUN SCHKALKSTOPP.P (INPUT INTEGER(valaonr),INPUT valomrade,INPUT hdschakttemp.SID, INPUT FALSE).
   END. 
   RUN kalktolk_UI IN schapph (INPUT INTEGER(valaonr),INPUT valomrade,INPUT hdschakttemp.SID,OUTPUT TABLE hdkalktemp APPEND).
   FIND FIRST hdschakttemp WHERE ROWID(hdschakttemp)= brwvalrowid NO-LOCK NO-ERROR.
   IF NOT AVAILABLE hdschakttemp THEN DO:
      RUN vcbrwval_UI.
   END.   
END PROCEDURE.
PROCEDURE btnnykod_UI :
   {KOLLVOLYMSTART.I}
   IF brwantal(1) = FALSE THEN RETURN.
   DEFINE VARIABLE arbkodvar AS CHARACTER NO-UNDO.
   DEFINE VARIABLE lopnrvar AS INTEGER NO-UNDO.   
   {muswait.i} 
   ASSIGN
   arbkodvar = ""
   lopnrvar = 0.
   {AVBGOM2.I}      
   FIND FIRST hdkalktemp WHERE ROWID(hdkalktemp) = brwrowid NO-LOCK NO-ERROR.
   IF AVAILABLE hdkalktemp THEN DO:
      ASSIGN
      arbkodvar = hdkalktemp.ARBKOD
      lopnrvar = hdkalktemp.LOPNR.
   END.
   FIND FIRST hdschakttemp WHERE ROWID(hdschakttemp)= brwvalrowid NO-LOCK NO-ERROR.
   IF NOT  AVAILABLE hdschakttemp THEN DO:
      RUN vcbrwval_UI.
   END.   
   IF ejanv = TRUE THEN DO:
      MESSAGE "Du kan inte gå in i kalkyl om beredningen är låst!"
      VIEW-AS ALERT-BOX.
      {AVBFRAM2.I}
      RETURN.  
   END.
   IF NOT VALID-HANDLE(KalkClasserStart) THEN DO:
      RUN Modules\Kalkyl\KalkClasserStart.P PERSISTENT SET KalkClasserStart.
       Guru.GlobalaVariabler:plusaonr = Guru.GlobalaVariabler:plusaonr. 
      Guru.GlobalaVariabler:plusdnr = Guru.GlobalaVariabler:plusdnr.  
   END.   
   RUN fbtnsnabb_UI.
   IF Guru.GlobalaVariabler:retvalkoll = TRUE THEN DO:
      RUN SetDefaultCursors IN Guru.Konstanter:hpApi.
      Guru.GlobalaVariabler:retvalkoll = FALSE.
   END.   
   RUN KalkyleraiBeredning_UI IN KalkClasserStart (INPUT INTEGER(valaonr), INPUT valomrade,INPUT 0,hdschakttemp.SID, INPUT FALSE).  
   EMPTY TEMP-TABLE hdkalktemp NO-ERROR. 
   FOR EACH hdschakttemp WHERE NO-LOCK:
       RUN kalktolk_UI IN schapph (INPUT INTEGER(valaonr),INPUT valomrade,INPUT hdschakttemp.SID,OUTPUT TABLE hdkalktemp APPEND).
   END.     
   FIND FIRST hdschakttemp WHERE ROWID(hdschakttemp)= brwvalrowid NO-LOCK NO-ERROR.
   IF NOT  AVAILABLE hdschakttemp THEN DO:
      RUN vcbrwval_UI.
   END.
   {AVBFRAM2.I}    
   IF musz = FALSE THEN DO:      
      IF AVAILABLE hdschakttemp THEN DO:
         RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(hdschakttemp)).
         RUN lastselectdyn_UI IN brwproc[1].
         RUN openbrw_UI.
         FIND FIRST hdkalktemp WHERE hdkalktemp.SID = hdschakttemp.SID AND hdkalktemp.ARBKOD = arbkodvar AND 
         hdkalktemp.LOPNR = lopnrvar NO-LOCK NO-ERROR.
         IF AVAILABLE hdkalktemp THEN DO:
            RUN setlastrowid_UI IN brwproch (INPUT ROWID(hdkalktemp)).
            RUN lastselectdyn_UI IN brwproch.
         END.         
      END.
   END.
   musz = FALSE.   
   {musarrow.i}   
END PROCEDURE.
PROCEDURE btngenkalkv_UI :  
   DEFINE VARIABLE svar AS LOGICAL NO-UNDO.
   IF ejanv = TRUE THEN DO:
      MESSAGE "Du kan inte generera kalkyl om beredningen är låst!"
      VIEW-AS ALERT-BOX.
      {AVBFRAM2.I}
      RETURN.  
   END.
   EMPTY TEMP-TABLE hdkalktempbort NO-ERROR.
   FOR EACH skrivhdschakttemp:
      FIND FIRST hdschakttemp WHERE hdschakttemp.SID = skrivhdschakttemp.SID NO-LOCK NO-ERROR.   
      MESSAGE "Är du säker på att du vill generera om Klkylkoder för " + hdschakttemp.BENAMNING + " (Schakt nr " + string(hdschakttemp.SID) + ")? ÅTGÄRDEN GÅR EJ ATT ÅNGRA!" SKIP
      "Bara koder från grundupplägget kommer att finnas kvar!" 
      VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE svar.
   
      IF svar THEN DO:
         RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(hdschakttemp)).
         RUN lastselectdyn_UI IN brwproc[1].
         RUN btngenkalkstart_UI.
         APPLY "CHOOSE" TO BTN_SNABB.
         IF Guru.Konstanter:appcon THEN DO:
            RUN SCHKALKSTOPP.P  ON Guru.Konstanter:apphand TRANSACTION DISTINCT (INPUT INTEGER(valaonr),INPUT valomrade,INPUT hdschakttemp.SID, INPUT FALSE).
         END.
         ELSE DO:
            RUN SCHKALKSTOPP.P (INPUT INTEGER(valaonr),INPUT valomrade,INPUT hdschakttemp.SID, INPUT FALSE).
         END. 
         APPLY "CHOOSE" TO BTN_KALK. 
         RUN openbdynspec_UI IN brwproch.
         RUN lastselectdyn_UI IN brwproch.
         RUN vcbrwval_UI.
      END. 
      RUN vcbrwval_UI.  
   END.
   
END PROCEDURE.
PROCEDURE btngenkalk_UI :
   DEFINE VARIABLE svar AS LOGICAL NO-UNDO.
   IF ejanv = TRUE THEN DO:
      MESSAGE "Du kan inte generera kalkyl om beredningen är låst!"
      VIEW-AS ALERT-BOX.
      {AVBFRAM2.I}
      RETURN.  
   END.
   MESSAGE "Är du säker på att du vill generera om Kalkylkoder för " + hdschakttemp.BENAMNING + " (Schakt nr " + string(hdschakttemp.SID) + ")? ÅTGÄRDEN GÅR EJ ATT ÅNGRA!" SKIP
   "Bara koder från grundupplägget kommer att finnas kvar!"    
   VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE svar.
   EMPTY TEMP-TABLE hdkalktempbort NO-ERROR.
   IF svar THEN DO:
      RUN btngenkalkstart_UI.      
      APPLY "CHOOSE" TO BTN_SNABB.
      APPLY "CHOOSE" TO BTN_KALK.       
      RUN openbdynspec_UI IN brwproch.
      RUN lastselectdyn_UI IN brwproch.
      RUN vcbrwval_UI.   
   END.
END PROCEDURE.
PROCEDURE btngenkalkstart_UI:
   FOR EACH hdkalktemp WHERE hdkalktemp.SID = hdschakttemp.SID :
      CREATE hdkalktempbort.
      BUFFER-COPY hdkalktemp TO hdkalktempbort.
      DELETE hdkalktemp.         
   END.   
/* berkalk*/
END PROCEDURE.

PROCEDURE bortkalk_UI : /*ccc*/
   DEFINE VARIABLE antal_valda AS INTEGER NO-UNDO.
   DEFINE VARIABLE antal_raknare AS INTEGER NO-UNDO.
   DEFINE VARIABLE svar AS LOGICAL NO-UNDO.
   ASSIGN
   antal_valda = dynbrwh:NUM-SELECTED-ROWS
   antal_raknare = 1.
   DO WHILE antal_raknare LE antal_valda:
      RUN fetrowid_UI IN brwproch (INPUT antal_raknare,OUTPUT brwrowid).
      FIND FIRST hdkalktemp WHERE ROWID(hdkalktemp) = brwrowid NO-LOCK NO-ERROR.
      MESSAGE "Vill du ta bort kod - " + hdkalktemp.ARBKOD + " " + STRING(hdkalktemp.LOPNR,Guru.Konstanter:varforetypchar[6]) + " " + hdkalktemp.BENAMNING 
      VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE svar.               
      IF svar THEN DO:
         CREATE hdkalktempbort.
         BUFFER-COPY hdkalktemp TO hdkalktempbort.
         DELETE hdkalktemp.         
      END.                           
      IF antal_raknare = antal_valda THEN DO:
         RUN selnextprevrow_UI IN brwproch.
      END.
      antal_raknare = antal_raknare + 1.   
   END.  
   RUN openbdynspec_UI IN brwproch.
   RUN lastselectdyn_UI IN brwproch.         
END PROCEDURE.

PROCEDURE entryhdbenh_UI :
END PROCEDURE.
PROCEDURE leavebenh_UI :
   IF AVAILABLE hdschakttemp THEN DO:
      IF hdbenh:SCREEN-VALUE NE hdschakttemp.BENAMNING THEN DO:
         ASSIGN
         hdschakttemp.BENAMNING = hdbenh:SCREEN-VALUE
         hdschakttemp.ANDRA = TRUE.
         FIND FIRST skrivhdschakttemp WHERE skrivhdschakttemp.SID = hdschakttemp.SID NO-LOCK NO-ERROR.
         IF AVAILABLE skrivhdschakttemp THEN DO:
            BUFFER-COPY hdschakttemp TO skrivhdschakttemp.
            RUN openbdynspec_UI IN brwproc[2].
         END.      
      END.
   END.      
END PROCEDURE.      
PROCEDURE vcbrwvaltrigg_UI :
   RUN vcbrwval_UI.     
END PROCEDURE.            
      
PROCEDURE vcbrwval_UI : 
   BRW_VAL:SELECT-FOCUSED-ROW() NO-ERROR.
   RUN selectrowid_UI IN brwproc[1] (OUTPUT brwvalrowid).
   FIND FIRST hdschakttemp WHERE ROWID(hdschakttemp) = brwvalrowid NO-LOCK NO-ERROR.
   valschakt = hdschakttemp.SID.
   RUN mknapp_UI (INPUT INTEGER(RADVAL:SCREEN-VALUE)).   
   RUN openbrw_UI.   
END PROCEDURE.
              
PROCEDURE openbrw_UI :
   IF vilkenbrw = 1 OR vilkenbrw = 2 OR vilkenbrw = 3 THEN RUN setcolindex_UI IN brwproch ("SID BY KLID"). 
   ELSE IF vilkenbrw = 4 THEN RUN setcolindex_UI IN brwproch ("SID BY KLID BY ARBKOD BY LOPNR"). 
   ELSE RUN setcolindex_UI IN brwproch ("").
   IF vilkenbrw NE 6 THEN DO: 
      IF AVAILABLE hdschakttemp THEN RUN setcolsortvar_UI IN brwproch (INPUT "SID = " + STRING(hdschakttemp.SID)).
   END.
   RUN openbdynspec_UI IN brwproch.
END PROCEDURE.

PROCEDURE btnskriv_UI :
   {KOLLVOLYMSTART.I}
   FIND FIRST skrivhdschakttemp WHERE NO-LOCK NO-ERROR.
   IF NOT AVAILABLE skrivhdschakttemp THEN DO:
      MESSAGE "Inget schakt är valt för utskrift!"
      VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.   
   RUN SKRIVVAL.W (INPUT TRUE).       
   IF musz = TRUE THEN DO:
      musz = FALSE. 
      RETURN NO-APPLY.
   END.
   RUN musw IN huvprogh.   
   FOR EACH hdschakttemp NO-LOCK:   
      FIND FIRST hdkalktemp WHERE hdkalktemp.SID = hdschakttemp.SID NO-LOCK NO-ERROR.
      IF NOT AVAILABLE hdkalktemp THEN DO:
         RUN kalktolk_UI IN schapph (INPUT INTEGER(valaonr),INPUT valomrade,INPUT hdschakttemp.SID,OUTPUT TABLE hdkalktemp APPEND).
      END.
   END. 
   RUN visaexel_UI (FALSE).
   RUN excel_UI (INPUT TRUE).
   RUN musa IN huvprogh.             
   
END PROCEDURE.
PROCEDURE KollVolymStart_UI :
   DEFINE OUTPUT PARAMETER vstart AS LOGICAL NO-UNDO.
   IF VALID-HANDLE(VolymClassStart) THEN RUN KollVolymStart_UI IN VolymClassStart (OUTPUT vstart).
   IF vstart = TRUE THEN RETURN.
   RUN AvsVolber_UI.  
END PROCEDURE.

PROCEDURE AvsVolber_UI :
   IF VALID-HANDLE(Guru.GlobalaVariabler:ttBuffHandleVallistaDyn) THEN DO:
      Guru.GlobalaVariabler:ttBuffHandleVallistaDyn:EMPTY-TEMP-TABLE ().
      DELETE OBJECT Guru.GlobalaVariabler:ttBuffHandleVallistaDyn NO-ERROR.
      Guru.GlobalaVariabler:ttBuffHandleVallistaDyn = ?.
   END.
END PROCEDURE.

/*volym med spara*/
PROCEDURE volberDS_UI :
   RUN mknapp_UI (1).  
   RUN AvsVolber_UI. 
    
   RUN LangdTillVolym_UI.
   
   RUN btnvit_UI (INPUT BTN_RAKNA).
   IF NOT VALID-HANDLE(VolymClassStart) THEN RUN Modules\Kalkyl\VolymClasserStart.p PERSISTENT SET VolymClassStart.
   ASSIGN 
   Guru.GlobalaVariabler:BeredningsNummer = INTEGER(valaonr) 
   Guru.GlobalaVariabler:BeredningsOmrade = valomrade
   Guru.GlobalaVariabler:SchaktSid = hdschakttemp.SID. 
   RUN fbtnsnabb_UI. 
   RUN GrunVolymSkap_UI IN schapph (INPUT INTEGER(valaonr),INPUT valomrade, INPUT hdschakttemp.SID).   
   RUN VolymstartDS_UI IN VolymClassStart.
   
   
END PROCEDURE.

PROCEDURE btnskrivm_UI :
   RUN SIDLANGD.W.
END PROCEDURE.
PROCEDURE btnvit_UI :
   DEFINE INPUT PARAMETER btnh AS HANDLE NO-UNDO.
   DEFINE VARIABLE btnlabel AS CHARACTER NO-UNDO.
   IF btnnovit NE ? THEN DO:
      btnlabel = btnnovit:IMAGE.
      btnlabel = REPLACE(btnlabel,"_vit.gif",".gif"). 
      btnnovit:LOAD-IMAGE (btnlabel) NO-ERROR.
   END.
   btnlabel = btnh:IMAGE.
   btnlabel = REPLACE(btnlabel,".gif","_vit.gif"). 
   btnh:LOAD-IMAGE (btnlabel) NO-ERROR.
   btnnovit = btnh.   
END PROCEDURE.
PROCEDURE mknapp_UI :
   DEFINE INPUT  PARAMETER vad AS INTEGER NO-UNDO.
   
   {KOLLVOLYMSTART.I}
   RADVAL:SCREEN-VALUE = STRING(vad).
   IF vad = 1 THEN RUN btnvit_UI (INPUT BTN_SCH).
   IF vad = 2 THEN RUN btnvit_UI (INPUT BTN_HAND).
   IF vad = 3 THEN RUN btnvit_UI (INPUT BTN_KORD).
   IF vad = 4 THEN RUN btnvit_UI (INPUT BTN_KALK).
   IF vad = 6 THEN RUN btnvit_UI (INPUT BTN_PROFIL).
   RUN vcradval_UI.
   IF vad NE vilkenbrw THEN DO:
      vad = vilkenbrw.
      IF vad = 1 THEN RUN btnvit_UI (INPUT BTN_SCH).
      IF vad = 2 THEN RUN btnvit_UI (INPUT BTN_HAND).
      IF vad = 3 THEN RUN btnvit_UI (INPUT BTN_KORD).
      IF vad = 4 THEN RUN btnvit_UI (INPUT BTN_KALK).
      IF vad = 6 THEN RUN btnvit_UI (INPUT BTN_PROFIL).
   END.   
END PROCEDURE.
PROCEDURE vcradval_UI :
   DEFINE VARIABLE varsid AS INTEGER NO-UNDO.
   DEFINE VARIABLE movetotopp AS LOGICAL NO-UNDO.      
   IF INTEGER(RADVAL:SCREEN-VALUE) = 1 THEN DO:
      FIND FIRST hdschakprottemp WHERE hdschakprottemp.SID = hdschakttemp.SID NO-LOCK NO-ERROR.
      IF NOT AVAILABLE hdschakprottemp THEN DO:
         RUN mannystreck_UI.                  
      END.
   END.   
   IF INTEGER(RADVAL:SCREEN-VALUE) = 2 THEN DO:
      FIND FIRST hdschakprothandtemp  WHERE hdschakprothandtemp.SID = hdschakttemp.SID NO-LOCK NO-ERROR.
      IF NOT AVAILABLE hdschakprothandtemp THEN DO:
         MESSAGE "Inga händelser att visa för schakt "  hdschakttemp.BENAMNING "!" VIEW-AS ALERT-BOX.
         RADVAL:SCREEN-VALUE = STRING(vilkenbrw).
         RETURN.
      END.
   END.
   IF INTEGER(RADVAL:SCREEN-VALUE) = 3 THEN DO:
      FIND FIRST schkordstartsluttemp WHERE schkordstartsluttemp.SID = hdschakttemp.SID NO-LOCK NO-ERROR.
      IF NOT AVAILABLE schkordstartsluttemp THEN DO:
         MESSAGE "Inga koordinater att visa för schakt "   hdschakttemp.BENAMNING "!" VIEW-AS ALERT-BOX.
         RADVAL:SCREEN-VALUE = STRING(vilkenbrw).
         RETURN.
      END.
   END.   
   IF INTEGER(RADVAL:SCREEN-VALUE) = 4 THEN DO:    
      IF AVAILABLE hdschakttemp THEN DO:
         FIND FIRST hdkalktemp  WHERE hdkalktemp.SID = hdschakttemp.SID NO-LOCK NO-ERROR.
         varsid = hdschakttemp.SID.
         IF NOT AVAILABLE hdkalktemp THEN DO:                        
            RUN fbtnsnabbsid_UI (INPUT hdschakttemp.SID).
            FIND FIRST hdschakttemp WHERE hdschakttemp.SID = varsid NO-LOCK NO-ERROR. 
            IF NOT VALID-HANDLE(KalkClasserStart) THEN DO:
               RUN Modules\Kalkyl\KalkClasserStart.P PERSISTENT SET KalkClasserStart.
                Guru.GlobalaVariabler:plusaonr = Guru.GlobalaVariabler:plusaonr. 
               Guru.GlobalaVariabler:plusdnr = Guru.GlobalaVariabler:plusdnr.  
            END.
            IF Guru.GlobalaVariabler:NyBerKalkyl = FALSE THEN DO:
               RUN NyBerKalkyl_UI IN KalkClasserStart (INPUT INTEGER(valaonr), INPUT valomrade).
            END.
            RUN kalktolk_UI IN schapph (INPUT INTEGER(valaonr),INPUT valomrade, INPUT hdschakttemp.SID,OUTPUT TABLE hdkalktemp APPEND).                                   
            FIND FIRST hdkalktemp  WHERE hdkalktemp.SID = hdschakttemp.SID NO-LOCK NO-ERROR.
         END.
         ELSE DO:
            IF NOT VALID-HANDLE(KalkClasserStart) THEN DO:
               RUN Modules\Kalkyl\KalkClasserStart.P PERSISTENT SET KalkClasserStart.
                Guru.GlobalaVariabler:plusaonr = Guru.GlobalaVariabler:plusaonr. 
               Guru.GlobalaVariabler:plusdnr = Guru.GlobalaVariabler:plusdnr.  
            END.
         END.   
         
      END.   
   END.
   IF INTEGER(RADVAL:SCREEN-VALUE) = 6 THEN DO: 
   END.   
   vilkenbrw = INTEGER(RADVAL:SCREEN-VALUE).
   RUN musw IN huvprogh.
   ASSIGN
   FRAME-KALK:HIDDEN = TRUE
   FRAME-KOORD:HIDDEN = TRUE
   FRAME-HAND:HIDDEN = TRUE
   FRAME-SCHAKT:HIDDEN = TRUE
   FRAME-PROFIL:HIDDEN = TRUE
   BTN_MANSTRACK:HIDDEN = TRUE
   BTN_IMPSTRACK:HIDDEN = TRUE
   BTN_MANSTRBORT:HIDDEN = TRUE
   BTN_MANRUBRIK:HIDDEN = TRUE 
   BTN_BORTRUBRIK:HIDDEN = TRUE
   BTN_VISAMARK:HIDDEN = TRUE.
   CMB_RUBRIK:HIDDEN = TRUE.
   IF vilkenbrw = 1 THEN DO:
      BTN_MANSTRACK:HIDDEN = FALSE.
      BTN_IMPSTRACK:HIDDEN = FALSE.
      BTN_MANSTRBORT:HIDDEN = FALSE.
      BTN_MANRUBRIK:HIDDEN = FALSE.
      BTN_BORTRUBRIK:HIDDEN = FALSE.
      CMB_RUBRIK:HIDDEN = FALSE.
      BTN_VISAMARK:HIDDEN = FALSE.
      RUN newbrw_UI.
      FRAME-SCHAKT:HIDDEN = FALSE.
   END.
   ELSE IF vilkenbrw = 2 THEN DO:     
      RUN newbrw_UI.               
      ASSIGN
      FRAME-HAND:HIDDEN = FALSE.
   END.
   ELSE IF vilkenbrw = 3 THEN DO:     
      RUN newbrw_UI.               
      ASSIGN
      FRAME-KOORD:HIDDEN = FALSE.
   END.
   ELSE IF vilkenbrw = 4 THEN DO:     
      RUN newbrw_UI.               
      ASSIGN
      FRAME-KALK:HIDDEN = FALSE.
   END.
   ELSE IF vilkenbrw = 6 THEN DO: 
      RUN newbrw_UI.               
      ASSIGN
      FRAME-PROFIL:HIDDEN = FALSE.
      RUN PlaceraKnapp_UI.
      FRAME-KALK:HIDDEN = TRUE.
      Dynbrwh:HEIGHT-CHARS = (FRAME-PROFIL:HEIGHT - 0.2) - (FILL-IN-DJM:ROW + FILL-IN-DJM:HEIGHT + 0.2).
      dynbrwh:ROW = FILL-IN-DJM:ROW + FILL-IN-DJM:HEIGHT + 0.2. 
      
   END.
   
   RUN musa IN huvprogh.
END PROCEDURE.

PROCEDURE btnexcel_UI :
   {KOLLVOLYMSTART.I}
   FIND FIRST skrivhdschakttemp WHERE NO-LOCK NO-ERROR.
   IF NOT AVAILABLE skrivhdschakttemp THEN DO:
      MESSAGE "Inget schakt är valt!"
      VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.   
   IF brwantal(2) = FALSE THEN RETURN.
   DEFINE VARIABLE antalcolums AS INTEGER NO-UNDO.
   antalcolums = dynbrwh:NUM-COLUMNS.
   IF vilkenbrw = 1 THEN DO:
      IF antalcolums + 9 > 100 THEN DO:                   
         MESSAGE "Du kan max visa 91 kolumner i Excel" VIEW-AS ALERT-BOX.
         RETURN NO-APPLY.
      END.  
   END.
   RUN musw IN huvprogh.
   
   RUN fbtnsnabb_UI.
   BRW_VAL:SELECT-FOCUSED-ROW() NO-ERROR.
   RUN selectrowid_UI IN brwproc[1] (OUTPUT brwvalrowid).
   FIND FIRST hdschakttemp WHERE ROWID(hdschakttemp) = brwvalrowid NO-LOCK NO-ERROR.
   IF vilkenbrw NE 1 THEN  RUN mknapp_UI IN THIS-PROCEDURE (INPUT 1).
   
   FOR EACH hdschakttemp NO-LOCK:   
      FIND FIRST hdkalktemp WHERE hdkalktemp.SID = hdschakttemp.SID NO-LOCK NO-ERROR.
      IF NOT AVAILABLE hdkalktemp THEN DO:
         RUN kalktolk_UI IN schapph (INPUT INTEGER(valaonr),INPUT valomrade,INPUT hdschakttemp.SID,OUTPUT TABLE hdkalktemp APPEND).
      END.
   END.   
   RUN visaexel_UI (TRUE).
   RUN excel_UI (INPUT FALSE).
   RUN musa IN huvprogh.             
END PROCEDURE.

PROCEDURE btnvisa_UI :
   EMPTY TEMP-TABLE markexschaktprotemp NO-ERROR. 
   EMPTY TEMP-TABLE ehdkalktemp NO-ERROR.
   FIND FIRST skrivhdschakttemp WHERE NO-LOCK NO-ERROR.
   {KOLLVOLYMSTART.I}
   IF NOT AVAILABLE skrivhdschakttemp THEN DO:
      MESSAGE "Inget schakt är valt!"
      VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.   
   IF brwantal(2) = FALSE THEN RETURN.
   DEFINE VARIABLE antalcolums AS INTEGER NO-UNDO.
   antalcolums = dynbrwh:NUM-COLUMNS.
   IF vilkenbrw = 1 THEN DO:
      IF antalcolums + 9 > 100 THEN DO:                   
         MESSAGE "Du kan max visa 91 kolumner i Excel" VIEW-AS ALERT-BOX.
         RETURN NO-APPLY.
      END.  
   END.
   RUN musw IN huvprogh.   
   RUN fbtnsnabb_UI.
   BRW_VAL:SELECT-FOCUSED-ROW() NO-ERROR.
   RUN selectrowid_UI IN brwproc[1] (OUTPUT brwvalrowid).
   FIND FIRST hdschakttemp WHERE ROWID(hdschakttemp) = brwvalrowid NO-LOCK NO-ERROR.
   IF vilkenbrw NE 1 THEN  RUN mknapp_UI IN THIS-PROCEDURE (INPUT 1).
   FOR EACH skrivhdschakttemp WHERE NO-LOCK:
      FOR EACH hdschakprottemp WHERE hdschakprottemp.SID = skrivhdschakttemp.SID NO-LOCK:
         CREATE markexschaktprotemp.
         BUFFER-COPY hdschakprottemp TO markexschaktprotemp.
      END.
   END.
   
   RUN kalktolk_UI IN schapph (INPUT INTEGER(valaonr),INPUT valomrade,INPUT hdschakttemp.SID,OUTPUT TABLE ehdkalktemp).
   FOR EACH ehdkalktemp WHERE NO-LOCK:
      FIND FIRST markexschaktprotemp WHERE markexschaktprotemp.KLID = ehdkalktemp.MATRIS NO-LOCK NO-ERROR.
      IF NOT AVAILABLE markexschaktprotemp THEN DO:
         DELETE ehdkalktemp.
      END.
   END.   
   RUN visa_UI.
   EMPTY TEMP-TABLE markexschaktprotemp NO-ERROR. 
   EMPTY TEMP-TABLE ehdkalktemp NO-ERROR. 
   RUN musa IN huvprogh.
   RUN vcbrwvaltrigg_UI.      
END PROCEDURE.

PROCEDURE btnvisamark_UI :
   DEFINE VARIABLE antalcolums AS INTEGER NO-UNDO.
   DEFINE VARIABLE antal_raknare AS INTEGER NO-UNDO.
   DEFINE VARIABLE medinfvar AS CHARACTER NO-UNDO.
   {KOLLVOLYMSTART.I}
   antal_raknare = 1.
   EMPTY TEMP-TABLE markexschaktprotemp NO-ERROR. 
   EMPTY TEMP-TABLE ehdkalktemp NO-ERROR. 
   DO WHILE antal_raknare LE dynbrwh:NUM-SELECTED-ROWS TRANSACTION:
      status-ok = dynbrwh:FETCH-SELECTED-ROW(antal_raknare).
      CREATE markexschaktprotemp.
      BUFFER markexschaktprotemp:HANDLE:BUFFER-COPY(dynbuffh).
      antal_raknare = antal_raknare + 1.
   END.      
   FIND FIRST markexschaktprotemp WHERE NO-LOCK NO-ERROR.
   IF NOT AVAILABLE markexschaktprotemp THEN DO:
      medinfvar = "Ingen sträcka är vald!".      
      IF Guru.Konstanter:globforetag = "FORS" OR  Guru.Konstanter:globforetag = "krin" OR Guru.Konstanter:GForetag = "AKEAUTBI" THEN medinfvar = "Inget byggnr är valt!".
      MESSAGE medinfvar
      VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.  
   FIND FIRST skrivhdschakttemp WHERE skrivhdschakttemp.SID = markexschaktprotemp.SID  NO-LOCK NO-ERROR.
   IF NOT AVAILABLE skrivhdschakttemp THEN DO:
      MESSAGE "Schakt måste finnas i Valda Schakt!"
      VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.
   antalcolums = dynbrwh:NUM-COLUMNS.
   IF vilkenbrw = 1 THEN DO:
      IF antalcolums + 9 > 100 THEN DO:                   
         MESSAGE "Du kan max visa 91 kolumner i Excel" VIEW-AS ALERT-BOX.
         RETURN NO-APPLY.
      END.  
   END.
   RUN musw IN huvprogh.
   RUN fbtnsnabb_UI.
   FIND FIRST hdschakttemp WHERE hdschakttemp.SID = markexschaktprotemp.SID NO-LOCK NO-ERROR.  
   RUN kalktolk_UI IN schapph (INPUT INTEGER(valaonr),INPUT valomrade,INPUT hdschakttemp.SID,OUTPUT TABLE ehdkalktemp).
   FOR EACH ehdkalktemp WHERE NO-LOCK:
      FIND FIRST markexschaktprotemp WHERE markexschaktprotemp.KLID = ehdkalktemp.MATRIS NO-LOCK NO-ERROR.
      IF NOT AVAILABLE markexschaktprotemp THEN DO:
         DELETE ehdkalktemp.
      END.
   END.
   RUN visa_UI.
   EMPTY TEMP-TABLE markexschaktprotemp NO-ERROR. 
   EMPTY TEMP-TABLE ehdkalktemp NO-ERROR. 
   RUN musa IN huvprogh.         
END PROCEDURE.

PROCEDURE visa_UI :   
   DEFINE VARIABLE schaktvis   AS Modules.Beredning.Schaktvisning NO-UNDO.  
   DEFINE VARIABLE schaktProtDataSet    AS HANDLE     NO-UNDO.
   DEFINE VARIABLE antalDSTabeller    AS INTEGER     NO-UNDO.   
   RUN schaktsumallavis_UI.
   RUN dyndsSchaktvis_UI (OUTPUT schaktProtDataSet, OUTPUT antalDSTabeller).
   schaktvis = NEW Modules.Beredning.Schaktvisning().
   schaktvis:ConnectDataset(INPUT DATASET-HANDLE schaktProtDataSet BIND, INPUT antalDSTabeller).
   schaktvis:InitiateSchaktVis().
   WAIT-FOR schaktvis:ShowDialog().
   DELETE OBJECT schaktvis NO-ERROR.   
   /*    
    DEFINE VARIABLE SPARAXML AS CHARACTER NO-UNDO.
      SPARAXML = "C:\CTest.xml". 
      schaktProtDataSet:WRITE-XML("FILE", SPARAXML).
  
  
    IF NOT VALID-HANDLE(SchVisClasserStart) THEN DO:
      
      RUN Modules\Beredning\SchacktHelpStart.p PERSISTENT SET SchVisClasserStart.
       Guru.GlobalaVariabler:plusaonr = Guru.GlobalaVariabler:plusaonr. 
      Guru.GlobalaVariabler:plusdnr = Guru.GlobalaVariabler:plusdnr.  
   END.   
   RUN Start_UI IN SchVisClasserStart (INPUT schaktProtDataSet, INPUT antalDSTabeller).
   */
   RETURN.

END PROCEDURE.

PROCEDURE dyndsSchaktvis_UI :
   DEFINE VARIABLE hBuffer     AS HANDLE     NO-UNDO.
   DEFINE VARIABLE hTable      AS HANDLE     NO-UNDO.
   DEFINE VARIABLE bhTable      AS HANDLE     NO-UNDO.
   DEFINE VARIABLE qh              AS HANDLE NO-UNDO.   
   DEFINE OUTPUT PARAMETER schaktProtDataSet AS HANDLE NO-UNDO.
   DEFINE OUTPUT PARAMETER iCounter      AS INTEGER    NO-UNDO.  
   CREATE DATASET schaktProtDataSet.   
   /*TOP*/
   CREATE TEMP-TABLE hTable.
   iCounter = iCounter + 1.
   hTable:ADD-NEW-FIELD("NAMN","CHARACTER").
   hTable:ADD-NEW-FIELD("TOP","INTEGER").
   hTable:ADD-NEW-FIELD("TTRECID","RECID").
   hTable:ADD-NEW-FIELD("TYPSNITT","INTEGER").
   hTable:TEMP-TABLE-PREPARE("topvisa").
   bhTable = hTable:DEFAULT-BUFFER-HANDLE.
   hTable:DEFAULT-BUFFER-HANDLE:BUFFER-CREATE.
   bhTable:FIND-LAST().
   bhTable:BUFFER-FIELD("TOP"):BUFFER-VALUE = 1.
   bhTable:BUFFER-FIELD("NAMN"):BUFFER-VALUE = FILL-IN_AONR:SCREEN-VALUE.
   
   hTable:DEFAULT-BUFFER-HANDLE:BUFFER-CREATE.
   bhTable:FIND-LAST().
   bhTable:BUFFER-FIELD("TOP"):BUFFER-VALUE = 2.
   bhTable:BUFFER-FIELD("NAMN"):BUFFER-VALUE = "Kalkylkoder".
   hTable:DEFAULT-BUFFER-HANDLE:BUFFER-CREATE.
   bhTable:FIND-LAST().
   bhTable:BUFFER-FIELD("TOP"):BUFFER-VALUE = 4.
   bhTable:BUFFER-FIELD("NAMN"):BUFFER-VALUE = "Summering".   
   schaktProtDataSet:ADD-BUFFER(hTable:DEFAULT-BUFFER-HANDLE).
   /*hdschakttemp*/
   CREATE TEMP-TABLE hTable.
   iCounter = iCounter + 1.
   hTable:CREATE-LIKE(TEMP-TABLE hdschakttemp:HANDLE).
   hTable:ADD-NEW-FIELD("TTRECID","RECID").
   hTable:ADD-NEW-FIELD("TYPSNITT","INTEGER").
   hTable:ADD-NEW-FIELD("TOP","INTEGER").
   hTable:TEMP-TABLE-PREPARE("hdschakttempvisa").
   OPEN QUERY spq FOR EACH skrivhdschakttemp.
   GET FIRST spq.
   DO WHILE AVAILABLE(skrivhdschakttemp):
      FIND FIRST markexschaktprotemp WHERE markexschaktprotemp.SID = skrivhdschakttemp.SID NO-LOCK NO-ERROR.
      IF AVAILABLE markexschaktprotemp THEN DO:
         FIND FIRST hdschakttemp WHERE hdschakttemp.SID = skrivhdschakttemp.SID NO-LOCK NO-ERROR.
         hTable:DEFAULT-BUFFER-HANDLE:BUFFER-CREATE.
         hTable:DEFAULT-BUFFER-HANDLE:BUFFER-COPY(BUFFER hdschakttemp:HANDLE).
      END.      
      GET NEXT spq.
   END.
   bhTable = hTable:DEFAULT-BUFFER-HANDLE.
   CREATE QUERY qh.
   qh:SET-BUFFERS(bhTable).
   qh:QUERY-PREPARE("FOR EACH hdschakttempvisa").
   qh:QUERY-OPEN().
   qH:GET-FIRST().
   DO WHILE qH:QUERY-OFF-END = FALSE:
      bhTable:BUFFER-FIELD("TTRECID"):BUFFER-VALUE = bhTable:RECID.
      bhTable:BUFFER-FIELD("TOP"):BUFFER-VALUE = 1.
      qH:GET-NEXT().
   END.
   schaktProtDataSet:ADD-BUFFER(hTable:DEFAULT-BUFFER-HANDLE).
   schaktProtDataSet:ADD-RELATION(schaktProtDataSet:GET-BUFFER-HANDLE(1), schaktProtDataSet:GET-BUFFER-HANDLE(iCounter), "TOP,TOP").   
   /*hdschakprottempvisa*/
   GET FIRST spq.
   DO WHILE AVAILABLE(skrivhdschakttemp):
      FIND FIRST markexschaktprotemp WHERE markexschaktprotemp.SID = skrivhdschakttemp.SID NO-LOCK NO-ERROR.
      IF AVAILABLE markexschaktprotemp THEN DO:
         CREATE TEMP-TABLE hTable.
         iCounter = iCounter + 1.
         hTable:CREATE-LIKE(TEMP-TABLE hdschakprottemp:HANDLE).   
         hTable:ADD-NEW-FIELD("TTRECID","RECID").
         hTable:ADD-NEW-FIELD("TYPSNITT","INTEGER").
         hTable:TEMP-TABLE-PREPARE("hdschakprottempvisa" + STRING(iCounter - 1)).         
         FOR EACH markexschaktprotemp WHERE markexschaktprotemp.SID = skrivhdschakttemp.SID:
           hTable:DEFAULT-BUFFER-HANDLE:BUFFER-CREATE.
           hTable:DEFAULT-BUFFER-HANDLE:BUFFER-COPY(BUFFER markexschaktprotemp:HANDLE).   
         END.
         FOR EACH exschaktprotemp WHERE exschaktprotemp.SID = skrivhdschakttemp.SID NO-LOCK:
            hTable:DEFAULT-BUFFER-HANDLE:BUFFER-CREATE.
            hTable:DEFAULT-BUFFER-HANDLE:BUFFER-COPY(BUFFER exschaktprotemp:HANDLE).
         END.
         bhTable = hTable:DEFAULT-BUFFER-HANDLE.
         CREATE QUERY qh.
         qh:SET-BUFFERS(bhTable).
         qh:QUERY-PREPARE("FOR EACH hdschakprottempvisa" + STRING(iCounter - 1)).
         qh:QUERY-OPEN().
         qH:GET-FIRST().
         DO WHILE qH:QUERY-OFF-END = FALSE:
            bhTable:BUFFER-FIELD("TTRECID"):BUFFER-VALUE = bhTable:RECID.
            IF bhTable:BUFFER-FIELD("FRANTILL"):BUFFER-VALUE = "Totalt" THEN DO:
               bhTable:BUFFER-FIELD("TYPSNITT"):BUFFER-VALUE = 1.
            END.
            qH:GET-NEXT().
         END.
         schaktProtDataSet:ADD-BUFFER(hTable:DEFAULT-BUFFER-HANDLE).
         schaktProtDataSet:ADD-RELATION(schaktProtDataSet:GET-BUFFER-HANDLE(2), schaktProtDataSet:GET-BUFFER-HANDLE(iCounter), "SID,SID").
      END.
      GET NEXT spq.
   END.   
   /*hdprotkopbertemp*/
   CREATE TEMP-TABLE hTable.
   iCounter = iCounter + 1.
   hTable:CREATE-LIKE(TEMP-TABLE hdprotkopbertemp:HANDLE).
   hTable:ADD-NEW-FIELD("TOP","INTEGER").
   hTable:ADD-NEW-FIELD("TTRECID","RECID").
   hTable:ADD-NEW-FIELD("TYPSNITT","INTEGER").
   hTable:TEMP-TABLE-PREPARE("hdprotkopbertempvisa").
   GET FIRST spq.
   DO WHILE AVAILABLE(skrivhdschakttemp):
      FOR EACH hdprotkopbertemp WHERE hdprotkopbertemp.SID = skrivhdschakttemp.SID NO-LOCK:
         hTable:DEFAULT-BUFFER-HANDLE:BUFFER-CREATE.
         hTable:DEFAULT-BUFFER-HANDLE:BUFFER-COPY(BUFFER hdprotkopbertemp:HANDLE).
      END.
      GET NEXT spq.
   END.
   bhTable = hTable:DEFAULT-BUFFER-HANDLE.
   CREATE QUERY qh.
   qh:SET-BUFFERS(bhTable).
   qh:QUERY-PREPARE("FOR EACH hdprotkopbertempvisa").
   qh:QUERY-OPEN().
   qH:GET-FIRST().
   DO WHILE qH:QUERY-OFF-END = FALSE:
      bhTable:BUFFER-FIELD("TTRECID"):BUFFER-VALUE = bhTable:RECID.
      bhTable:BUFFER-FIELD("TOP"):BUFFER-VALUE = 1.
      qH:GET-NEXT().
   END.
   schaktProtDataSet:ADD-BUFFER(hTable:DEFAULT-BUFFER-HANDLE).
   schaktProtDataSet:ADD-RELATION(schaktProtDataSet:GET-BUFFER-HANDLE(1), schaktProtDataSet:GET-BUFFER-HANDLE(iCounter), "TOP,TOP").   
   /*hdschakprothandtemp*/
   CREATE TEMP-TABLE hTable.
   iCounter = iCounter + 1.
   hTable:CREATE-LIKE(TEMP-TABLE hdschakprothandtemp:HANDLE).
   hTable:ADD-NEW-FIELD("TTRECID","RECID").
   hTable:ADD-NEW-FIELD("TYPSNITT","INTEGER").
   hTable:TEMP-TABLE-PREPARE("hdschakprothandtempvisa").
   GET FIRST spq.
   DO WHILE AVAILABLE(skrivhdschakttemp):
      FOR EACH hdschakprothandtemp WHERE hdschakprothandtemp.SID = skrivhdschakttemp.SID NO-LOCK:
         hTable:DEFAULT-BUFFER-HANDLE:BUFFER-CREATE.
         hTable:DEFAULT-BUFFER-HANDLE:BUFFER-COPY(BUFFER hdschakprothandtemp:HANDLE).
      END.
      GET NEXT spq.
   END.
   bhTable = hTable:DEFAULT-BUFFER-HANDLE.
   CREATE QUERY qh.
   qh:SET-BUFFERS(bhTable).
   qh:QUERY-PREPARE("FOR EACH hdschakprothandtempvisa").
   qh:QUERY-OPEN().
   qH:GET-FIRST().
   DO WHILE qH:QUERY-OFF-END = FALSE:
      bhTable:BUFFER-FIELD("TTRECID"):BUFFER-VALUE = bhTable:RECID.
      qH:GET-NEXT().
   END.
   schaktProtDataSet:ADD-BUFFER(hTable:DEFAULT-BUFFER-HANDLE).
   schaktProtDataSet:ADD-RELATION(schaktProtDataSet:GET-BUFFER-HANDLE(2), schaktProtDataSet:GET-BUFFER-HANDLE(iCounter), "SID,SID").   
   /*hdkalktemp*/
   CREATE TEMP-TABLE hTable.
   iCounter = iCounter + 1.
   hTable:CREATE-LIKE(TEMP-TABLE Vhdkalktemp:HANDLE).
   hTable:ADD-NEW-FIELD("TOP","INTEGER").
   hTable:ADD-NEW-FIELD("TTRECID","RECID").
   hTable:ADD-NEW-FIELD("TYPSNITT","INTEGER").   
   hTable:TEMP-TABLE-PREPARE("hdkalktempvisa").   
   EMPTY TEMP-TABLE Vhdkalktemp NO-ERROR.     
   GET FIRST spq.
   DO WHILE AVAILABLE(skrivhdschakttemp):
      RUN kalktolk_UI IN schapph (INPUT INTEGER(valaonr),INPUT valomrade,INPUT skrivhdschakttemp.SID,OUTPUT TABLE Vhdkalktemp).
      FOR EACH Vhdkalktemp WHERE Vhdkalktemp.SID = skrivhdschakttemp.SID NO-LOCK:
         hTable:DEFAULT-BUFFER-HANDLE:FIND-FIRST("WHERE  ARBKOD = " + QUOTER(Vhdkalktemp.ARBKOD) + " AND LOPNR = " + STRING(Vhdkalktemp.LOPNR),NO-LOCK) NO-ERROR.
         IF hTable:DEFAULT-BUFFER-HANDLE:AVAILABLE THEN hTable:DEFAULT-BUFFER-HANDLE:BUFFER-FIELD("ANTAL"):BUFFER-VALUE = 
         hTable:DEFAULT-BUFFER-HANDLE:BUFFER-FIELD("ANTAL"):BUFFER-VALUE  + Vhdkalktemp.ANTAL.
         ELSE DO:
            hTable:DEFAULT-BUFFER-HANDLE:BUFFER-CREATE.
            hTable:DEFAULT-BUFFER-HANDLE:BUFFER-COPY(BUFFER Vhdkalktemp:HANDLE).
         END.
      END.
      GET NEXT spq.
   END.
   EMPTY TEMP-TABLE Vhdkalktemp NO-ERROR.
   bhTable = hTable:DEFAULT-BUFFER-HANDLE.
   CREATE QUERY qh.
   qh:SET-BUFFERS(bhTable).
   qh:QUERY-PREPARE("FOR EACH hdkalktempvisa").
   qh:QUERY-OPEN().
   qH:GET-FIRST().
   DO WHILE qH:QUERY-OFF-END = FALSE:
      bhTable:BUFFER-FIELD("TTRECID"):BUFFER-VALUE = bhTable:RECID.
      bhTable:BUFFER-FIELD("TOP"):BUFFER-VALUE = 2.
      qH:GET-NEXT().
   END.
   schaktProtDataSet:ADD-BUFFER(hTable:DEFAULT-BUFFER-HANDLE).
   schaktProtDataSet:ADD-RELATION(schaktProtDataSet:GET-BUFFER-HANDLE(1), schaktProtDataSet:GET-BUFFER-HANDLE(iCounter), "TOP,TOP").   
   /*schkordstartsluttemp*/
   CREATE TEMP-TABLE hTable.
   iCounter = iCounter + 1.
   hTable:CREATE-LIKE(TEMP-TABLE schkordstartsluttemp:HANDLE).
   hTable:ADD-NEW-FIELD("TOP","INTEGER").
   hTable:ADD-NEW-FIELD("TTRECID","RECID").
   hTable:ADD-NEW-FIELD("TYPSNITT","INTEGER").
   hTable:TEMP-TABLE-PREPARE("schkordstartsluttempvisa").
   GET FIRST spq.
   DO WHILE AVAILABLE(skrivhdschakttemp):
      FOR EACH schkordstartsluttemp WHERE schkordstartsluttemp.SID = skrivhdschakttemp.SID NO-LOCK:
         hTable:DEFAULT-BUFFER-HANDLE:BUFFER-CREATE.
         hTable:DEFAULT-BUFFER-HANDLE:BUFFER-COPY(BUFFER schkordstartsluttemp:HANDLE).
      END.
      GET NEXT spq.
   END.
   bhTable = hTable:DEFAULT-BUFFER-HANDLE.
   CREATE QUERY qh.
   qh:SET-BUFFERS(bhTable).
   qh:QUERY-PREPARE("FOR EACH schkordstartsluttempvisa").
   qh:QUERY-OPEN().
   qH:GET-FIRST().
   DO WHILE qH:QUERY-OFF-END = FALSE:
      bhTable:BUFFER-FIELD("TTRECID"):BUFFER-VALUE = bhTable:RECID.
      bhTable:BUFFER-FIELD("TOP"):BUFFER-VALUE = 3.
      qH:GET-NEXT().
   END.
   schaktProtDataSet:ADD-BUFFER(hTable:DEFAULT-BUFFER-HANDLE).
   schaktProtDataSet:ADD-RELATION(schaktProtDataSet:GET-BUFFER-HANDLE(1), schaktProtDataSet:GET-BUFFER-HANDLE(iCounter), "TOP,TOP").  
   /*SUMK*/
   CREATE TEMP-TABLE hTable.
   iCounter = iCounter + 1.
   hTable:CREATE-LIKE(TEMP-TABLE sumk:HANDLE).
   hTable:ADD-NEW-FIELD("TOP","INTEGER").
   hTable:ADD-NEW-FIELD("TTRECID","RECID").
   hTable:ADD-NEW-FIELD("TYPSNITT","INTEGER").
   hTable:TEMP-TABLE-PREPARE("sumkvisa").
   GET FIRST spq.
   DO WHILE AVAILABLE(skrivhdschakttemp):
      FOR EACH sumk WHERE sumk.SID = skrivhdschakttemp.SID NO-LOCK:
         hTable:DEFAULT-BUFFER-HANDLE:BUFFER-CREATE.
         hTable:DEFAULT-BUFFER-HANDLE:BUFFER-COPY(BUFFER sumk:HANDLE).
      END.
      GET NEXT spq.
   END.
   bhTable = hTable:DEFAULT-BUFFER-HANDLE.
   CREATE QUERY qh.
   qh:SET-BUFFERS(bhTable).
   qh:QUERY-PREPARE("FOR EACH sumkvisa").
   qh:QUERY-OPEN().
   qH:GET-FIRST().
   DO WHILE qH:QUERY-OFF-END = FALSE:
      bhTable:BUFFER-FIELD("TTRECID"):BUFFER-VALUE = bhTable:RECID.
      bhTable:BUFFER-FIELD("TOP"):BUFFER-VALUE = 4.
      qH:GET-NEXT().
   END.
   schaktProtDataSet:ADD-BUFFER(hTable:DEFAULT-BUFFER-HANDLE).
   schaktProtDataSet:ADD-RELATION(schaktProtDataSet:GET-BUFFER-HANDLE(1), schaktProtDataSet:GET-BUFFER-HANDLE(iCounter), "TOP,TOP").
   DELETE OBJECT hBuffer NO-ERROR.
   hBuffer = ?.
   DELETE OBJECT hTable NO-ERROR.
   hTable = ?.
   DELETE OBJECT bhTable NO-ERROR.
   bhTable = ?.
   DELETE OBJECT qH NO-ERROR.
   qH = ?.
END PROCEDURE.

PROCEDURE excel_UI :
   DEFINE INPUT PARAMETER saveas AS LOGICAL NO-UNDO.
   DEFINE VARIABLE selectwh AS COM-HANDLE NO-UNDO.
   DEFINE VARIABLE knapphj AS INTEGER NO-UNDO.
   DEFINE VARIABLE tempcounter AS INTEGER NO-UNDO. 
   DEFINE VARIABLE excelmax AS INTEGER NO-UNDO.    
   RUN allac_UI.   
   IF saveas = TRUE THEN RUN startexcelval_UI (INPUT FALSE).
   ELSE RUN startexcelval_UI (INPUT TRUE).
   /*FOREBILDER*/
   {LOGGOR.I}
   linkhj = link.
   RUN musw IN huvprogh.
   RUN excelhead_UI (INPUT 1,FILL-IN_AONR:SCREEN-VALUE + " " + FILL-IN_DATUM:SCREEN-VALUE ).
   {EXCELFEL.I}
   RUN paperSize_UI (INPUT 8).  
   ASSIGN
   knapphj = INTEGER(RADVAL:SCREEN-VALUE)
   FRAME-KALK:HIDDEN = TRUE
   FRAME-KOORD:HIDDEN = TRUE
   FRAME-HAND:HIDDEN = TRUE
   FRAME-SCHAKT:HIDDEN = TRUE.
   RUN musw IN huvprogh.
   flschakt = FALSE.
   OPEN QUERY spq FOR EACH skrivhdschakttemp.
   GET FIRST spq.
   ASSIGN 
   bredd = 0
   vilkenbrw = 1.                
   IF AVAILABLE skrivhdschakttemp THEN DO:
      RUN gridlines_UI (INPUT TRUE).  
      {EXCELFEL.I}       
   END.
   DO WHILE AVAILABLE(skrivhdschakttemp):
      FIND FIRST hdschakprottemp WHERE hdschakprottemp.SID = skrivhdschakttemp.SID NO-LOCK NO-ERROR.
      IF AVAILABLE hdschakprottemp THEN DO:         
         IF flschakt = TRUE THEN DO:           
            iRad = 1.
            RUN nyttbladexcel_UI.
            IF AVAILABLE hdschakprottemp THEN RUN gridlines_UI (INPUT TRUE).
            RUN paperSize_UI (INPUT 8).            
         END.                                  
         FIND FIRST hdschakttemp WHERE hdschakttemp.SID = skrivhdschakttemp.SID NO-LOCK NO-ERROR.                  
         RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(hdschakttemp)).
         FRAME-SCHAKT:HIDDEN = TRUE.
         RUN lastselectdyn_UI IN brwproc[1].  
         dubbelradhj = TRUE.                     
         RUN exelalla_UI (INPUT saveas,INPUT tempcounter).
         dubbelradhj = FALSE. 
      END. 
      link = ?.
      RUN schaktsum_UI (INPUT skrivhdschakttemp.SID).
      RUN excelut_UI (INPUT excelrad,INPUT FALSE).
      RUN exelmellan_UI (INPUT 1).                        
      /* Flytta övrigtkolumnen till kol 2*/
      IF Guru.Konstanter:globforetag = "cGRAN" THEN DO: 
         /*RUN flyttacol_UI (INPUT 2, INPUT slutcol).*/
         
         IF vilkenbrw = 1 THEN DO:         
            /*sätt ram längst till höger pga flyttad övrigt för alla schakt*/
            cRange = allac[1] + STRING(strad) + ":" + allac[breddantal] + STRING(slrad).
                    
            chWorkSheet:Range(cRange):Borders(10):Weight = 2 NO-ERROR. /*Vertikalt höger om markering*/
         END.
      END. 
      IF Guru.Konstanter:globforetag = "GRAN" THEN DO:
         RUN delCol_UI (INPUT 1).
         cRange = allac[1] + STRING(5).
         chWorkSheet:Range(cRange):FONT:Bold = YES NO-ERROR.   
         chWorkSheet:Range(cRange):RowHeight = 20 NO-ERROR.
         chWorkSheet:Range(cRange):FONT:ColorIndex = 5 NO-ERROR.                   
         chWorkSheet:Range(cRange):VALUE = hdschakttemp.BENAMNING +  " Före" NO-ERROR.                                                                                     
                                            
         cRange = allac[1] + STRING(1) + ":" + allac[breddantal] + STRING(slrad + 3).         
         chWorkSheet:Range(cRange):Select.
         chExcelApplication:SELECTION():COPY().         
         
         cRange = allac[1] + STRING(slrad + 6) + ":" + allac[breddantal] + STRING(slrad + 6 + 3 + slrad ).         
         chWorkSheet:Range(cRange):Select.                      
         chWorkSheet:PASTE(). 
         
         cRange = allac[1] + STRING(slrad + 12) + ":" + allac[breddantal] + STRING(slrad + 12 ).
         chWorkSheet:Range(cRange):RowHeight = 160 NO-ERROR.
         chWorksheetRange:Orientation = 45 NO-ERROR.
         
         cRange = allac[2] + STRING(slrad + 13 ) + ":" + allac[breddantal] + STRING(slrad + 6 + 3 + slrad ).
         chWorkSheet:Range(cRange):VALUE = "" NO-ERROR.
         
         cRange = allac[1] + STRING(slrad + 10).
         chWorkSheet:Range(cRange):FONT:Bold = YES NO-ERROR.   
         chWorkSheet:Range(cRange):RowHeight = 20 NO-ERROR.
         chWorkSheet:Range(cRange):FONT:ColorIndex = 5 NO-ERROR.                   
         chWorkSheet:Range(cRange):VALUE = hdschakttemp.BENAMNING +  " Efter" NO-ERROR.
         
         cRange = allac[1] + STRING(slrad + 6).
         RUN sidbryt_UI.
         
      END.   
            
      flschakt = TRUE. 
      GET NEXT spq.
   END.
   selectwh = chWorkSheet.
   RUN exelmellan_UI (INPUT 2).
   GET FIRST spq.     
   REPEAT:
      FIND FIRST hdschakprothandtemp WHERE hdschakprothandtemp.SID = skrivhdschakttemp.SID NO-LOCK NO-ERROR.   
      IF AVAILABLE hdschakprothandtemp THEN DO:
         iRad = 1.
         RUN nyttbladexcel_UI.
         IF AVAILABLE hdschakprothandtemp THEN RUN gridlines_UI (INPUT TRUE).
         LEAVE.
      END.
      ELSE DO:
         GET NEXT spq.
         IF NOT AVAILABLE skrivhdschakttemp THEN DO:
            LEAVE.
         END.   
      END.
   END.      
   DO WHILE AVAILABLE(skrivhdschakttemp):
      FIND FIRST hdschakprothandtemp WHERE hdschakprothandtemp.SID = skrivhdschakttemp.SID NO-LOCK NO-ERROR.
      IF AVAILABLE hdschakprothandtemp THEN DO:
         FIND FIRST hdschakttemp WHERE hdschakttemp.SID = skrivhdschakttemp.SID NO-LOCK NO-ERROR.      
         RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(hdschakttemp)).
         FRAME-HAND:HIDDEN = TRUE.
         RUN lastselectdyn_UI IN brwproc[1]. 
         RUN exelalla_UI (INPUT saveas,INPUT tempcounter).
      END.  
      link = ?. 
      GET NEXT spq.
   END.   
   RUN exelmellan_UI (INPUT 3).
   GET FIRST spq.
   REPEAT:
      FIND FIRST schkordstartsluttemp WHERE schkordstartsluttemp.SID = skrivhdschakttemp.SID NO-LOCK NO-ERROR.   
      IF AVAILABLE schkordstartsluttemp THEN DO:
         iRad = 1.
         RUN nyttbladexcel_UI.
         IF AVAILABLE schkordstartsluttemp THEN RUN gridlines_UI (INPUT TRUE).
         LEAVE.
      END.
      ELSE DO:
         GET NEXT spq. 
         IF NOT AVAILABLE skrivhdschakttemp THEN DO:
            LEAVE.
         END.   
      END.
   END.      
   DO WHILE AVAILABLE(skrivhdschakttemp):
      FIND FIRST schkordstartsluttemp WHERE schkordstartsluttemp.SID = skrivhdschakttemp.SID NO-LOCK NO-ERROR.
      IF AVAILABLE schkordstartsluttemp THEN DO:
         FIND FIRST hdschakttemp WHERE hdschakttemp.SID = skrivhdschakttemp.SID NO-LOCK NO-ERROR.      
         RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(hdschakttemp)).
         FRAME-KOORD:HIDDEN = TRUE.
         RUN lastselectdyn_UI IN brwproc[1].
         RUN exelalla_UI (INPUT saveas,INPUT tempcounter).
      END. 
      link = ?.  
      GET NEXT spq.
   END. 
   RUN exelmellan_UI (INPUT 4).
   GET FIRST spq.
   REPEAT:
      FIND FIRST hdkalktemp WHERE hdkalktemp.SID = skrivhdschakttemp.SID NO-LOCK NO-ERROR.   
      IF AVAILABLE hdkalktemp THEN DO:
         iRad = 1.
         RUN nyttbladexcel_UI.         
         IF AVAILABLE hdkalktemp THEN RUN gridlines_UI (INPUT TRUE).
         LEAVE.
      END.
      ELSE DO:
         GET NEXT spq.
         IF NOT AVAILABLE skrivhdschakttemp THEN DO:
            LEAVE.
         END.   
      END.
   END.      
   DO WHILE AVAILABLE(skrivhdschakttemp):
      FIND FIRST hdkalktemp WHERE hdkalktemp.SID = skrivhdschakttemp.SID NO-LOCK NO-ERROR.
      IF AVAILABLE hdkalktemp THEN DO:
         FIND FIRST hdschakttemp WHERE hdschakttemp.SID = skrivhdschakttemp.SID NO-LOCK NO-ERROR.      
         RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(hdschakttemp)).
         FRAME-KALK:HIDDEN = TRUE.
         RUN lastselectdyn_UI IN brwproc[1]. 
         RUN exelalla_UI (INPUT saveas,INPUT tempcounter).
      END.   
      link = ?.
      GET NEXT spq.
   END. 
   RUN exelmellan_UI (INPUT 4).    
   iRad = 1.
   GET FIRST spq.     
   REPEAT:
      FIND FIRST hdschakprottemp NO-LOCK NO-ERROR.   
      IF AVAILABLE hdschakprottemp THEN DO:
         iRad = 1.
         RUN nyttbladexcel_UI.
         IF AVAILABLE hdschakprottemp THEN RUN gridlines_UI (INPUT TRUE).
         LEAVE.
      END.
      ELSE DO:
         GET NEXT spq.
         IF NOT AVAILABLE skrivhdschakttemp THEN DO:
            LEAVE.
         END.   
      END.
   END.
   link = ?.
   RUN excelhead_UI (INPUT 1,FILL-IN_AONR:SCREEN-VALUE + " " + FILL-IN_DATUM:SCREEN-VALUE ).
   ASSIGN
   bredd[1] = 25
   bredd[2] = 20
   bredd[3] = 20 
   link = linkhj
   estartnr = 0.
   RUN colbredd_UI.  
   raknare = 1.
   RUN kolumnexcel_UI. 
   RUN sidbrytbredd_UI (INPUT 2).
   RUN namnbladexcel_UI (INPUT "Summa alla schakt").         
   RUN musw IN huvprogh.
   ASSIGN   bredd = 0.
   IF link NE ? THEN DO:
      RUN imageexcel_UI (INPUT link,INPUT "A",INPUT 1).  
      irad = irad + 5.
   END.
   ELSE irad = irad + 2.    
   excelrad = iRad.  
   RUN schaktsumalla_UI.   
   RUN musa IN huvprogh.
   chWorkSheet = chExcelApplication:Sheets:ITEM(1) NO-ERROR.
   chWorkSheet:SELECT NO-ERROR.     
   RUN screenexcel_UI.
   IF saveas = TRUE THEN RUN slutmedprint_UI (INPUT 1).
   ELSE RUN slutexcel_UI.
   RADVAL:SCREEN-VALUE = STRING(knapphj).
   RUN mknapp_UI (INPUT INTEGER(RADVAL:SCREEN-VALUE)).     
   RETURN.

END PROCEDURE.

PROCEDURE exelmellan_UI :
   DEFINE INPUT  PARAMETER inbrw AS INTEGER NO-UNDO.
   RUN excelhead_UI (INPUT 1,FILL-IN_AONR:SCREEN-VALUE + " " + FILL-IN_DATUM:SCREEN-VALUE ).
   ASSIGN 
   link = linkhj
   estartnr = 0.
   RUN colbredd_UI.  
   raknare = 1.
   RUN kolumnexcel_UI. 
   RUN sidbrytbredd_UI (INPUT 2).
   IF dynbrwh:TITLE = "Schaktprotokoll" THEN DO:            
      RUN namnbladexcel_UI (INPUT "Schakt" + string(hdschakprottemp.SID) ).
   END.   
   ELSE RUN namnbladexcel_UI (INPUT dynbrwh:TITLE).         
   RUN musw IN huvprogh.
   ASSIGN 
   bredd = 0
   vilkenbrw = inbrw.
   RADVAL:SCREEN-VALUE = STRING(vilkenbrw).  
   
END PROCEDURE.

PROCEDURE maxrub_UI :
   DEFINE OUTPUT PARAMETER maxcol AS INTEGER NO-UNDO.
   DEFINE VARIABLE tempcol AS INTEGER NO-UNDO.
   maxcol = 0.
   FOR EACH hdschakttemp NO-LOCK:
      tempcol = 0.
      FOR EACH hdprotkopbertemp WHERE hdprotkopbertemp.SID = hdschakttemp.SID NO-LOCK:
         tempcol = tempcol + 1. 
      END.   
      IF tempcol > maxcol THEN maxcol = tempcol.
   END.
END PROCEDURE.

PROCEDURE exelalla_UI :
   DEFINE INPUT PARAMETER saveas AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER tempcounter AS INTEGER NO-UNDO.
   tempcolh = dynbrwh:GET-BROWSE-COLUMN(1).  
   labelvar = "".
   tempcounter = 0.
   slutbredd = 0.
   
   DO WHILE VALID-HANDLE(tempcolh):
      IF tempcolh:VISIBLE = FALSE THEN.
      ELSE DO:
         tempcounter = tempcounter + 1.               
         IF tempcolh:LABEL = "Övrigt" THEN DO:
            slutcol = tempcounter.
            slutbredd = 35.
            bredd[tempcounter] = 35.
         END.   
         ELSE IF tempcolh:LABEL = "Från - Till" THEN DO:         
            bredd[tempcounter] = 25.
         END.
         ELSE IF tempcolh:LABEL BEGINS  "SchaktProfil" THEN DO:         
            bredd[tempcounter] = 15.
         END.              
         ELSE DO:             
            bredd[tempcounter] = 4.                       
         END.
      END.   
      tempcolh = tempcolh:NEXT-COLUMN.         
   END.
   IF slutbredd < bredd[tempcounter] THEN slutbredd = bredd[tempcounter].
   breddantal = tempcounter.   
   /*FOREBILDER*/  
   
   IF link NE ? THEN DO:
      RUN imageexcel_UI (INPUT link,INPUT "A",INPUT 1).  
      /*irad = irad + 5.  för första bladet är i=0 och andra blad i=1  radförskjutning borttaget Lena 20211026*/
      irad =  5.
      
      IF vilkenbrw = 1 THEN DO:
         cRange = allac[1] + STRING(irad).
         chWorkSheet:Range(cRange):FONT:Bold = YES NO-ERROR.   
         chWorkSheet:Range(cRange):RowHeight = 20 NO-ERROR.
         chWorkSheet:Range(cRange):FONT:ColorIndex = 5 NO-ERROR.                   
         chWorkSheet:Range(cRange):VALUE = hdschakttemp.BENAMNING NO-ERROR.
         irad = irad + 2.
      END.   
   END.
   ELSE irad = irad + 2.
   
   strad = irad.
   tempcolh = dynbrwh:FIRST-COLUMN. 
   tempcounter = 0.
   labelvar = "".  
   cRange = allac[1] + STRING(irad) + ":" + allac[breddantal] + STRING(irad).   
   chWorkSheet:Range(cRange):FONT:Bold = YES NO-ERROR.
   /*chWorkSheet:Range(cRange):RowHeight = 15 NO-ERROR.*/
   chWorkSheet:Range(cRange):RowHeight = 20 NO-ERROR.
   chWorkSheet:Range(cRange):FONT:ColorIndex = 5 NO-ERROR.  
   DO WHILE VALID-HANDLE(tempcolh): 
      IF tempcolh:VISIBLE = FALSE THEN tempcolh = tempcolh:NEXT-COLUMN.
      ELSE DO:  
         tempcounter = tempcounter + 1. 
         IF tempcounter > maxantalcolexcel THEN LEAVE.
         cRange = allac[tempcounter] + STRING(irad).
         chWorkSheet:Range(cRange):VALUE = REPLACE(tempcolh:LABEL,"!"," ") NO-ERROR.
         tempcolh = tempcolh:NEXT-COLUMN.         
         IF dubbelradhj = TRUE THEN DO:
            chWorksheetRange = chWorkSheet:Range(cRange) NO-ERROR.                  
            chWorksheetRange:Orientation = 45 NO-ERROR.
         END.
      END.   
   END.
   
   RUN dubbelrad_UI.     
   RUN dubbelrad_UI.
   RUN dubbelrad_UI.
   tempcounter = irad.
   dynqueh:GET-FIRST(NO-LOCK).   
   REPEAT:
      IF dynqueh:QUERY-OFF-END THEN LEAVE. 
      brwrowid = dynbuffh:ROWID.
      tempcounter = tempcounter + 1. 
      irad = tempcounter.      
      RUN excelut_UI (INPUT tempcounter,INPUT TRUE).      
      dynqueh:GET-NEXT(NO-LOCK).
   END.  
   slrad = irad.    
   IF vilkenbrw = 1 THEN DO:         
      /*sätt ram för alla schakt*/
      cRange = allac[1] + STRING(strad) + ":" + allac[breddantal] + STRING(slrad).
      chWorkSheet:Range(cRange):Borders(1):Weight = 2 NO-ERROR. /*Vertikalt vänster om markering*/
      chWorkSheet:Range(cRange):Borders(3):Weight = 2 NO-ERROR. /*Horizontellt ovanför markering*/
      chWorkSheet:Range(cRange):Borders(7):Weight = 2 NO-ERROR. /*Vertikalt vänster om markering*/
      chWorkSheet:Range(cRange):Borders(8):Weight = 2 NO-ERROR. /*Horizontellt ovanför markering*/
      chWorkSheet:Range(cRange):Borders(9):Weight = 2 NO-ERROR. /*Horizontellt nedan markering*/
      chWorkSheet:Range(cRange):Borders(10):Weight = 2 NO-ERROR. /*Vertikalt höger om markering*/
   END.             

END PROCEDURE.

PROCEDURE excelut_UI :
   DEFINE INPUT PARAMETER radervar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER brwvar AS LOGICAL NO-UNDO.
   DEFINE VARIABLE tempbufh AS HANDLE NO-UNDO.
   DEFINE VARIABLE decichar AS CHARACTER NO-UNDO.
   DEFINE VARIABLE decideci AS DECIMAL NO-UNDO.
   DEFINE VARIABLE tempcounter AS INTEGER NO-UNDO.
   DEFINE VARIABLE exeluth AS HANDLE NO-UNDO.
   excelrad = radervar.
   exeluth = dynbuffh.
   RUN radhojd_UI (INPUT radervar,INPUT breddantal).   
   IF brwvar = FALSE THEN DO: 
      exeluth = TEMP-TABLE exschaktprotemp:DEFAULT-BUFFER-HANDLE.
      ASSIGN 
      radervar = excelrad + 3
      irad = excelrad + 3. 
      RUN radhojd_UI (INPUT radervar,INPUT breddantal).      
   END.  
   excelrad = radervar.    
   tempcolh = dynbrwh:GET-BROWSE-COLUMN(1).  
   tempcounter = 0.   
   DO WHILE VALID-HANDLE(tempcolh):      
      IF tempcounter > maxantalcolexcel THEN LEAVE.
      IF tempcolh:NAME = ? THEN.
      ELSE IF tempcolh:VISIBLE = FALSE THEN.
      ELSE DO:
         tempbufh = exeluth:BUFFER-FIELD(tempcolh:NAME).
         IF tempbufh:BUFFER-VALUE = ? THEN.
         ELSE DO:
            tempcounter = tempcounter + 1. 
            cRange = allac[tempcounter] + STRING(radervar).
            IF tempcolh:LABEL = "Övrigt" THEN DO:
               IF bredd[tempcounter] < LENGTH(tempbufh:BUFFER-VALUE) THEN bredd[tempcounter] = LENGTH(tempbufh:BUFFER-VALUE).
            END.
            IF STRING(tempbufh:BUFFER-VALUE) = "" THEN. 
            ELSE IF STRING(tempbufh:BUFFER-VALUE) = "0" THEN.            
            ELSE IF tempcolh:DATA-TYPE = "DECIMAL" AND vilkenbrw NE 4 AND ROUND(tempbufh:BUFFER-VALUE,0) = 0 THEN.
            ELSE IF tempcolh:DATA-TYPE = "INTEGER"   AND tempbufh:BUFFER-VALUE = 0 THEN.
            ELSE DO:
               IF tempcolh:DATA-TYPE = "DECIMAL" THEN DO:  
                  IF vilkenbrw = 1 THEN decichar = REPLACE(STRING(ROUND(tempbufh:BUFFER-VALUE,0)),".",",").               
                  ELSE IF vilkenbrw = 3 THEN DO:
                     chWorkSheet:Range(cRange):NumberFormat = "@".
                     decichar = REPLACE(STRING(ROUND(tempbufh:BUFFER-VALUE,9)),".",",").               
                  END.
                  ELSE IF vilkenbrw = 4 THEN DO:
                     chWorkSheet:Range(cRange):Value = DECIMAL(STRING(tempbufh:BUFFER-VALUE,">>>>>>9.999")) NO-ERROR.
                  END.
                  ELSE decichar = REPLACE(STRING(ROUND(tempbufh:BUFFER-VALUE,2)),".",",").               
                  IF vilkenbrw = 4 THEN.
                  ELSE chWorkSheet:Range(cRange):VALUE = decichar NO-ERROR.
               END.
               ELSE IF tempcolh:DATA-TYPE = "DATE" THEN DO:                                    
                  decichar = STRING(tempbufh:BUFFER-VALUE,"9999/99/99").               
                  chWorkSheet:Range(cRange):VALUE = decichar NO-ERROR.
               END.
               ELSE DO:
                  chWorkSheet:Range(cRange):NumberFormat = "@".
                  chWorkSheet:Range(cRange):VALUE = STRING(tempbufh:BUFFER-VALUE) NO-ERROR. 
               END.
               IF tempcolh:COLUMN-FGCOLOR = ? THEN.
               ELSE IF tempcolh:COLUMN-FGCOLOR = 0 THEN.
               ELSE DO:
                  RUN profexcelfarg_UI (INPUT tempcolh:COLUMN-FGCOLOR,OUTPUT bg). 
                  RUN bgcell3_UI (INPUT allac[tempcounter], INPUT bg).               
               END.    
            END.
         END.
      END.
      tempcolh = tempcolh:NEXT-COLUMN.         
   END.
END PROCEDURE.

PROCEDURE schaktsum_UI:
   DEFINE INPUT  PARAMETER schid AS INTEGER NO-UNDO.
   EMPTY TEMP-TABLE exschaktprotemp NO-ERROR. 
   FOR EACH hdschakprottemp WHERE hdschakprottemp.SID = schid NO-LOCK BREAK BY hdschakprottemp.SID :
      ACCUMULATE hdschakprottemp.DEC1 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC2 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC3 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC4 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC5 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC6 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC7 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC8 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC9 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC10 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC11 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC12 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC13 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC14 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC15 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC16 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC17 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC18 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC19 (TOTAL BY hdschakprottemp.SID).
      ACCUMULATE hdschakprottemp.DEC20 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC21 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC22 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC23 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC24 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC25 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC26 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC27 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC28 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC29 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC30 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC31 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC32 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC33 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC34 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC35 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC36 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC37 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC38 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC39 (TOTAL BY hdschakprottemp.SID).
      ACCUMULATE hdschakprottemp.DEC40 (TOTAL BY hdschakprottemp.SID). 
      IF LAST-OF(hdschakprottemp.SID) THEN DO:
         CREATE exschaktprotemp.      
         BUFFER-COPY hdschakprottemp TO exschaktprotemp.  
         ASSIGN
         exschaktprotemp.OVRIGT = ""    
         exschaktprotemp.FRANTILL = "Totalt schakt " + STRING(hdschakprottemp.SID).
         exschaktprotemp.DEC1 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC1 ). 
         exschaktprotemp.DEC2 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC2 ). 
         exschaktprotemp.DEC3 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC3 ). 
         exschaktprotemp.DEC4 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC4 ). 
         exschaktprotemp.DEC5 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC5 ). 
         exschaktprotemp.DEC6 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC6 ). 
         exschaktprotemp.DEC7 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC7 ). 
         exschaktprotemp.DEC8 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC8 ). 
         exschaktprotemp.DEC9 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC9 ). 
         exschaktprotemp.DEC10 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC10). 
         exschaktprotemp.DEC11 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC11). 
         exschaktprotemp.DEC12 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC12). 
         exschaktprotemp.DEC13 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC13). 
         exschaktprotemp.DEC14 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC14). 
         exschaktprotemp.DEC15 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC15). 
         exschaktprotemp.DEC16 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC16). 
         exschaktprotemp.DEC17 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC17). 
         exschaktprotemp.DEC18 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC18). 
         exschaktprotemp.DEC19 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC19).
         exschaktprotemp.DEC20 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC20). 
         exschaktprotemp.DEC21 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC21). 
         exschaktprotemp.DEC22 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC22). 
         exschaktprotemp.DEC23 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC23). 
         exschaktprotemp.DEC24 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC24). 
         exschaktprotemp.DEC25 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC25). 
         exschaktprotemp.DEC26 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC26). 
         exschaktprotemp.DEC27 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC27). 
         exschaktprotemp.DEC28 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC28). 
         exschaktprotemp.DEC29 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC29). 
         exschaktprotemp.DEC30 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC30). 
         exschaktprotemp.DEC31 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC31). 
         exschaktprotemp.DEC32 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC32). 
         exschaktprotemp.DEC33 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC33). 
         exschaktprotemp.DEC34 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC34). 
         exschaktprotemp.DEC35 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC35). 
         exschaktprotemp.DEC36 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC36). 
         exschaktprotemp.DEC37 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC37). 
         exschaktprotemp.DEC38 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC38). 
         exschaktprotemp.DEC39 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC39).
         exschaktprotemp.DEC40 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC40).
      END.     
   END.    
END PROCEDURE.
PROCEDURE schaktsumalla_UI :
   EMPTY TEMP-TABLE exschaktprotemp NO-ERROR.
   FOR EACH hdschakprottemp NO-LOCK BREAK BY hdschakprottemp.SID :
      ACCUMULATE hdschakprottemp.DEC1 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC2 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC3 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC4 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC5 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC6 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC7 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC8 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC9 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC10 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC11 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC12 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC13 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC14 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC15 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC16 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC17 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC18 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC19 (TOTAL BY hdschakprottemp.SID).
      ACCUMULATE hdschakprottemp.DEC20 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC21 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC22 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC23 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC24 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC25 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC26 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC27 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC28 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC29 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC30 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC31 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC32 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC33 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC34 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC35 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC36 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC37 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC38 (TOTAL BY hdschakprottemp.SID). 
      ACCUMULATE hdschakprottemp.DEC39 (TOTAL BY hdschakprottemp.SID).
      ACCUMULATE hdschakprottemp.DEC40 (TOTAL BY hdschakprottemp.SID). 
      IF LAST-OF(hdschakprottemp.SID) THEN DO:
         CREATE exschaktprotemp.      
         BUFFER-COPY hdschakprottemp TO exschaktprotemp.       
         exschaktprotemp.DEC1 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC1 ). 
         exschaktprotemp.DEC2 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC2 ). 
         exschaktprotemp.DEC3 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC3 ). 
         exschaktprotemp.DEC4 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC4 ). 
         exschaktprotemp.DEC5 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC5 ). 
         exschaktprotemp.DEC6 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC6 ). 
         exschaktprotemp.DEC7 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC7 ). 
         exschaktprotemp.DEC8 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC8 ). 
         exschaktprotemp.DEC9 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC9 ). 
         exschaktprotemp.DEC10 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC10). 
         exschaktprotemp.DEC11 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC11). 
         exschaktprotemp.DEC12 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC12). 
         exschaktprotemp.DEC13 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC13). 
         exschaktprotemp.DEC14 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC14). 
         exschaktprotemp.DEC15 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC15). 
         exschaktprotemp.DEC16 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC16). 
         exschaktprotemp.DEC17 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC17). 
         exschaktprotemp.DEC18 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC18). 
         exschaktprotemp.DEC19 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC19).
         exschaktprotemp.DEC20 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC20). 
         exschaktprotemp.DEC21 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC21). 
         exschaktprotemp.DEC22 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC22). 
         exschaktprotemp.DEC23 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC23). 
         exschaktprotemp.DEC24 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC24). 
         exschaktprotemp.DEC25 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC25).
         exschaktprotemp.DEC26 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC26). 
         exschaktprotemp.DEC27 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC27). 
         exschaktprotemp.DEC28 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC28). 
         exschaktprotemp.DEC29 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC29). 
         exschaktprotemp.DEC30 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC30). 
         exschaktprotemp.DEC31 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC31). 
         exschaktprotemp.DEC32 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC32). 
         exschaktprotemp.DEC33 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC33). 
         exschaktprotemp.DEC34 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC34). 
         exschaktprotemp.DEC35 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC35). 
         exschaktprotemp.DEC36 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC36). 
         exschaktprotemp.DEC37 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC37). 
         exschaktprotemp.DEC38 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC38). 
         exschaktprotemp.DEC39 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC39).
         exschaktprotemp.DEC40 = (ACCUM TOTAL BY hdschakprottemp.SID hdschakprottemp.DEC40).
      END.     
   END.
   EMPTY TEMP-TABLE sumk NO-ERROR. 
     
   FOR EACH exschaktprotemp:
      IF exschaktprotemp.DEC1 NE 0 THEN RUN hdkopp_UI (INPUT 1).
      IF exschaktprotemp.DEC2 NE 0 THEN RUN hdkopp_UI (INPUT 2).
      IF exschaktprotemp.DEC3 NE 0 THEN RUN hdkopp_UI (INPUT 3).
      IF exschaktprotemp.DEC4 NE 0 THEN RUN hdkopp_UI (INPUT 4).
      IF exschaktprotemp.DEC5 NE 0 THEN RUN hdkopp_UI (INPUT 5).
      IF exschaktprotemp.DEC6 NE 0 THEN RUN hdkopp_UI (INPUT 6).
      IF exschaktprotemp.DEC7 NE 0 THEN RUN hdkopp_UI (INPUT 7).
      IF exschaktprotemp.DEC8 NE 0 THEN RUN hdkopp_UI (INPUT 8).
      IF exschaktprotemp.DEC9 NE 0 THEN RUN hdkopp_UI (INPUT 9).
      IF exschaktprotemp.DEC10 NE 0 THEN RUN hdkopp_UI (INPUT 10). 
      IF exschaktprotemp.DEC11 NE 0 THEN RUN hdkopp_UI (INPUT 11). 
      IF exschaktprotemp.DEC12 NE 0 THEN RUN hdkopp_UI (INPUT 12). 
      IF exschaktprotemp.DEC13 NE 0 THEN RUN hdkopp_UI (INPUT 13). 
      IF exschaktprotemp.DEC14 NE 0 THEN RUN hdkopp_UI (INPUT 14). 
      IF exschaktprotemp.DEC15 NE 0 THEN RUN hdkopp_UI (INPUT 15). 
      IF exschaktprotemp.DEC16 NE 0 THEN RUN hdkopp_UI (INPUT 16). 
      IF exschaktprotemp.DEC17 NE 0 THEN RUN hdkopp_UI (INPUT 17). 
      IF exschaktprotemp.DEC18 NE 0 THEN RUN hdkopp_UI (INPUT 18). 
      IF exschaktprotemp.DEC19 NE 0 THEN RUN hdkopp_UI (INPUT 19). 
      IF exschaktprotemp.DEC20 NE 0 THEN RUN hdkopp_UI (INPUT 20). 
      IF exschaktprotemp.DEC21 NE 0 THEN RUN hdkopp_UI (INPUT 21). 
      IF exschaktprotemp.DEC22 NE 0 THEN RUN hdkopp_UI (INPUT 22). 
      IF exschaktprotemp.DEC23 NE 0 THEN RUN hdkopp_UI (INPUT 23). 
      IF exschaktprotemp.DEC24 NE 0 THEN RUN hdkopp_UI (INPUT 24). 
      IF exschaktprotemp.DEC25 NE 0 THEN RUN hdkopp_UI (INPUT 25). 
      IF exschaktprotemp.DEC26 NE 0 THEN RUN hdkopp_UI (INPUT 26). 
      IF exschaktprotemp.DEC27 NE 0 THEN RUN hdkopp_UI (INPUT 27). 
      IF exschaktprotemp.DEC28 NE 0 THEN RUN hdkopp_UI (INPUT 28). 
      IF exschaktprotemp.DEC29 NE 0 THEN RUN hdkopp_UI (INPUT 29). 
      IF exschaktprotemp.DEC30 NE 0 THEN RUN hdkopp_UI (INPUT 30). 
      IF exschaktprotemp.DEC31 NE 0 THEN RUN hdkopp_UI (INPUT 31). 
      IF exschaktprotemp.DEC32 NE 0 THEN RUN hdkopp_UI (INPUT 32). 
      IF exschaktprotemp.DEC33 NE 0 THEN RUN hdkopp_UI (INPUT 33). 
      IF exschaktprotemp.DEC34 NE 0 THEN RUN hdkopp_UI (INPUT 34). 
      IF exschaktprotemp.DEC35 NE 0 THEN RUN hdkopp_UI (INPUT 35). 
      IF exschaktprotemp.DEC36 NE 0 THEN RUN hdkopp_UI (INPUT 36). 
      IF exschaktprotemp.DEC37 NE 0 THEN RUN hdkopp_UI (INPUT 37). 
      IF exschaktprotemp.DEC38 NE 0 THEN RUN hdkopp_UI (INPUT 38). 
      IF exschaktprotemp.DEC39 NE 0 THEN RUN hdkopp_UI (INPUT 39). 
      IF exschaktprotemp.DEC40 NE 0 THEN RUN hdkopp_UI (INPUT 40).       
   END.
   excelrad = excelrad - 3.
   cRange = allac[2] + STRING(excelrad).
   chWorkSheet:Range(cRange):FONT:Bold = YES NO-ERROR.   
   chWorkSheet:Range(cRange):RowHeight = 20 NO-ERROR.
   chWorkSheet:Range(cRange):FONT:ColorIndex = 5 NO-ERROR.                   
   chWorkSheet:Range(cRange):VALUE = "Summa alla  schakt" NO-ERROR.
   excelrad = excelrad + 5.   
   FOR EACH sumk NO-LOCK:
      RUN radhojd_UI (INPUT excelrad,input breddantal).            
      cRange = allac[1] + STRING(excelrad).
      chWorkSheet:Range(cRange):VALUE = STRING(sumk.RUBRIK) NO-ERROR. 
      cRange = allac[2] + STRING(excelrad).
      decichar = REPLACE(STRING(ROUND(sumk.ANTAL,0)),".",",").               
      chWorkSheet:Range(cRange):VALUE = decichar NO-ERROR.
      excelrad = excelrad + 1.   
   END.
END PROCEDURE.
PROCEDURE schaktsumallavis_UI :
   EMPTY TEMP-TABLE exschaktprotemp NO-ERROR.
   FOR EACH markexschaktprotemp NO-LOCK BREAK BY markexschaktprotemp.SID :
      ACCUMULATE markexschaktprotemp.DEC1 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC2 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC3 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC4 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC5 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC6 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC7 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC8 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC9 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC10 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC11 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC12 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC13 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC14 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC15 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC16 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC17 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC18 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC19 (TOTAL BY markexschaktprotemp.SID).
      ACCUMULATE markexschaktprotemp.DEC20 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC21 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC22 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC23 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC24 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC25 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC26 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC27 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC28 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC29 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC30 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC31 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC32 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC33 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC34 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC35 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC36 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC37 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC38 (TOTAL BY markexschaktprotemp.SID). 
      ACCUMULATE markexschaktprotemp.DEC39 (TOTAL BY markexschaktprotemp.SID).
      ACCUMULATE markexschaktprotemp.DEC40 (TOTAL BY markexschaktprotemp.SID). 
      IF LAST-OF(markexschaktprotemp.SID) THEN DO:
         CREATE exschaktprotemp.      
         BUFFER-COPY markexschaktprotemp TO exschaktprotemp.      
         exschaktprotemp.OVRIGT = "".
         exschaktprotemp.FRANTILL = "Totalt".
         exschaktprotemp.DEC1 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC1 ). 
         exschaktprotemp.DEC2 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC2 ). 
         exschaktprotemp.DEC3 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC3 ). 
         exschaktprotemp.DEC4 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC4 ). 
         exschaktprotemp.DEC5 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC5 ). 
         exschaktprotemp.DEC6 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC6 ). 
         exschaktprotemp.DEC7 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC7 ). 
         exschaktprotemp.DEC8 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC8 ). 
         exschaktprotemp.DEC9 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC9 ). 
         exschaktprotemp.DEC10 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC10). 
         exschaktprotemp.DEC11 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC11). 
         exschaktprotemp.DEC12 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC12). 
         exschaktprotemp.DEC13 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC13). 
         exschaktprotemp.DEC14 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC14). 
         exschaktprotemp.DEC15 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC15). 
         exschaktprotemp.DEC16 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC16). 
         exschaktprotemp.DEC17 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC17). 
         exschaktprotemp.DEC18 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC18). 
         exschaktprotemp.DEC19 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC19).
         exschaktprotemp.DEC20 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC20). 
         exschaktprotemp.DEC21 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC21). 
         exschaktprotemp.DEC22 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC22). 
         exschaktprotemp.DEC23 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC23). 
         exschaktprotemp.DEC24 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC24). 
         exschaktprotemp.DEC25 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC25).
         exschaktprotemp.DEC26 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC26). 
         exschaktprotemp.DEC27 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC27). 
         exschaktprotemp.DEC28 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC28). 
         exschaktprotemp.DEC29 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC29). 
         exschaktprotemp.DEC30 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC30). 
         exschaktprotemp.DEC31 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC31). 
         exschaktprotemp.DEC32 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC32). 
         exschaktprotemp.DEC33 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC33). 
         exschaktprotemp.DEC34 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC34). 
         exschaktprotemp.DEC35 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC35). 
         exschaktprotemp.DEC36 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC36). 
         exschaktprotemp.DEC37 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC37). 
         exschaktprotemp.DEC38 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC38). 
         exschaktprotemp.DEC39 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC39).
         exschaktprotemp.DEC40 = (ACCUM TOTAL BY markexschaktprotemp.SID markexschaktprotemp.DEC40).
      END.     
   END.
   EMPTY TEMP-TABLE sumk NO-ERROR.      
   FOR EACH exschaktprotemp:
      IF exschaktprotemp.DEC1 NE 0 THEN RUN hdkopp_UI (INPUT 1).
      IF exschaktprotemp.DEC2 NE 0 THEN RUN hdkopp_UI (INPUT 2).
      IF exschaktprotemp.DEC3 NE 0 THEN RUN hdkopp_UI (INPUT 3).
      IF exschaktprotemp.DEC4 NE 0 THEN RUN hdkopp_UI (INPUT 4).
      IF exschaktprotemp.DEC5 NE 0 THEN RUN hdkopp_UI (INPUT 5).
      IF exschaktprotemp.DEC6 NE 0 THEN RUN hdkopp_UI (INPUT 6).
      IF exschaktprotemp.DEC7 NE 0 THEN RUN hdkopp_UI (INPUT 7).
      IF exschaktprotemp.DEC8 NE 0 THEN RUN hdkopp_UI (INPUT 8).
      IF exschaktprotemp.DEC9 NE 0 THEN RUN hdkopp_UI (INPUT 9).
      IF exschaktprotemp.DEC10 NE 0 THEN RUN hdkopp_UI (INPUT 10). 
      IF exschaktprotemp.DEC11 NE 0 THEN RUN hdkopp_UI (INPUT 11). 
      IF exschaktprotemp.DEC12 NE 0 THEN RUN hdkopp_UI (INPUT 12). 
      IF exschaktprotemp.DEC13 NE 0 THEN RUN hdkopp_UI (INPUT 13). 
      IF exschaktprotemp.DEC14 NE 0 THEN RUN hdkopp_UI (INPUT 14). 
      IF exschaktprotemp.DEC15 NE 0 THEN RUN hdkopp_UI (INPUT 15). 
      IF exschaktprotemp.DEC16 NE 0 THEN RUN hdkopp_UI (INPUT 16). 
      IF exschaktprotemp.DEC17 NE 0 THEN RUN hdkopp_UI (INPUT 17). 
      IF exschaktprotemp.DEC18 NE 0 THEN RUN hdkopp_UI (INPUT 18). 
      IF exschaktprotemp.DEC19 NE 0 THEN RUN hdkopp_UI (INPUT 19). 
      IF exschaktprotemp.DEC20 NE 0 THEN RUN hdkopp_UI (INPUT 20). 
      IF exschaktprotemp.DEC21 NE 0 THEN RUN hdkopp_UI (INPUT 21). 
      IF exschaktprotemp.DEC22 NE 0 THEN RUN hdkopp_UI (INPUT 22). 
      IF exschaktprotemp.DEC23 NE 0 THEN RUN hdkopp_UI (INPUT 23). 
      IF exschaktprotemp.DEC24 NE 0 THEN RUN hdkopp_UI (INPUT 24). 
      IF exschaktprotemp.DEC25 NE 0 THEN RUN hdkopp_UI (INPUT 25). 
      IF exschaktprotemp.DEC26 NE 0 THEN RUN hdkopp_UI (INPUT 26). 
      IF exschaktprotemp.DEC27 NE 0 THEN RUN hdkopp_UI (INPUT 27). 
      IF exschaktprotemp.DEC28 NE 0 THEN RUN hdkopp_UI (INPUT 28). 
      IF exschaktprotemp.DEC29 NE 0 THEN RUN hdkopp_UI (INPUT 29). 
      IF exschaktprotemp.DEC30 NE 0 THEN RUN hdkopp_UI (INPUT 30). 
      IF exschaktprotemp.DEC31 NE 0 THEN RUN hdkopp_UI (INPUT 31). 
      IF exschaktprotemp.DEC32 NE 0 THEN RUN hdkopp_UI (INPUT 32). 
      IF exschaktprotemp.DEC33 NE 0 THEN RUN hdkopp_UI (INPUT 33). 
      IF exschaktprotemp.DEC34 NE 0 THEN RUN hdkopp_UI (INPUT 34). 
      IF exschaktprotemp.DEC35 NE 0 THEN RUN hdkopp_UI (INPUT 35). 
      IF exschaktprotemp.DEC36 NE 0 THEN RUN hdkopp_UI (INPUT 36). 
      IF exschaktprotemp.DEC37 NE 0 THEN RUN hdkopp_UI (INPUT 37). 
      IF exschaktprotemp.DEC38 NE 0 THEN RUN hdkopp_UI (INPUT 38). 
      IF exschaktprotemp.DEC39 NE 0 THEN RUN hdkopp_UI (INPUT 39). 
      IF exschaktprotemp.DEC40 NE 0 THEN RUN hdkopp_UI (INPUT 40).       
   END.
END PROCEDURE.
PROCEDURE hdkopp_UI :
   DEFINE INPUT PARAMETER ovar AS INTEGER NO-UNDO.
   FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.ORDNING = ovar AND 
   hdprotkopbertemp.SID = exschaktprotemp.SID NO-LOCK NO-ERROR.
   IF AVAILABLE hdprotkopbertemp THEN DO:
      FIND FIRST sumk WHERE sumk.TYP = hdprotkopbertemp.TYP  AND
      sumk.ID = hdprotkopbertemp.ID
      NO-LOCK NO-ERROR.
      IF NOT AVAILABLE sumk THEN DO:
         CREATE sumk.
         ASSIGN
         sumk.RUBRIK = hdprotkopbertemp.RUBRIK
         sumk.TYP  = hdprotkopbertemp.TYP
         sumk.SID  = hdprotkopbertemp.SID
         sumk.ID   = hdprotkopbertemp.ID.
      END.
      sumk.ANTAL = sumk.ANTAL + antal(ovar).
   END.
END PROCEDURE.

PROCEDURE vbrw_UI :
   dynbrwh:SELECT-FOCUSED-ROW() NO-ERROR.
   brwrowid = dynbuffh:ROWID.   
   RUN setlastrowid_UI IN brwproch (INPUT brwrowid).
   IF vilkenbrw = 1 THEN DO:
      FIND FIRST hdschakprottemp WHERE ROWID(hdschakprottemp) = brwrowid NO-LOCK NO-ERROR.         
   END.
   ELSE IF vilkenbrw = 2 THEN DO: 
      FIND FIRST hdschakprothandtemp WHERE ROWID(hdschakprothandtemp) = brwrowid NO-LOCK NO-ERROR.      
   END.
   ELSE IF vilkenbrw = 3 THEN DO: 
      FIND FIRST schkordstartsluttemp WHERE ROWID(schkordstartsluttemp) = brwrowid NO-LOCK NO-ERROR.      
   END.
   ELSE IF vilkenbrw = 4 THEN DO: 
      FIND FIRST hdkalktemp WHERE ROWID(hdkalktemp) = brwrowid NO-LOCK NO-ERROR.      
   END.
END PROCEDURE.

PROCEDURE createbrw_UI :
   /*första gången*/  
   FIND LAST hdschakprottemp NO-LOCK NO-ERROR.
   RUN newbrw_UI.   
   IF dynbuffh = ? THEN RETURN. 
   dynbrwh:DESELECT-ROWS() NO-ERROR.   
END PROCEDURE.       

PROCEDURE brwegenskap_UI :
   /*Ge egenskaper till browser*/
   RUN musw IN huvprogh.   
   IF vilkenbrw = 1 THEN DO:
      ASSIGN 
      dynbrwh:NAME                     = "BRW_SCHAKT"
      dynbrwh:WIDTH                    = 124
      dynbrwh:HEIGHT                   = 10
      dynbrwh:COLUMN                   = 1.5
      dynbrwh:ROW                      = 2.4
      dynbrwh:READ-ONLY                = FALSE
      dynbrwh:FONT                     = 4
      dynbrwh:MULTIPLE                 = TRUE 
      dynbrwh:READ-ONLY                = FALSE
      dynbrwh:ROW-MARKERS              = TRUE
      dynbrwh:SEPARATORS               = TRUE
      dynbrwh:SENSITIVE                = TRUE
      dynbrwh:ALLOW-COLUMN-SEARCHING   = TRUE
      dynbrwh:EXPANDABLE               = FALSE
      dynbrwh:VISIBLE                  = TRUE
      dynbrwh:COLUMN-SCROLLING         = TRUE
      dynbrwh:COLUMN-RESIZABLE         = TRUE 
      dynbrwh:MAX-DATA-GUESS           = 100     
      dynbrwh:TITLE                    = "Schaktprotokoll".   
      ASSIGN
      dynbrwh:FRAME      = FRAME-SCHAKT
      dynbrwh:ROW                      = 1
      dynbrwh:WIDTH                    = dynbrwh:FRAME:WIDTH - 1.75
      dynbrwh:HEIGHT                   = dynbrwh:FRAME:HEIGHT - 0.1.
      dynbuffh = TEMP-TABLE hdschakprottemp:DEFAULT-BUFFER-HANDLE.
   END.
   ELSE IF vilkenbrw = 2 THEN DO: 
      ASSIGN 
      dynbrwh:NAME                     = "BRW_HANDT"
      dynbrwh:WIDTH                    = 124
      dynbrwh:HEIGHT                   = 10
      dynbrwh:COLUMN                   = 1.5
      dynbrwh:ROW                      = 2.4
      dynbrwh:FONT                     = 4
      dynbrwh:MULTIPLE                 = FALSE
      dynbrwh:READ-ONLY                = FALSE
      dynbrwh:ROW-MARKERS              = TRUE
      dynbrwh:SEPARATORS               = TRUE
      dynbrwh:SENSITIVE                = TRUE
      dynbrwh:ALLOW-COLUMN-SEARCHING   = TRUE
      dynbrwh:EXPANDABLE               = FALSE
      dynbrwh:VISIBLE                  = TRUE
      dynbrwh:COLUMN-SCROLLING         = TRUE
      dynbrwh:COLUMN-RESIZABLE         = FALSE
      dynbrwh:MAX-DATA-GUESS           = 100
      dynbrwh:TITLE                    = "Händelser".
      ASSIGN
      dynbrwh:FRAME = FRAME-HAND
      dynbrwh:ROW                      = 1
      dynbrwh:WIDTH                    = dynbrwh:FRAME:WIDTH - 1.75 
      dynbrwh:HEIGHT                   = dynbrwh:FRAME:HEIGHT - 0.1.
      dynbuffh = TEMP-TABLE hdschakprothandtemp:DEFAULT-BUFFER-HANDLE.
   END.
   ELSE IF vilkenbrw = 3 THEN DO: 
      ASSIGN 
      dynbrwh:NAME                     = "BRW_KOORD"
      dynbrwh:WIDTH                    = 124
      dynbrwh:HEIGHT                   = 10
      dynbrwh:COLUMN                   = 1.5
      dynbrwh:ROW                      = 2.4
      dynbrwh:FONT                     = 4
      dynbrwh:MULTIPLE                 = FALSE
      dynbrwh:READ-ONLY                = FALSE
      dynbrwh:ROW-MARKERS              = FALSE 
      dynbrwh:SEPARATORS               = TRUE
      dynbrwh:SENSITIVE                = TRUE
      dynbrwh:ALLOW-COLUMN-SEARCHING   = TRUE
      dynbrwh:EXPANDABLE               = FALSE
      dynbrwh:VISIBLE                  = TRUE
      dynbrwh:COLUMN-SCROLLING         = TRUE
      dynbrwh:COLUMN-RESIZABLE         = FALSE
      dynbrwh:MAX-DATA-GUESS           = 100
      dynbrwh:TITLE                    = "Koordinater".
      ASSIGN
      dynbrwh:FRAME = FRAME-KOORD
      dynbrwh:ROW                      = 1
      dynbrwh:WIDTH                    = dynbrwh:FRAME:WIDTH - 1.75 
      dynbrwh:HEIGHT                   = dynbrwh:FRAME:HEIGHT - 0.1.
      dynbuffh = TEMP-TABLE schkordstartsluttemp:DEFAULT-BUFFER-HANDLE.
   END.
   ELSE IF vilkenbrw = 4 THEN DO: 
      FRAME-KALK:WIDTH  = DEFAULT-FRAME:WIDTH - 0.5.
      ASSIGN 
      dynbrwh:NAME                     = "BRW_KALK"
      dynbrwh:WIDTH                    = 124
      dynbrwh:HEIGHT                   = 10
      dynbrwh:COLUMN                   = 1.5
      dynbrwh:ROW                      = 2.4
      dynbrwh:FONT                     = 4
      dynbrwh:MULTIPLE                 = TRUE
      dynbrwh:READ-ONLY                = FALSE
      dynbrwh:ROW-MARKERS              = TRUE
      dynbrwh:SEPARATORS               = TRUE
      dynbrwh:SENSITIVE                = TRUE
      dynbrwh:ALLOW-COLUMN-SEARCHING   = TRUE
      dynbrwh:EXPANDABLE               = FALSE
      dynbrwh:VISIBLE                  = TRUE
      dynbrwh:COLUMN-SCROLLING         = TRUE
      dynbrwh:COLUMN-RESIZABLE         = FALSE
      dynbrwh:MAX-DATA-GUESS           = 100
      dynbrwh:TITLE                    = "Kalkylkoder".
      ASSIGN
      dynbrwh:FRAME = FRAME-KALK
      dynbrwh:ROW                      = 1
      dynbrwh:WIDTH                    = dynbrwh:FRAME:WIDTH - 1.75 
      dynbrwh:HEIGHT                   = dynbrwh:FRAME:HEIGHT - 2.
      dynbuffh = TEMP-TABLE hdkalktemp:DEFAULT-BUFFER-HANDLE.
    
   END.
   ELSE IF vilkenbrw = 6 THEN DO: 
    
      ASSIGN 
      dynbrwh:NAME                     = "BRW_PROFIL"
      dynbrwh:WIDTH                    = FRAME-PROFIL:WIDTH - 3
      dynbrwh:HEIGHT                   = (FRAME-PROFIL:HEIGHT - 0.2) - FILL-IN-DJM:ROW + FILL-IN-DJM:HEIGHT + 0.2
      dynbrwh:COLUMN                   = 1.5
      dynbrwh:ROW                      = FILL-IN-DJM:ROW + FILL-IN-DJM:HEIGHT + 0.2 
      dynbrwh:FONT                     = 4
      dynbrwh:MULTIPLE                 = FALSE
      dynbrwh:READ-ONLY                = TRUE
      dynbrwh:ROW-MARKERS              = TRUE
      dynbrwh:SEPARATORS               = TRUE
      dynbrwh:SENSITIVE                = TRUE
      dynbrwh:ALLOW-COLUMN-SEARCHING   = TRUE
      dynbrwh:EXPANDABLE               = FALSE
      dynbrwh:VISIBLE                  = TRUE
      dynbrwh:COLUMN-SCROLLING         = TRUE
      dynbrwh:COLUMN-RESIZABLE         = FALSE
      dynbrwh:MAX-DATA-GUESS           = 100
      dynbrwh:TITLE                    = "Schaktprofiler".
      ASSIGN
      dynbrwh:FRAME = FRAME-PROFIL
      dynbrwh:ROW                      = 1
      dynbrwh:WIDTH                    = dynbrwh:FRAME:WIDTH - 1.75 
      dynbrwh:HEIGHT                   = dynbrwh:FRAME:HEIGHT - 2.
      dynbuffh = TEMP-TABLE schackprofiltt:DEFAULT-BUFFER-HANDLE.
    
   END.
   
   ON 'VALUE-CHANGED' OF dynbrwh PERSISTENT RUN vbrw_UI IN THIS-PROCEDURE.
   ON 'LEAVE':U OF dynbrwh PERSISTENT RUN leavebrw_UI IN THIS-PROCEDURE.
   ON 'ENTRY':U OF dynbrwh PERSISTENT RUN entrybrw_UI IN THIS-PROCEDURE.
   /*Skapa buffer för temptabell */
   IF dynbuffh = ? THEN DO:
      MESSAGE "Fel i programmet kontakta Elpool i Umeå AB 090/184540 Ange knapp nr " vilkenbrw 
      VIEW-AS ALERT-BOX.
   END.   
   IF dynbuffh NE ? THEN DO:
      CREATE QUERY dynqueh.
      dynqueh:SET-BUFFERS(dynbuffh).
      dynbuffh = dynqueh:GET-BUFFER-HANDLE. 
      openquery = "FOR EACH " + dynbuffh:TABLE + " NO-LOCK".
      dynqueh:QUERY-PREPARE(openquery).
      /*Sätt queryn*/
      dynbrwh:QUERY = dynqueh.
   END.      
END PROCEDURE.

PROCEDURE createfields_UI :
   DEFINE VARIABLE prolista AS CHARACTER NO-UNDO.
   DEFINE VARIABLE fillchar AS CHARACTER NO-UNDO FORMAT "x" INITIAL " ".
   DEFINE VARIABLE rubrikvar AS CHARACTER NO-UNDO.
   IF dynbuffh = ? THEN DO:
      MESSAGE "Något är fel kontakta Elpool i Umeå AB 090/184540"
      VIEW-AS ALERT-BOX.
      RETURN.
   END.   
   DEFINE VARIABLE langd AS INTEGER NO-UNDO.
   RUN musw IN huvprogh.
   /*Skapa och lägg till de fält som ska finnas med*/
   DEFINE VARIABLE frmh AS HANDLE NO-UNDO.
   frmh = dynbrwh:FRAME.
   frmh:HIDDEN = FALSE.
   dynbrwh:HIDDEN = FALSE.
   TOG_SORTRUB:HIDDEN = TRUE.
   TOG_SPROFIL:HIDDEN = TRUE.
   IF NOT AVAILABLE hdschakttemp THEN DO:
      FIND FIRST hdschakttemp NO-LOCK NO-ERROR.
   END.
   IF vilkenbrw = 1 THEN DO:
      FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.ORDNING = 50 AND hdprotkopbertemp.SID = hdschakttemp.SID NO-LOCK NO-ERROR.
      IF AVAILABLE hdprotkopbertemp THEN DO:
         fieldh = dynbuffh:BUFFER-FIELD("UTFORT").          
         tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh,1,"TOGGLE-BOX").
         ASSIGN
         tmpcolh:WIDTH-CHARS = 7
         tmpcolh:LABEL = "Utfört"
         tmpcolh:READ-ONLY = FALSE
         tmpcolh:VISIBLE = TRUE.  
         frantillh[1] = tmpcolh. 
         frmh:HIDDEN = TRUE.   
         ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
         ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
         ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE. 
         ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
         
       
         fieldh = dynbuffh:BUFFER-FIELD("FRANTILL").          
         fieldh:FORMAT = "X(256)".
         tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
         ASSIGN
         tmpcolh:WIDTH-CHARS = 14
         tmpcolh:LABEL = hdprotkopbertemp.RUBRIK
         tmpcolh:READ-ONLY = FALSE
         tmpcolh:VISIBLE = TRUE.  
         frantillh[2] = tmpcolh. /* Måste spara undan, annars går den till ÖVRIGT vid ny sträcka PGA att den sätts sist */
         frmh:HIDDEN = TRUE.   
         ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
         ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
         ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE. 
                 
         fieldh = dynbuffh:BUFFER-FIELD("SPROFIL"). 
         tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh,3,"COMBO-BOX"). 
         tmpcolh:INNER-LINES = 10.
         ASSIGN     
         tmpcolh:WIDTH-CHARS = 14
         tmpcolh:LABEL = "SchaktProfil!BB*TB*DJ-DJM%  i cm"
         tmpcolh:READ-ONLY = FALSE
         tmpcolh:VISIBLE = TRUE.
         tmpcolh:LIST-ITEMS = "".
         FOR EACH schackprofiltt WHERE NO-LOCK:
            tmpcolh:ADD-LAST(schackprofiltt.SPROFIL).
         END.
         frantillh[3] = tmpcolh.         
         frmh:HIDDEN = TRUE.   
         ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
         ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
         ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
         ON 'VALUE-CHANGED' OF tmpcolh PERSISTENT RUN SProfilvaluefieldchbrw_UI IN THIS-PROCEDURE.
      END.
      CMB_RUBRIK:SCREEN-VALUE = "". 
      CMB_RUBRIK:LIST-ITEMS = "".
      DEFINE VARIABLE lopfalt AS INTEGER NO-UNDO.
      REPEAT:
         lopfalt = lopfalt + 1.
         IF lopfalt > 40 THEN LEAVE.
         FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.ORDNING = lopfalt AND hdprotkopbertemp.SID = hdschakttemp.SID AND hdprotkopbertemp.BORT = FALSE NO-LOCK NO-ERROR.
         IF AVAILABLE hdprotkopbertemp THEN DO:
            hdprotkopbertemp.RUBRIKMEDPUNKT = REPLACE(hdprotkopbertemp.RUBRIK,",","."). 
            status-ok = CMB_RUBRIK:ADD-LAST(hdprotkopbertemp.RUBRIKMEDPUNKT).
            IF CMB_RUBRIK:SCREEN-VALUE = "" OR CMB_RUBRIK:SCREEN-VALUE = ? THEN CMB_RUBRIK:SCREEN-VALUE = hdprotkopbertemp.RUBRIKMEDPUNKT.
         END.    
         fieldh = dynbuffh:BUFFER-FIELD("DEC" + STRING(lopfalt)).
         fieldh:FORMAT = "->>>>>>>>>>9".
         
         tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
         IF AVAILABLE hdprotkopbertemp THEN DO:
            langd = ROUND(LENGTH(hdprotkopbertemp.RUBRIK) / 1.5,0).
            tmpcolh:LABEL = hdprotkopbertemp.RUBRIK + "!" + hdprotkopbertemp.ENHET.
            IF hdprotkopbertemp.RUBRIK NE "" THEN tmpcolh:VISIBLE = TRUE.
            ELSE tmpcolh:VISIBLE = FALSE.
         END.   
         
         ELSE DO: 
            langd = 4.
            tmpcolh:VISIBLE = FALSE.
         END.
         ASSIGN
         tmpcolh:WIDTH-CHARS = langd
         tmpcolh:READ-ONLY = FALSE.
         IF tmpcolh:WIDTH-CHARS > 12 THEN DO:
         tmpcolh:WIDTH-CHARS = 12.
         rubrikvar = "".
         IF AVAILABLE hdprotkopbertemp THEN DO:
            IF LENGTH(SUBSTRING(hdprotkopbertemp.RUBRIK,19,18)) < 18 THEN rubrikvar = SUBSTRING(hdprotkopbertemp.RUBRIK,19,18) + FILL(fillchar,18 - LENGTH(SUBSTRING(hdprotkopbertemp.RUBRIK,19,18))).
            IF LENGTH(SUBSTRING(hdprotkopbertemp.RUBRIK,19,18)) = 18 THEN rubrikvar = SUBSTRING(hdprotkopbertemp.RUBRIK,19,18). 
            IF rubrikvar = "" THEN tmpcolh:LABEL = SUBSTRING(hdprotkopbertemp.RUBRIK,1,18) + "!" + hdprotkopbertemp.ENHET.  
               ELSE tmpcolh:LABEL = SUBSTRING(hdprotkopbertemp.RUBRIK,1,18) + "!" + rubrikvar + "!" + hdprotkopbertemp.ENHET.
            END.
            tmpcolh:TOOLTIP = hdprotkopbertemp.RUBRIK.
         END.     
         ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
         ON 'LEAVE':U OF tmpcolh PERSISTENT RUN valuefieldchbrw_UI IN THIS-PROCEDURE.
         ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
      END. 
      IF Guru.GlobalaVariabler:RubrikSortSchakt = 1 THEN DO:
         CMB_RUBRIK:SCREEN-VALUE = "". 
         CMB_RUBRIK:LIST-ITEMS = "".
         FOR EACH hdprotkopbertemp WHERE hdprotkopbertemp.ORDNING <= 40 AND hdprotkopbertemp.SID = hdschakttemp.SID AND hdprotkopbertemp.BORT = FALSE BY hdprotkopbertemp.RUBRIKMEDPUNKT:   
            status-ok = CMB_RUBRIK:ADD-LAST(hdprotkopbertemp.RUBRIKMEDPUNKT).
            IF CMB_RUBRIK:SCREEN-VALUE = "" OR CMB_RUBRIK:SCREEN-VALUE = ? THEN CMB_RUBRIK:SCREEN-VALUE = hdprotkopbertemp.RUBRIKMEDPUNKT. 
         END.
      END.      
      FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.ORDNING = 51 AND hdprotkopbertemp.SID = hdschakttemp.SID NO-LOCK NO-ERROR.
      IF AVAILABLE hdprotkopbertemp THEN DO:
         fieldh = dynbuffh:BUFFER-FIELD("OVRIGT").
         fieldh:FORMAT = "X(256)".
         tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
         ASSIGN
         tmpcolh:WIDTH-CHARS = 30
         tmpcolh:LABEL = hdprotkopbertemp.RUBRIK
         tmpcolh:READ-ONLY = FALSE
         tmpcolh:VISIBLE = TRUE.  
         frmh:HIDDEN = TRUE.   
         ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
         ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
         ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
      END.
      TOG_SORTRUB:HIDDEN = FALSE.
      TOG_SPROFIL:HIDDEN = FALSE.
      IF Guru.GlobalaVariabler:RubrikSortSchakt = 1 THEN RUN OmSortRubrik_UI.
      RUN AutoSprofil_UI.
   END.
   IF vilkenbrw = 2 THEN DO:
      FIND FIRST hdschakprothandtemp WHERE hdschakprothandtemp.SID = hdschakttemp.SID NO-LOCK NO-ERROR.
      IF AVAILABLE hdschakprothandtemp THEN DO:
         FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.ORDNING = 50 AND hdprotkopbertemp.SID = hdschakttemp.SID NO-LOCK NO-ERROR.
         IF AVAILABLE hdprotkopbertemp THEN DO:
            fieldh = dynbuffh:BUFFER-FIELD("FRANTILL").
            fieldh:FORMAT = "X(256)".
            tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
            ASSIGN
            tmpcolh:WIDTH-CHARS = 14
            tmpcolh:LABEL = hdprotkopbertemp.RUBRIK
            tmpcolh:READ-ONLY = TRUE
            tmpcolh:VISIBLE = TRUE.  
            frmh:HIDDEN = TRUE.   
            ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
            ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
            ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
         END.
      END.
      
      IF AVAILABLE hdschakprothandtemp THEN DO:
         fieldh = dynbuffh:BUFFER-FIELD("BENAMNING").
         fieldh:FORMAT = "X(256)".
         tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
         ASSIGN
         tmpcolh:WIDTH-CHARS = 20
         tmpcolh:LABEL = "Benämning"
         tmpcolh:READ-ONLY = TRUE
         tmpcolh:VISIBLE = TRUE.  
         frmh:HIDDEN = TRUE.   
         ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
         ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
         ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
      END.
      
      FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.ORDNING = 51 AND hdprotkopbertemp.SID = hdschakttemp.SID NO-LOCK NO-ERROR.
      IF AVAILABLE hdprotkopbertemp THEN DO:
         fieldh = dynbuffh:BUFFER-FIELD("ANMARKNING").
         fieldh:FORMAT = "X(256)".
         tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
         ASSIGN
         tmpcolh:WIDTH-CHARS = 20
         tmpcolh:LABEL = "Anmärkning"
         tmpcolh:READ-ONLY = FALSE
         tmpcolh:VISIBLE = TRUE.  
         frmh:HIDDEN = TRUE.   
         ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
         ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
         ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
      END.
   END.
   IF vilkenbrw = 3 THEN DO:
      FIND FIRST schkordstartsluttemp WHERE schkordstartsluttemp.SID = hdschakttemp.SID NO-LOCK NO-ERROR.
      IF AVAILABLE schkordstartsluttemp THEN DO:
         FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.ORDNING = 50 AND hdprotkopbertemp.SID = hdschakttemp.SID NO-LOCK NO-ERROR.
         IF AVAILABLE hdprotkopbertemp THEN DO:
            fieldh = dynbuffh:BUFFER-FIELD("FRANTILL").
            fieldh:FORMAT = "X(256)".
            tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
            ASSIGN
            tmpcolh:WIDTH-CHARS = 14
            tmpcolh:LABEL = hdprotkopbertemp.RUBRIK
            tmpcolh:READ-ONLY = TRUE
            tmpcolh:VISIBLE = TRUE.  
            frmh:HIDDEN = TRUE.   
            ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
            ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
            ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
         END.
      END.
      
      IF AVAILABLE schkordstartsluttemp THEN DO:
         fieldh = dynbuffh:BUFFER-FIELD("XKORDF").
         fieldh:FORMAT = "->99.999999999".
         tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
         ASSIGN
         tmpcolh:WIDTH-CHARS = 10
         tmpcolh:LABEL = "Från X-kord"
         tmpcolh:READ-ONLY = TRUE
         tmpcolh:VISIBLE = TRUE.  
         frmh:HIDDEN = TRUE.   
         ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
         ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
         ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
         fieldh = dynbuffh:BUFFER-FIELD("YKORDF").
         fieldh:FORMAT = "->99.999999999".
         tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
         ASSIGN
         tmpcolh:WIDTH-CHARS = 10
         tmpcolh:LABEL = "Från Y-kord"
         tmpcolh:READ-ONLY = TRUE
         tmpcolh:VISIBLE = TRUE.  
         frmh:HIDDEN = TRUE.   
         ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
         ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
         ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
         fieldh = dynbuffh:BUFFER-FIELD("ZKORDF").
         fieldh:FORMAT = "->99.999999999".
         
         tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
         ASSIGN
         tmpcolh:WIDTH-CHARS = 10
         tmpcolh:LABEL = "Från Z-kord"
         tmpcolh:READ-ONLY = TRUE
         tmpcolh:VISIBLE = TRUE.  
         frmh:HIDDEN = TRUE.   
         ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
         ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
         ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
         fieldh = dynbuffh:BUFFER-FIELD("XKORDT").
         fieldh:FORMAT = "->99.999999999".
         tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
         ASSIGN
         tmpcolh:WIDTH-CHARS = 10
         tmpcolh:LABEL = "Till X-kord"
         tmpcolh:READ-ONLY = TRUE
         tmpcolh:VISIBLE = TRUE.  
         frmh:HIDDEN = TRUE.   
         ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
         ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
         ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
         fieldh = dynbuffh:BUFFER-FIELD("YKORDT").
         fieldh:FORMAT = "->99.999999999".
         tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
         ASSIGN
         tmpcolh:WIDTH-CHARS = 10
         tmpcolh:LABEL = "Till Y-kord"
         tmpcolh:READ-ONLY = TRUE
         tmpcolh:VISIBLE = TRUE.  
         frmh:HIDDEN = TRUE.   
         ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
         ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
         ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
         fieldh = dynbuffh:BUFFER-FIELD("ZKORDT").
         fieldh:FORMAT = "->99.999999999".
         tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
         ASSIGN
         tmpcolh:WIDTH-CHARS = 10
         tmpcolh:LABEL = "Till Z-kord"
         tmpcolh:READ-ONLY = TRUE
         tmpcolh:VISIBLE = TRUE.  
         frmh:HIDDEN = TRUE.   
         ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
         ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
         ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.

      END.           
   END. 
   IF vilkenbrw = 4 THEN DO:
      fieldh = dynbuffh:BUFFER-FIELD("ARBKOD").
      fieldh:FORMAT = "x(4)".
      tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
      ASSIGN
      tmpcolh:WIDTH-CHARS = 4
      tmpcolh:LABEL = "Kod"
      tmpcolh:READ-ONLY = TRUE
      tmpcolh:VISIBLE = TRUE.  
      frmh:HIDDEN = TRUE.   
      ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
      ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
      ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
      fieldh = dynbuffh:BUFFER-FIELD("Lopnr").
      fieldh:FORMAT = "99".
      tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
     
      ASSIGN
      tmpcolh:WIDTH-CHARS = 4
      tmpcolh:LABEL = "Löpnr"
      tmpcolh:READ-ONLY = TRUE
      tmpcolh:VISIBLE = TRUE  
      frmh:HIDDEN = TRUE.   
      ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
      ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
      ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
      fieldh = dynbuffh:BUFFER-FIELD("Antal").
      fieldh:FORMAT = "->>>>9.999".
      tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
      ASSIGN
      tmpcolh:WIDTH-CHARS = 10
      tmpcolh:LABEL = "Antal"
      tmpcolh:READ-ONLY = FALSE
      tmpcolh:VISIBLE = TRUE.  
      frmh:HIDDEN = TRUE.   
      ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
      ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
      ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
      fieldh = dynbuffh:BUFFER-FIELD("Enhet").
      fieldh:FORMAT = "x(256)".
      tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
      ASSIGN
      tmpcolh:WIDTH-CHARS = 5
      tmpcolh:LABEL = "Enh"
      tmpcolh:READ-ONLY = TRUE
      tmpcolh:VISIBLE = TRUE.  
      frmh:HIDDEN = TRUE.   
      ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
      ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
      ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
      fieldh = dynbuffh:BUFFER-FIELD("BENAMNING").
      fieldh:FORMAT = "x(256)".
      tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
      ASSIGN
      tmpcolh:WIDTH-CHARS = 35
      tmpcolh:LABEL = "Benämning"
      tmpcolh:READ-ONLY = TRUE
      tmpcolh:VISIBLE = TRUE.  
      frmh:HIDDEN = TRUE.   
      ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
      ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
      ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.  
   END.
   IF vilkenbrw = 6 THEN DO:
      fieldh = dynbuffh:BUFFER-FIELD("SPROFIL").
      fieldh:FORMAT = "x(256)".
      tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
      ASSIGN
      tmpcolh:WIDTH-CHARS = 12
      tmpcolh:LABEL = "Schaktprofil"
      tmpcolh:READ-ONLY = TRUE
      tmpcolh:VISIBLE = TRUE.  
      frmh:HIDDEN = TRUE.   
      ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
      ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
      ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
     
      fieldh = dynbuffh:BUFFER-FIELD("BB").
      fieldh:FORMAT = ">>>>>>9".
      tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
      ASSIGN
      tmpcolh:WIDTH-CHARS = 12
      tmpcolh:LABEL = "Bottenbredd"
      tmpcolh:READ-ONLY = TRUE
      tmpcolh:VISIBLE = TRUE  
      frmh:HIDDEN = TRUE.   
      ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
      ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
      ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
      fieldh = dynbuffh:BUFFER-FIELD("TB").
      fieldh:FORMAT = ">>>>>>9".
      tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
      ASSIGN
      tmpcolh:WIDTH-CHARS = 12
      tmpcolh:LABEL = "Toppbredd"
      tmpcolh:READ-ONLY = TRUE
      tmpcolh:VISIBLE = TRUE.  
      frmh:HIDDEN = TRUE.   
      ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
      ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
      ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
      fieldh = dynbuffh:BUFFER-FIELD("DJP").
      fieldh:FORMAT = ">>>>>>9".
      tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
      ASSIGN
      tmpcolh:WIDTH-CHARS = 12
      tmpcolh:LABEL = "Packdjup"
      tmpcolh:READ-ONLY = TRUE
      tmpcolh:VISIBLE = TRUE.  
      frmh:HIDDEN = TRUE.   
      ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
      ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
      ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.
      fieldh = dynbuffh:BUFFER-FIELD("DJM").
      fieldh:FORMAT = ">>>>>>9".
      tmpcolh = dynbrwh:ADD-LIKE-COLUMN(fieldh).
      ASSIGN
      tmpcolh:WIDTH-CHARS = 12
      tmpcolh:LABEL = "Djup för massor i %"
      tmpcolh:READ-ONLY = TRUE
      tmpcolh:VISIBLE = TRUE.  
      frmh:HIDDEN = TRUE.   
      ON 'ENTRY':U OF tmpcolh PERSISTENT RUN entry_UI IN THIS-PROCEDURE.
      ON 'LEAVE':U OF tmpcolh PERSISTENT RUN leave_UI IN THIS-PROCEDURE.
      ON 'ANY-KEY':U OF tmpcolh PERSISTENT RUN anykeycell_UI IN THIS-PROCEDURE.  
   END.
   
END PROCEDURE.


PROCEDURE bredfix_UI :
   DEFINE INPUT PARAMETER tempvar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER nybredd AS INTEGER NO-UNDO.
   tempcolh = dynbrwh:GET-BROWSE-COLUMN(tempvar).  
   dynbrwh:WIDTH = 1 + dynbrwh:WIDTH - (tempcolh:WIDTH-CHARS - nybredd).                  
   tempcolh:WIDTH-CHARS = nybredd.
END PROCEDURE.

PROCEDURE leavebrw_UI : 
   
END PROCEDURE.

PROCEDURE entrybrw_UI : 
   dynbrwh:SELECT-FOCUSED-ROW() NO-ERROR.
   RUN getrownr_UI.
   dynbrwh:DESELECT-ROWS() NO-ERROR.
END PROCEDURE.

PROCEDURE rowdispextra_UI:
   DEFINE INPUT PARAMETER TABLE FOR coltemp.
   DEFINE INPUT PARAMETER brwh AS HANDLE NO-UNDO.
   dynbrwh:SELECT-FOCUSED-ROW() NO-ERROR. 
   dynbrwh:DESELECT-ROWS() NO-ERROR. 
END PROCEDURE.

PROCEDURE anykeycell_UI :
   muspl = entryfieldh:CURSOR-OFFSET.
END PROCEDURE.
PROCEDURE entry_UI : 
   dynbrwh:SELECT-FOCUSED-ROW() NO-ERROR.
   entryfieldh = dynbuffh:BUFFER-FIELD(SELF:NAME) NO-ERROR.
END PROCEDURE.
PROCEDURE valuefieldchbrw_UI :
   DEFINE VARIABLE hjdate AS DATE NO-UNDO.
   DEFINE VARIABLE musz AS LOGICAL NO-UNDO.
  
   IF SELF = ? THEN DO:
      invar = ?.
      RETURN.
   END.   
   invar = SELF:SCREEN-VALUE.
   dynbrwh:SELECT-FOCUSED-ROW() NO-ERROR.
   fieldh = entryfieldh.
   IF invar = ? THEN RETURN.
   IF fieldh = ? THEN RETURN.
   brwrowid = dynbuffh:ROWID.
   IF brwrowid = ? THEN RETURN.
   musz = FALSE.
   IF fieldh:BUFFER-VALUE = invar THEN RETURN.
   fieldh:BUFFER-VALUE = invar.
   IF fieldh:BUFFER-VALUE NE ? THEN DO:
      RUN setcellvalue_UI IN brwproch (INPUT fieldh:NAME,INPUT invar).
   END.
   
   fieldh = dynbuffh:BUFFER-FIELD("ANDRAD").
   fieldh:BUFFER-VALUE = TRUE.  
   dynbrwh:SELECT-FOCUSED-ROW() NO-ERROR.
   IF Guru.GlobalaVariabler:SprofilAuto = 0 THEN RETURN.
   sprofilfaltvarde = dynbuffh:BUFFER-FIELD("SPROFIL"):BUFFER-VALUE.
   DEFINE VARIABLE nyrubb AS LOGICAL NO-UNDO.
   RUN RubrikKoll_UI (INPUT FALSE, OUTPUT nyrubb) .
   IF nyrubb = TRUE THEN RETURN.
   
END PROCEDURE.

PROCEDURE SProfilvaluefieldchbrw_UI :
   
   DEFINE VARIABLE schlg AS DECIMAL NO-UNDO.
   DEFINE VARIABLE nyrubb AS LOGICAL NO-UNDO.
   IF Guru.GlobalaVariabler:SprofilAuto = 0 THEN RETURN.
   IF SELF = ? THEN DO:
      invar = ?.
      RETURN.
   END.   
   fieldh = entryfieldh.
   invar = SELF:SCREEN-VALUE.
   dynbrwh:SELECT-FOCUSED-ROW() NO-ERROR.
   IF fieldh:BUFFER-VALUE = invar THEN RETURN.
   ELSE DO:
      fieldh:BUFFER-VALUE = invar.
      IF fieldh:BUFFER-VALUE = "" OR fieldh:BUFFER-VALUE = ? THEN DO:
         FIND FIRST schackprofilstyrtt WHERE schackprofilstyrtt.SPROFIL = "" NO-LOCK NO-ERROR.
         FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.SID = hdschakprottemp.SID AND hdprotkopbertemp.TYP = "FH" AND hdprotkopbertemp.RUBRIK BEGINS schackprofilstyrtt.PACKKOD  NO-ERROR.
         IF AVAILABLE hdprotkopbertemp THEN DO:
            dynbuffh:BUFFER-FIELD("DEC" + STRING(hdprotkopbertemp.ORDNING)):BUFFER-VALUE = 0.
         END.   
         FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.SID = hdschakprottemp.SID AND hdprotkopbertemp.TYP = "FH" AND hdprotkopbertemp.RUBRIK BEGINS schackprofilstyrtt.UTBKOD  NO-ERROR.
         IF AVAILABLE hdprotkopbertemp THEN DO:
            dynbuffh:BUFFER-FIELD("DEC" + STRING(hdprotkopbertemp.ORDNING)):BUFFER-VALUE = 0.
         END.
         dynbuffh:BUFFER-FIELD("ANDRAD"):BUFFER-VALUE = TRUE.
         fieldh:BUFFER-VALUE = "". 
         RUN setlastrowid_UI IN brwproch (INPUT ROWID(hdschakprottemp)).
         RUN openbdynspec_UI IN brwproch.   
         RUN lastselectdyn_UI IN brwproch.
         APPLY "ENTRY" TO frantillh[3].  
      END.  
      ELSE DO:
         sprofilfaltvarde = invar.
         FIND FIRST schackprofiltt WHERE schackprofiltt.SPROFIL = sprofilfaltvarde NO-LOCK NO-ERROR.
         FIND FIRST schackprofilstyrtt WHERE schackprofilstyrtt.SPROFIL = schackprofiltt.SPROFIL NO-LOCK NO-ERROR.
         IF AVAILABLE schackprofilstyrtt THEN sprofilvar = schackprofilstyrtt.SPROFIL.
         FIND FIRST schackprofilstyrtt WHERE schackprofilstyrtt.SPROFIL = sprofilvar NO-LOCK NO-ERROR.
         RUN RubrikKoll_UI (INPUT TRUE, OUTPUT nyrubb) .
      END.
   END.   
   dynbuffh:BUFFER-FIELD("ANDRAD"):BUFFER-VALUE = TRUE.
   RETURN.         
   
END PROCEDURE.

PROCEDURE LangdTillVolym_UI :
   /*BERÄKNAR MASSOR MM*/  
   DEFINE VARIABLE sokforlagg AS CHARACTER NO-UNDO.   
   IF Guru.GlobalaVariabler:KalkyUppIschakt = TRUE THEN sokforlagg = "FH".
   ELSE sokforlagg = "F". 
       /*beräkna längder*/
   Guru.Konstanter:CreateVallistaDynTable(INPUT TEMP-TABLE langdbredddjuptt:HANDLE:DEFAULT-BUFFER-HANDLE).    
   FIND FIRST schackprofilstyrtt WHERE schackprofilstyrtt.SPROFIL = "" NO-LOCK NO-ERROR.   
   dynqueh:GET-FIRST(NO-LOCK).
   DO WHILE dynqueh:QUERY-OFF-END = FALSE:
      FOR EACH tempforlagg WHERE tempforlagg.ARBKOD = schackprofilstyrtt.ARBKOD AND tempforlagg.LOPNR >= schackprofilstyrtt.LOPSTART AND 
      tempforlagg.LOPNR <= schackprofilstyrtt.LOPSLUT NO-LOCK:
         FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.SID = dynbuffh:BUFFER-FIELD("SID"):BUFFER-VALUE AND hdprotkopbertemp.TYP = sokforlagg AND hdprotkopbertemp.ID = tempforlagg.ID NO-LOCK NO-ERROR.
         IF AVAILABLE hdprotkopbertemp THEN DO:
            
            IF hdprotkopbertemp.TYP = sokforlagg AND hdprotkopbertemp.ID = tempforlagg.ID THEN DO:
               Guru.GlobalaVariabler:ttBuffHandleVallistaDyn:FIND-FIRST("WHERE SID = " + STRING(dynbuffh:BUFFER-FIELD("SID"):BUFFER-VALUE) +
               " AND KLID = " + STRING(dynbuffh:BUFFER-FIELD("KLID"):BUFFER-VALUE) ,NO-LOCK) NO-ERROR.
               IF Guru.GlobalaVariabler:ttBuffHandleVallistaDyn:AVAILABLE THEN.
               ELSE DO:
                  Guru.GlobalaVariabler:ttBuffHandleVallistaDyn:BUFFER-CREATE(). 
               END.
               ASSIGN 
               Guru.GlobalaVariabler:ttBuffHandleVallistaDyn:BUFFER-FIELD("SID"):BUFFER-VALUE = dynbuffh:BUFFER-FIELD("SID"):BUFFER-VALUE
               Guru.GlobalaVariabler:ttBuffHandleVallistaDyn:BUFFER-FIELD("KLID"):BUFFER-VALUE = dynbuffh:BUFFER-FIELD("KLID"):BUFFER-VALUE
               Guru.GlobalaVariabler:ttBuffHandleVallistaDyn:BUFFER-FIELD("SCHAKTLANGD"):BUFFER-VALUE = Guru.GlobalaVariabler:ttBuffHandleVallistaDyn:BUFFER-FIELD("SCHAKTLANGD"):BUFFER-VALUE
               + dynbuffh:BUFFER-FIELD("DEC" + STRING(hdprotkopbertemp.ORDNING)):BUFFER-VALUE.
            END.
            
         END.
      END.        
      dynqueh:GET-NEXT(NO-LOCK).
   END. 
  
END PROCEDURE.


PROCEDURE RubrikKoll_UI :
   /*BERÄKNAR MASSOR MM*/   
   DEFINE VARIABLE sokforlagg AS CHARACTER NO-UNDO.   
   DEFINE VARIABLE schlg AS DECIMAL NO-UNDO.
   DEFINE INPUT  PARAMETER skapa AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER nyrubb AS LOGICAL NO-UNDO.
   IF Guru.GlobalaVariabler:KalkyUppIschakt = TRUE THEN sokforlagg = "FH".
   ELSE sokforlagg = "F".
   /*finns Rubrikerna*/
   FIND FIRST schackprofilstyrtt WHERE schackprofilstyrtt.SPROFIL = sprofilvar NO-LOCK NO-ERROR.
   IF AVAILABLE schackprofilstyrtt THEN DO:
      FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.SID = hdschakprottemp.SID AND hdprotkopbertemp.TYP = "FH" AND hdprotkopbertemp.RUBRIK BEGINS schackprofilstyrtt.PACKKOD  NO-ERROR.
      IF NOT AVAILABLE hdprotkopbertemp THEN DO:
         FIND FIRST temphandelse WHERE temphandelse.BENAMNING BEGINS schackprofilstyrtt.PACKKOD NO-LOCK NO-ERROR.
         IF AVAILABLE temphandelse THEN DO:
            IF skapa = FALSE THEN DO:
               nyrubb = TRUE.
               RETURN.
            END.   
            CREATE hdrubtemp.
            BUFFER-COPY temphandelse TO hdrubtemp.
            nyrubb = TRUE.
            RUN manInsRub_UI (INPUT temphandelse.ID, INPUT temphandelse.TYP, INPUT INTEGER(valaonr), INPUT valomrade, INPUT hdschakttemp.SID).
         END.   
      END.
      FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.SID = hdschakprottemp.SID AND hdprotkopbertemp.TYP = "FH" AND hdprotkopbertemp.RUBRIK BEGINS schackprofilstyrtt.UTBKOD  NO-ERROR.
      IF NOT AVAILABLE hdprotkopbertemp THEN DO:
         FIND FIRST temphandelse WHERE temphandelse.BENAMNING BEGINS schackprofilstyrtt.UTBKOD NO-LOCK NO-ERROR.
         IF AVAILABLE temphandelse THEN DO:
            IF skapa = FALSE THEN DO:
               nyrubb = TRUE.
               RETURN.
            END.
            CREATE hdrubtemp.
            BUFFER-COPY temphandelse TO hdrubtemp.
            nyrubb = TRUE.
            RUN manInsRub_UI (INPUT temphandelse.ID, INPUT temphandelse.TYP, INPUT INTEGER(valaonr), INPUT valomrade, INPUT hdschakttemp.SID).
         END.  
      END.
   END.   
   IF nyrubb = TRUE THEN RUN vcradval_UI.
   /*beräkna längder*/
   FIND FIRST schackprofiltt WHERE schackprofiltt.SPROFIL = sprofilfaltvarde NO-LOCK NO-ERROR.

   FOR EACH schackprofilstyrtt WHERE schackprofilstyrtt.SPROFIL = sprofilvar NO-LOCK:
      FOR EACH tempforlagg WHERE tempforlagg.ARBKOD = schackprofilstyrtt.ARBKOD AND tempforlagg.LOPNR >= schackprofilstyrtt.LOPSTART AND 
      tempforlagg.LOPNR <= schackprofilstyrtt.LOPSLUT NO-LOCK:
      FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.SID = hdschakprottemp.SID AND hdprotkopbertemp.TYP = sokforlagg AND hdprotkopbertemp.ID = tempforlagg.ID NO-LOCK NO-ERROR.   
         IF AVAILABLE hdprotkopbertemp THEN DO:
            schlg = schlg + dynbuffh:BUFFER-FIELD("DEC" + STRING(hdprotkopbertemp.ORDNING)):BUFFER-VALUE.
         END.
      END. 
   END.
   FIND FIRST schackprofilstyrtt WHERE schackprofilstyrtt.SPROFIL = sprofilvar NO-LOCK NO-ERROR.
   IF AVAILABLE schackprofilstyrtt THEN DO:
      IF NOT AVAILABLE schackprofiltt THEN DO:
         MESSAGE "Någon har tagit bort Schaktprofilen som du använder!" SKIP 
         "Beräkningar går inte att göra!"
         VIEW-AS ALERT-BOX.
      END.
      ELSE DO:
         FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.SID = hdschakprottemp.SID AND hdprotkopbertemp.TYP = "FH" AND hdprotkopbertemp.RUBRIK BEGINS schackprofilstyrtt.PACKKOD  NO-ERROR.
         IF AVAILABLE hdprotkopbertemp THEN DO:
            IF AVAILABLE schackprofilstyrtt THEN dynbuffh:BUFFER-FIELD("DEC" + STRING(hdprotkopbertemp.ORDNING)):BUFFER-VALUE = schlg * schackprofiltt.PACK.
         END.
         FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.SID = hdschakprottemp.SID AND hdprotkopbertemp.TYP = "FH" AND hdprotkopbertemp.RUBRIK BEGINS schackprofilstyrtt.UTBKOD  NO-ERROR.
         IF AVAILABLE hdprotkopbertemp THEN DO:
            IF AVAILABLE schackprofilstyrtt THEN dynbuffh:BUFFER-FIELD("DEC" + STRING(hdprotkopbertemp.ORDNING)):BUFFER-VALUE = schlg * schackprofiltt.UTBYTM.
         END.
      END.   
   END.
   RUN setlastrowid_UI IN brwproch (INPUT ROWID(hdschakprottemp)).
   RUN openbdynspec_UI IN brwproch.   
   RUN lastselectdyn_UI IN brwproch.
   IF skapa = TRUE THEN APPLY "ENTRY" TO frantillh[3].  
   
END PROCEDURE.


PROCEDURE leave_UI :
   DEFINE VARIABLE hjdate AS DATE NO-UNDO.
   DEFINE VARIABLE musz AS LOGICAL NO-UNDO.
   IF SELF = ? THEN DO:
      invar = ?.
      RETURN.
   END.   
   
   invar = SELF:SCREEN-VALUE.
   dynbrwh:SELECT-FOCUSED-ROW() NO-ERROR.
   fieldh = entryfieldh.
   IF invar = ? THEN RETURN.
   IF fieldh = ? THEN RETURN.
   brwrowid = dynbuffh:ROWID.
   IF brwrowid = ? THEN RETURN.
   musz = FALSE.
   IF fieldh:DATA-TYPE = "DATE" THEN DO:
      IF fieldh:BUFFER-VALUE = DATE(invar) THEN.
      ELSE musz = TRUE.
   END.
   ELSE IF fieldh:BUFFER-VALUE = invar THEN. /*jämför screenvalue med sparat och gör ingenting om det är samma*/
   ELSE musz = TRUE.
   IF musz = TRUE THEN DO:
      musz = FALSE.
      fieldh:BUFFER-VALUE = invar.
      IF fieldh:BUFFER-VALUE NE ? THEN DO:
         RUN setcellvalue_UI IN brwproch (INPUT fieldh:NAME,INPUT invar).
         IF vilkenbrw = 1 THEN DO:
            IF fieldh:NAME = "FRANTILL" THEN DO:
               FIND FIRST hdschakprottemp WHERE ROWID(hdschakprottemp) = brwrowid NO-LOCK NO-ERROR.
               IF AVAILABLE hdschakprottemp THEN DO:
                  FOR EACH hdschakprothandtemp WHERE hdschakprothandtemp.SID = hdschakprottemp.SID AND hdschakprothandtemp.KLID = hdschakprottemp.KLID:
                     hdschakprothandtemp.FRANTILL = hdschakprottemp.FRANTILL. 
                  END.
                  FOR EACH schkordstartsluttemp WHERE schkordstartsluttemp.SID = hdschakprottemp.SID AND schkordstartsluttemp.KLID = hdschakprottemp.KLID:
                     schkordstartsluttemp.FRANTILL = hdschakprottemp.FRANTILL. 
                  END.
               END.                  
            END.
         END.
      END.
      fieldh = dynbuffh:BUFFER-FIELD("ANDRAD").
      fieldh:BUFFER-VALUE = TRUE.  
   END.
   dynbrwh:DESELECT-ROWS() NO-ERROR.
   musz = FALSE.
END PROCEDURE.
             
PROCEDURE getrownr_UI :
   brwradnr = dynbrwh:FOCUSED-ROW.   
   brwrowid = dynbuffh:ROWID.  
END PROCEDURE.

PROCEDURE newbrw_UI :   
   /*Ge egenskaper till browser*/
   RUN musw IN huvprogh.
   IF VALID-HANDLE(brwproch) THEN DELETE PROCEDURE brwproch NO-ERROR.
   IF VALID-HANDLE(dynbrwh) THEN DELETE OBJECT dynbrwh NO-ERROR.
   IF VALID-HANDLE(dynqueh) THEN DELETE OBJECT dynqueh NO-ERROR.
   IF VALID-HANDLE(dynbuffh) THEN DO:
      DELETE OBJECT dynbuffh NO-ERROR.
   END.   
   IF VALID-HANDLE(tmpcolh) THEN DELETE OBJECT tmpcolh NO-ERROR.
   IF VALID-HANDLE(fieldh) THEN DELETE OBJECT fieldh NO-ERROR.
   ASSIGN
   brwproch = ?
   dynbrwh = ?
   dynqueh = ?
   dynbuffh = ?
   tmpcolh = ?
   fieldh = ?. 
   CREATE BROWSE dynbrwh.
   RUN extratrigg_UI.
   dynbrwh:HIDDEN = TRUE.
   RUN brwegenskap_UI.
   IF dynbuffh = ? THEN RETURN.
   dynbrwh:HIDDEN = TRUE.
   /*Skapa fast fält*/
   RUN createfields_UI. 
   tempnum = 1. 
   tabort = TRUE.
   tabort = FALSE.        
   /*Öppna queryn*/
   dynbrwh:HIDDEN = FALSE.
   RUN dynbrw_UI.
   IF vilkenbrw = 3 THEN RUN bredfix_UI (INPUT "7", INPUT 10).
   IF vilkenbrw = 6 THEN RUN bredfix_UI (INPUT "5", INPUT 12).
   IF dynbrwh:NUM-COLUMNS = 0 THEN RETURN.
   dynbrwh:NUM-LOCKED-COLUMNS = 1.
   RUN openbrw_UI.
   dynbrwh:SENSITIVE  = TRUE.  
   dynbrwh:HIDDEN = FALSE.
   dynbrwh:DESELECT-ROWS() NO-ERROR.
END PROCEDURE.

PROCEDURE columnstotemp_UI.
   DEFINE VARIABLE spartempnum AS INTEGER NO-UNDO.
   IF dynqueh:QUERY-OPEN() = ? THEN dynqueh:QUERY-OPEN().
   spartempnum = tempnum.
   dynqueh:GET-FIRST(NO-LOCK).
   IF dynqueh:QUERY-OFF-END THEN LEAVE.
   REPEAT:
      tempcolh = dynbrwh:GET-BROWSE-COLUMN(tempnum).
      brwrowid = dynbuffh:ROWID.
      DO WHILE VALID-HANDLE(tempcolh) AND dynbuffh:ROWID = brwrowid: 
         fieldh = dynbuffh:BUFFER-FIELD(tempcolh:NAME).
         CREATE celltemp.
         ASSIGN
         celltemp.DTYP = tempcolh:DATA-TYP
         celltemp.CH = tempcolh
         celltemp.CNAME = tempcolh:NAME
         celltemp.NUM = tempnum
         celltemp.CROWID = dynbuffh:ROWID
         tempcolh = tempcolh:NEXT-COLUMN.
         tempnum = tempnum + 1.              
      END.
      dynqueh:GET-NEXT(NO-LOCK).
      tempnum = spartempnum.
      IF dynqueh:QUERY-OFF-END THEN LEAVE.
   END.     
END PROCEDURE.

PROCEDURE extratrigg_UI :
END PROCEDURE.

PROCEDURE dynbrw_UI :
   RUN musw IN huvprogh.
   RUN DYNBRW.P PERSISTENT SET brwproch (INPUT dynbrwh).
   RUN dynprogextra IN brwproch (INPUT "rowdispextra_UI",INPUT THIS-PROCEDURE).
   RUN rowdispextrakor IN brwproch (INPUT TRUE).
   RUN brwsetupstop_UI IN brwproch (INPUT 1).
END PROCEDURE.


PROCEDURE releaseh_UI :
   dynqueh:QUERY-CLOSE NO-ERROR.
   DELETE OBJECT dynqueh NO-ERROR.  
   DELETE OBJECT dynbrwh NO-ERROR.
   
END PROCEDURE.                   

PROCEDURE avs_UI :
   {BORTBRWPROC.I}
   IF VALID-HANDLE(VolymClassStart) THEN DO:
      RUN Avsluta_UI IN VolymClassStart.
      DELETE PROCEDURE VolymClassStart NO-ERROR.   
   END.   
   IF VALID-HANDLE(SchVisClasserStart) THEN DELETE PROCEDURE SchVisClasserStart NO-ERROR.
   SchVisClasserStart = ?.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph NO-ERROR.   
   IF VALID-HANDLE(brwproch) THEN DELETE PROCEDURE brwproch NO-ERROR.
   Guru.Konstanter:AvslutaExtradata().
   DELETE OBJECT ExtraDataDS NO-ERROR.
   ExtraDataDS = ?.     
   DELETE OBJECT ExtradataAppServerHandleSet NO-ERROR.
   ExtradataAppServerHandleSet = ?.
   
   {TIMERSLUT.I}
END PROCEDURE.

PROCEDURE Snabbspara.PSTimer.Tick .
   RUN fbtnsnabb_UI.
END PROCEDURE.

PROCEDURE control_load :
   DEFINE VARIABLE UIB_S    AS LOGICAL    NO-UNDO.
   DEFINE VARIABLE OCXFile  AS CHARACTER  NO-UNDO.

END PROCEDURE.
PROCEDURE spartidh_UI :
   DEFINE OUTPUT PARAMETER spartidout AS INTEGER NO-UNDO.
   spartidout = spartidvar * 60 * 1000. 
  
END PROCEDURE.
PROCEDURE spartid_UI :   
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "FAVO"                   
   inextradatatemp.HUVUDCH = Guru.Konstanter:globanv              
   inextradatatemp.HUVUDINT =  ?.   
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:
      spartidvar = extradatatemp.SOKINT[1].      
   END.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
END PROCEDURE.

PROCEDURE manstrselect_UI :
   RUN setlastrowid_UI IN brwproch (INPUT ROWID(hdschakprottemp)).
   RUN lastselectdyn_UI IN brwproch.
END PROCEDURE.
PROCEDURE ImpStrecka_UI :
   DEFINE VARIABLE ledigDecNr AS INTEGER NO-UNDO.
   {KOLLVOLYMSTART.I}
   DEBUGGER:SET-BREAK().
   IF brwantal(1) = FALSE THEN RETURN.
   EMPTY TEMP-TABLE kon_display NO-ERROR. 
   RUN IMPORTSCHSTRD.W (OUTPUT TABLE kon_display, INPUT-OUTPUT blankrader).
   IF musz = TRUE THEN DO:
      EMPTY TEMP-TABLE kon_display NO-ERROR. 
      musz = FALSE.
      RETURN. 
   END. 
   FIND FIRST kon_display WHERE NO-LOCK NO-ERROR.
   IF NOT AVAILABLE kon_display THEN DO:
      RETURN.
   END.
   /*ta bort tomma stäckor vid import  Lena 20200224*/  
   RUN LedigtNr_UI (OUTPUT ledigDecNr).
   IF ledigDecNr = 1  THEN DO:     
      FOR EACH hdschakprottemp WHERE hdschakprottemp.SID = hdschakttemp.SID :
         DELETE hdschakprottemp.
      END.   
   END.   
   ELSE IF ledigDecNr > 1  THEN DO:
      FIND FIRST hdschakprottempbuff WHERE hdschakprottempbuff.SID = hdschakttemp.SID AND hdschakprottempbuff.BERID = 0 AND hdschakprottempbuff.FRANTILL NE "" NO-ERROR.
      IF AVAILABLE hdschakprottempbuff THEN DO:
         MESSAGE "Du kan bara importera Byggnr från beredning om du inte har lagt upp Byggnr manuellt "
         VIEW-AS ALERT-BOX.
         RETURN.
      END.         
   END.          
   FOR EACH kon_display WHERE NO-LOCK BY  INTEGER(kon_display.ID2):
      /*importera bara om den inte redan är importeras Lena 20200224*/
      FIND FIRST hdschakprottempbuff WHERE hdschakprottempbuff.SID = hdschakttemp.SID AND hdschakprottempbuff.BERID = INTEGER(kon_display.ID2) NO-LOCK NO-ERROR.
      IF NOT AVAILABLE hdschakprottempbuff  THEN DO:      
         RUN mannystreck_UI.
         hdschakprottemp.FRANTILL = kon_display.ID2 + "    " + kon_display.EXTRA1.
         hdschakprottemp.BERNUM = kon_display.NUM.
         hdschakprottemp.BERID = INTEGER(kon_display.ID2). 
         IF blankrader = TRUE THEN DO:
            RUN mannystreck_UI.
            hdschakprottemp.FRANTILL = "".
         END.
      END.      
   END.
   RUN setlastrowid_UI IN brwproch (INPUT ROWID(hdschakprottemp)).
   RUN openbdynspec_UI IN brwproch.   
   RUN lastselectdyn_UI IN brwproch.
   
END PROCEDURE.
PROCEDURE nystrecka_UI :
   DEFINE VARIABLE testt AS HANDLE NO-UNDO.
   {KOLLVOLYMSTART.I}
   IF brwantal(1) = FALSE THEN RETURN.
   RUN mannystreck_UI.   
   RUN setlastrowid_UI IN brwproch (INPUT ROWID(hdschakprottemp)).
   RUN openbdynspec_UI IN brwproch.   
   RUN lastselectdyn_UI IN brwproch.   
   /* Gå in i fråntill, sätts i createfields_UI */
   APPLY "ENTRY" TO frantillh[2].
  
END PROCEDURE.




/* Lägga till schakt */
PROCEDURE mannyschakt_UI :
   {KOLLVOLYMSTART.I}
   IF AVAILABLE hdschakttemp THEN RUN SCHAKTKOPRUBB.W (OUTPUT schaktvar).      
   RUN mannyschaktt_UI.
   IF schaktvar > 0 THEN DO:      
      FOR EACH hdprotkopbertemp WHERE  hdprotkopbertemp.SID = schaktvar:
         CREATE hdprotkopbertempbuff.
         BUFFER-COPY hdprotkopbertemp TO hdprotkopbertempbuff.
         hdprotkopbertempbuff.SID = hdschakttemp.sid.
         hdprotkopbertempbuff.ANDRA = TRUE.
      END.   
   END.
   RUN setlastrowid_UI IN brwproc[1] (INPUT ROWID(hdschakttemp)).
   RUN openbdynspec_UI IN brwproc[1].
   RUN lastselectdyn_UI IN brwproc[1].
   CREATE skrivhdschakttemp.
   BUFFER-COPY hdschakttemp TO skrivhdschakttemp.
   RUN openbdynspec_UI IN brwproc[2].   
END PROCEDURE.

/*Lägger till rubrikerna "Övrigt" samt "Från - Till" för ett nytt schakt.
  ID 9000 = Övrigt
  ID 9001 = Från - Till
*/ 
PROCEDURE mansfranovr_UI :
   IF AVAILABLE hdschakttemp THEN DO:
      CREATE hdprotkopbertemp.
      ASSIGN
      hdprotkopbertemp.SID = hdschakttemp.SID
      hdprotkopbertemp.OMRADE = hdschakttemp.OMRADE
      hdprotkopbertemp.BERNR = hdschakttemp.BERNR
      hdprotkopbertemp.RUBRIK = "Övrigt"
      hdprotkopbertemp.ID = 9000
      hdprotkopbertemp.BORT = FALSE
      hdprotkopbertemp.ANDRAD = TRUE
      hdprotkopbertemp.ORDNING = 51.
      
      CREATE hdprotkopbertemp.
      ASSIGN
      hdprotkopbertemp.SID = hdschakttemp.SID
      hdprotkopbertemp.OMRADE = hdschakttemp.OMRADE
      hdprotkopbertemp.BERNR = hdschakttemp.BERNR
      hdprotkopbertemp.RUBRIK = "Från - Till"
      hdprotkopbertemp.ID = 9001
      hdprotkopbertemp.BORT = FALSE
      hdprotkopbertemp.ANDRAD = TRUE
      hdprotkopbertemp.ORDNING = 50.
   END.  
END PROCEDURE.

PROCEDURE mannystreck_UI :
   DEFINE VARIABLE nyklid AS INTEGER NO-UNDO.
   DEFINE VARIABLE nyrowid AS INTEGER NO-UNDO.
   FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.SID = hdschakttemp.SID NO-ERROR.
   IF NOT AVAILABLE hdprotkopbertemp THEN DO:
      RUN mansfranovr_UI.
   END.
   FIND LAST hdschakprottemp WHERE hdschakprottemp.SID = hdprotkopbertemp.SID NO-ERROR.
   
   IF AVAILABLE hdschakprottemp THEN DO:
      nyklid = hdschakprottemp.KLID.
      nyklid = nyklid + 1.      
   END.
   ELSE DO:
      nyklid = 1.
   END.  
   IF AVAILABLE hdschakttemp THEN DO:
      CREATE hdschakprottemp.
      ASSIGN
      hdschakprottemp.BERNR = INTEGER(valaonr)
      hdschakprottemp.OMRADE = valomrade
      hdschakprottemp.SID = hdschakttemp.SID      
      hdschakprottemp.KLID = nyklid      
      hdschakprottemp.BORT = FALSE
      hdschakprottemp.ANDRA = TRUE.
      hdschakprottemp.FRANTILL = STRING(nyklid) + " - " + STRING(nyklid + 1).
  END.      
END PROCEDURE.

PROCEDURE mannyschaktt_UI :   
   DEFINE VARIABLE nysid AS INTEGER NO-UNDO.
   DEFINE VARIABLE maxsid AS INTEGER NO-UNDO.
   DEFINE VARIABLE maxsidbort AS INTEGER NO-UNDO.
   maxsid = 0.
   maxsidbort = 0.
   FIND LAST hdschakttemp USE-INDEX SID NO-LOCK NO-ERROR.
   FIND LAST hdschakttempbort USE-INDEX SID NO-LOCK NO-ERROR.
   IF AVAILABLE hdschakttemp THEN DO:
      maxsid = hdschakttemp.SID.      
   END.
   IF AVAILABLE hdschakttempbort THEN DO:
      maxsidbort = hdschakttempbort.SID.
   END.   
   IF maxsidbort >= maxsid THEN DO:
      nysid = maxsidbort + 1. 
   END.
   ELSE DO:
      nysid = maxsid + 1.
   END.   
   CREATE hdschakttemp.
   ASSIGN
   hdschakttemp.SID = nysid
   hdschakttemp.BERNR = INTEGER(valaonr)
   hdschakttemp.OMRADE = valomrade
   hdschakttemp.BENAMNING = "Nytt Schakt"
   hdschakttemp.BORT = FALSE.
   hdschakttemp.ANDRA = TRUE.
      
END PROCEDURE.

/*
Kontrollera om rubrik redan finns
*/
PROCEDURE LedigtNr_UI :
   DEFINE OUTPUT PARAMETER ledigDecNr AS INTEGER NO-UNDO.
   DEFINE VARIABLE faltsokhh AS HANDLE NO-UNDO.
   DEFINE VARIABLE tabsokhh AS HANDLE NO-UNDO.   
   tabsokhh = BUFFER hdschakprottemp:HANDLE.
   tabsokhh:FIND-FIRST("WHERE SID = " + STRING(hdschakttemp.SID),NO-LOCK) NO-ERROR.
   IF tabsokhh:AVAILABLE THEN DO:
      REPEAT: 
         ledigDecNr = ledigDecNr + 1.
         IF ledigDecNr > 40 THEN RETURN.
         FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.SID = hdschakttemp.SID AND hdprotkopbertemp.ORDNING = ledigDecNr AND hdprotkopbertemp.BORT = FALSE NO-LOCK NO-ERROR.
         IF NOT AVAILABLE hdprotkopbertemp THEN DO:
            LEAVE.
         END.
      END.   
   END.

END PROCEDURE.
/* ny rubrik */
PROCEDURE manInsRub_UI :
   DEFINE INPUT  PARAMETER varID AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER varTYP AS CHARACTER NO-UNDO.   
   DEFINE INPUT  PARAMETER varbernr AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER varomrade AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER varsid AS INTEGER NO-UNDO.   
   DEFINE VARIABLE rubfinns AS LOGICAL NO-UNDO.
   DEFINE VARIABLE rubordning AS INTEGER NO-UNDO.       
   DEFINE VARIABLE varrub AS CHARACTER NO-UNDO.
   DEFINE VARIABLE varenh AS CHARACTER NO-UNDO.
   DEFINE VARIABLE tempord AS INTEGER NO-UNDO.
   DEFINE VARIABLE typ AS CHARACTER NO-UNDO.
   DEFINE VARIABLE ledigDecNr AS INTEGER NO-UNDO.
   /*finns rubriken*/  
   RUN manfinnsrubrik_UI (INPUT varID,INPUT varTYP,OUTPUT rubfinns).   
   /*var finns rubriken?*/
   IF rubfinns THEN DO:
   END.
   ELSE DO:
      /* ta reda på sortering som nya rubriken ska ha */      
      /* hämta rubrik + enhet för nya rubriken */
      RUN hamtaRubEnhet_UI IN schapph (INPUT varID, INPUT varTYP, OUTPUT varrub, OUTPUT varenh).
      RUN LedigtNr_UI (OUTPUT ledigDecNr).     
      /* Skapa ny rubrik */
      IF ledigDecNr <= 40 THEN DO:
         CREATE hdprotkopbertemp.
         ASSIGN
         hdprotkopbertemp.ORDNING = ledigDecNr 
         hdprotkopbertemp.ID = varID
         hdprotkopbertemp.TYP = varTYP
         hdprotkopbertemp.BERNR = varbernr
         hdprotkopbertemp.OMRADE = varomrade
         hdprotkopbertemp.SID = varsid
         hdprotkopbertemp.RUBRIK = varrub      
         hdprotkopbertemp.ENHET = varenh
         hdprotkopbertemp.ANDRA = TRUE.
         hdprotkopbertemp.RUBRIKMEDPUNKT = REPLACE(hdprotkopbertemp.RUBRIK,",","."). 
      END.
   END.      
END PROCEDURE.

PROCEDURE AutoSprofil_UI :
   
   IF VALID-HANDLE(frantillh[3]) THEN DO:      
      IF TOG_SPROFIL:CHECKED = FALSE THEN DO:
         Guru.GlobalaVariabler:SprofilAuto = 0.
         sprofilfaltvarde = "".
         frantillh[3]:VISIBLE = FALSE.         
      END.    
      ELSE DO:
         Guru.GlobalaVariabler:SprofilAuto = 1.
         frantillh[3]:VISIBLE = TRUE.
      END.
   END.       
END PROCEDURE.
PROCEDURE OmRubrikSort_UI :     
   IF TOG_SORTRUB:CHECKED = FALSE THEN DO:
      Guru.GlobalaVariabler:RubrikSortSchakt = 0.       
   END.    
   ELSE DO:
      Guru.GlobalaVariabler:RubrikSortSchakt = 1.      
   END.  
   RUN OmSortRubrik_UI.
END PROCEDURE.
PROCEDURE OmSortRubrik_UI :   
   DEFINE VARIABLE tempcolh AS HANDLE NO-UNDO.
   DEFINE VARIABLE decordi AS INTEGER NO-UNDO.
   DEFINE VARIABLE colnri AS INTEGER NO-UNDO.
   EMPTY TEMP-TABLE omrubrik NO-ERROR. 
   tempcolh = dynbrwh:GET-BROWSE-COLUMN(1).
   colnri = 0.
   DO WHILE VALID-HANDLE(tempcolh):
      colnri = colnri + 1.
      IF tempcolh:VISIBLE = TRUE THEN  DO:
         IF tempcolh:LABEL = "Utfört" OR tempcolh:LABEL = "Från - till" OR tempcolh:LABEL = "SchaktProfil!BB*TB*DJ-DJM%  i cm" OR tempcolh:LABEL = "Övrigt" THEN.
         ELSE DO:
            decordi = INTEGER(SUBSTRING(tempcolh:NAME,4)).
            FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.ORDNING = decordi AND hdprotkopbertemp.SID = hdschakttemp.SID AND hdprotkopbertemp.BORT = FALSE NO-LOCK NO-ERROR.
            IF AVAILABLE hdprotkopbertemp THEN DO:
               CREATE omrubrik.
               ASSIGN
               omrubrik.RUBRIK = tempcolh:LABEL
               omrubrik.ORDNING = hdprotkopbertemp.ORDNING
               omrubrik.CORDNING = colnri. 
            END.   
         END.   
      END.
      tempcolh = tempcolh:NEXT-COLUMN.         
   END.      
   IF Guru.GlobalaVariabler:RubrikSortSchakt = 1 THEN DO:
      FOR EACH omrubrik WHERE  USE-INDEX  RUBRIK :        
         dynbrwh:MOVE-COLUMN(omrubrik.CORDNING,4).
         colnri = omrubrik.CORDNING.
         DELETE omrubrik.
         FOR EACH omrubrikbuff WHERE omrubrikbuff.CORDNING < colnri NO-LOCK:
            omrubrikbuff.CORDNING = omrubrikbuff.CORDNING + 1.
         END.         
      END.
   END.   
   IF Guru.GlobalaVariabler:RubrikSortSchakt = 0 THEN DO:
      FOR EACH omrubrik WHERE  USE-INDEX  ORDNING :
         dynbrwh:MOVE-COLUMN(omrubrik.CORDNING,4).
         colnri = omrubrik.CORDNING.
         DELETE omrubrik.
         FOR EACH omrubrikbuff WHERE omrubrikbuff.CORDNING < colnri NO-LOCK:
            omrubrikbuff.CORDNING = omrubrikbuff.CORDNING + 1.
         END.
      END.      
   END.   
END PROCEDURE.
/* letar rubrik */
PROCEDURE manfinnsrubrik_UI :
   DEFINE INPUT  PARAMETER varID AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER varTYP AS CHARACTER NO-UNDO.   
   DEFINE OUTPUT PARAMETER varfinns AS LOGICAL NO-UNDO.   
   FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.ID = varID AND hdprotkopbertemp.TYP = varTYP AND hdprotkopbertemp.SID = valschakt NO-ERROR.   
   IF AVAILABLE hdprotkopbertemp THEN DO:
      varfinns = TRUE.   
   END.
   ELSE DO:
      varfinns = FALSE.
   END.  
END PROCEDURE.
PROCEDURE bortrubrik_UI :
   DEFINE VARIABLE insertord AS INTEGER NO-UNDO.
   DEFINE VARIABLE tempord AS INTEGER NO-UNDO.
   DEFINE VARIABLE tabsokhh AS HANDLE NO-UNDO.
   DEFINE VARIABLE qh AS HANDLE NO-UNDO.
   DEFINE VARIABLE kommandoquery AS CHARACTER NO-UNDO.
   {KOLLVOLYMSTART.I}
   IF brwantal(1) = FALSE THEN RETURN.
   MESSAGE "Är du säker på att du vill ta bort rubriken - " + CMB_RUBRIK:SCREEN-VALUE
   VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE svar AS LOGICAL .
   IF svar = FALSE THEN RETURN.      
   FOR EACH hdprotkopbertemp WHERE hdprotkopbertemp.SID = valschakt NO-LOCK:
      IF CMB_RUBRIK:SCREEN-VALUE = hdprotkopbertemp.RUBRIKMEDPUNKT THEN insertord = hdprotkopbertemp.ORDNING.
   END.
   IF insertord = 0 THEN RETURN.
   FIND FIRST hdprotkopbertemp WHERE hdprotkopbertemp.SID = valschakt AND hdprotkopbertemp.ORDNING = insertord  NO-LOCK NO-ERROR.
   hdprotkopbertemp.BORT = TRUE.
   
   tabsokhh = BUFFER hdschakprottemp:HANDLE.
   kommandoquery = "FOR EACH " + tabsokhh:TABLE + " WHERE SID = " + STRING(hdschakttemp.SID) + " NO-LOCK". 
   RUN CreateCustomQuery(INPUT tabsokhh,INPUT kommandoquery,OUTPUT qh).
   qH:GET-FIRST().
   DO WHILE qH:QUERY-OFF-END = FALSE:
      tabsokhh:BUFFER-FIELD("DEC" + STRING(hdprotkopbertemp.ORDNING)):BUFFER-VALUE = 0.
      qH:GET-NEXT().
   END.
   RUN CloseCustomQuery (INPUT qH).    
   RUN vcradval_UI.
   
END PROCEDURE.

PROCEDURE manrubrik_UI :
   DEFINE VARIABLE ledigDecNr AS INTEGER NO-UNDO.
   DEFINE VARIABLE KNrvar  AS INTEGER NO-UNDO.
   DEFINE VARIABLE grundkloid AS INTEGER NO-UNDO.
   DEFINE VARIABLE grundkloidnamn AS CHARACTER  NO-UNDO.
   {KOLLVOLYMSTART.I}
   IF brwantal(1) = FALSE THEN RETURN.
   EMPTY TEMP-TABLE hdrubtemp NO-ERROR.   
   IF Guru.Konstanter:globforetag = "fors" OR  Guru.Konstanter:globforetag = "krin" OR Guru.Konstanter:GForetag = "AKEAUTBI" THEN DO:
      RUN hamtsckalknr_UI  IN schapph (INPUT INTEGER(valaonr),INPUT valomrade,OUTPUT KNrvar, OUTPUT grundkloid, OUTPUT grundkloidnamn).
      IF KNrvar = ? THEN DO:
         MESSAGE "Du måste gå in i Kalkyl, Kalkylera och välja katalogår innan du kan du kan lägga upp Ny P2-kod" 
         VIEW-AS ALERT-BOX.
         RETURN.
      END.   
   END.      
   RUN LedigtNr_UI (OUTPUT ledigDecNr).
   IF ledigDecNr > 40 THEN DO:
      MESSAGE "Du kan inte lägga till flera rubriker!"
      VIEW-AS ALERT-BOX.
      RETURN.
          
   END. 
   ledigDecNr = ledigDecNr - 1.
   {AVBGOM2.I}   
   RUN SCRUBADD.W (INPUT ledigDecNr, INPUT grundkloid, INPUT grundkloidnamn, OUTPUT TABLE hdrubtemp).   
   {AVBFRAM2.I}
   {muswait.i}
   FOR EACH hdrubtemp NO-LOCK:         
      RUN manInsRub_UI (INPUT hdrubtemp.ID, INPUT hdrubtemp.TYP, INPUT INTEGER(valaonr), INPUT valomrade, INPUT hdschakttemp.SID).
   END.
   {musarrow.i}       
   RUN vcradval_UI.       
END PROCEDURE.

PROCEDURE manrensrub_UI :
END PROCEDURE.

PROCEDURE manschaktbort_UI :     
   DEFINE VARIABLE svar AS LOGICAL NO-UNDO.
   {KOLLVOLYMSTART.I}
   IF AVAILABLE hdschakttemp THEN DO:
      MESSAGE "Är du säker på att du vill ta bort schaktet - " + hdschakttemp.BENAMNING VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE svar.
      
      IF svar THEN DO:
         IF AVAILABLE hdschakttemp THEN DO:
            CREATE hdschakttempbort.
            BUFFER-COPY hdschakttemp TO hdschakttempbort.
            FIND FIRST skrivhdschakttemp WHERE skrivhdschakttemp.SID = hdschakttempbort.SID NO-LOCK NO-ERROR.
            
            FOR EACH hdprotkopbertemp WHERE hdprotkopbertemp.SID = hdschakttemp.SID :
               DELETE hdprotkopbertemp NO-ERROR.
            END.
            FOR EACH hdschakprottemp WHERE hdschakprottemp.SID = hdschakttemp.SID :
               DELETE hdschakprottemp NO-ERROR.
            END.
            FOR EACH hdkalktemp WHERE hdkalktemp.SID = hdschakttemp.SID :
               DELETE hdkalktemp NO-ERROR.
            END.
            
            DELETE hdschakttemp.
            
            IF AVAILABLE skrivhdschakttemp THEN  DELETE skrivhdschakttemp.
            RUN selnextprevrow_UI IN brwproc[1].
         END.
         RUN vcradval_UI.         
         RUN openbdynspec_UI IN brwproc[1].
         RUN openbdynspec_UI IN brwproc[2].
         RUN openbdynspec_UI IN brwproch.
         RUN lastselectdyn_UI IN brwproc[1].
      END.
   END.   
END PROCEDURE.

/*bort med sträcka*/
PROCEDURE manstreckbort_UI :
   DEFINE VARIABLE medinfvar AS CHARACTER NO-UNDO.        
   DEFINE VARIABLE svar AS LOGICAL NO-UNDO.
   {KOLLVOLYMSTART.I}
   IF AVAILABLE hdschakprottemp THEN DO:
      medinfvar = "Är du säker på att du vill ta bort sträckan - ".     
      IF Guru.Konstanter:globforetag = "FORS" OR  Guru.Konstanter:globforetag = "krin" OR Guru.Konstanter:GForetag = "AKEAUTBI" THEN medinfvar = "Är du säker på att du vill ta bort byggnr - ".
      MESSAGE medinfvar + hdschakprottemp.FRANTILL VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE svar.      
      IF svar THEN DO:
         IF AVAILABLE hdschakprottemp THEN DO:   
            CREATE hdschakprottempbort.
            BUFFER-COPY hdschakprottemp TO hdschakprottempbort.
            DELETE hdschakprottemp.
            RUN selnextprevrow_UI IN brwproch.
         END.   
         RUN openbdynspec_UI IN brwproch.
         RUN lastselectdyn_UI IN brwproch.
      END.
   END.   
END PROCEDURE.

PROCEDURE manfixbort_UI : 
   FOR EACH hdschakprottempbort NO-LOCK:
      CREATE hdschakprottemp.
      BUFFER-COPY hdschakprottempbort TO hdschakprottemp.
      hdschakprottemp.BORT = TRUE.
   END.
   
   FOR EACH hdschakttempbort NO-LOCK:
      CREATE hdschakttemp.
      BUFFER-COPY hdschakttempbort TO hdschakttemp.
      hdschakttemp.BORT = TRUE.
   END.

   FOR EACH hdkalktempbort NO-LOCK:
      CREATE hdkalktemp.
      BUFFER-COPY hdkalktempbort TO hdkalktemp.
      hdkalktemp.BORT = TRUE.
   END.      
   EMPTY TEMP-TABLE hdschakprottempbort NO-ERROR. 
   EMPTY TEMP-TABLE hdschakttempbort NO-ERROR.
   EMPTY TEMP-TABLE hdkalktempbort NO-ERROR. 
END PROCEDURE. 


PROCEDURE radhojd_UI :
   DEFINE INPUT PARAMETER radervar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER breddantal AS INTEGER NO-UNDO.   
   cRange = allac[1] + STRING(radervar) + ":" + allac[breddantal] + STRING(radervar).
   chWorkSheet:Range(cRange):RowHeight = 20 NO-ERROR.
END PROCEDURE.

PROCEDURE HamtaSchaktProfil_UI :
   ExtraDataDS = ?.
   ExtraVadHmt =  ' EXTRADATA.PROGRAM = "PROFIL"' + ' AND EXTRADATA.HUVUDCH = "SCHAKT" '.
   RUN laddaExtraDataDS_UI IN ExtradataAppServerHandleSet (INPUT ExtraVadHmt,OUTPUT DATASET-HANDLE ExtraDataDS BIND).
   IF VALID-HANDLE(ExtraDataDS) THEN DO:
      Guru.SharedVariable:ExtraDataDS = ExtraDataDS.
      Guru.Konstanter:ExtradataLaddTracking().
   END.
   RUN KollSchaktProfil_UI.
   FIND FIRST schackprofiltt WHERE NO-LOCK NO-ERROR.
   IF NOT AVAILABLE schackprofiltt THEN DO:
      RUN SkapSprofil_UI IN schapph (OUTPUT TABLE schackprofiltt).
      RUN SchProfilHuvCreate_UI.
   END.
   
   
END PROCEDURE.
PROCEDURE KollSchaktProfil_UI :
   queryvar =  "FOR EACH " + Guru.SharedVariable:ExtradataDsbufftH:TABLE.
   Guru.Konstanter:CreateCustomQuery(Guru.SharedVariable:ExtradataDsbufftH,queryvar).
   Guru.GlobalaVariabler:CustomQueryDyn:GET-FIRST().
   ExtraFieldH = Guru.SharedVariable:ExtradataDsbufftH:BUFFER-FIELD("SOKINT").
   ExtraFielChdH = Guru.SharedVariable:ExtradataDsbufftH:BUFFER-FIELD("SOKCHAR").
   DO WHILE Guru.GlobalaVariabler:CustomQueryDyn:QUERY-OFF-END = FALSE:
      CREATE schackprofiltt.
      ASSIGN 
      schackprofiltt.ORDNING = Guru.SharedVariable:ExtradataDsbufftH:BUFFER-FIELD("HUVUDINT"):BUFFER-VALUE
      schackprofiltt.BB = ExtraFieldH:BUFFER-VALUE(1)
      schackprofiltt.TB = ExtraFieldH:BUFFER-VALUE(2)
      schackprofiltt.DJP = ExtraFieldH:BUFFER-VALUE(3)
      schackprofiltt.DJM = ExtraFieldH:BUFFER-VALUE(4).
      schackprofiltt.PACK   = (schackprofiltt.BB + schackprofiltt.TB) / 2 * 0.01 * schackprofiltt.DJP * 0.01.
      schackprofiltt.UTBYTM = (schackprofiltt.BB + schackprofiltt.TB) / 2 * 0.01 * schackprofiltt.DJM * 0.01.
      schackprofiltt.SPROFIL = ExtraFielChdH:BUFFER-VALUE(1).
      
      Guru.GlobalaVariabler:CustomQueryDyn:GET-NEXT().   
   END. 
 
END PROCEDURE.

PROCEDURE SchProfilHuvCreate_UI :
   ExtraFieldH = Guru.SharedVariable:ExtradataDsbufftH:BUFFER-FIELD("SOKINT").
   ExtraFielChdH = Guru.SharedVariable:ExtradataDsbufftH:BUFFER-FIELD("SOKCHAR").
   FOR EACH schackprofiltt WHERE NO-LOCK:
      RUN ProfilHuvCreate_UI.
   END.  
   Guru.Konstanter:ExtraDataDSSpar(FALSE). 
      
END PROCEDURE.

PROCEDURE NyProfil_UI:
   DEFINE VARIABLE lastordning AS INTEGER NO-UNDO.
   FIND LAST schackprofiltt  WHERE USE-INDEX ORDNING NO-LOCK NO-ERROR.
   lastordning = schackprofiltt.ORDNING + 1.
   CREATE schackprofiltt.
   ASSIGN
   schackprofiltt.ORDNING = lastordning
   schackprofiltt.BB = INTEGER(FILL-IN-BB:SCREEN-VALUE)    
   schackprofiltt.TB = INTEGER(FILL-IN-TB:SCREEN-VALUE)
   schackprofiltt.DJP = INTEGER(FILL-IN-DJP:SCREEN-VALUE)
   schackprofiltt.DJM = INTEGER(FILL-IN-DJM:SCREEN-VALUE).
   schackprofiltt.PACK   = (schackprofiltt.BB + schackprofiltt.TB) / 2 * 0.01 * schackprofiltt.DJP * 0.01.
   schackprofiltt.UTBYTM = (schackprofiltt.BB + schackprofiltt.TB) / 2 * 0.01 * schackprofiltt.DJM * 0.01.  
   schackprofiltt.SPROFIL = STRING(schackprofiltt.BB) + "x" +  STRING(schackprofiltt.TB) + "x" +  STRING(schackprofiltt.DJP)  + "-" +  STRING(schackprofiltt.DJM) + "%".
   RUN ProfilHuvCreate_UI.
   Guru.Konstanter:ExtraDataDSSpar(FALSE). 
   RUN setlastrowid_UI IN brwproch (INPUT ROWID(schackprofiltt)).
   RUN openbdynspec_UI IN brwproch.
   RUN lastselectdyn_UI IN brwproch. 
END PROCEDURE.

PROCEDURE BortProfil_UI :
   IF AVAILABLE schackprofiltt THEN DO:
      IF schackprofiltt.ORDNING = 0 THEN DO:
         MESSAGE  "Du kan inte ta bort denna Profil!"
         VIEW-AS ALERT-BOX.
         RETURN.   
      END.    
      MESSAGE "Vill du ta bort profilen  - " schackprofiltt.SPROFIL 
      VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE svar AS LOGICAL.
      IF svar = TRUE THEN DO:
         Guru.SharedVariable:ExtradataDsbufftH:FIND-FIRST("WHERE HUVUDINT = " + STRING(schackprofiltt.ORDNING),NO-LOCK) NO-ERROR.
         IF Guru.SharedVariable:ExtradataDsbufftH:AVAILABLE THEN DO:
            Guru.SharedVariable:ExtradataDsbufftH:BUFFER-DELETE().
         END.
         DELETE schackprofiltt.
         RUN selnextprevrow_UI IN brwproch.
         Guru.Konstanter:ExtraDataDSSpar(FALSE).
         RUN openbdynspec_UI IN brwproch.
         RUN lastselectdyn_UI IN brwproch.
      END.    
   END.    
END PROCEDURE.

PROCEDURE ProfilHuvCreate_UI :
   Guru.SharedVariable:ExtradataDsbufftH:BUFFER-CREATE().
   ASSIGN 
   Guru.SharedVariable:ExtradataDsbufftH:BUFFER-FIELD("PROGRAM"):BUFFER-VALUE = "PROFIL"
   Guru.SharedVariable:ExtradataDsbufftH:BUFFER-FIELD("HUVUDCH"):BUFFER-VALUE = "SCHAKT"
   Guru.SharedVariable:ExtradataDsbufftH:BUFFER-FIELD("HUVUDINT"):BUFFER-VALUE = schackprofiltt.ORDNING
   ExtraFieldH:BUFFER-VALUE(1) = schackprofiltt.BB 
   ExtraFieldH:BUFFER-VALUE(2) = schackprofiltt.TB  
   ExtraFieldH:BUFFER-VALUE(3) = schackprofiltt.DJP 
   ExtraFieldH:BUFFER-VALUE(4) = schackprofiltt.DJM.
   IF schackprofiltt.ORDNING = 0 THEN ExtraFielChdH:BUFFER-VALUE(1) = "".
   ELSE ExtraFielChdH:BUFFER-VALUE(1) = STRING(schackprofiltt.BB) + "x" +  STRING(schackprofiltt.TB) + "x" +  STRING(schackprofiltt.DJP)  + "-" +  STRING(schackprofiltt.DJM) + "%".
END PROCEDURE.
PROCEDURE CreateCustomQuery:
   DEFINE INPUT PARAMETER tth  AS HANDLE NO-UNDO.
   DEFINE INPUT PARAMETER q AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER CustomQueryh AS HANDLE NO-UNDO.
   CREATE QUERY CustomQueryh.
   CustomQueryh:SET-BUFFERS(tth).
   CustomQueryh:QUERY-PREPARE(q).
   CustomQueryh:QUERY-OPEN().
END PROCEDURE.
   
PROCEDURE CloseCustomQuery:
   DEFINE INPUT PARAMETER CustomQueryh AS HANDLE NO-UNDO.
   CustomQueryh:QUERY-CLOSE()  NO-ERROR.
   CustomQueryh = ?.
END PROCEDURE.
