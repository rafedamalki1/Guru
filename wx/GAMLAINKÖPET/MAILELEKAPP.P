/*MAILELEKAPP.P*/
{STARTFORAPP.I}
{ANMARKD.I}
{DEFBESTU.I} 
{KONVALTEMP.I}
{TTBESTXML.I}
{NAMNDB.I}
DEFINE TEMP-TABLE tempnamn NO-UNDO
   FIELD NAMNH AS HANDLE
   FIELD TORGTH AS HANDLE
   FIELD NODTAB AS CHARACTER.

DEFINE VARIABLE enkabval AS LOGICAL    NO-UNDO.
DEFINE VARIABLE priset AS LOGICAL NO-UNDO.
DEFINE VARIABLE detvar AS LOGICAL NO-UNDO. 
DEFINE VARIABLE datvar AS DATE NO-UNDO.  
DEFINE VARIABLE alla AS LOGICAL NO-UNDO.  
DEFINE VARIABLE vald_lev AS CHARACTER NO-UNDO.  
DEFINE VARIABLE skrivut AS LOGICAL NO-UNDO.
DEFINE VARIABLE musz AS LOGICAL NO-UNDO. 
DEFINE VARIABLE valaonr AS CHARACTER NO-UNDO.
DEFINE VARIABLE valdelnr AS INTEGER NO-UNDO.
DEFINE VARIABLE valort AS CHARACTER NO-UNDO. 
DEFINE VARIABLE valomrade AS CHARACTER NO-UNDO.
DEFINE VARIABLE epostvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE musz2 AS LOGICAL NO-UNDO.
DEFINE VARIABLE kalkrow AS ROWID NO-UNDO.
DEFINE VARIABLE mailvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE edivar AS LOGICAL NO-UNDO.
DEFINE VARIABLE EDITOR_MEDD AS CHARACTER  VIEW-AS EDITOR SCROLLBAR-VERTICAL SIZE 53 BY 9 FONT 25 NO-UNDO.
DEFINE VARIABLE status-ok AS LOGICAL NO-UNDO.        
DEFINE VARIABLE arrhjsum AS DECIMAL NO-UNDO.    
DEFINE VARIABLE str AS CHARACTER FORMAT "X(130)" NO-UNDO. 
DEFINE VARIABLE str1 AS CHARACTER FORMAT "X(130)" NO-UNDO.
DEFINE VARIABLE str2 AS CHARACTER FORMAT "X(130)" NO-UNDO. 
DEFINE VARIABLE str0 AS CHARACTER FORMAT "X(130)" NO-UNDO.
DEFINE VARIABLE totalt AS DECIMAL NO-UNDO. 
DEFINE VARIABLE totalt2 AS DECIMAL NO-UNDO. 
DEFINE VARIABLE leverant AS CHARACTER NO-UNDO.
DEFINE VARIABLE lev AS CHARACTER NO-UNDO.  
DEFINE VARIABLE sumpris AS DECIMAL NO-UNDO.    
DEFINE VARIABLE totalsum AS DECIMAL NO-UNDO.
DEFINE VARIABLE sumantal AS INTEGER NO-UNDO.
DEFINE VARIABLE xkordvar AS INTEGER NO-UNDO. 
DEFINE VARIABLE stopvar AS LOGICAL NO-UNDO. 
DEFINE VARIABLE prisvar AS INTEGER NO-UNDO.
DEFINE VARIABLE antvar AS INTEGER NO-UNDO. 
DEFINE VARIABLE antvar2 AS INTEGER NO-UNDO.  
DEFINE VARIABLE firstlev AS CHARACTER NO-UNDO.   
DEFINE VARIABLE mtrlrak AS INTEGER NO-UNDO.  
DEFINE VARIABLE mtrlrak2 AS INTEGER NO-UNDO.
DEFINE VARIABLE radrak AS INTEGER NO-UNDO.   
DEFINE VARIABLE langd AS INTEGER NO-UNDO.  
DEFINE VARIABLE upp AS LOGICAL NO-UNDO.            
DEFINE VARIABLE prognamn AS CHARACTER FORMAT "X(41)" NO-UNDO.
DEFINE VARIABLE prognamn2 AS CHARACTER FORMAT "X(41)" NO-UNDO.
DEFINE VARIABLE prognamn3 AS CHARACTER FORMAT "X(80)" NO-UNDO.
DEFINE VARIABLE skick AS LOGICAL NO-UNDO.
DEFINE VARIABLE efel AS CHARACTER FORMAT "X(30)" NO-UNDO.
DEFINE VARIABLE bytgrupp AS CHARACTER NO-UNDO. 
DEFINE VARIABLE enrvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE utrec AS RECID NO-UNDO.
DEFINE VARIABLE utrec2 AS RECID NO-UNDO.
DEFINE VARIABLE kant AS INTEGER NO-UNDO.
DEFINE VARIABLE tant AS INTEGER NO-UNDO.
DEFINE VARIABLE uppvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE sidlangd AS INTEGER NO-UNDO.
DEFINE VARIABLE ediraknare AS INTEGER NO-UNDO.
DEFINE VARIABLE anmlangd AS INTEGER NO-UNDO.
DEFINE VARIABLE idvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE numsok AS LOGICAL NO-UNDO.
DEFINE VARIABLE byggnr AS INTEGER NO-UNDO.
DEFINE VARIABLE skapkab AS INTEGER NO-UNDO.
DEFINE VARIABLE bestoff AS CHARACTER NO-UNDO.

DEFINE VARIABLE delbest AS LOGICAL NO-UNDO.
DEFINE VARIABLE kommando AS CHARACTER NO-UNDO.
DEFINE VARIABLE kommando2 AS CHARACTER NO-UNDO.

DEFINE VARIABLE dynxml AS HANDLE NO-UNDO.
DEFINE VARIABLE sparfilnamn AS CHARACTER NO-UNDO.
DEFINE VARIABLE filnamnsp AS CHARACTER NO-UNDO.
DEFINE VARIABLE xmlsparfilnamn AS CHARACTER NO-UNDO.
DEFINE VARIABLE okand AS LOGICAL NO-UNDO.
DEFINE VARIABLE fildir AS CHARACTER FORMAT "X(256)" NO-UNDO.
DEFINE VARIABLE filnamn AS CHARACTER NO-UNDO.
DEFINE VARIABLE filnamnuppxml AS CHARACTER NO-UNDO.
DEFINE VARIABLE hjkom AS CHARACTER NO-UNDO.
DEFINE VARIABLE hjrakn AS INTEGER NO-UNDO.
DEFINE VARIABLE hjid AS CHARACTER NO-UNDO.
DEFINE VARIABLE hjid2 AS CHARACTER NO-UNDO.
DEFINE VARIABLE nivar AS INTEGER NO-UNDO.
DEFINE VARIABLE orgtabh AS HANDLE NO-UNDO.
DEFINE VARIABLE jointabh AS HANDLE NO-UNDO.
DEFINE VARIABLE jointabh2 AS HANDLE NO-UNDO.
DEFINE VARIABLE kommandoquery AS CHARACTER NO-UNDO.
DEFINE VARIABLE kommandoquery2 AS CHARACTER NO-UNDO.
DEFINE VARIABLE kommandoquery3 AS CHARACTER NO-UNDO.
DEFINE VARIABLE kommandoquery11 AS CHARACTER NO-UNDO.
DEFINE VARIABLE kommandoquery12 AS CHARACTER NO-UNDO.
DEFINE VARIABLE hjproj AS CHARACTER NO-UNDO.
{EXTRADATA.I}
DEFINE VARIABLE bloblog AS LOGICAL NO-UNDO.
DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.

DEFINE QUERY mtrlprisq FOR BERMTRL.
DEFINE QUERY upplq FOR BERVAL.
DEFINE QUERY berq FOR BERUPP.
DEFINE QUERY gruppq FOR KONSTGRUPP.
DEFINE QUERY beridq FOR BERID.
DEFINE QUERY skyddq FOR KSKYDD.

DEFINE BUFFER idbuff FOR id_temp.
DEFINE BUFFER mtrlbuff FOR mtrl_temp2. 
DEFINE BUFFER gruppbuff FOR grupp_temp.
DEFINE BUFFER linbuff FOR lin_upp.
DEFINE BUFFER skyddbuff FOR skydd_temp2.

DEFINE TEMP-TABLE Body1
   FIELD UT AS CHARACTER.
   
DEFINE TEMP-TABLE Body2
   FIELD UT AS CHARACTER. 

DEFINE TEMP-TABLE felmeddftptemp 
  FIELD FELMEDD AS CHARACTER
  FIELD VAL AS INTEGER.            



PROCEDURE skapalistael_UI.
   DEFINE INPUT PARAMETER globforetag2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER epostvar2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER bestoff2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER vald_lev2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER kalkrow2 AS ROWID NO-UNDO.
   DEFINE INPUT PARAMETER valaonr2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER detvar2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER mailvar2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER edivar2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER priset2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER alla2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER datvar2 AS DATE NO-UNDO.
   DEFINE OUTPUT PARAMETER musz2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR skapa_mtrl.
   DEFINE INPUT PARAMETER TABLE FOR trp_mtrl.
   DEFINE OUTPUT PARAMETER TABLE FOR tidut.
   DEFINE INPUT PARAMETER TABLE FOR kon_val.
   DEFINE INPUT PARAMETER delbest2 AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR felmeddftptemp.
   EMPTY TEMP-TABLE mtrl_temp NO-ERROR. 
   EMPTY TEMP-TABLE mtrl_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE uppl_temp NO-ERROR. 
   EMPTY TEMP-TABLE grupp_temp NO-ERROR. 
   EMPTY TEMP-TABLE grupp_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE lin_upp NO-ERROR. 
   EMPTY TEMP-TABLE skydd_temp NO-ERROR. 
   EMPTY TEMP-TABLE skydd_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE tidut NO-ERROR. 
   ASSIGN
   globforetag = globforetag2
   bestoff = bestoff2
   vald_lev = vald_lev2
   kalkrow = kalkrow2
   valaonr =  valaonr2  
   valomrade = valomrade2
   priset =   priset2   
   detvar =   detvar2   
   mailvar =  mailvar2  
   edivar =   edivar2
   alla = alla2
   datvar = datvar2
   delbest = delbest2
   epostvar = epostvar2.  
   FIND FIRST skapa_mtrl NO-LOCK NO-ERROR. 
   
   FIND FIRST LEVERANTOR WHERE LEVERANTOR.LEVKOD = vald_lev NO-LOCK NO-ERROR.                                                      
   
   str="=====". 
   str1 ="*****".  
   str0 = "-----".     
   RUN skapa_UI.      
   /*FOR EACH mtrlbuff WHERE NO-LOCK:
      MESSAGE "s" mtrlbuff.enr mtrlbuff.num mtrlbuff.antal mtrlbuff.levkod VIEW-AS ALERT-BOX.
   END.*/
   
   RUN skapatempel_UI.      
   RUN xmlel_UI.   
   
   IF namndb() = "UTBI" THEN RETURN.
   
   IF globforetag = "sund" OR globforetag = "SNAT" OR  globforetag = "celpa" THEN DO:     
   
      RUN skickael_UI.
   END.
   musz2 = musz.
END PROCEDURE.


PROCEDURE skickael_UI :
   IF namndb() = "UTBI" THEN RETURN.
   IF globforetag = "SUND" OR globforetag = "SNAT"  THEN DO: 
      /*Skickar beställning med FTP*/
      RUN FTPFILE.P (INPUT "esxmlcustomer", 
                     INPUT "esks45W", 
                     INPUT TRUE, 
                     INPUT 1,
                     INPUT sparfilnamn, 
                     INPUT prognamn2,
                     INPUT "webedi.elektroskandia.se", OUTPUT TABLE felmeddftptemp).                     
      
   END.

   /*IF globforetag = "VAST" OR globforetag = "BORL" OR globforetag = "SUND" OR globforetag = "SNAT" THEN DO: 
      IF globforetag = "VAST"  OR globforetag = "CBORL"  THEN DO: 
         /*Skickar beställning med FTP*/
         
         RUN FTPFILE.P (INPUT "vfabftp@ftp.elma.fi", 
                        INPUT "0ms2jpNJ", 
                        INPUT TRUE, 
                        INPUT 1,
                        INPUT prognamn, 
                        INPUT "out/all.invoices/data/" + prognamn2,
                        INPUT "ftp-proxy", OUTPUT TABLE felmeddftptemp).                     
         OUTPUT TO VALUE(prognamn) APPEND.
         FOR EACH felmeddftptemp:
            PUT UNFORMATTED
            TRIM(felmeddftptemp.FELMEDD) + CHR(10).      
         END.
         OUTPUT CLOSE.
      END.
      ELSE IF globforetag = "SUND" OR globforetag = "SNAT"  THEN DO: 
         /*Skickar beställning med FTP*/
         RUN FTPFILE.P (INPUT "vfabftp", 
                        INPUT "0ms2jpNJ", 
                        INPUT TRUE, 
                        INPUT 1,
                        INPUT prognamn, 
                        INPUT "out/all.invoices/data/" + prognamn2,
                        INPUT "ftp.elma.fi", OUTPUT TABLE felmeddftptemp).                     
         OUTPUT TO VALUE(prognamn) APPEND.
         FOR EACH felmeddftptemp:
            PUT UNFORMATTED
            TRIM(felmeddftptemp.FELMEDD) + CHR(10).      
         END.
         OUTPUT CLOSE.
      END.
   END.*/
   FIND FIRST felmeddftptemp NO-LOCK NO-ERROR.
   IF AVAILABLE felmeddftptemp THEN DO:
      IF felmeddftptemp.FELMEDD BEGINS "Fil skickad..." THEN .      
      ELSE DO:      
         FIND FIRST skapa_mtrl NO-LOCK NO-ERROR. 
         prognamn = fildir + "edifel.txt".
         OUTPUT TO VALUE(prognamn) APPEND.
         FOR EACH felmeddftptemp:
            PUT UNFORMATTED            
            TRIM(felmeddftptemp.FELMEDD) + " " + STRING(skapa_mtrl.bestnr) + " " + STRING(TODAY,"9999-99-99") + " " + STRING(TIME,"HH:MM")  + CHR(10).            
         END.
         OUTPUT CLOSE.
      END.
   END.
   ELSE DO:
      CREATE felmeddftptemp.
      ASSIGN felmeddftptemp.FELMEDD = "FTP-funktionen är ej i drift".
   END.
                     
END PROCEDURE.


PROCEDURE anmark_UI :
   DEFINE INPUT PARAMETER anmark AS INTEGER NO-UNDO.
   IF anmark = 1 THEN DO:                  
      CREATE tidut.
      ASSIGN                  
      SUBSTRING(tidut.UT,12) = SUBSTRING(edtext,ednum,edtecken).
   END.  
   ELSE IF anmark = 2 THEN DO:           
      CREATE tidut.
      ASSIGN            
      SUBSTRING(tidut.UT,12) = tidtext.
   END.   
   ELSE IF anmark = 3 THEN DO:           
      CREATE tidut.
      ASSIGN           
      SUBSTRING(tidut.UT,12) = SUBSTRING(edtext,1 + ednum2 * edtecken,edtecken).
   END.                         
END PROCEDURE.
 
PROCEDURE depa2_UI :

   {DEPA2TRP.I}
END PROCEDURE.

PROCEDURE depa3_UI :

   {DEPA3TRP.I}
END PROCEDURE.

PROCEDURE depa_UI :

   {DEPATRP.I} 
END PROCEDURE.


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ett_UI WINDOW-2 
PROCEDURE ett_UI :

   /*ETTTRP.I*/  
   {ETTTRP.I}
END PROCEDURE.



PROCEDURE id_UI :
   
  {IDTRP.I}              
END PROCEDURE.

PROCEDURE kanmark_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/   
   IF globforetag = "gran" OR globforetag = "elpa" THEN DO:
      FIND FIRST uppl_temp WHERE uppl_temp.NUM = mtrl_temp2.NUM NO-LOCK NO-ERROR.
      IF AVAILABLE uppl_temp THEN DO:                                    
         ASSIGN
         retvar = 1 
         ednum = 1    
         ednum3 = LENGTH(uppl_temp.ANMARK)      
         retvar = INDEX(uppl_temp.ANMARK,CHR(10),ednum)
         edtecken = 50   
         edtext = uppl_temp.ANMARK
         tidtext = "".   
         IF ednum3 > 1 THEN DO:
            CREATE tidut.
            kant = kant + 1.
            CREATE tidut.
            kant = kant + 1.
            ASSIGN SUBSTRING(tidut.UT,1) = "Anmärkning:".      
            {ANMARK2.I}  
         END.
      END.
   END.
END PROCEDURE.



PROCEDURE linor_UI :
  
   {LINORTRP.I}  
END PROCEDURE.

PROCEDURE materiel_UI :
  
   CREATE tidut.
   IF SUBSTRING(mtrlbuff.ENR,1,1) = "E" THEN DO:         
      SUBSTRING(tidut.UT,1) = mtrlbuff.ENR.
   END.
   ELSE DO:      
      SUBSTRING(tidut.UT,1) = "E" + mtrlbuff.ENR.
   END.     
   ASSIGN
   SUBSTRING(tidut.UT,13) = SUBSTRING(mtrlbuff.BENAMNING,1,35)
   SUBSTRING(tidut.UT,49) = mtrlbuff.ENHET
   SUBSTRING(tidut.UT,55) = STRING(mtrlbuff.ANTAL,">>>>9").       
   IF numsok = FALSE THEN DO:
      FOR EACH mtrl_temp WHERE mtrl_temp.XKORD = mtrlbuff.XKORD AND
      mtrl_temp.ENR = mtrlbuff.ENR AND mtrl_temp.LEVKOD = mtrlbuff.LEVKOD:
         IF mtrl_temp.MTRLTEXT NE "" THEN DO:
            anmlangd = LENGTH(mtrl_temp.MTRLTEXT).
            CREATE tidut.         
            ASSIGN 
            SUBSTRING(tidut.UT,1) = "Text:" + SUBSTRING(mtrl_temp.MTRLTEXT,1,60).
            tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
            anmlangd = anmlangd - 60.
            IF anmlangd > 0 THEN DO:
               CREATE tidut.
               ASSIGN 
               SUBSTRING(tidut.UT,1) = "Text:" + SUBSTRING(mtrl_temp.MTRLTEXT,61,60).
               tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
               anmlangd = anmlangd - 60.
            END.
            IF anmlangd > 0 THEN DO:
               CREATE tidut.
               ASSIGN 
               SUBSTRING(tidut.UT,1) = "Text:" + SUBSTRING(mtrl_temp.MTRLTEXT,121,60).
               tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
               anmlangd = anmlangd - 60.
            END.
            IF anmlangd > 0 THEN DO:
               CREATE tidut.
               ASSIGN 
               SUBSTRING(tidut.UT,1) = "Text:" + SUBSTRING(mtrl_temp.MTRLTEXT,181,60).
               tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
               anmlangd = anmlangd - 60.
            END.                              
         END.   
      END.
   END.
   ELSE DO:
      FOR EACH mtrl_temp WHERE mtrl_temp.NUM = mtrlbuff.NUM AND
      mtrl_temp.ENR = mtrlbuff.ENR AND mtrl_temp.LEVKOD = mtrlbuff.LEVKOD:
         IF mtrl_temp.MTRLTEXT NE "" THEN DO:
            anmlangd = LENGTH(mtrl_temp.MTRLTEXT).
            CREATE tidut.         
            ASSIGN 
            SUBSTRING(tidut.UT,1) = "Text:" + SUBSTRING(mtrl_temp.MTRLTEXT,1,60).
            tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
            anmlangd = anmlangd - 60.
            IF anmlangd > 0 THEN DO:
               CREATE tidut.
               ASSIGN 
               SUBSTRING(tidut.UT,1) = "Text:" + SUBSTRING(mtrl_temp.MTRLTEXT,61,60).
               tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
               anmlangd = anmlangd - 60.
            END.
            IF anmlangd > 0 THEN DO:
               CREATE tidut.
               ASSIGN 
               SUBSTRING(tidut.UT,1) = "Text:" + SUBSTRING(mtrl_temp.MTRLTEXT,121,60).
               tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
               anmlangd = anmlangd - 60.
            END.
            IF anmlangd > 0 THEN DO:
               CREATE tidut.
               ASSIGN 
               SUBSTRING(tidut.UT,1) = "Text:" + SUBSTRING(mtrl_temp.MTRLTEXT,181,60).
               tidut.UT = REPLACE(tidut.UT,CHR(10)," ").
               anmlangd = anmlangd - 60.
            END.
         END.   
      END.
   END.       
END PROCEDURE.
 
PROCEDURE nedepa2_UI :
 
   {NEDEPA2.I}
END PROCEDURE.

PROCEDURE nedepa3_UI :
 
   {NEDEPA3.I}
END PROCEDURE.

PROCEDURE nedepa_UI :
 
   {NEDEPA.I}
END PROCEDURE.


PROCEDURE rubrik_UI :
   
   CREATE tidut.      
   ASSIGN  
   SUBSTRING(tidut.UT,1) = CAPS(Guru.Konstanter:genk)                                                                          
   SUBSTRING(tidut.UT,13) = "BENÄMNING"                     
   /*SUBSTRING(tidut.UT,49) = "NETTOPRIS"*/         
   SUBSTRING(tidut.UT,49) = "ENHET"
   SUBSTRING(tidut.UT,55) = "ANTAL".
   /*SUBSTRING(tidut.UT,71) = "SUMMA".*/           
   CREATE tidut.         
END PROCEDURE.
 
PROCEDURE skapa_UI :
   {SKAPATRP.I}         
   /*CREATE tidut. 
   ASSIGN SUBSTRING(tidut.UT,1) = "<Packningsbeskrivning>".
   IF globforetag = "GKAL" THEN musz = musz.
   ELSE DO:   
      IF detvar = TRUE THEN DO:        
         {SKAPATRP.I}         
      END.   
   END. */
END PROCEDURE.
 
PROCEDURE skydd_UI :
/*
   {SKYDDTRP.I}
   */
END PROCEDURE.


 
PROCEDURE tva_UI :

   {TVATRP.I}
END PROCEDURE.
 
PROCEDURE upplag_UI :
   DEFINE VARIABLE nyanm AS CHARACTER NO-UNDO.
   
   IF AVAILABLE BERUPP THEN DO:
      IF INDEX (BERUPP.ANMARK,"$") > 0 THEN nyanm = SUBSTRING(BERUPP.ANMARK,1,INDEX(BERUPP.ANMARK,"$") - 1).
      ELSE nyanm = BERUPP.ANMARK.  
      ASSIGN
      retvar = 1
      ednum = 1
      ednum3 = LENGTH(nyanm)
      retvar = INDEX(nyanm,CHR(10),ednum)
      edtecken = 50
      edtext = nyanm
      tidtext = "".  
      {ANMARK2.I}                             
   END.   
END PROCEDURE.

PROCEDURE skapatempel_UI :
   
   CREATE ProjectOrder.
   ASSIGN
   ProjectOrder.ut =   "".
   CREATE tempheader.
   ASSIGN
   tempheader.ut =   "".   
   CREATE tempmessage.
   ASSIGN
   tempmessage.SenderID =   "svallelnat"
   tempmessage.MessageType = "ORDERS"
   tempmessage.ReceiverId  =  "SESKA"
   tempmessage.MessageDate = STRING(TODAY,"9999-99-99").

   FIND FIRST skapa_mtrl NO-LOCK NO-ERROR.
   hjkom = skapa_mtrl.KOM + " Kontaktperson inköp:" + STRING(skapa_mtrl.KIKONTAKT).
   IF skapa_mtrl.KITELE NE "" THEN hjkom = hjkom +  " Tele:" + STRING(skapa_mtrl.KITELE).
   IF skapa_mtrl.KIMOBIL NE "" THEN hjkom = hjkom +  " Mobil:" + STRING(skapa_mtrl.KIMOBIL).    
   hjkom = hjkom + "Kontaktperson teknik:" + STRING(skapa_mtrl.KTKONTAKT).
   IF skapa_mtrl.KTTELE NE "" THEN hjkom = hjkom +  " Tele:" + STRING(skapa_mtrl.KTTELE).
   IF skapa_mtrl.KTMOBIL NE "" THEN hjkom = hjkom +  " Mobil:" + STRING(skapa_mtrl.KTMOBIL).
   
   
   CREATE Order.
   ASSIGN
   Order.BuyerOrderNumber    = TRIM(STRING(skapa_mtrl.bestnr))
   Order.RegistrationDate    = STRING(TODAY,"9999-99-99") 
   Order.ObjectID            = "GRUNDOBJ"      
   Order.CurrencyCode        = "SEK"         
   Order.DeliveryNoteText    = skapa_mtrl.AVISPERS 
   Order.GoodsMarking        = skapa_mtrl.MARK   
   Order.OrderText           = hjkom         
   Order.DeliveryTermCode    = "" 
   Order.DeliveryTermCity    = skapa_mtrl.L3
   Order.SplitDelivery       = "N"
   Order.BuyerInvoiceNumber  = ""
   Order.OrderChange         = "N"    
   Order.AKG                 = "".
   Order.DeliveryNoteText = REPLACE(Order.DeliveryNoteText,CHR(10)," ").   
   Order.GoodsMarking = REPLACE(Order.GoodsMarking,CHR(10)," ").   
   Order.OrderText = REPLACE(Order.OrderText,CHR(10)," ").   
   Order.DeliveryTermCity = REPLACE(Order.DeliveryTermCity,CHR(10)," ").   

   Order.DeliveryNoteText = REPLACE(Order.DeliveryNoteText,CHR(9)," ").   
   Order.GoodsMarking = REPLACE(Order.GoodsMarking,CHR(9)," ").   
   Order.OrderText = REPLACE(Order.OrderText,CHR(9)," ").   
   Order.DeliveryTermCity = REPLACE(Order.DeliveryTermCity,CHR(9)," ").   

   Order.DeliveryNoteText = REPLACE(Order.DeliveryNoteText,CHR(13)," ").   
   Order.GoodsMarking = REPLACE(Order.GoodsMarking,CHR(13)," ").   
   Order.OrderText = REPLACE(Order.OrderText,CHR(13)," ").   
   Order.DeliveryTermCity = REPLACE(Order.DeliveryTermCity,CHR(13)," ").   
   
   FIND FIRST BEREDNING WHERE ROWID(BEREDNING) = kalkrow NO-LOCK NO-ERROR.
   /*FIND FIRST AONRTAB WHERE AONRTAB.AONR = BEREDNING.AONR AND AONRTAB.DELNR = BEREDNING.DELNR  NO-LOCK NO-ERROR.*/
   CREATE buyer. 
   ASSIGN
   buyer.BuyerID     = STRING(skapa_mtrl.KUNDNR,"99999")
   buyer.Name         = skapa_mtrl.FORE
   buyer.Handler      = skapa_mtrl.KIKONTAKT
   buyer.Phone        = skapa_mtrl.KITELE
   buyer.Fax  = skapa_mtrl.FAX.
   ASSIGN
   buyer.MobilePhone  = skapa_mtrl.KIMOBIL
   buyer.Reference    = TRIM(STRING(skapa_mtrl.bestnr))
   buyer.eMailAddress = epostvar
   /*buyer.DAName       = skapa_mtrl.FORE
   buyer.DAStreet     = skapa_mtrl.L1
   buyer.DACity       = skapa_mtrl.L3
   buyer.DAPostalCode = STRING(REPLACE(skapa_mtrl.L2," ",""),"99999")
   buyer.DACountryCode= "SE"
   buyer.FAAddress1   = ""
   buyer.FAAddress2   = ""
   buyer.FAAddress3   = ""
   buyer.FAAddress4   = ""
   buyer.FAAddress5   = ""
   buyer.FAGateCountryCode  = ""*/
   buyer.ProjectName        = BEREDNING.BENAMNING.

   buyer.Name = REPLACE(buyer.Name,CHR(10)," ").  
   buyer.Handler = REPLACE(buyer.Handler,CHR(10)," ").  
   buyer.Phone = REPLACE(buyer.Phone,CHR(10)," ").  
   buyer.Fax = REPLACE(buyer.Fax,CHR(10)," ").  
   buyer.eMailAddress = REPLACE(buyer.eMailAddress,CHR(10)," ").  
   buyer.ProjectName = REPLACE(buyer.ProjectName,CHR(10)," ").  

   buyer.Name = REPLACE(buyer.Name,CHR(9)," ").  
   buyer.Handler = REPLACE(buyer.Handler,CHR(9)," ").  
   buyer.Phone = REPLACE(buyer.Phone,CHR(9)," ").  
   buyer.Fax = REPLACE(buyer.Fax,CHR(9)," ").  
   buyer.eMailAddress = REPLACE(buyer.eMailAddress,CHR(9)," ").  
   buyer.ProjectName = REPLACE(buyer.ProjectName,CHR(9)," ").  

   buyer.Name = REPLACE(buyer.Name,CHR(13)," ").  
   buyer.Handler = REPLACE(buyer.Handler,CHR(13)," ").  
   buyer.Phone = REPLACE(buyer.Phone,CHR(13)," ").  
   buyer.Fax = REPLACE(buyer.Fax,CHR(13)," ").  
   buyer.eMailAddress = REPLACE(buyer.eMailAddress,CHR(13)," ").  
   buyer.ProjectName = REPLACE(buyer.ProjectName,CHR(13)," ").  

   CREATE bDeliveryAddress.
   ASSIGN
   bDeliveryAddress.Name       = skapa_mtrl.FORE
   bDeliveryAddress.Street     = skapa_mtrl.L1
   bDeliveryAddress.City       = skapa_mtrl.L3
   bDeliveryAddress.PostalCode = STRING(REPLACE(skapa_mtrl.L2," ",""),"99999")
   bDeliveryAddress.CountryCode= "SE".

   bDeliveryAddress.Name = REPLACE(bDeliveryAddress.Name,CHR(10)," ").  
   bDeliveryAddress.Street = REPLACE(bDeliveryAddress.Street,CHR(10)," ").  
   bDeliveryAddress.City = REPLACE(bDeliveryAddress.City,CHR(10)," ").  

   bDeliveryAddress.Name = REPLACE(bDeliveryAddress.Name,CHR(9)," ").  
   bDeliveryAddress.Street = REPLACE(bDeliveryAddress.Street,CHR(9)," ").  
   bDeliveryAddress.City = REPLACE(bDeliveryAddress.City,CHR(9)," ").  

   bDeliveryAddress.Name = REPLACE(bDeliveryAddress.Name,CHR(13)," ").  
   bDeliveryAddress.Street = REPLACE(bDeliveryAddress.Street,CHR(13)," ").  
   bDeliveryAddress.City = REPLACE(bDeliveryAddress.City,CHR(13)," ").  

   CREATE bForeignDeliveryAddress.
   ASSIGN
   bForeignDeliveryAddress.Address1   = ""
   bForeignDeliveryAddress.Address2   = ""
   bForeignDeliveryAddress.Address3   = ""
   bForeignDeliveryAddress.Address4   = ""
   bForeignDeliveryAddress.Address5   = ""
   bForeignDeliveryAddress.GateCountryCode  = "".

   
   CREATE seller.
   ASSIGN
   seller.SellerID   = "ELEKTROSKANDIA"
   seller.Name       = "Elektroskandia AB"
   seller.Handler    = skapa_mtrl.LKONTAKT
   seller.Phone      = SUBSTRING(skapa_mtrl.LTELE,1,19)
   seller.Fax        = SUBSTRING(skapa_mtrl.LTELE,20).
   seller.Handler = REPLACE(seller.Handler,CHR(10)," ").  
   seller.Phone = REPLACE(seller.Phone,CHR(10)," ").  
   seller.Fax = REPLACE(seller.Fax,CHR(10)," ").  

   seller.Handler = REPLACE(seller.Handler,CHR(9)," ").  
   seller.Phone = REPLACE(seller.Phone,CHR(9)," ").  
   seller.Fax = REPLACE(seller.Fax,CHR(9)," ").  

   seller.Handler = REPLACE(seller.Handler,CHR(13)," ").  
   seller.Phone = REPLACE(seller.Phone,CHR(13)," ").  
   seller.Fax = REPLACE(seller.Fax,CHR(13)," ").  


   FOR EACH BERUPP WHERE BERUPP.AONR = valaonr AND
   BERUPP.OMRADE = valomrade USE-INDEX OMR NO-LOCK:
      FIND FIRST mtrl_temp2 WHERE mtrl_temp2.UPPLAG = BERUPP.UPPLAG AND mtrl_temp2.LEVKOD = vald_lev NO-LOCK NO-ERROR.
      IF AVAILABLE mtrl_temp2 THEN DO:
         CREATE passage. 
         ASSIGN
         passage.PassageID     = STRING(BERUPP.UPPLAG)
         passage.PassageName   = BERUPP.Adress
         passage.Infotext      = BERUPP.ANMARK.
         passage.PassageName = REPLACE(passage.PassageName,CHR(10)," ").  
         passage.Infotext = REPLACE(passage.Infotext,CHR(10)," ").  

         passage.PassageName = REPLACE(passage.PassageName,CHR(9)," ").  
         passage.Infotext = REPLACE(passage.Infotext,CHR(9)," ").  

         passage.PassageName = REPLACE(passage.PassageName,CHR(13)," ").  
         passage.Infotext = REPLACE(passage.Infotext,CHR(13)," ").  
         CREATE DeliveryAddress.
         ASSIGN
         DeliveryAddress.PassageID     = STRING(BERUPP.UPPLAG)
         DeliveryAddress.Name        = SUBSTRING(BERUPP.Adress,1,35)
         DeliveryAddress.Street      = SUBSTRING(BERUPP.Adress,35,35)
         DeliveryAddress.City        = ""
         DeliveryAddress.PostalCode  = ""
         DeliveryAddress.CountryCode = "".
         DeliveryAddress.Name = REPLACE(DeliveryAddress.Name,CHR(10)," ").  
         DeliveryAddress.Street = REPLACE(DeliveryAddress.Street,CHR(10)," ").  

         DeliveryAddress.Name = REPLACE(DeliveryAddress.Name,CHR(9)," ").  
         DeliveryAddress.Street = REPLACE(DeliveryAddress.Street,CHR(9)," ").  

         DeliveryAddress.Name = REPLACE(DeliveryAddress.Name,CHR(13)," ").  
         DeliveryAddress.Street = REPLACE(DeliveryAddress.Street,CHR(13)," ").  
         CREATE ForeignDeliveryAddress.
         ASSIGN
         ForeignDeliveryAddress.PassageID     = STRING(BERUPP.UPPLAG)
         ForeignDeliveryAddress.Address1    = ""
         ForeignDeliveryAddress.Address2    = ""
         ForeignDeliveryAddress.Address3    = ""
         ForeignDeliveryAddress.Address4    = ""
         ForeignDeliveryAddress.Address5    = ""
         ForeignDeliveryAddress.GateCountryCode = "" .
   
         /*passage.DAName        = skapa_mtrl.FORE
         passage.DAStreet      = BERUPP.Address
         passage.DACity        = ""
         passage.DAPostalCode  = ""
         passage.DACountryCode = ""
         passage.FAAddress1    = ""
         passage.FAAddress2    = ""
         passage.FAAddress3    = ""
         passage.FAAddress4    = ""
         passage.FAAddress5    = ""
         passage.FAGateCountryCode = "" .*/
      END.
   END.
   FIND FIRST mtrl_temp2 WHERE mtrl_temp2.UPPLAG = ? AND mtrl_temp2.LEVKOD = vald_lev NO-LOCK NO-ERROR.
   IF AVAILABLE mtrl_temp2 THEN DO:  
      CREATE passage. 
      ASSIGN
      passage.PassageID     = "Ingen"
      passage.PassageName   = "Materiel ej kopplat till upplag"
      passage.Infotext       = "Materiel ej kopplat till upplag".
      CREATE DeliveryAddress.
      ASSIGN
      DeliveryAddress.PassageID     = "Ingen"
      DeliveryAddress.Name        = skapa_mtrl.FORE
      DeliveryAddress.Street      = ""
      DeliveryAddress.City        = ""
      DeliveryAddress.PostalCode  = ""
      DeliveryAddress.CountryCode = "".
      DeliveryAddress.Name = REPLACE(DeliveryAddress.Name,CHR(10)," ").  
      DeliveryAddress.Name = REPLACE(DeliveryAddress.Name,CHR(9)," ").  
      DeliveryAddress.Name = REPLACE(DeliveryAddress.Name,CHR(13)," ").  
      CREATE ForeignDeliveryAddress.
      ASSIGN
      ForeignDeliveryAddress.PassageID   = "Ingen"
      ForeignDeliveryAddress.Address1    = ""
      ForeignDeliveryAddress.Address2    = ""
      ForeignDeliveryAddress.Address3    = ""
      ForeignDeliveryAddress.Address4    = ""
      ForeignDeliveryAddress.Address5    = ""
      ForeignDeliveryAddress.GateCountryCode = "" .

   END.
     
   FOR EACH uppl_temp  NO-LOCK:
      FIND FIRST id_temp WHERE id_temp.NUM = uppl_temp.NUM NO-LOCK NO-ERROR.
      FIND FIRST passage WHERE passage.PassageID = STRING(uppl_temp.UPPLAG) NO-LOCK NO-ERROR.
      hjid = "".
      /*FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = id_temp.GRUPP USE-INDEX KOD NO-LOCK NO-ERROR.
      IF AVAILABLE BBENAMNING THEN DO:      
          IF BBENAMNING.ID1 NE "" AND STRING(id_temp.FRI1) NE "" THEN hjid = BBENAMNING.ID1 + ": " + STRING(id_temp.FRI1) + " ".
      END.*/ 
      IF AVAILABLE id_temp THEN DO:
         FIND FIRST BBENAMNING WHERE BBENAMNING.KONSKOD = id_temp.GRUPP USE-INDEX KOD NO-LOCK NO-ERROR.
         IF AVAILABLE BBENAMNING  THEN DO:
             IF BBENAMNING.ID2 NE "" AND STRING(id_temp.FRI2) NE "" THEN hjid = hjid +  BBENAMNING.ID2 + ":" + " " + STRING(id_temp.FRI2) + " ".
         END.
         IF id_temp.FRI3 NE "" THEN DO:      
            IF globforetag = "GRAN" OR globforetag = "GKAL" THEN DO:
               hjid = hjid +  "Littera" + ":" + " " + STRING(id_temp.FRI3) + " ".            
            END.
            ELSE DO:
               hjid = hjid +  "Fri ID" + ":" + " " + STRING(id_temp.FRI3) + " ".            
            END.
         END.      
      END.
      ELSE hjid = "Ingen".
      FIND FIRST mtrl_temp2 WHERE mtrl_temp2.NUM = uppl_temp.NUM AND mtrl_temp2.LEVKOD = vald_lev NO-LOCK NO-ERROR.
      IF AVAILABLE mtrl_temp2 THEN DO:
         CREATE buildingpart.  
         IF uppl_temp.UPPLAG = ?  THEN  buildingpart.PassageID        = "Ingen".
         ELSE buildingpart.PassageID        = STRING(uppl_temp.UPPLAG).      
         IF NOT AVAILABLE id_temp  THEN DO: 
            ASSIGN
            buildingpart.BuildingPartID   = "Ingen"
            buildingpart.PartName         = "Ingen".
         END.
         ELSE DO:
            ASSIGN
            buildingpart.BuildingPartID   = STRING(id_temp.NUM).
            buildingpart.PartName         = hjid.
         END.
         /*buildingpart.PartName         = hjid + " " + STRING(id_temp.FRI2) + "  Fri id: " + id_temp.FRI3*/            
         FIND FIRST KONSTGRUPP WHERE KONSTGRUPP.KONSKOD = uppl_temp.GRUPP NO-LOCK NO-ERROR.
         buildingpart.Infotext         = KONSTGRUPP.BENAMNING + " " + uppl_temp.F1 + " " + uppl_temp.ANMARK.
         buildingpart.PartName = REPLACE(buildingpart.PartName,CHR(10)," ").  
         buildingpart.Infotext = REPLACE(buildingpart.Infotext,CHR(10)," ").  
         buildingpart.PartName = REPLACE(buildingpart.PartName,CHR(9)," ").  
         buildingpart.Infotext = REPLACE(buildingpart.Infotext,CHR(9)," ").  
         buildingpart.PartName = REPLACE(buildingpart.PartName,CHR(13)," ").  
         buildingpart.Infotext = REPLACE(buildingpart.Infotext,CHR(13)," ").  
      END.      
   END.
   /*FOR EACH mtrl_temp BY mtrl_temp.enr :
      MESSAGE "temp" mtrl_temp.enr mtrl_temp.antal  mtrl_temp.levkod mtrl_temp.num  mtrl_temp.upplag  VIEW-AS ALERT-BOX.
   END.  
   FOR EACH mtrl_temp2 WHERE mtrl_temp2.levkod = vald_lev BY mtrl_temp2.enr :
      MESSAGE "temp2" mtrl_temp2.enr mtrl_temp2.antal  mtrl_temp2.levkod mtrl_temp2.num mtrl_temp2.klar mtrl_temp2.upplag  VIEW-AS ALERT-BOX.
   END.  */
         

   hjrakn = 1.
   FOR EACH mtrl_temp2 WHERE mtrl_temp2.ANTAL > 0 AND mtrl_temp2.LEVKOD = vald_lev  BY mtrl_temp2.UPPLAG BY mtrl_temp2.NUM BY mtrl_temp2.ENR:
      FIND FIRST id_temp WHERE id_temp.NUM = mtrl_temp2.NUM NO-LOCK NO-ERROR.
      FIND FIRST passage WHERE passage.PassageID = STRING(mtrl_temp2.UPPLAG) NO-LOCK NO-ERROR.

      FIND FIRST  mtrl_temp WHERE mtrl_temp.NUM = mtrl_temp2.NUM AND
      mtrl_temp.ENR = mtrl_temp2.ENR AND mtrl_temp.LEVKOD = mtrl_temp2.LEVKOD NO-ERROR.
          
      CREATE OrderRows.  

      IF mtrl_temp2.UPPLAG = ?  THEN  OrderRows.PassageID        = "Ingen".
      ELSE OrderRows.PassageID        = STRING(mtrl_temp2.UPPLAG).      
      
      IF NOT AVAILABLE id_temp THEN DO:
         /*om konstruktionen ej identifierad*/
         OrderRows.BuildingPartID           = "Ingen".
      END.
      ELSE DO:
         OrderRows.BuildingPartID           = STRING(mtrl_temp2.NUM).
      END.
      ASSIGN
      OrderRows.BuyerRowNumber           = STRING(hjrakn)
      OrderRows.BuyerArticleNumber       = ""
      OrderRows.BuyerArticleDescription  = ""
      OrderRows.SellerRowNumber          = STRING(hjrakn)
      OrderRows.SellerArticleNumber      = mtrl_temp2.ENR
      OrderRows.SellerArticleDescription = mtrl_temp2.BENAMNING
      OrderRows.OrderedQuantity          = STRING(mtrl_temp2.ANTAL)
      OrderRows.UnitCode                 = SUBSTRING(mtrl_temp2.ENHET,1,2)
      OrderRows.Price                    = STRING(mtrl_temp2.PRIS)
      OrderRows.PriceType                = "1"
      OrderRows.RequestedDeliveryDate    = STRING(skapa_mtrl.DATUM,"9999-99-99")
      OrderRows.Discount                 = ""
      OrderRows.NewRequestedDeliveryDate  = ""
      OrderRows.DynamicArticle            = "".
      IF SUBSTRING(OrderRows.SellerArticleNumber,1,1) NE "E"  THEN OrderRows.SellerArticleNumber = "E" + OrderRows.SellerArticleNumber.
      IF AVAILABLE mtrl_temp THEN  OrderRows.Comment                = mtrl_temp.MTRLTEXT .
      OrderRows.SellerArticleNumber = REPLACE(OrderRows.SellerArticleNumber,CHR(10)," ").   
      OrderRows.SellerArticleDescription = REPLACE(OrderRows.SellerArticleDescription,CHR(10)," ").   
      OrderRows.RequestedDeliveryDate = REPLACE(OrderRows.RequestedDeliveryDate,CHR(10)," ").   
      OrderRows.Comment = REPLACE(OrderRows.Comment,CHR(10)," ").   

      OrderRows.SellerArticleNumber = REPLACE(OrderRows.SellerArticleNumber,CHR(9)," ").   
      OrderRows.SellerArticleDescription = REPLACE(OrderRows.SellerArticleDescription,CHR(9)," ").   
      OrderRows.RequestedDeliveryDate = REPLACE(OrderRows.RequestedDeliveryDate,CHR(9)," ").   
      OrderRows.Comment = REPLACE(OrderRows.Comment,CHR(9)," ").   

      OrderRows.SellerArticleNumber = REPLACE(OrderRows.SellerArticleNumber,CHR(13)," ").   
      OrderRows.SellerArticleDescription = REPLACE(OrderRows.SellerArticleDescription,CHR(13)," ").   
      OrderRows.RequestedDeliveryDate = REPLACE(OrderRows.RequestedDeliveryDate,CHR(13)," ").   
      OrderRows.Comment = REPLACE(OrderRows.Comment,CHR(13)," ").   

      hjrakn = hjrakn + 1.
   END.
   
   FIND FIRST trp_mtrl WHERE trp_mtrl.ANTAL > 0 AND trp_mtrl.LEVKOD = vald_lev AND
   trp_mtrl.DBEST NE "RETUR" NO-LOCK NO-ERROR.
   IF AVAILABLE trp_mtrl THEN DO:
      FIND FIRST passage WHERE passage.PassageID = "Ingen" NO-LOCK NO-ERROR.
      IF NOT AVAILABLE passage THEN DO:      
         CREATE passage. 
         ASSIGN
         passage.PassageID     = "Ingen"
         passage.PassageName   = "Materiel ej kopplat till upplag"
         passage.Infotext       = "Materiel ej kopplat till upplag".
      END.
      CREATE buildingpart.  
      ASSIGN
      buildingpart.PassageID        = "Ingen"      
      buildingpart.BuildingPartID   = "Depå"
      buildingpart.PartName         = "Till depå"
      buildingpart.Infotext         = "Materiel till depå".
   END.
   FOR EACH trp_mtrl WHERE trp_mtrl.ANTAL > 0 AND trp_mtrl.LEVKOD = vald_lev AND trp_mtrl.DBEST NE "RETUR" BY trp_mtrl.ENR: 
      
      CREATE OrderRows.  
      /*IF trp_mtrl.UPPLAG = ?  THEN  OrderRows.PassageID        = "Ingen".
      ELSE OrderRows.PassageID        = STRING(trp_mtrl.UPPLAG).      */
      OrderRows.PassageID        = "Ingen".
      ASSIGN
      OrderRows.BuildingPartID           = "Depå"
      OrderRows.BuyerRowNumber           = STRING(hjrakn)
      OrderRows.BuyerArticleNumber       = ""
      OrderRows.BuyerArticleDescription  = ""
      OrderRows.SellerRowNumber          = STRING(hjrakn)
      OrderRows.SellerArticleNumber      = trp_mtrl.ENR
      OrderRows.SellerArticleDescription = trp_mtrl.BENAMNING
      OrderRows.OrderedQuantity          = STRING(trp_mtrl.ANTAL)
      OrderRows.UnitCode                 = SUBSTRING(trp_mtrl.ENHET,1,2)
      OrderRows.Price                    = STRING(trp_mtrl.PRIS)
      OrderRows.PriceType                = "1"
      OrderRows.RequestedDeliveryDate    = STRING(skapa_mtrl.DATUM,"9999-99-99")
      OrderRows.Discount                 = ""
      OrderRows.NewRequestedDeliveryDate  = ""
      OrderRows.DynamicArticle            = "".
      IF SUBSTRING(OrderRows.SellerArticleNumber,1,1) NE "E"  THEN OrderRows.SellerArticleNumber = "E" + OrderRows.SellerArticleNumber.
      OrderRows.Comment                = "".
      OrderRows.SellerArticleNumber = REPLACE(OrderRows.SellerArticleNumber,CHR(10)," ").   
      OrderRows.SellerArticleDescription = REPLACE(OrderRows.SellerArticleDescription,CHR(10)," ").   
      OrderRows.RequestedDeliveryDate = REPLACE(OrderRows.RequestedDeliveryDate,CHR(10)," ").   

      OrderRows.SellerArticleNumber = REPLACE(OrderRows.SellerArticleNumber,CHR(9)," ").   
      OrderRows.SellerArticleDescription = REPLACE(OrderRows.SellerArticleDescription,CHR(9)," ").   
      OrderRows.RequestedDeliveryDate = REPLACE(OrderRows.RequestedDeliveryDate,CHR(9)," ").   

      OrderRows.SellerArticleNumber = REPLACE(OrderRows.SellerArticleNumber,CHR(13)," ").   
      OrderRows.SellerArticleDescription = REPLACE(OrderRows.SellerArticleDescription,CHR(13)," ").   
      OrderRows.RequestedDeliveryDate = REPLACE(OrderRows.RequestedDeliveryDate,CHR(13)," ").         
      hjrakn = hjrakn + 1.
   END.
   
   FOR EACH BERUPP WHERE BERUPP.AONR = valaonr AND
   BERUPP.OMRADE = valomrade USE-INDEX OMR NO-LOCK.
      FIND FIRST lin_upp WHERE lin_upp.UPPLAG = BERUPP.UPPLAG AND
      lin_upp.LEVKOD = vald_lev NO-LOCK NO-ERROR.
      IF AVAILABLE lin_upp THEN DO: 
         CREATE buildingpart.  
         ASSIGN
         buildingpart.PassageID        = STRING(BERUPP.UPPLAG)
         buildingpart.BuildingPartID   = "Kabel"
         buildingpart.PartName         = "Linor och kablar till upplag"
         buildingpart.Infotext         = "".
         FOR EACH lin_upp WHERE lin_upp.UPPLAG = BERUPP.UPPLAG AND lin_upp.LEVKOD = vald_lev:
            CREATE OrderRows.  
            ASSIGN
            OrderRows.PassageID        = STRING(BERUPP.UPPLAG)
            OrderRows.BuildingPartID           = "Kabel"
            OrderRows.BuyerRowNumber           = STRING(hjrakn)
            OrderRows.BuyerArticleNumber       = ""
            OrderRows.BuyerArticleDescription  = ""
            OrderRows.SellerRowNumber          = STRING(hjrakn)
            OrderRows.SellerArticleNumber      = lin_upp.ENR
            OrderRows.SellerArticleDescription = lin_upp.BENAMNING
            OrderRows.OrderedQuantity          = STRING(lin_upp.TOTMETER)
            OrderRows.UnitCode                 = SUBSTRING(lin_upp.ENHET,1,2)
            OrderRows.Price                    = STRING(lin_upp.PRIS)
            OrderRows.PriceType                = "1"
            OrderRows.RequestedDeliveryDate    = STRING(skapa_mtrl.DATUM,"9999-99-99")
            OrderRows.Discount                 = ""
            OrderRows.NewRequestedDeliveryDate  = ""
            OrderRows.DynamicArticle            = "".
            IF SUBSTRING(OrderRows.SellerArticleNumber,1,1) NE "E"  THEN OrderRows.SellerArticleNumber = "E" + OrderRows.SellerArticleNumber.
            OrderRows.Comment                = "".
            OrderRows.SellerArticleNumber = REPLACE(OrderRows.SellerArticleNumber,CHR(10)," ").   
            OrderRows.SellerArticleDescription = REPLACE(OrderRows.SellerArticleDescription,CHR(10)," ").   
            OrderRows.RequestedDeliveryDate = REPLACE(OrderRows.RequestedDeliveryDate,CHR(10)," ").   
            OrderRows.Comment = REPLACE(OrderRows.Comment,CHR(10)," ").   

            OrderRows.SellerArticleNumber = REPLACE(OrderRows.SellerArticleNumber,CHR(9)," ").   
            OrderRows.SellerArticleDescription = REPLACE(OrderRows.SellerArticleDescription,CHR(9)," ").   
            OrderRows.RequestedDeliveryDate = REPLACE(OrderRows.RequestedDeliveryDate,CHR(9)," ").   
            OrderRows.Comment = REPLACE(OrderRows.Comment,CHR(9)," ").   

            OrderRows.SellerArticleNumber = REPLACE(OrderRows.SellerArticleNumber,CHR(13)," ").   
            OrderRows.SellerArticleDescription = REPLACE(OrderRows.SellerArticleDescription,CHR(13)," ").   
            OrderRows.RequestedDeliveryDate = REPLACE(OrderRows.RequestedDeliveryDate,CHR(13)," ").   
            OrderRows.Comment = REPLACE(OrderRows.Comment,CHR(13)," ").   

            hjrakn = hjrakn + 1.
         END.
      END.
   END.


   /*FOR EACH OrderRows BY OrderRows.PassageID BY OrderRows.BuildingPartID:
      MESSAGE "to"  OrderRows.BuyerRowNumber  OrderRows.SellerArticleNumber OrderRows.OrderedQuantity OrderRows.PassageID OrderRows.BuildingPartID VIEW-AS ALERT-BOX.
   END. */

END PROCEDURE.

PROCEDURE xmlel_UI :
   DEFINE VARIABLE extraradut AS CHARACTER NO-UNDO.
   DEFINE VARIABLE ejnivtab AS CHARACTER NO-UNDO.
   ejnivtab = "tempheader,ProjectOrder".
   extraradut = "ProjectName".
   {UTXKMLKOLL.I}
   RUN VALUE(vxmlpro) PERSISTENT SET dynxml (INPUT okand).
   EMPTY TEMP-TABLE tempnamn NO-ERROR. 
   RUN uttab_UI.   
   /*OBS ! skapa biblioteken gurubest och bestkopia innan start*/
   fildir = SESSION:TEMP-DIRECTORY + "gurubest" + "\".
   /*{SESSIONTEMPDIR.I}
   IF SESSION:CLIENT-TYPE = "WEBCLIENT" THEN fildir = webclienttempdir.*/
   FIND FIRST skapa_mtrl NO-LOCK NO-ERROR. 
   filnamn = fildir + STRING(skapa_mtrl.bestnr) + ".xml".     
   prognamn2 = STRING(skapa_mtrl.bestnr) + ".xml".     
   filnamn = REPLACE(filnamn,",","").
   sparfilnamn = filnamn.
   xmlsparfilnamn = "".
   xmlsparfilnamn = SUBSTRING(filnamn,R-INDEX(filnamn,"\") + 1). 
   RUN creatnodniv_UI IN dynxml (INPUT 5).
   RUN xmlutstartniv_UI IN dynxml (INPUT "ns0:ProjectOrders",INPUT sparfilnamn,INPUT "http://Elektroskandia.ESXML.ProjectOrder",INPUT "xmlns:ns0").
                                  
   FIND FIRST tempnamn WHERE tempnamn.NODTAB = "ProjectOrder" NO-LOCK NO-ERROR.
   IF AVAILABLE tempnamn THEN DO:
      ASSIGN
      nivar = 1.
      kommandoquery = "FOR EACH " + tempnamn.NODTAB.
      RUN nivut_UI IN dynxml (INPUT nivar,INPUT tempnamn.NAMNH,INPUT kommandoquery,INPUT tempnamn.NODTAB,INPUT ejnivtab,INPUT extraradut).                     
   END.
   FOR EACH tempnamn:      
      IF tempnamn.NODTAB = "tempheader" THEN DO:      
         ASSIGN
         nivar = 2.
         kommandoquery = "FOR EACH " + tempnamn.NODTAB.
         RUN nivut_UI IN dynxml (INPUT nivar,INPUT tempnamn.NAMNH,INPUT kommandoquery,INPUT "Header",INPUT ejnivtab,INPUT extraradut).                     
      END.
      ELSE IF tempnamn.NODTAB = "tempmessage" THEN DO:       
         ASSIGN
         nivar = 3.
         kommandoquery = "FOR EACH " + tempnamn.NODTAB.
         RUN nivut_UI IN dynxml (INPUT nivar,INPUT tempnamn.NAMNH,INPUT kommandoquery,INPUT "Message",INPUT ejnivtab,INPUT extraradut).                     
      END.
      ELSE IF tempnamn.NODTAB = "Order"  OR  tempnamn.NODTAB = "Seller" OR tempnamn.NODTAB = "Buyer" 
      THEN DO:   
         ASSIGN
         nivar = 3.
         kommandoquery = "FOR EACH " + tempnamn.NODTAB.
         RUN nivut_UI IN dynxml (INPUT nivar,INPUT tempnamn.NAMNH,INPUT kommandoquery,INPUT tempnamn.NODTAB,INPUT ejnivtab,INPUT extraradut ).                     
      END.
      ELSE IF tempnamn.NODTAB = "bDeliveryAddress"  THEN DO:       
         ASSIGN
          nivar = 4.
          kommandoquery = "FOR EACH " + tempnamn.NODTAB.
         RUN nivut_UI IN dynxml (INPUT nivar,INPUT tempnamn.NAMNH,INPUT kommandoquery,INPUT "DeliveryAddress",INPUT ejnivtab,INPUT extraradut).                              
      END.
      ELSE IF  tempnamn.NODTAB = "bForeignDeliveryAddress" THEN DO:       
         ASSIGN
         nivar = 4.
         kommandoquery = "FOR EACH " + tempnamn.NODTAB.
         RUN nivut_UI IN dynxml (INPUT nivar,INPUT tempnamn.NAMNH,INPUT kommandoquery,INPUT "ForeignDeliveryAddress",INPUT ejnivtab,INPUT extraradut). 
         RUN extraut_UI IN dynxml (INPUT 3,INPUT "ProjectName").
         
      END.
   END.
   FOR EACH tempnamn WHERE  tempnamn.NODTAB = "Passage":      
      ASSIGN
      nivar = 2.
      kommandoquery = "FOR EACH Passage  NO-LOCK".
      kommandoquery2 = "FOR EACH buildingpart  WHERE buildingpart.PassageID = '".
      kommandoquery3 = "FOR EACH OrderRows  WHERE OrderRows.PassageID = '".
      kommandoquery11 = "FOR EACH DeliveryAddress  WHERE DeliveryAddress.PassageID = '".
      kommandoquery12 = "FOR EACH ForeignDeliveryAddress  WHERE ForeignDeliveryAddress.PassageID = '".
      RUN inladd_UI IN dynxml 
      (INPUT kommandoquery2, INPUT kommandoquery3,INPUT kommandoquery11,INPUT kommandoquery12, INPUT "PassageID",INPUT "BuildingPartID",
      INPUT TEMP-TABLE buildingpart:DEFAULT-BUFFER-HANDLE, INPUT TEMP-TABLE OrderRows:DEFAULT-BUFFER-HANDLE,
      INPUT TEMP-TABLE DeliveryAddress:DEFAULT-BUFFER-HANDLE,INPUT TEMP-TABLE ForeignDeliveryAddress:DEFAULT-BUFFER-HANDLE).
      RUN huvnivut_UI IN dynxml (INPUT nivar,INPUT TEMP-TABLE Passage:DEFAULT-BUFFER-HANDLE,INPUT kommandoquery).            
   END. 
   
   
   RUN xmlutslut_UI IN dynxml.
   RUN xmlslut_UI IN dynxml.
    
   filnamnsp = fildir + "bestkopia\" + STRING(skapa_mtrl.bestnr) + STRING(TODAY,"99999999") + string(TIME) + ".xml".     
   OS-COPY VALUE(filnamn) VALUE(filnamnsp).
   

   EMPTY TEMP-TABLE tempnamn NO-ERROR.    
   /*sparfilnamn = filnamnuppxml. */
   IF VALID-HANDLE(dynxml) THEN DELETE PROCEDURE dynxml NO-ERROR.

END PROCEDURE.




PROCEDURE uttab_UI :
   CREATE tempnamn.
   tempnamn.NAMNH = BUFFER ProjectOrder:HANDLE.
   tempnamn.TORGTH = TEMP-TABLE ProjectOrder:HANDLE.
   tempnamn.NODTAB = "ProjectOrder".
   CREATE tempnamn.
   tempnamn.NAMNH = BUFFER tempheader:HANDLE.
   tempnamn.TORGTH = TEMP-TABLE tempheader:HANDLE.
   tempnamn.NODTAB = "tempheader".
   CREATE tempnamn.
   tempnamn.NAMNH = BUFFER tempmessage:HANDLE.
   tempnamn.TORGTH = TEMP-TABLE tempmessage:HANDLE.
   tempnamn.NODTAB = "tempmessage".
   CREATE tempnamn.
   tempnamn.NAMNH = BUFFER Order:HANDLE.
   tempnamn.TORGTH = TEMP-TABLE Order:HANDLE.
   tempnamn.NODTAB = "Order".
   CREATE tempnamn.        
   tempnamn.NAMNH = BUFFER Buyer:HANDLE.   
   tempnamn.TORGTH = TEMP-TABLE Buyer:HANDLE.
   tempnamn.NODTAB = "Buyer".
   CREATE tempnamn.        
   tempnamn.NAMNH = BUFFER bDeliveryAddress:HANDLE.  
   tempnamn.TORGTH = TEMP-TABLE bDeliveryAddress:HANDLE.
   tempnamn.NODTAB = "bDeliveryAddress".
   CREATE tempnamn.        
   tempnamn.NAMNH = BUFFER bForeignDeliveryAddress:HANDLE.  
   tempnamn.TORGTH = TEMP-TABLE bForeignDeliveryAddress:HANDLE.
   tempnamn.NODTAB = "bForeignDeliveryAddress".
   CREATE tempnamn.        
   tempnamn.NAMNH = BUFFER Seller:HANDLE.  
   tempnamn.TORGTH = TEMP-TABLE Seller:HANDLE.
   tempnamn.NODTAB = "Seller".
   CREATE tempnamn.        
   tempnamn.NAMNH = BUFFER Passage:HANDLE.    
   tempnamn.TORGTH = TEMP-TABLE Passage:HANDLE.
   tempnamn.NODTAB = "Passage".
   CREATE tempnamn.        
   tempnamn.NAMNH = BUFFER BuildingPart:HANDLE.  
   tempnamn.TORGTH = TEMP-TABLE BuildingPart:HANDLE.
   tempnamn.NODTAB = "BuildingPart".
   CREATE tempnamn.        
   tempnamn.NAMNH = BUFFER OrderRows:HANDLE.
   tempnamn.TORGTH = TEMP-TABLE OrderRows:HANDLE.
   tempnamn.NODTAB = "OrderRows".
         
END PROCEDURE.



PROCEDURE kskrubr_UI:
   ASSIGN                  
   SUBSTRING(tidut.UT,1) = "Position"
   SUBSTRING(tidut.UT,10) = "Kablar"
   SUBSTRING(tidut.UT,20) = "Ansl.don"
   SUBSTRING(tidut.UT,30) = "E-nummer"
   SUBSTRING(tidut.UT,40) = "Nollklämma"
   SUBSTRING(tidut.UT,55) = "Säkring"
   SUBSTRING(tidut.UT,65) = "Koppl.typ".
   CREATE tidut.
   kant = kant + 1.
   skapkab = 1. 
   FOR EACH BERVAL WHERE BERVAL.AONR = valaonr
   AND BERVAL.OMRADE = valomrade AND 
   BERVAL.NUM = uppl_temp.NUM NO-LOCK BY BERVAL.SKAPNUM:                        
       IF BERVAL.F2 NE "" THEN DO:                        
          ASSIGN                  
          SUBSTRING(tidut.UT,1) = STRING(skapkab)
          SUBSTRING(tidut.UT,10) = TRIM(BERVAL.F2)
          SUBSTRING(tidut.UT,20) = TRIM(BERVAL.F3).
          FIND FIRST MTRLBER WHERE MTRLBER.KTYPKOD = BERVAL.KTYPKOD
          AND MTRLBER.F2 = BERVAL.F3 AND 
          MTRLBER.MODUL > 0 NO-LOCK NO-ERROR.
          IF AVAILABLE MTRLBER THEN DO:
             SUBSTRING(tidut.UT,30) = MTRLBER.ENR.
             IF MTRLBER.TYPBER = TRUE THEN DO:
                SUBSTRING(tidut.UT,65) = STRING(BERVAL.TYP).
             END.
          END.                           
          ASSIGN
          SUBSTRING(tidut.UT,40) = TRIM(BERVAL.F4)
          SUBSTRING(tidut.UT,55) = TRIM(BERVAL.F5).
          skapkab = skapkab + 1.
          CREATE tidut.
          kant = kant + 1.
       END.
    END.
END PROCEDURE.

PROCEDURE mstnrubr_UI:
   ASSIGN                  
   SUBSTRING(tidut.UT,1) = "Position"
   SUBSTRING(tidut.UT,10) = "Kablar"
   SUBSTRING(tidut.UT,20) = "HSP-förd"
   SUBSTRING(tidut.UT,30) = "LSP-förd"
   SUBSTRING(tidut.UT,40) = "E-nummer"
   SUBSTRING(tidut.UT,55) = "Säkring" .
   CREATE tidut.
   kant = kant + 1.
   skapkab = 1. 
   FOR EACH BERVAL WHERE BERVAL.AONR = valaonr
   AND BERVAL.OMRADE = valomrade AND 
   BERVAL.NUM = uppl_temp.NUM NO-LOCK BY BERVAL.SKAPNUM:                        
       IF BERVAL.F5 NE "" THEN DO:                        
          ASSIGN                  
          SUBSTRING(tidut.UT,1) = STRING(skapkab)
          SUBSTRING(tidut.UT,10) = TRIM(BERVAL.F5)
          SUBSTRING(tidut.UT,20) = TRIM(BERVAL.F2)
          SUBSTRING(tidut.UT,30) = TRIM(BERVAL.F3).
         
          IF BERVAL.F2 NE "" THEN DO:
              FIND FIRST MTRLBER WHERE MTRLBER.KTYPKOD = BERVAL.KTYPKOD
              AND MTRLBER.F1 = BERVAL.F2 AND 
              MTRLBER.MODUL > 0 NO-LOCK NO-ERROR.
              IF AVAILABLE MTRLBER THEN DO:
                 SUBSTRING(tidut.UT,40) = MTRLBER.ENR.
              END.                           
          END.
          ELSE IF BERVAL.F3 NE "" THEN DO:
              FIND FIRST MTRLBER WHERE MTRLBER.KTYPKOD = BERVAL.KTYPKOD
              AND MTRLBER.F2 = BERVAL.F3 AND 
              MTRLBER.MODUL > 0 NO-LOCK NO-ERROR.
              IF AVAILABLE MTRLBER THEN DO:
                 SUBSTRING(tidut.UT,40) = MTRLBER.ENR.
              END.                           
          END.
          SUBSTRING(tidut.UT,55) = TRIM(BERVAL.F4).
          skapkab = skapkab + 1.
          CREATE tidut.
          kant = kant + 1.
       END.
    END.
END PROCEDURE.


