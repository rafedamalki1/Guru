/*SKAPMTRLAPPJ.P*/
&Scoped-define NEW 
&Scoped-define SHARED 
{STARTFORAPP.I}
{KONSTRMTRL.I}
{LEVTEMP.I}
{MTRLTEMP.I}
{SMTRL.I}
{ANMARKTEMP.I}
{BERANN.I} 
{BERBILD.I}

DEFINE VARIABLE varbild AS CHARACTER NO-UNDO.
DEFINE VARIABLE raknare AS INTEGER NO-UNDO.
DEFINE VARIABLE enrspar AS CHARACTER NO-UNDO.
DEFINE VARIABLE countvar AS INTEGER NO-UNDO.

 
PROCEDURE enrhmt_UI :
   DEFINE INPUT PARAMETER posok AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER begvar AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER vald_lev2 AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER felmedd AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR mtrltemp.
   felmedd = "".
   IF posok = "*" THEN DO:
      FOR EACH emtrltemp WHERE emtrltemp.LEVKOD = vald_lev2 AND emtrltemp.KALKNR = 0 USE-INDEX LEV NO-LOCK:
         CREATE mtrltemp.
         BUFFER-COPY emtrltemp TO mtrltemp.
         mtrltemp.ENHET = LC(mtrltemp.ENHET).
         DELETE emtrltemp.         
      END.
      RETURN.
   END.
   IF begvar = ? THEN DO:
      RUN starwars_UI (OUTPUT begvar,OUTPUT felmedd,INPUT-OUTPUT posok).
      IF felmedd NE "" THEN RETURN.
   END.
   EMPTY TEMP-TABLE mtrltemp NO-ERROR. 
   
   felmedd = "".
   IF begvar = FALSE THEN DO:
      FOR EACH emtrltemp WHERE emtrltemp.ENR MATCHES posok AND emtrltemp.LEVKOD = vald_lev2
      AND emtrltemp.KALKNR = 0 USE-INDEX LEV NO-LOCK:
         CREATE mtrltemp.
         BUFFER-COPY emtrltemp TO mtrltemp.
         mtrltemp.ENHET = LC(mtrltemp.ENHET).
         DELETE emtrltemp.      
      END.     
   END.
   ELSE DO:
      OPEN QUERY bq FOR EACH emtrltemp WHERE emtrltemp.ENR BEGINS posok AND emtrltemp.LEVKOD = vald_lev2
      AND emtrltemp.KALKNR = 0 USE-INDEX LEV NO-LOCK.
      GET FIRST bq NO-LOCK.
      DO WHILE AVAILABLE(emtrltemp):
         CREATE mtrltemp.
         BUFFER-COPY emtrltemp TO mtrltemp.
         mtrltemp.ENHET = LC(mtrltemp.ENHET).
         DELETE emtrltemp.
         GET NEXT bq NO-LOCK.
      END.
      CLOSE QUERY bq.
   END.
   FIND FIRST mtrltemp NO-LOCK NO-ERROR.
   IF NOT AVAILABLE mtrltemp THEN DO:
      ASSIGN felmedd = "Det finns inget på sökbegreppet".
      RETURN.
   END.      
END PROCEDURE.

PROCEDURE benhmt_UI :
   DEFINE INPUT PARAMETER aosok AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER satsvar AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER begvar AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER vald_lev2 AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER felmedd AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR mtrltemp.
   DEFINE OUTPUT PARAMETER TABLE FOR satstemp.
   felmedd = "".
   IF aosok = "*" THEN DO:
      FOR EACH emtrltemp WHERE emtrltemp.LEVKOD = vald_lev2 AND MTRL.KALKNR = 0 USE-INDEX LEV NO-LOCK:
         CREATE mtrltemp.
         BUFFER-COPY emtrltemp TO mtrltemp.
         mtrltemp.ENHET = LC(mtrltemp.ENHET).
         DELETE emtrltemp.         
      END.
      RETURN.
   END.
   IF begvar = ? THEN DO:
      RUN starwars_UI (OUTPUT begvar,OUTPUT felmedd,INPUT-OUTPUT aosok).
      IF felmedd NE "" THEN RETURN.
   END.
   EMPTY TEMP-TABLE mtrltemp NO-ERROR. 
   EMPTY TEMP-TABLE satstemp NO-ERROR. 
   felmedd = "".
   IF satsvar = FALSE THEN DO:
      IF begvar = FALSE THEN DO:
         FOR EACH emtrltemp WHERE emtrltemp.BENAMNING MATCHES aosok AND MTRL.LEVKOD = vald_lev2
         AND emtrltemp.KALKNR = 0 USE-INDEX BEN NO-LOCK:        
            CREATE mtrltemp.
            BUFFER-COPY emtrltemp TO mtrltemp.
            mtrltemp.ENHET = LC(mtrltemp.ENHET).
            DELETE emtrltemp.            
         END.
      END.   
      ELSE DO:
         FOR EACH emtrltemp WHERE emtrltemp.BENAMNING BEGINS aosok AND MTRL.LEVKOD = vald_lev2
         AND emtrltemp.KALKNR = 0 USE-INDEX BEN NO-LOCK:
            CREATE mtrltemp.
            BUFFER-COPY emtrltemp TO mtrltemp.
            mtrltemp.ENHET = LC(mtrltemp.ENHET).
            DELETE emtrltemp.            
         END.
      END.
      FIND FIRST mtrltemp NO-LOCK NO-ERROR.
      IF NOT AVAILABLE mtrltemp THEN DO:
         ASSIGN felmedd =  "Det finns inget på sökbegreppet.".
         RETURN.
      END.
   END.
   ELSE DO:
      IF begvar = FALSE THEN DO:
         FOR EACH SATS WHERE SATS.BENAMNING MATCHES aosok AND SATS.LEVKOD = vald_lev2
         AND SATS.SATS = TRUE USE-INDEX KOD NO-LOCK:
            CREATE satstemp.
            BUFFER-COPY SATS TO satstemp.
            ASSIGN satstemp.SATSROW = ROWID(SATS).
         END.         
      END.
      ELSE DO:
         FOR EACH SATS WHERE SATS.BENAMNING BEGINS aosok AND SATS.LEVKOD = vald_lev2
         AND SATS.SATS = TRUE USE-INDEX KOD NO-LOCK:
            CREATE satstemp.
            BUFFER-COPY SATS TO satstemp.
            ASSIGN satstemp.SATSROW = ROWID(SATS).          
         END.         
      END.
      FIND FIRST satstemp NO-LOCK NO-ERROR.
      IF NOT AVAILABLE satstemp THEN DO:
         ASSIGN felmedd =  "Det finns inget på sökbegreppet.".
         RETURN.
      END.
   END.
END PROCEDURE.

PROCEDURE kodhmt_UI :
   DEFINE INPUT PARAMETER posok AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER begvar AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER vald_lev AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER felmedd AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR satstemp.
   EMPTY TEMP-TABLE satstemp NO-ERROR. 
   felmedd = "".  
   IF begvar = FALSE THEN DO:
      FOR EACH SATS WHERE SATS.KOD MATCHES posok AND SATS.LEVKOD = vald_lev
      AND SATS.SATS = TRUE USE-INDEX KOD NO-LOCK:      
         CREATE satstemp.
         BUFFER-COPY SATS TO satstemp.
         ASSIGN satstemp.SATSROW = ROWID(SATS).         
      END.
   END.
   ELSE DO:
      FOR EACH SATS WHERE SATS.KOD BEGINS posok AND SATS.LEVKOD = vald_lev
      AND SATS.SATS = TRUE USE-INDEX KOD NO-LOCK:
         CREATE satstemp.
         BUFFER-COPY SATS TO satstemp.
         ASSIGN satstemp.SATSROW = ROWID(SATS).
      END.
   END.
   FIND FIRST satstemp NO-LOCK NO-ERROR.
   IF NOT AVAILABLE satstemp THEN DO:
      ASSIGN felmedd = "Det finns ingen på sökbegreppet.".
      RETURN.
   END.
END PROCEDURE.

PROCEDURE starwars_UI:
   DEFINE OUTPUT PARAMETER begvar AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER felmedd AS CHARACTER NO-UNDO.
   DEFINE INPUT-OUTPUT PARAMETER posok AS CHARACTER NO-UNDO.
   IF INDEX(posok,"*",1) = 0 THEN DO:
      ASSIGN
      posok = "*" + posok + "*"
      begvar = FALSE.
      RETURN.
   END.
   IF SUBSTRING(posok,1,1) = "*" THEN DO:
      IF INDEX(posok,"*",2) = 0 THEN DO:
         ASSIGN
         begvar = FALSE.
         RETURN.
      END.
      ELSE DO:
         felmedd = "Ni kan endast använda en '*' i början eller slutet av en sökning".
         RETURN. 
      END.
   END.  
   IF SUBSTRING(posok,LENGTH(posok),1) = "*" THEN DO:
      IF INDEX(posok,"*",1) = LENGTH(posok) THEN DO:
         ASSIGN
         posok = SUBSTRING(posok,1,LENGTH(posok) - 1)
         begvar = TRUE.
         RETURN.
      END.
      ELSE DO:
         felmedd = "Ni kan endast använda en '*' i början eller slutet av en sökning".
         RETURN.            
      END.
   END.
   ELSE DO:
      ASSIGN
      posok = "*" + posok + "*"
      begvar = FALSE.      
   END.
END PROCEDURE.

PROCEDURE laddatemptab_UI:
   DEFINE OUTPUT PARAMETER TABLE FOR konstvaltemp.
   DEFINE OUTPUT PARAMETER TABLE FOR fastanmtemp.
   DEFINE OUTPUT PARAMETER TABLE FOR berfortemp.
   DEFINE OUTPUT PARAMETER TABLE FOR berlinjetemp.
   DEFINE OUTPUT PARAMETER TABLE FOR bernattemp.
   EMPTY TEMP-TABLE fastanmtemp NO-ERROR. 
   EMPTY TEMP-TABLE konstvaltemp NO-ERROR. 
   EMPTY TEMP-TABLE berfortemp NO-ERROR. 
   EMPTY TEMP-TABLE berlinjetemp NO-ERROR.
   EMPTY TEMP-TABLE bernattemp NO-ERROR. 
   FOR EACH KONSTVAL USE-INDEX KOPIA NO-LOCK:
      CREATE konstvaltemp.
      BUFFER-COPY KONSTVAL TO konstvaltemp.
      ASSIGN konstvaltemp.KVALROW = ROWID(KONSTVAL).
   END.
   FOR EACH FASTANM WHERE FASTANM.PROGRAM = "BERE" NO-LOCK:
      CREATE fastanmtemp.
      BUFFER-COPY FASTANM TO fastanmtemp.
      ASSIGN fastanmtemp.FASTANVROW = ROWID(FASTANM).
   END.
   FOR EACH BERFOR USE-INDEX FORNR NO-LOCK:
      CREATE berfortemp.
      BUFFER-COPY BERFOR TO berfortemp.
      ASSIGN berfortemp.FORROW = ROWID(BERFOR).
   END.
   FOR EACH BERLINJE USE-INDEX FORNR NO-LOCK:
      CREATE berlinjetemp.
      BUFFER-COPY BERLINJE TO berlinjetemp.
      ASSIGN berlinjetemp.LINROW = ROWID(BERLINJE).
   END.
   FOR EACH BERNAT USE-INDEX NATNR NO-LOCK:
      CREATE bernattemp.
      BUFFER-COPY BERNAT TO bernattemp.
      ASSIGN bernattemp.NATROW = ROWID(BERNAT).
   END.
   RUN bildladda_UI (INPUT 2).
   RETURN.        
END PROCEDURE.
{BERBILDLADDA.i}
PROCEDURE satshmt_UI :
   DEFINE INPUT PARAMETER vald_lev2 AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR satstemp.
   EMPTY TEMP-TABLE satstemp NO-ERROR. 
   OPEN QUERY sq FOR EACH SATS WHERE SATS.LEVKOD = vald_lev2 AND SATS.SATS = TRUE USE-INDEX KOD NO-LOCK.
   GET FIRST sq NO-LOCK.
   DO WHILE AVAILABLE(SATS):
      CREATE satstemp.
      BUFFER-COPY SATS TO satstemp.
      ASSIGN satstemp.SATSROW = ROWID(SATS).
      GET NEXT sq NO-LOCK.
   END.
   CLOSE QUERY sq.   
END PROCEDURE.

PROCEDURE berbildhmt_UI :
   DEFINE INPUT PARAMETER ktypkodvar AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR berbildtemp.
   EMPTY TEMP-TABLE berbildtemp NO-ERROR. 
   FIND FIRST BERBILD WHERE BERBILD.KTYPKOD = ktypkodvar 
   USE-INDEX KOD NO-LOCK NO-ERROR.
   IF NOT AVAILABLE BERBILD THEN DO:
      varbild = REPLACE(ktypkodvar," ","").
      FIND FIRST BERBILD WHERE BERBILD.KTYPKOD = varbild 
      USE-INDEX KOD NO-LOCK NO-ERROR.
   END.
   IF AVAILABLE BERBILD THEN DO:
      CREATE berbildtemp.
      BUFFER-COPY BERBILD TO berbildtemp.
      berbildtemp.BBROW = ROWID(BERBILD).
   END.
   
END PROCEDURE.

   
