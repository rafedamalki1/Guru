/*AONRMENY.P*/



FUNCTION brwval RETURNS LOGICAL
  ( /* parameter-definitions */ )  FORWARD.
FUNCTION checkbrw RETURNS LOGICAL
  ( /* parameter-definitions */ )  FORWARD.

{AONRWID.I}
{PRIOTEMP.I}
{FAKTIN.I}
{KALKIN.I}
{MARKVARDIN.I}
{BERIN.I}
{ALLDEF.I}
framesizeh = framesizeextrah.

&Scoped-define NEW 
{GLOBVAR2DEL1.I}
{FAKTTYPDEF.I}
{FORETEMP.I}
&Scoped-define SHARED SHARED
{LEVTEMP.I}
{BERTEMPTAB.I}
{AOTIDKOPP.I}
{AVDTEMP.I} 
{BESTKUNDALLT.I}
{DIRDEF.I}
{KTOTEMP.I}
DEFINE {&NEW} {&SHARED} TEMP-TABLE valdaaotemp NO-UNDO  LIKE utsokaonr.
{OMRTEMPW.I}
{PHMT.I}
{ANSPROJBER.I}
{ARBATE.I}
{AONRDEF.I}
{AVTPLANTEMP.I}
{SOKDEF.I}
{HOPPSEK2W.I}
{EXTRATAB.I}
 
&Scoped-define NEW NEW
&Scoped-define NEW NEW
DEFINE NEW SHARED VARIABLE tanint AS LOGICAL NO-UNDO.
DEFINE NEW SHARED VARIABLE tanval AS CHARACTER NO-UNDO.
DEFINE NEW SHARED VARIABLE tanlangd AS INTEGER NO-UNDO.
DEFINE NEW SHARED VARIABLE qsort AS CHARACTER FORMAT "x(65)" NO-UNDO.
DEFINE NEW SHARED VARIABLE kalkrec AS RECID NO-UNDO.
DEFINE NEW SHARED VARIABLE omrbildvar AS CHARACTER  NO-UNDO.
DEFINE NEW SHARED VARIABLE rubrikvar AS CHARACTER FORMAT "X(30)" NO-UNDO.
DEFINE NEW SHARED VARIABLE saonrrec AS RECID NO-UNDO.
DEFINE NEW SHARED VARIABLE aoplan AS LOGICAL NO-UNDO.
DEFINE NEW SHARED VARIABLE vardrec AS RECID NO-UNDO.
DEFINE NEW SHARED VARIABLE avbryt AS LOGICAL NO-UNDO.                           
DEFINE SHARED VARIABLE laddaproch AS HANDLE NO-UNDO.
DEFINE SHARED VARIABLE RAD_FAST AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE vartpro AS CHARACTER FORMAT "X(3)" NO-UNDO.
DEFINE SHARED VARIABLE vart AS CHARACTER FORMAT "X(3)" NO-UNDO.
DEFINE SHARED VARIABLE musz AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE aonrrec AS RECID NO-UNDO.
DEFINE SHARED VARIABLE aonrrec2 AS RECID NO-UNDO.
DEFINE SHARED VARIABLE skrivut AS LOGICAL NO-UNDO. 
DEFINE SHARED VARIABLE regdatum AS DATE NO-UNDO.
DEFINE VARIABLE labelvar1 AS CHARACTER NO-UNDO.
DEFINE VARIABLE labelvar2 AS CHARACTER NO-UNDO.
DEFINE VARIABLE labelvar3 AS CHARACTER NO-UNDO.
DEFINE VARIABLE labelvar4 AS CHARACTER NO-UNDO.
DEFINE VARIABLE valtrecid AS RECID NO-UNDO.
DEFINE VARIABLE valdarec AS RECID NO-UNDO.
DEFINE VARIABLE valdarec2 AS RECID NO-UNDO.
DEFINE VARIABLE brwakt AS LOGICAL NO-UNDO.
DEFINE VARIABLE brwroid AS ROWID NO-UNDO.
DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
DEFINE VARIABLE valnr AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE aonrvar AS CHARACTER NO-UNDO. 
DEFINE SHARED VARIABLE delnrvar AS INTEGER NO-UNDO.
DEFINE VARIABLE tillbakaaonr AS CHARACTER NO-UNDO. 
DEFINE VARIABLE tillbakadelnr AS INTEGER NO-UNDO.
DEFINE VARIABLE skick AS LOGICAL NO-UNDO.
DEFINE VARIABLE efel AS CHARACTER FORMAT "X(30)" NO-UNDO.
DEFINE VARIABLE my1hand AS WIDGET-HANDL NO-UNDO.
DEFINE VARIABLE uppar AS INTEGER NO-UNDO.
DEFINE VARIABLE aosok AS CHARACTER FORMAT "X(8)" NO-UNDO. 
DEFINE VARIABLE ortssok AS CHARACTER NO-UNDO.
DEFINE VARIABLE status-ok AS LOGICAL NO-UNDO.
DEFINE VARIABLE antal_valda AS INTEGER NO-UNDO. 
DEFINE VARIABLE antal_raknare AS INTEGER NO-UNDO.  
DEFINE VARIABLE hjdelvar AS INTEGER NO-UNDO.
DEFINE VARIABLE wh AS WIDGET-HANDLE.
DEFINE VARIABLE kalknrvar AS INTEGER NO-UNDO.
DEFINE VARIABLE kalktypvar AS INTEGER NO-UNDO.
DEFINE VARIABLE vardnrvar AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE aonrapph AS HANDLE NO-UNDO.
DEFINE VARIABLE fbestapph AS HANDLE NO-UNDO.
DEFINE VARIABLE projvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE bortvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE aoavslut AS DATE NO-UNDO.
DEFINE VARIABLE bortaoapph AS HANDLE NO-UNDO.
DEFINE VARIABLE fastdelnr AS INTEGER NO-UNDO.
DEFINE VARIABLE nyttaoapph2 AS HANDLE NO-UNDO.                      /*NYTTAOAPP.P*/
DEFINE VARIABLE jid AS CHARACTER NO-UNDO.
DEFINE VARIABLE valdaobh AS HANDLE NO-UNDO.
DEFINE VARIABLE logprogh AS HANDLE NO-UNDO.

valdaobh = TEMP-TABLE valdaaotemp:DEFAULT-BUFFER-HANDLE.          

ON 'VALUE-CHANGED':U OF TOG_ALLAAO PERSISTENT RUN mddelnr_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF CMB_JURP PERSISTENT RUN cmbjurp_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF CMB_AVD PERSISTENT RUN cmbavd_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF CMB_OMR PERSISTENT RUN cmbomr_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN_EAONR PERSISTENT RUN mdeaonr_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN_EAONR PERSISTENT RUN akeaonr_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN_DELNR PERSISTENT RUN mddelnr_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN_DELNR PERSISTENT RUN akdelnr_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF TOG_HUVNR PERSISTENT RUN toghnr_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF TOG_AVSLUTADE PERSISTENT RUN goma_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF TOG_UPPLAGT PERSISTENT RUN uppgoma_UI IN THIS-PROCEDURE.
ON 'ENTRY':U OF BRW_VAONR PERSISTENT RUN entbrwaonr_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF BRW_VAONR PERSISTENT RUN mdbrwaonr_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF BRW_KTO PERSISTENT RUN vcbrwkto_UI IN THIS-PROCEDURE.
ON 'LEAVE':U OF BRW_KTO PERSISTENT RUN lbrwkto_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF BRW_VAONR PERSISTENT RUN vcbrwaonr_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_TIDPLAN PERSISTENT RUN btntidplan_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_AVSAONR PERSISTENT RUN avsluta_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_BORT PERSISTENT RUN btnbort_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_HAMT PERSISTENT RUN btnhmt_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_NY PERSISTENT RUN btnny_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_UNDER PERSISTENT RUN btnunder_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_KOPI PERSISTENT RUN btnkopi_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_VISAO PERSISTENT RUN btnvisa_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_UPP PERSISTENT RUN btnupp_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN-REF PERSISTENT RUN akrefr_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN-REF PERSISTENT RUN mdbref_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_BYTPNR PERSISTENT RUN btnbytpnr_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_RAPP PERSISTENT RUN rapp_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_KOST PERSISTENT RUN btnkost_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_BER PERSISTENT RUN btnber_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_KALK PERSISTENT RUN btnkalk_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_MARK PERSISTENT RUN btnmark_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_FAKT PERSISTENT RUN btnfakt_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_AVROP PERSISTENT RUN avrop_UI IN THIS-PROCEDURE.
ON 'LEAVE':U OF FILL-IN-AVSLUTD PERSISTENT RUN leavfavslutd_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK':U OF FILL-IN-AVSLUTD PERSISTENT RUN mdavslutd_UI IN THIS-PROCEDURE.
ON 'LEAVE':U OF FILL-IN-AVSTARTD PERSISTENT RUN leavfavstart_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK':U OF FILL-IN-AVSTARTD PERSISTENT RUN mdavstart_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_FVE-3 PERSISTENT RUN btnfve3_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_FVE-4 PERSISTENT RUN btnfve4_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_NVE-3 PERSISTENT RUN btnnve3_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_NVE-4 PERSISTENT RUN btnnve4_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_AVB PERSISTENT RUN avb_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_AOF PERSISTENT RUN sparaaofavoriter_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_HAOF PERSISTENT RUN hmtfavoriter_UI IN THIS-PROCEDURE.
ON 'ENTRY':U OF FILL-IN-K1 PERSISTENT RUN entfillink1_UI IN THIS-PROCEDURE.
ON 'ENTRY':U OF FILL-IN-K2 PERSISTENT RUN entfillink2_UI IN THIS-PROCEDURE.
ON 'ENTRY':U OF FILL-IN-K3 PERSISTENT RUN entfillink3_UI IN THIS-PROCEDURE.
ON 'ENTRY':U OF FILL-IN-K4 PERSISTENT RUN entfillink4_UI IN THIS-PROCEDURE.


PROCEDURE autofavo_UI :
   FIND FIRST valdaaotemp NO-LOCK NO-ERROR.
   IF AVAILABLE valdaaotemp THEN DO:
      RUN sparaaofavoriter_UI.
   END.
END PROCEDURE.

PROCEDURE hmtfavoriter_UI :
   DEFINE VARIABLE ttbuffh AS HANDLE NO-UNDO.
   tthandle = TEMP-TABLE valdaaotemp:HANDLE.
   ttbuffh = tthandle:DEFAULT-BUFFER-HANDLE.
   RUN ttcopy_UI IN huvprogh (INPUT TABLE-HANDLE tthandle).
   ttbuffh:EMPTY-TEMP-TABLE() NO-ERROR.
   FIND FIRST sparaladdatemp NO-ERROR.
   IF NOT AVAILABLE sparaladdatemp THEN CREATE sparaladdatemp.
   ASSIGN
   sparaladdatemp.GLOBANV = Guru.Konstanter:globanv /*Användare, i detta fall ELPAO*/
   sparaladdatemp.BENAMNING = "AONR" /*Benämnings sufix, i detta fall ELPAO$STOR*/
   sparaladdatemp.TABVAL = "AONRTAB" /*Tabellnamn*/
   sparaladdatemp.FALTVALAO = "AONR" /*CHARACTER field*/
   sparaladdatemp.FALTVALDEL = "DELNR" /*Integer field*/
   sparaladdatemp.FALTVALDATE = "".   /*DATE field*/
   EMPTY TEMP-TABLE valdaaotemp NO-ERROR. 
   RUN laddabrw_UI IN brwproc[{&RIGHT-BROWSE}]
      (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp). 
   RUN aokomp_UI (INPUT 1).
   RUN ttjmf_UI IN huvprogh (INPUT-OUTPUT ttbuffh).
   RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ""). 
   
END PROCEDURE.

RUN main_UI.

PROCEDURE avb_UI :
   vartpro = "".   
   MESSAGE "Du avslutar nu " + SUBSTRING(foretemp.VERSION,1,10)
   VIEW-AS ALERT-BOX QUESTION BUTTONS OK-CANCEL UPDATE val AS LOGICAL.   
   IF val = FALSE THEN RETURN NO-APPLY.
   IF VALID-HANDLE(laddaproch) THEN DELETE PROCEDURE laddaproch NO-ERROR.   
   RUN avb_UI IN huvprogh.  
END PROCEDURE.
PROCEDURE btnnve4_UI :
   FILL-IN-AVSLUTD:SCREEN-VALUE = STRING(DATE(FILL-IN-AVSLUTD:SCREEN-VALUE) + 1). 
END PROCEDURE.
PROCEDURE btnnve3_UI :
   FILL-IN-AVSTARTD:SCREEN-VALUE = STRING(DATE(FILL-IN-AVSTARTD:SCREEN-VALUE) + 1).
END PROCEDURE.
PROCEDURE btnfve4_UI :
   FILL-IN-AVSLUTD:SCREEN-VALUE = STRING(DATE(FILL-IN-AVSLUTD:SCREEN-VALUE) - 1).      
END PROCEDURE.
PROCEDURE btnfve3_UI :
   FILL-IN-AVSTARTD:SCREEN-VALUE = STRING(DATE(FILL-IN-AVSTARTD:SCREEN-VALUE) - 1).      
END PROCEDURE.
PROCEDURE mdavstart_UI :
   ASSIGN
   Guru.GlobalaVariabler:regdatum = DATE(FILL-IN-AVSTARTD:SCREEN-VALUE).
   RUN AlmanBtn.w.
   FILL-IN-AVSTARTD:SCREEN-VALUE = STRING(Guru.GlobalaVariabler:regdatum).
      
END PROCEDURE.

PROCEDURE leavfavstart_UI :  
   IF DATE(FILL-IN-AVSLUTD:SCREEN-VALUE) < DATE(FILL-IN-AVSTARTD:SCREEN-VALUE) THEN DO:
      FILL-IN-AVSLUTD:SCREEN-VALUE = FILL-IN-AVSTARTD:SCREEN-VALUE.     
   END.      
END PROCEDURE.

PROCEDURE mdavslutd_UI :
   ASSIGN
   Guru.GlobalaVariabler:regdatum = DATE(FILL-IN-AVSLUTD:SCREEN-VALUE).
   RUN AlmanBtn.w.
   FILL-IN-AVSLUTD:SCREEN-VALUE = STRING(Guru.GlobalaVariabler:regdatum).   
END PROCEDURE.
PROCEDURE leavfavslutd_UI :
   IF DATE(FILL-IN-AVSLUTD:SCREEN-VALUE) < DATE(FILL-IN-AVSTARTD:SCREEN-VALUE) THEN DO:
      FILL-IN-AVSTARTD:SCREEN-VALUE = FILL-IN-AVSLUTD:SCREEN-VALUE.      
   END.  
END PROCEDURE.
PROCEDURE btnber_UI :
   RUN selectfoc_UI.   
   IF NOT AVAILABLE valdaaotemp THEN RETURN.
   ASSIGN
   aonrvar = valdaaotemp.AONR
   delnrvar = valdaaotemp.DELNR
   RAD_FAST = valdaaotemp.FASTAAONR
   valdarec = RECID(valdaaotemp)
   valdarec2 = valdarec.
   RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec) NO-ERROR.
   ASSIGN aonrrec2 = aonrrec.
   EMPTY TEMP-TABLE berintemp NO-ERROR.    
   FOR EACH valdaaotemp:
      CREATE berintemp.
      BUFFER-COPY valdaaotemp TO berintemp.
   END.
   /*              direkt här
   RUN btnberstart_UI IN huvprogh (INPUT 2, INPUT aonrvar, INPUT delnrvar, INPUT TABLE berintemp).
   */
   RUN btnberstart_UI IN huvprogh (INPUT 1, INPUT aonrvar, INPUT delnrvar, INPUT TABLE berintemp).
   EMPTY TEMP-TABLE berintemp NO-ERROR. 
   {musarrow.i}
   
END PROCEDURE.
PROCEDURE btnmark_UI :
   RUN selectfoc_UI.   
   IF NOT AVAILABLE valdaaotemp THEN RETURN.   
   RAD_FAST = valdaaotemp.FASTAAONR.
   ASSIGN
   aonrvar = valdaaotemp.AONR
   delnrvar = valdaaotemp.DELNR
   valdarec = RECID(valdaaotemp)
   valdarec2 = valdarec.
   RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec).
   ASSIGN aonrrec2 = aonrrec.
   EMPTY TEMP-TABLE markintemp NO-ERROR.    
   FOR EACH valdaaotemp:
      CREATE markintemp.
      BUFFER-COPY valdaaotemp TO markintemp.
   END.
   RUN btnmarkstart_UI IN huvprogh (INPUT 1, INPUT aonrvar,INPUT delnrvar,INPUT TABLE markintemp).
   /* direkt här
   RUN btnmarkstart_UI IN huvprogh (INPUT 2, INPUT aonrvar,INPUT delnrvar,INPUT TABLE markintemp).
   */   
   FIND valdaaotemp WHERE RECID(valdaaotemp) = valdarec2 NO-LOCK NO-ERROR.
   IF AVAILABLE valdaaotemp THEN DO:
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdaaotemp)).
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].   
   END.      
   {musarrow.i}     
END PROCEDURE.
PROCEDURE btnkalk_UI :
   DEFINE VARIABLE kalkaonrvar AS CHARACTER NO-UNDO.
   DEFINE VARIABLE kalkdelnr AS INTEGER NO-UNDO.   
   RUN selectfoc_UI.
   IF NOT AVAILABLE valdaaotemp THEN RETURN.
   ASSIGN
   kalkaonrvar  = valdaaotemp.AONR 
   kalkdelnr = valdaaotemp.DELNR
   RAD_FAST = valdaaotemp.FASTAAONR
   valdarec = RECID(valdaaotemp)
   valdarec2 = valdarec       
   vartpro = "".
   EMPTY TEMP-TABLE kalkinmtemp NO-ERROR.    
   FOR EACH valdaaotemp: 
      CREATE kalkinmtemp.
      ASSIGN      
      kalkinmtemp.AONR = valdaaotemp.AONR    
      kalkinmtemp.DELNR = valdaaotemp.DELNR
      kalkinmtemp.BENAMNING = valdaaotemp.ORT
      kalkinmtemp.AONRAVDATUM = valdaaotemp.AONRAVDATUM.
      IF kalkaonrvar = valdaaotemp.AONR AND kalkdelnr = valdaaotemp.DELNR THEN kalkinmtemp.REPO = TRUE.                    
   END.
   RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec) NO-ERROR.
   ASSIGN aonrrec2 = aonrrec.
   
   RUN btnkalkstart_UI IN huvprogh (INPUT 1,INPUT kalknrvar, INPUT kalktypvar,INPUT TABLE kalkinmtemp).
   /* direkt här
   RUN btnkalkstart_UI IN huvprogh (INPUT 2,INPUT kalknrvar, INPUT kalktypvar,INPUT TABLE kalkinmtemp).
   */
   EMPTY TEMP-TABLE kalkinmtemp NO-ERROR. 
   {musarrow.i}   
END PROCEDURE.
PROCEDURE btnfakt_UI :
   DEFINE VARIABLE faonrvar AS CHARACTER NO-UNDO.
   DEFINE VARIABLE fdelnr AS INTEGER NO-UNDO.   
   RUN selectfoc_UI.
   IF NOT AVAILABLE valdaaotemp THEN RETURN.   
   ASSIGN
   faonrvar  = valdaaotemp.AONR 
   fdelnr = valdaaotemp.DELNR
   vartpro = "".
   IF Guru.Konstanter:varforetypval[9] = 1 THEN fdelnr = 0.
   EMPTY TEMP-TABLE faktintemp NO-ERROR.    
   FOR EACH valdaaotemp:
      IF Guru.Konstanter:varforetypval[9] = 1 THEN DO:
         FIND FIRST faktintemp WHERE faktintemp.AONR = valdaaotemp.AONR AND faktintemp.DELNR = 0
         NO-ERROR.
         IF NOT AVAILABLE faktintemp THEN DO:
            CREATE faktintemp.
            ASSIGN
            faktintemp.ORT  = valdaaotemp.ORT
            faktintemp.AONR = valdaaotemp.AONR    
            faktintemp.DELNR = 0.  
         END.
      END.
      ELSE DO:
         CREATE faktintemp.
         ASSIGN
         faktintemp.ORT  = valdaaotemp.ORT
         faktintemp.AONR = valdaaotemp.AONR    
         faktintemp.DELNR = valdaaotemp.DELNR.  
      END.            
   END.
   RUN btnfaktstart_UI IN huvprogh (INPUT 1, INPUT faonrvar, INPUT fdelnr, INPUT TABLE faktintemp).
   /* direkt här
   RUN btnfaktstart_UI IN huvprogh (INPUT 2, INPUT faonrvar, INPUT fdelnr, INPUT TABLE faktintemp).
   */
   EMPTY TEMP-TABLE faktintemp NO-ERROR. 
   {musarrow.i}   
END PROCEDURE.

PROCEDURE btnkost_UI :
   IF brwval() = TRUE THEN RETURN NO-APPLY.
   RUN kost_UI.
END PROCEDURE.

PROCEDURE btnbytpnr_UI :
   IF brwval() = TRUE THEN RETURN NO-APPLY.
   RUN bytaonr_UI.
   IF checkbrw() = TRUE THEN DO:
      RUN changesize_UI IN brwproc[{&ARROWS}] (INPUT TRUE). /*Input TRUE = vänster browser*/ 
   END.
END PROCEDURE.
PROCEDURE mdbref_UI :
   {OMSTARTAVGURUH.I}
   RUN mdubbrefnr_UI.   
   {musarrow.i}
END PROCEDURE.
PROCEDURE akrefr_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN-REF.
   END. 
END PROCEDURE.
PROCEDURE btnupp_UI :
   IF brwval() = TRUE THEN RETURN NO-APPLY.
   {AVBGOM2.I}    
   RUN andra_UI.
   RUN aokomp_UI (INPUT 1).
   {AVBFRAM2.I}  
END PROCEDURE.
PROCEDURE btnvisa_UI :
   IF brwval() = TRUE THEN RETURN NO-APPLY.
   {AVBGOM2.I}
   RUN visao_UI.
   {AVBFRAM2.I}  
END PROCEDURE.

PROCEDURE btnkopi_UI :
   IF brwval() = TRUE THEN RETURN NO-APPLY.
   {AVBGOM2.I}
   RUN kopi_UI.
   {AVBFRAM2.I}  
END PROCEDURE.
PROCEDURE btnunder_UI :
   IF brwval() = TRUE THEN RETURN NO-APPLY.
   
   RUN under_UI.
   {AVBFRAM2.I}  
END PROCEDURE.
PROCEDURE btnhmt_UI :
    BTN_HAMT:LOAD-IMAGE ("BILDER\xbtn_hamt_over.gif").    
   RUN btnhamt_UI.
   BTN_HAMT:LOAD-IMAGE ("BILDER\xbtn_hamt.gif"). 
END PROCEDURE.
PROCEDURE btnbort_UI :
   DEFINE VARIABLE svar AS LOGICAL NO-UNDO.
   svar = TRUE.
   IF brwval() = TRUE THEN RETURN NO-APPLY.   
   {OMSTARTAVGURUH.I}
   RUN selectfoc_UI.
   ASSIGN
   valdarec2 = RECID(valdaaotemp)
   valtrecid = RECID(valdaaotemp)
   aonrvar = valdaaotemp.AONR
   delnrvar = valdaaotemp.DELNR.
   IF valdaaotemp.PLANNR = ? OR valdaaotemp.PLANNR = "" THEN musz = musz.
   ELSE DO:  
      MESSAGE Guru.Konstanter:gaok + "är kopplat till " Guru.Konstanter:gplk + " " valdaaotemp.PLANNR + " årtal: " + STRING(valdaaotemp.ARTAL) 
      VIEW-AS ALERT-BOX. 
      RETURN.
   END.   
   RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec).
   musz = FALSE.
   MESSAGE "Vill du ta bort " + Guru.Konstanter:gaok + ":" aonrvar + " Delnr:" + STRING(delnrvar)  " med benämning:" valdaaotemp.ORT "?"
   VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO TITLE "Meddelande" UPDATE svar.
   IF svar = FALSE THEN RETURN.
   
   RUN btnok_UI (INPUT aonrvar,INPUT delnrvar,OUTPUT musz).
   IF musz = TRUE THEN DO:      
      MESSAGE Guru.Konstanter:gaol + " har tidskrivning och kan ej tas bort."      
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      musz = FALSE.
      SESSION:SET-WAIT-STATE("").
      RETURN.
   END. 
   RUN btnkost IN bortaoapph (INPUT aonrvar,INPUT delnrvar,OUTPUT musz).
   IF musz = TRUE THEN DO:      
      MESSAGE Guru.Konstanter:gaol + " har kostnadsregistreringar och kan ej tas bort."      
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      musz = FALSE.
      SESSION:SET-WAIT-STATE("").
      RETURN.
   END.  
   RUN exkoll_UI (INPUT aonrvar,INPUT delnrvar). 
   IF musz = TRUE THEN DO:      
      MESSAGE Guru.Konstanter:gaol " är koppt till andra " LC(Guru.Konstanter:gaol) " Kopplingar som måste tas bort innan borttag är möjligt."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      musz = FALSE.
      SESSION:SET-WAIT-STATE("").
      RETURN.
   END.
   IF Guru.Konstanter:appcon THEN DO:
      RUN BOAOAPP.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT
      (INPUT aonrrec, OUTPUT musz).
      
   END.
   ELSE DO:
      RUN BOAOAPP.P
      (INPUT aonrrec, OUTPUT musz).
   END.   
   IF musz = TRUE THEN DO:      
      MESSAGE Guru.Konstanter:gaol " har koppling(ar) som måste tas bort innan borttag är möjligt."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      musz = FALSE.
      SESSION:SET-WAIT-STATE("").
      RETURN.
   END.     
   IF musz = FALSE THEN DO:
      RUN exbort_UI (INPUT aonrvar,INPUT delnrvar).                     
      /* loggning ta bort test*/
      IF Guru.Konstanter:globforetag = "ELPA" THEN DO:
         RUN BORTLOGG.P PERSISTENT SET logprogh.         
         FILE-INFO:FILE-NAME = TRIM(SUBSTRING(PROGRAM-NAME(1),INDEX(PROGRAM-NAME(1),"_UI") + 3)).
         RUN loggskap_UI IN logprogh (INPUT 1,INPUT SUBSTRING(FILE-INFO:FILE-NAME,(R-INDEX(FILE-INFO:FILE-NAME,"\") + 1)), INPUT "AONR", INPUT aonrvar + " " + STRING(delnrvar)).         
      END.            
   END.
   musz = FALSE. 
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnstatus_UI :
   EMPTY TEMP-TABLE evaldaao NO-ERROR. 
   antal_valda = BRW_VAONR:NUM-SELECTED-ROWS NO-ERROR.
   antal_raknare = 1.
   DO WHILE antal_raknare LE antal_valda TRANSACTION:
          RUN fselectfoc_UI.               
         CREATE evaldaao.
         BUFFER-COPY valdaaotemp TO evaldaao.
         antal_raknare = antal_raknare + 1.
      END.
   RUN laddaaotid IN aonrapph 
   (INPUT TABLE evaldaao, OUTPUT TABLE aotidslagtemp).
   RUN openbdyn_UI IN brwproc[5] (INPUT "").
END PROCEDURE.

PROCEDURE btntidplan_UI :   
   {AVBGOM2.I}
   MESSAGE "Vill ta med markerade?  Svara 'Ja' Annars tas alla i Arbeta vidare med!"
   VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE doc2 AS LOGICAL.
   CASE doc2:
      WHEN TRUE THEN DO:
         RUN valdaaomark_UI.
      END.
      WHEN FALSE THEN DO:
         RUN valdaao_UI.
         
      END.
   END CASE.
   
   
   RUN TIDSPLAN.W (INPUT "PROJEKT"). 
   RUN valdaaoallabort_UI.
   {AVBFRAM2.I}      
END PROCEDURE.
PROCEDURE btnny_UI :
   DEFINE VARIABLE ejextra AS LOGICAL NO-UNDO.  
   RUN selectfoc_UI.
   kalkrec = ?.
   {OMSTARTAVGURUH.I}
   {AVBGOM2.I} 
   musz = FALSE.       
   IF musz = FALSE THEN DO:
      RUN uttstart_UI IN huvprogh (INPUT 1).
      RUN valdaao_UI.      
      aonrvar = ?.
      RUN NYTTAONRU.W (INPUT TRUE,INPUT FALSE, INPUT 1, 
                      INPUT-OUTPUT aonrvar, INPUT-OUTPUT delnrvar, INPUT ?,INPUT ? ).
      RUN frametitle_UI IN huvprogh (INPUT "AONR").                 
         
      RUN uttstart_UI IN huvprogh (INPUT 2).
      RUN valdaaotemp_UI.      
   END.   
   ejextra = musz.
   RUN nyao_UI (INPUT FALSE).
   IF ejextra = FALSE THEN RUN extrakopp_UI (INPUT "AONR").
   RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec).
   RUN relaonr IN aonrapph.
   {AVBFRAM2.I}
   musz = FALSE.
   {musarrow.i}   
  
END PROCEDURE.
PROCEDURE sattao_UI :
   DEFINE INPUT  PARAMETER inao AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER indelnr AS INTEGER NO-UNDO.
   ASSIGN 
   aonrvar = inao 
   delnrvar = indelnr.
END PROCEDURE.
PROCEDURE extrakopp_UI :
   DEFINE INPUT  PARAMETER varifran AS CHARACTER NO-UNDO.
   DEFINE VARIABLE antalunder AS INTEGER NO-UNDO.
   antalunder = 0.
   /*aonrsund*/

   IF Guru.Konstanter:globforetag = "SUND" OR Guru.Konstanter:globforetag = "SNAT" OR Guru.Konstanter:globforetag = "elpa"  THEN DO:
      /*Skapa 5 undernummer om aonrserien är 38  (386 387 388) 36 (360 361 362) 46 (460) */
      /*Skapa 5 undernummer om aonrserien är 30  */
      /*Skapa 4 undernummer om aonrserien är 63  (632 633 634) */
      /*Skapa 1 undernummer om aonrserien är 79   */      
      /*Skapa 5 undernummer om aonrserien är 39   38 full 39 ska ta över  20151111 lena*/
      /*slut på nummer i 39 övergå till 30 Lena 20190627*/
      IF aonrvar BEGINS "38" OR aonrvar BEGINS "36" OR /*aonrvar BEGINS "46"  OR*/ aonrvar BEGINS "30" OR aonrvar BEGINS "39" THEN antalunder = 5.
      IF aonrvar BEGINS "63" THEN antalunder = 4.
      IF aonrvar BEGINS "34" THEN antalunder = 4.
      IF aonrvar BEGINS "35" THEN antalunder = 4.
      IF aonrvar BEGINS "79" THEN antalunder = 1.
      IF antalunder > 0 THEN DO:
         IF delnrvar = 0 THEN DO:
            fastdelnr = 0.
            REPEAT:            
               fastdelnr = fastdelnr + 1.
               IF fastdelnr > antalunder THEN LEAVE.
               RUN underfasta_UI (INPUT varifran,INPUT fastdelnr).              
            END.
            IF aonrvar BEGINS "63" THEN DO:
               fastdelnr = 99.
               RUN underfasta_UI (INPUT varifran,INPUT fastdelnr). 
            END.
            IF aonrvar BEGINS "34" OR aonrvar BEGINS "35" THEN DO:
               fastdelnr = 99.
               RUN underfasta_UI (INPUT varifran,INPUT fastdelnr). 
            END.
            IF varifran = "AONR" THEN DO:
               EMPTY TEMP-TABLE evaldaao NO-ERROR. 
               RUN andraort IN aonrapph (INPUT aonrvar,INPUT 0,OUTPUT TABLE evaldaao).            
               FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
               valdaaotemp.DELNR = 0 NO-LOCK NO-ERROR.
               FIND FIRST evaldaao WHERE evaldaao.AONR = aonrvar AND 
               evaldaao.DELNR = 0 NO-LOCK NO-ERROR.
               IF AVAILABLE valdaaotemp THEN DO:
                  BUFFER-COPY evaldaao TO valdaaotemp.
               END.   
               EMPTY TEMP-TABLE evaldaao NO-ERROR. 
               FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
               valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.            
               RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdaaotemp)).
               RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
            END.                
         END.
         fastdelnr = 0.
         REPEAT:            
            IF fastdelnr > antalunder THEN LEAVE.
            RUN skapafbesao_UI IN nyttaoapph2 (INPUT aonrvar,INPUT fastdelnr,INPUT Guru.Konstanter:globanv).
             fastdelnr = fastdelnr + 1.              
         END.
      END. 
      IF varifran = "AONR" THEN DO:   
         EMPTY TEMP-TABLE evaldaao NO-ERROR. 
         RUN andraort IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT TABLE evaldaao).
         FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
         valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.
         FIND FIRST evaldaao WHERE evaldaao.AONR = aonrvar AND 
         evaldaao.DELNR = delnrvar NO-LOCK NO-ERROR.
         BUFFER-COPY evaldaao TO valdaaotemp.
         EMPTY TEMP-TABLE evaldaao NO-ERROR. 
         RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec).
         RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdaaotemp)).
         RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].               
      END.   
      /*Skapa 6 undernummer om aonrserien är 39 eller 78*/   
      /*   
      IF aonrvar BEGINS "39" OR aonrvar BEGINS "78"  THEN DO:
         IF delnrvar = 0 THEN DO:
            fastdelnr = 0.
            REPEAT:            
               fastdelnr = fastdelnr + 1.
               IF fastdelnr > 6 THEN LEAVE.
               RUN underfasta_UI (INPUT fastdelnr).
            END.
            EMPTY TEMP-TABLE evaldaao NO-ERROR. 
            RUN andraort IN aonrapph (INPUT aonrvar,INPUT 0,OUTPUT TABLE evaldaao).
            FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
            valdaaotemp.DELNR = 0 NO-LOCK NO-ERROR.
            FIND FIRST evaldaao WHERE evaldaao.AONR = aonrvar AND 
            evaldaao.DELNR = 0 NO-LOCK NO-ERROR.
            BUFFER-COPY evaldaao TO valdaaotemp.
            EMPTY TEMP-TABLE evaldaao NO-ERROR. 
            FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
            valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.
            RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdaaotemp)).
            RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
         END.
      END. 
      */
      
   END.
       
END PROCEDURE.
PROCEDURE underfasta_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/
   DEFINE INPUT  PARAMETER varifran AS CHARACTER NO-UNDO.   
   DEFINE INPUT PARAMETER fastdelnr AS INTEGER NO-UNDO.      
   {OMSTARTAVGURUH.I}
   FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND valdaaotemp.DELNR = 0 NO-LOCK NO-ERROR.
   ASSIGN 
   hjdelvar = fastdelnr.
   valnr = aonrvar.
    /* HÄMTA RECID AONRTAB - TEMPORÄR LÖSNING */
       RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec).  
        
   IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "SUND" OR Guru.Konstanter:globforetag = "SNAT" OR Guru.Konstanter:globforetag = "MISV" THEN DO:
      IF delnrvar = 0 THEN DO:
         IF Guru.Konstanter:appcon THEN DO:                           
            RUN TLAGAUTO.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT       
            (INPUT Guru.Konstanter:globanv, INPUT aonrrec, INPUT "TIDSTOPP").
         END.
         ELSE DO:
            RUN TLAGAUTO.P  
           (INPUT Guru.Konstanter:globanv, INPUT aonrrec, INPUT "TIDSTOPP").                  
         END.
      END.
      
   END.
   RUN under IN aonrapph (INPUT aonrrec,INPUT hjdelvar).  
   RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT hjdelvar,OUTPUT aonrrec).    
   
   IF varifran = "AONR" THEN RUN nyao_UI (INPUT TRUE).   
   FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
   valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.
   musz = FALSE.
   RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec).    
   /*istället för NYTTAONR.i, utan run NYTTAONR.W*/  
   {NYTTAONRFAST.I}
   IF varifran = "AONR" THEN RUN refreshbrw_UI IN brwproc[{&RIGHT-BROWSE}].    
   RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT hjdelvar,OUTPUT aonrrec).    
              
   IF varifran = "AONR" THEN RUN nyao_UI (INPUT TRUE).   
   FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
   valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.
   musz = FALSE.
   RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec).    
   /*istället för NYTTAONR.i, utan run NYTTAONR.W*/
   {NYTTAONRFAST.I}
   IF varifran = "AONR" THEN DO:
      RUN refreshbrw_UI IN brwproc[{&RIGHT-BROWSE}].        
      FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
      valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.
      IF AVAILABLE valdaaotemp THEN DO:
         RUN andraort IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT TABLE evaldaao).
         FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
         valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.
         FIND FIRST evaldaao WHERE evaldaao.AONR = aonrvar AND 
         evaldaao.DELNR = delnrvar NO-LOCK NO-ERROR.
         BUFFER-COPY evaldaao TO valdaaotemp.
         RUN refreshbrw_UI IN brwproc[{&RIGHT-BROWSE}].      
      END.
   END.   
   RUN relaonr IN aonrapph.
   {musarrow.i}
END PROCEDURE.
PROCEDURE avrop_UI :   
   {OMSTARTAVGURUH.I} 
   RUN selectfoc_UI.
   IF NOT AVAILABLE valdaaotemp THEN RETURN.
   RAD_FAST = valdaaotemp.FASTAAONR.
   valdarec = RECID(valdaaotemp).
   valdarec2 = valdarec.
   ASSIGN
   aonrvar = valdaaotemp.AONR
   delnrvar = valdaaotemp.DELNR.
   RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec).
   ASSIGN aonrrec2 = aonrrec. 
   CREATE uppaonrtemp.
   BUFFER-COPY valdaaotemp TO uppaonrtemp.
         
   {AVBGOM2.I}
   RUN AVROPU.W (INPUT aonrvar,INPUT delnrvar).
   {AVBFRAM2.I}
   FIND FIRST uppaonrtemp NO-LOCK NO-ERROR.
   IF AVAILABLE uppaonrtemp THEN DELETE uppaonrtemp.
   {musarrow.i}
END PROCEDURE.
PROCEDURE fselectfoc_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(valdaobh) THEN DO:
      valdaobh = TEMP-TABLE valdaaotemp:DEFAULT-BUFFER-HANDLE.   
   END.
   RUN fetrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT antal_raknare,OUTPUT brwrowid) .
   FIND FIRST valdaaotemp WHERE ROWID(valdaaotemp) = brwrowid NO-LOCK NO-ERROR.    
END PROCEDURE.

PROCEDURE selectfoc_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(valdaobh) THEN DO:
      valdaobh = TEMP-TABLE valdaaotemp:DEFAULT-BUFFER-HANDLE.   
   END.
   RUN selectrowid_UI IN brwproc[{&RIGHT-BROWSE}] (OUTPUT brwrowid).
   RUN selectrecid_UI IN brwproc[{&RIGHT-BROWSE}] (OUTPUT brwrecid).
   valdarec = brwrecid.
   FIND FIRST valdaaotemp WHERE ROWID(valdaaotemp) = brwrowid NO-LOCK NO-ERROR.           
   IF AVAILABLE valdaaotemp THEN DO:
      ASSIGN
      Guru.GlobalaVariabler:plusaonr = valdaaotemp.AONR
      Guru.GlobalaVariabler:plusdnr = valdaaotemp.DELNR.
   END.
   ELSE DO:
      Guru.GlobalaVariabler:plusaonr = ?.
   END. 
END PROCEDURE.
PROCEDURE vcbrwaonr_UI :
   RUN selectfoc_UI.
   IF AVAILABLE valdaaotemp THEN DO:
      ASSIGN
      BRW_VAONR:TOOLTIP = valdaaotemp.ORT
      Guru.GlobalaVariabler:plusaonr = valdaaotemp.AONR
      Guru.GlobalaVariabler:plusdnr = valdaaotemp.DELNR.
   END.
   ELSE DO:
      Guru.GlobalaVariabler:plusaonr = ?.
   END.  
END PROCEDURE.
PROCEDURE mdbrwaonr_UI :
   
    IF FBTN_UPP:HIDDEN = FALSE THEN APPLY "CHOOSE" TO FBTN_UPP.
END PROCEDURE.

PROCEDURE vcbrwkto_UI:
       
  IF KTONR:LABEL  = CAPS(SUBSTRING(kbenamntemp.K1,1,1)) + LC(SUBSTRING(kbenamntemp.K1,2)) THEN DO:
     ASSIGN
     FILL-IN-K1:SCREEN-VALUE = KTONR:SCREEN-VALUE
     FILL-IN-K2:SCREEN-VALUE = ""
     FILL-IN-K3:SCREEN-VALUE = ""
     FILL-IN-K4:SCREEN-VALUE = "".     
  END.
  IF KTONR:LABEL  = CAPS(SUBSTRING(kbenamntemp.K2,1,1)) + LC(SUBSTRING(kbenamntemp.K2,2)) THEN DO:
     ASSIGN
     FILL-IN-K1:SCREEN-VALUE = ""
     FILL-IN-K2:SCREEN-VALUE = KTONR:SCREEN-VALUE
     FILL-IN-K3:SCREEN-VALUE = ""
     FILL-IN-K4:SCREEN-VALUE = "".     
  END.
  IF KTONR:LABEL = CAPS(SUBSTRING(kbenamntemp.K3,1,1)) + LC(SUBSTRING(kbenamntemp.K3,2)) THEN DO:
     ASSIGN
     FILL-IN-K1:SCREEN-VALUE = ""
     FILL-IN-K2:SCREEN-VALUE = ""
     FILL-IN-K3:SCREEN-VALUE = KTONR:SCREEN-VALUE
     FILL-IN-K4:SCREEN-VALUE = "".     
  END.
  IF KTONR:LABEL  = CAPS(SUBSTRING(kbenamntemp.K4,1,1)) + LC(SUBSTRING(kbenamntemp.K4,2)) THEN DO:
     ASSIGN
     FILL-IN-K1:SCREEN-VALUE = ""
     FILL-IN-K2:SCREEN-VALUE = ""
     FILL-IN-K3:SCREEN-VALUE = ""
     FILL-IN-K4:SCREEN-VALUE = KTONR:SCREEN-VALUE.     
  END.   
END PROCEDURE.

PROCEDURE entbrwaonr_UI :
   
END PROCEDURE.

PROCEDURE entfillink1_UI :
   BRW_KTO:HIDDEN = FALSE.
   BRW_KTO:TITLE = "Konto: " + CAPS(SUBSTRING(kbenamntemp.K1,1,1)) + LC(SUBSTRING(kbenamntemp.K1,2)).
   KTONR:LABEL = CAPS(SUBSTRING(kbenamntemp.K1,1,1)) + LC(SUBSTRING(kbenamntemp.K1,2)).
   RUN setcolsortvar_UI IN brwproc[6] (INPUT "konto = 'k1'" + " AND AKTIV = TRUE  USE-INDEX KONTO").   
   RUN openbdynspec_UI IN brwproc[6].
END PROCEDURE.
PROCEDURE entfillink2_UI :
   BRW_KTO:HIDDEN = FALSE.
   BRW_KTO:TITLE = "Konto: " + CAPS(SUBSTRING(kbenamntemp.K2,1,1)) + LC(SUBSTRING(kbenamntemp.K2,2)).
   KTONR:LABEL = CAPS(SUBSTRING(kbenamntemp.K2,1,1)) + LC(SUBSTRING(kbenamntemp.K2,2)).
   RUN setcolsortvar_UI IN brwproc[6] (INPUT "konto = 'k2'" + " AND AKTIV = TRUE  USE-INDEX KONTO").   
   RUN openbdynspec_UI IN brwproc[6].
END PROCEDURE.
PROCEDURE entfillink3_UI :
   BRW_KTO:HIDDEN = FALSE.
   BRW_KTO:TITLE = "Konto: " + CAPS(SUBSTRING(kbenamntemp.K3,1,1)) + LC(SUBSTRING(kbenamntemp.K3,2)).
   KTONR:LABEL = CAPS(SUBSTRING(kbenamntemp.K3,1,1)) + LC(SUBSTRING(kbenamntemp.K3,2)).
   RUN setcolsortvar_UI IN brwproc[6] (INPUT "konto = 'k3'" + " AND AKTIV = TRUE  USE-INDEX KONTO").   
   RUN openbdynspec_UI IN brwproc[6].
END PROCEDURE.
PROCEDURE entfillink4_UI :
   BRW_KTO:HIDDEN = FALSE.
   BRW_KTO:TITLE = "Konto: " + CAPS(SUBSTRING(kbenamntemp.K4,1,1)) + LC(SUBSTRING(kbenamntemp.K4,2)).
   KTONR:LABEL = CAPS(SUBSTRING(kbenamntemp.K4,1,1)) + LC(SUBSTRING(kbenamntemp.K4,2)).
   RUN setcolsortvar_UI IN brwproc[6] (INPUT "konto = 'k4'" + " AND AKTIV = TRUE  USE-INDEX KONTO").   
   RUN openbdynspec_UI IN brwproc[6].
END PROCEDURE.

PROCEDURE lbrwkto_UI:
   BRW_KTO:HIDDEN = true.   
END PROCEDURE.


PROCEDURE akdelnr_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN_DELNR.
   END.
END PROCEDURE.
PROCEDURE mddelnr_UI :
   {OMSTARTAVGURUH.I}
   RUN selectfoc_UI.
   RUN mdubbdelnr_UI.
   {musarrow.i}
END PROCEDURE.
PROCEDURE akeaonr_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN_EAONR.
   END. 
END PROCEDURE.
PROCEDURE mdeaonr_UI :
   APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN_DELNR.
END PROCEDURE.
PROCEDURE cmbavd_UI :
   {CMB_AVDN2.I} 
END PROCEDURE.
PROCEDURE cmbjurp_UI :
   {CMB_JURP2.I}   
END PROCEDURE.
PROCEDURE cmbomr_UI :
   {CMB_PRIO.I} 
END PROCEDURE.
PROCEDURE kost_UI :   
   {OMSTARTAVGURUH.I}
   RUN selectfoc_UI.
   EMPTY TEMP-TABLE aonrtemp NO-ERROR. 
   CREATE aonrtemp.
   BUFFER-COPY valdaaotemp TO aonrtemp.
   ASSIGN
   aonrvar = valdaaotemp.AONR
   delnrvar = valdaaotemp.DELNR
   valdarec = RECID(valdaaotemp)
   valdarec2 = valdarec.
   RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec).
   ASSIGN aonrrec2 = aonrrec.
   RUN valdaao_UI.
   RUN KOSTANDRA.W (INPUT aonrvar,INPUT delnrvar).
   EMPTY TEMP-TABLE aonrtemp NO-ERROR. 
  
   {musarrow.i}
END PROCEDURE.

PROCEDURE brwval_UI :
   DEFINE OUTPUT PARAMETER ingenvald AS LOGICAL NO-UNDO.
   ingenvald = brwval().
END PROCEDURE.

PROCEDURE checkbrw_UI :
   DEFINE OUTPUT PARAMETER ingenvald AS LOGICAL NO-UNDO.
   ingenvald = checkbrw().
END PROCEDURE.

/*triggers*/
PROCEDURE rapp_UI :   
   {AVBGOM2.I}
   RUN hursortq_UI IN brwproc[{&RIGHT-BROWSE}] (OUTPUT qsort).
   RUN valdaao_UI.
   RUN AORAPPORT.W.
   {AVBFRAM2.I}  
   IF vartpro NE "" THEN DO:
      APPLY "CLOSE":U TO THIS-PROCEDURE.
      RETURN.
   END.
   {musarrow.i} 
END PROCEDURE.

PROCEDURE toghnr_UI :   
   FIND FIRST uppvaltemp WHERE NO-LOCK NO-ERROR.
   IF AVAILABLE uppvaltemp THEN DO:
      IF TOG_HUVNR:CHECKED = TRUE THEN uppvaltemp.DELNRKOLL = FALSE.
      IF TOG_HUVNR:CHECKED = FALSE THEN uppvaltemp.DELNRKOLL = TRUE.    
   END.
END PROCEDURE.


PROCEDURE avsluta_UI :  
   RUN selectfoc_UI.
   FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = Guru.GlobalaVariabler:plusaonr AND valdaaotemp.DELNR = Guru.GlobalaVariabler:plusdnr NO-LOCK NO-ERROR.
   IF NOT AVAILABLE valdaaotemp THEN RETURN.
   IF AVAILABLE valdaaotemp THEN DO:
      ASSIGN
      aonrvar = valdaaotemp.AONR
      delnrvar = valdaaotemp.DELNR.
      RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec).
      ASSIGN aonrrec2 = aonrrec. 
      ASSIGN
      valdarec = RECID(valdaaotemp)
      valdarec2 = valdarec.   
      {AVBGOM2.I}
      RUN hursortq_UI IN brwproc[{&RIGHT-BROWSE}] (OUTPUT qsort).
      RUN uttstart_UI IN huvprogh (INPUT 1).
      RUN AVSLUTAONR.W (INPUT-OUTPUT TABLE valdaaotemp).
      RUN uttstart_UI IN huvprogh (INPUT 2).      
      {AVBFRAM2.I}    
   END.
   {musarrow.i}        
   RUN checkbrw_UI (OUTPUT musz).
   IF musz = TRUE THEN DO:
      musz = FALSE.
      RUN changesize_UI IN brwproc[{&ARROWS}] (INPUT TRUE). /*Input TRUE = vänster browser*/ 
   END.
   FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = Guru.GlobalaVariabler:plusaonr AND valdaaotemp.DELNR = Guru.GlobalaVariabler:plusdnr NO-LOCK NO-ERROR.
   IF AVAILABLE valdaaotemp THEN DO:
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdaaotemp)).
   END.
   RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").  
   RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
END PROCEDURE.


PROCEDURE visao_UI :
   EMPTY TEMP-TABLE aonrtemp NO-ERROR. 
   &Scoped-define BROWSE-NAME BRW_VAONR
   antal_valda = {&BROWSE-NAME}:NUM-SELECTED-ROWS NO-ERROR.
   IF antal_valda = 0 THEN RETURN.
   {OMSTARTAVGURUH.I}
   antal_raknare = 1.
   DO TRANSACTION:
      DO WHILE antal_raknare LE antal_valda:
         RUN fselectfoc_UI.        
         ASSIGN 
         valdarec = RECID(valdaaotemp)
         aonrvar = valdaaotemp.AONR
         delnrvar = valdaaotemp.DELNR.
         CREATE aonrtemp.
         BUFFER-COPY valdaaotemp TO aonrtemp.            
         RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec).
         ASSIGN
         aonrtemp.AONRTABREC = aonrrec.                 
         antal_raknare = antal_raknare + 1.
      END.
      
   END.        
   IF Guru.Konstanter:globforetag = "cELPA" OR Guru.Konstanter:globforetag = "cSUND" THEN DO:      
      RUN AORUBRIK.W.
   END. 
   {AMERICANEUROPEAN.I} 
   RUN VISAAONR.W.   
   {EUROPEANAMERICAN.I}
   {musarrow.i}                  
END PROCEDURE.

PROCEDURE kopi_UI :
   DEFINE VARIABLE ejextra  AS LOGICAL NO-UNDO.   
   RUN selectfoc_UI.
   FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = Guru.GlobalaVariabler:plusaonr AND valdaaotemp.DELNR = Guru.GlobalaVariabler:plusdnr NO-LOCK NO-ERROR.
   IF NOT AVAILABLE valdaaotemp THEN RETURN.
   RAD_FAST = valdaaotemp.FASTAAONR.
   {OMSTARTAVGURUH.I}
   valdarec2 = RECID(valdaaotemp).
   kalkrec = ?.
   ASSIGN
   aonrvar = valdaaotemp.AONR
   delnrvar = valdaaotemp.DELNR.
   RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec).
   ASSIGN aonrrec2 = aonrrec.
   RUN uttstart_UI IN huvprogh (INPUT 1).           
   RUN valdaao_UI.
   RUN NYTTAONRU.W (INPUT TRUE,INPUT TRUE, INPUT 2,
                   INPUT-OUTPUT aonrvar, INPUT-OUTPUT delnrvar, INPUT ?,INPUT ?).
   RUN frametitle_UI IN huvprogh (INPUT "AONR").                
   ejextra = musz.
   
   RUN valdaaotemp_UI.
   RUN uttstart_UI IN huvprogh (INPUT 2).
   IF musz = FALSE THEN DO:   
      RUN nyao_UI (INPUT FALSE).      
      RUN refreshbrw_UI IN brwproc[{&RIGHT-BROWSE}]. 
      FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
      valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR. 
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdaaotemp)).
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}]. 
   END.
   RUN relaonr IN aonrapph.
   IF ejextra = FALSE THEN RUN extrakopp_UI (INPUT "AONR").
   musz = FALSE.
   {musarrow.i}
   RUN checkbrw_UI (OUTPUT musz).
   IF musz = TRUE THEN DO:
      musz = FALSE.
      RUN changesize_UI IN brwproc[{&ARROWS}] (INPUT TRUE). /*Input TRUE = vänster browser*/ 
   END.
END PROCEDURE.
PROCEDURE under_UI :
   DEFINE VARIABLE ejextra AS LOGICAL NO-UNDO.   
   {OMSTARTAVGURUH.I}
   RUN selectfoc_UI.
   FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = Guru.GlobalaVariabler:plusaonr AND valdaaotemp.DELNR = Guru.GlobalaVariabler:plusdnr NO-LOCK NO-ERROR.
   IF NOT AVAILABLE valdaaotemp THEN RETURN.
   RUN hamtaavslut IN aonrapph (INPUT valdaaotemp.AONR,INPUT valdaaotemp.DELNR,OUTPUT aoavslut). 
   valdaaotemp.AONRAVDATUM = aoavslut.
   IF aoavslut NE 01/01/91 THEN DO:
      MESSAGE "Det går ej att underindela ett avslutat " Guru.Konstanter:gaok "!" VIEW-AS ALERT-BOX.
      RETURN.
   END.
   IF Guru.Konstanter:aonrsekvar[2] = FALSE THEN DO:
      MESSAGE "Du är inte behörig att göra ändringar på " LC(Guru.Konstanter:gaol) "."
      VIEW-AS ALERT-BOX.
      RETURN.
   END.   
   ASSIGN 
   valdarec = RECID(valdaaotemp)
   aonrvar = valdaaotemp.AONR
   valnr = valdaaotemp.AONR
   delnrvar = valdaaotemp.DELNR.
   /* HÄMTA RECID AONRTAB - TEMPORÄR LÖSNING */
   RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec). 
   /* sista delnr? */
   RUN sistadelnr IN aonrapph (INPUT aonrvar,INPUT valdaaotemp.OMRADE,OUTPUT hjdelvar).
   hjdelvar = hjdelvar + 1.
   RUN DELNRAND.W (INPUT-OUTPUT hjdelvar, OUTPUT musz, INPUT aonrvar,INPUT valdaaotemp.OMRADE).
   IF musz = TRUE THEN DO:
      musz = FALSE.
      RETURN.
   END.      
   RUN under IN aonrapph (INPUT aonrrec,INPUT hjdelvar).   
   RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT hjdelvar,OUTPUT aonrrec).    
   
   RUN nyao_UI (INPUT TRUE).      
   FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
   valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.
   IF AVAILABLE valdaaotemp THEN DO:
      MESSAGE "Underindelat " LC(Guru.Konstanter:gaok) " lagrat. Gör ändringar via - " Guru.Konstanter:gaok " huvud."
      VIEW-AS ALERT-BOX.    
   END.
   valdarec = RECID(valdaaotemp).
   RUN refreshbrw_UI IN brwproc[{&RIGHT-BROWSE}].
   RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].    
   musz = FALSE.
   RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec). 
   RUN uttstart_UI IN huvprogh (INPUT 1).
   RUN valdaao_UI.
   {AVBGOM2.I}
   {NYTTAONR.I}
   RUN uttstart_UI IN huvprogh (INPUT 2).
   ejextra = musz.
   RUN valdaaotemp_UI.
   RUN refreshbrw_UI IN brwproc[{&RIGHT-BROWSE}].      
   FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
   valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.
   IF AVAILABLE valdaaotemp THEN DO:
      valdarec = RECID(valdaaotemp).
      RUN andraort IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT TABLE evaldaao).
      FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
      valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.
      FIND FIRST evaldaao WHERE evaldaao.AONR = aonrvar AND 
      evaldaao.DELNR = delnrvar NO-LOCK NO-ERROR.
      BUFFER-COPY evaldaao TO valdaaotemp.
      RUN refreshbrw_UI IN brwproc[{&RIGHT-BROWSE}].
      FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
      valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdaaotemp)).
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].      
   END.
   RUN relaonr IN aonrapph.
   IF ejextra = FALSE THEN RUN extrakopp_UI (INPUT "AONR").
   RUN checkbrw_UI (OUTPUT musz).
   IF musz = TRUE THEN DO:
      musz = FALSE.
      RUN changesize_UI IN brwproc[{&ARROWS}] (INPUT TRUE). /*Input TRUE = vänster browser*/ 
   END.    
   {musarrow.i}
END PROCEDURE.

PROCEDURE bytaonr_UI :   
   {OMSTARTAVGURUH.I}
   RUN selectfoc_UI.
   valdarec = valdaobh:RECID.
   FIND FIRST valdaaotemp WHERE ROWID(valdaaotemp) = valdaobh:ROWID NO-LOCK NO-ERROR.
   IF NOT AVAILABLE valdaaotemp THEN RETURN.
   RAD_FAST = valdaaotemp.FASTAAONR.
   ASSIGN
   aonrvar = valdaaotemp.AONR
   delnrvar = valdaaotemp.DELNR.
   IF valdaaotemp.DELNR NE 0 THEN DO:
      MESSAGE "Byte måste göras för huvudnumret. Det vill säga delnr 0. Samtliga
      undernummer byts då."  VIEW-AS ALERT-BOX.
      RETURN.
   END.
   RUN bytaokoll IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT TABLE felmeddtemp).
   FIND FIRST felmeddtemp NO-LOCK NO-ERROR.
   IF AVAILABLE felmeddtemp THEN DO:
      MESSAGE felmeddtemp.FELMEDD VIEW-AS ALERT-BOX.
      DELETE felmeddtemp.
      RETURN.
   END.     
   valdarec2 = RECID(valdaaotemp).
   kalkrec = ?.
   ASSIGN
   aonrvar = valdaaotemp.AONR
   delnrvar = valdaaotemp.DELNR.
   RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec).
   ASSIGN aonrrec2 = aonrrec.
   {AVBGOM2.I}    
   RUN uttstart_UI IN huvprogh (INPUT 1).
   RUN valdaao_UI.
   RUN NYTTAONRU.W (INPUT TRUE,INPUT TRUE, INPUT 3, 
                   INPUT-OUTPUT aonrvar, INPUT-OUTPUT delnrvar, INPUT ?,INPUT ? ).   
   RUN frametitle_UI IN huvprogh (INPUT "AONR").
   RUN uttstart_UI IN huvprogh (INPUT 2).
   RUN valdaaotemp_UI.
   {AVBFRAM2.I}
   IF musz = FALSE THEN DO:
      FIND FIRST valdaaotemp WHERE RECID(valdaaotemp) = valdarec2 NO-LOCK NO-ERROR.
      RUN nyao_UI (INPUT FALSE).
      FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
      valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdaaotemp)).
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").  
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].      
   END.
   RUN relaonr IN aonrapph.
   musz = FALSE.
   {musarrow.i}
END PROCEDURE.


PROCEDURE omrkoll_UI :
   DEFINE INPUT PARAMETER omrkoll AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER bestkoll AS CHARACTER NO-UNDO.
   FOR EACH valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND valdaaotemp.OMRADE NE omrkoll:
      valdaaotemp.OMRADE = omrkoll.
   END.
   FOR EACH utsokaonr WHERE utsokaonr.AONR = aonrvar AND utsokaonr.OMRADE NE omrkoll:
      utsokaonr.OMRADE = omrkoll.
   END.
   FOR EACH valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND valdaaotemp.BESTID NE bestkoll:
      valdaaotemp.BESTID = bestkoll.
   END.
   FOR EACH utsokaonr WHERE utsokaonr.AONR = aonrvar AND utsokaonr.BESTID NE bestkoll:
      utsokaonr.BESTID = bestkoll.
   END.
   {musarrow.i}
END PROCEDURE.
PROCEDURE andra_UI :
   IF Guru.Konstanter:aonrsekvar[2] = FALSE THEN DO:
      MESSAGE "Du är inte behörig att göra ändringar på " LC(Guru.Konstanter:gaol) "."
      VIEW-AS ALERT-BOX.
      RETURN.
   END.   
   {OMSTARTAVGURUH.I} 
   RUN selectfoc_UI.
   FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = Guru.GlobalaVariabler:plusaonr AND valdaaotemp.DELNR = Guru.GlobalaVariabler:plusdnr NO-LOCK NO-ERROR.
   IF NOT AVAILABLE valdaaotemp THEN RETURN.
   ASSIGN
   aonrvar = valdaaotemp.AONR
   valnr = valdaaotemp.AONR
   delnrvar = valdaaotemp.DELNR
   valdarec = RECID(valdaaotemp).
   RUN hamtaorec IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT aonrrec).
   
   {NYTTAONR1.I}  
   RUN uttstart_UI IN huvprogh (INPUT 1).
   RUN valdaao_UI.
   RUN NYTTAONRU.W (INPUT FALSE,INPUT FALSE, INPUT 1, 
   INPUT-OUTPUT aonrvar, INPUT-OUTPUT delnrvar, INPUT ?,INPUT ? ). 

   RUN uttstart_UI IN huvprogh (INPUT 2).
   RUN valdaaotemp_UI.
   
   RUN frame_UI IN huvprogh (INPUT "AONR").
   RUN frametitle_UI IN huvprogh (INPUT "AONR").
   RUN sekbtn_UI IN btnguruh.
   {NYTTAONR2.I}
   {FORETIDL.I}   
   RUN andraort IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT TABLE evaldaao).
   FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
   valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.
   FIND FIRST evaldaao WHERE evaldaao.AONR = aonrvar AND 
   evaldaao.DELNR = delnrvar NO-LOCK NO-ERROR.
   BUFFER-COPY evaldaao TO valdaaotemp.
   RUN refreshbrw_UI IN brwproc[{&RIGHT-BROWSE}].
   FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
   valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.

   /* undernummer skall ha samma område och beställare som huvudnumret för tidskrivande
   företag*/  
   IF Guru.Konstanter:varforetypval[2] = 0 THEN DO:   
      IF valdaaotemp.DELNR = 0 THEN RUN omrkoll_UI (INPUT valdaaotemp.OMRADE, INPUT valdaaotemp.BESTID).
   END.
   FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
   valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.
   RUN gorlika_UI IN brwproc[{&ARROWS}] (INPUT "AONR", INPUT "DELNR").
   RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdaaotemp)).
   RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}]. 
   RUN relaonr IN aonrapph.   
   {musarrow.i} 
   RUN urvalaktiv_UI IN brwproc[{&ARROWS}] (OUTPUT brwakt).
   IF brwakt = TRUE THEN DO:
      FIND FIRST utsokaonr WHERE utsokaonr.AONR = aonrvar AND
      utsokaonr.DELNR = delnrvar NO-LOCK NO-ERROR.
      IF AVAILABLE utsokaonr THEN DO:
         RUN setlastrowid_UI IN brwproc[{&LEFT-BROWSE}] (INPUT ROWID(utsokaonr)).
         RUN lastselectdyn_UI IN brwproc[{&LEFT-BROWSE}].
      END.
   END.
END PROCEDURE.

PROCEDURE sparaaofavoriter_UI :
   tthandle = TEMP-TABLE valdaaotemp:HANDLE.
   FIND FIRST sparaladdatemp NO-ERROR.
   IF NOT AVAILABLE sparaladdatemp THEN CREATE sparaladdatemp.
   ASSIGN
   sparaladdatemp.GLOBANV = Guru.Konstanter:globanv /*Användare, i detta fall ELPAO*/
   sparaladdatemp.BENAMNING = "AONR" /*Benämnings sufix, i detta fall ELPAO$STOR*/
   sparaladdatemp.TABVAL = "AONRTAB" /*Tabellnamn*/
   sparaladdatemp.FALTVALAO = "AONR" /*Character field*/
   sparaladdatemp.FALTVALDEL = "DELNR" /*Integer field*/
   sparaladdatemp.FALTVALDATE = "".  /*DATE field*/
   RUN sparabrw_UI IN brwproc[{&RIGHT-BROWSE}] 
      (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp).
END PROCEDURE.

PROCEDURE exkoll_UI :
   DEFINE INPUT PARAMETER vao AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER vdnr AS INTEGER NO-UNDO.
   EMPTY TEMP-TABLE inextrakopptemp NO-ERROR.
   CREATE inextrakopptemp.          
   ASSIGN
   inextrakopptemp.PROGRAM = "FBAONR"                   
   inextrakopptemp.KOPPLACHAR1 = ?
   inextrakopptemp.KOPPLAINT1 =  ?      
   inextrakopptemp.KOPPLACHAR2 = vao            
   inextrakopptemp.KOPPLAINT2 =  vdnr.
   RUN finnsextra_UI IN fbestapph (INPUT TABLE inextrakopptemp,OUTPUT musz).
   EMPTY TEMP-TABLE inextrakopptemp NO-ERROR.
   IF musz = TRUE THEN RETURN.
   CREATE inextrakopptemp.          
   ASSIGN
   inextrakopptemp.PROGRAM = "INTAONR"                   
   inextrakopptemp.KOPPLACHAR1 = ?
   inextrakopptemp.KOPPLAINT1 =  ?      
   inextrakopptemp.KOPPLACHAR2 = vao            
   inextrakopptemp.KOPPLAINT2 =  vdnr.
   RUN finnsextra_UI IN fbestapph (INPUT TABLE inextrakopptemp,OUTPUT musz).
   EMPTY TEMP-TABLE inextrakopptemp NO-ERROR.
   IF musz = TRUE THEN RETURN.

END PROCEDURE.
PROCEDURE exbort_UI :
   DEFINE INPUT PARAMETER vao AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER vdnr AS INTEGER NO-UNDO.
   EMPTY TEMP-TABLE inextrakopptemp NO-ERROR.      
   CREATE inextrakopptemp.          
   ASSIGN
   inextrakopptemp.PROGRAM = "FBAONR"                   
   inextrakopptemp.KOPPLACHAR1 = vao
   inextrakopptemp.KOPPLAINT1 =  vdnr      
   inextrakopptemp.KOPPLACHAR2 = ?            
   inextrakopptemp.KOPPLAINT2 =  ?.
   RUN exbort_UI IN fbestapph (INPUT TABLE inextrakopptemp).
   CREATE inextrakopptemp.          
   ASSIGN
   inextrakopptemp.PROGRAM = "INTAONR"                   
   inextrakopptemp.KOPPLACHAR1 = vao
   inextrakopptemp.KOPPLAINT1 =  vdnr      
   inextrakopptemp.KOPPLACHAR2 = ?            
   inextrakopptemp.KOPPLAINT2 =  ?.
   RUN exbort_UI IN fbestapph (INPUT TABLE inextrakopptemp).

   EMPTY TEMP-TABLE inextrakopptemp NO-ERROR.
   CREATE inextrakopptemp.          
   ASSIGN
   inextrakopptemp.PROGRAM = "AOTIDPERS"
   inextrakopptemp.KOPPLACHAR1 = vao    
   inextrakopptemp.KOPPLAINT1 = vdnr 
   inextrakopptemp.KOPPLACHAR2 = ?
   inextrakopptemp.KOPPLAINT2 =  ?.
   RUN exbort_UI IN fbestapph (INPUT TABLE inextrakopptemp).   
   CREATE inextrakopptemp.          
   ASSIGN
   inextrakopptemp.PROGRAM = "AODAGBOK"                   
   inextrakopptemp.KOPPLACHAR1 = vao               
   inextrakopptemp.KOPPLAINT1 = vdnr
   inextrakopptemp.KOPPLACHAR2 = ?            
   inextrakopptemp.KOPPLAINT2 =  ?.   
   RUN exbort_UI IN fbestapph (INPUT TABLE inextrakopptemp). 
   RUN refbort IN aonrapph (INPUT vao,INPUT vdnr).
   IF Guru.Konstanter:globforetag = "GRAN" OR Guru.Konstanter:globforetag = "GKAL" THEN DO:
      IF Guru.Konstanter:appcon THEN DO:
         RUN MEDDAONR.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT
         (INPUT aonrrec, INPUT 2,INPUT "",INPUT "",INPUT "",OUTPUT skick,OUTPUT efel).
      END.         
   END.
   FIND utsokaonr WHERE utsokaonr.AONR = valdaaotemp.AONR AND
   utsokaonr.DELNR = valdaaotemp.DELNR NO-ERROR.
   IF AVAILABLE utsokaonr THEN DO:
      DELETE utsokaonr.
      RUN selnextprevrow_UI IN brwproc[{&LEFT-BROWSE}].
      
      RUN openbdyn_UI IN brwproc[{&LEFT-BROWSE}] (INPUT "").
      RUN lastselectdyn_UI IN brwproc[{&LEFT-BROWSE}].
   END.
   DELETE valdaaotemp. 
   RUN selnextprevrow_UI IN brwproc[{&RIGHT-BROWSE}].
         
   RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
   RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
END PROCEDURE.
PROCEDURE btnok_UI :
   DEFINE INPUT PARAMETER vao AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER vdnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER musz AS LOGICAL NO-UNDO.
   RUN btnok IN bortaoapph (INPUT vao,INPUT vdnr,OUTPUT musz).
END PROCEDURE.
         
PROCEDURE nyao_UI :
   DEFINE INPUT PARAMETER andradelnr AS LOGICAL NO-UNDO.
   IF musz = FALSE THEN musz = musz.      
   ELSE DO:
      RUN delaonr IN aonrapph (INPUT aonrvar, INPUT delnrvar).      
      musz = FALSE.
      RETURN.
   END.

   /*FORETIDLAGE*/
   status-ok = SESSION:SET-WAIT-STATE("GENERAL").
   {FORETIDL.I}
   IF musz = FALSE THEN DO:
      IF andradelnr = TRUE THEN DO:
         ASSIGN delnrvar = hjdelvar.
         andradelnr = FALSE.
      END.              
      RUN skapaonr IN aonrapph (INPUT aonrvar,INPUT delnrvar,OUTPUT TABLE evaldaao).       
      FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
      valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.
      IF NOT AVAILABLE valdaaotemp THEN CREATE valdaaotemp.
      FIND FIRST evaldaao WHERE evaldaao.AONR = aonrvar AND 
      evaldaao.DELNR = delnrvar NO-LOCK NO-ERROR.      
      BUFFER-COPY evaldaao TO valdaaotemp.
      RUN refreshbrw_UI IN brwproc[{&RIGHT-BROWSE}]. 
      FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
      valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR. 
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdaaotemp)).
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}]. 
   END.   
END PROCEDURE.


PROCEDURE mdubbrefnr_UI :
   IF AVAILABLE valdaaotemp THEN DO:
      ASSIGN
      tillbakaaonr = valdaaotemp.AONR
      tillbakadelnr = valdaaotemp.DELNR.
   END.
   ELSE tillbakaaonr = ?.      
   RUN refhmtaen IN aonrapph (INPUT FILL-IN-REF:SCREEN-VALUE, OUTPUT TABLE evaldaao, OUTPUT TABLE felmeddtemp,
                              OUTPUT aonrvar,OUTPUT delnrvar).
   FOR EACH evaldaao:
      FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = evaldaao.AONR AND valdaaotemp.DELNR = evaldaao.DELNR
      NO-LOCK NO-ERROR.
      IF NOT AVAILABLE valdaaotemp THEN DO:
         CREATE valdaaotemp.
         BUFFER-COPY evaldaao TO valdaaotemp.
      END.
   END.
   EMPTY TEMP-TABLE evaldaao NO-ERROR. 

   FIND FIRST felmeddtemp NO-LOCK NO-ERROR.
   IF AVAILABLE felmeddtemp THEN DO:
      FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = tillbakaaonr AND 
      valdaaotemp.DELNR = tillbakadelnr NO-LOCK NO-ERROR. 
      IF AVAILABLE valdaaotemp THEN DO:
         RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdaaotemp)).
         RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
         RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].        
      END.
      MESSAGE felmeddtemp.FELMEDD VIEW-AS ALERT-BOX TITLE "Meddelande".
      DELETE felmeddtemp.         
   END.
   ELSE DO:
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
      FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
      valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.
      IF AVAILABLE valdaaotemp THEN DO:      
         RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdaaotemp)).
         RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
      END.
   END.     
END PROCEDURE.

PROCEDURE mdubbdelnr_UI :
   ASSIGN
   aonrvar = FILL-IN_EAONR:SCREEN-VALUE
   delnrvar = INTEGER(FILL-IN_DELNR:SCREEN-VALUE).   
   
   IF AVAILABLE valdaaotemp THEN DO:
      ASSIGN
      tillbakaaonr = valdaaotemp.AONR
      tillbakadelnr = valdaaotemp.DELNR.
   END.
   ELSE tillbakaaonr = ?.
   IF TOG_ALLAAO:CHECKED = TRUE THEN delnrvar = ?.
   FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
   valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR. 
   IF AVAILABLE valdaaotemp THEN DO:
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdaaotemp)).
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].        
   END.
   ELSE DO:
      IF TOG_ALLAAO:CHECKED = TRUE THEN DO:
         FOR EACH valdaaotemp WHERE valdaaotemp.AONR = aonrvar:
            DELETE valdaaotemp.
         END.
      END.
      RUN aonrhmtaen IN aonrapph (INPUT aonrvar,INPUT delnrvar,
      OUTPUT TABLE valdaaotemp APPEND,OUTPUT TABLE felmeddtemp).
      FIND FIRST felmeddtemp NO-LOCK NO-ERROR.
      IF AVAILABLE felmeddtemp THEN DO:
         FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = tillbakaaonr AND 
         valdaaotemp.DELNR = tillbakadelnr NO-LOCK NO-ERROR. 
         IF AVAILABLE valdaaotemp THEN DO:
            RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdaaotemp)).
            RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
            RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].        
         END.
         MESSAGE felmeddtemp.FELMEDD VIEW-AS ALERT-BOX TITLE "Meddelande".
         DELETE felmeddtemp.         
      END.
      ELSE DO:
         RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
         IF delnrvar = ? THEN DO:
            RUN aokomp_UI (INPUT 1).
            FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND valdaaotemp.DELNR = INTEGER(FILL-IN_DELNR:SCREEN-VALUE) NO-LOCK NO-ERROR.
            IF NOT AVAILABLE valdaaotemp THEN DO:
               FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar NO-LOCK NO-ERROR.
            END.
            
         END.
         ELSE DO:
            FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = aonrvar AND 
            valdaaotemp.DELNR = delnrvar NO-LOCK NO-ERROR.
         END.
         IF AVAILABLE valdaaotemp THEN DO:      
            RUN aokomp_UI (INPUT 2).
            RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdaaotemp)).
            RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
         END.
      END.  
   END.
END PROCEDURE.

PROCEDURE btnhamt_UI :
   RUN utvald_UI.
   RUN allaao_UI.
   RUN title_UI IN brwproc[{&LEFT-BROWSE}].
END PROCEDURE.

PROCEDURE utvald_UI :     
   FIND FIRST uppvaltemp NO-ERROR.      
   ASSIGN         
   uppvaltemp.VISPERAR = FALSE
   uppvaltemp.AVSLUTSTART = DATE(FILL-IN-AVSTARTD:SCREEN-VALUE)
   uppvaltemp.AVSLUTSLUT = DATE(FILL-IN-AVSLUTD:SCREEN-VALUE).
   IF Guru.Konstanter:varforetypval[45] = 1 THEN.
   ELSE  uppvaltemp.BESTNAMN = CMB_BESORG:SCREEN-VALUE.
   ASSIGN 
   uppvaltemp.BEREDARE = CMB_BERE:SCREEN-VALUE
   SUBSTRING(uppvaltemp.PROJEKTOR,1,24) = CMB_PROJ:SCREEN-VALUE
   uppvaltemp.ARBANSVARIG = CMB_ANSV:SCREEN-VALUE
   uppvaltemp.AVDNAMN = CMB_AVD:SCREEN-VALUE.
   IF uppvaltemp.ARBANSVARIG = ? THEN uppvaltemp.ARBANSVARIG = "ALLA".
   IF uppvaltemp.AVDNAMN = ? THEN uppvaltemp.AVDNAMN = "ALLA".
   IF TOG_PAGA:CHECKED = TRUE AND TOG_AVSLUTADE:CHECKED = TRUE THEN DO:
      uppvaltemp.PAAV = 3.
   END.
   ELSE IF TOG_PAGA:CHECKED = FALSE AND TOG_AVSLUTADE:CHECKED = TRUE THEN DO:
      uppvaltemp.PAAV = 2.
   END.
   ELSE IF TOG_PAGA:CHECKED = TRUE AND TOG_AVSLUTADE:CHECKED = FALSE THEN DO:
      uppvaltemp.PAAV = 1.
   END.
   ELSE IF TOG_UPPLAGT:CHECKED = TRUE THEN DO:
      uppvaltemp.PAAV = 4.
      APPLY "VALUE-CHANGED" TO TOG_UPPLAGT.
   END.
   ELSE DO:
      ASSIGN
      TOG_PAGA:CHECKED = TRUE 
      TOG_AVSLUTADE:CHECKED = TRUE
      uppvaltemp.PAAV = 3.      
      APPLY "VALUE-CHANGED" TO TOG_AVSLUTADE.
   END.
   IF TOG_TILLF:CHECKED = TRUE AND TOG_FASTA:CHECKED = TRUE THEN DO:
      uppvaltemp.TILLFALLFAST = 3.
   END.
   ELSE IF TOG_TILLF:CHECKED = FALSE AND TOG_FASTA:CHECKED = TRUE THEN DO:
      uppvaltemp.TILLFALLFAST = 2.
   END.
   ELSE IF TOG_TILLF:CHECKED = TRUE AND TOG_FASTA:CHECKED = FALSE THEN DO:
      uppvaltemp.TILLFALLFAST = 1.
   END.
   ELSE DO:
      ASSIGN
      TOG_TILLF:CHECKED = TRUE 
      TOG_FASTA:CHECKED = TRUE
      uppvaltemp.TILLFALLFAST = 3.      
   END.
   FIND FIRST omrtemp WHERE omrtemp.NAMN = CMB_OMR:SCREEN-VALUE NO-LOCK NO-ERROR.      
   IF AVAILABLE omrtemp THEN uppvaltemp.OMRADE = omrtemp.OMRADE.
   ELSE uppvaltemp.OMRADE = "Alla".
   IF Guru.Konstanter:varforetypval[45] = 1 THEN uppvaltemp.BESTID =  "Alla".                     /* uppvaltemp.OMRADE.*/
   ELSE DO: 
      FIND FIRST bestkundallt WHERE bestkundallt.BESTNAMN = CMB_BESORG:SCREEN-VALUE NO-LOCK NO-ERROR.
      IF AVAILABLE bestkundallt THEN uppvaltemp.BESTID = bestkundallt.BESTID.
      ELSE DO:
         IF CMB_BESORG:SCREEN-VALUE = "Samma som ovan" THEN uppvaltemp.BESTID = uppvaltemp.OMRADE.
         ELSE uppvaltemp.BESTID = "Alla". 
      END.
   END.     
   FIND FIRST faktyptemp WHERE faktyptemp.VIFAKTTYP = CMB_FAK:SCREEN-VALUE NO-ERROR.
   uppvaltemp.FAKTTYP = faktyptemp.FAKTTYP.   
   FIND FIRST beredartemp WHERE beredartemp.NAMN = CMB_BERE:SCREEN-VALUE NO-ERROR.
   IF AVAILABLE beredartemp THEN uppvaltemp.BEREDARE = beredartemp.PERSONALKOD.
   ELSE uppvaltemp.BEREDARE = "ALLA".
   uppvaltemp.PROJEKTOR = "".
   FIND FIRST projtemp WHERE projtemp.NAMN = CMB_PROJ:SCREEN-VALUE NO-ERROR.
   IF AVAILABLE projtemp THEN SUBSTRING(uppvaltemp.PROJEKTOR,1,24) = projtemp.PERSONALKOD.
   ELSE SUBSTRING(uppvaltemp.PROJEKTOR,1,24) = "ALLA".
   SUBSTRING(uppvaltemp.PROJEKTOR,25,10) = FILL-IN-K2:SCREEN-VALUE.
   SUBSTRING(uppvaltemp.PROJEKTOR,35,10) = FILL-IN-K1:SCREEN-VALUE.
   SUBSTRING(uppvaltemp.PROJEKTOR,45,10) = FILL-IN-K3:SCREEN-VALUE.
   SUBSTRING(uppvaltemp.PROJEKTOR,55,10) = FILL-IN-K4:SCREEN-VALUE.
   FIND FIRST ansvaraotemp WHERE ansvaraotemp.NAMN = CMB_ANSV:SCREEN-VALUE NO-ERROR.
   IF AVAILABLE ansvaraotemp THEN uppvaltemp.ARBANSVARIG = ansvaraotemp.PERSONALKOD.
   ELSE uppvaltemp.ARBANSVARIG = "ALLA".
   FIND FIRST avdtemp WHERE avdtemp.AVDELNINGNAMN = CMB_AVD:SCREEN-VALUE NO-LOCK NO-ERROR.   
   IF AVAILABLE avdtemp THEN uppvaltemp.AVDNR = STRING(avdtemp.AVDELNINGNR).
   ELSE uppvaltemp.AVDNR = "ALLA".
END PROCEDURE.

PROCEDURE allaao_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/
   {OMSTARTAVGURUH.I}
   
   EMPTY TEMP-TABLE valsoktemp NO-ERROR.      
   EMPTY TEMP-TABLE utsokaonr NO-ERROR.
   CREATE valsoktemp.    
   ASSIGN
   valsoktemp.SOKCHAR[1] = CMB_ARBART:SCREEN-VALUE.   
   FIND FIRST aarttemp WHERE aarttemp.ARBBENAMNING = CMB_ARBART:SCREEN-VALUE USE-INDEX ARBARTKOD NO-LOCK NO-ERROR.
   IF AVAILABLE aarttemp THEN DO:           
      valsoktemp.SOKINT[1] = aarttemp.ARBARTKOD.
   END.
   ELSE valsoktemp.SOKCHAR[1] = "alla".
   valsoktemp.SOKCHAR[4] = CMB_PRIO:SCREEN-VALUE.
   FIND FIRST priotemp WHERE priotemp.P-BENAMNING = CMB_PRIO:SCREEN-VALUE NO-ERROR.
   IF AVAILABLE priotemp THEN DO:           
      valsoktemp.SOKINT[4] = priotemp.PKOD.
   END.
   ELSE valsoktemp.SOKCHAR[4] = "alla". 
   valsoktemp.SOKCHAR[3] = "Alla".
   FIND FIRST jurperstemp WHERE jurperstemp.NAMN = CMB_JURP:SCREEN-VALUE NO-LOCK NO-ERROR.        
   IF AVAILABLE jurperstemp THEN valsoktemp.SOKCHAR[3] = jurperstemp.JUDID. 
   
   RUN aonrhmt IN aonrapph 
   (INPUT " ",INPUT TABLE valsoktemp,
   INPUT-OUTPUT TABLE uppvaltemp,INPUT-OUTPUT TABLE utsokaonr). 
   
   RUN openbdyn_UI IN brwproc[{&LEFT-BROWSE}] (INPUT "").
   RUN fetchselrowid_UI IN brwproc[{&LEFT-BROWSE}].

   {musarrow.i}    
END PROCEDURE.

/*STARTUPP*/
PROCEDURE main_UI :
   {OMSTARTAVGURUH.I}  
      
   FIND FIRST uppvaltemp NO-LOCK NO-ERROR.
   IF NOT AVAILABLE uppvaltemp THEN CREATE uppvaltemp.
   {ALLSTARTDYN.I}   
   C-Win:TITLE = Guru.Konstanter:gaol + "hantering" + "-" + "Systemsupport 090/184540    elpool.ume@elpool.se  " + foretemp.ATRHOME.
   IF Guru.Konstanter:globanv = "CELPAO" OR Guru.Konstanter:globanv = "Cclha" THEN DO:
      TOG_AONY:HIDDEN = FALSE.
      TOG_AONY:CHECKED = TRUE.
   END.
   ELSE TOG_AONY:HIDDEN = TRUE.
   IF TOG_HUVNR:CHECKED = TRUE THEN uppvaltemp.DELNRKOLL = FALSE.
   IF TOG_HUVNR:CHECKED = FALSE THEN uppvaltemp.DELNRKOLL = TRUE.    
   RUN VISMEDDU.W.   
   RUN getfirst_UI IN brwproc[{&LEFT-BROWSE}]. 
   IF Guru.Konstanter:varforetypval[3] >= 1 AND Guru.Konstanter:varforetypval[3] < 4 THEN musz = musz.
   ELSE CMB_FAK:HIDDEN = TRUE.
   RUN goma_UI.
   ASSIGN
   BRW_AONR:HIDDEN = FALSE.
   BRW_KTO:HIDDEN = TRUE.      
   {musarrow.i} 
  
   FIND FIRST jurperstemp NO-LOCK NO-ERROR.
   IF NOT AVAILABLE jurperstemp THEN CMB_JURP:HIDDEN = TRUE.      
   IF labelvar2 = "" THEN FILL-IN-K2:HIDDEN = TRUE.
   IF labelvar1 = "" THEN FILL-IN-K1:HIDDEN = TRUE.
   IF labelvar3 = "" THEN FILL-IN-K3:HIDDEN = TRUE.
   IF labelvar4 = "" THEN FILL-IN-K4:HIDDEN = TRUE.
   IF labelvar1 = "" AND labelvar2 = ""  THEN FILL-IN-KTO:HIDDEN  = TRUE.      
   IF Guru.Konstanter:varforetypval[33] = 0 THEN DO:
      TOG_FASTA:HIDDEN = TRUE.
      TOG_TILLF:HIDDEN = TRUE.
   END.
   IF Guru.Konstanter:varforetypval[45] = 1 THEN DO:
      CMB_BESORG:HIDDEN = TRUE.
   END.      
   
END PROCEDURE.

PROCEDURE brwfix_UI :
   RUN wversion_UI IN brwproc[1] (INPUT 1).
   RUN wversion_UI IN brwproc[2] (INPUT 1).
END PROCEDURE.
PROCEDURE main1_UI :
   IF Guru.Konstanter:appcon THEN DO:                           
      RUN ANSBER.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
      (OUTPUT TABLE ansvaraotemp,OUTPUT TABLE beredartemp,OUTPUT TABLE projtemp).
   END.
   ELSE DO:
      RUN ANSBER.P 
      (OUTPUT TABLE ansvaraotemp,OUTPUT TABLE beredartemp,OUTPUT TABLE projtemp).
   END.
  
   Guru.Konstanter:StoppaOmrSek(TEMP-TABLE ansvaraotemp:HANDLE).
   Guru.Konstanter:StoppaOmrSek(TEMP-TABLE beredartemp:HANDLE).
   Guru.Konstanter:StoppaOmrSek(TEMP-TABLE projtemp:HANDLE).
   
   EMPTY TEMP-TABLE priotemp NO-ERROR. 
   RUN laddaprio IN nyttaoapph2 ( OUTPUT TABLE priotemp).           
   
   
   IF Guru.Konstanter:appcon THEN DO:                           
      RUN ARBARTS.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
      (OUTPUT TABLE aarttemp).
   END.
   ELSE DO:
      RUN ARBARTS.P 
      (OUTPUT TABLE aarttemp).                  
   END.
   musz = FALSE.
   CMB_ANSV:LIST-ITEMS = "".
   status-ok = CMB_ANSV:ADD-FIRST("Alla"). 
   FOR EACH ansvaraotemp USE-INDEX NAMN NO-LOCK:
      status-ok = CMB_ANSV:ADD-LAST(ansvaraotemp.NAMN).
   END.   
   CMB_PROJ:LIST-ITEMS = "".
   status-ok = CMB_PROJ:ADD-FIRST("Alla").
   FOR EACH projtemp USE-INDEX NAMN NO-LOCK:
      status-ok = CMB_PROJ:ADD-LAST(projtemp.NAMN).
   END.
   CMB_BERE:LIST-ITEMS = "".
   status-ok = CMB_BERE:ADD-FIRST("Alla").
   FOR EACH beredartemp USE-INDEX NAMN NO-LOCK:
      status-ok = CMB_BERE:ADD-LAST(beredartemp.NAMN).
   END.
   CMB_FAK:LIST-ITEMS = "".
   FOR EACH faktyptemp : 
      status-ok = CMB_FAK:ADD-LAST(faktyptemp.VIFAKTTYP).      
   END.
   
   CMB_ARBART:LIST-ITEMS = "".
   status-ok = CMB_ARBART:ADD-FIRST("Alla").
   FOR EACH aarttemp USE-INDEX ARBARTKOD NO-LOCK:
      status-ok = CMB_ARBART:ADD-LAST(aarttemp.ARBBENAMNING).
   END.
   FIND FIRST aarttemp NO-LOCK NO-ERROR.
   IF NOT AVAILABLE aarttemp THEN DO:
      CMB_ARBART:HIDDEN = TRUE.
   END.
   {CMB_PRIO.I}   
   RUN labelk2 IN aonrapph (OUTPUT labelvar2).      
   RUN labelk3 IN aonrapph (OUTPUT labelvar3).   
   RUN labelk4 IN aonrapph (OUTPUT labelvar4).   
   ASSIGN
   FBTN_BER:LABEL = "Bereda " + LC(Guru.Konstanter:gaok)
   FBTN_KALK:LABEL = "Kalkylera " + LC(Guru.Konstanter:gaok) 
   FBTN_MARK:LABEL = "Markvärdera " + LC(Guru.Konstanter:gaok) 
   FBTN_FAKT:LABEL = "Fakturera " + LC(Guru.Konstanter:gaok) 
   CMB_JURP:LABEL = Guru.Konstanter:gjuk
   CMB_AVD:LABEL= Guru.Konstanter:gavdk
   FILL-IN-K2:LABEL = labelvar2
   FILL-IN-K3:LABEL = labelvar3
   FILL-IN-K4:LABEL = labelvar4
   FILL-IN-AOTEXT:SCREEN-VALUE = "Gör urval av " + LC(Guru.Konstanter:gaol)
   BTN_ALLBACK:TOOLTIP = "Alla valda " + LC(Guru.Konstanter:gaok) + " tas bort från vallistan"   
   BTN_ALLOVER:TOOLTIP = "Alla " + LC(Guru.Konstanter:gaok) + " väljs"
   FBTN_AVSAONR:TOOLTIP = "Avsluta " + LC(Guru.Konstanter:gaok) + ":et. Ingen tidskrivning kan registreras mera."
   BTN_BORT:TOOLTIP = "Ta bort ett " + LC(Guru.Konstanter:gaok)
   FBTN_BYTPNR:TOOLTIP = "Byt ett "  + LC(Guru.Konstanter:gaok) + " till ett annat och flytta gjorda kopplingar "
   BTN_HAMT:TOOLTIP = "Dina val ovan avgör vilka " + LC(Guru.Konstanter:gaok) +  " du får i listan nedan."
   BTN_NY:TOOLTIP = "Skapa ett nytt " + LC(Guru.Konstanter:gaok)
   FBTN_UNDER:TOOLTIP = "Underindela dvs skapa nya delnr kopierar ett " + LC(Guru.Konstanter:gaok)
   FBTN_KOPI:TOOLTIP = "Kopierar ett " + LC(Guru.Konstanter:gaok) + " och flyttar gjorda beredningar, kalkyler och värderingar"
   FBTN_VISAO:TOOLTIP = "Visa/skriv ut allt som rör " + LC(Guru.Konstanter:gaok) + ":et"
   FBTN_UPP:TOOLTIP = "Här kan du ändra allt som rör " + LC(Guru.Konstanter:gaok) + ":et"
   FILL-IN_EAONR:TOOLTIP = "Tryck RETURN här för välja enstaka " + LC(Guru.Konstanter:gaok) 
   FILL-IN_SAONR:LABEL = Guru.Konstanter:gaok
   FILL-IN_EAONR:LABEL = Guru.Konstanter:gaok
   FILL-IN-REF:LABEL = Guru.Konstanter:grefbefk
   CMB_PROJ:LABEL = Guru.Konstanter:gprojl
   CMB_BERE:LABEL = Guru.Konstanter:gberek 
   CMB_ANSV:LABEL = Guru.Konstanter:garbak
   CMB_OMR:LABEL = Guru.Konstanter:gomrk   
   CMB_BESORG:LABEL = RIGHT-TRIM(SUBSTRIN(Guru.Konstanter:gbestk,1,12)). 
   RUN cellabel_UI IN brwproc[2] (INPUT "BEREDARE", INPUT Guru.Konstanter:gberek).
   RUN cellabel_UI IN brwproc[1] (INPUT "BEREDARE", INPUT Guru.Konstanter:gberek).   
   RUN labelk1 IN aonrapph (OUTPUT labelvar1).
   FILL-IN-K1:LABEL = labelvar1.   
   ASSIGN
   FBTN_UPP:LABEL = Guru.Konstanter:gaok + " huvud" 
   FBTN_BYTPNR:LABEL = "Byt " + Guru.Konstanter:gaok  
   FBTN_AVSAONR:LABEL = "Avsluta " + LC(Guru.Konstanter:gaok).    
END PROCEDURE.

PROCEDURE PlaceraKnapp_UI :
   Guru.GlobalaVariabler:StartRadForKnappar = BRW_VAONR:ROW. 
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_UPP).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_UNDER).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_KOPI).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_VISAO).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_AVSAONR).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_RAPP).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_KOST).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_BYTPNR).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_AVROP).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_STATUS).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_TIDPLAN).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_HAOF).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_AOF).       
   RUN placeracmb_UI .
         
END PROCEDURE.

PROCEDURE placeraCmb_UI :
    
   Guru.GlobalaVariabler:StartRadForKnappar = CMB_JURP:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_JURP). 
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_AVD).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_OMR).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_BESORG).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_PRIO).
   Guru.GlobalaVariabler:StartRadForKnappar = CMB_PROJ:ROW. 
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_PROJ).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_BERE).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_ANSV).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_ARBART).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_FAK).
   RUN placeraFill_UI.        
END PROCEDURE.

PROCEDURE placeraFill_UI :
   Guru.GlobalaVariabler:StartRadForKnappar = FILL-IN-K1:ROW. 
   Guru.Konstanter:PlaceraKnapparLodratt(FILL-IN-K1).
   Guru.Konstanter:PlaceraKnapparLodratt(FILL-IN-K2).
   Guru.Konstanter:PlaceraKnapparLodratt(FILL-IN-K3).
   Guru.Konstanter:PlaceraKnapparLodratt(FILL-IN-K4).
   FILL-IN-MELL:HIDDEN = TRUE. 
   FILL-IN-OCH:HIDDEN = TRUE.    
   Guru.GlobalaVariabler:MellanRumKnappar = 1.
   TOG_ALLAAO:ROW = FILL-IN_EAONR:ROW.  
   Guru.GlobalaVariabler:StartKolumnForKnappar = FILL-IN-AOTEXT-3:COLUMN.
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN-AOTEXT-3,TRUE).
   
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN_EAONR,TRUE). 
   Guru.Konstanter:LabelFlyttExtra(FILL-IN_EAONR).
   Guru.GlobalaVariabler:StartKolumnForKnappar = FILL-IN_EAONR:COLUMN + FILL-IN_EAONR:WIDTH-CHARS + 1.
  
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN_DELNR,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(TOG_ALLAAO,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN-REF,TRUE).
   Guru.Konstanter:LabelFlyttExtra(FILL-IN-REF).
   Guru.GlobalaVariabler:MellanRumKnappar = 0.
END PROCEDURE.

PROCEDURE sek_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/   
   Guru.GlobalaVariabler:collefth = ?.
   IF Guru.Konstanter:aonrsekvar[1] = TRUE THEN BTN_NY:HIDDEN = FALSE.
   ELSE BTN_NY:HIDDEN = TRUE.
   IF Guru.Konstanter:aonrsekvar[3] = TRUE THEN BTN_BORT:HIDDEN = FALSE.
   ELSE BTN_BORT:HIDDEN = TRUE.

   IF Guru.Konstanter:aonrsekvar[2] = TRUE THEN DO:
      FBTN_UPP:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_UPP:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).       
   END. 
   ELSE FBTN_UPP:HIDDEN = TRUE.
   IF Guru.Konstanter:aonrsekvar[5] = TRUE THEN DO:
      FBTN_UNDER:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_UNDER:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).      
   END.
   ELSE FBTN_UNDER:HIDDEN = TRUE.
   IF Guru.Konstanter:aonrsekvar[5] = TRUE THEN DO:
      FBTN_KOPI:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_KOPI:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).            
   END.
   ELSE FBTN_KOPI:HIDDEN = TRUE.
   IF Guru.Konstanter:aonrsekvar[4] = TRUE THEN DO:
      FBTN_VISAO:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_VISAO:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
                 
   END.
   ELSE FBTN_VISAO:HIDDEN = TRUE.
   IF Guru.Konstanter:aonrsekvar[9] = TRUE THEN DO:
      FBTN_AVSAONR:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_AVSAONR:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).      
   END.
   ELSE FBTN_AVSAONR:HIDDEN = TRUE.
   IF Guru.Konstanter:aonrsekvar[7] = TRUE THEN DO:
      FBTN_RAPP:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_RAPP:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).      
   END.
   ELSE FBTN_RAPP:HIDDEN = TRUE.
   IF Guru.Konstanter:aonrsekvar[8] = TRUE THEN DO:
      FBTN_KOST:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_KOST:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).      
   END.  
   ELSE FBTN_KOST:HIDDEN = TRUE.
   IF Guru.Konstanter:aonrsekvar[11] = TRUE THEN DO:
      FBTN_BYTPNR:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_BYTPNR:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).      
   END.
   ELSE FBTN_BYTPNR:HIDDEN = TRUE.
  
   ASSIGN
   FBTN_BER:HIDDEN = TRUE 
   FBTN_KALK:HIDDEN = TRUE
   FBTN_MARK:HIDDEN = TRUE
   FBTN_FAKT:HIDDEN = TRUE.
   IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "SUND" OR Guru.Konstanter:globforetag = "SNAT" THEN DO:
      IF Guru.Konstanter:aonrsekvar[1] = TRUE THEN DO:
         FBTN_AVROP:HIDDEN = FALSE.
         Guru.GlobalaVariabler:colrighth = FBTN_AVROP:HANDLE.           
         RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).         
      END.
      ELSE FBTN_AVROP:HIDDEN = TRUE.
   END.
   ELSE FBTN_AVROP:HIDDEN = TRUE.
   FBTN_STATUS:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = FBTN_STATUS:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).      
   BTN_TIDPLAN:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = BTN_TIDPLAN:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).                   
   BTN_HAOF:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = BTN_HAOF:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).      
   BTN_AOF:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = BTN_AOF:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
              
END PROCEDURE.

PROCEDURE goma_UI :   
   IF TOG_AVSLUTADE:CHECKED = TRUE THEN DO:
      ASSIGN
      TOG_UPPLAGT:CHECKED = FALSE 
      TOG_UPPLAGT:HIDDEN = TRUE
      BTN_FVE-3:HIDDEN = FALSE 
      BTN_FVE-4:HIDDEN = FALSE 
      BTN_NVE-3:HIDDEN = FALSE 
      BTN_NVE-4:HIDDEN = FALSE      
      FILL-IN-OCH:HIDDEN = TRUE 
      FILL-IN-AVSLUTD:HIDDEN = FALSE 
      FILL-IN-AVSTARTD:HIDDEN = FALSE.       
   END.
   ELSE DO:
      ASSIGN
      TOG_UPPLAGT:HIDDEN = FALSE 
      BTN_FVE-3:HIDDEN = TRUE 
      BTN_FVE-4:HIDDEN = TRUE 
      BTN_NVE-3:HIDDEN = TRUE 
      BTN_NVE-4:HIDDEN = TRUE 
      FILL-IN-MELL:HIDDEN = TRUE 
      FILL-IN-OCH:HIDDEN = TRUE 
      FILL-IN-AVSLUTD:HIDDEN = TRUE 
      FILL-IN-AVSTARTD:HIDDEN = TRUE.
   END. 
   IF TOG_UPPLAGT:CHECKED = TRUE THEN DO:
      ASSIGN
      TOG_PAGA:CHECKED = FALSE 
      TOG_PAGA:HIDDEN = TRUE
      TOG_AVSLUTADE:CHECKED = FALSE 
      TOG_AVSLUTADE:HIDDEN = TRUE
      BTN_FVE-3:HIDDEN = FALSE 
      BTN_FVE-4:HIDDEN = FALSE 
      BTN_NVE-3:HIDDEN = FALSE 
      BTN_NVE-4:HIDDEN = FALSE      
      FILL-IN-OCH:HIDDEN = TRUE 
      FILL-IN-AVSLUTD:HIDDEN = FALSE 
      FILL-IN-AVSTARTD:HIDDEN = FALSE.       
   END.       
END PROCEDURE.

PROCEDURE uppgoma_UI :
   RUN goma_UI.
   IF TOG_UPPLAGT:CHECKED = FALSE THEN DO:      
      ASSIGN  
      TOG_PAGA:CHECKED = TRUE
      TOG_PAGA:HIDDEN = FALSE       
      TOG_AVSLUTADE:HIDDEN = FALSE.
   END.   
END PROCEDURE.

PROCEDURE korextra_UI :

   {OMRHMT.I}
   {JURPAVDSTART3.I} 
   DEBUGGER:SET-BREAK().  
   IF Guru.Konstanter:globforetag = "snat" AND Guru.Konstanter:globallao = TRUE THEN DO:
      CMB_JURP:SCREEN-VALUE =  "Alla".
   END.  
   ASSIGN 
   kalknrvar = ?
   kalktypvar = ?.   
   FIND FIRST omrtemp WHERE omrtemp.OMRADE = Guru.Konstanter:globomr 
   USE-INDEX OMR NO-LOCK NO-ERROR.
   IF NOT AVAILABLE omrtemp THEN DO:   
      FIND FIRST omrtemp USE-INDEX OMR NO-LOCK NO-ERROR.
   END.
   IF NOT AVAILABLE omrtemp THEN ASSIGN CMB_OMR:SCREEN-VALUE = "Alla".
   ELSE ASSIGN CMB_OMR:SCREEN-VALUE = omrtemp.NAMN.         
   IF Guru.Konstanter:globomr = "" OR Guru.Konstanter:globallao = TRUE THEN DO:
      CMB_OMR:SCREEN-VALUE = "Alla".      
   END.
 
   IF Guru.Konstanter:globforetag = "FORS" THEN DO:
      CMB_OMR:SCREEN-VALUE = "Alla".
      CMB_OMR:HIDDEN = TRUE. 
   END.   
   bestvad = 2.
   EMPTY TEMP-TABLE  bestkundallt NO-ERROR. 
   {BESTHMT.I}
   IF Guru.Konstanter:varforetypval[3] >= 1 THEN.
   /*LENA 20130412*/
   ELSE IF Guru.Konstanter:globforetag = "CVAST" THEN.   
   ELSE DO:
      OPEN QUERY oq FOR EACH omrtemp USE-INDEX OMR NO-LOCK.
      GET FIRST oq NO-LOCK.
      DO WHILE AVAILABLE(omrtemp):
         FIND FIRST bestkundallt WHERE bestkundallt.BESTID = omrtemp.OMRADE NO-ERROR.
         IF NOT AVAILABLE bestkundallt THEN DO:
            CREATE bestkundallt.
            ASSIGN 
            bestkundallt.VIBESTID = omrtemp.OMRADE 
            bestkundallt.BESTID = omrtemp.OMRADE 
            bestkundallt.BESTNAMN = omrtemp.NAMN.                      
            CREATE bestkundextra.
            ASSIGN 
            bestkundextra.VIBESTID = omrtemp.OMRADE 
            bestkundextra.BESTID = omrtemp.OMRADE 
            bestkundextra.BESTNAMN = omrtemp.NAMN
            bestkundextra.AVDELNING = STRING(omrtemp.AVDELNINGNR).
         END.
         GET NEXT oq NO-LOCK.
      END.
   END.   
   CMB_BESORG:LIST-ITEMS = "".
   IF Guru.Konstanter:varforetypval[45] = 1 THEN.
   ELSE DO:   
      status-ok = CMB_BESORG:ADD-FIRST("Alla").
      FOR EACH bestkundallt USE-INDEX BESTNAMN NO-LOCK:
         status-ok = CMB_BESORG:ADD-LAST(bestkundallt.BESTNAMN).
      END.
      status-ok = CMB_BESORG:ADD-LAST("Samma som ovan").
   END.      
   &Scoped-define FORMATNAMN FILL-IN_EAONR   
   {AOFORMAT4.I}
   &Scoped-define FORMATNAMN FILL-IN_SAONR   
   {AOFORMAT4.I}
   &Scoped-define FORMATNAMN FILL-IN_DELNR   
   {DELNRFORMAT2.I}      
   &Scoped-define FORMATNAMNOMR utsokaonr.OMRADE
   
   ASSIGN
   TOG_PAGA:CHECKED = TRUE      
   TOG_AVSLUTADE:CHECKED = FALSE
   TOG_UPPLAGT:CHECKED = FALSE
   TOG_TILLF:CHECKED = TRUE 
   TOG_FASTA:CHECKED = FALSE
   {TOGTIFA.I}
   ASSIGN
   FILL-IN-MELL:SCREEN-VALUE = "mellan" 
   FILL-IN-OCH:SCREEN-VALUE = "och".
   CMB_ARBART:SCREEN-VALUE = "ALLA".   
   ASSIGN         
   uppvaltemp.ENDBEST = ?     
   uppvaltemp.VISPERAR = TRUE
   uppvaltemp.STARTDATUM = DATE(01,01,YEAR(TODAY))
   uppvaltemp.SLUTDATUM  = TODAY
   uppvaltemp.AVSLUTSTART = DATE(01,01,YEAR(TODAY))
   uppvaltemp.AVSLUTSLUT = TODAY
   uppvaltemp.TILLFALLFAST = 1
   SUBSTRING(uppvaltemp.PROJEKTOR,1,20) = "ALLA"
   uppvaltemp.BEREDARE = "ALLA"  
   uppvaltemp.ARBANSVARIG = "ALLA"
   uppvaltemp.BESTNAMN = "ALLA"
   uppvaltemp.OMRNAMN = CMB_OMR:SCREEN-VALUE
   uppvaltemp.AVDNAMN = "ALLA"
   uppvaltemp.AVDNR = "ALLA"
   uppvaltemp.FAKTTYP = "ALLA"
   uppvaltemp.PAAV = 1.
   RUN main1_UI.
   RUN ladda_UI.  
   FIND FIRST aarttemp NO-ERROR.
   IF AVAILABLE aarttemp THEN DO:   
      CMB_ARBART:HIDDEN = FALSE.            
      CMB_ARBART:SCREEN-VALUE = "Alla".     
   END.
   ELSE CMB_ARBART:HIDDEN = TRUE.
   FIND FIRST priotemp NO-ERROR.
   IF AVAILABLE priotemp THEN DO:   
      CMB_PRIO:HIDDEN = FALSE.            
      CMB_PRIO:SCREEN-VALUE = "Alla".     
   END.
   ELSE CMB_PRIO:HIDDEN = TRUE.
   RUN sek_UI.      
END PROCEDURE.

PROCEDURE ladda_UI :
   
   FIND faktyptemp WHERE faktyptemp.FAKTTYP = uppvaltemp.FAKTTYP NO-ERROR.
   CMB_FAK:SCREEN-VALUE = faktyptemp.VIFAKTTYP.
   IF Guru.Konstanter:varforetypval[45] = 1 THEN.
   ELSE  CMB_BESORG:SCREEN-VALUE = uppvaltemp.BESTNAMN.
   ASSIGN
   CMB_OMR:SCREEN-VALUE = uppvaltemp.OMRNAMN
   FILL-IN-AVSLUTD:SCREEN-VALUE = STRING(uppvaltemp.AVSLUTSLUT) 
   FILL-IN-AVSTARTD:SCREEN-VALUE = STRING(uppvaltemp.AVSLUTSTART)
   CMB_PROJ:SCREEN-VALUE = SUBSTRING(uppvaltemp.PROJEKTOR,1,24)
   CMB_ANSV:SCREEN-VALUE = uppvaltemp.ARBANSVARIG 
   CMB_BERE:SCREEN-VALUE = uppvaltemp.BESTNAMN.
   IF uppvaltemp.PAAV = 3 THEN DO:
      ASSIGN
      TOG_PAGA:CHECKED = TRUE     
      TOG_AVSLUTADE:CHECKED = TRUE.
   END.
   ELSE IF uppvaltemp.PAAV = 2 THEN DO:
      ASSIGN
      TOG_PAGA:CHECKED = FALSE     
      TOG_AVSLUTADE:CHECKED = TRUE.
   END.
   ELSE IF uppvaltemp.PAAV = 1 THEN DO:
      ASSIGN
      TOG_PAGA:CHECKED = TRUE     
      TOG_AVSLUTADE:CHECKED = FALSE.
   END.
   ELSE IF uppvaltemp.PAAV = 4 THEN DO:
      ASSIGN
      TOG_PAGA:CHECKED = FALSE     
      TOG_AVSLUTADE:CHECKED = FALSE.
   END.
   
   ELSE DO:
      ASSIGN
      TOG_PAGA:CHECKED = FALSE     
      TOG_AVSLUTADE:CHECKED = FALSE.
   END.
   IF uppvaltemp.TILLFALLFAST = 3 THEN DO:
      ASSIGN
      TOG_TILLF:CHECKED = TRUE     
      TOG_FASTA:CHECKED = TRUE.
   END.
   ELSE IF uppvaltemp.TILLFALLFAST = 2 THEN DO:
      ASSIGN
      TOG_TILLF:CHECKED = FALSE     
      TOG_FASTA:CHECKED = TRUE.
   END.
   ELSE IF uppvaltemp.TILLFALLFAST = 1 THEN DO:
      ASSIGN
      TOG_TILLF:CHECKED = TRUE     
      TOG_FASTA:CHECKED = FALSE.
   END.
   ELSE DO:
      ASSIGN
      TOG_TILLF:CHECKED = FALSE     
      TOG_FASTA:CHECKED = FALSE.
   END.   
   
END PROCEDURE.

PROCEDURE allstartbrw_UI :
/* -----------------------------------------------------------
  Purpose: Changing screen-value for combo-box CMB_OMR     
  Parameters:  Input = Screen-value for CMB_FOR
  Notes:       
-------------------------------------------------------------*/    
   DEFINE VARIABLE korextra AS LOGICAL NO-UNDO.
   korextra = FALSE.
   IF NOT VALID-HANDLE(brwproc[{&LEFT-BROWSE}]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[{&LEFT-BROWSE}] (INPUT BRW_AONR).
   IF NOT VALID-HANDLE(brwproc[{&RIGHT-BROWSE}]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[{&RIGHT-BROWSE}](INPUT BRW_VAONR).   
   RUN setrowproc_UI IN brwproc[{&LEFT-BROWSE}] (INPUT THIS-PROCEDURE, INPUT "changeomrform_UI", "OMRADE").
   RUN setrowproc_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT THIS-PROCEDURE, INPUT "changeomrform_UI", "OMRADE").
   IF NOT VALID-HANDLE(brwproc[5]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[5] (INPUT BRW_AOTID).
   IF NOT VALID-HANDLE(brwproc[6]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[6] (INPUT BRW_KTO).
      
   IF NOT VALID-HANDLE(brwproc[{&ARROWS}]) THEN DO:
      RUN DYNARROW.P PERSISTENT SET brwproc[{&ARROWS}] (INPUT BRW_AONR,INPUT BRW_VAONR,
                                                     INPUT BTN_OVER, INPUT BTN_ALLOVER,
                                                     INPUT BTN_ALLBACK, INPUT BTN_BACK).
      RUN addfillin_UI IN brwproc[{&ARROWS}] (INPUT FILL-IN_ORT, INPUT "ORT").
      RUN addfillin_UI IN brwproc[{&ARROWS}] (INPUT FILL-IN_SAONR, INPUT "AONR").   
   END.
   
   IF NOT VALID-HANDLE(aonrapph) THEN korextra = TRUE.
   IF Guru.Konstanter:appcon THEN DO:
       /*FAKTFOR*/   
      IF NOT VALID-HANDLE(fbestapph) THEN   RUN EXTRATABHMT.P PERSISTENT SET fbestapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT.                  
      IF NOT VALID-HANDLE(aonrapph) THEN    RUN MAONRAPP.P PERSISTENT SET aonrapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
      IF NOT VALID-HANDLE(bortaoapph) THEN  RUN BORTAOAPP.P PERSISTENT SET bortaoapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
      IF NOT VALID-HANDLE(nyttaoapph2) THEN RUN NYTTAOAPP.P PERSISTENT SET nyttaoapph2 ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
   END.
   ELSE DO:
       /*FAKTFOR*/
      IF NOT VALID-HANDLE(fbestapph) THEN  RUN EXTRATABHMT.P PERSISTENT SET fbestapph.
      IF NOT VALID-HANDLE(aonrapph) THEN   RUN MAONRAPP.P PERSISTENT SET aonrapph.
      IF NOT VALID-HANDLE(bortaoapph) THEN RUN BORTAOAPP.P PERSISTENT SET bortaoapph.
      IF NOT VALID-HANDLE(nyttaoapph2) THEN RUN NYTTAOAPP.P PERSISTENT SET nyttaoapph2.
   END.
   RUN anvglob_UI IN aonrapph (INPUT Guru.Konstanter:globanv).
   IF korextra = TRUE THEN DO:
      korextra = FALSE.
      RUN korextra_UI.
   END.
   FIND FIRST valdaaotemp NO-LOCK NO-ERROR.
   IF NOT AVAILABLE valdaaotemp THEN DO:
      RUN hmtfavoriter_UI.               
   END.
   EMPTY TEMP-TABLE ktotemp NO-ERROR. 
   RUN kto_UI IN aonrapph (INPUT TABLE jurperstemp, OUTPUT TABLE ktotemp).
   RUN laddakb_UI IN aonrapph (OUTPUT TABLE kbenamntemp).
   FIND FIRST kbenamntemp WHERE NO-LOCK NO-ERROR.
   
END PROCEDURE.

PROCEDURE aokomp_UI :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
   DEFINE INPUT PARAMETER vad AS INTEGER NO-UNDO.
   IF vad = 1 THEN DO:
      FOR EACH valdaaotemp NO-LOCK:
         RUN komplettaonr IN aonrapph 
         (INPUT valdaaotemp.AONR,INPUT valdaaotemp.DELNR,
         OUTPUT aonrrec,OUTPUT projvar,OUTPUT bortvar).
         ASSIGN
         valdaaotemp.PROJEKTOR = projvar
         valdaaotemp.AONRREC = aonrrec
         valdaaotemp.TABORT = bortvar.      
      END.
      FOR EACH valdaaotemp,
      EACH omrtemp WHERE omrtemp.OMRADE = valdaaotemp.OMRADE:
         valdaaotemp.AVDELNINGNR = omrtemp.AVDELNINGNR.
      END.
   END.
   ELSE IF vad = 2 THEN DO:
      RUN komplettaonr IN aonrapph 
         (INPUT valdaaotemp.AONR,INPUT valdaaotemp.DELNR,
         OUTPUT aonrrec,OUTPUT projvar,OUTPUT bortvar).
      ASSIGN
      valdaaotemp.PROJEKTOR = projvar
      valdaaotemp.AONRREC = aonrrec
      valdaaotemp.TABORT = bortvar.      
      FIND FIRST omrtemp WHERE omrtemp.OMRADE = valdaaotemp.OMRADE NO-LOCK NO-ERROR.
      IF AVAILABLE omrtemp THEN DO:
         valdaaotemp.AVDELNINGNR = omrtemp.AVDELNINGNR.
      END.

   END.
END PROCEDURE.
PROCEDURE valdaaotempen_UI :
   FIND FIRST valdaaotemp WHERE valdaaotemp.AONR = valdaao.AONR AND valdaaotemp.DELNR = valdaao.DELNR
   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE valdaaotemp THEN CREATE valdaaotemp.
   BUFFER-COPY valdaao TO valdaaotemp.   
END PROCEDURE.
PROCEDURE valdaaotemp_UI :
   IF musz = TRUE THEN RETURN.
   EMPTY TEMP-TABLE valdaaotemp NO-ERROR. 
   FOR EACH valdaao:
      CREATE valdaaotemp.
      BUFFER-COPY valdaao TO valdaaotemp.
   END.
END PROCEDURE.

PROCEDURE valdaaoen_UI :
   FIND FIRST valdaao WHERE valdaao.AONR = valdaaotemp.AONR AND valdaao.DELNR = valdaaotemp.DELNR
   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE valdaao THEN CREATE valdaao.
   BUFFER-COPY valdaaotemp TO valdaao.   
END PROCEDURE.
PROCEDURE valdaao_UI :
   EMPTY TEMP-TABLE valdaao NO-ERROR. 
   FOR EACH valdaaotemp:
      CREATE valdaao.
      BUFFER-COPY valdaaotemp TO valdaao.
   END.
END PROCEDURE.

PROCEDURE valdaaomark_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   EMPTY TEMP-TABLE valdaao NO-ERROR. 
   antal_valda = BRW_VAONR:NUM-SELECTED-ROWS .
   antal_raknare = 1.
   DO WHILE antal_raknare LE antal_valda:
      RUN fetrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT antal_raknare,OUTPUT brwrowid) .
      FIND FIRST valdaaotemp WHERE ROWID(valdaaotemp) = brwrowid NO-LOCK NO-ERROR.
      
      CREATE valdaao.
      BUFFER-COPY valdaaotemp TO valdaao.
      
      antal_raknare = antal_raknare + 1.
   END.         

   
END PROCEDURE.



PROCEDURE valdaaoenbort_UI :
   FIND FIRST valdaao WHERE valdaao.AONR = valdaaotemp.AONR AND valdaao.DELNR = valdaaotemp.DELNR
   NO-LOCK NO-ERROR.
   IF AVAILABLE valdaao THEN DELETE valdaao.
   
END PROCEDURE.
PROCEDURE valdaaoallabort_UI :
   EMPTY TEMP-TABLE valdaao NO-ERROR.    
END PROCEDURE.

PROCEDURE changeomrform_UI :
/* -----------------------------------------------------------
  Purpose: Changing screen-value for combo-box CMB_OMR     
  Parameters:  Input = Screen-value for CMB_FOR
  Notes:       
-------------------------------------------------------------*/    
   DEFINE INPUT PARAMETER colname AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER colh AS HANDLE NO-UNDO.
   DEFINE INPUT PARAMETER bufh AS HANDLE NO-UNDO. 
   DEFINE INPUT PARAMETER dtyp AS CHARACTER NO-UNDO.
   /*aonrsund*/
   IF Guru.Konstanter:globforetag = "SUND" OR Guru.Konstanter:globforetag = "SNAT"  OR Guru.Konstanter:globforetag = "cELPA" THEN DO:  
      IF  Guru.Konstanter:varforetypval[45] = 0 THEN DO:             
         /*  2 pos på område FÖR 1611 */    
         IF bufh:BUFFER-VALUE BEGINS "16" THEN DO:
            colh:FORMAT = "X(2)" .
         END.            
      END.
   END.   
END PROCEDURE.

PROCEDURE borthand_UI :
   valdaobh:EMPTY-TEMP-TABLE()  NO-ERROR.    
   IF VALID-HANDLE(valdaobh) THEN   DELETE OBJECT valdaobh NO-ERROR.
   valdaobh = ?.
   {BORTBRWPROC.I}

   IF VALID-HANDLE(logprogh) THEN DELETE PROCEDURE logprogh NO-ERROR.      
   IF VALID-HANDLE(bortaoapph) THEN DELETE PROCEDURE bortaoapph NO-ERROR.      
   IF VALID-HANDLE(fbestapph) THEN DELETE PROCEDURE fbestapph NO-ERROR.      
   IF VALID-HANDLE(aonrapph) THEN DELETE PROCEDURE aonrapph NO-ERROR.      
   IF VALID-HANDLE(nyttaoapph2) THEN DO:
      RUN borthandle_UI IN nyttaoapph2 NO-ERROR.
      DELETE PROCEDURE nyttaoapph2  NO-ERROR.
      nyttaoapph2 = ?.
   END.

END PROCEDURE.


FUNCTION brwval RETURNS LOGICAL
  ( /* parameter-definitions */ ) :
/*------------------------------------------------------------------------------
  Purpose:  
    Notes:  
------------------------------------------------------------------------------*/
   DEFINE VARIABLE leftbrwakt AS LOGICAL NO-UNDO.
   RUN urvalaktiv_UI IN brwproc[{&ARROWS}] (OUTPUT leftbrwakt).
   IF leftbrwakt = TRUE THEN antal_valda =  BRW_AONR:NUM-SELECTED-ROWS.
   ELSE antal_valda = BRW_VAONR:NUM-SELECTED-ROWS. 
   
   IF antal_valda = 0 THEN DO:      
      MESSAGE "Inget " + LC(Guru.Konstanter:gaok) + " är valt!" VIEW-AS ALERT-BOX.
      RETURN TRUE.                
   END.
   IF leftbrwakt = TRUE THEN DO:
      EMPTY TEMP-TABLE valdaaotemp NO-ERROR.       
      RUN sel_over_UI IN brwproc[{&ARROWS}].
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").  
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valdaaotemp)).
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
   END.
   ELSE DO:
      RUN selectfoc_UI.
   END.
   RETURN FALSE.   /* Function return value. */

END FUNCTION.

FUNCTION checkbrw RETURNS LOGICAL
  ( /* parameter-definitions */ ) :
/*------------------------------------------------------------------------------
  Purpose:  
    Notes:  
------------------------------------------------------------------------------*/
   DEFINE VARIABLE leftbrwakt AS LOGICAL NO-UNDO.
   RUN urvalaktiv_UI IN brwproc[{&ARROWS}] (OUTPUT leftbrwakt).
   RETURN leftbrwakt.   


END FUNCTION.



