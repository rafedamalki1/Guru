&Scoped-define NEW NEW  
{GLOBVAR2DEL1.I}
DEFINE NEW SHARED VARIABLE appcon AS LOGICAL NO-UNDO.


DEFINE TEMP-TABLE tempbbenamning NO-UNDO LIKE bbenamning.
DEFINE TEMP-TABLE tempkonstgrupp NO-UNDO LIKE konstgrupp.
DEFINE TEMP-TABLE tempkonstruktion NO-UNDO LIKE konstruktion.
DEFINE TEMP-TABLE tempkonstval NO-UNDO LIKE konstval.
DEFINE TEMP-TABLE tempmtrlber NO-UNDO LIKE mtrlber.
DEFINE TEMP-TABLE tempmtrl NO-UNDO LIKE mtrl.

DEFINE TEMP-TABLE tempforlagg NO-UNDO LIKE forlagg.
DEFINE TEMP-TABLE tempsamforlagg NO-UNDO LIKE samforlagg.
DEFINE TEMP-TABLE tempytbelagg NO-UNDO LIKE ytbelagg.
DEFINE TEMP-TABLE tempberstolp NO-UNDO LIKE berstolp.

DEFINE TEMP-TABLE ao-temp NO-UNDO LIKE aonrtab.
DEFINE TEMP-TABLE ptemp NO-UNDO LIKE PERSONALTAB.

/* skapa temp-tabell för kablar  */
DEFINE TEMP-TABLE TT NO-UNDO
   FIELD KAB AS CHARACTER
   FIELD DIA AS INTEGER.
FOR EACH KONSTGRUPP WHERE  KONSTGRUPP.KONSKOD = 0 OR  KONSTGRUPP.KONSKOD = 14 OR  KONSTGRUPP.KONSKOD = 25 OR KONSTGRUPP.KONSKOD = 27,
EACH KONSTRUKTION WHERE   KONSTRUKTION.KONSKOD = KONSTGRUPP.KONSKOD :
   FOR EACH mtrlber WHERE MTRLBER.KTYPKOD = KONSTRUKTION.KTYPKOD:
      IF mtrlber.LINKAB = TRUE THEN DO:
         IF  KONSTGRUPP.KONSKOD = 0 THEN DO:
            FIND FIRST TT WHERE TT.KAB = TRIM(mtrlber.F1)  NO-LOCK NO-ERROR.
         END.
         ELSE IF  KONSTGRUPP.KONSKOD = 14 OR  KONSTGRUPP.KONSKOD = 25 OR  KONSTGRUPP.KONSKOD = 27 THEN DO:
            FIND FIRST TT WHERE TT.KAB = TRIM(MTRLBER.KTYPKOD) NO-LOCK NO-ERROR.   
         END.
         IF NOT AVAILABLE TT THEN DO:
            CREATE TT.
            IF  KONSTGRUPP.KONSKOD = 0 THEN DO: 
               TT.KAB = TRIM(mtrlber.F1).
               TT.DIA = mtrlber.Diameter.
            END.
            IF  KONSTGRUPP.KONSKOD = 14 OR  KONSTGRUPP.KONSKOD = 25 OR  KONSTGRUPP.KONSKOD = 27 THEN DO:
               TT.KAB = TRIM(mtrlber.KTYPKOD).
               TT.DIA = mtrlber.Diameter.
            END.
         END.
      END.
   END.
END.
/*FOR EACH TT BY TT.KAB:
   DISP TT.KAB TT.DIA.
END.*/

/* kabeltab slut */


/* göra temptable för varje tabell */
FOR EACH bbenamning NO-LOCK:
   CREATE tempbbenamning.
   BUFFER-COPY BBENAMNING TO tempbbenamning.
END.

FOR EACH konstgrupp NO-LOCK:
   CREATE tempkonstgrupp.
   BUFFER-COPY KONSTGRUPP TO tempkonstgrupp.
END.

FOR EACH konstruktion NO-LOCK:
   CREATE tempkonstruktion.
   BUFFER-COPY KONSTRUKTION TO tempkonstruktion.
END.

FOR EACH konstval NO-LOCK:
   CREATE tempkonstval.
   BUFFER-COPY KONSTVAL TO tempkonstval.
END.

FOR EACH mtrlber NO-LOCK:
   CREATE tempmtrlber.
   BUFFER-COPY MTRLBER TO tempmtrlber.
END.

FOR EACH forlagg NO-LOCK:
   CREATE tempforlagg.
   BUFFER-COPY FORLAGG TO tempforlagg.
END.

FOR EACH samforlagg NO-LOCK:
   CREATE tempsamforlagg.
   BUFFER-COPY SAMFORLAGG TO tempsamforlagg.
END.

FOR EACH ytbelagg NO-LOCK:
   CREATE tempytbelagg.
   BUFFER-COPY YTBELAGG TO tempytbelagg.
END.

FOR EACH mtrl WHERE kalknr = 0 AND levkod = "2" NO-LOCK:
   CREATE tempmtrl.
   BUFFER-COPY MTRL TO tempmtrl.
END.

FOR EACH berstolp WHERE NO-LOCK:
   CREATE tempberstolp.
   BUFFER-COPY BERSTOLP TO tempberstolp.
END.

/* stoppa in respektive temptable i .xml fil */
DEFINE VARIABLE hBuf AS HANDLE NO-UNDO.
DEFINE VARIABLE dynxml AS HANDLE NO-UNDO.
/*RUN XMLUTDYN.P PERSISTENT SET dynxml.*/
RUN UTXMLDYN.P PERSISTENT SET dynxml.
hBuf = BUFFER tempbbenamning:HANDLE.
RUN xmlutstart_UI IN dynxml (INPUT hbuf,INPUT hBuf:TABLE,INPUT "start", INPUT "FOR EACH ",INPUT "C:\PROTEMP9\test.xml").
hBuf = BUFFER tempkonstgrupp:HANDLE.
RUN xmlutstart_UI IN dynxml (INPUT hbuf,INPUT hBuf:TABLE ,INPUT "", INPUT "FOR EACH ",INPUT "").
hBuf = BUFFER tempkonstruktion:HANDLE.
RUN xmlutstart_UI IN dynxml (INPUT hbuf,INPUT hBuf:TABLE ,INPUT "", INPUT "FOR EACH ",INPUT "").
hBuf = BUFFER tempkonstval:HANDLE.
RUN xmlutstart_UI IN dynxml (INPUT hbuf,INPUT hBuf:TABLE ,INPUT "", INPUT "FOR EACH ",INPUT "").
hBuf = BUFFER tempmtrlber:HANDLE.
RUN xmlutstart_UI IN dynxml (INPUT hbuf,INPUT hBuf:TABLE ,INPUT "", INPUT "FOR EACH ",INPUT "").
hBuf = BUFFER TT:HANDLE.
RUN xmlutstart_UI IN dynxml (INPUT hbuf,INPUT hBuf:TABLE ,INPUT "", INPUT "FOR EACH ",INPUT "").

hBuf = BUFFER tempforlagg:HANDLE.
RUN xmlutstart_UI IN dynxml (INPUT hbuf,INPUT hBuf:TABLE ,INPUT "", INPUT "FOR EACH ",INPUT "").

hBuf = BUFFER tempsamforlagg:HANDLE.
RUN xmlutstart_UI IN dynxml (INPUT hbuf,INPUT hBuf:TABLE ,INPUT "", INPUT "FOR EACH ",INPUT "").

hBuf = BUFFER tempytbelagg:HANDLE.
RUN xmlutstart_UI IN dynxml (INPUT hbuf,INPUT hBuf:TABLE ,INPUT "", INPUT "FOR EACH ",INPUT "").

hBuf = BUFFER tempmtrl:HANDLE.
RUN xmlutstart_UI IN dynxml (INPUT hbuf,INPUT hBuf:TABLE ,INPUT "", INPUT "FOR EACH ",INPUT "").

hBuf = BUFFER tempberstolp:HANDLE.
RUN xmlutstart_UI IN dynxml (INPUT hbuf,INPUT hBuf:TABLE ,INPUT "", INPUT "FOR EACH ",INPUT "").



RUN xmlutslut_UI IN dynxml.
RUN xmlslut_UI IN dynxml.
/*RUN OPENDOC.P ("C:\PROTEMP9\test.xml","","",NO).*/
IF VALID-HANDLE(dynxml) THEN DELETE PROCEDURE dynxml.    

