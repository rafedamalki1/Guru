
/*------------------------------------------------------------------------
    File        : KALKYLKONVNYGAMLA.P
    Purpose     : 

    Syntax      :

    Description : 

    Author(s)   : elpao
    Created     : Tue Sep 27 12:34:27 CEST 2011
    Notes       :
  ----------------------------------------------------------------------*/

/* ***************************  Definitions  ************************** */
{KALKYLKAT.I}
{EXTRADATA.I}
DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.
DEFINE TEMP-TABLE numsubhj NO-UNDO
   FIELD TTRECID AS RECID
   FIELD NUMSUBID AS INTEGER.  


                              
                              
DEFINE NEW SHARED VARIABLE orgpropath AS CHARACTER NO-UNDO.
DEFINE VARIABLE filut AS CHARACTER NO-UNDO.
DEFINE VARIABLE nrvar AS INTEGER NO-UNDO.
&SCOPED-DEFINE NEW NEW
&SCOPED-DEFINE SHARED SHARED
{GLOBVAR2DEL1.I}
   
{MTRLTEMPc.I}
{PROVAG.I}
{BLOB.I} 
{EFASTTEMP.I}
DEFINE TEMP-TABLE tidutrubrik
   FIELD UT AS CHARACTER FORMAT "X(132)"
   FIELD ORDNING AS INTEGER
   FIELD SUMMARAD AS LOGICAL
   INDEX ORDNING ORDNING.
DEFINE TEMP-TABLE intt NO-UNDO
  FIELD ID AS INTEGER
  FIELD Filnamn AS CHARACTER.
DEFINE BUFFER KALKYLKATALOGSUBbuff FOR KALKYLKATALOGSUB.   
DEFINE BUFFER KALKYLPRISERbuff FOR KALKYLPRISER.
DEFINE BUFFER KALKNUMbuff FOR KALKNUM.
DEFINE BUFFER KALKNUMBUF FOR KALKNUM.
DEFINE BUFFER KALKNUMBUF2 FOR KALKNUM.
DEFINE BUFFER KALKNUMSUBBUF FOR KALKNUMSUB.

DEFINE BUFFER KALKNUMSUBbuff FOR KALKNUMSUB.


DEFINE BUFFER KALKHUVBUF FOR KALKHUV.
DEFINE VARIABLE kpostid AS ROWID NO-UNDO.

DEFINE VARIABLE LocalAppServerHandle AS HANDLE NO-UNDO.

/*OBS! globforetag = "GRAN" OCH ÅRTAL*/
DEFINE VARIABLE ebrar AS INTEGER NO-UNDO.
DEFINE VARIABLE skjar AS INTEGER NO-UNDO.
DEFINE VARIABLE konvkalknr AS INTEGER NO-UNDO.


FIND FIRST FORETAG WHERE NO-LOCK NO-ERROR.
globforetag = FORETAG.FORETAG.
filut = "KALKFEL" + globforetag + ".TXT".  
RUN STYRFORE.P (INPUT globforetag).
/*Anders Olsson Elpool i Umeå AB  27 nov 2013 13:31:59 
 kör en i taget och kolla att det har gått rätt!
kör i ordning

1  RUN blobkonv_UI.

2  RUN katskaphuvskap_UI.

3  RUN startkalkkonv_UI.
4  run BerKalkStart_UI.
RUN hmtafri_UI.

*/


RUN AUTO5SPAR.P.

MESSAGE "blob"
VIEW-AS ALERT-BOX.
RUN blobkonv_UI.

MESSAGE "kat"
VIEW-AS ALERT-BOX.
RUN katskaphuvskap_UI.


MESSAGE "kalk"
VIEW-AS ALERT-BOX.
RUN startkalkkonv_UI.

MESSAGE "berkalk + hdkalk"
VIEW-AS ALERT-BOX.
run BerKalkStart_UI.






/* KONVERTERING-KATALOGER   ---------------------------------------------------*/
/* konverterar från lop1,2,3 till nya kataloger*/
PROCEDURE katskaphuvskap_UI:
   
  /*
   for each FREKVENSKATALOG:
delete    FREKVENSKATALOG .
end.
   
   for each KALKYLKATALOG:
delete    KALKYLKATALOG .
end.
for each KALKYLKATALOGSUB:
delete   KALKYLKATALOGSUB .
end.

for each KALKVISNING:
delete    KALKVISNING.
end.

for each KALKYLPRISER:
delete   KALKYLPRISER .
end.

for each KALKYLARBKODER :
delete   KALKYLARBKODER .
end.

for each KALKYLLOPPOSTER:
delete   KALKYLLOPPOSTER .
end.

for each KALKYLLOPSUB:
delete   KALKYLLOPSUB .
end.
  */
   DEFINE VARIABLE deckatfix AS INTEGER NO-UNDO.
   DEFINE VARIABLE minskaartal AS INTEGER NO-UNDO.
   DEFINE VARIABLE klogvar AS INTEGER NO-UNDO.
   FIND FIRST KALKYLKATALOG NO-LOCK NO-ERROR.
   IF AVAILABLE KALKYLKATALOG THEN RETURN.
   IF globforetag = "GRAN" THEN minskaartal = 2.
   ELSE minskaartal = 1.            
   FOR EACH EBRPRIS NO-LOCK:
      OUTPUT TO VALUE(filut) APPEND.
      PUT "NU STARTAR " EBRPRIS.ARTAL SKIP.
      OUTPUT CLOSE.
      klogvar = klogvar + 1.
      
      DO TRANSACTION :
         CREATE KALKYLKATALOG.
         ASSIGN
         KALKYLKATALOG.KLOGID = klogvar
         KALKYLKATALOG.BENAMNING = "EBR " + STRING(EBRPRIS.ARTAL - minskaartal) + " Extra koder " + STRING(EBRPRIS.ARTAL - minskaartal)
         KALKYLKATALOG.INDATUM = TODAY
         KALKYLKATALOG.VISARTAL  = EBRPRIS.ARTAL - minskaartal.
      
         RUN katskapsub_UI (INPUT "EBR " + STRING(EBRPRIS.ARTAL - minskaartal)).
         KALKYLKATALOG.HKLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID.
      END.    
      FIND CURRENT KALKYLKATALOG NO-LOCK NO-ERROR.
      FIND CURRENT KALKYLKATALOGSUB NO-LOCK NO-ERROR.
      RUN katfrekvens_UI (INPUT EBRPRIS.ARTAL).   
      
      
      FIND FIRST LOP2 WHERE LOP2.KATAR = EBRPRIS.ARTAL AND  LOP2.ARBKOD = "SKJ" NO-LOCK NO-ERROR.
      IF AVAILABLE LOP2 THEN DO:      
         FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
         KALKYLKATALOGSUB.BENAMNING = "SKJ/SKL " + STRING(EBRPRIS.ARTAL - minskaartal)
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE KALKYLKATALOGSUB THEN DO TRANSACTION :       
            RUN katskapsub_UI (INPUT "SKJ/SKL " + STRING(EBRPRIS.ARTAL - minskaartal)).
         END.         
      END.
      FIND FIRST LOP2 WHERE LOP2.KATAR = EBRPRIS.ARTAL AND  LOP2.ARBKOD = "SKL" NO-LOCK NO-ERROR.
      IF AVAILABLE LOP2 THEN DO:      
         FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
         KALKYLKATALOGSUB.BENAMNING = "SKJ/SKL " + STRING(EBRPRIS.ARTAL - minskaartal)
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE KALKYLKATALOGSUB THEN DO TRANSACTION :       
            RUN katskapsub_UI (INPUT "SKJ/SKL " + STRING(EBRPRIS.ARTAL - minskaartal)).
         END.         
      END.
      FIND FIRST LOP2 WHERE LOP2.KATAR = EBRPRIS.ARTAL AND  LOP2.ARBKOD = "EJK" NO-LOCK NO-ERROR.
      IF AVAILABLE LOP2 THEN DO:      
         FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
         KALKYLKATALOGSUB.BENAMNING = "EJK/ELL/EUH/EAF " + STRING(EBRPRIS.ARTAL - minskaartal)
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE KALKYLKATALOGSUB THEN DO TRANSACTION :       
            RUN katskapsub_UI (INPUT "EJK/ELL/EUH/EAF " + STRING(EBRPRIS.ARTAL - minskaartal)).
         END.
      END.
      FIND FIRST LOP2 WHERE LOP2.KATAR = EBRPRIS.ARTAL AND  LOP2.ARBKOD = "ELL" NO-LOCK NO-ERROR.
      IF AVAILABLE LOP2 THEN DO:      
         FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
         KALKYLKATALOGSUB.BENAMNING = "EJK/ELL/EUH/EAF " + STRING(EBRPRIS.ARTAL - minskaartal)
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE KALKYLKATALOGSUB THEN DO TRANSACTION :       
            RUN katskapsub_UI (INPUT "EJK/ELL/EUH/EAF " + STRING(EBRPRIS.ARTAL - minskaartal)).
         END.
      END.
      FIND FIRST LOP2 WHERE LOP2.KATAR = EBRPRIS.ARTAL AND  LOP2.ARBKOD = "EUH" NO-LOCK NO-ERROR.
      IF AVAILABLE LOP2 THEN DO:      
         FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
         KALKYLKATALOGSUB.BENAMNING = "EJK/ELL/EUH/EAF " + STRING(EBRPRIS.ARTAL - minskaartal)
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE KALKYLKATALOGSUB THEN DO TRANSACTION :       
            RUN katskapsub_UI (INPUT "EJK/ELL/EUH/EAF " + STRING(EBRPRIS.ARTAL - minskaartal)).
         END.
      END.
      FIND FIRST LOP2 WHERE LOP2.KATAR = EBRPRIS.ARTAL AND  LOP2.ARBKOD = "EAF" NO-LOCK NO-ERROR.
      IF AVAILABLE LOP2 THEN DO:      
         FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
         KALKYLKATALOGSUB.BENAMNING = "EJK/ELL/EUH/EAF " + STRING(EBRPRIS.ARTAL - minskaartal)
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE KALKYLKATALOGSUB THEN DO TRANSACTION :       
            RUN katskapsub_UI (INPUT "EJK/ELL/EUH/EAF " + STRING(EBRPRIS.ARTAL - minskaartal)).
         END.
      END.
      FIND FIRST LOP2 WHERE LOP2.KATAR = EBRPRIS.ARTAL AND  LOP2.ARBKOD = "VND" NO-LOCK NO-ERROR.
      IF AVAILABLE LOP2 THEN DO:            
         FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
         KALKYLKATALOGSUB.BENAMNING = "VND " + STRING(EBRPRIS.ARTAL - minskaartal)
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE KALKYLKATALOGSUB THEN DO TRANSACTION :       
            RUN katskapsub_UI (INPUT "VND " + STRING(EBRPRIS.ARTAL - minskaartal)).
         END.
      END.
      FIND FIRST LOP2 WHERE LOP2.KATAR = EBRPRIS.ARTAL AND  LOP2.ARBKOD = "TKOD" NO-LOCK NO-ERROR.
      IF AVAILABLE LOP2 THEN DO:       
         FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
         KALKYLKATALOGSUB.BENAMNING = "TKOD " + STRING(EBRPRIS.ARTAL - minskaartal)
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE KALKYLKATALOGSUB THEN DO TRANSACTION :       
            RUN katskapsub_UI (INPUT "TKOD " + STRING(EBRPRIS.ARTAL - minskaartal)).
         END.
      END.
      /*
      DO TRANSACTION :       
         RUN katskapsub_UI (INPUT "SKJ/SKL " + STRING(EBRPRIS.ARTAL - minskaartal)).
      END.
      */  
      FIND CURRENT KALKYLKATALOGSUB  NO-LOCK NO-ERROR. 
      RUN kvisskap_UI (INPUT 1,INPUT "Beredare",INPUT  "Arbete",INPUT FALSE,INPUT 1,INPUT 1). 
      RUN kvisskap_UI (INPUT 2,INPUT "Montör",INPUT  "Arbete",INPUT TRUE,INPUT 2,INPUT 1).
      RUN kvisskap_UI (INPUT 3,INPUT "Maskin",INPUT  "Maskin",INPUT TRUE,INPUT 3,INPUT 3).
      RUN kvisskap_UI (INPUT 4,INPUT "",INPUT  "Övrigt",INPUT FALSE,INPUT 1,INPUT 4).
      RUN kvisskap_UI (INPUT 5,INPUT "",INPUT  "Materiel",INPUT FALSE,INPUT 1,INPUT 2).
      RUN kvisskap_UI (INPUT 6,INPUT "Utrustning",INPUT  "Utrustning",INPUT TRUE,INPUT 1,INPUT 5).
      RUN kvisskap_UI (INPUT 7,INPUT "",INPUT  "Övrigt",INPUT TRUE,INPUT 1,INPUT 4).   
      FIND FIRST SEBRPRIS WHERE SEBRPRIS.ARTAL = EBRPRIS.ARTAL NO-LOCK NO-ERROR.
      FIND FIRST EXTRADATA WHERE EXTRADATA.PROGRAM = "EBRNYPRIS" AND EXTRADATA.HUVUDINT = EBRPRIS.ARTAL NO-LOCK NO-ERROR.
      FIND FIRST KALKBEF WHERE KALKBEF.KALKNR = 0 AND KALKBEF.KATAR = EBRPRIS.ARTAL NO-LOCK NO-ERROR.
      
     
      FOR EACH KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID NO-LOCK:
         IF AVAILABLE SEBRPRIS THEN RUN kalkylpristab_UI (INPUT 0, INPUT "SAMBYGGNADSPRIS",INPUT "SAMBYGGNADSPRIS",INPUT SEBRPRIS.MONT,INPUT FALSE,INPUT FALSE).
         RUN kalkylpristab_UI (INPUT 0, INPUT "RÖRLIGKOSTNAD EA",INPUT "RÖRLIGKOSTNAD EA",INPUT EBRPRIS.RORLIG,INPUT FALSE,INPUT FALSE).
         RUN kalkylpristab_UI (INPUT 4, INPUT "ÖVRIGKOSTNAD",INPUT "ÖVRIGKOSTNAD",INPUT 0,INPUT FALSE,INPUT TRUE).
         RUN kalkylpristab_UI (INPUT 4, INPUT "ENTREP",INPUT "ENTREPNÖR",INPUT 0,INPUT FALSE,INPUT TRUE).
         RUN kalkylpristab_UI (INPUT 5, INPUT "MATERIEL",INPUT "MATERIEL",INPUT 0,INPUT FALSE,INPUT TRUE).
         RUN kalkylpristab_UI (INPUT 6, INPUT "UTRUSTNING",INPUT "UTRUSTNING",INPUT 0,INPUT FALSE,INPUT TRUE). /*???*/
         RUN kalkylpristab_UI (INPUT 7, INPUT "ÖVRIGKOSTNADEA",INPUT "ÖVRIGKOSTNAD MED EA",INPUT 0,INPUT FALSE,INPUT FALSE).
         RUN kalkylpristab_UI (INPUT 1, INPUT "BEREDARE",INPUT "BEREDARE",INPUT EBRPRIS.MONT,INPUT TRUE,INPUT TRUE). 
         IF AVAILABLE EXTRADATA THEN DO:
            RUN kalkylpristab_UI (INPUT 1, INPUT "BEREDARE REGION",INPUT "BEREDARE REGION",INPUT EXTRADATA.SOKDEC[6],INPUT TRUE,INPUT TRUE).
         END.
         ELSE DO:
            RUN kalkylpristab_UI (INPUT 1, INPUT "BEREDARE REGION",INPUT "BEREDARE REGION",INPUT EBRPRIS.MONT,INPUT TRUE,INPUT TRUE).
         END.      
         RUN kalkylpristab_UI (INPUT 2, INPUT "MONTÖR",INPUT "MONTÖR",INPUT EBRPRIS.MONT,INPUT TRUE,INPUT TRUE).
         RUN kalkylpristab_UI (INPUT 3, INPUT "MASKIN1",INPUT "LEDNB.MASK",INPUT EBRPRIS.MASK1,INPUT TRUE,INPUT TRUE).
         RUN kalkylpristab_UI (INPUT 3, INPUT "MASKIN2",INPUT "KAB SCH MASK",INPUT EBRPRIS.MASK2,INPUT TRUE,INPUT TRUE).
         IF AVAILABLE EXTRADATA THEN DO:
            RUN kalkylpristab_UI (INPUT 3, INPUT "MASKIN3",INPUT "RUNT.OM.MASK",INPUT EXTRADATA.SOKDEC[4],INPUT TRUE,INPUT TRUE).
         END.
         ELSE DO:
            RUN kalkylpristab_UI (INPUT 3, INPUT "MASKIN3",INPUT "RUNT.OM.MASK",INPUT 0,INPUT TRUE,INPUT TRUE).
         END.   
         RUN kalkylpristab_UI (INPUT 3, INPUT "MASKIN4",INPUT "LASTBIL",INPUT KALKBEF.PRIS5,INPUT TRUE,INPUT TRUE).
         RUN kalkylpristab_UI (INPUT 3, INPUT "MASKIN5",INPUT "KRANBIL",INPUT KALKBEF.PRIS6,INPUT TRUE,INPUT TRUE).                
      END.
      
      FOR EACH P1 WHERE P1.KATAR = EBRPRIS.ARTAL NO-LOCK:
         DO TRANSACTION:
            RUN arbkodskapEBR_UI (INPUT EBRPRIS.ARTAL, INPUT EBRPRIS.ARTAL, INPUT 1,INPUT P1.ARBKOD,INPUT P1.BENAMNING).      
         END.
      END.       
      FOR EACH P2 WHERE P2.KATAR = EBRPRIS.ARTAL NO-LOCK:
         DO TRANSACTION:
            RUN arbkodskapEBR_UI (INPUT EBRPRIS.ARTAL, INPUT EBRPRIS.ARTAL, INPUT 2,INPUT P2.ARBKOD,INPUT P2.BENAMNING).       
         END.
      END.
      FOR EACH P3 WHERE P3.KATAR = EBRPRIS.ARTAL NO-LOCK:
         DO TRANSACTION:
            RUN arbkodskapEBR_UI (INPUT EBRPRIS.ARTAL, INPUT EBRPRIS.ARTAL, INPUT 3,INPUT P3.ARBKOD,INPUT P3.BENAMNING).       
         END.
      END.
      
      FOR EACH P5 WHERE P5.KATAR = EBRPRIS.ARTAL NO-LOCK:
         DO TRANSACTION:
            RUN arbkodskapEBR_UI (INPUT EBRPRIS.ARTAL, INPUT EBRPRIS.ARTAL, INPUT 5,INPUT P5.ARBKOD,INPUT P5.BENAMNING).       
         END.
      END.
      
      FOR EACH LOP1 WHERE LOP1.KATAR = EBRPRIS.ARTAL NO-LOCK:
         FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
         KALKYLKATALOGSUB.BENAMNING = "EBR " + STRING(EBRPRIS.ARTAL - minskaartal)
         NO-LOCK NO-ERROR.
         FIND FIRST KALKYLLOPPOSTER WHERE KALKYLLOPPOSTER.KLOGSUBID =  KALKYLKATALOGSUB.KLOGSUBID AND
         KALKYLLOPPOSTER.ARBKOD = LOP1.ARBKOD AND KALKYLLOPPOSTER.LOPNR = LOP1.LOPNR       
         NO-LOCK NO-ERROR.                         
         IF NOT AVAILABLE KALKYLLOPPOSTER THEN DO:
            FIND FIRST KALKYLARBKODER WHERE KALKYLARBKODER.KLOGSUBID =  KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLARBKODER.ARBKOD = LOP1.ARBKOD        
            NO-LOCK NO-ERROR. 
            IF NOT AVAILABLE KALKYLARBKODER THEN DO:
               OUTPUT TO VALUE(filut) APPEND.
               PUT  LOP1.ARBKOD LOP1.KATAR KALKYLKATALOGSUB.KLOGSUBID " P1 FINNS EJ" SKIP. 
               OUTPUT CLOSE.
               NEXT.               
            END.
            DO TRANSACTION:
               CREATE KALKYLLOPPOSTER.
               ASSIGN 
               KALKYLLOPPOSTER.MARKNING = KALKYLARBKODER.MARKNING
               KALKYLLOPPOSTER.TYPKALK = KALKYLARBKODER.TYPKALK
               KALKYLLOPPOSTER.KLOGSUBID =  KALKYLKATALOGSUB.KLOGSUBID
               KALKYLLOPPOSTER.ARBKOD = LOP1.ARBKOD 
               KALKYLLOPPOSTER.LOPNR = LOP1.LOPNR
               KALKYLLOPPOSTER.BENAMNING = SUBSTRING(LOP1.BENAMNING,1,49)
               KALKYLLOPPOSTER.KOMMENTAR = SUBSTRING(LOP1.BENAMNING,60)
               KALKYLLOPPOSTER.ENHET = LOP1.ENHET
               KALKYLLOPPOSTER.EAMANGD = LOP1.EA.     
            END.
            deckatfix = 1.
            IF LOP1.F9 = 0 THEN deckatfix = 1.  
               ELSE deckatfix = 100. 
            /*
            IF KALKYLKATALOGSUB.BENAMNING = "EBR " + STRING(EBRPRIS.ARTAL - minskaartal) THEN DO: 
               IF LOP1.F9 = 0 THEN deckatfix = 1.  
               ELSE deckatfix = 100.  
            END.
            */
            IF LENGTH(TRIM(SUBSTRING(LOP1.ARBKOD,2))) < 3 THEN DO:
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "BEREDARE REGION" NO-LOCK NO-ERROR.
            END.    
            ELSE DO:
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "BEREDARE" NO-LOCK NO-ERROR.
            END.              
            /*beredare*/
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP1.F1 / deckatfix, INPUT 0).
            END.            
            /*montör*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MONTÖR" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP1.F2 / deckatfix, INPUT 0).
            END. 
            /*MASKIN*/  
            IF LENGTH(TRIM(SUBSTRING(LOP1.ARBKOD,2))) < 3 THEN DO:
              RUN maskklg2_UI (INPUT LOP1.F3 / deckatfix, INPUT LOP1.MASKINKOST).
            END.
            ELSE DO:   
                /*MASKIN*/
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "MASKIN1" NO-LOCK NO-ERROR.
               DO TRANSACTION:
                  RUN katlopsub_UI (INPUT LOP1.F3 / deckatfix, INPUT 0).         
               END.
                /*MASKIN*/
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "MASKIN2" NO-LOCK NO-ERROR.
               DO TRANSACTION:
                  RUN katlopsub_UI (INPUT LOP1.F4 / deckatfix, INPUT 0).
               END.   
                /*MASKIN*/
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "MASKIN4" NO-LOCK NO-ERROR.
               DO TRANSACTION:
                  RUN katlopsub_UI (INPUT LOP1.F5 / deckatfix, INPUT 0).
               END.   
                   /*MASKIN*/
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "MASKIN5" NO-LOCK NO-ERROR.
               DO TRANSACTION:
                  RUN katlopsub_UI (INPUT LOP1.F6 / deckatfix, INPUT 0).
               END.  
               /*MASKIN*/
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "MASKIN3" NO-LOCK NO-ERROR.
               DO TRANSACTION:
                  RUN katlopsub_UI (INPUT LOP1.F7 / deckatfix, INPUT 0).               
               END.
            END.   
            /*MATERIEL*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MATERIEL" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT 0, INPUT LOP1.MATERIEL).
            END.
                      
            /*UTRUSTNING*/
            IF LENGTH(TRIM(SUBSTRING(LOP1.ARBKOD,2))) < 3 THEN DO:
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "UTRUSTNING" NO-LOCK NO-ERROR.
               DO TRANSACTION:
                  
                  RUN katlopsub_UI (INPUT LOP1.UTRUST / deckatfix, INPUT LOP1.UTRUSTKOST).
               END.
            END.
            ELSE DO:
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "ÖVRIGKOSTNADEA" NO-LOCK NO-ERROR.
               DO TRANSACTION:
                  
                  RUN katlopsub_UI (INPUT LOP1.UTRUST / deckatfix, INPUT LOP1.UTRUSTKOST).
               END.
            END.         
            /*ÖVRIGKOSTNAD*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "ÖVRIGKOSTNAD" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT 0, INPUT LOP1.OVRIGT).
            END.   
            /*
            /*SAMBYGGNADSPRIS  ?????*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "SAMBYGGNADSPRIS" NO-LOCK NO-ERROR.
            IF AVAILABLE KALKYLPRISER THEN DO TRANSACTION:
               RUN katlopsub_UI (INPUT 0, INPUT KALKYLPRISER.PRIS).
            END.   
            
            /*RÖRLIGKOSTNAD EA  ?????*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "RÖRLIGKOSTNAD EA" NO-LOCK NO-ERROR.
            IF AVAILABLE KALKYLPRISER THEN DO TRANSACTION:
               RUN katlopsub_UI (INPUT 0, INPUT KALKYLPRISER.PRIS).
            END.       
            */     
         END.                  
      END.             
      
      FOR EACH LOP2 WHERE LOP2.KATAR = EBRPRIS.ARTAL NO-LOCK:
         IF LOP2.ARBKOD = "SKJ" OR LOP2.ARBKOD = "SKL" THEN DO:
            FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
            KALKYLKATALOGSUB.BENAMNING = "SKJ/SKL " + STRING(EBRPRIS.ARTAL - minskaartal)
            NO-LOCK NO-ERROR.
            IF NOT AVAILABLE KALKYLKATALOGSUB THEN DO TRANSACTION :       
               RUN katskapsub_UI (INPUT "SKJ/SKL " + STRING(EBRPRIS.ARTAL - minskaartal)).
            END.
         END.
         ELSE IF LOP2.ARBKOD = "EJK" OR LOP2.ARBKOD = "ELL" OR LOP2.ARBKOD = "EUH" OR LOP2.ARBKOD = "EAF" THEN DO:
            FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
            KALKYLKATALOGSUB.BENAMNING = "EJK/ELL/EUH/EAF " + STRING(EBRPRIS.ARTAL - minskaartal)
            NO-LOCK NO-ERROR.
            IF NOT AVAILABLE KALKYLKATALOGSUB THEN DO TRANSACTION :       
               RUN katskapsub_UI (INPUT "EJK/ELL/EUH/EAF " + STRING(EBRPRIS.ARTAL - minskaartal)).
            END.
         END.
         ELSE IF LOP2.ARBKOD = "VND" THEN DO:
            FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
            KALKYLKATALOGSUB.BENAMNING = "VND " + STRING(EBRPRIS.ARTAL - minskaartal)
            NO-LOCK NO-ERROR.
            IF NOT AVAILABLE KALKYLKATALOGSUB THEN DO TRANSACTION :       
               RUN katskapsub_UI (INPUT "VND " + STRING(EBRPRIS.ARTAL - minskaartal)).
            END.
         END.
         ELSE IF LOP2.ARBKOD = "TKOD"  THEN DO:
            FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
            KALKYLKATALOGSUB.BENAMNING = "TKOD " + STRING(EBRPRIS.ARTAL - minskaartal)
            NO-LOCK NO-ERROR.
            IF NOT AVAILABLE KALKYLKATALOGSUB THEN DO TRANSACTION :       
               RUN katskapsub_UI (INPUT "TKOD " + STRING(EBRPRIS.ARTAL - minskaartal)).
            END.
         END.
         ELSE DO:
            FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
            KALKYLKATALOGSUB.BENAMNING = "EBR " + STRING(EBRPRIS.ARTAL - minskaartal)
            NO-LOCK NO-ERROR.
         END.   
         FIND FIRST KALKYLLOPPOSTER WHERE KALKYLLOPPOSTER.KLOGSUBID =  KALKYLKATALOGSUB.KLOGSUBID AND
         KALKYLLOPPOSTER.ARBKOD = LOP2.ARBKOD AND KALKYLLOPPOSTER.LOPNR = LOP2.LOPNR       
         NO-LOCK NO-ERROR.   
         IF NOT AVAILABLE KALKYLLOPPOSTER THEN DO:
            FIND FIRST KALKYLARBKODER WHERE KALKYLARBKODER.KLOGSUBID =  KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLARBKODER.ARBKOD = LOP2.ARBKOD        
            NO-LOCK NO-ERROR.      
            IF NOT AVAILABLE KALKYLARBKODER THEN DO:
               OUTPUT TO VALUE(filut) APPEND.
               PUT  LOP2.ARBKOD LOP2.KATAR KALKYLKATALOGSUB.KLOGSUBID " P2 FINNS EJ" SKIP. 
               OUTPUT CLOSE.
               NEXT.               
            END.   
            DO TRANSACTION:
               CREATE KALKYLLOPPOSTER.
               ASSIGN 
               KALKYLLOPPOSTER.MARKNING = KALKYLARBKODER.MARKNING
               KALKYLLOPPOSTER.TYPKALK = 2
               KALKYLLOPPOSTER.KLOGSUBID =  KALKYLKATALOGSUB.KLOGSUBID
               KALKYLLOPPOSTER.ARBKOD = LOP2.ARBKOD 
               KALKYLLOPPOSTER.LOPNR = LOP2.LOPNR
               KALKYLLOPPOSTER.BENAMNING = SUBSTRING(LOP2.BENAMNING,1,49)
               KALKYLLOPPOSTER.KOMMENTAR = SUBSTRING(LOP2.BENAMNING,60)
               KALKYLLOPPOSTER.ENHET = LOP2.ENHET
               KALKYLLOPPOSTER.EAMANGD = LOP2.EA.     
               KALKYLLOPPOSTER.KOMMENTAR = REPLACE(KALKYLLOPPOSTER.KOMMENTAR,CHR(13),CHR(10)). 
            END.
            deckatfix = 1. 
            IF LOP2.F9 = 0 THEN deckatfix = 1.  
            ELSE deckatfix = 100.
            /*
            IF KALKYLKATALOGSUB.BENAMNING = "EBR " + STRING(EBRPRIS.ARTAL - minskaartal) THEN DO:
               IF LOP2.F9 = 0 THEN deckatfix = 1.  
               ELSE deckatfix = 100.
            END.
            */     
            IF LENGTH(TRIM(LOP2.ARBKOD)) < 3 THEN DO:
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "BEREDARE REGION" NO-LOCK NO-ERROR.
            END.    
            ELSE DO:
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "BEREDARE" NO-LOCK NO-ERROR.
            END.              
            /*beredare*/
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP2.F1 / deckatfix, INPUT 0).         
            END.
            /*montör*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MONTÖR" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP2.F2 / deckatfix, INPUT 0).
            END.   
            /*MASKIN*/
            IF LENGTH(TRIM(LOP2.ARBKOD)) < 3 THEN DO:
               RUN maskklg2_UI (INPUT LOP2.F3 / deckatfix, INPUT LOP2.MASKINKOST).
            END.
            ELSE DO:
                /*MASKIN*/
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "MASKIN1" NO-LOCK NO-ERROR.
               DO TRANSACTION:
                  RUN katlopsub_UI (INPUT LOP2.F3 / deckatfix, INPUT 0).
               END.            
                /*MASKIN*/
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "MASKIN2" NO-LOCK NO-ERROR.
               DO TRANSACTION:
                  RUN katlopsub_UI (INPUT LOP2.F4 / deckatfix, INPUT 0).
               END.   
                /*MASKIN*/
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "MASKIN4" NO-LOCK NO-ERROR.
               DO TRANSACTION:
                  RUN katlopsub_UI (INPUT LOP2.F5 / deckatfix, INPUT 0).
               END.   
                   /*MASKIN*/
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "MASKIN5" NO-LOCK NO-ERROR.
               DO TRANSACTION:
                  RUN katlopsub_UI (INPUT LOP2.F6 / deckatfix, INPUT 0).
               END.   
               /*MASKIN*/
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "MASKIN3" NO-LOCK NO-ERROR.
               DO TRANSACTION:
                  RUN katlopsub_UI (INPUT LOP2.F7 / deckatfix, INPUT 0).
               END.
            END.                     
            /*MATERIEL*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MATERIEL" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT 0, INPUT LOP2.MATERIEL).
            END.            
            /*UTRUSTNING*/
            IF LENGTH(TRIM(LOP2.ARBKOD)) < 3 THEN DO:
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "UTRUSTNING" NO-LOCK NO-ERROR.
               DO TRANSACTION:
                  RUN katlopsub_UI (INPUT LOP2.UTRUST / deckatfix, INPUT LOP2.UTRUSTKOST).
               END. 
            END.
            ELSE DO:
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "ÖVRIGKOSTNADEA" NO-LOCK NO-ERROR.
               DO TRANSACTION:
                  RUN katlopsub_UI (INPUT LOP2.UTRUST / deckatfix, INPUT LOP2.UTRUSTKOST).
               END.
            END.    
            /*ÖVRIGKOSTNAD*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "ÖVRIGKOSTNAD" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT 0, INPUT LOP2.OVRIGT).
            END.   
            /*
            /*SAMBYGGNADSPRIS  ?????*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "SAMBYGGNADSPRIS" NO-LOCK NO-ERROR.
            IF AVAILABLE KALKYLPRISER THEN DO TRANSACTION:
               RUN katlopsub_UI (INPUT 0, INPUT KALKYLPRISER.PRIS).
            END.   
            
            /*RÖRLIGKOSTNAD EA  ?????*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "RÖRLIGKOSTNAD EA" NO-LOCK NO-ERROR.
            IF AVAILABLE KALKYLPRISER THEN DO TRANSACTION:
               RUN katlopsub_UI (INPUT 0, INPUT KALKYLPRISER.PRIS).
            END.
            */            
         END.                  
      END.
      FOR EACH LOP3 WHERE LOP3.KATAR = EBRPRIS.ARTAL NO-LOCK:
         FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
         KALKYLKATALOGSUB.BENAMNING = "EBR " + STRING(EBRPRIS.ARTAL - minskaartal)
         NO-LOCK NO-ERROR.
         FIND FIRST KALKYLLOPPOSTER WHERE KALKYLLOPPOSTER.KLOGSUBID =  KALKYLKATALOGSUB.KLOGSUBID AND
         KALKYLLOPPOSTER.ARBKOD = LOP3.ARBKOD AND KALKYLLOPPOSTER.LOPNR = LOP3.LOPNR       
         NO-LOCK NO-ERROR.   
         IF NOT AVAILABLE KALKYLLOPPOSTER THEN DO:
            FIND FIRST KALKYLARBKODER WHERE KALKYLARBKODER.KLOGSUBID =  KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLARBKODER.ARBKOD = LOP3.ARBKOD        
            NO-LOCK NO-ERROR.   
            IF NOT AVAILABLE KALKYLARBKODER THEN DO:
               OUTPUT TO VALUE(filut) APPEND.
               PUT  LOP3.ARBKOD LOP3.KATAR KALKYLKATALOGSUB.KLOGSUBID " P3 FINNS EJ" SKIP. 
               OUTPUT CLOSE.
               NEXT.               
            END.              
            DO TRANSACTION:
               CREATE KALKYLLOPPOSTER.
               ASSIGN 
               KALKYLLOPPOSTER.MARKNING = KALKYLARBKODER.MARKNING
               KALKYLLOPPOSTER.TYPKALK = 3
               KALKYLLOPPOSTER.KLOGSUBID =  KALKYLKATALOGSUB.KLOGSUBID
               KALKYLLOPPOSTER.ARBKOD = LOP3.ARBKOD 
               KALKYLLOPPOSTER.LOPNR = LOP3.LOPNR
               KALKYLLOPPOSTER.BENAMNING = SUBSTRING(LOP3.BENAMNING,1,49)
               KALKYLLOPPOSTER.KOMMENTAR = SUBSTRING(LOP3.BENAMNING,60)
               KALKYLLOPPOSTER.ENHET = LOP3.ENHET
               KALKYLLOPPOSTER.EAMANGD = LOP3.EA.     
            END.
            deckatfix = 1. 
            IF LOP3.F9 = 0 THEN deckatfix = 1.  
               ELSE deckatfix = 100.
               /*
            IF KALKYLKATALOGSUB.BENAMNING = "EBR " + STRING(EBRPRIS.ARTAL - minskaartal) THEN DO:
               IF LOP3.F9 = 0 THEN deckatfix = 1.  
               ELSE deckatfix = 100.
            END. 
            */     
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "BEREDARE" NO-LOCK NO-ERROR.
                         
            /*beredare*/
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP3.F1 / deckatfix, INPUT 0).         
            END.
            /*montör*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MONTÖR" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP3.F2 / deckatfix, INPUT 0).
            END. 
             /*MASKIN*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MASKIN1" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP3.F3 / deckatfix, INPUT 0).
            END.            
             /*MASKIN*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MASKIN2" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP3.F4 / deckatfix, INPUT 0).
            END. 
             /*MASKIN*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MASKIN4" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP3.F5 / deckatfix, INPUT 0).
            END.
                /*MASKIN*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MASKIN5" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP3.F6 / deckatfix, INPUT 0).
            END.
            /*MASKIN*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MASKIN3" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP3.F7 / deckatfix, INPUT 0).               
            END.
            /*MATERIEL*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MATERIEL" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT 0, INPUT LOP3.MATERIEL).         
            END.
            /*UTRUSTNING*/
            IF SUBSTRING(LOP3.ARBKOD,1,1) = "R" THEN DO:
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "UTRUSTNING" NO-LOCK NO-ERROR.
               DO TRANSACTION:
                  RUN katlopsub_UI (INPUT LOP3.UTRUST / deckatfix, INPUT LOP3.UTRUSTKOST).
               END.
            END.   
            ELSE IF SUBSTRING(LOP3.ARBKOD,1,1) <= "9" AND INTEGER(LOP3.ARBKOD) < 800 THEN DO:
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "UTRUSTNING" NO-LOCK NO-ERROR.
               DO TRANSACTION:
                  RUN katlopsub_UI (INPUT LOP3.UTRUST / deckatfix, INPUT LOP3.UTRUSTKOST).
               END.   
            END.      
            ELSE DO:      
               FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
               KALKYLPRISER.SOKBENAMNING = "ÖVRIGKOSTNADEA" NO-LOCK NO-ERROR.
               DO TRANSACTION:
                  RUN katlopsub_UI (INPUT LOP3.UTRUST / deckatfix, INPUT LOP3.UTRUSTKOST).
               END.
            END.
            /*ÖVRIGKOSTNAD*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "ÖVRIGKOSTNAD" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT 0, INPUT LOP3.OVRIGT).
            END.
            /*
            /*SAMBYGGNADSPRIS  ?????*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "SAMBYGGNADSPRIS" NO-LOCK NO-ERROR.
            IF AVAILABLE KALKYLPRISER THEN  DO TRANSACTION:
               RUN katlopsub_UI (INPUT 0, INPUT KALKYLPRISER.PRIS).
            END.
            /*RÖRLIGKOSTNAD EA  ?????*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "RÖRLIGKOSTNAD EA" NO-LOCK NO-ERROR.
            IF AVAILABLE KALKYLPRISER THEN DO TRANSACTION:
               RUN katlopsub_UI (INPUT 0, INPUT KALKYLPRISER.PRIS).
            END.   
            */         
         END.                  
      END.
      FOR EACH LOP5 WHERE LOP5.KATAR = EBRPRIS.ARTAL NO-LOCK:
         
         FIND FIRST KALKYLLOPPOSTER WHERE KALKYLLOPPOSTER.KLOGSUBID =  KALKYLKATALOGSUB.KLOGSUBID AND
         KALKYLLOPPOSTER.ARBKOD = LOP5.ARBKOD AND KALKYLLOPPOSTER.LOPNR = LOP5.LOPNR       
         NO-LOCK NO-ERROR.   
         IF NOT AVAILABLE KALKYLLOPPOSTER THEN DO:
            FIND FIRST KALKYLARBKODER WHERE KALKYLARBKODER.KLOGSUBID =  KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLARBKODER.ARBKOD = LOP5.ARBKOD        
            NO-LOCK NO-ERROR.  
            IF NOT AVAILABLE KALKYLARBKODER THEN DO:
               OUTPUT TO VALUE(filut) APPEND.
               PUT  LOP5.ARBKOD LOP5.KATAR KALKYLKATALOGSUB.KLOGSUBID " P5 FINNS EJ" SKIP. 
               OUTPUT CLOSE.
               NEXT.               
            END.       
            DO TRANSACTION:
               CREATE KALKYLLOPPOSTER.
               ASSIGN 
               KALKYLLOPPOSTER.MARKNING = KALKYLARBKODER.MARKNING
               KALKYLLOPPOSTER.TYPKALK = 5
               KALKYLLOPPOSTER.KLOGSUBID =  KALKYLKATALOGSUB.KLOGSUBID
               KALKYLLOPPOSTER.ARBKOD = LOP5.ARBKOD 
               KALKYLLOPPOSTER.LOPNR = LOP5.LOPNR
               KALKYLLOPPOSTER.BENAMNING = SUBSTRING(LOP5.BENAMNING,1,49)
               KALKYLLOPPOSTER.KOMMENTAR = SUBSTRING(LOP5.BENAMNING,60)
               KALKYLLOPPOSTER.ENHET = LOP5.ENHET
               KALKYLLOPPOSTER.EAMANGD = LOP5.EA.     
            END.
            deckatfix = 1.
            IF LOP5.F9 = 0 THEN deckatfix = 1.  
               ELSE deckatfix = 100.
            /* 
            IF KALKYLKATALOGSUB.BENAMNING = "EBR " + STRING(EBRPRIS.ARTAL - minskaartal) THEN DO:
               IF LOP5.F9 = 0 THEN deckatfix = 1.  
               ELSE deckatfix = 100.
            END.
            */       
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "BEREDARE" NO-LOCK NO-ERROR.
                         
            /*beredare*/
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP5.F1 / deckatfix, INPUT 0).         
            END.
            /*montör*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MONTÖR" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP5.F2 / deckatfix, INPUT 0).
            END. 
             /*MASKIN*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MASKIN1" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP5.F3 / deckatfix, INPUT 0).         
            END. 
             /*MASKIN*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MASKIN2" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP5.F4 / deckatfix, INPUT 0).
            END. 
             /*MASKIN*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MASKIN4" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP5.F5 / deckatfix, INPUT 0).
            END.
                /*MASKIN*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MASKIN5" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP5.F6 / deckatfix, INPUT 0).
            END.
            /*MASKIN*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MASKIN3" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP5.F7 / deckatfix, INPUT 0).               
            END.
            /*MATERIEL*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "MATERIEL" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT 0, INPUT LOP5.MATERIEL).         
            END.
            /*UTRUSTNING*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "UTRUSTNING" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT LOP5.UTRUST / deckatfix, INPUT LOP5.UTRUSTKOST).
            END.
            /*ÖVRIGKOSTNAD*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "ÖVRIGKOSTNAD" NO-LOCK NO-ERROR.
            DO TRANSACTION:
               RUN katlopsub_UI (INPUT 0, INPUT LOP5.OVRIGT).
            END.   
            /*
            /*SAMBYGGNADSPRIS  ?????*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "SAMBYGGNADSPRIS" NO-LOCK NO-ERROR.
            IF AVAILABLE KALKYLPRISER THEN DO TRANSACTION:
               RUN katlopsub_UI (INPUT 0, INPUT KALKYLPRISER.PRIS).
            END.
            /*RÖRLIGKOSTNAD EA  ?????*/
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "RÖRLIGKOSTNAD EA" NO-LOCK NO-ERROR.
            IF AVAILABLE KALKYLPRISER THEN DO TRANSACTION:
               RUN katlopsub_UI (INPUT 0, INPUT KALKYLPRISER.PRIS).
            END.      
            */      
         END.                  
      END.
      
   END.
   RUN Mallarhmt.
END PROCEDURE.

/*hämtar kalkymallar*/
PROCEDURE Mallarhmt:
   
   EMPTY TEMP-TABLE KalkmallHuvudtt NO-ERROR. 
   EMPTY TEMP-TABLE KalkmallKodertt NO-ERROR. 
   RUN procset_UI.
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "KALKMALL"  
   inextradatatemp.HUVUDINT = ?                 
   inextradatatemp.HUVUDCH = "1".              
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp).
   FOR EACH extradatatemp WHERE extradatatemp.SOKLOG[1] = TRUE NO-LOCK:
      CREATE KalkmallHuvudtt.
      ASSIGN
      KalkmallHuvudtt.BENAMNING = extradatatemp.SOKCHAR[2]
      KalkmallHuvudtt.MALLNR = extradatatemp.HUVUDINT
      KalkmallHuvudtt.TYP = extradatatemp.SOKINT[3].
      KalkmallHuvudtt.TTRECID = RECID(KalkmallHuvudtt). 
   END. 
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR.  
   EMPTY TEMP-TABLE extradatatemp NO-ERROR.
   FOR EACH KalkmallHuvudtt WHERE NO-LOCK:
       CREATE inextradatatemp.          
       ASSIGN
       inextradatatemp.PROGRAM = "KALKMALL"                   
       inextradatatemp.HUVUDINT = KalkmallHuvudtt.MALLNR
       inextradatatemp.HUVUDCH = "2".  
       RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp).                
      FOR EACH extradatatemp NO-LOCK:
         CREATE KalkmallKodertt.
         ASSIGN
         KalkmallKodertt.ANTAL = extradatatemp.SOKDEC[1]
         KalkmallKodertt.ARBKOD = extradatatemp.SOKCHAR[1] 
         KalkmallKodertt.BENAMNING = extradatatemp.SOKCHAR[3]
         KalkmallKodertt.ENHET = extradatatemp.SOKCHAR[4]
         KalkmallKodertt.LOPNR = extradatatemp.SOKINT[1]
         KalkmallKodertt.MALLNR = extradatatemp.HUVUDINT
         KalkmallKodertt.TYP = extradatatemp.SOKINT[3]. 
         
      END.
      EMPTY TEMP-TABLE inextradatatemp NO-ERROR.  
      EMPTY TEMP-TABLE extradatatemp NO-ERROR.
   END.   
   FOR EACH KalkmallHuvudtt WHERE NO-LOCK:
      CREATE KALKMALLHUVUD.
      BUFFER-COPY KalkmallHuvudtt TO KALKMALLHUVUD.
   END.  
   FOR EACH KalkmallKodertt WHERE NO-LOCK:
      CREATE KALKMALLKODER.
      BUFFER-COPY KalkmallKodertt TO KALKMALLKODER.
   END.  
   RUN procreset_UI.
   
END PROCEDURE.
PROCEDURE procset_UI:
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR.  
   EMPTY TEMP-TABLE extradatatemp NO-ERROR.   
   IF NOT VALID-HANDLE(edataapph) THEN RUN EXTRADATAHMT.P PERSISTENT SET edataapph.            
END PROCEDURE .
PROCEDURE procreset_UI :
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR.  
   EMPTY TEMP-TABLE extradatatemp NO-ERROR.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph. 
   edataapph = ?.
END PROCEDURE.
/*skapar frekvenstabeller*/
PROCEDURE katfrekvens_UI:
   DEFINE INPUT  PARAMETER katvar AS INTEGER NO-UNDO.
   FOR EACH FREKVENS WHERE FREKVENS.KATAR = katvar NO-LOCK:
      IF FREKVENS.ARBKOD = "" THEN.
      ELSE DO:
         FIND FIRST FREKVENSKATALOG WHERE FREKVENSKATALOG.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND 
         FREKVENSKATALOG.ARBKOD = FREKVENS.ARBKOD AND FREKVENSKATALOG.LOPNR = FREKVENS.LOPNR AND 
         FREKVENSKATALOG.FREKOD = FREKVENS.FREKOD AND FREKVENSKATALOG.FREKNR = FREKVENS.FREKNR
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE FREKVENSKATALOG THEN DO TRANSACTION:
            CREATE FREKVENSKATALOG.
            BUFFER-COPY FREKVENS TO FREKVENSKATALOG.
            FREKVENSKATALOG.BENAMNING = "".
            FREKVENSKATALOG.BENAMNING = SUBSTRING(FREKVENS.BENAMNING,1,49).
            FREKVENSKATALOG.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID.
            FIND FIRST KALKYLLOPPOSTER  WHERE KALKYLLOPPOSTER.KLOGSUBID = FREKVENSKATALOG.KLOGSUBID AND KALKYLLOPPOSTER.ARBKOD = FREKVENSKATALOG.ARBKOD AND KALKYLLOPPOSTER.LOPNR = FREKVENSKATALOG.LOPNR NO-LOCK NO-ERROR.
            IF AVAILABLE KALKYLLOPPOSTER THEN DO:
               FREKVENSKATALOG.ENHET = KALKYLLOPPOSTER.ENHET.
            END.
            
         END.   
         RELEASE FREKVENSKATALOG NO-ERROR. 
      END.       
   END.  
END PROCEDURE.
/*SKAPAR SUBKATALOG*/
PROCEDURE katskapsub_UI :
   DEFINE INPUT  PARAMETER katnamnvar AS CHARACTER NO-UNDO.
   CREATE KALKYLKATALOGSUB.
   FIND FIRST KALKYLKATALOGSUBbuff WHERE KALKYLKATALOGSUBbuff.BENAMNING = katnamnvar NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKYLKATALOGSUBbuff THEN DO:
      RUN sistasubid_UI (OUTPUT KALKYLKATALOGSUB.KLOGSUBID).
   END.
   ELSE DO:
      KALKYLKATALOGSUB.KLOGSUBID = KALKYLKATALOGSUBbuff.KLOGSUBID.
   END.
   ASSIGN
   KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID
   KALKYLKATALOGSUB.BENAMNING = katnamnvar
   KALKYLKATALOGSUB.INDATUM = TODAY.

END PROCEDURE.

/*SISTA SUBKATALOGEN*/                 
PROCEDURE sistasubid_UI :
   DEFINE OUTPUT PARAMETER hjraknare AS INTEGER NO-UNDO.
   FIND LAST KALKYLKATALOGSUBbuff USE-INDEX KLOGSUBID NO-LOCK NO-ERROR.
   IF AVAILABLE KALKYLKATALOGSUBbuff THEN DO:
      hjraknare = KALKYLKATALOGSUBbuff.KLOGSUBID + 1.
   END.
   ELSE hjraknare = hjraknare + 1.
END PROCEDURE.

/*PRISER PER SUBKATALOG*/
PROCEDURE kalkylpristab_UI :
   DEFINE INPUT  PARAMETER vid AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER sokbvar AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER bvar AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER prisvar AS DECIMAL NO-UNDO.
   DEFINE INPUT  PARAMETER egetp AS LOGICAL NO-UNDO.
   DEFINE INPUT  PARAMETER egenk AS LOGICAL NO-UNDO.
  DO TRANSACTION:
      CREATE KALKYLPRISER.
      RUN sistaprisid_UI (OUTPUT KALKYLPRISER.KPID).
      ASSIGN
      KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID
      KALKYLPRISER.KVID = vid
      KALKYLPRISER.SOKBENAMNING = sokbvar
      KALKYLPRISER.BENAMNING = bvar
      KALKYLPRISER.PRIS = prisvar.
      IF KALKYLKATALOGSUB.BENAMNING BEGINS "EBR" THEN  DO:
         KALKYLPRISER.EGENPRISUPP = egetp.
         KALKYLPRISER.EGENKODUPP  = egenk.
      END.   
      ELSE DO:
         KALKYLPRISER.EGENPRISUPP = FALSE.
         KALKYLPRISER.EGENKODUPP  = FALSE.
      END.       
      
   END.
END PROCEDURE. 

/*SISTA NUMMRET*/
PROCEDURE sistaprisid_UI :
   DEFINE OUTPUT PARAMETER hjraknare AS INTEGER NO-UNDO.
   FIND LAST KALKYLPRISERbuff WHERE KALKYLPRISERbuff.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID USE-INDEX KPID NO-LOCK NO-ERROR.
   IF AVAILABLE KALKYLPRISERbuff THEN DO:
      hjraknare = KALKYLPRISERbuff.KPID + 1.
   END.
   ELSE hjraknare = hjraknare + 1.
END PROCEDURE.  

/*MED VID VISNING*/
PROCEDURE kvisskap_UI :
   DEFINE INPUT  PARAMETER vid AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER timtypvar AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER kostypvar AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER eavar AS LOGICAL NO-UNDO.
   DEFINE INPUT  PARAMETER otmar AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER okost AS INTEGER NO-UNDO.
   FIND FIRST KALKVISNING WHERE KALKVISNING.KVID = vid NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKVISNING THEN DO TRANSACTION:
      CREATE KALKVISNING.
      ASSIGN
      KALKVISNING.KVID = vid 
      KALKVISNING.TIMTYP = timtypvar
      KALKVISNING.KOSTTYP = kostypvar
      KALKVISNING.EABER = eavar
      KALKVISNING.ORDNINGTIMMAR = otmar
      KALKVISNING.ORDNINGKOSTNAD = okost.
   END.
   FIND CURRENT KALKVISNING NO-LOCK NO-ERROR.
END PROCEDURE.

/*SKAPA ARBETSKODER*/

PROCEDURE arbkodskap_UI :
   DEFINE INPUT  PARAMETER vartyp AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER arbvar AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER benvar AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER markvar AS CHARACTER NO-UNDO.
   FIND FIRST KALKYLARBKODER WHERE KALKYLARBKODER.KLOGSUBID =  KALKYLKATALOGSUB.KLOGSUBID AND
   KALKYLARBKODER.ARBKOD = arbvar       
   NO-LOCK NO-ERROR.   
   IF NOT AVAILABLE KALKYLARBKODER THEN DO: 
      CREATE KALKYLARBKODER.
      ASSIGN 
      KALKYLARBKODER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID
      KALKYLARBKODER.TYPKALK = vartyp
      KALKYLARBKODER.ARBKOD = arbvar 
      KALKYLARBKODER.BENAMNING = benvar
      KALKYLARBKODER.MARKNING = markvar.        
   END.  
END PROCEDURE.

PROCEDURE arbkodskapEBR_UI :
   DEFINE INPUT  PARAMETER katarvar AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER katarvar2 AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER vartyp AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER arbvar AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER benvar AS CHARACTER NO-UNDO.
   
   DEFINE VARIABLE minskaartal AS INTEGER NO-UNDO.   
   IF globforetag = "GRAN" THEN minskaartal = 2.
   ELSE minskaartal = 1. 
   
   IF arbvar = "SKJ" OR arbvar = "SKL" THEN DO:
      FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
      KALKYLKATALOGSUB.BENAMNING = "SKJ/SKL " + STRING(katarvar2 - minskaartal)
      NO-LOCK NO-ERROR.
   END.
   ELSE IF arbvar = "EJK" OR arbvar = "ELL" OR arbvar = "EUH" OR arbvar = "EAF" THEN DO:
      FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
      KALKYLKATALOGSUB.BENAMNING = "EJK/ELL/EUH/EAF " + STRING(katarvar2 - minskaartal)
      NO-LOCK NO-ERROR.
   END.
   ELSE IF arbvar = "TKOD"  THEN DO:
      FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
      KALKYLKATALOGSUB.BENAMNING = "TKOD " + STRING(katarvar2 - minskaartal)
      NO-LOCK NO-ERROR.
   END.
   ELSE IF arbvar = "VND" THEN DO:
      FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
      KALKYLKATALOGSUB.BENAMNING = "VND " + STRING(katarvar2 - minskaartal)
      NO-LOCK NO-ERROR.
   END.
   ELSE DO:
      FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID AND 
      KALKYLKATALOGSUB.BENAMNING = "EBR " + STRING(katarvar - minskaartal)
      NO-LOCK NO-ERROR.
   END.  
   FIND FIRST KALKYLARBKODER WHERE KALKYLARBKODER.KLOGSUBID =  KALKYLKATALOGSUB.KLOGSUBID AND
   KALKYLARBKODER.ARBKOD = arbvar       
   NO-LOCK NO-ERROR.   
   IF NOT AVAILABLE KALKYLARBKODER THEN DO: 
      CREATE KALKYLARBKODER.
      ASSIGN 
      KALKYLARBKODER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID
      KALKYLARBKODER.TYPKALK = vartyp
      KALKYLARBKODER.ARBKOD = arbvar 
      KALKYLARBKODER.BENAMNING = benvar.
      IF KALKYLARBKODER.TYPKALK = 1 THEN DO:
         IF Guru.Konstanter:varforetypval[41] = 1 AND LENGTH(TRIM(KALKYLARBKODER.ARBKOD)) = 1 THEN DO:
            KALKYLARBKODER.MARKNING = "Nät".
            KALKYLARBKODER.TYPKALK = 7.
         END.   
         ELSE IF SUBSTRING(KALKYLARBKODER.ARBKOD,2,1) = " " THEN DO:
            IF INTEGER(SUBSTRING(KALKYLARBKODER.ARBKOD,2,2)) < 99 THEN DO:
               KALKYLARBKODER.REGION = TRUE.
               KALKYLARBKODER.MARKNING = "Region".
            END.   
         END.
         ELSE IF Guru.Konstanter:varforetypval[41] = 1 THEN DO:
            IF SUBSTRING(KALKYLARBKODER.ARBKOD,1,1) = "G" THEN KALKYLARBKODER.MARKNING = "".
            ELSE IF SUBSTRING(KALKYLARBKODER.ARBKOD,1,1) = "U" THEN KALKYLARBKODER.MARKNING = "".
            ELSE DO:
               KALKYLARBKODER.MARKNING = "Nät".
               KALKYLARBKODER.TYPKALK = 7.
            END.   
         END.
      END.
      IF KALKYLARBKODER.TYPKALK = 2 THEN DO:
         IF SUBSTRING(KALKYLARBKODER.ARBKOD,1,1) = " " THEN DO:
            IF INTEGER(KALKYLARBKODER.ARBKOD) < 99 THEN DO:
               KALKYLARBKODER.REGION = TRUE.
               KALKYLARBKODER.MARKNING = "Region".
            END.   
         END.
         IF SUBSTRING(KALKYLARBKODER.ARBKOD,1,1) = "O" THEN DO:
            KALKYLARBKODER.OPTO = TRUE. 
            KALKYLARBKODER.MARKNING = "OPTO".
         END.           
      END.  
      IF KALKYLARBKODER.TYPKALK = 3 THEN DO:
         IF SUBSTRING(KALKYLARBKODER.ARBKOD,1,1) <= "9" THEN DO:
            IF INTEGER(KALKYLARBKODER.ARBKOD) < 800 THEN DO:
               KALKYLARBKODER.REGION = TRUE.
               KALKYLARBKODER.MARKNING = "Region".
            END.   
         END.
         IF SUBSTRING(KALKYLARBKODER.ARBKOD,1,1) = "R" THEN DO:
            KALKYLARBKODER.REGION = TRUE.
            KALKYLARBKODER.MARKNING = "Region".         
         END.  
      END.   
   END.  
END PROCEDURE.

/*LÖPNUMMER*/
PROCEDURE katlopsub_UI :
   DEFINE INPUT  PARAMETER timvar AS DECIMAL NO-UNDO.
   DEFINE INPUT  PARAMETER kostvar AS DECIMAL NO-UNDO.
   IF AVAILABLE KALKYLPRISER THEN DO:
      CREATE KALKYLLOPSUB.
      ASSIGN
      KALKYLLOPSUB.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID
      KALKYLLOPSUB.ARBKOD = KALKYLLOPPOSTER.ARBKOD
      KALKYLLOPSUB.LOPNR = KALKYLLOPPOSTER.LOPNR
      KALKYLLOPSUB.KPID = KALKYLPRISER.KPID  
      KALKYLLOPSUB.TIMMAR = timvar
      KALKYLLOPSUB.KOSTNAD =  kostvar.
   END.      
END PROCEDURE.

PROCEDURE kalkylopposter_UI :                 
   DEFINE INPUT PARAMETER inben AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER inkom AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER inenhet AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER inea AS DECIMAL NO-UNDO.
   DEFINE INPUT PARAMETER insubm AS CHARACTER NO-UNDO.
   DEFINE VARIABLE lopnrvar AS INTEGER NO-UNDO.
   FIND LAST KALKYLLOPPOSTER WHERE KALKYLLOPPOSTER.KLOGSUBID =  KALKYLKATALOGSUB.KLOGSUBID AND
   KALKYLLOPPOSTER.ARBKOD = KALKYLARBKODER.ARBKOD USE-INDEX ARBKOD NO-LOCK NO-ERROR.  
   IF NOT AVAILABLE KALKYLLOPPOSTER THEN lopnrvar = 1.
   ELSE lopnrvar = KALKYLLOPPOSTER.LOPNR + 1.
   
   CREATE KALKYLLOPPOSTER.
   ASSIGN 
   KALKYLLOPPOSTER.TYPKALK = KALKYLARBKODER.TYPKALK
   KALKYLLOPPOSTER.KLOGSUBID =  KALKYLKATALOGSUB.KLOGSUBI
   KALKYLLOPPOSTER.ARBKOD = KALKYLARBKODER.ARBKOD 
   KALKYLLOPPOSTER.LOPNR = lopnrvar
   KALKYLLOPPOSTER.BENAMNING = inben
   KALKYLLOPPOSTER.KOMMENTAR = inkom
   KALKYLLOPPOSTER.ENHET = inenhet
   KALKYLLOPPOSTER.EAMANGD = inea
   KALKYLLOPPOSTER.MARKNING = KALKYLARBKODER.MARKNING
   KALKYLLOPPOSTER.MARKSUB = insubm.
   KALKYLLOPPOSTER.KOMMENTAR = REPLACE(KALKYLLOPPOSTER.KOMMENTAR,CHR(13),CHR(10)).
END PROCEDURE.

PROCEDURE NYkatskapSPEC_UI:
   
   DEFINE VARIABLE deckatfix AS INTEGER NO-UNDO.
   DEFINE VARIABLE minskaartal AS INTEGER NO-UNDO.
   DEFINE VARIABLE klogvar AS INTEGER NO-UNDO.
   FIND LAST KALKYLKATALOG USE-INDEX KLOGID NO-LOCK NO-ERROR.
   klogvar = KALKYLKATALOG.KLOGID + 1.
   DO TRANSACTION :
      CREATE KALKYLKATALOG.
      ASSIGN
      KALKYLKATALOG.KLOGID = klogvar
      KALKYLKATALOG.BENAMNING = "Stamnät 2012"
      KALKYLKATALOG.INDATUM = TODAY
      KALKYLKATALOG.VISARTAL  = 2012.     
      RUN katskapsub_UI (INPUT "Stamnät 2012").
      KALKYLKATALOG.HKLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID. 
   END.
   FIND LAST KALKVISNING NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKVISNING THEN minskaartal.
   ELSE minskaartal = KALKVISNING.KVID + 1.

   RUN kvisskap_UI (INPUT minskaartal,INPUT "Project steering",INPUT  "Project steering",INPUT FALSE,INPUT 1,INPUT 1). 
   FIND LAST KALKVISNING NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKVISNING THEN minskaartal.
   ELSE minskaartal = KALKVISNING.KVID + 1.
   RUN kvisskap_UI (INPUT minskaartal,INPUT "Construction mgmt",INPUT  "Construction mgmt",INPUT FALSE,INPUT 2,INPUT 2). 
   FIND LAST KALKVISNING NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKVISNING THEN minskaartal.
   ELSE minskaartal = KALKVISNING.KVID + 1.
   RUN kvisskap_UI (INPUT minskaartal,INPUT "Design, electrical",INPUT  "Design, electrical",INPUT FALSE,INPUT 3,INPUT 3). 
   FIND LAST KALKVISNING NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKVISNING THEN minskaartal.
   ELSE minskaartal = KALKVISNING.KVID + 1.
   RUN kvisskap_UI (INPUT minskaartal,INPUT "Design, remote control",INPUT  "Design, remote control",INPUT FALSE,INPUT 4,INPUT 4). 
   FIND LAST KALKVISNING NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKVISNING THEN minskaartal.
   ELSE minskaartal = KALKVISNING.KVID + 1.
   RUN kvisskap_UI (INPUT minskaartal,INPUT "Assistent",INPUT  "Assistent",INPUT FALSE,INPUT 5,INPUT 5). 
   FIND LAST KALKVISNING NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKVISNING THEN minskaartal.
   ELSE minskaartal = KALKVISNING.KVID + 1.
   RUN kvisskap_UI (INPUT minskaartal,INPUT "Supervisor",INPUT  "Supervisor",INPUT FALSE,INPUT 6,INPUT 6). 
   FIND LAST KALKVISNING NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKVISNING THEN minskaartal.
   ELSE minskaartal = KALKVISNING.KVID + 1.
   RUN kvisskap_UI (INPUT minskaartal,INPUT "Commissioning, at site",INPUT  "Commissioning, at site",INPUT FALSE,INPUT 7,INPUT 7). 
   FIND LAST KALKVISNING NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKVISNING THEN minskaartal.
   ELSE minskaartal = KALKVISNING.KVID + 1.
   RUN kvisskap_UI (INPUT minskaartal,INPUT "Commissioning, at workshop",INPUT  "Commissioning, at workshop",INPUT FALSE,INPUT 8,INPUT 8). 
   FIND LAST KALKVISNING NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKVISNING THEN minskaartal.
   ELSE minskaartal = KALKVISNING.KVID + 1.
   RUN kvisskap_UI (INPUT minskaartal,INPUT "Installation, at site",INPUT  "Installation, at site",INPUT FALSE,INPUT 9,INPUT 9). 
   FIND LAST KALKVISNING NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKVISNING THEN minskaartal.
   ELSE minskaartal = KALKVISNING.KVID + 1.
   RUN kvisskap_UI (INPUT minskaartal,INPUT "Installation, at workshop",INPUT  "Installation, at workshop",INPUT FALSE,INPUT 10,INPUT 10). 
   FIND LAST KALKVISNING NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKVISNING THEN minskaartal.
   ELSE minskaartal = KALKVISNING.KVID + 1.
   RUN kvisskap_UI (INPUT minskaartal,INPUT "Restid",INPUT  "Restid",INPUT FALSE,INPUT 11,INPUT 11). 
   
     
   FOR EACH KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKYLKATALOG.KLOGID NO-LOCK:
      FIND FIRST KALKVISNING WHERE KALKVISNING.KOSTTYP = "ÖVRIGT" AND KALKVISNING.EABER = FALSE NO-LOCK NO-ERROR.
      RUN kalkylpristab_UI (INPUT KALKVISNING.KVID, INPUT KALKVISNING.KOSTTYP,INPUT "ÖVRIGKOSTNAD",INPUT 0,INPUT FALSE,INPUT TRUE).
      FIND FIRST KALKVISNING WHERE KALKVISNING.KOSTTYP = "MATERIEL" NO-LOCK NO-ERROR.
      RUN kalkylpristab_UI (INPUT KALKVISNING.KVID, INPUT KALKVISNING.KOSTTYP,INPUT "MATERIEL",INPUT 0,INPUT FALSE,INPUT TRUE).
      FIND FIRST KALKVISNING WHERE KALKVISNING.KOSTTYP = "RESTID" NO-LOCK NO-ERROR.
      RUN kalkylpristab_UI (INPUT KALKVISNING.KVID, INPUT KALKVISNING.KOSTTYP,INPUT "RESTID",INPUT 0,INPUT TRUE,INPUT TRUE).

      FIND FIRST KALKVISNING WHERE KALKVISNING.KOSTTYP = "Project steering" NO-LOCK NO-ERROR.
      RUN kalkylpristab_UI (INPUT KALKVISNING.KVID, INPUT KALKVISNING.KOSTTYP,INPUT KALKVISNING.KOSTTYP,INPUT 67.05,INPUT TRUE,INPUT TRUE).
      FIND FIRST KALKVISNING WHERE KALKVISNING.KOSTTYP = "Construction mgmt" NO-LOCK NO-ERROR.
      RUN kalkylpristab_UI (INPUT KALKVISNING.KVID, INPUT KALKVISNING.KOSTTYP,INPUT KALKVISNING.KOSTTYP,INPUT 67.05,INPUT TRUE,INPUT TRUE).
      FIND FIRST KALKVISNING WHERE KALKVISNING.KOSTTYP = "Design, electrical" NO-LOCK NO-ERROR.
      RUN kalkylpristab_UI (INPUT KALKVISNING.KVID, INPUT KALKVISNING.KOSTTYP,INPUT KALKVISNING.KOSTTYP,INPUT 57.86,INPUT TRUE,INPUT TRUE).
      FIND FIRST KALKVISNING WHERE KALKVISNING.KOSTTYP = "Design, remote control" NO-LOCK NO-ERROR.
      RUN kalkylpristab_UI (INPUT KALKVISNING.KVID, INPUT KALKVISNING.KOSTTYP,INPUT KALKVISNING.KOSTTYP,INPUT 74.62,INPUT TRUE,INPUT TRUE).
      FIND FIRST KALKVISNING WHERE KALKVISNING.KOSTTYP = "Assistent" NO-LOCK NO-ERROR.
      RUN kalkylpristab_UI (INPUT KALKVISNING.KVID, INPUT KALKVISNING.KOSTTYP,INPUT KALKVISNING.KOSTTYP,INPUT 48.51,INPUT TRUE,INPUT TRUE).
      FIND FIRST KALKVISNING WHERE KALKVISNING.KOSTTYP = "Supervisor" NO-LOCK NO-ERROR.
      RUN kalkylpristab_UI (INPUT KALKVISNING.KVID, INPUT KALKVISNING.KOSTTYP,INPUT KALKVISNING.KOSTTYP,INPUT 57.86,INPUT TRUE,INPUT TRUE).
      FIND FIRST KALKVISNING WHERE KALKVISNING.KOSTTYP = "Installation, at site" NO-LOCK NO-ERROR.
      RUN kalkylpristab_UI (INPUT KALKVISNING.KVID, INPUT KALKVISNING.KOSTTYP,INPUT KALKVISNING.KOSTTYP,INPUT 45.78,INPUT TRUE,INPUT TRUE).
      FIND FIRST KALKVISNING WHERE KALKVISNING.KOSTTYP = "Installation, at workshop" NO-LOCK NO-ERROR.
      RUN kalkylpristab_UI (INPUT KALKVISNING.KVID, INPUT KALKVISNING.KOSTTYP,INPUT KALKVISNING.KOSTTYP,INPUT 47.15,INPUT TRUE,INPUT TRUE).
      FIND FIRST KALKVISNING WHERE KALKVISNING.KOSTTYP = "Commissioning, at site" NO-LOCK NO-ERROR.
      RUN kalkylpristab_UI (INPUT KALKVISNING.KVID, INPUT KALKVISNING.KOSTTYP,INPUT KALKVISNING.KOSTTYP,INPUT 78.41,INPUT TRUE,INPUT TRUE).
      FIND FIRST KALKVISNING WHERE KALKVISNING.KOSTTYP = "Commissioning, at workshop" NO-LOCK NO-ERROR.
      RUN kalkylpristab_UI (INPUT KALKVISNING.KVID, INPUT KALKVISNING.KOSTTYP,INPUT KALKVISNING.KOSTTYP,INPUT 78.41,INPUT TRUE,INPUT TRUE).
      RUN arbkodskap_UI (INPUT 2,INPUT "PL",INPUT "Project steering",INPUT "WORK").
      RUN arbkodskap_UI (INPUT 2,INPUT "CM",INPUT "Construction mgmt",INPUT "WORK").
      RUN arbkodskap_UI (INPUT 2,INPUT "DE",INPUT "Design, electrical",INPUT "WORK").
      RUN arbkodskap_UI (INPUT 2,INPUT "DR",INPUT "Design, remote control",INPUT "WORK").
      RUN arbkodskap_UI (INPUT 2,INPUT "AS",INPUT "Assistent",INPUT "WORK").
      RUN arbkodskap_UI (INPUT 2,INPUT "SU",INPUT "Supervisor",INPUT "WORK").
      RUN arbkodskap_UI (INPUT 2,INPUT "IS",INPUT "Installation, at site",INPUT "WORK").
      RUN arbkodskap_UI (INPUT 2,INPUT "IW",INPUT "Installation, at workshop",INPUT "WORK").
      RUN arbkodskap_UI (INPUT 2,INPUT "CS",INPUT "Commissioning, at site",INPUT "WORK").
      RUN arbkodskap_UI (INPUT 2,INPUT "CW",INPUT "Commissioning, at workshop",INPUT "WORK").
      
      FOR EACH KALKYLARBKODER WHERE KALKYLARBKODER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID NO-LOCK:
         IF KALKYLARBKODER.ARBKOD = "PL" THEN DO:            
            RUN kalkylopposter_UI (INPUT "Project steering","",INPUT "h",INPUT 0,INPUT "WORK").                 
            RUN kalkylopposter_UI (INPUT "Project steering Accom","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Project steering Travel","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Project steering Travel","",INPUT "km/w",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Project steering Daily allow. 1-5/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Project steering Daily allow. 1-7/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Project steering Food allow","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Project steering Other","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Project steering km allow.","",INPUT "km",INPUT 0,INPUT "Travel").                     
         END.
         IF KALKYLARBKODER.ARBKOD = "CM" THEN DO:
            RUN kalkylopposter_UI (INPUT "Construction mgmt","",INPUT "h",INPUT 0,INPUT "WORK").                 
            RUN kalkylopposter_UI (INPUT "Construction mgmt Accom","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Construction mgmt Travel","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Construction mgmt Travel","",INPUT "km/w",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Construction mgmt Daily allow. 1-5/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Construction mgmt Daily allow. 1-7/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Construction mgmt Food allow","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Construction mgmt Other","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Construction mgmt km allow.","",INPUT "km",INPUT 0,INPUT "Travel").                    
         END.
         IF KALKYLARBKODER.ARBKOD = "DE" THEN DO:
            RUN kalkylopposter_UI (INPUT "Design, electrical","",INPUT "h",INPUT 0,INPUT "WORK").                 
            RUN kalkylopposter_UI (INPUT "Design, electrical Accom","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Design, electrical Travel","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Design, electrical Travel","",INPUT "km/w",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Design, electrical Daily allow. 1-5/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Design, electrical Daily allow. 1-7/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Design, electrical Food allow","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Design, electrical Other","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Design, electrical km allow.","",INPUT "km",INPUT 0,INPUT "Travel").                   
         END.
         IF KALKYLARBKODER.ARBKOD = "DR" THEN DO:
            RUN kalkylopposter_UI (INPUT "Design, remote control","",INPUT "h",INPUT 0,INPUT "WORK").                 
            RUN kalkylopposter_UI (INPUT "Design, remote control Accom","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Design, remote control Travel","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Design, remote control Travel","",INPUT "km/w",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Design, remote control Daily allow. 1-5/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Design, remote control Daily allow. 1-7/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Design, remote control Food allow","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Design, remote control Other","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Design, remote control km allow.","",INPUT "km",INPUT 0,INPUT "Travel").              
         END.
         IF KALKYLARBKODER.ARBKOD = "AS" THEN DO: 
            RUN kalkylopposter_UI (INPUT "Assistent","",INPUT "h",INPUT 0,INPUT "WORK").                 
            RUN kalkylopposter_UI (INPUT "Assistent Accom","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Assistent Travel","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Assistent Travel","",INPUT "km/w",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Assistent Daily allow. 1-5/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Assistent Daily allow. 1-7/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Assistent Food allow","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Assistent Other","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Assistent km allow.","",INPUT "km",INPUT 0,INPUT "Travel").                     
         END.
         IF KALKYLARBKODER.ARBKOD = "SU" THEN DO:
            RUN kalkylopposter_UI (INPUT "Supervisor","",INPUT "h",INPUT 0,INPUT "WORK").                 
            RUN kalkylopposter_UI (INPUT "Supervisor Accom","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Supervisor Travel","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Supervisor Travel","",INPUT "km/w",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Supervisor Daily allow. 1-5/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Supervisor Daily allow. 1-7/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Supervisor Food allow","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Supervisor Other","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Supervisor km allow.","",INPUT "km",INPUT 0,INPUT "Travel").                     
         END.
         IF KALKYLARBKODER.ARBKOD = "IS" THEN DO:
            RUN kalkylopposter_UI (INPUT "Installation, at site","",INPUT "h",INPUT 0,INPUT "WORK").                 
            RUN kalkylopposter_UI (INPUT "Installation, at site Accom","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Installation, at site Travel","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Installation, at site Travel","",INPUT "km/w",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Installation, at site Daily allow. 1-5/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Installation, at site Daily allow. 1-7/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Installation, at site Food allow","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Installation, at site Other","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Installation, at site km allow.","",INPUT "km",INPUT 0,INPUT "Travel").                     
         END.
         IF KALKYLARBKODER.ARBKOD = "IW" THEN DO:
            RUN kalkylopposter_UI (INPUT "Installation, at workshop","",INPUT "h",INPUT 0,INPUT "WORK").                 
            RUN kalkylopposter_UI (INPUT "Installation, at workshop Accom","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Installation, at workshop Travel","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Installation, at workshop Travel","",INPUT "km/w",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Installation, at workshop Daily allow. 1-5/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Installation, at workshop Daily allow. 1-7/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Installation, at workshop Food allow","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Installation, at workshop Other","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Installation, at workshop km allow.","",INPUT "km",INPUT 0,INPUT "Travel").                     
         END.
         IF KALKYLARBKODER.ARBKOD = "CS" THEN DO:
            RUN kalkylopposter_UI (INPUT "Commissioning, at site","",INPUT "h",INPUT 0,INPUT "WORK").                 
            RUN kalkylopposter_UI (INPUT "Commissioning, at site Accom","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Commissioning, at site Travel","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Commissioning, at site Travel","",INPUT "km/w",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Commissioning, at site Daily allow. 1-5/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Commissioning, at site Daily allow. 1-7/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Commissioning, at site Food allow","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Commissioning, at site Other","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Commissioning, at site km allow.","",INPUT "km",INPUT 0,INPUT "Travel").                     
         END.
         IF KALKYLARBKODER.ARBKOD = "CW" THEN DO:
            RUN kalkylopposter_UI (INPUT "Commissioning, at workshop","",INPUT "h",INPUT 0,INPUT "WORK").                 
            RUN kalkylopposter_UI (INPUT "Commissioning, at workshop Accom","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Commissioning, at workshop Travel","",INPUT "vecka",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Commissioning, at workshop Travel","",INPUT "km/w",INPUT 0,INPUT "Travel").                 
            RUN kalkylopposter_UI (INPUT "Commissioning, at workshop Daily allow. 1-5/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Commissioning, at workshop Daily allow. 1-7/v","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Commissioning, at workshop Food allow","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Commissioning, at workshop Other","",INPUT "vecka",INPUT 0,INPUT "Travel").                     
            RUN kalkylopposter_UI (INPUT "Commissioning, at workshop km allow.","",INPUT "km",INPUT 0,INPUT "Travel").                     
         END.
        
      END.
      FOR EACH KALKYLARBKODER WHERE  KALKYLARBKODER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID NO-LOCK,
      EACH KALKYLLOPPOSTER WHERE KALKYLLOPPOSTER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND KALKYLLOPPOSTER.ARBKOD = KALKYLARBKODER.ARBKOD NO-LOCK:
         FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
         KALKYLPRISER.SOKBENAMNING = KALKYLARBKODER.BENAMNING NO-LOCK NO-ERROR.
         IF KALKYLLOPPOSTER.LOPNR = 1 THEN DO TRANSACTION:
            IF KALKYLLOPPOSTER.ARBKOD = "PL" THEN RUN katlopsub_UI (INPUT 0,INPUT 67.05).
            IF KALKYLLOPPOSTER.ARBKOD = "CM" THEN RUN katlopsub_UI (INPUT 0,INPUT 67.05).
            IF KALKYLLOPPOSTER.ARBKOD = "DE" THEN RUN katlopsub_UI (INPUT 0,INPUT 57.86).
            IF KALKYLLOPPOSTER.ARBKOD = "DR" THEN RUN katlopsub_UI (INPUT 0,INPUT 74.62).
            IF KALKYLLOPPOSTER.ARBKOD = "AS" THEN RUN katlopsub_UI (INPUT 0,INPUT 48.51).
            IF KALKYLLOPPOSTER.ARBKOD = "SU" THEN RUN katlopsub_UI (INPUT 0,INPUT 13.75).
            IF KALKYLLOPPOSTER.ARBKOD = "IS" THEN RUN katlopsub_UI (INPUT 0,INPUT 45.78).
            IF KALKYLLOPPOSTER.ARBKOD = "IW" THEN RUN katlopsub_UI (INPUT 0,INPUT 47.15).
            IF KALKYLLOPPOSTER.ARBKOD = "CS" THEN RUN katlopsub_UI (INPUT 0,INPUT 78.41).
            IF KALKYLLOPPOSTER.ARBKOD = "CW" THEN RUN katlopsub_UI (INPUT 0,INPUT 78.41).
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLPRISER.SOKBENAMNING = "ÖVRIGT" AND KALKVISNING.EABER = FALSE NO-LOCK NO-ERROR.
            IF KALKYLLOPPOSTER.ARBKOD = "PL" THEN RUN katlopsub_UI (INPUT 0,INPUT 8.75).
            IF KALKYLLOPPOSTER.ARBKOD = "CM" THEN RUN katlopsub_UI (INPUT 0,INPUT 10).
            IF KALKYLLOPPOSTER.ARBKOD = "DE" THEN RUN katlopsub_UI (INPUT 0,INPUT 1.25).
            IF KALKYLLOPPOSTER.ARBKOD = "DR" THEN RUN katlopsub_UI (INPUT 0,INPUT 5).
            IF KALKYLLOPPOSTER.ARBKOD = "AS" THEN RUN katlopsub_UI (INPUT 0,INPUT 0).
            IF KALKYLLOPPOSTER.ARBKOD = "SU" THEN RUN katlopsub_UI (INPUT 0,INPUT 13.75).
            IF KALKYLLOPPOSTER.ARBKOD = "IS" THEN RUN katlopsub_UI (INPUT 0,INPUT 9.25).
            IF KALKYLLOPPOSTER.ARBKOD = "IW" THEN RUN katlopsub_UI (INPUT 0,INPUT 0).
            IF KALKYLLOPPOSTER.ARBKOD = "CS" THEN RUN katlopsub_UI (INPUT 0,INPUT 18.13).
            IF KALKYLLOPPOSTER.ARBKOD = "CW" THEN RUN katlopsub_UI (INPUT 0,INPUT 4.38).
         END.
         IF KALKYLLOPPOSTER.LOPNR = 2 THEN DO TRANSACTION:
            IF KALKYLLOPPOSTER.ARBKOD = "PL" THEN RUN katlopsub_UI (INPUT 0,INPUT 0).
            IF KALKYLLOPPOSTER.ARBKOD = "CM" THEN RUN katlopsub_UI (INPUT 0,INPUT 0).
            IF KALKYLLOPPOSTER.ARBKOD = "DE" THEN RUN katlopsub_UI (INPUT 0,INPUT 0).
            IF KALKYLLOPPOSTER.ARBKOD = "DR" THEN RUN katlopsub_UI (INPUT 0,INPUT 0).
            IF KALKYLLOPPOSTER.ARBKOD = "AS" THEN RUN katlopsub_UI (INPUT 0,INPUT 0).
            IF KALKYLLOPPOSTER.ARBKOD = "SU" THEN RUN katlopsub_UI (INPUT 0,INPUT 150).
            IF KALKYLLOPPOSTER.ARBKOD = "IS" THEN RUN katlopsub_UI (INPUT 0,INPUT 75).
            IF KALKYLLOPPOSTER.ARBKOD = "IW" THEN RUN katlopsub_UI (INPUT 0,INPUT 0).
            IF KALKYLLOPPOSTER.ARBKOD = "CS" THEN RUN katlopsub_UI (INPUT 0,INPUT 400).
            IF KALKYLLOPPOSTER.ARBKOD = "CW" THEN RUN katlopsub_UI (INPUT 0,INPUT 100).
         END.
         IF KALKYLLOPPOSTER.LOPNR = 3 THEN DO TRANSACTION:
            IF KALKYLLOPPOSTER.ARBKOD = "PL" THEN RUN katlopsub_UI (INPUT 0,INPUT 200).
            IF KALKYLLOPPOSTER.ARBKOD = "CM" THEN RUN katlopsub_UI (INPUT 0,INPUT 200).
            IF KALKYLLOPPOSTER.ARBKOD = "DE" THEN RUN katlopsub_UI (INPUT 0,INPUT 30).
            IF KALKYLLOPPOSTER.ARBKOD = "DR" THEN RUN katlopsub_UI (INPUT 0,INPUT 200).
            IF KALKYLLOPPOSTER.ARBKOD = "AS" THEN RUN katlopsub_UI (INPUT 0,INPUT 0).
            IF KALKYLLOPPOSTER.ARBKOD = "SU" THEN RUN katlopsub_UI (INPUT 0,INPUT 0).
            IF KALKYLLOPPOSTER.ARBKOD = "IS" THEN RUN katlopsub_UI (INPUT 0,INPUT 0).
            IF KALKYLLOPPOSTER.ARBKOD = "IW" THEN RUN katlopsub_UI (INPUT 0,INPUT 0).
            IF KALKYLLOPPOSTER.ARBKOD = "CS" THEN RUN katlopsub_UI (INPUT 0,INPUT 0).
            IF KALKYLLOPPOSTER.ARBKOD = "CW" THEN RUN katlopsub_UI (INPUT 0,INPUT 0).
         END.
         IF KALKYLLOPPOSTER.LOPNR = 4 THEN DO TRANSACTION:
            IF KALKYLLOPPOSTER.ARBKOD = "PL" THEN RUN katlopsub_UI (INPUT 0,INPUT 300).
            IF KALKYLLOPPOSTER.ARBKOD = "CM" THEN RUN katlopsub_UI (INPUT 0,INPUT 400).
            IF KALKYLLOPPOSTER.ARBKOD = "DE" THEN RUN katlopsub_UI (INPUT 0,INPUT 40).
            IF KALKYLLOPPOSTER.ARBKOD = "DR" THEN RUN katlopsub_UI (INPUT 0,INPUT 0).
            IF KALKYLLOPPOSTER.ARBKOD = "AS" THEN RUN katlopsub_UI (INPUT 0,INPUT 0).
            IF KALKYLLOPPOSTER.ARBKOD = "SU" THEN RUN katlopsub_UI (INPUT 0,INPUT 450).
            IF KALKYLLOPPOSTER.ARBKOD = "IS" THEN RUN katlopsub_UI (INPUT 0,INPUT 100).
            IF KALKYLLOPPOSTER.ARBKOD = "IW" THEN RUN katlopsub_UI (INPUT 0,INPUT 0).
            IF KALKYLLOPPOSTER.ARBKOD = "CS" THEN RUN katlopsub_UI (INPUT 0,INPUT 300).
            IF KALKYLLOPPOSTER.ARBKOD = "CW" THEN RUN katlopsub_UI (INPUT 0,INPUT 150).
         END.
         IF KALKYLLOPPOSTER.LOPNR = 5 THEN DO TRANSACTION:
            IF KALKYLLOPPOSTER.ARBKOD = "PL" THEN RUN katlopsub_UI (INPUT 0,INPUT 35).
            IF KALKYLLOPPOSTER.ARBKOD = "CM" THEN RUN katlopsub_UI (INPUT 0,INPUT 35).
            IF KALKYLLOPPOSTER.ARBKOD = "DE" THEN RUN katlopsub_UI (INPUT 0,INPUT 35).
            IF KALKYLLOPPOSTER.ARBKOD = "DR" THEN RUN katlopsub_UI (INPUT 0,INPUT 35).
            IF KALKYLLOPPOSTER.ARBKOD = "AS" THEN RUN katlopsub_UI (INPUT 0,INPUT 35).
            IF KALKYLLOPPOSTER.ARBKOD = "SU" THEN RUN katlopsub_UI (INPUT 0,INPUT 35).
            IF KALKYLLOPPOSTER.ARBKOD = "IS" THEN RUN katlopsub_UI (INPUT 0,INPUT 35).
            IF KALKYLLOPPOSTER.ARBKOD = "IW" THEN RUN katlopsub_UI (INPUT 0,INPUT 35).
            IF KALKYLLOPPOSTER.ARBKOD = "CS" THEN RUN katlopsub_UI (INPUT 0,INPUT 35).
            IF KALKYLLOPPOSTER.ARBKOD = "CW" THEN RUN katlopsub_UI (INPUT 0,INPUT 35).
         END.
         IF KALKYLLOPPOSTER.LOPNR = 6 THEN DO TRANSACTION:
            IF KALKYLLOPPOSTER.ARBKOD = "PL" THEN RUN katlopsub_UI (INPUT 0,INPUT 49).
            IF KALKYLLOPPOSTER.ARBKOD = "CM" THEN RUN katlopsub_UI (INPUT 0,INPUT 49).
            IF KALKYLLOPPOSTER.ARBKOD = "DE" THEN RUN katlopsub_UI (INPUT 0,INPUT 49).
            IF KALKYLLOPPOSTER.ARBKOD = "DR" THEN RUN katlopsub_UI (INPUT 0,INPUT 49).
            IF KALKYLLOPPOSTER.ARBKOD = "AS" THEN RUN katlopsub_UI (INPUT 0,INPUT 49).
            IF KALKYLLOPPOSTER.ARBKOD = "SU" THEN RUN katlopsub_UI (INPUT 0,INPUT 49).
            IF KALKYLLOPPOSTER.ARBKOD = "IS" THEN RUN katlopsub_UI (INPUT 0,INPUT 49).
            IF KALKYLLOPPOSTER.ARBKOD = "IW" THEN RUN katlopsub_UI (INPUT 0,INPUT 49).
            IF KALKYLLOPPOSTER.ARBKOD = "CS" THEN RUN katlopsub_UI (INPUT 0,INPUT 49).
            IF KALKYLLOPPOSTER.ARBKOD = "CW" THEN RUN katlopsub_UI (INPUT 0,INPUT 49).
         END.
         IF KALKYLLOPPOSTER.LOPNR = 7 THEN DO TRANSACTION:
            IF KALKYLLOPPOSTER.ARBKOD = "PL" THEN RUN katlopsub_UI (INPUT 0,INPUT 8).
            IF KALKYLLOPPOSTER.ARBKOD = "CM" THEN RUN katlopsub_UI (INPUT 0,INPUT 8).
            IF KALKYLLOPPOSTER.ARBKOD = "DE" THEN RUN katlopsub_UI (INPUT 0,INPUT 8).
            IF KALKYLLOPPOSTER.ARBKOD = "DR" THEN RUN katlopsub_UI (INPUT 0,INPUT 8).
            IF KALKYLLOPPOSTER.ARBKOD = "AS" THEN RUN katlopsub_UI (INPUT 0,INPUT 8).
            IF KALKYLLOPPOSTER.ARBKOD = "SU" THEN RUN katlopsub_UI (INPUT 0,INPUT 8).
            IF KALKYLLOPPOSTER.ARBKOD = "IS" THEN RUN katlopsub_UI (INPUT 0,INPUT 8).
            IF KALKYLLOPPOSTER.ARBKOD = "IW" THEN RUN katlopsub_UI (INPUT 0,INPUT 8).
            IF KALKYLLOPPOSTER.ARBKOD = "CS" THEN RUN katlopsub_UI (INPUT 0,INPUT 8).
            IF KALKYLLOPPOSTER.ARBKOD = "CW" THEN RUN katlopsub_UI (INPUT 0,INPUT 8).
         END.
         IF KALKYLLOPPOSTER.LOPNR = 8 THEN DO TRANSACTION:
            IF KALKYLLOPPOSTER.ARBKOD = "PL" THEN RUN katlopsub_UI (INPUT 0,INPUT 6.5).
            IF KALKYLLOPPOSTER.ARBKOD = "CM" THEN RUN katlopsub_UI (INPUT 0,INPUT 6.5).
            IF KALKYLLOPPOSTER.ARBKOD = "DE" THEN RUN katlopsub_UI (INPUT 0,INPUT 6.5).
            IF KALKYLLOPPOSTER.ARBKOD = "DR" THEN RUN katlopsub_UI (INPUT 0,INPUT 6.5).
            IF KALKYLLOPPOSTER.ARBKOD = "AS" THEN RUN katlopsub_UI (INPUT 0,INPUT 6.5).
            IF KALKYLLOPPOSTER.ARBKOD = "SU" THEN RUN katlopsub_UI (INPUT 0,INPUT 6.5).
            IF KALKYLLOPPOSTER.ARBKOD = "IS" THEN RUN katlopsub_UI (INPUT 0,INPUT 6.5).
            IF KALKYLLOPPOSTER.ARBKOD = "IW" THEN RUN katlopsub_UI (INPUT 0,INPUT 6.5).
            IF KALKYLLOPPOSTER.ARBKOD = "CS" THEN RUN katlopsub_UI (INPUT 0,INPUT 6.5).
            IF KALKYLLOPPOSTER.ARBKOD = "CW" THEN RUN katlopsub_UI (INPUT 0,INPUT 6.5).
         END.
         IF KALKYLLOPPOSTER.LOPNR = 9 THEN DO TRANSACTION:
            IF KALKYLLOPPOSTER.ARBKOD = "PL" THEN RUN katlopsub_UI (INPUT 0,INPUT 0.5).
            IF KALKYLLOPPOSTER.ARBKOD = "CM" THEN RUN katlopsub_UI (INPUT 0,INPUT 0.5).
            IF KALKYLLOPPOSTER.ARBKOD = "DE" THEN RUN katlopsub_UI (INPUT 0,INPUT 0.5).
            IF KALKYLLOPPOSTER.ARBKOD = "DR" THEN RUN katlopsub_UI (INPUT 0,INPUT 0.5).
            IF KALKYLLOPPOSTER.ARBKOD = "AS" THEN RUN katlopsub_UI (INPUT 0,INPUT 0.5).
            IF KALKYLLOPPOSTER.ARBKOD = "SU" THEN RUN katlopsub_UI (INPUT 0,INPUT 0.5).
            IF KALKYLLOPPOSTER.ARBKOD = "IS" THEN RUN katlopsub_UI (INPUT 0,INPUT 0.5).
            IF KALKYLLOPPOSTER.ARBKOD = "IW" THEN RUN katlopsub_UI (INPUT 0,INPUT 0.5).
            IF KALKYLLOPPOSTER.ARBKOD = "CS" THEN RUN katlopsub_UI (INPUT 0,INPUT 0.5).
            IF KALKYLLOPPOSTER.ARBKOD = "CW" THEN RUN katlopsub_UI (INPUT 0,INPUT 0.5).
         END.
      END.           
   END. 
END PROCEDURE.
/* KONVERTERING-KATALOGER   ---------------------------------------------------*/
/*KONVERTERA BLOBBAR*/
PROCEDURE blobkonv_UI :
   DEFINE VARIABLE blobproch AS HANDLE NO-UNDO.
   DEFINE VARIABLE resid AS INTEGER NO-UNDO.
   DEFINE VARIABLE infillong AS MEMPTR NO-UNDO.
   DEFINE VARIABLE exelkommando AS CHARACTER NO-UNDO.
   FIND FIRST BBLOBDATA WHERE NO-LOCK NO-ERROR.
   IF AVAILABLE BBLOBDATA THEN RETURN.
   RUN DYNBLOB.P PERSISTENT SET blobproch.
   FOR EACH BLOBINFO WHERE NO-LOCK:
      CREATE intt.
      intt.ID = BLOBINFO.ID.
      intt.FILNAMN = BLOBINFO.FILNAMN.
   END.
   FOR EACH intt WHERE NO-LOCK:
      RUN blobfil_UI IN blobproch (INPUT intt.FILNAMN, OUTPUT resid).
      FIND FIRST blobinfotemp WHERE blobinfotemp.ID = resid NO-LOCK NO-ERROR.      
      RUN blobopen_UI IN blobproch (INPUT blobinfotemp.FILNAMN, OUTPUT exelkommando).
      COPY-LOB FROM  FILE exelkommando TO infillong.
      CREATE BBLOBDATA.
      ASSIGN
      BBLOBDATA.BLOBID = resid
      BBLOBDATA.DATA = infillong. 
      OS-DELETE VALUE(exelkommando). 
   END.
   RUN deleteproc_UI IN blobproch.
   IF VALID-HANDLE(blobproch) THEN DELETE PROCEDURE blobproch NO-ERROR.   
END PROCEDURE.

    
      
/*KONVERTERA KALKYLEN ------------------------------------------------*/
 
PROCEDURE startkalkkonv_UI :
  /*
   For each KALKHUV WHERE KALKHUV.TYPKALK = 6 :
      for each  KALKFAKTORER WHERE KALKFAKTORER.KALKNR = KALKHUV.KALKNR:
         delete  KALKFAKTORER .
      end.

      for each  KALKEGNAPRISER WHERE KALKEGNAPRISER.KALKNR = KALKHUV.KALKNR:
         delete KALKEGNAPRISER  .
      end.

      for each  KALKNUM WHERE KALKNUM.KALKNR = KALKHUV.KALKNR:
         delete  KALKNUM .
      end.

      for each  KALKNUMSUB WHERE KALKNUMSUB.KALKNR = KALKHUV.KALKNR:
         delete  KALKNUMSUB .
      end.
      for each  KALKMTRL WHERE KALKMTRL.KALKNR = KALKHUV.KALKNR:
         delete  KALKMTRL .
      end.
            delete KALKHUV.
   END.   
   */
   /*
   for each KALKHUV  :
      delete  KALKHUV .
   end.
   for each  KALKFAKTORER :
      delete  KALKFAKTORER .
   end.

   for each  KALKEGNAPRISER :
      delete KALKEGNAPRISER  .
   end.

   for each  KALKNUM :
      delete  KALKNUM .
   end.

   for each  KALKNUMSUB :
      delete  KALKNUMSUB .
   end.
   for each  KALKMTRL :
      delete  KALKMTRL .
   end.
   */
   DEFINE VARIABLE minskaartal AS INTEGER NO-UNDO.
   FIND FIRST KALKYLKATALOG NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKYLKATALOG THEN DO:
      RETURN.
   END.
   FIND FIRST KALKHUV WHERE NO-LOCK NO-ERROR.
   IF AVAILABLE KALKHUV THEN DO:
      RETURN.
   END.    
   FOR EACH FASTSPEC  USE-INDEX KALK /*FASTSPEC.KALKNR = 100116 AND FASTSPEC.OMRADE = "0910"'*/ NO-LOCK:
      nrvar = nrvar + 1.
      OUTPUT TO VALUE(filut) APPEND.
      PUT "NU STARTAR KALKYL " FASTSPEC.KALKNR  " "   nrvar SKIP.
      OUTPUT CLOSE.
      EMPTY TEMP-TABLE kalkkostnad NO-ERROR.
      EMPTY TEMP-TABLE kalkantal NO-ERROR.  
      
      /*OBS! globforetag = "GRAN" OCH ÅRTAL*/
      IF globforetag = "GRAN" THEN minskaartal = 2.
      ELSE minskaartal = 1.   
      FIND FIRST KALKYLKATALOG WHERE KALKYLKATALOG.VISARTAL = FASTSPEC.KATAR - minskaartal NO-LOCK NO-ERROR. 
      IF NOT AVAILABLE KALKYLKATALOG THEN DO:
         OUTPUT TO VALUE(filut) APPEND.
         PUT FASTSPEC.KALKNR FASTSPEC.KATAR "SAKNAR KATALOG" SKIP.
         OUTPUT CLOSE.
         NEXT.
      END.
      RUN createkalk_UI (INPUT FASTSPEC.KALKNR,INPUT KALKYLKATALOG.KLOGID,INPUT FASTSPEC.TYP,
                         INPUT FASTSPEC.EGETMTRL,INPUT FASTSPEC.EGETPRIS,INPUT FASTSPEC.FAKTOR).
               
   END. 
END PROCEDURE.  

PROCEDURE createkalk_UI :
   DEFINE INPUT  PARAMETER kynr AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER katnr AS INTEGER NO-UNDO.
  /*
   DEFINE INPUT  PARAMETER omr AS CHARACTER NO-UNDO.
   */
   DEFINE INPUT  PARAMETER tnr AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER emvar AS LOGICAL NO-UNDO.
   DEFINE INPUT  PARAMETER epvar AS LOGICAL NO-UNDO.
   DEFINE INPUT  PARAMETER favar AS LOGICAL NO-UNDO.
   DO TRANSACTION:
      CREATE KALKHUV.   
      BUFFER-COPY FASTSPEC TO KALKHUV.
      ASSIGN 
       
      KALKHUV.KALKNR = kynr
      /*
      KALKNUM.OMRADE = omr
      */
      KALKHUV.KLOGID = katnr
      KALKHUV.TYPKALK = tnr 
      /*
      KALKHUV.EGETMTRL = emvar 
      KALKHUV.EGNAPRISER = epvar
      KALKHUV.FAKTORER = favar
      */ 
      KALKHUV.ANMARKNING = FASTSPEC.STARTDAG.
      FIND FIRST KALKUPP WHERE KALKUPP.KALKNR = KALKHUV.KALKNR NO-LOCK NO-ERROR.
      IF AVAILABLE KALKUPP THEN DO:
         KALKHUV.UTYP = KALKUPP.TYP.
      END.   
      ELSE KALKHUV.UTYP = 1.
   END.
   DEFINE VARIABLE imtrl AS INTEGER NO-UNDO.
   imtrl = 0.
   FOR EACH MTRL WHERE MTRL.KALKNR = FASTSPEC.KALKNR AND /*MTRL.OMRADE = FASTSPEC.OMRADE AND*/
   MTRL.OFFERT = FALSE AND MTRL.KUND = FALSE 
   NO-LOCK:
      IF FASTSPEC.KALKNR > 0 THEN DO: 
         imtrl = imtrl + 1.
         CREATE KALKMTRL.
         ASSIGN
         KALKMTRL.MID = imtrl
         KALKMTRL.MATRIS   = 1
         KALKMTRL.OMRADE    = FASTSPEC.OMRADE
         KALKMTRL.KALKNR    = MTRL.KALKNR
         KALKMTRL.ENR       = MTRL.ENR   
         KALKMTRL.BENAMNING = MTRL.Benamning
         KALKMTRL.KUND      = MTRL.KUND
         KALKMTRL.ENHET     = MTRL.ENHET
         KALKMTRL.NPRIS     = MTRL.NPRIS
         KALKMTRL.BPRIS     = MTRL.BPRIS
         KALKMTRL.KPRIS     = MTRL.KPRIS
         KALKMTRL.LEVKOD    = MTRL.LEVKOD 
         KALKMTRL.BERLEV    = MTRL.BERLEV         
         KALKMTRL.BERKVANT  = MTRL.BERKVANT.
      END.   
   END.
         
   FOR EACH FAKTOR WHERE FAKTOR.KALKNR = FASTSPEC.KALKNR AND FAKTOR.OMRADE = FASTSPEC.OMRADE NO-LOCK:
      FOR EACH KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOG.HKLOGSUBID AND KALKYLPRISER.EGENKODUPP = TRUE NO-LOCK:
         CREATE KALKFAKTORER.  
         ASSIGN
         KALKFAKTORER.KLOGSUBID = KALKYLPRISER.KLOGSUBID
         KALKFAKTORER.BENAMNING = KALKYLPRISER.BENAMNING
         KALKFAKTORER.KALKNR = KALKHUV.KALKNR
         KALKFAKTORER.OMRADE = KALKHUV.OMRADE
         KALKFAKTORER.KPID = KALKYLPRISER.KPID.
         IF FAKTOR.FAKTOT = 1 THEN DO:
            IF KALKYLPRISER.SOKBENAMNING = "BEREDARE" THEN KALKFAKTORER.FAKTOR = FAKTOR.FAK1.
            ELSE IF KALKYLPRISER.SOKBENAMNING = "MONTÖR" THEN KALKFAKTORER.FAKTOR = FAKTOR.FAK2.
            ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN1" THEN KALKFAKTORER.FAKTOR = FAKTOR.FAK3.
            ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN2" THEN KALKFAKTORER.FAKTOR = FAKTOR.FAK4.
            ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN3" THEN KALKFAKTORER.FAKTOR = FAKTOR.FAK7.
            ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN4" THEN KALKFAKTORER.FAKTOR = FAKTOR.FAK5.
            ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN5" THEN KALKFAKTORER.FAKTOR = FAKTOR.FAK6.
            ELSE IF KALKYLPRISER.SOKBENAMNING = "MATERIEL" THEN KALKFAKTORER.FAKTOR = FAKTOR.FAKMTRL.
            ELSE IF KALKYLPRISER.SOKBENAMNING = "ÖVRIGKOSTNAD" THEN KALKFAKTORER.FAKTOR = FAKTOR.FAKOVRIGT.
            ELSE IF KALKYLPRISER.SOKBENAMNING = "ÖVRIGKOSTNADEA" THEN KALKFAKTORER.FAKTOR = FAKTOR.FAKUTRUST.
            ELSE IF KALKYLPRISER.SOKBENAMNING = "ENTREP" THEN KALKFAKTORER.FAKTOR = FAKTOR.FAKENT.
            ELSE IF KALKYLPRISER.SOKBENAMNING = "UTRUSTNING" THEN KALKFAKTORER.FAKTOR =  FAKTOR.FAKUTRUST.
            /*FAKTOR.FAKMASKINKOST FAKTOR.FAKUTRUSTKOST ????*/
         END.
         ELSE DO:
            KALKFAKTORER.FAKTOR = FAKTOR.FAKTOT.
         END.      
      END.   
   END.
   
   FOR EACH KALKBEF WHERE KALKBEF.KALKNR = FASTSPEC.KALKNR AND KALKBEF.OMRADE = FASTSPEC.OMRADE AND KALKBEF.ARBKOD = "" NO-LOCK:    
      FOR EACH KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOG.HKLOGSUBID AND KALKYLPRISER.EGENPRISUPP = TRUE NO-LOCK:
         CREATE KALKEGNAPRISER.  
         BUFFER-COPY KALKYLPRISER TO KALKEGNAPRISER. 
         ASSIGN
         KALKEGNAPRISER.KLOGSUBID = KALKYLPRISER.KLOGSUBID
         KALKEGNAPRISER.KALKNR = KALKHUV.KALKNR
         KALKEGNAPRISER.OMRADE = KALKHUV.OMRADE.       
         IF KALKYLPRISER.SOKBENAMNING = "BEREDARE" THEN KALKEGNAPRISER.PRIS = KALKBEF.PRIS1.
         ELSE IF KALKYLPRISER.SOKBENAMNING = "MONTÖR" THEN KALKEGNAPRISER.PRIS = KALKBEF.PRIS2.
         ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN1" THEN KALKEGNAPRISER.PRIS = KALKBEF.PRIS3.
         ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN2" THEN KALKEGNAPRISER.PRIS = KALKBEF.PRIS4.
         ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN3" THEN KALKEGNAPRISER.PRIS = KALKBEF.PRIS7.
         ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN4" THEN KALKEGNAPRISER.PRIS = KALKBEF.PRIS5.
         ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN5" THEN KALKEGNAPRISER.PRIS = KALKBEF.PRIS6.           
         /*UTRUSTNING FAKTOR.FAKMASKINKOST FAKTOR.FAKUTRUSTKOST ????*/           
      END.   
   END.
   FOR EACH FASTKALK WHERE FASTKALK.KALKNR = FASTSPEC.KALKNR AND FASTKALK.OMRADE = FASTSPEC.OMRADE NO-LOCK: 
      EMPTY TEMP-TABLE kalknumsubtt NO-ERROR.   
      CREATE KALKNUM.
      BUFFER-COPY FASTKALK TO KALKNUM.
      KALKNUM.BENAMNING = "".
      ASSIGN
      KALKNUM.BENAMNING = SUBSTRING(FASTKALK.BENAMNING,1,40)
      KALKNUM.ANMARK = SUBSTRING(FASTKALK.BENAMNING,50)           
      KALKNUM.KALKNR = KALKHUV.KALKNR
      KALKNUM.OMRADE = KALKHUV.OMRADE
      KALKNUM.MATRIS = FASTKALK.F10   
      KALKNUM.TYPKALK = FASTKALK.TYP.
      IF KALKNUM.MATRIS = 0 THEN KALKNUM.MATRIS = 1.
      IF KALKNUM.TYPKALK = 1 THEN DO:
         FIND FIRST LOP1 WHERE LOP1.KATAR = FASTSPEC.KATAR AND LOP1.ARBKOD = KALKNUM.ARBKOD AND LOP1.LOPNR = KALKNUM.LOPNR NO-LOCK NO-ERROR.
         IF AVAILABLE LOP1 THEN DO:
            KALKNUM.KOMMENTAR = SUBSTRING(LOP1.BENAMNING,60). 
         END.             
      END.
      ELSE IF KALKNUM.TYPKALK = 2 THEN DO:
         FIND FIRST LOP2 WHERE LOP2.KATAR = FASTSPEC.KATAR AND LOP2.ARBKOD = KALKNUM.ARBKOD AND LOP2.LOPNR = KALKNUM.LOPNR NO-LOCK NO-ERROR.
         IF AVAILABLE LOP2 THEN DO:
            KALKNUM.KOMMENTAR = SUBSTRING(LOP2.BENAMNING,60). 
           
         END.             
      END.   
      ELSE IF KALKNUM.TYPKALK = 3 THEN DO:
         FIND FIRST LOP3 WHERE LOP3.KATAR = FASTSPEC.KATAR AND LOP3.ARBKOD = KALKNUM.ARBKOD AND LOP3.LOPNR = KALKNUM.LOPNR NO-LOCK NO-ERROR.
         IF AVAILABLE LOP3 THEN DO:
            KALKNUM.KOMMENTAR = SUBSTRING(LOP3.BENAMNING,60). 
         END.             
      END.
      ELSE IF KALKNUM.TYPKALK = 5 THEN DO:
         FIND FIRST LOP5 WHERE LOP5.KATAR = FASTSPEC.KATAR AND LOP5.ARBKOD = KALKNUM.ARBKOD AND LOP5.LOPNR = KALKNUM.LOPNR NO-LOCK NO-ERROR.
         IF AVAILABLE LOP5 THEN DO:
            KALKNUM.KOMMENTAR = SUBSTRING(LOP5.BENAMNING,60). 
         END.             
      END.
      KALKNUM.KOMMENTAR = REPLACE(KALKNUM.KOMMENTAR,CHR(13),CHR(10)).
      RUN sistanum_UI (OUTPUT KALKNUM.NUM).
      RUN kontrollkod_UI.
      IF FASTKALK.ARBKOD = "EGEN" THEN DO:           
         FIND FIRST KALKBEF WHERE KALKBEF.KALKNR = FASTSPEC.KALKNR AND KALKBEF.OMRADE = FASTSPEC.OMRADE AND KALKBEF.ARBKOD = "EGEN" AND 
         KALKBEF.LOPNR = FASTKALK.LOPNR NO-LOCK NO-ERROR.
         IF AVAILABLE KALKBEF THEN DO:    
            FOR EACH KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOG.HKLOGSUBID AND KALKYLPRISER.EGENKODUPP = TRUE NO-LOCK:
               CREATE KALKNUMSUB.               
               BUFFER-COPY KALKYLPRISER TO KALKNUMSUB.
               ASSIGN 
               KALKNUMSUB.KALKNR = KALKNUM.KALKNR
               KALKNUMSUB.OMRADE = KALKHUV.OMRADE
               KALKNUMSUB.NUM = KALKNUM.NUM.
               RUN sistanumsubid_UI (OUTPUT KALKNUMSUB.NUMSUBID).
               IF KALKYLPRISER.SOKBENAMNING = "BEREDARE" THEN DO:
                  ASSIGN
                  KALKNUMSUB.TIMMAR = FASTKALK.F1
                  KALKNUMSUB.PRIS = KALKBEF.PRIS1.
               END.   
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MONTÖR" THEN DO:
                  ASSIGN
                  KALKNUMSUB.TIMMAR = FASTKALK.F2
                  KALKNUMSUB.PRIS = KALKBEF.PRIS2.
               END.   
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN1" THEN DO:
                  ASSIGN
                  KALKNUMSUB.TIMMAR = FASTKALK.F3
                  KALKNUMSUB.PRIS = KALKBEF.PRIS3.
               END.   
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN2" THEN DO:
                  ASSIGN
                  KALKNUMSUB.TIMMAR = FASTKALK.F4
                  KALKNUMSUB.PRIS = KALKBEF.PRIS4.
               END.    
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN3" THEN DO:
                  ASSIGN
                  KALKNUMSUB.TIMMAR = FASTKALK.F7
                  KALKNUMSUB.PRIS = KALKBEF.PRIS7.
               END.   
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN4" THEN DO:
                  ASSIGN
                  KALKNUMSUB.TIMMAR = FASTKALK.F5
                  KALKNUMSUB.PRIS = KALKBEF.PRIS5.
               END.   
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN5" THEN DO:
                  ASSIGN
                  KALKNUMSUB.TIMMAR = FASTKALK.F6
                  KALKNUMSUB.PRIS = KALKBEF.PRIS6.
               END.   
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MATERIEL" THEN DO: 
                  ASSIGN
                  KALKNUMSUB.KOSTNAD  = FASTKALK.MATERIEL.                  
               END.   
               ELSE IF KALKYLPRISER.SOKBENAMNING = "ÖVRIGKOSTNAD" THEN DO:
                  ASSIGN
                  KALKNUMSUB.KOSTNAD = FASTKALK.OVRIGT.             
               END. 
               ELSE IF KALKYLPRISER.SOKBENAMNING = "ENTREP" THEN DO:
                  ASSIGN
                  KALKNUMSUB.KOSTNAD = FASTKALK.ENTRP.               
               END. 
               ELSE IF KALKYLPRISER.SOKBENAMNING = "UTRUSTNING" THEN DO:
                   ASSIGN
                   KALKNUMSUB.KOSTNAD = FASTKALK.UTRUSTKOST.   
                   /*FASTKALK.UTRUST ???*/            
               END.
               IF KALKNUMSUB.KOSTNAD = 0 AND KALKNUMSUB.TIMMAR = 0 AND KALKNUMSUB.PRIS = 0 THEN DO:
                  DELETE KALKNUMSUB.
               END.   
               ELSE DO:
                  ASSIGN 
                  KALKNUMSUB.FRIBENAMNING = KALKNUMSUB.BENAMNING         
                  KALKNUMSUB.FRIKOSTNAD   = KALKNUMSUB.KOSTNAD
                  KALKNUMSUB.FRIPRIS      = KALKNUMSUB.PRIS
                  KALKNUMSUB.FRITIMMAR    = KALKNUMSUB.TIMMAR.
                  CREATE kalknumsubtt.  
                  BUFFER-COPY KALKNUMSUB TO kalknumsubtt. 
               END.  
            END.                  
         END.
      END.
      ELSE DO:   
         FOR EACH KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKHUV.KLOGID NO-LOCK:
            FIND FIRST KALKYLLOPPOSTER WHERE KALKYLLOPPOSTER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
            KALKYLLOPPOSTER.ARBKOD = KALKNUM.ARBKOD AND KALKYLLOPPOSTER.LOPNR = KALKNUM.LOPNR NO-LOCK NO-ERROR.
            IF AVAILABLE KALKYLLOPPOSTER THEN DO:
               kpostid = ROWID(KALKYLLOPPOSTER) .
            END.   
         END.
         /*KALKYLARBKODER.KLOGSUBID = FÅS AVAILABLE DEN VALDA KODEN*/ 
         FIND FIRST KALKYLLOPPOSTER WHERE ROWID(KALKYLLOPPOSTER) = kpostid NO-LOCK NO-ERROR.
         IF NOT AVAILABLE KALKYLLOPPOSTER THEN DO:
            OUTPUT TO VALUE(filut) APPEND.
            PUT KALKHUV.KLOGID KALKNUM.ARBKOD KALKNUM.LOPNR "SAKNAR KALKYLLOPPOSTER" SKIP.
            OUTPUT CLOSE.
            QUIT.
         END.
         BUFFER-COPY KALKYLLOPPOSTER TO KALKNUM.
         FOR EACH KALKYLLOPSUB WHERE KALKYLLOPSUB.KLOGSUBID = KALKYLLOPPOSTER.KLOGSUBID AND 
         KALKYLLOPSUB.ARBKOD = KALKNUM.ARBKOD AND KALKYLLOPSUB.LOPNR = KALKNUM.LOPNR NO-LOCK: 
            CREATE KALKNUMSUB.            
            BUFFER-COPY KALKYLLOPSUB TO KALKNUMSUB.   
            ASSIGN 
            KALKNUMSUB.KALKNR = KALKNUM.KALKNR
            KALKNUMSUB.OMRADE = KALKHUV.OMRADE
            KALKNUMSUB.NUM = KALKNUM.NUM.
            RUN sistanumsubid_UI (OUTPUT KALKNUMSUB.NUMSUBID).
            FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLLOPSUB.KLOGSUBID AND KALKYLPRISER.KPID = KALKNUMSUB.KPID NO-LOCK NO-ERROR.
            BUFFER-COPY KALKYLPRISER TO KALKNUMSUB.
            ASSIGN 
            KALKNUMSUB.FRIKOSTNAD   = KALKNUMSUB.KOSTNAD
            KALKNUMSUB.FRIBENAMNING = KALKNUMSUB.BENAMNING         
            KALKNUMSUB.FRIPRIS      = KALKNUMSUB.PRIS
            KALKNUMSUB.FRITIMMAR    = KALKNUMSUB.TIMMAR. 
            CREATE kalknumsubtt.  
            BUFFER-COPY KALKNUMSUB TO kalknumsubtt.   
         END.
      END. 
      EMPTY TEMP-TABLE kalknumtt NO-ERROR.
      CREATE kalknumtt.
      BUFFER-COPY KALKNUM TO kalknumtt.
      kalknumtt.TTRECID = RECID(kalknumtt).          
      RUN raknaenkod_UI (INPUT FALSE).
      FOR EACH kalknumsubtt:
         FIND FIRST KALKNUMSUB WHERE KALKNUMSUB.KALKNR = kalknumsubtt.KALKNR AND
         KALKNUMSUB.OMRADE = kalknumsubtt.OMRADE AND
         KALKNUMSUB.NUM = kalknumsubtt.NUM AND
         KALKNUMSUB.KPID = kalknumsubtt.KPID 
         EXCLUSIVE-LOCK NO-ERROR.
         BUFFER-COPY kalknumsubtt TO KALKNUMSUB.
      END.
      BUFFER-COPY kalknumtt TO KALKNUM.
      EMPTY TEMP-TABLE kalknumtt NO-ERROR. 
      EMPTY TEMP-TABLE kalknumsubtt NO-ERROR.                    
   END.
           
END PROCEDURE. 
 
/* rätt subnummer*/
/*hittar första lediga nummer*/
PROCEDURE sistanum_UI :
   DEFINE OUTPUT PARAMETER hjraknare AS INTEGER NO-UNDO.

   FIND LAST KALKNUMbuff WHERE KALKNUMbuff.KALKNR = KALKHUV.KALKNR AND KALKNUMbuff.OMRADE = KALKHUV.OMRADE USE-INDEX NUM NO-LOCK NO-ERROR.
   IF AVAILABLE KALKNUMbuff THEN 
   DO:
      hjraknare = KALKNUMbuff.NUM + 1.   
   END.  
   ELSE hjraknare = hjraknare + 1.
END PROCEDURE. 
PROCEDURE sistanumsubid_UI :
   DEFINE OUTPUT PARAMETER hjraknare AS INTEGER NO-UNDO.
   FIND LAST KALKNUMSUBbuff WHERE KALKNUMSUBbuff.KALKNR = KALKNUM.KALKNR AND 
   KALKNUMSUBbuff.OMRADE = KALKNUM.OMRADE AND KALKNUMSUBbuff.NUM = KALKNUM.NUM 
   USE-INDEX NUM NO-LOCK NO-ERROR.
   IF AVAILABLE KALKNUMSUBbuff THEN DO:
      hjraknare = KALKNUMSUBbuff.NUMSUBID + 1.   
   END.  
   ELSE hjraknare = hjraknare + 1.
END PROCEDURE. 

PROCEDURE kontrollkod_UI :
   IF KALKNUM.ARBKOD = "EGEN" THEN DO:
      FIND FIRST KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGSUBID = KALKYLKATALOG.HKLOGSUBID NO-LOCK NO-ERROR.
      IF AVAILABLE KALKYLKATALOGSUB THEN DO:
         KALKNUM.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID.
      END.
   END.
   ELSE DO:   
      FOR EACH KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKHUV.KLOGID NO-LOCK,
      EACH KALKYLLOPPOSTER WHERE KALKYLLOPPOSTER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND KALKYLLOPPOSTER.ARBKOD = KALKNUM.ARBKOD AND 
      KALKYLLOPPOSTER.LOPNR = KALKNUM.LOPNR NO-LOCK:
         KALKNUM.KLOGSUBID = KALKYLLOPPOSTER.KLOGSUBID.
         /*ska bara finnas en post*/ 
      END.   
      
   END.
END PROCEDURE.


PROCEDURE hmtafri_UI :
   DEFINE VARIABLE antalvar AS DECIMAL NO-UNDO.
   DEFINE VARIABLE kalkfil AS CHARACTER NO-UNDO.
   DEFINE VARIABLE minskaartal AS INTEGER NO-UNDO.
   For each KALKHUV WHERE KALKHUV.TYPKALK = 6 :

      for each  KALKFAKTORER WHERE KALKFAKTORER.KALKNR = KALKHUV.KALKNR:
         delete  KALKFAKTORER .
      end.

      for each  KALKEGNAPRISER WHERE KALKEGNAPRISER.KALKNR = KALKHUV.KALKNR:
         delete KALKEGNAPRISER  .
      end.

      for each  KALKNUM WHERE KALKNUM.KALKNR = KALKHUV.KALKNR:
         delete  KALKNUM .
      end.

      for each  KALKNUMSUB WHERE KALKNUMSUB.KALKNR = KALKHUV.KALKNR:
         delete  KALKNUMSUB .
      end.
      for each  KALKMTRL WHERE KALKMTRL.KALKNR = KALKHUV.KALKNR:
         delete  KALKMTRL .
      end.
      delete KALKHUV.
   END.   
   MESSAGE "delete klart"
   VIEW-AS ALERT-BOX.
   FIND FIRST KALKYLKATALOG NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKYLKATALOG THEN DO:
      RETURN.
   END.
   FIND FIRST KALKHUV WHERE KALKHUV.TYPKALK = 6 NO-LOCK NO-ERROR.
   IF AVAILABLE KALKHUV THEN RETURN. 
   FOR EACH EXTRADATA WHERE EXTRADATA.PROGRAM = "FRIKALK2" /*AND EXTRADATA.HUVUDINT = konvkalknr*/ NO-LOCK BY EXTRADATA.HUVUDINT:
      OUTPUT TO VALUE(filut) APPEND.
      PUT "NU STARTAR FRIKALKYL " EXTRADATA.HUVUDINT SKIP.
      OUTPUT CLOSE.
      EMPTY TEMP-TABLE kalkkostnad NO-ERROR.
      EMPTY TEMP-TABLE kalkantal NO-ERROR.
      EMPTY TEMP-TABLE efastkalktemp NO-ERROR. 
      EMPTY TEMP-TABLE tidutrubrik NO-ERROR. 
      /*OBS! globforetag = "GRAN" OCH ÅRTAL*/
      IF globforetag = "GRAN" THEN minskaartal = 2.
      ELSE minskaartal = 1.   
      FIND LAST KALKYLKATALOG WHERE KALKYLKATALOG.BENAMNING BEGINS "EBR" USE-INDEX VISARTAL NO-LOCK NO-ERROR.           
      FIND LAST KALKBEF WHERE KALKBEF.KALKNR = 0 NO-LOCK NO-ERROR.
      kalkfil = SESSION:TEMP-DIR + STRING(EXTRADATA.HUVUDINT) + ".txt".
      OUTPUT TO VALUE(kalkfil).
      FOR EACH KALKYL WHERE KALKYL.RECKALKYL = EXTRADATA.HUVUDINT AND KALKYL.TYP = "".
         PUT UNFORMATTED KALKYL.BEFATTNING KALKYL.OMRADE SKIP.
      END.
      OUTPUT CLOSE.
      INPUT FROM VALUE(kalkfil) NO-ECHO.
      REPEAT:
         CREATE efastkalktemp.
         ASSIGN.
         IMPORT DELIMITER "£" efastkalktemp NO-ERROR.                  
      END.
      INPUT CLOSE.
      FOR EACH efastkalktemp WHERE efastkalktemp.ARBKOD = "":
         DELETE efastkalktemp.
      END.
      OUTPUT TO VALUE(kalkfil).
      FOR EACH KALKYL WHERE KALKYL.RECKALKYL = EXTRADATA.HUVUDINT AND KALKYL.TYP NE "".
         PUT UNFORMATTED KALKYL.TYP SKIP.   
      END.
      OUTPUT CLOSE.
      INPUT FROM VALUE(kalkfil) NO-ECHO.
      REPEAT:
         CREATE tidutrubrik.
         ASSIGN.
         IMPORT DELIMITER "£" tidutrubrik   NO-ERROR.                  
      END.
      INPUT CLOSE.
      FOR EACH tidutrubrik WHERE tidutrubrik.ORDNING = 0:
         DELETE tidutrubrik.
      END.
      FIND FIRST KALKHUV  WHERE KALKHUV.KALKNR = EXTRADATA.HUVUDINT NO-LOCK NO-ERROR.
      IF AVAILABLE KALKHUV THEN DO:
         OUTPUT TO VALUE(filut) APPEND.
         PUT "fanns redan! " EXTRADATA.HUVUDINT SKIP.
         OUTPUT CLOSE.
         
      END.
      ELSE DO:
         FIND FIRST KALKSPEC WHERE KALKSPEC.KALKNR = EXTRADATA.HUVUDINT NO-LOCK NO-ERROR.
         DO TRANSACTION:
            CREATE KALKHUV.  
            ASSIGN
            KALKHUV.KALKNR = KALKSPEC.KALKNR                    
            KALKHUV.OMRADE = KALKSPEC.OMRADE                      
            KALKHUV.BENAMNING = KALKSPEC.KALKTEXT                   
            KALKHUV.KLOGID  = KALKYLKATALOG.KLOGID                    
            KALKHUV.TYPKALK  = 6                   
            /*
            KALKHUV.EGETMTRL  = FALSE                  
            KALKHUV.EGNAPRISER = FALSE                 
            KALKHUV.FAKTORER   = FALSE                 
            */
            KALKHUV.ANMARKNING  = KALKSPEC.STARTDAG                
            KALKHUV.BESTID = KALKSPEC.BESTID                      
            KALKHUV.KALKANV = KALKSPEC.KALKANV                    
            KALKHUV.ANVANDARE = KALKSPEC.ANVANDARE                  
            KALKHUV.AKTIV = KALKSPEC.AKTIV
            KALKHUV.UTYP  = 1.                            
         END.
         
         FIND FIRST efastkalktemp WHERE efastkalktemp.FAKTOR = TRUE NO-LOCK NO-ERROR.
         IF AVAILABLE efastkalktemp THEN DO:
            FOR EACH KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOG.HKLOGSUBID AND KALKYLPRISER.EGENKODUPP = TRUE NO-LOCK:
               CREATE KALKFAKTORER.  
               ASSIGN
               KALKFAKTORER.KLOGSUBID = KALKYLPRISER.KLOGSUBID
               KALKFAKTORER.BENAMNING = KALKYLPRISER.BENAMNING
               KALKFAKTORER.KALKNR = KALKHUV.KALKNR
               KALKFAKTORER.OMRADE = KALKHUV.OMRADE
               KALKFAKTORER.KPID = KALKYLPRISER.KPID.
               IF KALKYLPRISER.SOKBENAMNING = "BEREDARE" THEN KALKFAKTORER.FAKTOR = 1.
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MONTÖR" THEN KALKFAKTORER.FAKTOR = efastkalktemp.ARBFAKTOR.
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN1" THEN KALKFAKTORER.FAKTOR = efastkalktemp.MASKFAKTOR.
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN2" THEN KALKFAKTORER.FAKTOR = 1.
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN3" THEN KALKFAKTORER.FAKTOR = 1.
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN4" THEN KALKFAKTORER.FAKTOR = 1.
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN5" THEN KALKFAKTORER.FAKTOR = 1.
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MATERIEL" THEN KALKFAKTORER.FAKTOR = efastkalktemp.MTRLFAKTOR.
               ELSE IF KALKYLPRISER.SOKBENAMNING = "ÖVRIGKOSTNAD" THEN KALKFAKTORER.FAKTOR = efastkalktemp.OVRFAKTOR.
               ELSE IF KALKYLPRISER.SOKBENAMNING = "ÖVRIGKOSTNADEA" THEN KALKFAKTORER.FAKTOR = efastkalktemp.UTRFAKTOR.
               ELSE IF KALKYLPRISER.SOKBENAMNING = "UTRUSTNING" THEN KALKFAKTORER.FAKTOR =  efastkalktemp.UTRFAKTOR.              
            END.
         END.
         
         FIND LAST KALKBEF WHERE KALKBEF.KALKNR = 0 NO-LOCK NO-ERROR.
         IF AVAILABLE KALKBEF THEN DO:    
            FOR EACH KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOG.HKLOGSUBID AND KALKYLPRISER.EGENPRISUPP = TRUE NO-LOCK:
               CREATE KALKEGNAPRISER.  
               BUFFER-COPY KALKYLPRISER TO KALKEGNAPRISER. 
               ASSIGN
               KALKEGNAPRISER.KLOGSUBID = KALKYLPRISER.KLOGSUBID
               KALKEGNAPRISER.KALKNR = KALKHUV.KALKNR
               KALKEGNAPRISER.OMRADE = KALKHUV.OMRADE.       
               IF KALKYLPRISER.SOKBENAMNING = "BEREDARE" THEN KALKEGNAPRISER.PRIS = KALKBEF.PRIS1.
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MONTÖR" THEN KALKEGNAPRISER.PRIS = KALKBEF.PRIS2.
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN1" THEN KALKEGNAPRISER.PRIS = KALKBEF.PRIS3.
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN2" THEN KALKEGNAPRISER.PRIS = KALKBEF.PRIS4.
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN3" THEN KALKEGNAPRISER.PRIS = KALKBEF.PRIS7.
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN4" THEN KALKEGNAPRISER.PRIS = KALKBEF.PRIS5.
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN5" THEN KALKEGNAPRISER.PRIS = KALKBEF.PRIS6.           
               /*UTRUSTNING FAKTOR.FAKMASKINKOST FAKTOR.FAKUTRUSTKOST ????*/           
            END.   
         END.
         
         FOR EACH efastkalktemp NO-LOCK: 
            EMPTY TEMP-TABLE kalknumsubtt NO-ERROR.
            DO TRANSACTION:   
               CREATE KALKNUM.
               BUFFER-COPY efastkalktemp TO KALKNUM.
               KALKNUM.BENAMNING = "".
               ASSIGN
               KALKNUM.BENAMNING = SUBSTRING(efastkalktemp.BENAMNING,1,40)
               KALKNUM.ANMARK = SUBSTRING(efastkalktemp.BENAMNING,50)
               KALKNUM.KLOGSUBID = KALKYLKATALOG.HKLOGSUBID           
               KALKNUM.KALKNR = KALKHUV.KALKNR
               KALKNUM.OMRADE = KALKHUV.OMRADE
               KALKNUM.MATRIS = efastkalktemp.F10   
               KALKNUM.TYPKALK = 6.
               IF KALKNUM.MATRIS = 0 THEN KALKNUM.MATRIS = 1.
               RUN sistanum_UI (OUTPUT KALKNUM.NUM).
            END. 
            FOR EACH KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOG.HKLOGSUBID AND KALKYLPRISER.EGENKODUPP = TRUE NO-LOCK:
               CREATE KALKNUMSUB.            
               BUFFER-COPY KALKYLPRISER TO KALKNUMSUB. 
               ASSIGN 
               KALKNUMSUB.KALKNR = KALKNUM.KALKNR
               KALKNUMSUB.OMRADE = KALKHUV.OMRADE
               KALKNUMSUB.NUM = KALKNUM.NUM.
               RUN sistanumsubid_UI (OUTPUT KALKNUMSUB.NUMSUBID).
               IF KALKNUM.ANTAL = 0 THEN antalvar = 1.           
               ELSE antalvar = KALKNUM.ANTAL.
               IF KALKYLPRISER.SOKBENAMNING = "BEREDARE" THEN DO:
                  IF efastkalktemp.F1 + efastkalktemp.F2 = 0 THEN.
                  ELSE DO:
                     ASSIGN
                     KALKNUMSUB.FRITIMMAR = efastkalktemp.F1 / antalvar
                     KALKNUMSUB.FRIPRIS = efastkalktemp.ARBETE /(efastkalktemp.F1 + efastkalktemp.F2).
                  END.   
               END.   
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MONTÖR" THEN DO:
                  IF efastkalktemp.F1 + efastkalktemp.F2 = 0 THEN.
                  ELSE DO:
                     ASSIGN
                     KALKNUMSUB.FRITIMMAR = efastkalktemp.F2 / antalvar
                     KALKNUMSUB.FRIPRIS = efastkalktemp.ARBETE /(efastkalktemp.F1 + efastkalktemp.F2).
                  END.   
               END.   
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN1" THEN DO:
                  IF efastkalktemp.MASKINTIMMAR = 0 THEN.
                  ELSE DO: 
                     ASSIGN
                     KALKNUMSUB.FRITIMMAR = efastkalktemp.MASKINTIMMAR / antalvar
                     KALKNUMSUB.FRIPRIS = efastkalktemp.MASKINKOST /(efastkalktemp.MASKINTIMMAR).
                  END.   
               END.  
                  
               ELSE IF KALKYLPRISER.SOKBENAMNING = "MATERIEL" THEN DO: 
                  ASSIGN
                  KALKNUMSUB.FRIKOSTNAD  = efastkalktemp.MATERIEL / antalvar.                  
               END.   
               ELSE IF KALKYLPRISER.SOKBENAMNING = "ÖVRIGKOSTNAD" THEN DO:
                  ASSIGN
                  KALKNUMSUB.FRIKOSTNAD = efastkalktemp.OVRIGT / antalvar.             
               END.
               ELSE IF KALKYLPRISER.SOKBENAMNING = "ÖVRIGKOSTNADEA" THEN DO:
                  IF efastkalktemp.UTRUST = 0 THEN DO:  
                     ASSIGN 
                     KALKNUMSUB.FRIKOSTNAD = efastkalktemp.UTRUSTKOST / antalvar.
                  END.
                  ELSE DO:
                     ASSIGN                    
                     KALKNUMSUB.FRITIMMAR = efastkalktemp.UTRUST / antalvar.
                     KALKNUMSUB.FRIPRIS = efastkalktemp.UTRUSTKOST /(efastkalktemp.UTRUST * antalvar).
                  END.    
                     
               END. 
               ELSE IF KALKYLPRISER.SOKBENAMNING = "UTRUSTNING" THEN DO:
                  IF efastkalktemp.UTRUST = 0 THEN DO:
                     ASSIGN 
                     KALKNUMSUB.FRIKOSTNAD = efastkalktemp.UTRUSTKOST / antalvar.
                  END.
                  ELSE DO:
                     ASSIGN                    
                     KALKNUMSUB.FRITIMMAR = efastkalktemp.UTRUST / antalvar.
                     KALKNUMSUB.FRIPRIS = efastkalktemp.UTRUSTKOST /(efastkalktemp.UTRUST * antalvar).
                  END.                         
               END.
               IF efastkalktemp.ARBKOD = "EGEN" THEN DO:
                  ASSIGN 
                  KALKNUMSUB.FRIBENAMNING = KALKNUMSUB.BENAMNING         
                  KALKNUMSUB.KOSTNAD   = KALKNUMSUB.FRIKOSTNAD
                  KALKNUMSUB.PRIS      = KALKNUMSUB.FRIPRIS
                  KALKNUMSUB.TIMMAR    = KALKNUMSUB.FRITIMMAR.
                  CREATE kalknumsubtt.  
                  BUFFER-COPY KALKNUMSUB TO kalknumsubtt.
               END.
               ELSE DO:
                  ASSIGN 
                  KALKNUMSUB.FRIBENAMNING = KALKNUMSUB.BENAMNING.
                  FOR EACH KALKYLKATALOGSUB WHERE KALKYLKATALOGSUB.KLOGID = KALKHUV.KLOGID NO-LOCK:
                     FIND FIRST KALKYLLOPPOSTER WHERE KALKYLLOPPOSTER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND
                     KALKYLLOPPOSTER.ARBKOD = KALKNUM.ARBKOD AND KALKYLLOPPOSTER.LOPNR = KALKNUM.LOPNR NO-LOCK NO-ERROR.
                     IF AVAILABLE KALKYLLOPPOSTER THEN DO:
                        kpostid = ROWID(KALKYLLOPPOSTER) .
                     END.   
                  END.
                   /*Anders Olsson Elpool i Umeå AB  4 jan 2016 14:54:13 
                   oM KOD INTE FINNS I SENAST KAT. 
                   */
                  IF NOT AVAILABLE KALKYLLOPPOSTER THEN DO:
                     FIND LAST KALKYLLOPPOSTER WHERE KALKYLLOPPOSTER.ARBKOD = KALKNUM.ARBKOD AND KALKYLLOPPOSTER.LOPNR = KALKNUM.LOPNR
                     NO-LOCK NO-ERROR.
                     IF AVAILABLE KALKYLLOPPOSTER THEN DO:
                        kpostid = ROWID(KALKYLLOPPOSTER) .
                     END.
                     ELSE DO:
                         OUTPUT TO VALUE(filut) APPEND.
                           PUT "KOD FINNS INTE " EXTRADATA.HUVUDINT " " KALKNUM.ARBKOD " " KALKNUM.LOPNR SKIP.
                           OUTPUT CLOSE.
                     END.      
       
                  END.
                   
                  FIND FIRST KALKYLLOPPOSTER WHERE ROWID(KALKYLLOPPOSTER) = kpostid NO-LOCK NO-ERROR.
                  IF AVAILABLE KALKYLLOPPOSTER THEN DO:
                     BUFFER-COPY KALKYLLOPPOSTER TO KALKNUM.
                     FOR EACH KALKYLLOPSUB WHERE KALKYLLOPSUB.KLOGSUBID = KALKYLLOPPOSTER.KLOGSUBID AND 
                     KALKYLLOPSUB.ARBKOD = KALKNUM.ARBKOD AND KALKYLLOPSUB.LOPNR = KALKNUM.LOPNR AND  
                     KALKYLLOPSUB.KPID = KALKYLPRISER.KPID  NO-LOCK:                   
                        BUFFER-COPY KALKYLLOPSUB TO KALKNUMSUB.      
                        ASSIGN 
                        KALKNUMSUB.KALKNR = KALKNUM.KALKNR
                        KALKNUMSUB.OMRADE = KALKHUV.OMRADE
                        KALKNUMSUB.NUM = KALKNUM.NUM.
                        CREATE kalknumsubtt.  
                        BUFFER-COPY KALKNUMSUB TO kalknumsubtt.   
                     END.
                  END.                 
               END.  
            END.                  
            
            EMPTY TEMP-TABLE kalknumtt NO-ERROR.
            CREATE kalknumtt.
            BUFFER-COPY KALKNUM TO kalknumtt.
            kalknumtt.TTRECID = RECID(kalknumtt).          
            RUN raknaenkod_UI (INPUT FALSE).
            FOR EACH kalknumsubtt:
               FIND FIRST KALKNUMSUB WHERE KALKNUMSUB.KALKNR = kalknumsubtt.KALKNR AND
               KALKNUMSUB.OMRADE = kalknumsubtt.OMRADE AND
               KALKNUMSUB.NUM = kalknumsubtt.NUM AND
               KALKNUMSUB.KPID = kalknumsubtt.KPID 
               EXCLUSIVE-LOCK NO-ERROR.
               BUFFER-COPY kalknumsubtt TO KALKNUMSUB.
            END.
         
            DO TRANSACTION:
               FIND CURRENT KALKNUM EXCLUSIVE-LOCK. 
               BUFFER-COPY kalknumtt TO KALKNUM.
            END.
            
            RELEASE KALKNUM NO-ERROR.
            EMPTY TEMP-TABLE kalknumtt NO-ERROR. 
            EMPTY TEMP-TABLE kalknumsubtt NO-ERROR.
         END.
      END.            
   END.         
END PROCEDURE.
/*beräknar kostnad för en kod ELLER ALLA KODER*/ 
PROCEDURE raknaenkod_UI :
   DEFINE INPUT  PARAMETER allakoder AS LOGICAL NO-UNDO.
   DEFINE VARIABLE totkostvar AS DECIMAL NO-UNDO.
   DEFINE VARIABLE fritotkostvar AS DECIMAL NO-UNDO.
   EMPTY TEMP-TABLE kalkantal NO-ERROR. 
   EMPTY TEMP-TABLE kalkkostnad NO-ERROR. 
   /*SAMBYGG EGNA PRISER FAKTORER */
   
   IF allakoder = FALSE THEN DO:
      OPEN QUERY ksq FOR EACH kalknumsubtt WHERE kalknumsubtt.KALKNR = kalknumtt.KALKNR AND kalknumsubtt.OMRADE = KALKHUV.OMRADE AND 
      kalknumsubtt.NUM = kalknumtt.NUM NO-LOCK.
      GET FIRST ksq NO-LOCK.
     
   END.
   ELSE DO:
      OPEN QUERY ksq FOR EACH kalknumsubtt WHERE kalknumsubtt.KALKNR = KALKHUV.KALKNR AND kalknumsubtt.OMRADE = KALKHUV.OMRADE NO-LOCK.
      GET FIRST ksq NO-LOCK.
   END.    
   DO WHILE AVAILABLE(kalknumsubtt):
      
      IF allakoder = TRUE THEN DO:
         FIND FIRST KALKNUM WHERE KALKNUM.KALKNR = KALKHUV.KALKNR AND KALKNUM.OMRADE = KALKHUV.OMRADE AND KALKNUM.NUM = kalknumsubtt.NUM NO-LOCK NO-ERROR.
         FIND FIRST kalknumtt WHERE kalknumtt.KALKNR = KALKHUV.KALKNR AND kalknumtt.OMRADE = KALKHUV.OMRADE AND kalknumtt.NUM = kalknumsubtt.NUM NO-ERROR.
         IF NOT AVAILABLE kalknumtt THEN DO:
            CREATE kalknumtt.
            BUFFER-COPY KALKNUM TO kalknumtt.
            kalknumtt.TTRECID = RECID(kalknumtt).
         END.         
      END.
      CREATE kalkantal.
      BUFFER-COPY kalknumtt TO kalkantal.
      CREATE kalkkostnad.
      BUFFER-COPY kalknumtt TO kalkkostnad.
      kalkkostnad.TOTKOST = 0.
      FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = kalknumtt.KLOGSUBID AND 
      KALKYLPRISER.KPID = kalknumsubtt.KPID NO-LOCK NO-ERROR.
      FIND FIRST KALKVISNING WHERE KALKVISNING.KVID = KALKYLPRISER.KVID NO-LOCK NO-ERROR.
      /*)
      EMPTY TEMP-TABLE kalkEA NO-ERROR.
      CREATE kalkEA.
      */        
      IF AVAILABLE KALKVISNING THEN DO:   
         
         ASSIGN 
         kalkkostnad.KOSTTYP = KALKVISNING.KOSTTYP
         kalkkostnad.KPID = KALKYLPRISER.KPID
         kalkkostnad.KVID = KALKYLPRISER.KVID.
          
         kalkkostnad.TOTKOST = kalkkostnad.TOTKOST + (kalknumsubtt.TIMMAR * kalknumtt.ANTAL * KALKYLPRISER.PRIS)
         + kalknumtt.ANTAL * kalknumsubtt.KOSTNAD.
         kalkkostnad.FRITOTKOST = kalkkostnad.FRITOTKOST + (kalknumsubtt.FRITIMMAR * kalknumtt.ANTAL * kalknumsubtt.FRIPRIS)
         + kalknumtt.ANTAL * kalknumsubtt.FRIKOSTNAD.
         
         totkostvar = totkostvar + kalkkostnad.TOTKOST.
         fritotkostvar = fritotkostvar + kalkkostnad.FRITOTKOST.
         ASSIGN 
         kalkantal.TIMTYP = KALKVISNING.TIMTYP
         kalkantal.KPID = KALKYLPRISER.KPID
         kalkantal.KVID = KALKYLPRISER.KVID.
          
         kalkantal.SUMMA = kalkantal.SUMMA + kalknumsubtt.TIMMAR * kalknumtt.ANTAL.
         kalkantal.FRISUMMA = kalkantal.FRISUMMA + kalknumsubtt.FRITIMMAR * kalknumtt.ANTAL.
                         
      END.
      FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = kalknumtt.KLOGSUBID AND KALKYLPRISER.KVID = 0 AND KALKYLPRISER.SOKBENAMNING = "RÖRLIGKOSTNAD EA"  NO-LOCK NO-ERROR.
      IF AVAILABLE KALKYLPRISER THEN DO:
         
         IF kalkantal.KVID = 2 THEN DO:
            kalkkostnad.EAMANGD = kalkantal.SUMMA.
         END.
         IF kalkantal.KVID = 3 THEN DO:
            kalkkostnad.EAMANGD = kalkkostnad.TOTKOST / KALKYLPRISER.PRIS.
         END.
         IF kalkantal.KVID = 6 THEN DO:
            kalkkostnad.EAMANGD = kalkkostnad.TOTKOST / KALKYLPRISER.PRIS.
         END.
         IF kalkantal.KVID = 7 THEN DO:
            kalkkostnad.EAMANGD = kalkkostnad.TOTKOST / KALKYLPRISER.PRIS.
         END.                   
      END.
      ELSE DO:
         ASSIGN
         kalkkostnad.EAMANGD  = 0
         kalkkostnad.FRIEAMANGD = 0.        
      END.
      
      GET NEXT ksq NO-LOCK.
   END.            
   IF allakoder = FALSE THEN DO:
      ASSIGN
      kalknumtt.FRITOTKOST = fritotkostvar
      kalknumtt.TOTKOST = totkostvar.   
      EMPTY TEMP-TABLE kalkantal NO-ERROR.
      EMPTY TEMP-TABLE kalkkostnad NO-ERROR.       
   END.    
END PROCEDURE.   

PROCEDURE maskklg2_UI :
   DEFINE INPUT  PARAMETER timmarvar AS DECIMAL NO-UNDO.
   DEFINE INPUT  PARAMETER kostvar AS DECIMAL NO-UNDO.
   DEFINE VARIABLE maskinvar AS CHARACTER NO-UNDO.
   DEFINE VARIABLE maskinnr AS INTEGER NO-UNDO.
   IF timmarvar = 0 OR kostvar = 0 THEN RETURN.     
   FIND FIRST KALKYLPRISER WHERE KALKYLPRISER.KVID = 3 AND KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND KALKYLPRISER.PRIS = ROUND(kostvar / timmarvar,0)
   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKYLPRISER THEN DO:
      FIND LAST KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOGSUB.KLOGSUBID AND  KALKYLPRISER.KVID = 3 AND KALKYLPRISER.SOKBENAMNING BEGINS "MASKIN" USE-INDEX KPID NO-LOCK NO-ERROR.
      maskinnr = INTEGER(SUBSTRING(KALKYLPRISER.SOKBENAMNING,7)) + 1.
      maskinvar = "MASKIN" + STRING(maskinnr).
      RUN kalkylpristab_UI (INPUT 3, INPUT maskinvar,INPUT maskinvar,INPUT ROUND(kostvar / timmarvar,0) ,INPUT FALSE,INPUT FALSE).
   END.
   RUN katlopsub_UI (INPUT timmarvar, INPUT 0).  
   
END PROCEDURE.

PROCEDURE BerKalkStart_UI :
   
   FIND FIRST BERKALKOPPLA WHERE NO-LOCK NO-ERROR.
   IF AVAILABLE BERKALKOPPLA THEN RETURN.
   FIND LAST KALKYLKATALOG WHERE KALKYLKATALOG.BENAMNING BEGINS "EBR" USE-INDEX VISARTAL NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKYLKATALOG THEN DO:
      MESSAGE "FEL PÅ KALKYLUPPLÄGGET"
      VIEW-AS ALERT-BOX.
      RETURN.
   END.
   FOR EACH BEREDNING WHERE  NO-LOCK:
      
      RUN BerKalkSkapa_UI (BEREDNING.BERAONR,BEREDNING.OMRADE, FALSE, FALSE).
   END.
   
END PROCEDURE.



PROCEDURE BerKalkSkapa_UI :
   DEFINE INPUT  PARAMETER aonrvar AS CHARACTER NO-UNDO.
   
   DEFINE INPUT  PARAMETER omrvar AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER togsum AS LOGICAL NO-UNDO.
   DEFINE INPUT  PARAMETER togmtrl AS LOGICAL NO-UNDO.
   DEFINE VARIABLE KalkNrvar AS INTEGER NO-UNDO.
   DEFINE VARIABLE antlavar AS DECIMAL NO-UNDO.
   DEFINE VARIABLE midvar AS INTEGER NO-UNDO.
   DEFINE VARIABLE matrisvar AS INTEGER NO-UNDO.
   EMPTY TEMP-TABLE tidut NO-ERROR. 
   EMPTY TEMP-TABLE KalkylimportTT NO-ERROR. 
   FIND FIRST BERKALK  WHERE BERKALK.AONR = BEREDNING.BERAONR AND BERKALK.OMRADE  = BEREDNING.OMRADE NO-LOCK NO-ERROR.
   IF NOT AVAILABLE BERKALK THEN DO:
      FIND FIRST HDKALK WHERE HDKALK.BERNR  = BEREDNING.BERNR AND HDKALK.OMRADE  = BEREDNING.OMRADE NO-LOCK NO-ERROR.
      IF NOT AVAILABLE HDKALK THEN DO:
         RETURN.
      END.
   END.
   RUN KALKBERAPPDS.p PERSISTENT SET LocalAppServerHandle (INPUT BEREDNING.ANVANDARE).
   RUN omradekoll_UI IN LocalAppServerHandle (INPUT omrvar, OUTPUT KalkNrvar). 
   OUTPUT TO VALUE(filut) APPEND.
      PUT "beredning " BEREDNING.BERAONR " " BEREDNING.OMRADE "kalknr" KalkNrvar SKIP.
      OUTPUT CLOSE. 
   IF KalkNrvar = ? THEN DO:
      CREATE tidut.
      tidut.UT =  "Det går inte att lägga upp kalkyler på detta " + LC(Guru.Konstanter:gomrk) + ". Nummerserie saknas eller är fylld.".      
      RETURN.
   END.
   FIND LAST KALKYLKATALOG WHERE KALKYLKATALOG.BENAMNING BEGINS "EBR" USE-INDEX VISARTAL NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKYLKATALOG THEN DO:
      MESSAGE "FEL PÅ KALKYLUPPLÄGGET"
      VIEW-AS ALERT-BOX.
      RETURN.
   END.
   
   RUN bercopycat_UI (INPUT KalkNrvar, INPUT omrvar,INPUT KALKYLKATALOG.KLOGID,INPUT 2).
         
    
   FOR EACH HDKALK WHERE HDKALK.BERNR = BEREDNING.BERNR AND HDKALK.OMRADE = BEREDNING.OMRADE NO-LOCK:   
      antlavar = 0.
      IF HDKALK.ARBKOD = "egen" THEN DO:
         RUN egen_UI (INPUT KalkNrvar, INPUT omrvar, INPUT HDKALK.ARBKOD, INPUT HDKALK.LOPNR).
      END.
      ELSE DO:   
         IF togsum = TRUE THEN DO:
            FIND FIRST KalkylimportTT WHERE KalkylimportTT.ARBKOD = HDKALK.ARBKOD AND KalkylimportTT.LOPNR = HDKALK.LOPNR NO-LOCK NO-ERROR.
            IF NOT AVAILABLE KalkylimportTT THEN DO:
               CREATE KalkylimportTT.
            END. 
            antlavar =  KalkylimportTT.ANTAL.          
         END.
         ELSE CREATE KalkylimportTT.
         
         ASSIGN
         KalkylimportTT.TTRECID = RECID(KalkylimportTT) 
         KalkylimportTT.KALKNR = KalkNrvar
         KalkylimportTT.OMRADE = omrvar
         KalkylimportTT.MATRIS = 1
         KalkylimportTT.ARBKOD = HDKALK.ARBKOD 
         KalkylimportTT.LOPNR = HDKALK.LOPNR
         KalkylimportTT.SID = HDKALK.SID.
         KalkylimportTT.ANTAL = antlavar + HDKALK.ANTAL.
      END.            
   END.
   
   /*EGEN*/
   FOR EACH BERKALK WHERE BERKALK.AONR = STRING(BEREDNING.BERNR) AND BERKALK.OMRADE = BEREDNING.OMRADE USE-INDEX OMR NO-LOCK.
      antlavar = 0.
       IF BERKALK.ARBKOD = "egen" THEN DO:
         RUN egen_UI (INPUT KalkNrvar, INPUT omrvar, INPUT BERKALK.ARBKOD, INPUT BERKALK.LOPNR).
      END.
      ELSE DO: 
         IF togsum = TRUE THEN DO:
            FIND FIRST KalkylimportTT WHERE KalkylimportTT.ARBKOD = BERKALK.ARBKOD AND KalkylimportTT.LOPNR = BERKALK.LOPNR NO-LOCK NO-ERROR.
            IF NOT AVAILABLE KalkylimportTT THEN DO:
               CREATE KalkylimportTT.
            END. 
            antlavar =  KalkylimportTT.ANTAL.          
         END.
         ELSE CREATE KalkylimportTT.
         ASSIGN 
         KalkylimportTT.TTRECID = RECID(KalkylimportTT)
         KalkylimportTT.KALKNR = KalkNrvar
         KalkylimportTT.OMRADE = omrvar
         KalkylimportTT.MATRIS = 1
         KalkylimportTT.ARBKOD = BERKALK.ARBKOD 
         KalkylimportTT.LOPNR = BERKALK.LOPNR
         KalkylimportTT.ANTAL = antlavar + BERKALK.ANTAL
         KalkylimportTT.BERNUM = BERKALK.NUM.
      END.   
   END.
   
   EMPTY TEMP-TABLE kalktmtrlTT NO-ERROR. 
   IF togmtrl = TRUE THEN DO: 
      FOR EACH BERVAL WHERE BERVAL.AONR = STRING(BEREDNING.BERNR) AND BERVAL.OMRADE = BEREDNING.OMRADE AND BERVAL.KSKAP = FALSE NO-LOCK: 
      
         FOR EACH BERMTRL WHERE BERMTRL.AONR = BERVAL.AONR AND BERMTRL.OMRADE = BERVAL.OMRADE AND BERMTRL.NUM = BERVAL.NUM  NO-LOCK:
            IF BERMTRL.ANTAL >  0 THEN DO:
               IF BERVAL.UPPLAG = 0 OR BERVAL.UPPLAG = ? THEN matrisvar = 1.
               ELSE matrisvar = BERVAL.UPPLAG. 
               FIND FIRST kalktmtrlTT WHERE kalktmtrlTT.LEVKOD = BERMTRL.LEVKOD AND kalktmtrlTT.Enr = BERMTRL.ENR AND kalktmtrlTT.MATRIS = matrisvar NO-LOCK NO-ERROR.
               IF NOT AVAILABLE kalktmtrlTT THEN DO:
                  midvar = midvar + 1.
                  CREATE kalktmtrlTT.
                  ASSIGN
                  kalktmtrlTT.OMRADE    = omrvar
                  kalktmtrlTT.KALKNR    = KalkNrvar
                  kalktmtrlTT.MATRIS    = matrisvar
                  kalktmtrlTT.MID = midvar.
               END.   
               ASSIGN 
               kalktmtrlTT.ENR = BERMTRL.ENR
               kalktmtrlTT.BENAMNING = BERMTRL.BENAMNING
               kalktmtrlTT.ENHET = BERMTRL.ENHET
               kalktmtrlTT.BERKVANT = kalktmtrlTT.BERKVANT + BERMTRL.ANTAL
               kalktmtrlTT.NPRIS = BERMTRL.PRIS
               kalktmtrlTT.LEVKOD = BERMTRL.LEVKOD.
               kalktmtrlTT.SUMMA = kalktmtrlTT.NPRIS * kalktmtrlTT.BERKVANT.
            END.    
         END.
      END.
      
      FOR EACH kalktmtrlTT WHERE kalktmtrlTT.BERKVANT > 0 NO-LOCK:
         CREATE KALKMTRL.
         BUFFER-COPY kalktmtrlTT TO KALKMTRL.
      END. 
      RELEASE KALKMTRL NO-ERROR.  
   END.   
   RUN KSKAPA_ui (KalkNrvar,omrvar).
   EMPTY TEMP-TABLE kalktmtrlTT NO-ERROR. 
   IF VALID-HANDLE(LocalAppServerHandle) THEN DELETE PROCEDURE LocalAppServerHandle.  
      
END PROCEDURE.

PROCEDURE bercopycat_UI :
   DEFINE INPUT PARAMETER nykalknr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER omrvar AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER KatIdvar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER nytyp AS INTEGER NO-UNDO.
   DEFINE VARIABLE berkopptabbuffh AS HANDLE NO-UNDO.
   CREATE BUFFER berkopptabbuffh FOR TABLE "BERKALKOPPLA".
   DEFINE VARIABLE statusvar AS CHARACTER NO-UNDO.
   DO TRANSACTION:
      
      FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = BEREDNING.ANVANDARE NO-LOCK NO-ERROR.
      FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = ANVANDARE.PERSONALKOD USE-INDEX PERSONALKOD NO-LOCK NO-ERROR.
      IF NOT AVAILABLE PERSONALTAB THEN DO:
         FIND FIRST PERSONALTAB WHERE USE-INDEX PERSONALKOD NO-LOCK NO-ERROR.
      END.
      CREATE KALKHUVBUF.
      ASSIGN
      KALKHUVBUF.AKTIV = TRUE
      KALKHUVBUF.BENAMNING = BEREDNING.BENAMNING
      KALKHUVBUF.KALKANV = PERSONALTAB.PERSONALKOD
      KALKHUVBUF.ANVANDARE = BEREDNING.ANVANDARE
      KALKHUVBUF.KALKNR = nykalknr
      KALKHUVBUF.bestid = BEREDNING.OMRADE
      KALKHUVBUF.OMRADE = BEREDNING.OMRADE
      KALKHUVBUF.KLOGID = KatIdvar
      KALKHUVBUF.TYPKALK = nytyp.
      berkopptabbuffh:BUFFER-CREATE().
      berkopptabbuffh:BUFFER-FIELD("AONR"):BUFFER-VALUE = STRING(BEREDNING.BERNR).
      berkopptabbuffh:BUFFER-FIELD("BERNR"):BUFFER-VALUE = BEREDNING.BERNR.
      berkopptabbuffh:BUFFER-FIELD("OMRADE"):BUFFER-VALUE = BEREDNING.OMRADE.
      berkopptabbuffh:BUFFER-FIELD("KALKNR"):BUFFER-VALUE = KALKHUVBUF.KALKNR.
      berkopptabbuffh:BUFFER-FIELD("OMRADEKALK"):BUFFER-VALUE = KALKHUVBUF.OMRADE.
     
   END.   
   berkopptabbuffh:BUFFER-RELEASE () NO-ERROR.
   DELETE OBJECT berkopptabbuffh NO-ERROR.
END PROCEDURE.

PROCEDURE KSKAPA_UI :
   DEFINE INPUT PARAMETER KalkNrvar AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER omrvar AS CHARACTER NO-UNDO.
   DEFINE VARIABLE felmed AS CHARACTER NO-UNDO.
   FIND FIRST KALKHUV  WHERE KALKHUV.KALKNR = KalkNrvar AND KALKHUV.OMRADE = omrvar NO-LOCK NO-ERROR.
   RUN kathmt_UI IN LocalAppServerHandle (INPUT KalkNrvar,INPUT omrvar, INPUT BEREDNING.ANVANDARE,OUTPUT felmed, OUTPUT TABLE kalkylarbkodertt,
      OUTPUT TABLE kalkylloppostertt,OUTPUT TABLE kalkylkatalogtt, OUTPUT TABLE markfiltertt,OUTPUT TABLE kalkyldelkatalogtt).
   FOR EACH KalkylimportTT WHERE NO-LOCK:
      FIND FIRST kalkylloppostertt WHERE trim(kalkylloppostertt.ARBKOD) = TRIM(KalkylimportTT.ARBKOD)
      AND kalkylloppostertt.LOPNR = KalkylimportTT.LOPNR  NO-LOCK NO-ERROR.
      IF AVAILABLE kalkylloppostertt THEN DO:
         EMPTY TEMP-TABLE kalknumsubtt NO-ERROR. 
         CREATE KALKNUM. 
         BUFFER-COPY KalkylimportTT TO KALKNUM.
         BUFFER-COPY kalkylloppostertt TO KALKNUM.    
            
         FIND LAST KALKNUMbuf WHERE KALKNUMbuf.KALKNR = KALKNUM.KALKNR AND KALKNUMbuf.OMRADE = KALKNUM.OMRADE USE-INDEX NUM
         NO-LOCK NO-ERROR.
         IF AVAILABLE KALKNUMbuf THEN KALKNUM.NUM = KALKNUMbuf.NUM + 1.
         ELSE KALKNUM.NUM = 1.
         ASSIGN
         KALKNUM.KALKNR     = KALKHUVBUF.KALKNR
         KALKNUM.OMRADE     = KALKHUVBUF.OMRADE
         KALKNUM.TYPKALK    = KALKHUVBUF.TYPKALK.
         EMPTY TEMP-TABLE ekalknumsubtt NO-ERROR.   
         RUN skapanumsub_UI IN LocalAppServerHandle (INPUT KALKNUM.KLOGSUBID,INPUT KALKNUM.ARBKOD,INPUT KALKNUM.LOPNR,OUTPUT TABLE ekalknumsubtt).
         FOR EACH ekalknumsubtt WHERE NO-LOCK:
            FIND LAST KALKNUMSUBBUFF WHERE 
            KALKNUMSUBBUFF.KALKNR = KALKNUM.KALKNR AND KALKNUMSUBBUFF.OMRADE = KALKNUM.OMRADE AND
            KALKNUMSUBBUFF.NUM = KALKNUM.NUM USE-INDEX NUM NO-LOCK NO-ERROR.
            IF AVAILABLE KALKNUMSUBBUFF THEN ekalknumsubtt.NUMSUBID =  KALKNUMSUBBUFF.NUMSUBID + 1.
            ELSE  ekalknumsubtt.NUMSUBID = 1.
            ASSIGN 
            ekalknumsubtt.KALKNR = KALKHUVBUF.KALKNR
            ekalknumsubtt.OMRADE = KALKHUVBUF.OMRADE
            ekalknumsubtt.NUM = KALKNUM.NUM.
            CREATE KALKNUMSUB.
            BUFFER-COPY ekalknumsubtt TO KALKNUMSUB.
            DELETE ekalknumsubtt.   
            CREATE kalknumsubtt.  
            BUFFER-COPY KALKNUMSUB TO kalknumsubtt.                    
         END.
         EMPTY TEMP-TABLE ekalknumsubtt NO-ERROR.
         EMPTY TEMP-TABLE kalknumtt NO-ERROR.
         CREATE kalknumtt.
         BUFFER-COPY KALKNUM TO kalknumtt.
         kalknumtt.TTRECID = RECID(kalknumtt).          
         RUN raknaenkod_UI (INPUT FALSE).
         FOR EACH kalknumsubtt:
            FIND FIRST KALKNUMSUB WHERE KALKNUMSUB.KALKNR = kalknumsubtt.KALKNR AND
            KALKNUMSUB.OMRADE = kalknumsubtt.OMRADE AND
            KALKNUMSUB.NUM = kalknumsubtt.NUM AND
            KALKNUMSUB.KPID = kalknumsubtt.KPID 
            EXCLUSIVE-LOCK NO-ERROR.
            BUFFER-COPY kalknumsubtt TO KALKNUMSUB.
         END.
         BUFFER-COPY kalknumtt TO KALKNUM.
         EMPTY TEMP-TABLE kalknumtt NO-ERROR. 
         EMPTY TEMP-TABLE kalknumsubtt NO-ERROR.
      END.   
   END.
   EMPTY TEMP-TABLE KalkylimportTT NO-ERROR.
END PROCEDURE.



PROCEDURE copyrel_UI :
   RELEASE KALKNUMBUF NO-ERROR.
   RELEASE KALKNUMSUBBUF NO-ERROR.
END PROCEDURE.


PROCEDURE egen_UI :
   
   DEFINE INPUT  PARAMETER KalkNrvar AS INTEGER  NO-UNDO.
   DEFINE INPUT  PARAMETER omrvar AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER egenkod AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER lopnrkod AS INTEGER  NO-UNDO.
   DEFINE VARIABLE lopnrkodorg AS INTEGER NO-UNDO.
   DEFINE VARIABLE benvar AS CHARACTER NO-UNDO.
   DEFINE VARIABLE numvar AS INTEGER NO-UNDO.
   DEFINE VARIABLE berkalknum AS INTEGER NO-UNDO.
   lopnrkodorg = lopnrkod.
   /*Anders Olsson Elpool i Umeå AB  14 jan 2016 11:16:10 
   bEHÖVS INTE DÅ SCHAKT OCH BERKALK EGEN INTE FÅR SAMMA LOPNR 
   */
   /*
   FIND FIRST KALKNUM WHERE KALKNUM.KALKNR = KalkNrvar AND KALKNUM.OMRADE = omrvar AND KALKNUM.ARBKOD = egenkod AND KALKNUM.LOPNR = lopnrkod NO-LOCK NO-ERROR.
   IF AVAILABLE KALKNUM THEN DO:
      FIND LAST KALKNUM WHERE KALKNUM.KALKNR = KalkNrvar AND KALKNUM.OMRADE = omrvar AND KALKNUM.ARBKOD = egenkod AND KALKNUM.LOPNR >= lopnrkod NO-LOCK NO-ERROR.
      IF AVAILABLE KALKNUM THEN lopnrkod =  KALKNUM.LOPNR + 1.
      ELSE lopnrkod = lopnrkod + 1.
   END.*/
   DO TRANSACTION:
      CREATE KALKNUM.
      IF AVAILABLE HDKALK THEN DO:
          BUFFER-COPY HDKALK TO KALKNUM. 
      END. 
      IF AVAILABLE BERKALK THEN DO: 
         BUFFER-COPY BERKALK EXCEPT NUM TO KALKNUM . 
         berkalknum = BERKALK.NUM. 
      END. 
      benvar   = KALKNUM.BENAMNING.
      KALKNUM.BENAMNING = "".
     
      ASSIGN
      KALKNUM.KLOGSUBID = KALKYLKATALOG.HKLOGSUBID
      KALKNUM.BENAMNING = SUBSTRING(benvar,1,40)
      KALKNUM.ANMARK = SUBSTRING(benvar,50)           
      KALKNUM.KALKNR = KalkNrvar
      KALKNUM.OMRADE = omrvar
      KALKNUM.MATRIS = 1  
      KALKNUM.TYPKALK = 2.
      
      RUN sistanum_UI (OUTPUT numvar).
      KALKNUM.NUM = numvar.
   END.
   RELEASE KALKNUM NO-ERROR.    
   RUN egensub_UI (INPUT 0,INPUT KalkNrvar, INPUT omrvar, INPUT egenkod, INPUT lopnrkod,INPUT numvar,INPUT berkalknum).
END PROCEDURE. 
PROCEDURE egensub_UI :  
   DEFINE INPUT  PARAMETER BernrVar AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER KalkNrvar AS INTEGER  NO-UNDO.
   DEFINE INPUT  PARAMETER omrvar AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER egenkod AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER lopnrkod AS INTEGER  NO-UNDO.
   DEFINE INPUT  PARAMETER numvar AS INTEGER NO-UNDO.
   DEFINE INPUT  PARAMETER berkalknum AS INTEGER NO-UNDO.
   FIND FIRST KALKHUV  WHERE KALKHUV.KALKNR = KalkNrvar AND KALKHUV.OMRADE = omrvar NO-LOCK NO-ERROR.
   IF NOT AVAILABLE KALKYLKATALOG THEN DO:
      FIND FIRST KALKHUV WHERE KALKHUV.KALKNR = KalkNrvar AND KALKHUV.OMRADE = omrvar NO-LOCK NO-ERROR.
      FIND LAST KALKYLKATALOG WHERE KALKYLKATALOG.KLOGID = KALKHUV.KLOGID NO-LOCK NO-ERROR.
   END.
   IF NOT AVAILABLE KALKNUM THEN DO:
      FIND FIRST KALKNUM WHERE KALKNUM.KALKNR = KalkNrvar AND KALKNUM.OMRADE = omrvar AND KALKNUM.NUM = numvar NO-LOCK NO-ERROR.
   END.
   IF NOT AVAILABLE BEREDNING THEN DO:
      FIND FIRST BEREDNING WHERE BEREDNING.BERNR = BernrVar AND BEREDNING.OMRADE = OmrVar NO-LOCK NO-ERROR.
   END.
   FIND FIRST KALKBEFB WHERE KALKBEFB.BERNR = BEREDNING.BERNR AND KALKBEFB.OMRADE =  BEREDNING.OMRADE AND KALKBEFB.ARBKOD = "EGEN" AND 
   KALKBEFB.LOPNR = lopnrkod NO-LOCK NO-ERROR.
   IF AVAILABLE KALKBEFB THEN DO:
      EMPTY TEMP-TABLE kalknumsubtt NO-ERROR.
      FOR EACH KALKYLPRISER WHERE KALKYLPRISER.KLOGSUBID = KALKYLKATALOG.HKLOGSUBID AND KALKYLPRISER.EGENKODUPP = TRUE NO-LOCK:
         CREATE KALKNUMSUB.               
         BUFFER-COPY KALKYLPRISER TO KALKNUMSUB.
         ASSIGN 
         KALKNUMSUB.KALKNR = KALKNUM.KALKNR
         KALKNUMSUB.OMRADE = KALKNUM.OMRADE
         KALKNUMSUB.NUM = KALKNUM.NUM.
         RUN sistanumsubid_UI (OUTPUT KALKNUMSUB.NUMSUBID).
         IF KALKYLPRISER.SOKBENAMNING = "BEREDARE" THEN DO:
            ASSIGN
            KALKNUMSUB.TIMMAR = KALKBEFB.F1
            KALKNUMSUB.PRIS = KALKBEFB.PRIS1.
         END. 
         ELSE  IF KALKYLPRISER.SOKBENAMNING = "BEREDARE REGION" THEN DO:
            ASSIGN
            KALKNUMSUB.TIMMAR = KALKBEFB.F1
            KALKNUMSUB.PRIS = KALKBEFB.PRIS1.
         END.   
         ELSE IF KALKYLPRISER.SOKBENAMNING = "MONTÖR" THEN DO:
            ASSIGN
            KALKNUMSUB.TIMMAR = KALKBEFB.F2
            KALKNUMSUB.PRIS = KALKBEFB.PRIS2.
         END.   
         ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN1" THEN DO:
            ASSIGN
            KALKNUMSUB.TIMMAR = KALKBEFB.F3
            KALKNUMSUB.PRIS = KALKBEFB.PRIS3.
         END.   
         ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN2" THEN DO:
            ASSIGN
            KALKNUMSUB.TIMMAR = KALKBEFB.F4
            KALKNUMSUB.PRIS = KALKBEFB.PRIS4.
         END.    
         ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN3" THEN DO:
            ASSIGN
            KALKNUMSUB.TIMMAR = KALKBEFB.F7
            KALKNUMSUB.PRIS = KALKBEFB.PRIS7.
         END.   
         ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN4" THEN DO:
            ASSIGN
            KALKNUMSUB.TIMMAR = KALKBEFB.F5
            KALKNUMSUB.PRIS = KALKBEFB.PRIS5.
         END.   
         ELSE IF KALKYLPRISER.SOKBENAMNING = "MASKIN5" THEN DO:
            ASSIGN
            KALKNUMSUB.TIMMAR = KALKBEFB.F6
            KALKNUMSUB.PRIS = KALKBEFB.PRIS6.
         END.   
         ELSE IF KALKYLPRISER.SOKBENAMNING = "MATERIEL" THEN DO: 
            ASSIGN
            KALKNUMSUB.KOSTNAD  = KALKBEFB.MATERIEL.                  
         END.   
         ELSE IF KALKYLPRISER.SOKBENAMNING = "ÖVRIGKOSTNAD" THEN DO:
            ASSIGN
            KALKNUMSUB.KOSTNAD = KALKBEFB.OVRIGT.             
         END. 
         ELSE IF KALKYLPRISER.SOKBENAMNING = "ENTREP" THEN DO:
            ASSIGN
            KALKNUMSUB.KOSTNAD = KALKBEFB.ENTRP.               
         END. 
         ELSE IF KALKYLPRISER.SOKBENAMNING = "UTRUSTNING" THEN DO:
             ASSIGN
             KALKNUMSUB.KOSTNAD = KALKBEFB.UTRUSTKOST.   
             /*KALKBEFB.UTRUST ???*/            
         END.
         IF KALKNUMSUB.KOSTNAD = 0 AND KALKNUMSUB.TIMMAR = 0 /*AND KALKNUMSUB.PRIS = 0*/  THEN DO:
            DELETE KALKNUMSUB.
         END.   
         ELSE DO:
            ASSIGN 
            KALKNUMSUB.FRIBENAMNING = KALKNUMSUB.BENAMNING         
            KALKNUMSUB.FRIKOSTNAD   = KALKNUMSUB.KOSTNAD
            KALKNUMSUB.FRIPRIS      = KALKNUMSUB.PRIS
            KALKNUMSUB.FRITIMMAR    = KALKNUMSUB.TIMMAR.
            CREATE kalknumsubtt.  
            BUFFER-COPY KALKNUMSUB TO kalknumsubtt. 
         END.  
      END.
      EMPTY TEMP-TABLE kalknumtt NO-ERROR.
      CREATE kalknumtt.
      BUFFER-COPY KALKNUM TO kalknumtt.
      kalknumtt.BERNUM = berkalknum.
      kalknumtt.TTRECID = RECID(kalknumtt).          
      RUN raknaenkod_UI (INPUT FALSE).
      FOR EACH kalknumsubtt:
         FIND FIRST KALKNUMSUB WHERE KALKNUMSUB.KALKNR = kalknumsubtt.KALKNR AND
         KALKNUMSUB.OMRADE = kalknumsubtt.OMRADE AND
         KALKNUMSUB.NUM = kalknumsubtt.NUM AND
         KALKNUMSUB.KPID = kalknumsubtt.KPID 
         EXCLUSIVE-LOCK NO-ERROR.
         BUFFER-COPY kalknumsubtt TO KALKNUMSUB.
      END.
      FIND CURRENT KALKNUM EXCLUSIVE-LOCK NO-ERROR.
      BUFFER-COPY kalknumtt TO KALKNUM.
      EMPTY TEMP-TABLE kalknumtt NO-ERROR. 
      EMPTY TEMP-TABLE kalknumsubtt NO-ERROR.                  
   END.
   RELEASE KALKNUMSUB NO-ERROR.
   RELEASE KALKNUM NO-ERROR.    
END PROCEDURE.




/*KONVERTERA KALKYLEN ------------------------------------------------*/

