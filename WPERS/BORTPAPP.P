/*BORTPAPP.P*/
&Scoped-define NEW NEW
{GLOBVAR2DEL1.I}
DEFINE INPUT PARAMETER ganv AS CHARACTER NO-UNDO.
DEFINE INPUT PARAMETER pkod AS CHARACTER NO-UNDO.
DEFINE OUTPUT PARAMETER TABLE FOR felmeddtemp.
DEFINE BUFFER persbuff FOR PERSONALTAB.
DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.
DEFINE VARIABLE bloblog AS LOGICAL NO-UNDO.
{EXTRADATA.I}
{LOGSEKREGTT.I}
FIND FIRST FORETAG NO-LOCK NO-ERROR.
Guru.Konstanter:globforetag = FORETAG.FORETAG.
{FORESTYR.I}
IF Guru.Konstanter:varforetypval[2] = 1 THEN DO:
   RUN bort_UI.
END.
ELSE RUN bortkoll_UI.
PROCEDURE bortkoll_UI:
   FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = pkod NO-LOCK NO-ERROR.  
   /*FIND FIRST ANSVARIGTAB WHERE ANSVARIGTAB.PERSONALKOD = PERSONALTAB.PERSONALKOD 
   USE-INDEX ANSVG NO-LOCK NO-ERROR.
   IF AVAILABLE ANSVARIGTAB THEN DO:
      CREATE felmeddtemp.  
      felmeddtemp.FELMEDD = "Denna person är ansvarig tidregistrerare och kan ej tas bort." .
      RETURN. 
   END. */
   FIND FIRST GODKANNARTAB WHERE GODKANNARTAB.PERSONALKOD = PERSONALTAB.PERSONALKOD 
   USE-INDEX GODK NO-LOCK NO-ERROR.
   IF AVAILABLE GODKANNARTAB THEN DO:
      CREATE felmeddtemp.  
      felmeddtemp.FELMEDD = "Denna person är ansvarar för att godkänna tidsedlar och kan ej tas bort." .
      RETURN. 
   END. 
   IF Guru.Konstanter:globforetag = "XSUND" THEN Guru.Konstanter:globforetag = Guru.Konstanter:globforetag.
   ELSE DO:   
      FIND FIRST TIDREGITAB WHERE TIDREGITAB.PERSONALKOD = PERSONALTAB.PERSONALKOD AND
      TIDREGITAB.GODKAND = "" AND TIDREGITAB.VECKOKORD = "" USE-INDEX PVNR NO-LOCK NO-ERROR.
      IF AVAILABLE TIDREGITAB THEN DO:
         CREATE felmeddtemp.  
         felmeddtemp.FELMEDD = "Denna enhet har tidsedlar som ännu ej är godkända vecka " + STRING(TIDREGITAB.VECKONUMMER,"999") +
         " och kan därmed ej tas bort.".      
         RETURN. 
      END.  
      FIND FIRST TIDREGITAB WHERE TIDREGITAB.PERSONALKOD = PERSONALTAB.PERSONALKOD AND
      TIDREGITAB.VECKOKORD = "" 
      USE-INDEX PVNR NO-LOCK NO-ERROR.
      IF AVAILABLE TIDREGITAB THEN DO:
         CREATE felmeddtemp.  
         felmeddtemp.FELMEDD = "Denna enhet har tidsedlar som ännu ej är veckkörda vecka "  + STRING(TIDREGITAB.VECKONUMMER,"999") +
         " och kan därmed ej tas bort." .
         RETURN. 
      END. 
   END.
   RUN bort_UI.
END PROCEDURE.
PROCEDURE bort_UI:
   DO TRANSACTION:
      FIND FIRST ANVANDARE WHERE ANVANDARE.PERSONALKOD = pkod EXCLUSIVE-LOCK NO-ERROR.
      IF AVAILABLE ANVANDARE THEN DO:
         ANVANDARE.PERSONALKOD = "".
      END.
      FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = pkod EXCLUSIVE-LOCK NO-ERROR.  
      OPEN QUERY timq
      FOR EACH TIMKOSTNADSTAB WHERE TIMKOSTNADSTAB.PERSONALKOD = PERSONALTAB.PERSONALKOD
      USE-INDEX PRISPERS NO-LOCK.
      GET FIRST timq EXCLUSIVE-LOCK.
      DO WHILE AVAILABLE(TIMKOSTNADSTAB):    
         DELETE TIMKOSTNADSTAB.
         GET NEXT timq EXCLUSIVE-LOCK. 
      END.                    
      CLOSE QUERY timq.
      OPEN QUERY ptimq
      FOR EACH PERSONALPRIS WHERE PERSONALPRIS.PERSONALKOD = PERSONALTAB.PERSONALKOD
      NO-LOCK.
      GET FIRST ptimq EXCLUSIVE-LOCK.
      DO WHILE AVAILABLE(PERSONALPRIS):    
         DELETE PERSONALPRIS.
         GET NEXT ptimq EXCLUSIVE-LOCK. 
      END.                    
      CLOSE QUERY ptimq.
      OPEN QUERY psekq
      FOR EACH PERSEK WHERE PERSEK.PERSONALKOD = PERSONALTAB.PERSONALKOD 
      USE-INDEX PERSONALKOD NO-LOCK.
      GET FIRST psekq EXCLUSIVE-LOCK.
      DO WHILE AVAILABLE(PERSEK):    
         CREATE logsekregTT.
         ASSIGN 
         logsekregTT.ANVANDARE = PERSEK.ANVANDARE
         logsekregTT.DATUM  = NOW 
         logsekregTT.AVANVANDARE = ganv
         logsekregTT.PROGRAM = THIS-PROCEDURE:NAME 
         logsekregTT.TYP = "PERS"
         logsekregTT.PERSONALKOD = PERSONALTAB.PERSONALKOD
         logsekregTT.TILLFRAN = FALSE.
         RUN LOGSEKREG.P (INPUT TABLE logsekregTT).
         DELETE logsekregTT.   
         DELETE PERSEK.
         GET NEXT psekq EXCLUSIVE-LOCK. 
      END.   
      CLOSE QUERY psekq.
      OPEN QUERY tsekq
      FOR EACH TIDSEK WHERE TIDSEK.PERSONALKOD = PERSONALTAB.PERSONALKOD 
      USE-INDEX PERSONALKOD NO-LOCK.
      GET FIRST tsekq EXCLUSIVE-LOCK.
      DO WHILE AVAILABLE(TIDSEK):    
         CREATE logsekregTT.
         ASSIGN 
         logsekregTT.ANVANDARE = TIDSEK.ANVANDARE
         logsekregTT.DATUM  = NOW 
         logsekregTT.AVANVANDARE = ganv
         logsekregTT.PROGRAM = THIS-PROCEDURE:NAME 
         logsekregTT.TYP = "TID"
         logsekregTT.PERSONALKOD = PERSONALTAB.PERSONALKOD
         logsekregTT.TILLFRAN = FALSE.
         RUN LOGSEKREG.P (INPUT TABLE logsekregTT).
         DELETE logsekregTT.     
         DELETE TIDSEK. 
         GET NEXT tsekq EXCLUSIVE-LOCK.                     
      END.   
      CLOSE QUERY tsekq.                                 
      FIND FIRST persbuff WHERE persbuff.ANSVARIGTIDR = PERSONALTAB.ANSVARIGTIDR AND
      RECID(persbuff) NE RECID(PERSONALTAB)
      USE-INDEX ANSVT NO-LOCK NO-ERROR.                                                          
      IF NOT AVAILABLE persbuff THEN DO:
         FIND FIRST ANSVARIGTAB WHERE ANSVARIGTAB.PERSONALKOD = PERSONALTAB.ANSVARIGTIDR
         USE-INDEX ANSVG EXCLUSIVE-LOCK NO-ERROR.     
         IF AVAILABLE ANSVARIGTAB THEN DO:
            DELETE ANSVARIGTAB.
         END. 
      END.      
      FIND FIRST persbuff WHERE persbuff.TIDSGODK = PERSONALTAB.TIDSGODK AND
      RECID(persbuff) NE RECID(PERSONALTAB)
      USE-INDEX GODK NO-LOCK NO-ERROR.           
      IF NOT AVAILABLE persbuff THEN DO:
         FIND FIRST GODKANNARTAB WHERE GODKANNARTAB.PERSONALKOD = PERSONALTAB.TIDSGODK 
         USE-INDEX GODK EXCLUSIVE-LOCK NO-ERROR.     
         IF AVAILABLE GODKANNARTAB THEN DO:
            DELETE GODKANNARTAB.
         END.
      END.   
      FIND FIRST BEREDAONR WHERE BEREDAONR.PERSONALKOD = PERSONALTAB.PERSONALKOD 
      USE-INDEX PERSONALKOD EXCLUSIVE-LOCK NO-ERROR. 
      IF AVAILABLE BEREDAONR THEN DO:
         DELETE BEREDAONR.
      END.   
      FIND FIRST ANSVAONR WHERE ANSVAONR.PERSONALKOD = PERSONALTAB.PERSONALKOD 
      USE-INDEX PERSONALKOD EXCLUSIVE-LOCK NO-ERROR.   
      IF AVAILABLE ANSVAONR THEN DO:
         DELETE ANSVAONR.
      END.
      FIND FIRST EXTRADATA WHERE EXTRADATA.PROGRAM = "AOPROJ" AND EXTRADATA.HUVUDCH = PERSONALTAB.PERSONALKOD USE-INDEX HCH EXCLUSIVE-LOCK NO-ERROR.
      IF AVAILABLE EXTRADATA THEN DO:
         DELETE EXTRADATA.
      END.
      FIND FIRST EXTRADATA WHERE EXTRADATA.HUVUDCH = PERSONALTAB.PERSONALKOD
      AND EXTRADATA.PROGRAM = "OTBEORD" USE-INDEX HCH EXCLUSIVE-LOCK NO-ERROR.   
      IF AVAILABLE EXTRADATA THEN DO:
         DELETE EXTRADATA.
      END.
      OPEN QUERY ppq FOR EACH PERSONALPROJEKT WHERE 
      PERSONALPROJEKT.PERSONALKOD = PERSONALTAB.PERSONALKOD NO-LOCK.
      GET FIRST ppq EXCLUSIVE-LOCK.
      DO WHILE AVAILABLE(PERSONALPROJEKT):
         DELETE PERSONALPROJEKT.
         GET NEXT ppq EXCLUSIVE-LOCK.
      END.
      FIND FIRST FLEXSALDO WHERE FLEXSALDO.PERSONALKOD = PERSONALTAB.PERSONALKOD    EXCLUSIVE-LOCK NO-ERROR. 
      IF AVAILABLE FLEXSALDO THEN DO:
         DELETE FLEXSALDO.
      END.
         
      CREATE BORTPERS.
      ASSIGN
      BORTPERS.ANSTALLNING = ganv   
      BORTPERS.PERSONALKOD = PERSONALTAB.PERSONALKOD 
      BORTPERS.PERSONNUMMER = PERSONALTAB.PERSONNUMMER
      BORTPERS.FORNAMN = PERSONALTAB.FORNAMN
      BORTPERS.EFTERNAMN = PERSONALTAB.EFTERNAMN
      BORTPERS.OMRADE = PERSONALTAB.OMRADE
      BORTPERS.PERSMASK = PERSONALTAB.PERSMASK
      BORTPERS.DATUM = TODAY.           
      DELETE PERSONALTAB.  
   END.
   RUN bortfaktor (INPUT pkod).
   RUN bortdispens (INPUT pkod).
   RUN bortavafor (INPUT pkod).
   
END PROCEDURE.

PROCEDURE bortfaktor:
   DEFINE INPUT PARAMETER pkod AS CHARACTER NO-UNDO.
   RUN FINNSTABELL.P (INPUT "EXTRADATA", OUTPUT bloblog).
   IF bloblog = FALSE THEN RETURN.
   RUN EXTRADATAHMT.P PERSISTENT SET edataapph.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "PFAKTOR"                   
   inextradatatemp.HUVUDCH = pkod.
   FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = pkod NO-LOCK NO-ERROR.
   IF NOT AVAILABLE PERSONALTAB THEN DO:
      RUN exbort_UI IN edataapph (INPUT TABLE inextradatatemp).        
   END.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph. 
   edataapph = ?.
END PROCEDURE.
PROCEDURE bortdispens:
   DEFINE INPUT PARAMETER pkod AS CHARACTER NO-UNDO.
   RUN FINNSTABELL.P (INPUT "EXTRADATA", OUTPUT bloblog).
   IF bloblog = FALSE THEN RETURN.
   RUN EXTRADATAHMT.P PERSISTENT SET edataapph.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "DISPENSÖ"                   
   inextradatatemp.HUVUDCH = pkod.
   FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = pkod NO-LOCK NO-ERROR.
   IF NOT AVAILABLE PERSONALTAB THEN DO:
      RUN exbort_UI IN edataapph (INPUT TABLE inextradatatemp).        
   END.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "DISPENSÖM"                   
   inextradatatemp.HUVUDCH = pkod.
   FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = pkod NO-LOCK NO-ERROR.
   IF NOT AVAILABLE PERSONALTAB THEN DO:
      RUN exbort_UI IN edataapph (INPUT TABLE inextradatatemp).        
   END.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "DISPENSLÄ"                   
   inextradatatemp.HUVUDCH = pkod.
   FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = pkod NO-LOCK NO-ERROR.
   IF NOT AVAILABLE PERSONALTAB THEN DO:
      RUN exbort_UI IN edataapph (INPUT TABLE inextradatatemp).        
   END.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph. 
   edataapph = ?.
END PROCEDURE.

PROCEDURE bortavafor:
   DEFINE INPUT PARAMETER pkod AS CHARACTER NO-UNDO.
   RUN FINNSTABELL.P (INPUT "EXTRADATA", OUTPUT bloblog).
   IF bloblog = FALSE THEN RETURN.
   RUN EXTRADATAHMT.P PERSISTENT SET edataapph.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "AVAFOR"                   
   inextradatatemp.HUVUDCH = pkod.   
   RUN exbort_UI IN edataapph (INPUT TABLE inextradatatemp).           
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph. 
   edataapph = ?.
END PROCEDURE.

