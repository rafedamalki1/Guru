/*KOMPMANTAB.P.  KOMPSALDO KORNING*/

DEFINE VARIABLE perkomp AS INTEGER NO-UNDO.
DEFINE VARIABLE pkomp AS INTEGER NO-UNDO.
DEFINE VARIABLE totsal AS DECIMAL FORMAT "99.99" NO-UNDO.
DEFINE TEMP-TABLE overhelak
   FIELD KOMPTOT AS DECIMAL      
   FIELD KOMPUTTOT AS DECIMAL
   FIELD KOMPINUTTOT AS DECIMAL     
   FIELD PERSONALKOD LIKE TIDREGITAB.PERSONALKOD    
   FIELD NAMN AS CHARACTER FORMAT "X(30)"
   FIELD OMRADE AS CHARACTER
   FIELD GEOMRADE AS CHARACTER
   FIELD VERKOV AS DECIMAL
   FIELD VERKKO AS DECIMAL
   INDEX PKOD PERSONALKOD.

DEFINE NEW SHARED VARIABLE fnytid AS DECIMAL FORMAT "-99.99" NO-UNDO.       
DEFINE NEW SHARED VARIABLE nytid AS DECIMAL FORMAT "99.99" NO-UNDO.
DEFINE NEW SHARED VARIABLE sekunder AS INTEGER FORMAT "-9999999" NO-UNDO.

DEFINE NEW SHARED VARIABLE musz AS LOGICAL NO-UNDO.  
DEFINE NEW SHARED VARIABLE regdatum AS DATE NO-UNDO.


/*DEFINE NEW SHARED VARIABLE globanv LIKE ANVANDARE.ANVANDARE NO-UNDO.*/
DEFINE NEW SHARED VARIABLE korvar AS CHARACTER NO-UNDO.


DEFINE VARIABLE kompaonr AS CHARACTER NO-UNDO.
DEFINE VARIABLE komplog AS LOGICAL NO-UNDO.

    

FUNCTION klock100 RETURNS DECIMAL
  ( INPUT ber60 AS DECIMAL ):
/*------------------------------------------------------------------------------
  Purpose:  
    Notes:  
------------------------------------------------------------------------------*/

  RETURN  (TRUNCATE(ber60,0) * 3600 + (ber60 - TRUNCATE(ber60,0)) * 100 * 60) / 3600.

END FUNCTION.
FUNCTION klock60 RETURNS DECIMAL
  ( INPUT ber100 AS DECIMAL ):
/*------------------------------------------------------------------------------
  Purpose:  
    Notes:  
------------------------------------------------------------------------------*/

  RETURN  TRUNCATE(ber100,0) + ((ber100 - TRUNCATE(ber100,0)) * 60 / 100 ).

END FUNCTION.

PROCEDURE skapkompsaldo_UI :
DEFINE INPUT  PARAMETER TABLE FOR overhelak.
DEFINE INPUT  PARAMETER vkdatum AS DATE .   
      DEBUGGER:SET-BREAK().
      FOR EACH KPSALDOFOR  EXCLUSIVE-LOCK:
         DELETE KPSALDOFOR.
      END.
      FOR EACH KOMPSALDO NO-LOCK:
         CREATE KPSALDOFOR.
         BUFFER-COPY KOMPSALDO TO KPSALDOFOR.
      END.
      FOR EACH overhelak NO-LOCK:
        DO TRANSACTION: 
           FIND FIRST KOMPSALDO WHERE KOMPSALDO.PERSONALKOD = overhelak.PERSONALKOD
           USE-INDEX PKOD EXCLUSIVE-LOCK NO-ERROR.
           IF NOT AVAILABLE KOMPSALDO  THEN DO:
              CREATE KOMPSALDO.
              KOMPSALDO.PERSONALKOD = overhelak.PERSONALKOD.              
           END.
           /*ACCKOMP -    Ingående kompsaldo
             ACKOMPF -    Förra körningens ACCKOMP
             PERIODKOMP - Körningens kompsaldo
             BACKOMP -    Förra körningens PERIODKOMP
           */                         
           KOMPSALDO.ACKOMPF = KOMPSALDO.ACCKOMP.
           KOMPSALDO.ACCKOMP =  klock60(klock100(KOMPSALDO.ACCKOMP) + klock100(KOMPSALDO.PERIODKOMP)).
           ASSIGN
           KOMPSALDO.BACKOMP = KOMPSALDO.PERIODKOMP           
           KOMPSALDO.PERIODKOMP = klock60(overhelak.KOMPINUTTOT)
           KOMPSALDO.PERIODINKOMP = klock60(overhelak.KOMPTOT)
           KOMPSALDO.PERIODUTKOMP = klock60(overhelak.KOMPUTTOT)
           KOMPSALDO.KORDTOM = vkdatum.                      
           CREATE  KSALDMAN.
           ASSIGN        
           KSALDMAN.PERSONALKOD = KOMPSALDO.PERSONALKOD
           KSALDMAN.PERIODKOMP = KOMPSALDO.PERIODKOMP
           KSALDMAN.PERIODINKOMP = KOMPSALDO.PERIODINKOMP
           KSALDMAN.PERIODUTKOMP = KOMPSALDO.PERIODUTKOMP
           KSALDMAN.KORDTOM = KOMPSALDO.KORDTOM           
           KSALDMAN.ACCKOMP =  KOMPSALDO.ACCKOMP.
        END.         
      END.        
      RELEASE KOMPSALDO.
      RELEASE KSALDMAN.
      
END PROCEDURE.

PROCEDURE viskompsal :
DEFINE INPUT  PARAMETER pkod AS CHARACTER.
DEFINE INPUT  PARAMETER adat AS DATE.
DEFINE OUTPUT  PARAMETER acckompvman AS DECIMAL.
DEFINE OUTPUT  PARAMETER acckompvmandat AS DATE.
DEFINE OUTPUT  PARAMETER acckompsenast AS DECIMAL.
DEFINE OUTPUT  PARAMETER acckompsenastdat AS DATE .

FIND FIRST KOMPSALDO WHERE KOMPSALDO.PERSONALKOD = pkod NO-LOCK NO-ERROR.
IF AVAILABLE KOMPSALDO THEN DO:
   ASSIGN
   acckompsenast = klock100(KOMPSALDO.ACCKOMP) + klock100(KOMPSALDO.PERIODKOMP).   
   acckompsenastdat = KOMPSALDO.KORDTOM. 
END.
FIND FIRST KSALDMAN WHERE KSALDMAN.PERSONALKOD = pkod AND YEAR(KSALDMAN.KORDTOM) = YEAR(adat) AND MONTH(KSALDMAN.KORDTOM) = MONTH(adat)  NO-LOCK NO-ERROR.
IF AVAILABLE KSALDMAN THEN DO:
   ASSIGN
   acckompvman = klock60(klock100(KSALDMAN.ACCKOMP) + klock100(KSALDMAN.PERIODKOMP)).   
   acckompvmandat = KSALDMAN.KORDTOM. 
    
END.   
ELSE  DO :
   FIND FIRST KSALDMAN WHERE KSALDMAN.PERSONALKOD = pkod AND KSALDMAN.KORDTOM < adat  NO-LOCK NO-ERROR.
   IF AVAILABLE KSALDMAN THEN DO:
      ASSIGN
      acckompvman = KSALDMAN.ACCKOMP
      acckompvmandat = KSALDMAN.KORDTOM. 
       
   END.
END.   
END PROCEDURE.       
   
   