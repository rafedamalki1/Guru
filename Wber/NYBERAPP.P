
/*NYBERAPP.P   */

{BERTEMPTAB.I} 
DEFINE INPUT  PARAMETER classerkollin AS CHARACTER NO-UNDO.
{STARTFORAPPC.I}
DEFINE TEMP-TABLE extravalbertemp NO-UNDO LIKE valberedningtemp.
DEFINE BUFFER berbuff FOR BEREDNING.

PROCEDURE omr_UI :
   DEFINE INPUT PARAMETER cmbomr AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER varkalknr AS INTEGER NO-UNDO.
   FIND FIRST OMRADETAB WHERE OMRADETAB.NAMN = cmbomr AND OMRADETAB.ELVOMRKOD = 0
      USE-INDEX OMRNAMN NO-LOCK NO-ERROR.
   FIND LAST berbuff WHERE berbuff.OMRADE = OMRADETAB.OMRADE
   USE-INDEX BERNR NO-LOCK NO-ERROR.
   IF AVAILABLE berbuff THEN varkalknr = berbuff.BERNR + 1.
   ELSE varkalknr = 1. 
END PROCEDURE.


{EJVALAONR.I}


PROCEDURE valaonr_UI :
   DEFINE INPUT PARAMETER valaonr AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valdelnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER omrnamn AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER klktext AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER klknr AS INTEGER NO-UNDO.
   FIND FIRST AONRTAB WHERE AONRTAB.AONR = valaonr AND
      AONRTAB.DELNR = valdelnr NO-LOCK NO-ERROR.
   IF AVAILABLE AONRTAB THEN DO:
      FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = AONRTAB.OMRADE AND OMRADETAB.ELVOMRKOD = 0 USE-INDEX OMR NO-LOCK NO-ERROR.
      IF NOT AVAILABLE OMRADETAB THEN DO:
         FIND FIRST OMRADETAB WHERE OMRADETAB.ELVOMRKOD = 0 USE-INDEX OMR NO-LOCK NO-ERROR.
      END.       
      omrnamn = OMRADETAB.NAMN.             
      klktext = AONRTAB.ORT.
      FIND LAST berbuff WHERE berbuff.OMRADE = OMRADETAB.OMRADE
      USE-INDEX BERNR NO-LOCK NO-ERROR.
      IF AVAILABLE berbuff THEN DO:
         klknr = berbuff.BERNR + 1.
      END.   
      ELSE DO:
         klknr = 1.
      END.
   END.  
   
END PROCEDURE.

PROCEDURE andraladd_UI :
   DEFINE INPUT PARAMETER valomrade AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valbernr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER omrnamn AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER anv AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER klknr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER klktext AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER togklk AS LOGICAL NO-UNDO.
   FIND FIRST BEREDNING WHERE BEREDNING.OMRADE = valomrade AND
   BEREDNING.BERNR = valbernr NO-LOCK NO-ERROR. 
   IF AVAILABLE BEREDNING THEN DO:
      FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = valomrade 
      USE-INDEX OMR NO-LOCK NO-ERROR.         
      IF AVAILABLE OMRADETAB THEN DO:
         omrnamn = OMRADETAB.NAMN.         
      END.
      ASSIGN
      anv = BEREDNING.ANVANDARE          
      klknr = BEREDNING.BERNR
      klktext = BEREDNING.BENAMNING
      togklk = BEREDNING.KALKYL.
            
   END.   
END PROCEDURE.

PROCEDURE nyomr_UI :
   DEFINE INPUT PARAMETER cmbomr AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER vart AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER klknr AS INTEGER NO-UNDO.
   FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = cmbomr AND OMRADETAB.ELVOMRKOD = 0 
   USE-INDEX OMRNAMN NO-LOCK NO-ERROR.
   IF vart = "NYA" THEN DO:
      IF AVAILABLE OMRADETAB THEN DO:
         FIND LAST berbuff WHERE berbuff.OMRADE = OMRADETAB.OMRADE
         USE-INDEX BERNR NO-LOCK NO-ERROR.
         IF AVAILABLE berbuff THEN klknr = berbuff.BERNR + 1.
         ELSE klknr = 1.          
      END.
      ELSE klknr = 0.
   END.
END PROCEDURE.
PROCEDURE ny_UI :
   DEFINE INPUT PARAMETER cmbomr AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER vart AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER klknr AS INTEGER NO-UNDO.
   FIND FIRST OMRADETAB WHERE OMRADETAB.NAMN = cmbomr AND OMRADETAB.ELVOMRKOD = 0 
   USE-INDEX OMRNAMN NO-LOCK NO-ERROR.
   IF vart = "NYA" THEN DO:
      FIND LAST berbuff WHERE berbuff.OMRADE = OMRADETAB.OMRADE
      USE-INDEX BERNR NO-LOCK NO-ERROR.
      IF AVAILABLE berbuff THEN klknr = berbuff.BERNR + 1.
      ELSE klknr = 1.          
   END.   
END PROCEDURE.

PROCEDURE ny2_UI :
   DEFINE INPUT PARAMETER cmbomr AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER vart AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER klknr AS INTEGER NO-UNDO.
   FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = cmbomr AND OMRADETAB.ELVOMRKOD = 0 NO-LOCK NO-ERROR.
   IF vart = "NYA" THEN 
   DO:
      FIND LAST berbuff WHERE berbuff.OMRADE = OMRADETAB.OMRADE
         USE-INDEX BERNR NO-LOCK NO-ERROR.
      IF AVAILABLE berbuff THEN klknr = berbuff.BERNR + 1.
      ELSE klknr = 1.          
   END.   
END PROCEDURE.


PROCEDURE reg_UI :
   /*
   DEFINE INPUT PARAMETER classer AS CHARACTER NO-UNDO.
   */
   DEFINE INPUT PARAMETER cmbomr AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER vart AS CHARACTER NO-UNDO.
   DEFINE INPUT-OUTPUT PARAMETER valaonr AS CHARACTER NO-UNDO.
   DEFINE INPUT-OUTPUT PARAMETER valdelnr AS INTEGER NO-UNDO.
   DEFINE INPUT-OUTPUT PARAMETER valomrade AS CHARACTER NO-UNDO.
   DEFINE INPUT-OUTPUT PARAMETER valbernr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER anv AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER klknr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER klktext AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER togklk AS LOGICAL NO-UNDO.
   DEFINE INPUT-OUTPUT PARAMETER TABLE FOR extravalbertemp.
   DEFINE OUTPUT PARAMETER valort AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER katvar AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR felmeddtemp.
   DEFINE VARIABLE artalvar AS INTEGER NO-UNDO.
   DEFINE VARIABLE LocalAppServerHandle AS HANDLE NO-UNDO.
   DEFINE VARIABLE berrec AS RECID NO-UNDO.
   DEFINE VARIABLE uppaonr AS CHARACTER NO-UNDO.
   DEFINE VARIABLE uppdelnr AS INTEGER NO-UNDO.
   DEFINE BUFFER uppbuff FOR BERUPP.
   EMPTY TEMP-TABLE felmeddtemp NO-ERROR. 
   FIND FIRST extravalbertemp NO-LOCK NO-ERROR.
   IF vart = "NYAKB" THEN DO:
      FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = cmbomr AND OMRADETAB.ELVOMRKOD = 0 
      USE-INDEX OMRNAMN NO-LOCK NO-ERROR.
      vart = "NYA".
   END.
   ELSE DO:
      FIND FIRST OMRADETAB WHERE OMRADETAB.NAMN = cmbomr AND OMRADETAB.ELVOMRKOD = 0 
      USE-INDEX OMRNAMN NO-LOCK NO-ERROR.
   END.  
   IF NOT AVAILABLE OMRADETAB THEN DO:
      FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = valomrade  
      NO-LOCK NO-ERROR.
   END. 
   DO TRANSACTION:
      IF vart = "NYA" THEN DO:
         CREATE BEREDNING.
      END.
      ELSE DO:
         FIND FIRST BEREDNING WHERE BEREDNING.OMRADE = valomrade AND
         BEREDNING.BERNR = valbernr EXCLUSIVE-LOCK NO-ERROR. 
      END.
      ASSIGN       
      BEREDNING.ANVANDARE = anv          
      BEREDNING.BERNR = klknr
      BEREDNING.BERAONR = STRING(klknr)
      BEREDNING.BENAMNING = klktext                   
      BEREDNING.OMRADE = OMRADETAB.OMRADE
      BEREDNING.KALKYL = togklk
      berrec = RECID(BEREDNING). 
      BUFFER-COPY BEREDNING TO extravalbertemp.
       
      
      IF valaonr NE ? THEN DO:
         FIND FIRST AONRTAB WHERE AONRTAB.AONR = valaonr AND
         AONRTAB.DELNR = valdelnr NO-LOCK NO-ERROR.
         IF AVAILABLE AONRTAB THEN DO:               
            FIND FIRST KALKAONR WHERE KALKAONR.AONR = AONRTAB.AONR AND
            KALKAONR.DELNR = AONRTAB.DELNR AND KALKAONR.TYP = 3 NO-LOCK NO-ERROR.
            IF AVAILABLE KALKAONR THEN DO:
               /*Anders Olsson Elpool i Umeå AB  26 jan 2018 10:07:17 
      behövs inte längre
      
               IF togklk = TRUE AND kalkvar = FALSE THEN DO:
                  CREATE felmeddtemp.
                  felmeddtemp.FELMEDD = "Koppling av kalkyl ej möjlig då det finns en P3-kalkyl kopplad till Aonr:et".
                  felmeddtemp.VAL = 1.
                  RETURN.
               END.
               ELSE DO:
                  ASSIGN
                  BEREDNING.AONR = AONRTAB.AONR
                  BEREDNING.DELNR = AONRTAB.DELNR.                  
               END.
               */
               ASSIGN
                  BEREDNING.AONR = AONRTAB.AONR
                  BEREDNING.DELNR = AONRTAB.DELNR.
            END.
            ELSE DO:
               ASSIGN
               BEREDNING.AONR = AONRTAB.AONR
               BEREDNING.DELNR = AONRTAB.DELNR.               
            END.            
         END.  
         IF vart = "NYA" THEN DO:        
            IF Guru.Konstanter:globforetag = "UMEA" THEN DO:                  
               ASSIGN
               uppaonr = AONRTAB.AONR
               uppdelnr = AONRTAB.DELNR.                              
               FIND FIRST BEREDNING WHERE BEREDNING.AONR = uppaonr AND
               BEREDNING.DELNR NE uppdelnr NO-LOCK NO-ERROR.
               IF AVAILABLE BEREDNING THEN DO:                  
                  OPEN QUERY uq FOR EACH BERUPP WHERE BERUPP.AONR = BEREDNING.BERAONR AND
                  BERUPP.OMRADE = BEREDNING.OMRADE NO-LOCK.
                  GET FIRST uq NO-LOCK.
                  DO WHILE AVAILABLE(BERUPP):
                     CREATE uppbuff.
                     BUFFER-COPY berupp TO uppbuff.
                     ASSIGN
                     uppbuff.AONR = STRING(klknr).
                     GET NEXT uq NO-LOCK.
                  END.                  
               END.     
               FIND BEREDNING WHERE RECID(BEREDNING) = berrec EXCLUSIVE-LOCK NO-ERROR.
            END.
         END.
      END.  
      /*Anders Olsson Elpool i Umeå AB  5 sep 2016 13:42:22 
        RUN KALKBERAPPDS.p PERSISTENT SET LocalAppServerHandle (INPUT Guru.Konstanter:globanv). 
        RUN KalkArtal_UI IN  LocalAppServerHandle  (OUTPUT artalvar).
      */
      FIND LAST KALKYLKATALOG WHERE KALKYLKATALOG.BENAMNING BEGINS "EBR" USE-INDEX VISARTAL NO-LOCK NO-ERROR.
      IF AVAILABLE KALKYLKATALOG THEN artalvar = KALKYLKATALOG.VISARTAL.
      ELSE artalvar = YEAR(TODAY).
      BEREDNING.KATAR = artalvar.
      IF VALID-HANDLE(LocalAppServerHandle) THEN DO:
         RUN avsluta_UI IN LocalAppServerHandle.
         DELETE PROCEDURE LocalAppServerHandle.
         LocalAppServerHandle = ?.
      END.   
   END.
   BUFFER-COPY BEREDNING TO extravalbertemp.
   ASSIGN
   valaonr = BEREDNING.BERAONR
   valdelnr = BEREDNING.DELNR
   valbernr = BEREDNING.BERNR
   valomrade = BEREDNING.OMRADE
   valort = BEREDNING.BENAMNING
   katvar = BEREDNING.KATAR.  
   IF BEREDNING.KALKYL = FALSE THEN DO TRANSACTION:
      FIND FIRST BERKALK WHERE BERKALK.AONR = BEREDNING.BERAONR AND
      BERKALK.OMRADE = BEREDNING.OMRADE USE-INDEX OMR EXCLUSIVE-LOCK NO-ERROR.
      IF AVAILABLE BERKALK THEN DO:
         CREATE felmeddtemp.
         ASSIGN 
         felmeddtemp.FELMEDD = "Ni har valt att ta bort P3-kalkyl som är kopplad till beredningen. Är detta korrekt?"
         felmeddtemp.VAL = 2.         
      END.
   END.
   RELEASE BERKALK NO-ERROR.
   RELEASE BEREDNING NO-ERROR.
   FIND FIRST BETFRIA WHERE BETFRIA.BETNR = klknr AND
   BETFRIA.FAKTTEXT = valomrade 
   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE BETFRIA THEN DO:
      FIND FIRST HUVUDLEV WHERE HUVUDLEV.Dep-Nr = 999 NO-LOCK NO-ERROR.
      RUN andlev_UI  (INPUT valomrade,INPUT klknr,INPUT HUVUDLEV.LEVKOD).
   END.      
END PROCEDURE.

PROCEDURE delberklk_UI :
   DEFINE INPUT PARAMETER valaonr AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valomr AS CHARACTER NO-UNDO.
   OPEN QUERY kalkq FOR EACH BERKALK WHERE BERKALK.AONR = valaonr AND
   BERKALK.OMRADE = valomr USE-INDEX OMR NO-LOCK.
   GET FIRST kalkq EXCLUSIVE-LOCK.
   DO WHILE AVAILABLE(BERKALK):
      DELETE BERKALK.
      GET NEXT kalkq EXCLUSIVE-LOCK.
   END.
   CLOSE QUERY kalkq.   
END PROCEDURE.

PROCEDURE klktrue_UI :
   DEFINE INPUT PARAMETER valomrade AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valbernr AS INTEGER NO-UNDO.
   DO TRANSACTION:
      FIND FIRST BEREDNING WHERE BEREDNING.OMRADE = valomrade AND
      BEREDNING.BERNR = valbernr AND BEREDNING.KALKYL = FALSE EXCLUSIVE-LOCK NO-ERROR. 
      IF AVAILABLE BEREDNING THEN DO:
         ASSIGN            
         BEREDNING.KALKYL = TRUE.
      END.
   END.
   RELEASE BEREDNING NO-ERROR.
   
END PROCEDURE.

 
PROCEDURE andlev_UI :
   DEFINE INPUT PARAMETER valomrade AS CHARACTER NO-UNDO.   
   DEFINE INPUT PARAMETER klknr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER vald_lev AS CHARACTER NO-UNDO.
   DO TRANSACTION:
      FIND FIRST BETFRIA WHERE BETFRIA.BETNR = klknr AND
      BETFRIA.FAKTTEXT = valomrade 
      EXCLUSIVE-LOCK NO-ERROR.
      IF NOT AVAILABLE BETFRIA THEN DO:
         CREATE BETFRIA.
         ASSIGN
         BETFRIA.BETNR = klknr /*beredningsnummer*/
         BETFRIA.FAKTTEXT = valomrade. /*beredningens område*/
         BETFRIA.OANTAL = Guru.Konstanter:varforetypval[16].
      END.
      BETFRIA.TYP = vald_lev. /*vald leverantör för beredningen*/
   END.   
   RELEASE BETFRIA NO-ERROR. 
END PROCEDURE.

PROCEDURE hamtlev_UI :
   DEFINE INPUT PARAMETER valomrade AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valbernr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER vald_lev AS CHARACTER NO-UNDO.   
   FIND FIRST BETFRIA WHERE BETFRIA.FAKTTEXT = valomrade AND
   BETFRIA.BETNR = valbernr NO-LOCK NO-ERROR. 
   IF AVAILABLE BETFRIA THEN vald_lev = BETFRIA.TYP.         
   ELSE vald_lev = "".
END PROCEDURE.
