
/*------------------------------------------------------------------------
    File        : EBRKATFINNSMEDBEKGAPPDS.p
    Purpose     : KÖRS EJ???
    FRÅN
    Syntax      :

    Description : 
       

    Author(s)   : elpao
    Created     : Thu Aug 30 08:30:08 CEST 2012
    Notes       :
  ----------------------------------------------------------------------*/
&SCOPED-DEFINE NEW NEW
&SCOPED-DEFINE SHARED SHARED
{BLOB.I}
{GLOBVAR2DEL1.I}
  
{EKGKAT.I}
{EKGPRODATA.I}
DEFINE INPUT  PARAMETER inglobanv AS CHARACTER NO-UNDO.

FIND FIRST FORETAG WHERE NO-LOCK NO-ERROR.
Guru.Konstanter:globforetag = FORETAG.FORETAG.
RUN STYRFORE.P (INPUT Guru.Konstanter:globforetag).


DEFINE BUFFER EKGSUBKATBUF FOR EKGSUBKAT.
DEFINE BUFFER EKGMTRLBUF FOR EKGMTRL.
DEFINE BUFFER EKGREGELBUF FOR EKGREGEL.
DEFINE BUFFER EKGRESURSPRISBUF FOR EKGRESURSPRIS.
DEFINE BUFFER EKGPASLAGBUF FOR EKGPASLAG.
DEFINE BUFFER EKGRESURSPASLAGBUF FOR EKGRESURSPASLAG.
DEFINE BUFFER EKGNIVABUF FOR EKGNIVA.
DEFINE BUFFER EKGRESURSNIVABUF FOR EKGRESURSNIVA.

DEFINE BUFFER EKGP5BUF FOR EKGP5.
DEFINE BUFFER EKGP5RESURSBUF FOR EKGP5RESURS.
DEFINE BUFFER EKGP4BUF FOR EKGP4.
DEFINE BUFFER EKGP4RESURSBUF FOR EKGP4RESURS.
DEFINE BUFFER EKGP4FREKVENSBUF FOR EKGP4FREKVENS.
DEFINE BUFFER EKGP3ARBKODBUF FOR EKGP3ARBKOD.
DEFINE BUFFER EKGP3BUF FOR EKGP3.
DEFINE BUFFER EKGP3RESURSBUF FOR EKGP3RESURS.
DEFINE BUFFER EKGP3FREKVENSBUF FOR EKGP3FREKVENS.
DEFINE BUFFER EKGP2ARBKODBUF FOR EKGP2ARBKOD.
DEFINE BUFFER EKGP2BUF FOR EKGP2.
DEFINE BUFFER EKGP2RESURSBUF FOR EKGP2RESURS.
DEFINE BUFFER EKGP2FREKVENSBUF FOR EKGP2FREKVENS.
DEFINE BUFFER EKGP2MTRLBUF FOR EKGP2MTRL.
DEFINE BUFFER EKGP1ARBKODBUF FOR EKGP1ARBKOD.
DEFINE BUFFER EKGP1BUF FOR EKGP1.
DEFINE BUFFER EKGP1FREKVENSBUF FOR EKGP1FREKVENS.




PROCEDURE LaddaKataloger: 
   DEFINE OUTPUT PARAMETER TABLE FOR ekgsubkatalogerTT.
   EMPTY TEMP-TABLE ekgsubkatalogerTT NO-ERROR. 
   FOR EACH EKGSUBKAT:
      CREATE ekgsubkatalogerTT.
      ASSIGN
      ekgsubkatalogerTT.EKGSUBID = EKGSUBKAT.EKGSUBID
      ekgsubkatalogerTT.EBRKAT = EKGSUBKAT.EBRKAT
      ekgsubkatalogerTT.BENAMNING = EKGSUBKAT.BENAMNING 
      ekgsubkatalogerTT.ARTAL = EKGSUBKAT.ARTAL
      ekgsubkatalogerTT.STARTDATUM = EKGSUBKAT.STARTDATUM
      ekgsubkatalogerTT.SLUTDATUM = EKGSUBKAT.SLUTDATUM.
      ekgsubkatalogerTT.TTRECID = RECID(EKGSUBKAT).
   END.  
END PROCEDURE.

PROCEDURE Katspar: 
   DEFINE INPUT PARAMETER TABLE FOR eekgsubkatalogerTT.    
   FIND FIRST eekgsubkatalogerTT  NO-ERROR.
   FIND FIRST EKGSUBKAT  WHERE EKGSUBKAT.EKGSUBID = eekgsubkatalogerTT.EKGSUBID EXCLUSIVE-LOCK NO-ERROR.
   IF AVAILABLE EKGSUBKAT THEN DO:
      BUFFER-COPY eekgsubkatalogerTT TO EKGSUBKAT.
   END.       
   RELEASE EKGSUBKAT.    
   
   /*DEFINE INPUT PARAMETER TABLE FOR ekgsubkatalogerTT.    
   FOR EACH ekgsubkatalogerTT:
      DO TRANSACTION:      
         FIND FIRST EKGSUBKAT  WHERE EKGSUBKAT.EKGSUBID = ekgsubkatalogerTT.EKGSUBID EXCLUSIVE-LOCK NO-ERROR.
         IF AVAILABLE EKGSUBKAT THEN DO:
            BUFFER-COPY ekgsubkatalogerTT TO EKGSUBKAT.
         END.
      END.   
   END.   
   RELEASE EKGSUBKAT.*/    
END PROCEDURE.

/*EKGResursDS*/
{SparaProDatasSet.i EKGResursDS}
DEFINE QUERY EKGResursQuery FOR EKGRESURS.

DEFINE DATA-SOURCE EKGResursSrc FOR QUERY EKGResursQuery EKGRESURS KEYS (RESURSNR).   /*QUERY*/

DEFINE VARIABLE hEKGResursDS   AS HANDLE     NO-UNDO.         /*skapa handle till dataset*/
hEKGResursDS = DATASET EKGResursDS:HANDLE.      /*Koppling handle dataset*/
hEKGResursDS:SET-CALLBACK-PROCEDURE ("AFTER-FILL", "postDataSetFillEKGResursDS", THIS-PROCEDURE). 

PROCEDURE LaddaResurser: 
   DEFINE OUTPUT PARAMETER DATASET FOR EKGResursDS.
   DEFINE VARIABLE queryprepresurs AS CHARACTER NO-UNDO.
   DEFINE VARIABLE queryprepregel AS CHARACTER NO-UNDO.
   
   DATASET EKGResursDS:EMPTY-DATASET().
   queryprepresurs = "FOR EACH EKGRESURS NO-LOCK".
   
   QUERY EKGResursQuery:QUERY-PREPARE(queryprepresurs).
   
   RUN attachEKGResursDS.
   DATASET EKGResursDS:FILL().
   detachDataSetEKGResursDS(hEKGResursDS).
END PROCEDURE.


PROCEDURE attachEKGResursDS: /*Koppla HANDLE till SOURCE.      */
   hEKGResursDS:GET-BUFFER-HANDLE("ekgresursTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGResursSrc:HANDLE).
END PROCEDURE.

/*EKGSubKatDS*/
{SparaProDatasSet.i EKGSubKatDS}
DEFINE QUERY EKGSubKatQuery FOR EKGSUBKAT.

DEFINE DATA-SOURCE EKGSubKatSrc FOR QUERY EKGSubKatQuery EKGSUBKAT KEYS (EKGSUBID, EBRKAT).   /*EKGPSUBKAT QUERY*/
DEFINE DATA-SOURCE EKGNivaSrc FOR EKGNIVA KEYS (EKGSUBID, EBRKAT, NIVA).
DEFINE DATA-SOURCE EKGMtrlSrc FOR EKGMTRL KEYS (EKGSUBID, EBRKAT, ARTNR).
DEFINE DATA-SOURCE EKGPaslagSrc FOR EKGPASLAG KEYS (EKGSUBID, EBRKAT, PASLAGNR).
DEFINE DATA-SOURCE EKGRegelSrc FOR EKGREGEL KEYS (EKGSUBID, EBRKAT, REGELID).

DEFINE VARIABLE hEKGSubKatDS   AS HANDLE     NO-UNDO.         /*skapa handle till dataset*/
hEKGSubKatDS = DATASET EKGSubKatDS:HANDLE.      /*Koppling handle dataset*/
hEKGSubKatDS:SET-CALLBACK-PROCEDURE ("AFTER-FILL", "postDataSetFillEKGSubKatDS", THIS-PROCEDURE). 

PROCEDURE LaddaKatalog: 
   DEFINE INPUT PARAMETER ekgsubidvar AS INTEGER.
   DEFINE INPUT PARAMETER ebrkatvar AS CHARACTER.
   DEFINE OUTPUT PARAMETER DATASET FOR EKGSubKatDS.
   DEFINE VARIABLE queryprep AS CHARACTER NO-UNDO.
   DATASET EKGSubKatDS:EMPTY-DATASET().
   queryprep = "FOR EACH EKGSUBKAT WHERE EKGSUBKAT.EKGSUBID = " + STRING(ekgsubidvar) +  " AND EKGSUBKAT.EBRKAT = '" + STRING(ebrkatvar) + "' NO-LOCK".
   QUERY EKGSubKatQuery:QUERY-PREPARE(queryprep).
   RUN attachEKGSubKatDS.
   DATASET EKGSubKatDS:FILL().
   detachDataSetEKGSubKatDS(hEKGSubKatDS).
END PROCEDURE.

PROCEDURE attachEKGSubKatDS: /*Koppla HANDLE till SOURCE.      */
   hEKGSubKatDS:GET-BUFFER-HANDLE("ekgsubkatTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGSubKatSrc:HANDLE).
   hEKGSubKatDS:GET-BUFFER-HANDLE("ekgmtrlTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGMtrlSrc:HANDLE).
   hEKGSubKatDS:GET-BUFFER-HANDLE("ekgnivaTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGNivaSrc:HANDLE).
   hEKGSubKatDS:GET-BUFFER-HANDLE("ekgpaslagTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGPaslagSrc:HANDLE).
   hEKGSubKatDS:GET-BUFFER-HANDLE("ekgregelTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGRegelSrc:HANDLE).
END PROCEDURE.

/*EKGKatalogResursDS*/
{SparaProDatasSet.i EKGKatalogResursDS}
DEFINE QUERY EKGResursPrisQuery FOR EKGRESURSPRIS.
DEFINE QUERY EKGResursNivaQuery FOR EKGRESURSNIVA.
DEFINE QUERY EKGResursPaslagQuery FOR EKGRESURSPASLAG.

DEFINE DATA-SOURCE EKGResursPrisSrc FOR QUERY EKGResursPrisQuery EKGRESURSPRIS KEYS (EKGSUBID, EBRKAT, RESURSNR).   /*QUERY*/
DEFINE DATA-SOURCE EKGResursNivaSrc FOR QUERY EKGResursNivaQuery EKGRESURSNIVA KEYS (EKGSUBID, EBRKAT, RESURSNR, NIVA).   /*QUERY*/
DEFINE DATA-SOURCE EKGResursPaslagSrc FOR QUERY EKGResursPaslagQuery EKGRESURSPASLAG KEYS (EKGSUBID, EBRKAT, RESURSNR, PASLAGNR).   /*QUERY*/

DEFINE VARIABLE hEKGKatalogResursDS   AS HANDLE     NO-UNDO.         /*skapa handle till dataset*/
hEKGKatalogResursDS = DATASET EKGKatalogResursDS:HANDLE.      /*Koppling handle dataset*/
hEKGKatalogResursDS:SET-CALLBACK-PROCEDURE ("AFTER-FILL", "postDataSetFillEKGKatalogResursDS", THIS-PROCEDURE). 

PROCEDURE LaddaKatalogResurser: 
   DEFINE INPUT PARAMETER ekgsubidvar AS INTEGER.
   DEFINE INPUT PARAMETER ebrkatvar AS CHARACTER.
   DEFINE OUTPUT PARAMETER DATASET FOR EKGKatalogResursDS.
   DEFINE VARIABLE querypreppris AS CHARACTER NO-UNDO.
   DEFINE VARIABLE querypreppniva AS CHARACTER NO-UNDO.
   DEFINE VARIABLE querypreppaslag AS CHARACTER NO-UNDO.
   
   DATASET EKGKatalogResursDS:EMPTY-DATASET().
   querypreppris = "FOR EACH EKGRESURSPRIS WHERE EKGRESURSPRIS.EKGSUBID = " + STRING(ekgsubidvar) +  " AND EKGRESURSPRIS.EBRKAT = '" + STRING(ebrkatvar) + "' NO-LOCK".
   querypreppniva = "FOR EACH EKGRESURSNIVA WHERE EKGRESURSNIVA.EKGSUBID = " + STRING(ekgsubidvar) +  " AND EKGRESURSNIVA.EBRKAT = '" + STRING(ebrkatvar) + "' NO-LOCK".
   querypreppaslag = "FOR EACH EKGRESURSPASLAG WHERE EKGRESURSPASLAG.EKGSUBID = " + STRING(ekgsubidvar) + " AND EKGRESURSPASLAG.EBRKAT = '" + STRING(ebrkatvar) + "' NO-LOCK".
   
   QUERY EKGResursPrisQuery:QUERY-PREPARE(querypreppris).
   QUERY EKGResursNivaQuery:QUERY-PREPARE(querypreppniva).
   QUERY EKGResursPaslagQuery:QUERY-PREPARE(querypreppaslag).
   
   RUN attachEKGKatalogResursDS.
   DATASET EKGKatalogResursDS:FILL().
   detachDataSetEKGKatalogResursDS(hEKGKatalogResursDS).
END PROCEDURE.

PROCEDURE attachEKGKatalogResursDS: /*Koppla HANDLE till SOURCE.      */
   hEKGKatalogResursDS:GET-BUFFER-HANDLE("ekgresursprisTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGResursPrisSrc:HANDLE).
   hEKGKatalogResursDS:GET-BUFFER-HANDLE("ekgresursnivaTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGResursNivaSrc:HANDLE).
   hEKGKatalogResursDS:GET-BUFFER-HANDLE("ekgresurspaslagTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGResursPaslagSrc:HANDLE).
END PROCEDURE.

/*EKGP5DS*/
{SparaProDatasSet.i EKGP5DS}
DEFINE QUERY EKGP5Query FOR EKGP5.

DEFINE DATA-SOURCE EKGP5Src FOR QUERY EKGP5Query EKGP5 KEYS (EKGSUBID, EBRKAT, P5ARBKOD, P5LOPNR).   /*EKGP5 QUERY*/
DEFINE DATA-SOURCE EKGP5resursSrc FOR EKGP5RESURS KEYS (EKGSUBID, EBRKAT, P5ARBKOD, P5LOPNR, RESURSNR).

DEFINE VARIABLE hEKGP5DS   AS HANDLE     NO-UNDO.         /*skapa handle till dataset*/
hEKGP5DS = DATASET EKGP5DS:HANDLE.      /*Koppling handle dataset*/
hEKGP5DS:SET-CALLBACK-PROCEDURE ("AFTER-FILL", "postDataSetFillEKGP5DS", THIS-PROCEDURE). 

PROCEDURE LaddaP5: 
   DEFINE INPUT PARAMETER ekgsubidvar AS INTEGER.
   DEFINE INPUT PARAMETER ebrkatvar AS CHARACTER.
   DEFINE OUTPUT PARAMETER DATASET FOR EKGP5DS.
   DEFINE VARIABLE queryprep AS CHARACTER NO-UNDO.
   DATASET EKGP5DS:EMPTY-DATASET().
   queryprep = "FOR EACH EKGP5 WHERE EKGP5.EKGSUBID = " + STRING(ekgsubidvar) +  " AND EKGP5.EBRKAT = '" + STRING(ebrkatvar) + "' NO-LOCK".
   QUERY EKGP5Query:QUERY-PREPARE(queryprep).
   RUN attachEKGP5DS.
   DATASET EKGP5DS:FILL().
   detachDataSetEKGP5DS(hEKGP5DS).
END PROCEDURE.

PROCEDURE attachEKGP5DS: /*Koppla HANDLE till SOURCE.      */
   hEKGP5DS:GET-BUFFER-HANDLE("ekgp5TT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGP5Src:HANDLE).
   hEKGP5DS:GET-BUFFER-HANDLE("ekgp5resursTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGP5resursSrc:HANDLE).
END PROCEDURE.

/*EKGP4DS*/
{SparaProDatasSet.i EKGP4DS}
DEFINE QUERY EKGP4Query FOR EKGP4.

DEFINE DATA-SOURCE EKGP4Src FOR QUERY EKGP4Query EKGP4 KEYS (EKGSUBID, EBRKAT, P4ARBKOD, P4LOPNR).   /*EKGP4 QUERY*/
DEFINE DATA-SOURCE EKGP4resursSrc FOR EKGP4RESURS KEYS (EKGSUBID, EBRKAT, P4ARBKOD, P4LOPNR, RESURSNR).
DEFINE DATA-SOURCE EKGP4frekvensSrc FOR EKGP4FREKVENS KEYS (EKGSUBID, EBRKAT, P4ARBKOD, P4LOPNR, P5ARBKOD, P5LOPNR).

DEFINE VARIABLE hEKGP4DS   AS HANDLE     NO-UNDO.         /*skapa handle till dataset*/
hEKGP4DS = DATASET EKGP4DS:HANDLE.      /*Koppling handle dataset*/
hEKGP4DS:SET-CALLBACK-PROCEDURE ("AFTER-FILL", "postDataSetFillEKGP4DS", THIS-PROCEDURE). 

PROCEDURE LaddaP4: 
   DEFINE INPUT PARAMETER ekgsubidvar AS INTEGER.
   DEFINE INPUT PARAMETER ebrkatvar AS CHARACTER.
   DEFINE OUTPUT PARAMETER DATASET FOR EKGP4DS.
   DEFINE VARIABLE queryprep AS CHARACTER NO-UNDO.
   DATASET EKGP4DS:EMPTY-DATASET().
   queryprep = "FOR EACH EKGP4 WHERE EKGP4.EKGSUBID = " + STRING(ekgsubidvar) +  " AND EKGP4.EBRKAT = '" + STRING(ebrkatvar) + "' NO-LOCK". 
   QUERY EKGP4Query:QUERY-PREPARE(queryprep).
   RUN attachEKGP4DS.
   DATASET EKGP4DS:FILL().
   detachDataSetEKGP4DS(hEKGP4DS).
END PROCEDURE.

PROCEDURE attachEKGP4DS: /*Koppla HANDLE till SOURCE.      */
   hEKGP4DS:GET-BUFFER-HANDLE("ekgp4TT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGP4Src:HANDLE).
   hEKGP4DS:GET-BUFFER-HANDLE("ekgp4resursTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGP4resursSrc:HANDLE).
   hEKGP4DS:GET-BUFFER-HANDLE("ekgp4frekvensTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGP4frekvensSrc:HANDLE).
END PROCEDURE.

/*EKGP3DS*/
{SparaProDatasSet.i EKGP3DS}
DEFINE QUERY EKGP3Query FOR EKGP3.

DEFINE DATA-SOURCE EKGP3Src FOR QUERY EKGP3Query EKGP3 KEYS (EKGSUBID, EBRKAT, P3ARBKOD, P3LOPNR).   /*EKGP3 QUERY*/
DEFINE DATA-SOURCE EKGP3resursSrc FOR EKGP3RESURS KEYS (EKGSUBID, EBRKAT, P3ARBKOD, P3LOPNR, RESURSNR).
DEFINE DATA-SOURCE EKGP3frekvensSrc FOR EKGP3FREKVENS KEYS (EKGSUBID, EBRKAT, P3ARBKOD, P3LOPNR, P4ARBKOD, P4LOPNR).

DEFINE VARIABLE hEKGP3DS   AS HANDLE     NO-UNDO.         /*skapa handle till dataset*/
hEKGP3DS = DATASET EKGP3DS:HANDLE.      /*Koppling handle dataset*/
hEKGP3DS:SET-CALLBACK-PROCEDURE ("AFTER-FILL", "postDataSetFillEKGP3DS", THIS-PROCEDURE). 

PROCEDURE LaddaP3: 
   DEFINE INPUT PARAMETER ekgsubidvar AS INTEGER.
   DEFINE INPUT PARAMETER ebrkatvar AS CHARACTER.
   DEFINE OUTPUT PARAMETER DATASET FOR EKGP3DS.
   DEFINE VARIABLE queryprep AS CHARACTER NO-UNDO.
   DATASET EKGP3DS:EMPTY-DATASET().
   queryprep = "FOR EACH EKGP3 WHERE EKGP3.EKGSUBID = " + STRING(ekgsubidvar) +  " AND EKGP3.EBRKAT = '" + STRING(ebrkatvar) + "' NO-LOCK". 
   QUERY EKGP3Query:QUERY-PREPARE(queryprep).
   RUN attachEKGP3DS.
   DATASET EKGP3DS:FILL().
   detachDataSetEKGP3DS(hEKGP3DS).
END PROCEDURE.

PROCEDURE attachEKGP3DS: /*Koppla HANDLE till SOURCE.      */
   hEKGP3DS:GET-BUFFER-HANDLE("ekgp3TT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGP3Src:HANDLE).
   hEKGP3DS:GET-BUFFER-HANDLE("ekgp3resursTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGP3resursSrc:HANDLE).
   hEKGP3DS:GET-BUFFER-HANDLE("ekgp3frekvensTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGP3frekvensSrc:HANDLE).
END PROCEDURE.

/*EKGP2DS*/
{SparaProDatasSet.i EKGP2DS}
DEFINE QUERY EKGP2Query FOR EKGP2.

DEFINE DATA-SOURCE EKGP2Src FOR QUERY EKGP2Query EKGP2 KEYS (EKGSUBID, EBRKAT, P2ARBKOD, P2LOPNR).   /*EKGP2 QUERY*/
DEFINE DATA-SOURCE EKGP2resursSrc FOR EKGP2RESURS KEYS (EKGSUBID, EBRKAT, P2ARBKOD, P2LOPNR, RESURSNR).
DEFINE DATA-SOURCE EKGP2frekvensSrc FOR EKGP2FREKVENS KEYS (EKGSUBID, EBRKAT, P2ARBKOD, P2LOPNR, P3ARBKOD, P3LOPNR).
DEFINE DATA-SOURCE EKGP2mtrlSrc FOR EKGP2MTRL KEYS (EKGSUBID, EBRKAT, P2ARBKOD, P2LOPNR, LEVKOD, ARTNR).

DEFINE VARIABLE hEKGP2DS   AS HANDLE     NO-UNDO.         /*skapa handle till dataset*/
hEKGP2DS = DATASET EKGP2DS:HANDLE.      /*Koppling handle dataset*/
hEKGP2DS:SET-CALLBACK-PROCEDURE ("AFTER-FILL", "postDataSetFillEKGP2DS", THIS-PROCEDURE). 

PROCEDURE LaddaP2: 
   DEFINE INPUT PARAMETER ekgsubidvar AS INTEGER.
   DEFINE INPUT PARAMETER ebrkatvar AS CHARACTER.
   DEFINE OUTPUT PARAMETER DATASET FOR EKGP2DS.
   DEFINE VARIABLE queryprep AS CHARACTER NO-UNDO.
   DATASET EKGP2DS:EMPTY-DATASET().
   queryprep = "FOR EACH EKGP2 WHERE EKGP2.EKGSUBID = " + STRING(ekgsubidvar) +  " AND EKGP2.EBRKAT = '" + STRING(ebrkatvar) + "' NO-LOCK".
   QUERY EKGP2Query:QUERY-PREPARE(queryprep).
   RUN attachEKGP2DS.
   DATASET EKGP2DS:FILL().
   detachDataSetEKGP2DS(hEKGP2DS).
END PROCEDURE.

PROCEDURE attachEKGP2DS: /*Koppla HANDLE till SOURCE.      */
   hEKGP2DS:GET-BUFFER-HANDLE("ekgp2TT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGP2Src:HANDLE).
   hEKGP2DS:GET-BUFFER-HANDLE("ekgp2resursTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGP2resursSrc:HANDLE).
   hEKGP2DS:GET-BUFFER-HANDLE("ekgp2frekvensTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGP2frekvensSrc:HANDLE).
   hEKGP2DS:GET-BUFFER-HANDLE("ekgp2mtrlTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGP2mtrlSrc:HANDLE).
END PROCEDURE.

/*EKGP1DS*/
{SparaProDatasSet.i EKGP1DS}
DEFINE QUERY EKGP1Query FOR EKGP1.

DEFINE DATA-SOURCE EKGP1Src FOR QUERY EKGP1Query EKGP1 KEYS (EKGSUBID, EBRKAT, P1ARBKOD, P1LOPNR).   /*EKGP1 QUERY*/
DEFINE DATA-SOURCE EKGP1frekvensSrc FOR EKGP1FREKVENS KEYS (EKGSUBID, EBRKAT, P1ARBKOD, P1LOPNR, P2ARBKOD, P2LOPNR).

DEFINE VARIABLE hEKGP1DS   AS HANDLE     NO-UNDO.         /*skapa handle till dataset*/
hEKGP1DS = DATASET EKGP1DS:HANDLE.      /*Koppling handle dataset*/
hEKGP1DS:SET-CALLBACK-PROCEDURE ("AFTER-FILL", "postDataSetFillEKGP1DS", THIS-PROCEDURE). 

PROCEDURE LaddaP1: 
   DEFINE INPUT PARAMETER ekgsubidvar AS INTEGER.
   DEFINE INPUT PARAMETER ebrkatvar AS CHARACTER.
   DEFINE OUTPUT PARAMETER DATASET FOR EKGP1DS.
   DEFINE VARIABLE queryprep AS CHARACTER NO-UNDO.
   DATASET EKGP1DS:EMPTY-DATASET().
   queryprep = "FOR EACH EKGP1 WHERE EKGP1.EKGSUBID = " + STRING(ekgsubidvar) +  " AND EKGP1.EBRKAT = '" + STRING(ebrkatvar) + "' NO-LOCK".
   QUERY EKGP1Query:QUERY-PREPARE(queryprep).
   RUN attachEKGP1DS.
   DATASET EKGP1DS:FILL().
   detachDataSetEKGP1DS(hEKGP1DS).
END PROCEDURE.

PROCEDURE attachEKGP1DS: /*Koppla HANDLE till SOURCE.      */
   hEKGP1DS:GET-BUFFER-HANDLE("ekgp1TT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGP1Src:HANDLE).
   hEKGP1DS:GET-BUFFER-HANDLE("ekgp1frekvensTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGP1frekvensSrc:HANDLE).
END PROCEDURE.

/*EKGArbKoderDS*/
{SparaProDatasSet.i EKGArbKoderDS}
DEFINE QUERY EKGP1ArbKodQuery FOR EKGP1ARBKOD.
DEFINE QUERY EKGP2ArbKodQuery FOR EKGP2ARBKOD.
DEFINE QUERY EKGP3ArbKodQuery FOR EKGP3ARBKOD.

DEFINE DATA-SOURCE EKGP1ArbKodSrc FOR QUERY EKGP1ArbKodQuery EKGP1ARBKOD KEYS (EKGSUBID, EBRKAT).   /*QUERY*/
DEFINE DATA-SOURCE EKGP2ArbKodSrc FOR QUERY EKGP2ArbKodQuery EKGP2ARBKOD KEYS (EKGSUBID, EBRKAT).   /*QUERY*/
DEFINE DATA-SOURCE EKGP3ArbKodSrc FOR QUERY EKGP3ArbKodQuery EKGP3ARBKOD KEYS (EKGSUBID, EBRKAT).   /*QUERY*/

DEFINE VARIABLE hEKGArbKoderDS   AS HANDLE     NO-UNDO.         /*skapa handle till dataset*/
hEKGArbKoderDS = DATASET EKGArbKoderDS:HANDLE.      /*Koppling handle dataset*/
hEKGArbKoderDS:SET-CALLBACK-PROCEDURE ("AFTER-FILL", "postDataSetFillEKGArbKoderDS", THIS-PROCEDURE). 

PROCEDURE LaddaArbKoder: 
   DEFINE INPUT PARAMETER ekgsubidvar AS INTEGER.
   DEFINE INPUT PARAMETER ebrkatvar AS CHARACTER.
   DEFINE OUTPUT PARAMETER DATASET FOR EKGArbKoderDS.
   DEFINE VARIABLE querypreppp1arbkod AS CHARACTER NO-UNDO.
   DEFINE VARIABLE querypreppp2arbkod AS CHARACTER NO-UNDO.
   DEFINE VARIABLE querypreppp3arbkod AS CHARACTER NO-UNDO.
   
   DATASET EKGArbKoderDS:EMPTY-DATASET().
   querypreppp1arbkod = "FOR EACH EKGP1ARBKOD WHERE EKGP1ARBKOD.EKGSUBID = " + STRING(ekgsubidvar) +  " AND EKGP1ARBKOD.EBRKAT = '" + STRING(ebrkatvar) + "' NO-LOCK".
   querypreppp2arbkod = "FOR EACH EKGP2ARBKOD WHERE EKGP2ARBKOD.EKGSUBID = " + STRING(ekgsubidvar) +  " AND EKGP2ARBKOD.EBRKAT = '" + STRING(ebrkatvar) + "' NO-LOCK".
   querypreppp3arbkod = "FOR EACH EKGP3ARBKOD WHERE EKGP3ARBKOD.EKGSUBID = " + STRING(ekgsubidvar) + " AND EKGP3ARBKOD.EBRKAT = '" + STRING(ebrkatvar) + "' NO-LOCK".
   
   QUERY EKGP1ArbKodQuery:QUERY-PREPARE(querypreppp1arbkod).
   QUERY EKGP2ArbKodQuery:QUERY-PREPARE(querypreppp2arbkod).
   QUERY EKGP3ArbKodQuery:QUERY-PREPARE(querypreppp3arbkod).
   
   RUN attachEKGArbKoderDS.
   DATASET EKGArbKoderDS:FILL().
   detachDataSetEKGArbKoderDS(hEKGArbKoderDS).
END PROCEDURE.

PROCEDURE attachEKGArbKoderDS: /*Koppla HANDLE till SOURCE.      */
   hEKGArbKoderDS:GET-BUFFER-HANDLE("ekgp1arbkodTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGP1ArbKodSrc:HANDLE).
   hEKGArbKoderDS:GET-BUFFER-HANDLE("ekgp2arbkodTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGP2ArbKodSrc:HANDLE).
   hEKGArbKoderDS:GET-BUFFER-HANDLE("ekgp3arbkodTT"):ATTACH-DATA-SOURCE(DATA-SOURCE EKGP3ArbKodSrc:HANDLE).
END PROCEDURE.

PROCEDURE sistaekgsubid_UI :
   DEFINE OUTPUT PARAMETER hjraknare AS INTEGER NO-UNDO.
   FIND LAST EKGSUBKAT USE-INDEX EKGSUBID NO-LOCK NO-ERROR.
   IF AVAILABLE EKGSUBKAT THEN DO:
      hjraknare = EKGSUBKAT.EKGSUBID + 1.
   END.
   ELSE hjraknare = hjraknare + 1.
END PROCEDURE.

PROCEDURE KopKatalog :
   DEFINE INPUT-OUTPUT PARAMETER orgsubid AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER  orgkatvar AS CHARACTER NO-UNDO.
   DEFINE VARIABLE nysubid AS INTEGER NO-UNDO. 
   
   RUN sistaekgsubid_UI (OUTPUT nysubid).
   FOR EACH EKGSUBKAT WHERE EKGSUBKAT.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGSUBKATBUF.
         BUFFER-COPY EKGSUBKAT TO EKGSUBKATBUF.
         ASSIGN 
         EKGSUBKATBUF.BENAMNING = EKGSUBKATBUF.BENAMNING + " - Kopia"
         EKGSUBKATBUF.EKGSUBID = nysubid.  
      END.       
   END.
   
   FOR EACH EKGMTRL WHERE EKGMTRL.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGMTRLBUF.
         BUFFER-COPY EKGMTRL TO EKGMTRLBUF.
         ASSIGN 
         EKGMTRLBUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGREGEL WHERE EKGREGEL.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGREGELBUF.
         BUFFER-COPY EKGREGEL TO EKGREGELBUF.
         ASSIGN 
         EKGREGELBUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGRESURSPRIS WHERE EKGRESURSPRIS.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGRESURSPRISBUF.
         BUFFER-COPY EKGRESURSPRIS TO EKGRESURSPRISBUF.
         ASSIGN 
         EKGRESURSPRISBUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGPASLAG WHERE EKGPASLAG.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGPASLAGBUF.
         BUFFER-COPY EKGPASLAG TO EKGPASLAGBUF.
         ASSIGN 
         EKGPASLAGBUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGRESURSPASLAG WHERE EKGRESURSPASLAG.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGRESURSPASLAGBUF.
         BUFFER-COPY EKGRESURSPASLAG TO EKGRESURSPASLAGBUF.
         ASSIGN 
         EKGRESURSPASLAGBUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGNIVA WHERE EKGNIVA.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGNIVABUF.
         BUFFER-COPY EKGNIVA TO EKGNIVABUF.
         ASSIGN 
         EKGNIVABUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGRESURSNIVA WHERE EKGRESURSNIVA.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGRESURSNIVABUF.
         BUFFER-COPY EKGRESURSNIVA TO EKGRESURSNIVABUF.
         ASSIGN 
         EKGRESURSNIVABUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGP5 WHERE EKGP5.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGP5BUF.
         BUFFER-COPY EKGP5 TO EKGP5BUF.
         ASSIGN 
         EKGP5BUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGP5RESURS WHERE EKGP5RESURS.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGP5RESURSBUF.
         BUFFER-COPY EKGP5RESURS TO EKGP5RESURSBUF.
         ASSIGN 
         EKGP5RESURSBUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGP4 WHERE EKGP4.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGP4BUF.
         BUFFER-COPY EKGP4 TO EKGP4BUF.
         ASSIGN 
         EKGP4BUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGP4RESURS WHERE EKGP4RESURS.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGP4RESURSBUF.
         BUFFER-COPY EKGP4RESURS TO EKGP4RESURSBUF.
         ASSIGN 
         EKGP4RESURSBUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGP4FREKVENS WHERE EKGP4FREKVENS.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGP4FREKVENSBUF.
         BUFFER-COPY EKGP4FREKVENS TO EKGP4FREKVENSBUF.
         ASSIGN 
         EKGP4FREKVENSBUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGP3ARBKOD WHERE EKGP3ARBKOD.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGP3ARBKODBUF.
         BUFFER-COPY EKGP3ARBKOD TO EKGP3ARBKODBUF.
         ASSIGN 
         EKGP3ARBKODBUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGP3 WHERE EKGP3.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGP3BUF.
         BUFFER-COPY EKGP3 TO EKGP3BUF.
         ASSIGN 
         EKGP3BUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGP3RESURS WHERE EKGP3RESURS.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGP3RESURSBUF.
         BUFFER-COPY EKGP3RESURS TO EKGP3RESURSBUF.
         ASSIGN 
         EKGP3RESURSBUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGP3FREKVENS WHERE EKGP3FREKVENS.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGP3FREKVENSBUF.
         BUFFER-COPY EKGP3FREKVENS TO EKGP3FREKVENSBUF.
         ASSIGN 
         EKGP3FREKVENSBUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGP2ARBKOD WHERE EKGP2ARBKOD.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGP2ARBKODBUF.
         BUFFER-COPY EKGP2ARBKOD TO EKGP2ARBKODBUF.
         ASSIGN 
         EKGP2ARBKODBUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGP2 WHERE EKGP2.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGP2BUF.
         BUFFER-COPY EKGP2 TO EKGP2BUF.
         ASSIGN 
         EKGP2BUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGP2RESURS WHERE EKGP2RESURS.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGP2RESURSBUF.
         BUFFER-COPY EKGP2RESURS TO EKGP2RESURSBUF.
         ASSIGN 
         EKGP2RESURSBUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGP2FREKVENS WHERE EKGP2FREKVENS.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGP2FREKVENSBUF.
         BUFFER-COPY EKGP2FREKVENS TO EKGP2FREKVENSBUF.
         ASSIGN 
         EKGP2FREKVENSBUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGP2MTRL WHERE EKGP2MTRL.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGP2MTRLBUF.
         BUFFER-COPY EKGP2MTRL TO EKGP2MTRLBUF.
         ASSIGN 
         EKGP2MTRLBUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGP1ARBKOD WHERE EKGP1ARBKOD.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGP1ARBKODBUF.
         BUFFER-COPY EKGP1ARBKOD TO EKGP1ARBKODBUF.
         ASSIGN 
         EKGP1ARBKODBUF.EKGSUBID = nysubid.  
      END.       
   END.
   FOR EACH EKGP1 WHERE EKGP1.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGP1BUF.
         BUFFER-COPY EKGP1 TO EKGP1BUF.
         ASSIGN 
         EKGP1BUF.EKGSUBID = nysubid.  
      END.       
   END.
   
   FOR EACH EKGP1FREKVENS WHERE EKGP1FREKVENS.EKGSUBID = orgsubid NO-LOCK:
      DO TRANSACTION:
         CREATE EKGP1FREKVENSBUF.
         BUFFER-COPY EKGP1FREKVENS TO EKGP1FREKVENSBUF.
         ASSIGN 
         EKGP1FREKVENSBUF.EKGSUBID = nysubid.  
      END.       
   END.
   orgsubid = nysubid.
   RELEASE EKGSUBKATBUF NO-ERROR.
   RELEASE EKGMTRLBUF NO-ERROR.
   RELEASE EKGREGELBUF NO-ERROR.
   RELEASE EKGRESURSPRISBUF NO-ERROR.
   RELEASE EKGPASLAGBUF NO-ERROR.
   RELEASE EKGRESURSPASLAGBUF  NO-ERROR.
   RELEASE EKGNIVABUF NO-ERROR.
   RELEASE EKGRESURSNIVABUF NO-ERROR.
   RELEASE EKGP5BUF NO-ERROR.
   RELEASE EKGP5RESURSBUF NO-ERROR.
   RELEASE EKGP4BUF NO-ERROR.
   RELEASE EKGP4RESURSBUF NO-ERROR.
   RELEASE EKGP4FREKVENSBUF NO-ERROR.
   RELEASE EKGP3ARBKODBUF NO-ERROR.
   RELEASE EKGP3BUF NO-ERROR.
   RELEASE EKGP3RESURSBUF NO-ERROR.
   RELEASE EKGP3FREKVENSBUF NO-ERROR.
   RELEASE EKGP2ARBKODBUF NO-ERROR.
   RELEASE EKGP2BUF NO-ERROR.
   RELEASE EKGP2RESURSBUF NO-ERROR.
   RELEASE EKGP2FREKVENSBUF NO-ERROR.
   RELEASE EKGP2MTRLBUF NO-ERROR.
   RELEASE EKGP1ARBKODBUF NO-ERROR.
   RELEASE EKGP1BUF NO-ERROR.
   RELEASE EKGP1FREKVENSBUF NO-ERROR.

   
END PROCEDURE.

PROCEDURE BortKatalog :
   DEFINE INPUT PARAMETER orgsubid AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER  orgkatvar AS CHARACTER NO-UNDO.
        
   FOR EACH EKGSUBKAT WHERE EKGSUBKAT.EKGSUBID = orgsubid EXCLUSIVE-LOCK:              
      DELETE EKGSUBKAT.                      
   END.
   
   FOR EACH EKGMTRL WHERE EKGMTRL.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGMTRL.                        
   END.
   FOR EACH EKGREGEL WHERE EKGREGEL.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGREGEL.                      
   END.
   FOR EACH EKGRESURSPRIS WHERE EKGRESURSPRIS.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGRESURSPRIS.                     
   END.
   FOR EACH EKGPASLAG WHERE EKGPASLAG.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGPASLAG.                      
   END.
   FOR EACH EKGRESURSPASLAG WHERE EKGRESURSPASLAG.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGRESURSPASLAG.                       
   END.
   FOR EACH EKGNIVA WHERE EKGNIVA.EKGSUBID = orgsubid EXCLUSIVE-LOCK:    
      DELETE EKGNIVA.                       
   END.
   FOR EACH EKGRESURSNIVA WHERE EKGRESURSNIVA.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGRESURSNIVA.                       
   END.
   FOR EACH EKGP5 WHERE EKGP5.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGP5.                      
   END.
   FOR EACH EKGP5RESURS WHERE EKGP5RESURS.EKGSUBID = orgsubid EXCLUSIVE-LOCK:     
      DELETE EKGP5RESURS.                      
   END.
   FOR EACH EKGP4 WHERE EKGP4.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGP4.             
   END.
   FOR EACH EKGP4RESURS WHERE EKGP4RESURS.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGP4RESURS.                
   END.
   FOR EACH EKGP4FREKVENS WHERE EKGP4FREKVENS.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGP4FREKVENS.          
   END.
   FOR EACH EKGP3ARBKOD WHERE EKGP3ARBKOD.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGP3ARBKOD.                
   END.
   FOR EACH EKGP3 WHERE EKGP3.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGP3.                
   END.
   FOR EACH EKGP3RESURS WHERE EKGP3RESURS.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGP3RESURS.                
   END.
   FOR EACH EKGP3FREKVENS WHERE EKGP3FREKVENS.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGP3FREKVENS.                
   END.
   FOR EACH EKGP2ARBKOD WHERE EKGP2ARBKOD.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGP2ARBKOD.                
   END.
   FOR EACH EKGP2 WHERE EKGP2.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGP2.                
   END.
   FOR EACH EKGP2RESURS WHERE EKGP2RESURS.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGP2RESURS.             
   END.
   FOR EACH EKGP2FREKVENS WHERE EKGP2FREKVENS.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGP2FREKVENS.             
   END.
   FOR EACH EKGP2MTRL WHERE EKGP2MTRL.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGP2MTRL.                
   END.
   FOR EACH EKGP1ARBKOD WHERE EKGP1ARBKOD.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGP1ARBKOD.             
   END.
   FOR EACH EKGP1 WHERE EKGP1.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGP1.             
   END.
   
   FOR EACH EKGP1FREKVENS WHERE EKGP1FREKVENS.EKGSUBID = orgsubid EXCLUSIVE-LOCK:      
      DELETE EKGP1FREKVENS.            
   END.
   
   RELEASE EKGSUBKAT NO-ERROR.
   RELEASE EKGMTRL NO-ERROR.
   RELEASE EKGREGEL NO-ERROR.
   RELEASE EKGRESURSPRIS NO-ERROR.
   RELEASE EKGPASLAG NO-ERROR.
   RELEASE EKGRESURSPASLAG  NO-ERROR.
   RELEASE EKGNIVA NO-ERROR.
   RELEASE EKGRESURSNIVA NO-ERROR.
   RELEASE EKGP5 NO-ERROR.
   RELEASE EKGP5RESURS NO-ERROR.
   RELEASE EKGP4 NO-ERROR.
   RELEASE EKGP4RESURS NO-ERROR.
   RELEASE EKGP4FREKVENS NO-ERROR.
   RELEASE EKGP3ARBKOD NO-ERROR.
   RELEASE EKGP3 NO-ERROR.
   RELEASE EKGP3RESURS NO-ERROR.
   RELEASE EKGP3FREKVENS NO-ERROR.
   RELEASE EKGP2ARBKOD NO-ERROR.
   RELEASE EKGP2 NO-ERROR.
   RELEASE EKGP2RESURS NO-ERROR.
   RELEASE EKGP2FREKVENS NO-ERROR.
   RELEASE EKGP2MTRL NO-ERROR.
   RELEASE EKGP1ARBKOD NO-ERROR.
   RELEASE EKGP1 NO-ERROR.
   RELEASE EKGP1FREKVENS NO-ERROR.

   
END PROCEDURE.

PROCEDURE P4tP1 :
   DEFINE INPUT PARAMETER orgsubid AS INTEGER NO-UNDO.
   RUN BeraknaP4allafrek (INPUT orgsubid).
   RUN BeraknaP3allafrek (INPUT orgsubid).
   RUN BeraknaP2allafrek (INPUT orgsubid).
   RUN BeraknaP1allafrek (INPUT orgsubid).
   
   /*THIS-OBJECT:BeraknaP4allafrek().
      THIS-OBJECT:BeraknaP3allafrek().
      THIS-OBJECT:BeraknaP2allafrek().
      THIS-OBJECT:BeraknaP1allafrek().*/    
   
END PROCEDURE.   

PROCEDURE BeraknaP4allafrek:
   DEFINE INPUT PARAMETER orgsubid AS INTEGER NO-UNDO.
   FOR EACH EKGP4 WHERE EKGP4.EKGSUBID = orgsubid AND  EKGP4.FREKVENS = TRUE:
      RUN BeraknaP4enfrek(INPUT orgsubid, INPUT EKGP4.p4arbkod).
   END.            
END PROCEDURE.

PROCEDURE BeraknaP4enfrek:
   DEFINE INPUT PARAMETER orgsubid AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER p4ak AS CHARACTER NO-UNDO.   
   FIND FIRST EKGP4  WHERE EKGP4.EKGSUBID = orgsubid AND EKGP4.P4ARBKOD = p4ak NO-ERROR.
   FIND FIRST EKGP4FREKVENS WHERE EKGP4FREKVENS.EKGSUBID = orgsubid AND EKGP4FREKVENS.P4ARBKOD = EKGP4.P4ARBKOD NO-LOCK NO-ERROR.
   IF AVAILABLE EKGP4FREKVENS THEN DO:
      IF EKGP4.FREKVENS = TRUE THEN DO:
         ASSIGN
         EKGP4.MONTTIM = 0 EKGP4.BERTIM = 0 EKGP4.MASKTIM = 0 EKGP4.EAMASK = 0 EKGP4.EAOVRIGT = 0 EKGP4.EAUTRUST = 0 EKGP4.ARBETEKOST = 0 EKGP4.MATERIELKOST = 0 EKGP4.MASKINKOST = 0 EKGP4.OVRIGT = 0  EKGP4.EA = 0 EKGP4.SUMMA = 0.
         /*på P4 nivå finns inga resurser om frekvens = true*/            
         FOR EACH EKGP4FREKVENS WHERE EKGP4FREKVENS.EKGSUBID = orgsubid AND EKGP4FREKVENS.P4ARBKOD = EKGP4.P4ARBKOD NO-LOCK:
            FIND FIRST EKGP5 WHERE EKGP5.EKGSUBID = orgsubid AND  EKGP5.P5ARBKOD = EKGP4FREKVENS.P5ARBKOD NO-LOCK NO-ERROR.
            IF AVAILABLE EKGP5  THEN DO:
               EKGP4.MONTTIM = EKGP4.MONTTIM + (EKGP4FREKVENS.ANTAL * EKGP5.MONTTIM).
               EKGP4.MASKTIM = EKGP4.MASKTIM + (EKGP4FREKVENS.ANTAL * EKGP5.MASKTIM). 
               EKGP4.ARBETEKOST =  EKGP4.ARBETEKOST + (EKGP4FREKVENS.ANTAL * EKGP5.ARBETEKOST).                                                                                         
               EKGP4.MASKINKOST = EKGP4.MASKINKOST + (EKGP4FREKVENS.ANTAL * EKGP5.MASKINKOST).
               EKGP4.OVRIGT = EKGP4.OVRIGT + (EKGP4FREKVENS.ANTAL * EKGP5.OVRIGT).
               
               EKGP4.EAMASK = EKGP4.EAMASK + (EKGP4FREKVENS.ANTAL * EKGP5.EAMASK).
               EKGP4.EAOVRIGT = EKGP4.EAOVRIGT + (EKGP4FREKVENS.ANTAL * EKGP5.EAOVRIGT).
               EKGP4.EAUTRUST = EKGP4.EAUTRUST + (EKGP4FREKVENS.ANTAL * EKGP5.EAUTRUST).
            END.   
         END.               
      END.
   END.            
   EKGP4.EA = EKGP4.MONTTIM + EKGP4.EAMASK +  EKGP4.EAOVRIGT + EKGP4.EAUTRUST.
   EKGP4.SUMMA = EKGP4.ARBETEKOST + EKGP4.MASKINKOST + EKGP4.MATERIELKOST + EKGP4.OVRIGT + EKGP4.UTRUSTKOST.      
END PROCEDURE.

PROCEDURE BeraknaP3allafrek:
   DEFINE INPUT PARAMETER orgsubid AS INTEGER NO-UNDO.
   FOR EACH EKGP3 WHERE EKGP3.EKGSUBID = orgsubid AND  EKGP3.FREKVENS = TRUE:
      RUN BeraknaP3enfrek(INPUT orgsubid, INPUT EKGP3.p3arbkod, INPUT EKGP3.p3lopnr).
   END.
END PROCEDURE.
   
PROCEDURE BeraknaP3enfrek:
   DEFINE INPUT PARAMETER orgsubid AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER p3ak AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER  p3lnr AS INTEGER NO-UNDO.   
   FIND FIRST EKGP3  WHERE EKGP3.EKGSUBID = orgsubid AND ekgp3.P3ARBKOD = p3ak AND ekgp3.P3LOPNR = p3lnr  NO-ERROR.
   FIND FIRST ekgp3frekvens WHERE EKGP3FREKVENS.EKGSUBID = orgsubid AND  ekgp3frekvens.P3ARBKOD = ekgp3.P3ARBKOD AND ekgp3frekvens.P3LOPNR = ekgp3.P3LOPNR NO-LOCK NO-ERROR.
   IF AVAILABLE ekgp3frekvens THEN DO:
      IF ekgp3.FREKVENS = TRUE THEN DO:
         ASSIGN
         ekgp3.MONTTIM = 0 ekgp3.BERTIM = 0 ekgp3.MASKTIM = 0 ekgp3.UTRUSTTIM = 0 ekgp3.EAMASK = 0 ekgp3.EAOVRIGT = 0 ekgp3.EAUTRUST = 0 ekgp3.ARBETEKOST = 0 ekgp3.MATERIELKOST = 0 ekgp3.MASKINKOST = 0 ekgp3.UTRUSTKOST = 0 ekgp3.OVRIGT = 0  ekgp3.EA = 0 ekgp3.SUMMA = 0.
         /*på P4 nivå finns inga resurser om frekvens = true*/            
         FOR EACH ekgp3frekvens WHERE EKGP3FREKVENS.EKGSUBID = orgsubid AND ekgp3frekvens.P3ARBKOD = ekgp3.P3ARBKOD AND ekgp3frekvens.P3LOPNR = ekgp3.P3LOPNR NO-LOCK:
            FIND FIRST ekgp4 WHERE EKGP4.EKGSUBID = orgsubid AND ekgp4.P4ARBKOD = ekgp4frekvens.P4ARBKOD NO-LOCK NO-ERROR.
            IF AVAILABLE ekgp4  THEN DO:
               ekgp3.MONTTIM = ekgp3.MONTTIM + (ekgp3frekvens.ANTAL * ekgp4.MONTTIM).
               ekgp3.MASKTIM = ekgp3.MASKTIM + (ekgp3frekvens.ANTAL * ekgp4.MASKTIM). 
               ekgp3.ARBETEKOST =  ekgp3.ARBETEKOST + (ekgp3frekvens.ANTAL * ekgp4.ARBETEKOST).                                                                                         
               ekgp3.MASKINKOST = ekgp3.MASKINKOST + (ekgp3frekvens.ANTAL * ekgp4.MASKINKOST).
               ekgp3.OVRIGT = ekgp3.OVRIGT + (ekgp3frekvens.ANTAL * ekgp4.OVRIGT).
               
               ekgp3.EAMASK = ekgp3.EAMASK + (ekgp3frekvens.ANTAL * ekgp4.EAMASK).
               ekgp3.EAOVRIGT = ekgp3.EAOVRIGT + (ekgp3frekvens.ANTAL * ekgp4.EAOVRIGT).
               ekgp3.EAUTRUST = ekgp3.EAUTRUST + (ekgp3frekvens.ANTAL * ekgp4.EAUTRUST).
            END.   
         END.

         /*För P3 kan det vara både frekvens och tillkommande resurs 101-tillkommande beredare*/
         FOR EACH ekgp3resurs WHERE EKGP3RESURS.EKGSUBID = orgsubid AND ekgp3resurs.P3ARBKOD = ekgp3.P3ARBKOD AND ekgp3resurs.P3LOPNR = ekgp3.P3LOPNR NO-LOCK:               
            FIND FIRST ekgresurspris WHERE EKGRESURSPRIS.EKGSUBID = orgsubid AND ekgresurspris.RESURSNR = ekgp3resurs.RESURSNR NO-LOCK NO-ERROR. 
            FIND FIRST ekgregel WHERE EKGREGEL.REGELID = ekgresurspris.REGELID NO-LOCK NO-ERROR.                                   
            IF AVAILABLE ekgresurspris THEN DO:
               FIND FIRST EKGRESURSPASLAG WHERE EKGRESURSPASLAG.EKGSUBID = orgsubid AND  ekgresurspaslag.RESURSNR = ekgp3resurs.RESURSNR NO-LOCK NO-ERROR.
               IF AVAILABLE ekgresurspaslag  THEN DO:
                  FIND FIRST EKGPASLAG WHERE EKGPASLAG.EKGSUBID = orgsubid AND ekgpaslag.PASLAGNR = ekgresurspaslag.PASLAGNR NO-LOCK NO-ERROR.
               END.                                                                           
               IF ekgresurspris.REGELID = 7 THEN DO:
                  /*TILLK BEREDARE FINNS i P3*/
                  ekgp3.BERTIM = ekgp3.BERTIM + ekgp3resurs.ANTAL.                           
                  IF AVAILABLE ekgresurspaslag  THEN DO:                              
                     ekgp3.ARBETEKOST =  ekgp3.ARBETEKOST + (ekgp3resurs.ANTAL * ekgresurspris.PRIS * ( 1 + ekgpaslag.PASLAG)).
                  END.
                  ELSE DO:
                     /*SKALL ALLTID VARA PÅSLAG*/
                     ekgp3.ARBETEKOST = ekgp3.ARBETEKOST +  (ekgp3resurs.ANTAL  * ekgresurspris.PRIS).
                  END.                                  
               END.                       
            END.                                                            
         END.               
      END.
   END.            
   ekgp3.EA = ekgp3.MONTTIM + ekgp3.EAMASK +  ekgp3.EAOVRIGT + ekgp3.EAUTRUST.
   ekgp3.SUMMA = ekgp3.ARBETEKOST + ekgp3.MASKINKOST + ekgp3.MATERIELKOST + ekgp3.OVRIGT + ekgp3.UTRUSTKOST.      
END PROCEDURE.
   
PROCEDURE BeraknaP2allafrek:
   DEFINE INPUT PARAMETER orgsubid AS INTEGER NO-UNDO.
   FOR EACH EKGP2 WHERE EKGP2.EKGSUBID = orgsubid AND  EKGP2.FREKVENS = TRUE:
      RUN BeraknaP2enfrek(INPUT orgsubid, INPUT EKGP2.p2arbkod, INPUT EKGP2.p2lopnr).
   END.
END PROCEDURE.   