/*GKALEKO2ASWT.P*/

/* GURU            ASW-FIL          GRANEKO         GRANINGE
   K1              IEDIM2           RGL             K2 -OMRÅDE
   K2              IEDIM3           TD              K3 -RÖRELSGREN
   K3              IEDIM5           -               KONTODEL 5
   K4              IEDIM4           AONR            K4-PROJEKTNR
   K5              IEDIM1           KOSTNADSLAG     KONTO        
*/

DEFINE TEMP-TABLE oretemp NO-UNDO
   FIELD FTG AS CHARACTER
   FIELD KREDIT AS DECIMAL
   FIELD DEBET AS DECIMAL
   INDEX FTG FTG.

DEFINE TEMP-TABLE ekoforst
   FIELD FTG AS CHARACTER
   FIELD ENY LIKE EKRAPPRESULT.ENY 
   FIELD EPERSONALKOD LIKE EKRAPPRESULT.EPERSONALKOD 
   FIELD EPROJEKT LIKE EKRAPPRESULT.EPROJEKT
   FIELD DELNR LIKE AONRTAB.DELNR 
   FIELD EORG LIKE EKRAPPRESULT.EORG     
   FIELD EGEO LIKE EKRAPPRESULT.EGEO  
   FIELD FELDEBKRED AS LOGICAL
   FIELD EVERDATUM AS DATE 
   FIELD EOVERJA LIKE EKRAPPRESULT.EOVERJA
   FIELD ERESULTENH LIKE EKRAPPRESULT.ERESULTENH 
   FIELD EBELOPP LIKE  EKRAPPRESULT.EBELOPP 
   FIELD EANTAL LIKE EKRAPPRESULT.EANTAL 
   FIELD ETIMMAR LIKE EKRAPPRESULT.EANTAL                
   FIELD ELONTILLAGG LIKE EKRAPPRESULT.ELONTILLAGG 
   FIELD ELONTILLANTAL LIKE EKRAPPRESULT.ELONTILLANTAL    
   FIELD ELONBELOPP LIKE EKRAPPRESULT.ELONBELOPP         
   FIELD PERSTYP AS CHARACTER         
   INDEX PERSORG IS PRIMARY EPERSONALKOD EORG EGEO EPROJEKT DELNR ASCENDING.
DEFINE TEMP-TABLE eko
   FIELD FTG AS CHARACTER
   FIELD K1 AS CHARACTER
   FIELD K2 AS CHARACTER
   FIELD K3 AS CHARACTER
   FIELD K4 AS CHARACTER
   FIELD K5 AS CHARACTER
   FIELD EDEBKRED LIKE EKRAPPRESULT.EDEBKRED
   FIELD EVERDATUM AS DATE  
   FIELD EPROJEKT LIKE EKRAPPRESULT.EPROJEKT 
   FIELD DELNR LIKE AONRTAB.DELNR 
   FIELD EORG LIKE EKRAPPRESULT.EORG 
   FIELD EGEO LIKE EKRAPPRESULT.EGEO       
   FIELD EKOSTNADSSLAG LIKE EKRAPPRESULT.EKOSTNADSSLAG    
   FIELD EBELOPP LIKE  EKRAPPRESULT.EBELOPP 
   FIELD EANTAL  LIKE EKRAPPRESULT.EANTAL 	       
   FIELD ELONTILLAGG LIKE EKRAPPRESULT.ELONTILLAGG 
   FIELD ELONTILLANTAL LIKE EKRAPPRESULT.ELONTILLANTAL    
   FIELD ELONBELOPP LIKE EKRAPPRESULT.ELONBELOPP         
   FIELD FELDEBKRED AS LOGICAL
   INDEX ORG IS PRIMARY EVERDATUM EORG EPROJEKT EKOSTNADSSLAG ASCENDING.   
DEFINE TEMP-TABLE slutut
   FIELD VDATUM AS DATE
   FIELD FTG AS CHARACTER
   FIELD DEBKRED AS LOGICAL 
   FIELD FELDEBKRED AS LOGICAL
   FIELD ANTAL AS DECIMAL 
   FIELD BELOPP AS DECIMAL       
   FIELD K1 AS CHARACTER
   FIELD K2 AS CHARACTER
   FIELD K3 AS CHARACTER
   FIELD K4 AS CHARACTER
   FIELD K5 AS CHARACTER
   FIELD BIL AS CHARACTER
   FIELD K2POS8 AS CHARACTER
   INDEX ORG IS PRIMARY FTG DEBKRED K1 K2 K3 K4 K5.
DEFINE TEMP-TABLE slututK LIKE slutut.

DEFINE TEMP-TABLE omrrgrtemp
   FIELD OMRADE AS CHARACTER
   FIELD SPECOMR AS CHARACTER
   FIELD RGR AS CHARACTER
   FIELD PERSTYP AS CHARACTER
   INDEX PERSTYP IS PRIMARY PERSTYP OMRADE.
DEFINE TEMP-TABLE omrkosttemp
   FIELD OMRADE AS CHARACTER
   FIELD KOSTNADSLAGDEB AS CHARACTER
   FIELD KOSTNADSLAGKRED AS CHARACTER
   FIELD KOSTNADSLAGDEB2 AS CHARACTER
   FIELD KOSTNADSLAGKRED2 AS CHARACTER
   FIELD PERSTYP AS CHARACTER
   INDEX PERSTYP IS PRIMARY PERSTYP OMRADE.
DEFINE BUFFER eko2 FOR eko.
DEFINE BUFFER persbuff FOR PERSONALTAB.

DEFINE INPUT PARAMETER feltider AS LOGICAL NO-UNDO.
DEFINE INPUT PARAMETER vkdatum AS DATE NO-UNDO.
DEFINE INPUT PARAMETER skarpvar AS LOGICAL NO-UNDO.
DEFINE INPUT PARAMETER korvar AS CHARACTER NO-UNDO.
DEFINE INPUT PARAMETER TABLE FOR ekoforst.
DEFINE VARIABLE gkmovar AS DECIMAL NO-UNDO.
RUN GKMOPA.P (OUTPUT gkmovar).    
DEFINE NEW SHARED VARIABLE musz AS LOGICAL NO-UNDO.
DEFINE NEW SHARED VARIABLE nytid AS DECIMAL FORMAT "99.99" NO-UNDO.
DEFINE NEW SHARED VARIABLE sekunder AS INTEGER FORMAT "-9999999" NO-UNDO. 
DEFINE NEW SHARED VARIABLE persrec AS RECID NO-UNDO. 
DEFINE VARIABLE sattfore AS CHARACTER NO-UNDO.
DEFINE VARIABLE summmallab AS DECIMAL NO-UNDO.
DEFINE VARIABLE summmallabch AS CHARACTER NO-UNDO.
DEFINE VARIABLE summmallaant AS DECIMAL NO-UNDO.
DEFINE VARIABLE summmallaantch AS CHARACTER NO-UNDO.
DEFINE VARIABLE kommando AS CHARACTER NO-UNDO. 
DEFINE VARIABLE kommando2 AS CHARACTER NO-UNDO. 
DEFINE VARIABLE filnamn1 AS CHARACTER NO-UNDO. 
DEFINE VARIABLE filnamn2 AS CHARACTER NO-UNDO. 
DEFINE VARIABLE uttagsatt AS INTEGER NO-UNDO.
DEF VAR debvar AS DECIMAL FORMAT "->>>>>>>>>.99" NO-UNDO.
DEF VAR debvar2 AS DECIMAL FORMAT "->>>>>>>>>.99" NO-UNDO.
DEF VAR kredvar AS DECIMAL FORMAT "->>>>>>>>>.99" NO-UNDO.
DEF VAR diffvar AS DECIMAL FORMAT "->>>>>>>>>.99" NO-UNDO.
DEF VAR kredvar2 AS DECIMAL FORMAT "->>>>>>>>>.99" NO-UNDO.
DEF VAR diffvar2 AS DECIMAL FORMAT "->>>>>>>>>.99" NO-UNDO.
DEFINE VARIABLE nolldummy AS CHARACTER NO-UNDO.
nolldummy = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000".
DEFINE VARIABLE pkoder LIKE PERSONALTAB.PERSONALKOD NO-UNDO.  
DEFINE VARIABLE kontokod LIKE EKRAPPRESULT.EKOSTNADSSLAG NO-UNDO. 
DEFINE VARIABLE kontokode LIKE EKRAPPRESULT.EKOSTNADSSLAG NO-UNDO. 
DEFINE VARIABLE kontokod2 LIKE EKRAPPRESULT.EKOSTNADSSLAG NO-UNDO. 
DEFINE VARIABLE kontokode2 LIKE EKRAPPRESULT.EKOSTNADSSLAG NO-UNDO. 
/*DEBET OCH KREDIT KONTON*/
{GKKONTON.I}
FOR EACH ekoforst WHERE ekoforst.EORG = "620":
   ekoforst.EORG = "610".
END.
/*POSTER FÅR RÄTT KONTO*/
RUN kontoposter_UI.      /*debet per aonr kredit per aonr och rätt område*/
IF feltider = FALSE THEN DO:
   /*MATERIAL*/
   RUN mtrl_UI (INPUT "MTRL").
END.
/*KONTOFÖRDELLNING*/
RUN kontofordel_UI.      /*fördelning av på konto och blankning av nej aonr*/
/*KREDITPOSTER*/

RUN kreditposter_UI.    /*summering av kredit*/
/*Kontroll av debetsum = kreditsum*/
/*FILEN*/
/*RUN GKALEKOUT.P (INPUT TABLE slutut).*/

OUTPUT CLOSE.
RUN GKALEKOUTDEVIS.P (INPUT feltider,INPUT vkdatum,INPUT skarpvar,INPUT TABLE slutut).
PROCEDURE omrrgr_UI:
   DEFINE INPUT PARAMETER omrvar AS CHARACTER.
   DEFINE INPUT PARAMETER eomrvar AS CHARACTER.
   DEFINE INPUT PARAMETER rgrvar AS CHARACTER.
   DEFINE INPUT PARAMETER ptypvar AS CHARACTER.
   CREATE omrrgrtemp.
   ASSIGN
   omrrgrtemp.OMRADE  = omrvar 
   omrrgrtemp.SPECOMR = eomrvar
   omrrgrtemp.RGR = rgrvar    
   omrrgrtemp.PERSTYP = ptypvar.
END PROCEDURE.

PROCEDURE omrk_UI:
   DEFINE INPUT PARAMETER omrvar AS CHARACTER.
   DEFINE INPUT PARAMETER debvar AS CHARACTER.
   DEFINE INPUT PARAMETER krevar AS CHARACTER.
   DEFINE INPUT PARAMETER debvar2 AS CHARACTER.
   DEFINE INPUT PARAMETER krevar2 AS CHARACTER.
   DEFINE INPUT PARAMETER ptypvar AS CHARACTER.
   CREATE omrkosttemp.
   ASSIGN
   omrkosttemp.OMRADE  = omrvar
   omrkosttemp.KOSTNADSLAGDEB  = debvar 
   omrkosttemp.KOSTNADSLAGKRED = krevar 
   omrkosttemp.KOSTNADSLAGDEB2 = debvar2
   omrkosttemp.KOSTNADSLAGKRED2 = krevar2
   omrkosttemp.PERSTYP         = ptypvar.
END PROCEDURE.
PROCEDURE kontoposter_UI:
   pkoder = "". 
   OPEN QUERY qeko FOR EACH ekoforst WHERE ekoforst.ENY = FALSE USE-INDEX PERSORG NO-LOCK.
   GET FIRST qeko.
   DO WHILE AVAILABLE(ekoforst):
      IF pkoder NE ekoforst.EPERSONALKOD THEN DO:      
         pkoder = ekoforst.EPERSONALKOD.      
         FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = pkoder 
         USE-INDEX PERSONALKOD NO-LOCK NO-ERROR.        
         persrec = RECID(PERSONALTAB).     
      END.   
      FIND FIRST omrkosttemp WHERE omrkosttemp.OMRADE  = ekoforst.EORG AND omrkosttemp.PERSTYP = "PERS" 
      NO-LOCK NO-ERROR.
      ASSIGN
      kontokod =  omrkosttemp.KOSTNADSLAGDEB 
      kontokode = omrkosttemp.KOSTNADSLAGKRED.         
      /*TIMMAR OCH PENNGAR*/
      IF ekoforst.EBELOPP = 0 THEN DO:
         persrec = persrec.
      END.                                   
      ELSE DO:      
         RUN kost_UI (INPUT TRUE,INPUT "PERS").      
      END.      
      IF ekoforst.ELONTILLAGG = "" THEN DO:
         persrec = persrec.
      END.                                   
      ELSE DO:
         /*OB-TILL*/ 
         IF ekoforst.ERESULTENH = "RE3" THEN DO:            
            FIND FIRST omrkosttemp WHERE omrkosttemp.OMRADE  = ekoforst.EORG AND omrkosttemp.PERSTYP = "PERS" 
            NO-LOCK NO-ERROR.
            ASSIGN
            kontokod =  omrkosttemp.KOSTNADSLAGDEB 
            kontokode = omrkosttemp.KOSTNADSLAGKRED.         
            RUN kost_UI (INPUT FALSE,INPUT "PERS"). 
         END.
         /*ÖVERTIDTILLÄGG*/ 
         IF ekoforst.ERESULTENH = "OVE" THEN DO:            
            FIND FIRST omrkosttemp WHERE omrkosttemp.OMRADE  = ekoforst.EORG AND omrkosttemp.PERSTYP = ekoforst.PERSTYP 
            NO-LOCK NO-ERROR.
            ASSIGN
            kontokod =  omrkosttemp.KOSTNADSLAGDEB 
            kontokode = omrkosttemp.KOSTNADSLAGKRED.         
            RUN kost_UI (INPUT FALSE,INPUT ekoforst.PERSTYP). 
         END. 
            /*BILAR*/
         IF ekoforst.ERESULTENH = "BIL" THEN DO:                        
            FIND FIRST omrkosttemp WHERE 
            omrkosttemp.PERSTYP = "SKYL"
            NO-LOCK NO-ERROR.
            IF AVAILABLE omrkosttemp THEN DO:
               ASSIGN
               kontokod =  omrkosttemp.KOSTNADSLAGDEB 
               kontokode = omrkosttemp.KOSTNADSLAGKRED.         
               RUN bilkost_UI (INPUT "SKYL").   
            END.
         END.                           
      END.
      DELETE ekoforst.
      GET NEXT qeko.   
   END.
END PROCEDURE.
PROCEDURE kost_UI:
   
   DEFINE INPUT PARAMETER timlon AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER typvar AS CHARACTER  NO-UNDO.
   
   FIND FIRST omrrgrtemp WHERE omrrgrtemp.OMRADE = ekoforst.EORG AND
   omrrgrtemp.PERSTYP = typvar NO-LOCK NO-ERROR.
   IF NOT AVAILABLE omrrgrtemp THEN DO:
      FIND FIRST omrrgrtemp WHERE 
      omrrgrtemp.PERSTYP = typvar NO-LOCK NO-ERROR.
   END.
   
   /*DEBET POST*/
   FIND FIRST eko WHERE
   eko.EDEBKRED = TRUE AND
   eko.FTG = ekoforst.FTG AND
   eko.EORG = ekoforst.EGEO AND 
   eko.EVERDATUM = ekoforst.EVERDATUM AND
   eko.EPROJEKT = ekoforst.EPROJEKT AND
   eko.DELNR = ekoforst.DELNR AND
   eko.EKOSTNADSSLAG = kontokod AND
   eko.FELDEBKRED = ekoforst.FELDEBKRED
   USE-INDEX ORG EXCLUSIVE-LOCK NO-ERROR.  
   IF NOT AVAILABLE eko THEN DO:
      CREATE eko.
   END.    
   ASSIGN         
   eko.K1 = ""
   eko.K2 = ""
   eko.K3 = ""
   eko.K4 = ekoforst.EPROJEKT
   eko.K5 = kontokod
   eko.FTG = ekoforst.FTG
   eko.EDEBKRED = TRUE 
   eko.EORG = ekoforst.EGEO  
   eko.EVERDATUM = ekoforst.EVERDATUM
   eko.EPROJEKT = ekoforst.EPROJEKT 
   eko.DELNR = ekoforst.DELNR 
   eko.EKOSTNADSSLAG = kontokod
   eko.FELDEBKRED = ekoforst.FELDEBKRED.
   IF timlon = TRUE THEN DO:
      ASSIGN
      eko.EANTAL = eko.EANTAL + ekoforst.EANTAL  
      eko.EBELOPP = eko.EBELOPP + ekoforst.EBELOPP.     
   END.
   ELSE DO:
      eko.EBELOPP = eko.EBELOPP + ekoforst.ELONBELOPP.     
   END.
   /*KREDIT POST*/          
   IF feltider = FALSE THEN DO:
      FIND FIRST eko2 WHERE
      eko2.EDEBKRED = FALSE AND
      eko2.FTG = eko.FTG AND
      eko2.EORG = ekoforst.EORG AND 
      eko2.EVERDATUM = ekoforst.EVERDATUM AND
      eko2.EPROJEKT = ekoforst.EPROJEKT AND
      eko2.EKOSTNADSSLAG = kontokode
      USE-INDEX ORG EXCLUSIVE-LOCK NO-ERROR.  
   END.
   ELSE DO:
      IF ekoforst.FELDEBKRED = TRUE THEN DO:
         FIND FIRST eko2 WHERE
         eko2.EDEBKRED = FALSE AND
         eko2.FTG = eko.FTG AND
         eko2.EORG = ekoforst.EORG AND 
         eko2.EVERDATUM = ekoforst.EVERDATUM AND
         eko2.EPROJEKT = ekoforst.EPROJEKT AND
         eko2.EKOSTNADSSLAG = kontokode AND
         eko2.FELDEBKRED = FALSE
         USE-INDEX ORG EXCLUSIVE-LOCK NO-ERROR. 
      END.
      ELSE DO:
         FIND FIRST eko2 WHERE
         eko2.EDEBKRED = FALSE AND
         eko2.FTG = eko.FTG AND
         eko2.EORG = ekoforst.EORG AND 
         eko2.EVERDATUM = ekoforst.EVERDATUM AND
         eko2.EPROJEKT = ekoforst.EPROJEKT AND
         eko2.EKOSTNADSSLAG = kontokode AND
         eko2.FELDEBKRED = TRUE
         USE-INDEX ORG EXCLUSIVE-LOCK NO-ERROR.        
      END.
   END. 
   IF NOT AVAILABLE eko2 THEN DO:
      CREATE eko2.
   END.          
   /*SÄVSJÖ*/
   IF ekoforst.EORG BEGINS "SE" THEN DO:
      eko2.K1 = omrrgrtemp.SPECOMR.
   END.
   ELSE IF ekoforst.EORG BEGINS "S" THEN DO:
      eko2.K1 = SUBSTRING(omrrgrtemp.SPECOMR,2).
   END.
   ELSE IF ekoforst.EORG BEGINS "V" THEN DO:
      eko2.K1 = SUBSTRING(omrrgrtemp.SPECOMR,2).
   END.
   ELSE DO:
      eko2.K1 = omrrgrtemp.SPECOMR.
   END.
   ASSIGN               
   eko2.K2 = omrrgrtemp.RGR
   eko2.K3 = ""
   eko2.K4 = ekoforst.EPROJEKT
   eko2.K5 = kontokode
   eko2.FTG = eko.FTG
   eko2.EDEBKRED = FALSE 
   eko2.EORG = ekoforst.EORG  
   eko2.EVERDATUM = ekoforst.EVERDATUM
   eko2.EPROJEKT = ekoforst.EPROJEKT
   eko2.DELNR = ekoforst.DELNR 
   eko2.EKOSTNADSSLAG = kontokode.
   
   IF feltider = FALSE THEN DO:
   END.
   ELSE DO:
      IF ekoforst.FELDEBKRED = TRUE THEN ASSIGN eko2.FELDEBKRED = FALSE.
      ELSE ASSIGN eko2.FELDEBKRED = TRUE.
   END.
   IF timlon = TRUE THEN DO:
      ASSIGN
      eko2.EANTAL = eko2.EANTAL + ekoforst.EANTAL  
      eko2.EBELOPP = eko2.EBELOPP + ekoforst.EBELOPP.     
   END. 
   ELSE DO:
      eko2.EBELOPP = eko2.EBELOPP + ekoforst.ELONBELOPP.     
   END.
   
END PROCEDURE.
PROCEDURE mtrl_UI:
   DEFINE INPUT PARAMETER typvar AS CHARACTER  NO-UNDO.
   FIND FIRST omrrgrtemp WHERE omrrgrtemp.PERSTYP = typvar NO-LOCK NO-ERROR.
   FIND FIRST omrkosttemp WHERE omrkosttemp.PERSTYP = typvar NO-LOCK NO-ERROR.
   ASSIGN
   kontokod =  omrkosttemp.KOSTNADSLAGDEB 
   kontokode = omrkosttemp.KOSTNADSLAGKRED
   kontokod2 =  omrkosttemp.KOSTNADSLAGDEB2 
   kontokode2 = omrkosttemp.KOSTNADSLAGKRED2.
   IF korvar = "" THEN DO:
      FIND LAST INTERNFAKTKOLL USE-INDEX VDATUM NO-LOCK NO-ERROR.
      IF AVAILABLE INTERNFAKTKOLL THEN DO:
         OPEN QUERY bq FOR EACH BERBEST WHERE BERBEST.DEPNR = 1 AND
         BERBEST.Bestdatum > INTERNFAKTKOLL.VDATUM AND BERBEST.OFFERT = FALSE AND
         BERBEST.Bestdatum <= vkdatum  NO-LOCK.
      END.
      ELSE DO:
         OPEN QUERY bq FOR EACH BERBEST WHERE BERBEST.DEPNR = 1 AND
         BERBEST.Bestdatum <= vkdatum AND BERBEST.OFFERT = FALSE
         NO-LOCK.
      END.
   END.
   ELSE DO:
      OPEN QUERY bq FOR EACH BERBEST WHERE BERBEST.DEPNR = 1 AND
      SUBSTRING(BERBEST.BESTALLARE,60,9) = korvar
      NO-LOCK.
   END.
   GET FIRST bq NO-LOCK.
   DO WHILE AVAILABLE(BERBEST):
      IF BERBEST.UTTAG = TRUE THEN uttagsatt = 1.
      ELSE uttagsatt = -1.
      IF SUBSTRING(BERBEST.BESTALLARE,60,9) = korvar THEN DO:
         FIND FIRST AONRTAB WHERE AONRTAB.AONR = BERBEST.AONR AND AONRTAB.DELNR = BERBEST.DELNR
         NO-LOCK NO-ERROR.
         IF AVAILABLE AONRTAB THEN DO:
            FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = AONRTAB.OMRADE NO-LOCK NO-ERROR.
            FIND FIRST AVDELNING WHERE AVDELNING.AVDELNINGNR = OMRADETAB.AVDELNINGNR NO-LOCK NO-ERROR.
            FIND FIRST JURPERS WHERE JURPERS.JUDID = AVDELNING.POSTANST NO-LOCK NO-ERROR.
            IF JURPERS.JUDID = "GKEAB" THEN sattfore = "100".
            ELSE IF JURPERS.JUDID = "GSEAB" THEN sattfore = "180".
            ELSE IF JURPERS.JUDID = "KEV" THEN sattfore = "105".
            /*SÄVSJÖ*/
            ELSE IF JURPERS.JUDID = "SEAB" THEN sattfore = "150".
            ELSE sattfore = "999".
            IF sattfore = "999" THEN sattfore = sattfore.
            ELSE DO:
               FIND FIRST eko WHERE
               eko.FTG = sattfore AND
               eko.EDEBKRED = TRUE AND
               eko.EORG = AONRTAB.OMRADE AND 
               eko.EVERDATUM = DATE(MONTH(BERBEST.Bestdatum),01,YEAR(BERBEST.Bestdatum)) AND
               eko.EPROJEKT = AONRTAB.AONR AND
               eko.DELNR = AONRTAB.DELNR AND
               eko.EKOSTNADSSLAG = kontokod
               USE-INDEX ORG EXCLUSIVE-LOCK NO-ERROR.  
               IF NOT AVAILABLE eko THEN DO:
                  CREATE eko.
               END.    
               ASSIGN         
               eko.K1 = ""
               eko.K2 = ""
               eko.K3 = ""
               eko.K4 = AONRTAB.AONR
               eko.K5 = kontokod
               eko.FTG = sattfore
               eko.EDEBKRED = TRUE 
               eko.EORG = AONRTAB.OMRADE  
               eko.EVERDATUM = DATE(MONTH(BERBEST.Bestdatum),01,YEAR(BERBEST.Bestdatum))
               eko.EPROJEKT = AONRTAB.AONR 
               eko.DELNR = AONRTAB.DELNR 
               eko.EKOSTNADSSLAG = kontokod.   
               eko.EBELOPP = eko.EBELOPP + BERBEST.PRIS * BERBEST.ANTAL * uttagsatt.     
               
               /*DEBET2*/
               FIND FIRST eko WHERE
               eko.FTG = sattfore AND
               eko.EDEBKRED = TRUE AND
               eko.EORG = AONRTAB.OMRADE AND 
               eko.EVERDATUM = DATE(MONTH(BERBEST.Bestdatum),01,YEAR(BERBEST.Bestdatum)) AND
               eko.EPROJEKT = AONRTAB.AONR AND
               eko.DELNR = AONRTAB.DELNR AND
               eko.EKOSTNADSSLAG = kontokod2
               USE-INDEX ORG EXCLUSIVE-LOCK NO-ERROR.  
               IF NOT AVAILABLE eko THEN DO:
                  CREATE eko.
               END.    
               ASSIGN         
               eko.K1 = ""
               eko.K2 = ""
               eko.K3 = ""
               eko.K4 = AONRTAB.AONR
               eko.K5 = kontokod2
               eko.FTG = sattfore
               eko.EDEBKRED = TRUE 
               eko.EORG = AONRTAB.OMRADE  
               eko.EVERDATUM = DATE(MONTH(BERBEST.Bestdatum),01,YEAR(BERBEST.Bestdatum))
               eko.EPROJEKT = AONRTAB.AONR 
               eko.DELNR = AONRTAB.DELNR 
               eko.EKOSTNADSSLAG = kontokod2.   
               eko.EBELOPP = eko.EBELOPP + BERBEST.PRIS * BERBEST.ANTAL * gkmovar * uttagsatt.          
            /*KREDIT POST*/          
               FIND FIRST eko2 WHERE
               eko2.EDEBKRED = FALSE AND
               eko2.FTG = sattfore AND
               eko2.EORG = "" AND 
               eko2.EVERDATUM = DATE(MONTH(BERBEST.Bestdatum),01,YEAR(BERBEST.Bestdatum)) AND
               eko2.EPROJEKT = "" AND
               eko2.DELNR = 0     AND
               eko2.EKOSTNADSSLAG = kontokode
               USE-INDEX ORG EXCLUSIVE-LOCK NO-ERROR.  
               IF NOT AVAILABLE eko2 THEN DO:
                  CREATE eko2.
               END.             
               ASSIGN            
               eko2.K1 = ""
               eko2.K2 = ""
               eko2.K3 = ""
               eko2.K4 = ""
               eko2.K5 = kontokode
               eko2.FTG = sattfore
               eko2.EDEBKRED = FALSE 
               eko2.EORG = ""  
               eko2.EVERDATUM = DATE(MONTH(BERBEST.Bestdatum),01,YEAR(BERBEST.Bestdatum))
               eko2.EPROJEKT = ""
               eko2.DELNR = 0 
               eko2.EKOSTNADSSLAG = kontokode.
               eko2.EBELOPP = eko2.EBELOPP + BERBEST.PRIS * BERBEST.ANTAL * uttagsatt.              
               /*KREDIT2*/
               FIND FIRST eko2 WHERE
               eko2.EDEBKRED = FALSE AND
               eko2.FTG = sattfore AND
               eko2.EORG = omrrgrtemp.SPECOMR AND 
               eko2.EVERDATUM = DATE(MONTH(BERBEST.Bestdatum),01,YEAR(BERBEST.Bestdatum)) AND
               eko2.EPROJEKT = "" AND
               eko2.DELNR = 0 AND
               eko2.EKOSTNADSSLAG = kontokode2
               USE-INDEX ORG EXCLUSIVE-LOCK NO-ERROR.  
               IF NOT AVAILABLE eko2 THEN DO:
                  CREATE eko2.
               END.    
               ASSIGN             
               eko2.K1 = omrrgrtemp.SPECOMR
               eko2.K2 = omrrgrtemp.RGR
               eko2.K3 = ""
               eko2.K4 = ""
               eko2.K5 = kontokode2
               eko2.FTG = sattfore
               eko2.EDEBKRED = FALSE 
               eko2.EORG = omrrgrtemp.SPECOMR  
               eko2.EVERDATUM = DATE(MONTH(BERBEST.Bestdatum),01,YEAR(BERBEST.Bestdatum))
               eko2.EPROJEKT = ""
               eko2.DELNR = 0 
               eko2.EKOSTNADSSLAG = kontokode2.
               eko2.EBELOPP = eko2.EBELOPP + BERBEST.PRIS * BERBEST.ANTAL * gkmovar * uttagsatt.              
            END.
            IF skarpvar = TRUE AND korvar = "" THEN DO TRANSACTION:
               GET CURRENT bq EXCLUSIVE-LOCK.                         
               SUBSTRING(BERBEST.BESTALLARE,60) = "w" + STRING(TODAY,"99999999").
            END.
         END.
      END.
      GET NEXT bq NO-LOCK.
   END.   
END PROCEDURE.
PROCEDURE bilkost_UI:
   DEFINE INPUT PARAMETER typvar AS CHARACTER  NO-UNDO.
   FIND FIRST omrrgrtemp WHERE 
   omrrgrtemp.PERSTYP = typvar NO-LOCK NO-ERROR.     
   /*DEBET POST*/
   FIND FIRST eko WHERE
   eko.FTG = ekoforst.FTG AND
   eko.EORG = ekoforst.EGEO AND 
   eko.EVERDATUM = ekoforst.EVERDATUM AND
   eko.EPROJEKT = ekoforst.EPROJEKT AND
   eko.DELNR = ekoforst.DELNR AND
   eko.EKOSTNADSSLAG = kontokod AND
   eko.EDEBKRED = TRUE AND
   eko.FELDEBKRED = ekoforst.FELDEBKRED
   USE-INDEX ORG EXCLUSIVE-LOCK NO-ERROR.  
   IF NOT AVAILABLE eko THEN DO:
      CREATE eko.
   END.    
   ASSIGN         
   eko.K1 = ""
   eko.K2 = ""
   eko.K3 = ""
   eko.K4 = ekoforst.EPROJEKT
   eko.K5 = kontokod
   eko.FTG = ekoforst.FTG
   eko.EDEBKRED = TRUE 
   eko.EORG = ekoforst.EGEO 
   eko.EVERDATUM = ekoforst.EVERDATUM
   eko.EPROJEKT = ekoforst.EPROJEKT 
   eko.DELNR = ekoforst.DELNR 
   eko.EKOSTNADSSLAG = kontokod   
   eko.EBELOPP = eko.EBELOPP + ekoforst.ELONBELOPP
   eko.FELDEBKRED = ekoforst.FELDEBKRED.
   /*KREDIT POST*/          
   IF feltider = FALSE THEN DO:
      FIND FIRST eko2 WHERE
      eko2.FTG = ekoforst.FTG AND
      eko2.EORG = omrrgrtemp.SPECOMR AND 
      eko2.EVERDATUM = ekoforst.EVERDATUM AND
      eko2.EPROJEKT = ekoforst.EPROJEKT AND
      eko2.DELNR = ekoforst.DELNR AND
      eko2.EKOSTNADSSLAG = kontokode  AND
      eko2.ELONTILLAGG = ekoforst.ELONTILLAGG
      USE-INDEX ORG EXCLUSIVE-LOCK NO-ERROR.  
   END.
   ELSE DO:
      IF ekoforst.FELDEBKRED = TRUE THEN DO:
         FIND FIRST eko2 WHERE
         eko2.FTG = ekoforst.FTG AND
         eko2.EORG = omrrgrtemp.SPECOMR AND 
         eko2.EVERDATUM = ekoforst.EVERDATUM AND
         eko2.EPROJEKT = ekoforst.EPROJEKT AND
         eko2.DELNR = ekoforst.DELNR AND
         eko2.EKOSTNADSSLAG = kontokode  AND
         eko2.ELONTILLAGG = ekoforst.ELONTILLAGG AND
         eko2.EDEBKRED = FALSE AND
         eko2.FELDEBKRED = FALSE
         USE-INDEX ORG EXCLUSIVE-LOCK NO-ERROR.        
      END.
      ELSE DO:
         FIND FIRST eko2 WHERE
         eko2.FTG = ekoforst.FTG AND
         eko2.EORG = omrrgrtemp.SPECOMR AND 
         eko2.EVERDATUM = ekoforst.EVERDATUM AND
         eko2.EPROJEKT = ekoforst.EPROJEKT AND
         eko2.DELNR = ekoforst.DELNR AND
         eko2.EKOSTNADSSLAG = kontokode  AND
         eko2.ELONTILLAGG = ekoforst.ELONTILLAGG AND
         eko2.EDEBKRED = FALSE AND
         eko2.FELDEBKRED = TRUE
         USE-INDEX ORG EXCLUSIVE-LOCK NO-ERROR.        
      END.
   END.
   IF NOT AVAILABLE eko2 THEN DO:
      CREATE eko2.
   END.    
   ASSIGN     
   eko2.K1 = omrrgrtemp.SPECOMR
   eko2.K2 = omrrgrtemp.RGR
   eko2.K3 = ""
   eko2.K4 = ekoforst.EPROJEKT
   eko2.K5 = kontokode
   eko2.FTG = ekoforst.FTG
   eko2.EDEBKRED = FALSE 
   eko2.EORG = omrrgrtemp.SPECOMR  
   eko2.EVERDATUM = ekoforst.EVERDATUM
   eko2.EPROJEKT = ekoforst.EPROJEKT 
   eko2.DELNR = ekoforst.DELNR 
   eko2.EKOSTNADSSLAG = kontokode
   eko2.ELONTILLAGG = ekoforst.ELONTILLAGG.
   eko2.EBELOPP = eko2.EBELOPP + ekoforst.ELONBELOPP.        
   IF feltider = FALSE THEN DO:
   END.
   ELSE DO:
      IF ekoforst.FELDEBKRED = TRUE THEN ASSIGN eko2.FELDEBKRED = FALSE.
      ELSE ASSIGN eko2.FELDEBKRED = TRUE.
   END.
END PROCEDURE.
PROCEDURE kontofordel_UI:
   OPEN QUERY qe FOR EACH eko.
   GET FIRST qe.
   DO WHILE AVAILABLE(eko):  
      IF eko.EPROJEKT = "" THEN DO:         
         FIND FIRST slutut WHERE 
         slutut.FTG = eko.FTG AND
         slutut.VDATUM = eko.EVERDATUM AND
         slutut.DEBKRED = eko.EDEBKRED AND 
         slutut.FELDEBKRED = eko.FELDEBKRED AND 
         slutut.K1 = eko.K1 AND 
         slutut.K2 = eko.K2 AND
         slutut.K3 = eko.K3 AND
         slutut.K4 = eko.K4 AND
         slutut.K5 = eko.K5
         NO-ERROR.  
         IF NOT AVAILABLE slutut THEN DO:
            CREATE slutut.
         END.       
         ASSIGN  
         slutut.FTG = eko.FTG
         slutut.VDATUM = eko.EVERDATUM 
         slutut.DEBKRED = eko.EDEBKRED          
         slutut.FELDEBKRED = eko.FELDEBKRED 
         slutut.K1 = eko.K1  
         slutut.K2 = eko.K2 
         slutut.K3 = eko.K3 
         slutut.K4 = eko.K4
         slutut.K5 = eko.K5
         slutut.BELOPP = slutut.BELOPP + eko.EBELOPP.
      END.
      ELSE DO:               
         OPEN QUERY qa FOR EACH AONRKONTKOD WHERE AONRKONTKOD.AONR = eko.EPROJEKT AND 
         AONRKONTKOD.DELNR = eko.DELNR NO-LOCK.
         GET FIRST qa NO-LOCK.
         DO WHILE AVAILABLE(AONRKONTKOD):
            IF AONRKONTKOD.K3 = "Ja" THEN musz = musz.
            ELSE DO:
               ASSIGN
               eko.K4 = ""               
               eko.EPROJEKT = "".
            END.
            /*DEBET*/
            IF eko.EDEBKRED = TRUE THEN DO:              
               FIND FIRST slutut WHERE 
               slutut.FTG = eko.FTG AND
               slutut.DEBKRED = eko.EDEBKRED AND
               slutut.FELDEBKRED = eko.FELDEBKRED AND 
               slutut.VDATUM = eko.EVERDATUM AND
               slutut.K1 = AONRKONTKOD.K1 AND
               slutut.K2 = AONRKONTKOD.K2 AND
               slutut.K3 = AONRKONTKOD.K3 AND
               slutut.K4 = eko.K4 AND               
               slutut.K5 = eko.K5 AND
               slutut.BIL = eko.ELONTILLAGG
               NO-ERROR.  
               IF NOT AVAILABLE slutut THEN DO:
                  CREATE slutut.
               END.       
               ASSIGN  
               slutut.FTG = eko.FTG
               slutut.VDATUM = eko.EVERDATUM 
               slutut.DEBKRED = eko.EDEBKRED           
               slutut.K1 = AONRKONTKOD.K1 
               slutut.K2 = AONRKONTKOD.K2 
               slutut.K3 = AONRKONTKOD.K3 
               slutut.K4 = eko.K4                
               slutut.K5 = eko.K5 
               slutut.BIL = eko.ELONTILLAGG
               slutut.FELDEBKRED = eko.FELDEBKRED.
            END.
            /*kredit*/
            IF eko.EDEBKRED = FALSE THEN DO: 
               FIND FIRST slutut WHERE 
               slutut.FTG = eko.FTG AND
               slutut.VDATUM = eko.EVERDATUM AND
               slutut.DEBKRED = eko.EDEBKRED AND  
               slutut.FELDEBKRED = eko.FELDEBKRED AND 
               slutut.K1 = eko.K1 AND
               slutut.K2 = eko.K2 AND
               slutut.K3 = "" AND
               slutut.K4 = "" AND               
               slutut.K5 = eko.K5 AND
               slutut.BIL = eko.ELONTILLAGG
               NO-ERROR.  
               IF NOT AVAILABLE slutut THEN DO:
                  CREATE slutut.
               END.       
               ASSIGN  
               slutut.FTG = eko.FTG
               slutut.VDATUM = eko.EVERDATUM 
               slutut.DEBKRED = eko.EDEBKRED           
               slutut.K1 = eko.K1
               slutut.K2 = eko.K2 
               slutut.K3 = "" 
               slutut.K4 = ""
               slutut.K5 = eko.K5
               slutut.BIL = eko.ELONTILLAGG
               slutut.FELDEBKRED = eko.FELDEBKRED.
            END.            
            ASSIGN
            slutut.ANTAL = slutut.ANTAL + (eko.EANTAL * AONRKONTKOD.SATS%) / 100  
            slutut.BELOPP = slutut.BELOPP + (eko.EBELOPP * AONRKONTKOD.SATS%) / 100.                           
            GET NEXT qa NO-LOCK.
         END.
      END.
      GET NEXT qe.
   END.
   IF feltider = FALSE THEN DO:
      FOR EACH slutut:
         slutut.BELOPP = ROUND(slutut.BELOPP,2).
      END.
   END.
END PROCEDURE.
PROCEDURE kreditposter_UI:
   OPEN QUERY sq FOR EACH slutut WHERE slutut.DEBKRED = FALSE NO-LOCK.
   GET FIRST sq.
   DO WHILE AVAILABLE(slutut):
      FIND FIRST slututK WHERE 
      slututK.FTG = slutut.FTG AND
      slututK.VDATUM = slutut.VDATUM AND
      slututK.DEBKRED = slutut.DEBKRED AND 
      slututK.FELDEBKRED = slutut.FELDEBKRED AND 
      slututK.K1 = slutut.K1 AND
      slututK.K2 = slutut.K2 AND
      slututK.K3 = slutut.K3 AND
      slututK.K4 = slutut.K4 AND               
      slututK.K5 = slutut.K5 AND
      slututK.BIL = slutut.BIL      
      NO-ERROR.  
      IF NOT AVAILABLE slututK THEN DO:
         CREATE slututK.
      END.         
      ASSIGN  
      slututK.FTG = slutut.FTG
      slututK.VDATUM = slutut.VDATUM 
      slututK.DEBKRED = slutut.DEBKRED           
      slututK.FELDEBKRED = slutut.FELDEBKRED 
      slututK.K1 = slutut.K1
      slututK.K2 = slutut.K2
      slututK.K3 = slutut.K3
      slututK.K4 = slutut.K4
      slututK.K5 = slutut.K5
      slututK.BIL = slutut.BIL.
      IF slutut.BIL = "" THEN DO:
         ASSIGN
         slututK.ANTAL = slututK.ANTAL + ROUND(slutut.ANTAL,2) 
         slututK.BELOPP = slututK.BELOPP + ROUND(slutut.BELOPP,2).
      END.
      ELSE DO:     
         ASSIGN
         slututK.ANTAL = slututK.ANTAL + slutut.ANTAL 
         slututK.BELOPP = slututK.BELOPP + slutut.BELOPP.
      END.
      DELETE slutut.
      GET NEXT sq.
   END.
   /*Nödlösning för öresavrundning*/
   
   FOR EACH slututk BREAK BY slututk.FTG: 
      ACCUMULATE slututk.BELOPP (TOTAL BY slututk.FTG).
      IF LAST-OF(slututk.FTG) THEN DO:
         FIND FIRST oretemp WHERE oretemp.FTG = slututk.FTG NO-ERROR.
         IF NOT AVAILABLE oretemp THEN DO:
            CREATE oretemp.         
         END.
         ASSIGN
         oretemp.FTG = slututk.FTG
         oretemp.KREDIT = oretemp.KREDIT + ROUND((ACCUM TOTAL BY slututk.FTG slututk.BELOPP),2).         
      END.   
   END.
   FOR EACH slutut BREAK BY slutut.FTG: 
      ACCUMULATE slutut.BELOPP (TOTAL BY slutut.FTG).
      IF LAST-OF(slutut.FTG) THEN DO:
         FIND FIRST oretemp WHERE oretemp.FTG = slutut.FTG NO-ERROR.
         IF NOT AVAILABLE oretemp THEN DO:
            CREATE oretemp.         
         END.
         ASSIGN
         oretemp.FTG = slutut.FTG
         oretemp.DEBET = ROUND((ACCUM TOTAL BY slutut.FTG slutut.BELOPP),2).
      END.   
   END.
   FOR EACH oretemp BY oretemp.FTG:
      IF (oretemp.KREDIT - oretemp.DEBET) NE 0 THEN DO:
         diffvar = oretemp.DEBET - oretemp.KREDIT. 
         FIND LAST slututk WHERE slututk.FTG = oretemp.FTG AND slututk.BIL NE "" NO-ERROR.
         IF AVAILABLE slututk THEN DO:
            slututK.BELOPP = slututK.BELOPP + diffvar.
         END.
         ELSE DO:
            FIND LAST slututk WHERE slututk.FTG = oretemp.FTG NO-ERROR.
            slututK.BELOPP = slututK.BELOPP + diffvar.
         END.
      END.
   END.
    
   FOR EACH slututK:
      CREATE slutut.
      BUFFER-COPY slututK TO slutut.
      DELETE slututK.
   END.   
   FOR EACH slutut:
      IF slutut.DEBKRED = FALSE THEN slutut.BELOPP = slutut.BELOPP.
      slutut.K2POS8 = slutut.K2.
   END.
END PROCEDURE.

