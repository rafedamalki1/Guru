/*STORSUM7.P SUMMERING AV STÖRNING*/
DEFINE VARIABLE timmar100 AS DECIMAL NO-UNDO.
DEFINE VARIABLE timmar60 AS DECIMAL  NO-UNDO.

DEFINE TEMP-TABLE summ_temp
   FIELD SPANID AS INTEGER
   FIELD FELOID AS INTEGER
   FIELD ADELID AS INTEGER
   FIELD ANTALHSP AS INTEGER
   FIELD ANTALLSP AS INTEGER.

DEFINE TEMP-TABLE avd_temp
   FIELD AVDELNINGNR LIKE STORDISTRIKT.AVDELNINGNR   
   FIELD NAMN LIKE STORDISTRIKT.NAMN
   INDEX AVD IS PRIMARY AVDELNINGNR.

DEFINE INPUT PARAMETER TABLE FOR avd_temp.
DEFINE INPUT PARAMETER valfore AS LOGICAL NO-UNDO.
DEFINE INPUT PARAMETER distvar LIKE STORDISTRIKT.DISTRIKTID NO-UNDO.   
DEFINE INPUT PARAMETER bdatum AS DATE NO-UNDO.
DEFINE INPUT PARAMETER avdatum AS DATE NO-UNDO.
DEFINE INPUT PARAMETER period AS INTEGER NO-UNDO.
DEFINE INPUT PARAMETER uttyp AS INTEGER NO-UNDO.
DEFINE INPUT PARAMETER driftvar LIKE STORDRIFTOMR.STDRIFTID NO-UNDO.
DEFINE INPUT PARAMETER alla AS LOGICAL NO-UNDO.
DEFINE INPUT PARAMETER spannvar LIKE SPANNINGSNIV.SPANID NO-UNDO.
DEFINE INPUT-OUTPUT PARAMETER TABLE FOR summ_temp.

FUNCTION klockan100 RETURNS DECIMAL
  (INPUT ber60 AS DECIMAL) :
  RETURN  (TRUNCATE(ber60,0) * 3600 + (ber60 - TRUNCATE(ber60,0)) * 100 * 60) / 3600. 
END FUNCTION.

FUNCTION klockan60 RETURNS DECIMAL
  (INPUT ber100 AS DECIMAL) :
  RETURN TRUNCATE(ber100,0) + ((ber100 - TRUNCATE(ber100,0)) / 100) * 60.
END FUNCTION.

   {muswait.i} 
   IF valfore = TRUE THEN DO:
      FOR EACH avd_temp USE-INDEX AVD:
         OPEN QUERY dq FOR EACH STORDISTRIKT WHERE 
         STORDISTRIKT.AVDELNINGNR = avd_temp.AVDELNINGNR AND 
         STORDISTRIKT.ARTAL = YEAR(bdatum) USE-INDEX AVDARTAL NO-LOCK.
         GET FIRST dq NO-LOCK.
         DO WHILE AVAILABLE(STORDISTRIKT):
            distvar = STORDISTRIKT.DISTRIKTID.
            RUN distrikt_UI.
            GET NEXT dq NO-LOCK.
         END.
         CLOSE QUERY dq.
      END.         
   END.
   ELSE DO:
      IF alla = TRUE THEN DO:
         IF uttyp = 3 THEN DO:
            IF period = 1 THEN DO:
               OPEN QUERY sq FOR EACH STORNINGSTAB WHERE YEAR(STORNINGSTAB.HDATUM) = YEAR(bdatum) AND
               STORNINGSTAB.STDRIFTID = driftvar AND STORNINGSTAB.FRANSPANID = spannvar
               USE-INDEX LISTA1 NO-LOCK.
            END.
            ELSE DO:
               OPEN QUERY sq FOR EACH STORNINGSTAB WHERE STORNINGSTAB.HDATUM >= bdatum AND
               STORNINGSTAB.HDATUM <= avdatum AND
               STORNINGSTAB.STDRIFTID = driftvar AND STORNINGSTAB.FRANSPANID = spannvar
               USE-INDEX LISTA1 NO-LOCK.
            END.
         END.
         ELSE DO:
            IF period = 1 THEN DO:
               OPEN QUERY sq FOR EACH STORNINGSTAB WHERE YEAR(STORNINGSTAB.HDATUM) = YEAR(bdatum) AND
               STORNINGSTAB.STDRIFTID = driftvar AND STORNINGSTAB.FRANSPANID = spannvar AND 
               STORNINGSTAB.STORTYPID = uttyp 
               USE-INDEX LISTA2 NO-LOCK.
            END.
            ELSE DO:
               OPEN QUERY sq FOR EACH STORNINGSTAB WHERE STORNINGSTAB.HDATUM >= bdatum AND
               STORNINGSTAB.HDATUM <= avdatum AND
               STORNINGSTAB.STDRIFTID = driftvar AND STORNINGSTAB.FRANSPANID = spannvar AND 
               STORNINGSTAB.STORTYPID = uttyp 
               USE-INDEX LISTA2 NO-LOCK.
            END.
         END.      
         GET FIRST sq NO-LOCK.
         DO WHILE AVAILABLE(STORNINGSTAB):         
            RUN summa_UI.         
            GET NEXT sq NO-LOCK.
         END.
         CLOSE QUERY sq.      
      END.
      ELSE DO:
         RUN distrikt_UI.                  
      END.
   END.

PROCEDURE distrikt_UI:   
   IF uttyp = 3 THEN DO:
      IF period = 1 THEN DO:
         OPEN QUERY sq FOR EACH STORNINGSTAB WHERE STORNINGSTAB.DISTRIKTID = distvar AND
         YEAR(STORNINGSTAB.HDATUM) = YEAR(bdatum) AND STORNINGSTAB.STDRIFTID = driftvar AND
         STORNINGSTAB.FRANSPANID = spannvar 
         USE-INDEX LISTA3 NO-LOCK.
      END.
      ELSE DO:
         OPEN QUERY sq FOR EACH STORNINGSTAB WHERE STORNINGSTAB.DISTRIKTID = distvar AND
         STORNINGSTAB.HDATUM >= bdatum AND
         STORNINGSTAB.HDATUM <= avdatum AND STORNINGSTAB.STDRIFTID = driftvar AND
         STORNINGSTAB.FRANSPANID = spannvar 
         USE-INDEX LISTA3 NO-LOCK.
      END.
   END.
   ELSE DO:
      IF period = 1 THEN DO:
         OPEN QUERY sq FOR EACH STORNINGSTAB WHERE STORNINGSTAB.DISTRIKTID = distvar AND
         YEAR(STORNINGSTAB.HDATUM) = YEAR(bdatum) AND STORNINGSTAB.FRANSPANID = spannvar AND 
         STORNINGSTAB.STDRIFTID = driftvar AND STORNINGSTAB.STORTYPID = uttyp
         USE-INDEX LISTA3 NO-LOCK.
      END.
      ELSE DO:
         OPEN QUERY sq FOR EACH STORNINGSTAB WHERE STORNINGSTAB.DISTRIKTID = distvar AND
         STORNINGSTAB.HDATUM >= bdatum AND
         STORNINGSTAB.HDATUM <= avdatum AND STORNINGSTAB.FRANSPANID = spannvar AND 
         STORNINGSTAB.STDRIFTID = driftvar AND STORNINGSTAB.STORTYPID = uttyp
         USE-INDEX LISTA3 NO-LOCK.
      END.
   END.     
   GET FIRST sq NO-LOCK.
   DO WHILE AVAILABLE(STORNINGSTAB): 
      RUN summa_UI.
      GET NEXT sq NO-LOCK.
   END.
   CLOSE QUERY sq.
END PROCEDURE.

PROCEDURE summa_UI.    
   CREATE summ_temp.
   ASSIGN
   summ_temp.ANTALHSP = STORNINGSTAB.ANTALHSP
   summ_temp.ANTALLSP = STORNINGSTAB.ANTALLSP
   summ_temp.SPANID = STORNINGSTAB.FRANSPANID
   summ_temp.ADELID = STORNINGSTAB.ADELID.
   FIND LAST BORTKOPPLAD WHERE BORTKOPPLAD.STORNUMMERID = STORNINGSTAB.STORNUMMERID
   USE-INDEX AVBROTT NO-LOCK NO-ERROR.
   IF AVAILABLE BORTKOPPLAD THEN DO:
      RUN TIDBER.P (INPUT STORNINGSTAB.HDATUM, INPUT BORTKOPPLAD.ATERDATUM, INPUT STORNINGSTAB.HKLOCKAN,
      INPUT BORTKOPPLAD.ATERKLOCKAN, OUTPUT timmar100, OUTPUT timmar60).
   END.
   ELSE DO:
      RUN TIDBER.P (INPUT STORNINGSTAB.HDATUM, INPUT STORNINGSTAB.DATUM100%, INPUT STORNINGSTAB.HKLOCKAN,
      INPUT STORNINGSTAB.KLOCKAN100%, OUTPUT timmar100, OUTPUT timmar60).
   END.   
   IF timmar60 <= 0000.03 THEN summ_temp.FELOID = 1.
   ELSE IF timmar60 >  0000.03 AND  timmar60< 0000.10 THEN summ_temp.FELOID = 2.
   ELSE IF timmar60 >= 0000.10 AND timmar60< 0000.30 THEN summ_temp.FELOID = 3.
   ELSE IF timmar60 >= 0000.30 AND timmar60< 0001.00 THEN summ_temp.FELOID = 4.
   ELSE IF timmar60 >= 0001.00 AND timmar60< 0002.00 THEN summ_temp.FELOID = 5.
   ELSE IF timmar60 >= 0002.00 AND timmar60< 0006.00 THEN summ_temp.FELOID = 6.
   ELSE IF timmar60 >= 0006.00 AND timmar60< 0012.00 THEN summ_temp.FELOID = 7.
   ELSE IF timmar60 >= 0012.00 AND timmar60< 0024.00 THEN summ_temp.FELOID = 8.
   ELSE DO:
      summ_temp.FELOID = 9.
      /*IF STRING(timmar60,"9999.99") > "1000.00" THEN 
      MESSAGE STORNINGSTAB.STORNUMMERID.*/
   END.
   
   /*
   IF STRING(timmar60,"9999.99") <= "0000.03" THEN summ_temp.FELOID = 1.
   ELSE IF STRING(timmar60,"9999.99") > "0000.03" AND STRING(timmar60,"9999.99") < "0000.10" THEN summ_temp.FELOID = 2.
   ELSE IF STRING(timmar60,"9999.99") >= "0000.10" AND STRING(timmar60,"9999.99") < "0000.30" THEN summ_temp.FELOID = 3.
   ELSE IF STRING(timmar60,"9999.99") >= "0000.30" AND STRING(timmar60,"9999.99") < "0001.00" THEN summ_temp.FELOID = 4.
   ELSE IF STRING(timmar60,"9999.99") >= "0001.00" AND STRING(timmar60,"9999.99") < "0002.00" THEN summ_temp.FELOID = 5.
   ELSE IF STRING(timmar60,"9999.99") >= "0002.00" AND STRING(timmar60,"9999.99") < "0006.00" THEN summ_temp.FELOID = 6.
   ELSE IF STRING(timmar60,"9999.99") >= "0006.00" AND STRING(timmar60,"9999.99") < "0012.00" THEN summ_temp.FELOID = 7.
   ELSE IF STRING(timmar60,"9999.99") >= "0012.00" AND STRING(timmar60,"9999.99") < "0024.00" THEN summ_temp.FELOID = 8.
   ELSE DO:
      summ_temp.FELOID = 9.
      /*IF STRING(timmar60,"9999.99") > "1000.00" THEN 
      MESSAGE STORNINGSTAB.STORNUMMERID.*/
   END.
   */
END PROCEDURE.
