/*LINKABM.P*/
{LINKABMWID.I}
DEFINE SHARED VARIABLE entrylinledare AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE entrylinmeter  AS LOGICAL NO-UNDO.
DEFINE VARIABLE kon_idh  AS HANDLE NO-UNDO.
DEFINE VARIABLE kon_id2h AS HANDLE NO-UNDO.
DEFINE VARIABLE kopp_linah AS HANDLE NO-UNDO.
framesizeh = framesizeextrah.
kon_idh  = TEMP-TABLE kon_id:DEFAULT-BUFFER-HANDLE.       
kon_id2h = TEMP-TABLE kon_id2:DEFAULT-BUFFER-HANDLE.      
kopp_linah = TEMP-TABLE kopp_lina:DEFAULT-BUFFER-HANDLE.  
ON 'MOUSE-MENU-CLICK' OF BRW_FRAN PERSISTENT RUN mbrwfran_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_FRAN PERSISTENT RUN vbrwfran_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK' OF BRW_TILL PERSISTENT RUN mbrwtill_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_TILL PERSISTENT RUN vbrwtill_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF BRW_LIN PERSISTENT RUN vbrwlin_UI IN THIS-PROCEDURE.
ON 'ROW-LEAVE' OF BRW_LIN PERSISTENT RUN rowlbrwmtrl_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-CLICK' OF linledare PERSISTENT RUN mll_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-CLICK' OF linmeter  PERSISTENT RUN mlm_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF linledare PERSISTENT RUN lled_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF linmeter PERSISTENT RUN lmeter_UI IN THIS-PROCEDURE.
ON 'ENTRY' OF linledare PERSISTENT RUN elled_UI IN THIS-PROCEDURE.
ON 'ENTRY' OF linmeter PERSISTENT RUN elmeter_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_AND PERSISTENT RUN btnand_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_BORT PERSISTENT RUN btnbort_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_MIN PERSISTENT RUN btnmin_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_SKAPA PERSISTENT RUN btnskapa_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_UP PERSISTENT RUN btnup_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_VISA-2 PERSISTENT RUN btnvisa2_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF CMB_VAL PERSISTENT RUN cmbval_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED' OF CMB_VAL2 PERSISTENT RUN cmbval2_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF FBTN_KORT PERSISTENT RUN fbtnkort_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF FBTN_LINUPP PERSISTENT RUN fbtnlinupp_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF FBTN_SCHAKT PERSISTENT RUN fbtnschakt_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF FBTN_VISA PERSISTENT RUN fbtnvisa_UI IN THIS-PROCEDURE.
ON 'ANY-KEY' OF FILL-IN-ANTAL PERSISTENT RUN akantal_UI IN THIS-PROCEDURE.
ON 'ANY-KEY' OF FILL-IN-LANGD PERSISTENT RUN aklangd_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK' OF FILL-IN-LANGD PERSISTENT RUN mlangd_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_Visa_informationLIN PERSISTENT RUN m_Visa_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_Visa_information2LIN PERSISTENT RUN m_Visa2_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF BTN_AVB PERSISTENT RUN btnavb_UI IN THIS-PROCEDURE.

PROCEDURE btnavb_UI :
   {muswait.i}  
   APPLY "VALUE-CHANGED" TO BRW_LIN.
   RUN dubbbort_UI.  
   EMPTY TEMP-TABLE upp_tab NO-ERROR.
   EMPTY TEMP-TABLE upp_tab2 NO-ERROR.
   EMPTY TEMP-TABLE upp_tab3 NO-ERROR.
   FIND FIRST kopp_lina WHERE kopp_lina.TOTMETER NE 0 NO-LOCK NO-ERROR.
   IF AVAILABLE kopp_lina THEN DO:
      FOR EACH kopp_lina WHERE kopp_lina.KORTKOD = ? AND kopp_lina.TOTMETER = 0
      AND kopp_lina.METER > 0:
         CREATE upp_tab.
         ASSIGN              
         upp_tab.ENR = kopp_lina.ENR
         upp_tab.BENAMNING = kopp_lina.BENAMNING 
         upp_tab.ENHET = kopp_lina.ENHET
         upp_tab.LEVKOD = kopp_lina.LEVKOD 
         upp_tab.PRIS = kopp_lina.PRIS              
         upp_tab.METER = kopp_lina.METER * kopp_lina.LEDARE.
      END.   
      FOR EACH kopp_lina WHERE kopp_lina.TOTMETER NE 0:
         CREATE upp_tab2.
         ASSIGN 
         upp_tab2.ENR = kopp_lina.ENR
         upp_tab2.BENAMNING = kopp_lina.BENAMNING 
         upp_tab2.ENHET = kopp_lina.ENHET 
         upp_tab2.LEVKOD = kopp_lina.LEVKOD
         upp_tab2.PRIS = kopp_lina.PRIS
         upp_tab2.METER = kopp_lina.METER
         upp_tab2.TOTMETER = kopp_lina.TOTMETER
         upp_tab2.UPPLAG = kopp_lina.UPPLAG.
      END. 
      FOR EACH upp_tab BREAK BY upp_tab.ENR BY upp_tab.LEVKOD:                                      
         ACCUMULATE upp_tab.METER (TOTAL BY upp_tab.ENR BY upp_tab.LEVKOD).       
         IF LAST-OF(upp_tab.LEVKOD) THEN DO TRANSACTION:
            CREATE upp_tab3.
            ASSIGN 
            upp_tab3.ENR = upp_tab.ENR
            upp_tab3.BENAMNING = upp_tab.BENAMNING 
            upp_tab3.ENHET = upp_tab.ENHET
            upp_tab3.LEVKOD = upp_tab.LEVKOD 
            upp_tab3.PRIS = upp_tab.PRIS
            upp_tab3.METER = (ACCUM TOTAL  BY upp_tab.LEVKOD upp_tab.METER)  
            upp_tab3.TOTMETER = (ACCUM TOTAL  BY upp_tab.LEVKOD upp_tab.METER).               
         END.     
      END.
      uppfel = FALSE. 
      FOR EACH upp_tab3:
         IF uppfel = FALSE THEN DO:
            FIND FIRST upp_tab2 WHERE upp_tab2.ENR = upp_tab3.ENR AND 
            upp_tab2.LEVKOD = upp_tab3.LEVKOD AND upp_tab2.UPPLAG = ? NO-ERROR.
            IF AVAILABLE upp_tab2 THEN DO:             
               IF upp_tab2.TOTMETER < upp_tab3.TOTMETER THEN
               uppfel = TRUE.
            END.         
         END.                            
      END.           
      IF uppfel = TRUE THEN DO:
         MESSAGE "Linor och kablars fördelning på upplag stämmer ej. Korrigeringar krävs."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
          status-mus2 = SESSION:SET-WAIT-STATE("").
         APPLY "CHOOSE" TO FBTN_LINUPP. 
         RETURN.
      END. 
      ELSE DO:  
         FOR EACH upp_tab3:
            FIND FIRST upp_tab2 WHERE upp_tab2.ENR = upp_tab3.ENR AND 
            upp_tab2.LEVKOD = upp_tab3.LEVKOD AND upp_tab2.UPPLAG = ? NO-ERROR.
            IF AVAILABLE upp_tab2 THEN DO: 
               upp_tab2.METER = upp_tab3.METER.
            END.
         END.   
         FOR EACH upp_tab2:
            FIND FIRST upp_tab3 WHERE upp_tab3.ENR = upp_tab2.ENR AND
            upp_tab3.LEVKOD = upp_tab2.LEVKOD NO-ERROR.
            IF NOT AVAILABLE upp_tab3 THEN DELETE upp_tab2.
         END.  
         FOR EACH kopp_lina WHERE kopp_lina.TOTMETER NE 0:
            DELETE kopp_lina.
         END. 
         FOR EACH upp_tab2:           
            CREATE kopp_lina.
            ASSIGN      
            kopp_lina.ENR = upp_tab2.ENR
            kopp_lina.BENAMNING = upp_tab2.BENAMNING
            kopp_lina.PRIS = upp_tab2.PRIS
            kopp_lina.ENHET = upp_tab2.ENHET  
            kopp_lina.LEVKOD = upp_tab2.LEVKOD
            kopp_lina.METER = upp_tab2.METER 
            kopp_lina.TOTMETER = upp_tab2.TOTMETER 
            kopp_lina.UPPLAG = upp_tab2.UPPLAG                     
            kopp_lina.KORTKOD = ?.               
         END.                            
      END.  
   END. 
   FOR EACH kopp_lina WHERE kopp_lina.METER = 0:
      DELETE kopp_lina.
   END.
   RUN btnhidden_UI IN btnbervalh (INPUT "",INPUT 2). 
   RUN mbtnkonst_UI IN btnbervalh.
   {musarrow.i}
END PROCEDURE.
PROCEDURE m_Visa2_UI :
   {muswait.i}
   RUN selectfoc_UI (INPUT 2).   
   FIND FIRST kon_val WHERE kon_val.NUM = kon_id2.NUM AND
   kon_val.KSKAP = FALSE USE-INDEX NUM NO-LOCK NO-ERROR.
   RUN info_UI.      
   {musarrow.i}
   
END PROCEDURE.
PROCEDURE m_Visa_UI :
   {muswait.i}
   RUN selectfoc_UI (INPUT 1).   
   FIND FIRST kon_val WHERE kon_val.NUM = kon_id.NUM AND
   kon_val.KSKAP = FALSE USE-INDEX NUM NO-LOCK NO-ERROR.
   RUN info_UI.      
   {musarrow.i}
  
END PROCEDURE.
PROCEDURE mlangd_UI :
   {muswait.i}
   RUN METER.W.
   FILL-IN-LANGD:SCREEN-VALUE = STRING(meter).
   {musarrow.i}
END PROCEDURE.
PROCEDURE aklangd_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "CHOOSE" TO BTN_AND.
   END.
END PROCEDURE.
PROCEDURE akantal_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "CHOOSE" TO BTN_AND.
   END.
END PROCEDURE.
PROCEDURE fbtnvisa_UI :
   {muswait.i}     
   RUN selectfoc_UI (INPUT 1).   
   franrowid = ROWID(kon_id).
   RUN selectfoc_UI (INPUT 2).   
   tillrowid = ROWID(kon_id2).
   {AVBGOM2.I}
   RUN VILIKABU.W.
   {AVBFRAM2.I}  
   APPLY "VALUE-CHANGED" TO BRW_FRAN.
   {musarrow.i}
END PROCEDURE.
PROCEDURE fbtnschakt_UI :
   {muswait.i}     
   RUN dubbbort_UI.  
   RUN selectfoc_UI (INPUT 1).   
   franrowid = ROWID(kon_id).
   RUN selectfoc_UI (INPUT 2).      
   tillrowid = ROWID(kon_id2).
   num1var = kon_id.NUM.   
   num2var = kon_id2.NUM.               
   {AVBGOM2.I}
   RUN SCHAKTA.W.    
   {AVBFRAM2.I}   
   RUN dubbel_UI. 
   RUN setcolsortvar_UI IN brwproc[3] 
   (INPUT " WHERE NUM1 = '" + STRING(kon_id.NUM) + "' AND NUM2 = '" + STRING(kon_id2.NUM) + "' AND KORTKOD = '" + STRING("?") + "' AND TOTMETER = '" + STRING("0") + "' ").   
   RUN openbdynspec_UI IN brwproc[3].           
   {musarrow.i}
END PROCEDURE.
PROCEDURE fbtnlinupp_UI :
   {muswait.i}    
   RUN dubbbort_UI.
   RUN btnlinupp_UI IN huvprogh.
   RUN dubbel_UI. 
   RUN setcolsortvar_UI IN brwproc[3] 
   (INPUT " WHERE NUM1 = '" + STRING(kon_id.NUM) + "' AND NUM2 = '" + STRING(kon_id2.NUM) + "' AND KORTKOD = '" + STRING("?") + "' AND TOTMETER = '" + STRING("0") + "' ").   
   RUN openbdynspec_UI IN brwproc[3].           
   
   {musarrow.i}

END PROCEDURE.
PROCEDURE fbtnkort_UI :
   {muswait.i}    
   RUN dubbbort_UI.                  
   {AVBGOM2.I}
      
   RUN KABKORTU.W.
   {AVBFRAM2.I} 
   RUN dubbel_UI.  
   RUN setcolsortvar_UI IN brwproc[3] 
   (INPUT " WHERE NUM1 = '" + STRING(kon_id.NUM) + "' AND NUM2 = '" + STRING(kon_id2.NUM) + "' AND KORTKOD = '" + STRING("?") + "' AND TOTMETER = '" + STRING("0") + "' ").   
   RUN openbdynspec_UI IN brwproc[3].           
   {musarrow.i}
END PROCEDURE.
PROCEDURE cmbval2_UI :
   FIND FIRST konstgrptemp WHERE konstgrptemp.BENAMNING = CMB_VAL2:SCREEN-VALUE 
   NO-LOCK NO-ERROR.            
   FIND FIRST bbenamntemp WHERE bbenamntemp.KONSKOD = konstgrptemp.KONSKOD 
   NO-LOCK NO-ERROR.
   RUN konlabel_UI IN huvprogh 
   (INPUT "LIN3",
    INPUT annamntemp.TAB2,
    INPUT annamntemp.TAB3,
    INPUT bbenamntemp.ID1,
    INPUT bbenamntemp.ID2,
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "").
   RUN setcolsortvar_UI IN brwproc[2] 
   (INPUT " WHERE GRUPP = '" + STRING(konstgrptemp.KONSKOD) + "' AND ENDKOMB =  FALSE  ").      
   RUN setcolindex_UI IN brwproc[2] (INPUT " LINNR BY NATNR BY FRI1 BY FRI2").   
   RUN openbdynspec_UI IN brwproc[2].           
   RUN setcolindex_UI IN brwproc[2] (INPUT " ").   
   APPLY "VALUE-CHANGED" TO BRW_TILL. 
END PROCEDURE.
                                                                 
PROCEDURE cmbval_UI :                                            
   FIND FIRST konstgrptemp WHERE konstgrptemp.BENAMNING = CMB_VAL:SCREEN-VALUE 
   NO-LOCK NO-ERROR.               
   FIND FIRST bbenamntemp WHERE bbenamntemp.KONSKOD = konstgrptemp.KONSKOD 
   NO-LOCK NO-ERROR.
   RUN konlabel_UI IN huvprogh 
   (INPUT "LIN2",
    INPUT annamntemp.TAB2,
    INPUT annamntemp.TAB3,
    INPUT bbenamntemp.ID1,
    INPUT bbenamntemp.ID2,
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "").
   RUN setcolsortvar_UI IN brwproc[1] 
   (INPUT " WHERE GRUPP = '" + STRING(konstgrptemp.KONSKOD) + "' AND ENDKOMB =  FALSE  ").      
   RUN setcolindex_UI IN brwproc[1] (INPUT " LINNR BY NATNR BY FRI1 BY FRI2").   
   RUN openbdynspec_UI IN brwproc[1].           
   RUN setcolindex_UI IN brwproc[1] (INPUT "").        
   APPLY "VALUE-CHANGED" TO BRW_FRAN.   
END PROCEDURE.
PROCEDURE btnvisa2_UI :
   {muswait.i}
   RUN selectfoc_UI (INPUT 1).   
   franrowid = ROWID(kon_id).
   RUN selectfoc_UI (INPUT 2).   
   tillrowid = ROWID(kon_id2).
   RUN HJALPKABU.W.
   APPLY "VALUE-CHANGED" TO BRW_FRAN.
   {musarrow.i}
END PROCEDURE.
PROCEDURE btnup_UI :
   IF INTEGER(FILL-IN-ANTAL:SCREEN-VALUE) <= 8 THEN DO:
      FILL-IN-ANTAL:SCREEN-VALUE = STRING(INTEGER(FILL-IN-ANTAL:SCREEN-VALUE) + 1).
   END.   
   ELSE DO:
      MESSAGE "Antal kan inte vara större än 9!" VIEW-AS ALERT-BOX.
   END.      
END PROCEDURE.
PROCEDURE btnskapa_UI :
   FIND FIRST kopp_lina WHERE ROWID(kopp_lina) = lin_rowid NO-ERROR.
   IF AVAILABLE kopp_lina THEN DO:  
      IF kopp_lina.METER = 0 THEN DO:      
         ASSIGN
         kopp_lina.METER =  INTEGER(FILL-IN-LANGD:SCREEN-VALUE)
         kopp_lina.LEDARE = INTEGER(FILL-IN-ANTAL:SCREEN-VALUE). 
         FIND FIRST koppbuff WHERE koppbuff.NUM1 = kopp_lina.NUM2 AND
         koppbuff.NUM2 = kopp_lina.NUM1 AND
         koppbuff.KABNR = kopp_lina.KABNR AND koppbuff.KORTKOD = ? USE-INDEX LIN NO-ERROR.
         IF AVAILABLE koppbuff THEN DO:
            ASSIGN
            koppbuff.METER = 0
            koppbuff.LEDARE = INTEGER(FILL-IN-ANTAL:SCREEN-VALUE).
         END.    
      END.
      ELSE DO: 
         FIND LAST kopp_lina USE-INDEX KABNR NO-LOCK NO-ERROR. 
         counter = kopp_lina.KABNR + 1.   
         FIND FIRST kopp_lina WHERE ROWID(kopp_lina) = lin_rowid NO-ERROR.   
         CREATE koppbuff.
         ASSIGN
         koppbuff.NUM1 = kon_id.NUM
         koppbuff.NUM2 = kon_id2.NUM
         koppbuff.ENR = kopp_lina.ENR
         koppbuff.BENAMNING = kopp_lina.BENAMNING
         koppbuff.ENHET = kopp_lina.ENHET
         koppbuff.PRIS = kopp_lina.PRIS
         koppbuff.LEVKOD = kopp_lina.LEVKOD   
         koppbuff.DIAMETER = kopp_lina.DIAMETER
         koppbuff.METER = 0
         koppbuff.LEDARE = INTEGER(FILL-IN-ANTAL:SCREEN-VALUE)
         koppbuff.KABNR = counter
         koppbuff.KABNR2 = counter
         lin_rowid = ROWID(koppbuff).  
         IF kon_id.NUM NE kon_id2.NUM THEN DO:    
            CREATE koppbuff.
            ASSIGN
            koppbuff.NUM1 = kon_id2.NUM
            koppbuff.NUM2 = kon_id.NUM
            koppbuff.ENR = kopp_lina.ENR
            koppbuff.BENAMNING = kopp_lina.BENAMNING
            koppbuff.ENHET = kopp_lina.ENHET
            koppbuff.PRIS = kopp_lina.PRIS
            koppbuff.LEVKOD = kopp_lina.LEVKOD  
            koppbuff.DIAMETER = kopp_lina.DIAMETER
            koppbuff.METER = INTEGER(FILL-IN-LANGD:SCREEN-VALUE)
            koppbuff.METER = 0
            koppbuff.KABNR = counter
            koppbuff.KABNR2 = counter.
         END.   
      END.         
   END.  
   
   RUN setcolsortvar_UI IN brwproc[3] 
   (INPUT " WHERE NUM1 = '" + STRING(kon_id.NUM) + "' AND NUM2 = '" + STRING(kon_id2.NUM) + "' AND KORTKOD = '" + STRING("?") + "' AND TOTMETER = '" + STRING("0") + "' ").   
   RUN openbdynspec_UI IN brwproc[3].           
   FIND FIRST kopp_lina WHERE ROWID(kopp_lina) = lin_rowid NO-ERROR.
   IF AVAILABLE kopp_lina THEN DO:      
      RUN setlastrowid_UI IN brwproc[3] (INPUT ROWID(kopp_lina)).
      RUN lastselectdyn_UI IN brwproc[3].                     
      APPLY "ENTRY" TO linmeter.
   END.
END PROCEDURE.
PROCEDURE btnmin_UI :
   IF INTEGER(FILL-IN-ANTAL:SCREEN-VALUE) >= 2 THEN DO:
      FILL-IN-ANTAL:SCREEN-VALUE = STRING(INTEGER(FILL-IN-ANTAL:SCREEN-VALUE) - 1).
   END.   
   ELSE DO:
      MESSAGE "Antal kan inte vara mindre än 1!" VIEW-AS ALERT-BOX.
   END.            
END PROCEDURE.
PROCEDURE btnbort_UI :
   FIND FIRST kopp_lina WHERE ROWID(kopp_lina) = lin_rowid NO-ERROR.
   IF AVAILABLE kopp_lina THEN DO:        
      FIND FIRST koppbuff WHERE koppbuff.NUM1 = kon_id.NUM AND
      koppbuff.NUM2 = kon_id2.NUM AND koppbuff.ENR = kopp_lina.ENR AND
      koppbuff.KABNR NE kopp_lina.KABNR NO-LOCK NO-ERROR.
      IF AVAILABLE koppbuff THEN DO:         
         FOR EACH koppbuff WHERE koppbuff.KABNR = kopp_lina.KABNR AND
         ROWID(koppbuff) NE lin_rowid USE-INDEX KABNR:                    
            DELETE koppbuff.
         END. 
         DELETE kopp_lina.
      END.
      ELSE DO:        
         IF kon_id.GRUPP = 0 OR kon_id.GRUPP = 9 OR kon_id.GRUPP = 26 OR kon_id2.GRUPP = 0 OR kon_id2.GRUPP = 9 OR kon_id2.GRUPP = 26
         THEN DO:
            ledarvar = 1.
         END.
         ELSE IF globforetag = "VAST" THEN DO:
            /*Claes H vill att även fäljande konstgrupper har ledare = 1
            14 Jordkabel 0.4 kv
            15 Luftled 12-24 kV Hängk
            25 Jordkabel 12 kV
            27 Jordkabel 24 kV*/
            IF kon_id.GRUPP = 14 OR kon_id.GRUPP = 15 OR kon_id.GRUPP = 25 OR kon_id.GRUPP = 27 OR kon_id2.GRUPP = 14 OR kon_id2.GRUPP = 15 OR kon_id2.GRUPP = 25
            OR kon_id2.GRUPP = 27 THEN DO:
               ledarvar = 1.
            END.
            ELSE ledarvar = 3.
         END.
         ELSE ledarvar = 3.
         FIND FIRST koppbuff WHERE koppbuff.KABNR = kopp_lina.KABNR AND
         ROWID(koppbuff) NE lin_rowid AND koppbuff.KORTKOD = ? USE-INDEX KABNR NO-LOCK NO-ERROR.                                   
         IF AVAILABLE koppbuff THEN DO:
            ASSIGN
            koppbuff.METER = 0
            koppbuff.LEDARE = ledarvar.
         END. 
         FOR EACH koppbuff WHERE koppbuff.KABNR = kopp_lina.KABNR AND
         koppbuff.KORTKOD NE ? USE-INDEX KABNR:
            DELETE koppbuff.
         END.  
         ASSIGN
         kopp_lina.METER = 0
         kopp_lina.LEDARE = ledarvar.
      END.   
   END.    
   RUN selnextprevrow_UI IN brwproc[3].     
   RUN setcolsortvar_UI IN brwproc[3] 
   (INPUT " WHERE NUM1 = '" + STRING(kon_id.NUM) + "' AND NUM2 = '" + STRING(kon_id2.NUM) + "' AND KORTKOD = '" + STRING("?") + "' AND TOTMETER = '" + STRING("0") + "' ").   
   RUN openbdynspec_UI IN brwproc[3].                      
   RUN lastselectdyn_UI IN brwproc[3]. 
   /*CCC REP*/
END PROCEDURE.

PROCEDURE btnand_UI :
   
   FIND FIRST kopp_lina WHERE ROWID(kopp_lina) = lin_rowid NO-ERROR.
   IF AVAILABLE kopp_lina THEN DO:  
      IF FILL-IN-LANGD:SCREEN-VALUE NE "0" THEN DO:
         FOR EACH koppbuff WHERE koppbuff.KABNR = kopp_lina.KABNR AND
         ROWID(koppbuff) NE lin_rowid USE-INDEX KABNR:         
            ASSIGN
            koppbuff.METER = INTEGER(FILL-IN-LANGD:SCREEN-VALUE)
            koppbuff.LEDARE = INTEGER(FILL-IN-ANTAL:SCREEN-VALUE).
         END.         
         ASSIGN
         kopp_lina.METER =  INTEGER(FILL-IN-LANGD:SCREEN-VALUE)
         kopp_lina.LEDARE = INTEGER(FILL-IN-ANTAL:SCREEN-VALUE).
      END.
      ELSE DO:
         FIND FIRST koppbuff WHERE koppbuff.NUM1 = kon_id.NUM AND
         koppbuff.NUM2 = kon_id2.NUM AND koppbuff.ENR = kopp_lina.ENR AND
         koppbuff.KABNR NE kopp_lina.KABNR USE-INDEX LIN NO-LOCK NO-ERROR.
         IF AVAILABLE koppbuff THEN DO:
            FOR EACH koppbuff WHERE koppbuff.KABNR = kopp_lina.KABNR AND
            ROWID(koppbuff) NE lin_rowid USE-INDEX KABNR:             
               DELETE koppbuff.
            END.   
            DELETE kopp_lina.
         END.
         ELSE DO: 
            FIND FIRST koppbuff WHERE koppbuff.KABNR = kopp_lina.KABNR AND
            ROWID(koppbuff) NE lin_rowid AND koppbuff.KORTKOD = ? USE-INDEX KABNR NO-LOCK NO-ERROR.                          
            IF AVAILABLE koppbuff THEN DO:
               ASSIGN
               koppbuff.METER =  INTEGER(FILL-IN-LANGD:SCREEN-VALUE)    
               koppbuff.LEDARE = INTEGER(FILL-IN-ANTAL:SCREEN-VALUE).      
            END.
            FOR EACH koppbuff WHERE koppbuff.KABNR = kopp_lina.KABNR AND 
            koppbuff.KORTKOD NE ? USE-INDEX KABNR:
               DELETE koppbuff.
            END.          
            ASSIGN
            kopp_lina.METER = INTEGER(FILL-IN-LANGD:SCREEN-VALUE)    
            kopp_lina.LEDARE = INTEGER(FILL-IN-ANTAL:SCREEN-VALUE).     
         END.   
      END.         
   END.            

END PROCEDURE.
PROCEDURE rowlbrwmtrl_UI :
   RUN rowlbrwmtrl_UI IN huvprogh (INPUT "LINOR").
END PROCEDURE.
PROCEDURE mll_UI :
   APPLY "ENTRY" TO  linledare.
END PROCEDURE.
PROCEDURE mlm_UI :
   APPLY "ENTRY" TO  linmeter.
END PROCEDURE.

PROCEDURE enlmeter_UI :
   APPLY "ENTRY" TO linmeter.
END PROCEDURE.
PROCEDURE elmeter_UI :
   IF linmeter:READ-ONLY = FALSE THEN DO:
      IF linmeter:SCREEN-VALUE NE ? THEN entrylinmeter = TRUE.
   END.
      
   RUN selectfoc_UI (INPUT 3).     
END PROCEDURE.
PROCEDURE lmeter_UI :
   
   IF entrylinmeter = TRUE THEN DO:
      IF AVAILABLE kopp_lina THEN DO: 
         IF INTEGER(linmeter:SCREEN-VALUE) NE kopp_lina.METER THEN DO:
            kopp_lina.METER = INTEGER(linmeter:SCREEN-VALUE).
            FILL-IN-LANGD:SCREEN-VALUE = STRING(kopp_lina.METER).                   
            APPLY "CHOOSE" TO BTN_AND.
         END.
      END.
   END.
   entrylinmeter = FALSE.
END PROCEDURE.

PROCEDURE elled_UI :
   IF linledare:READ-ONLY = FALSE THEN DO:
      IF linledare:SCREEN-VALUE NE ? THEN entrylinledare = TRUE.
   END.
   RUN selectfoc_UI (INPUT 3).     
END PROCEDURE.
PROCEDURE lled_UI :
   IF entrylinledare  = TRUE THEN DO:
      IF AVAILABLE kopp_lina THEN DO:  
         IF INTEGER(linledare:SCREEN-VALUE) NE kopp_lina.LEDARE THEN DO:
            kopp_lina.LEDARE = INTEGER(linledare:SCREEN-VALUE).
            FILL-IN-ANTAL:SCREEN-VALUE = STRING(kopp_lina.LEDARE).                   
            APPLY "CHOOSE" TO BTN_AND.
         END.    
      END.  
   END.
   entrylinledare  = FALSE.
END PROCEDURE.
PROCEDURE leavefill_UI :
   IF entrylinledare = TRUE THEN RUN lled_UI.
   IF entrylinmeter = TRUE THEN RUN lmeter_UI.
END PROCEDURE.
PROCEDURE vbrwlin_UI :
   FIND FIRST kopp_lina WHERE kopp_lina.NUM1 = kon_id.NUM AND
   kopp_lina.NUM2 = kon_id2.NUM USE-INDEX NUM NO-LOCK NO-ERROR.
   IF AVAILABLE kopp_lina THEN DO: 
      RUN selectfoc_UI (INPUT 3).   
      lin_rowid = ROWID(kopp_lina).
      ASSIGN               
      FILL-IN-ANTAL:SCREEN-VALUE = STRING(kopp_lina.LEDARE)      
      FILL-IN-LANGD:SCREEN-VALUE = STRING(kopp_lina.METER).                             
   END.    
END PROCEDURE.
PROCEDURE vbrwtill_UI :
   {muswait.i}
   RUN selectfoc_UI (INPUT 1).   
   RUN selectfoc_UI (INPUT 2).   
   RUN ladda_UI.                                 
   APPLY "VALUE-CHANGED" TO BRW_LIN. 
   {musarrow.i} 
END PROCEDURE.
PROCEDURE mbrwtill_UI :
   {muswait.i}
   RUN selectfoc_UI (INPUT 2).   
   FIND FIRST kon_val WHERE kon_val.NUM = kon_id2.NUM AND
   kon_val.KSKAP = FALSE USE-INDEX NUM NO-LOCK NO-ERROR.
   RUN info_UI.      
   {musarrow.i}
END PROCEDURE.
PROCEDURE vbrwfran_UI :
   {muswait.i}                   
   RUN selectfoc_UI (INPUT 1).   
   RUN selectfoc_UI (INPUT 2).   
   RUN ladda_UI. 
   APPLY "VALUE-CHANGED" TO BRW_LIN. 
   {musarrow.i}    
END PROCEDURE.
PROCEDURE mbrwfran_UI :
   {muswait.i}
   RUN selectfoc_UI (INPUT 1).   
   FIND FIRST kon_val WHERE kon_val.NUM = kon_id.NUM AND
   kon_val.KSKAP = FALSE USE-INDEX NUM NO-LOCK NO-ERROR.   
   RUN info_UI.      
   {musarrow.i}
END PROCEDURE.
PROCEDURE info_UI :
   IF NOT AVAILABLE kon_val THEN RETURN.
   FIND FIRST konstvaltemp WHERE konstvaltemp.KONSKOD = kon_val.GRUPP NO-LOCK NO-ERROR.
   IF NOT AVAILABLE konstvaltemp THEN DO:
      RUN laddatempen_UI IN konstvaltapph (INPUT kon_val.GRUPP, OUTPUT TABLE konstvaltemp APPEND).
   END.   
   {AVBGOM2.I}      
   RUN BERINFOU2.W (INPUT ROWID(kon_val)). 
   {AVBFRAM2.I}    
END PROCEDURE.
PROCEDURE ladda_UI :
   EMPTY TEMP-TABLE lin_tab NO-ERROR.
   EMPTY TEMP-TABLE lin_tab2 NO-ERROR.   
   
   IF kon_id.GRUPP = 0 OR kon_id.GRUPP = 9 OR kon_id.GRUPP = 26 OR kon_id2.GRUPP = 0 OR kon_id2.GRUPP = 9 OR kon_id2.GRUPP = 26
   THEN DO:
      ledarvar = 1.
   END.
   ELSE IF globforetag = "VAST" THEN DO:
      /*Claes H vill att även fäljande konstgrupper har ledare = 1
      14 Jordkabel 0.4 kv
      15 Luftled 12-24 kV Hängk
      25 Jordkabel 12 kV
      27 Jordkabel 24 kV*/
      IF kon_id.GRUPP = 14 OR kon_id.GRUPP = 15 OR kon_id.GRUPP = 25 OR kon_id.GRUPP = 27 OR kon_id2.GRUPP = 14 OR kon_id2.GRUPP = 15 OR kon_id2.GRUPP = 25
      OR kon_id2.GRUPP = 27 THEN DO:
         ledarvar = 1.
      END.
      ELSE ledarvar = 3.
   END.
   ELSE ledarvar = 3.   
   IF kon_id.NUM = kon_id2.NUM THEN DO:        
      IF kon_id.XKORD = ? THEN DO:     
         FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_id.NUM AND
         list_mtrl.LINKAB = TRUE NO-LOCK: 
            FIND FIRST lin_tab WHERE lin_tab.ENR = list_mtrl.ENR AND 
            lin_tab.LEVKOD = list_mtrl.LEVKOD NO-LOCK NO-ERROR.
            IF NOT AVAILABLE lin_tab THEN DO:
              RUN skapa_UI.
            END.   
         END.
      END.
      ELSE DO:
         FOR EACH idbuff WHERE idbuff.XKORD = kon_id.XKORD:
            FOR EACH list_mtrl WHERE list_mtrl.NUM = idbuff.NUM AND
            list_mtrl.LINKAB = TRUE NO-LOCK: 
               FIND FIRST lin_tab WHERE lin_tab.ENR = list_mtrl.ENR AND
               lin_tab.LEVKOD = list_mtrl.LEVKOD NO-LOCK NO-ERROR.
               IF NOT AVAILABLE lin_tab THEN DO:
                  RUN skapa_UI.
               END.   
            END.     
         END.
      END.      
   END.
   ELSE DO:       
      IF kon_id.XKORD = ? THEN DO:     
         FOR EACH list_mtrl WHERE list_mtrl.NUM = kon_id.NUM AND
         list_mtrl.LINKAB = TRUE NO-LOCK: 
            FIND FIRST lin_tab WHERE lin_tab.ENR = list_mtrl.ENR AND
            lin_tab.LEVKOD = list_mtrl.LEVKOD NO-LOCK NO-ERROR.
            IF NOT AVAILABLE lin_tab THEN DO:
              RUN skapa_UI.
            END.   
         END.   
      END.
      ELSE DO: 
         FOR EACH idbuff WHERE idbuff.XKORD = kon_id.XKORD:
            FOR EACH list_mtrl WHERE list_mtrl.NUM = idbuff.NUM AND
            list_mtrl.LINKAB = TRUE NO-LOCK: 
               FIND FIRST lin_tab WHERE lin_tab.ENR = list_mtrl.ENR AND
               lin_tab.LEVKOD = list_mtrl.LEVKOD NO-LOCK NO-ERROR.
               IF NOT AVAILABLE lin_tab THEN DO:
                  RUN skapa_UI.            
               END.     
            END.   
         END.
      END.                        
      IF kon_id2.XKORD = ? THEN DO:       
         FOR EACH lin_tab: 
            FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_id2.NUM AND
            list_mtrl.LINKAB = TRUE AND list_mtrl.ENR = lin_tab.ENR AND
            list_mtrl.LEVKOD = lin_tab.LEVKOD NO-LOCK NO-ERROR.
            IF NOT AVAILABLE list_mtrl THEN DO:
               DELETE lin_tab.
            END.
         END.                   
      END.
      ELSE DO:
         FOR EACH idbuff2 WHERE idbuff2.XKORD = kon_id2.XKORD: 
            FOR EACH list_mtrl WHERE list_mtrl.NUM = idbuff2.NUM AND
            list_mtrl.LINKAB = TRUE NO-LOCK: 
               FIND FIRST lin_tab2 WHERE lin_tab2.ENR = list_mtrl.ENR AND
               lin_tab2.LEVKOD = list_mtrl.LEVKOD NO-LOCK NO-ERROR.
               IF NOT AVAILABLE lin_tab2 THEN DO:
                  CREATE lin_tab2.
                  ASSIGN
                  lin_tab2.ENR = list_mtrl.ENR
                  lin_tab2.BENAMNING = list_mtrl.BENAMNING
                  lin_tab2.PRIS = list_mtrl.PRIS
                  lin_tab2.ENHET = list_mtrl.ENHET
                  lin_tab2.LEVKOD = list_mtrl.LEVKOD.
               END.   
            END.                 
         END.        
         FOR EACH lin_tab: 
            FIND FIRST lin_tab2 WHERE lin_tab2.ENR = lin_tab.ENR AND
            lin_tab2.LEVKOD = lin_tab.LEVKOD NO-LOCK NO-ERROR.
            IF NOT AVAILABLE lin_tab2 THEN DO:
               DELETE lin_tab.
            END.
         END.           
      END.   
   END.   
   FIND LAST kopp_lina USE-INDEX KABNR NO-LOCK NO-ERROR.
   IF AVAILABLE kopp_lina THEN DO: 
      counter = kopp_lina.KABNR.
   END.
   ELSE DO:
      counter = 0.
   END.                              
   FIND FIRST kopp_lina WHERE kopp_lina.NUM1 = kon_id.NUM AND
   kopp_lina.NUM2 = kon_id2.NUM USE-INDEX NUM NO-LOCK NO-ERROR.
   IF AVAILABLE kopp_lina THEN DO:       
      FOR EACH lin_tab:
         FIND FIRST kopp_lina WHERE kopp_lina.NUM1 = kon_id.NUM AND
         kopp_lina.NUM2 = kon_id2.NUM AND kopp_lina.ENR = lin_tab.ENR AND
         kopp_lina.LEVKOD = lin_tab.LEVKOD USE-INDEX ENR NO-LOCK NO-ERROR.
         IF NOT AVAILABLE kopp_lina THEN DO: 
            counter = counter + 1.
            CREATE kopp_lina.
            ASSIGN
            kopp_lina.NUM1 = kon_id.NUM
            kopp_lina.NUM2 = kon_id2.NUM
            kopp_lina.ENR = lin_tab.ENR
            kopp_lina.BENAMNING = lin_tab.BENAMNING 
            kopp_lina.PRIS = lin_tab.PRIS
            kopp_lina.ENHET = lin_tab.ENHET 
            kopp_lina.LEVKOD = lin_tab.LEVKOD
            kopp_lina.DIAMETER = lin_tab.DIAMETER
            kopp_lina.METER = 0
            kopp_lina.LEDARE = ledarvar
            kopp_lina.KABNR = counter
            kopp_lina.KABNR2 = counter. 
            IF kon_id.NUM NE kon_id2.NUM THEN DO:               
               CREATE kopp_lina.
               ASSIGN
               kopp_lina.NUM1 = kon_id2.NUM
               kopp_lina.NUM2 = kon_id.NUM
               kopp_lina.ENR = lin_tab.ENR
               kopp_lina.BENAMNING = lin_tab.BENAMNING
               kopp_lina.PRIS = lin_tab.PRIS
               kopp_lina.ENHET = lin_tab.ENHET 
               kopp_lina.LEVKOD = lin_tab.LEVKOD
               kopp_lina.DIAMETER = lin_tab.DIAMETER
               kopp_lina.METER = 0
               kopp_lina.LEDARE = ledarvar
               kopp_lina.KABNR = counter
               kopp_lina.KABNR2 = counter.
            END.   
         END.
      END.   
   END.
   ELSE DO:       
      FOR EACH lin_tab:  
         counter = counter + 1.
         CREATE kopp_lina.
         ASSIGN
         kopp_lina.NUM1 = kon_id.NUM
         kopp_lina.NUM2 = kon_id2.NUM
         kopp_lina.ENR = lin_tab.ENR
         kopp_lina.BENAMNING = lin_tab.BENAMNING  
         kopp_lina.PRIS = lin_tab.PRIS
         kopp_lina.ENHET = lin_tab.ENHET
         kopp_lina.LEVKOD = lin_tab.LEVKOD   
         kopp_lina.DIAMETER = lin_tab.DIAMETER
         kopp_lina.METER = 0
         kopp_lina.LEDARE = ledarvar
         kopp_lina.KABNR = counter
         kopp_lina.KABNR2 = counter.
         IF kon_id.NUM NE kon_id2.NUM THEN DO:            
            CREATE kopp_lina.
            ASSIGN
            kopp_lina.NUM1 = kon_id2.NUM
            kopp_lina.NUM2 = kon_id.NUM
            kopp_lina.ENR = lin_tab.ENR
            kopp_lina.BENAMNING = lin_tab.BENAMNING  
            kopp_lina.PRIS = lin_tab.PRIS
            kopp_lina.ENHET = lin_tab.ENHET
            kopp_lina.LEVKOD = lin_tab.LEVKOD 
            kopp_lina.DIAMETER = lin_tab.DIAMETER
            kopp_lina.METER = 0
            kopp_lina.LEDARE = ledarvar
            kopp_lina.KABNR = counter
            kopp_lina.KABNR2 = counter.
         END.   
      END.   
   END.    
   RUN setcolsortvar_UI IN brwproc[3] 
   (INPUT " WHERE NUM1 = '" + STRING(kon_id.NUM) + "' AND NUM2 = '" + STRING(kon_id2.NUM) + "' AND KORTKOD = '" + STRING("?") + "' AND TOTMETER = '" + STRING("0") + "' ").   
   RUN openbdynspec_UI IN brwproc[3].           
   
END PROCEDURE.

PROCEDURE skapa_UI :
    CREATE lin_tab.
    ASSIGN
    lin_tab.ENR = list_mtrl.ENR
    lin_tab.BENAMNING = list_mtrl.BENAMNING
    lin_tab.PRIS = list_mtrl.PRIS
    lin_tab.ENHET = list_mtrl.ENHET
    lin_tab.LEVKOD = list_mtrl.LEVKOD
    lin_tab.DIAMETER = list_mtrl.DIAMETER.
END PROCEDURE.


PROCEDURE dubbbort_UI :
   FOR EACH kopp_lina WHERE kopp_lina.KORTKOD = ? AND kopp_lina.TOTMETER = 0:
      FIND FIRST koppbuff WHERE koppbuff.KABNR = kopp_lina.KABNR AND
      ROWID(koppbuff) NE ROWID(kopp_lina) AND koppbuff.KORTKOD = ? NO-ERROR.
      IF AVAILABLE koppbuff THEN DO:
        DELETE koppbuff.
      END.   
   END. 
END PROCEDURE.

PROCEDURE dubbel_UI :
   EMPTY TEMP-TABLE kopp_lina2 NO-ERROR.   
   FOR EACH kopp_lina WHERE kopp_lina.KORTKOD = ? AND kopp_lina.TOTMETER = 0:       
      IF kopp_lina.NUM1 NE kopp_lina.NUM2 THEN DO:      
         CREATE kopp_lina2.
         ASSIGN
         kopp_lina2.NUM1 = kopp_lina.NUM2
         kopp_lina2.NUM2 = kopp_lina.NUM1 
         kopp_lina2.ENR = kopp_lina.ENR
         kopp_lina2.BENAMNING = kopp_lina.BENAMNING  
         kopp_lina2.PRIS = kopp_lina.PRIS
         kopp_lina2.ENHET = kopp_lina.ENHET         
         kopp_lina2.LEVKOD = kopp_lina.LEVKOD
         kopp_lina2.METER = kopp_lina.METER
         kopp_lina2.LEDARE = kopp_lina.LEDARE
         kopp_lina2.KABNR = kopp_lina.KABNR 
         kopp_lina2.KABNR2 = kopp_lina.KABNR2
         kopp_lina2.SKAP = kopp_lina.SKAP
         kopp_lina2.SKAPADR = kopp_lina.SKAPADR
         kopp_lina2.KABADR = kopp_lina.KABADR
         kopp_lina2.ARTAL = kopp_lina.ARTAL
         kopp_lina2.SAKR = kopp_lina.SAKR
         kopp_lina2.MAXSAKR = kopp_lina.MAXSAKR
         kopp_lina2.ANMARK = kopp_lina.ANMARK
         kopp_lina2.TYP = kopp_lina.TYP
         kopp_lina2.KORTKOD = kopp_lina.KORTKOD
         kopp_lina2.APPARAT = kopp_lina.APPARAT
         kopp_lina2.TOTMETER = kopp_lina.TOTMETER
         kopp_lina2.UPPLAG = kopp_lina.UPPLAG
         kopp_lina2.DIAMETER = kopp_lina.DIAMETER.                                
      END.   
   END.       
   FOR EACH kopp_lina2:           
      CREATE kopp_lina.
      ASSIGN
      kopp_lina.NUM1 = kopp_lina2.NUM1
      kopp_lina.NUM2 = kopp_lina2.NUM2 
      kopp_lina.ENR = kopp_lina2.ENR
      kopp_lina.BENAMNING = kopp_lina2.BENAMNING
      kopp_lina.PRIS = kopp_lina2.PRIS
      kopp_lina.ENHET = kopp_lina2.ENHET 
      kopp_lina.LEVKOD = kopp_lina2.LEVKOD
      kopp_lina.METER = kopp_lina2.METER
      kopp_lina.LEDARE = kopp_lina2.LEDARE
      kopp_lina.KABNR = kopp_lina2.KABNR 
      kopp_lina.KABNR2 = kopp_lina2.KABNR2
      kopp_lina.SKAP = kopp_lina2.SKAP
      kopp_lina.SKAPADR = kopp_lina2.SKAPADR
      kopp_lina.KABADR = kopp_lina2.KABADR
      kopp_lina.ARTAL = kopp_lina2.ARTAL
      kopp_lina.SAKR = kopp_lina2.SAKR
      kopp_lina.MAXSAKR = kopp_lina2.MAXSAKR
      kopp_lina.ANMARK = kopp_lina2.ANMARK
      kopp_lina.TYP = kopp_lina2.TYP
      kopp_lina.KORTKOD = kopp_lina2.KORTKOD
      kopp_lina.APPARAT = kopp_lina2.APPARAT
      kopp_lina.TOTMETER = kopp_lina2.TOTMETER
      kopp_lina.UPPLAG = kopp_lina2.UPPLAG
      kopp_lina.DIAMETER = kopp_lina2.DIAMETER.    
   END.                    
END PROCEDURE.


PROCEDURE allstartbrw_UI :   
   IF NOT VALID-HANDLE(brwproc[1]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[1] (INPUT BRW_FRAN).         
   IF NOT VALID-HANDLE(brwproc[2]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[2] (INPUT BRW_TILL).         
   IF NOT VALID-HANDLE(brwproc[3]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[3] (INPUT BRW_LIN).         
   RUN setdefaultcolbyname_UI IN brwproc[3] (INPUT "ENR").
   IF NOT VALID-HANDLE(konstvaltapph) THEN DO:
      IF Guru.Konstanter:appcon THEN DO:
         RUN KONSTVALTAPP.P PERSISTENT SET konstvaltapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
      END.
      ELSE DO:
         RUN KONSTVALTAPP.P PERSISTENT SET konstvaltapph.
      END. 
   END.
END PROCEDURE.
PROCEDURE main_UI :
   {muswait.i}
   RUN btnhidden_UI IN btnbervalh (INPUT "MBTN_ANDORD",INPUT 1). 
   RUN btnhidden_UI IN btnbervalh (INPUT "MBTN_KOPI",INPUT 1). 
   RUN btnhidden_UI IN btnbervalh (INPUT "MBTN_KSKAP",INPUT 1). 
   RUN btnhidden_UI IN btnbervalh (INPUT "MBTN_LIN",INPUT 1).       
   RUN btnhidden_UI IN btnbervalh (INPUT "MBTN_FRIKORT",INPUT 1).       
   RUN btnhidden_UI IN btnbervalh (INPUT "MBTN_UPPL",INPUT 1).
   RUN btnhidden_UI IN btnbervalh (INPUT "MBTN_ANM",INPUT 1). 
   RUN btnhidden_UI IN btnbervalh (INPUT "MBTN_DOK",INPUT 1). 
   RUN btnhidden_UI IN btnbervalh (INPUT "MBTN_ID",INPUT 1). 
   RUN btnhidden_UI IN btnbervalh (INPUT "MBTN_MTRL",INPUT 1). 
   RUN btnhidden_UI IN btnbervalh (INPUT "MBTN_SNABB",INPUT 1).      
  
   IF Guru.Konstanter:hoppsekvar[3] = TRUE THEN RUN btnhidden_UI IN btnbervalh (INPUT "MBTN_KALK",INPUT 1). 
   RUN btnhidden_UI IN btnbervalh (INPUT "MBTN_KONST",INPUT 1). 
   RUN btnhidden_UI IN btnbervalh (INPUT "MBTN_LIST",INPUT 1). 
   RUN btnhidden_UI IN btnbervalh (INPUT "MBTN_ATG",INPUT 1).    
   RUN btnhidden_UI IN btnbervalh (INPUT "BTN_OK",INPUT 1). 
   RUN btnhidden_UI IN btnbervalh (INPUT "MBTN_FLYG",INPUT 1). 
   RUN btnhidden_UI IN btnbervalh (INPUT "BTN_AVB",INPUT 1). 
   {ALLSTARTDYN.I}                    
   EMPTY TEMP-TABLE ekon_val NO-ERROR. 
   DEFINE BUFFER kon_valbuff FOR kon_val.
   FOR EACH kon_val WHERE kon_val.KSKAP = FALSE:   
      FIND FIRST list_mtrl WHERE list_mtrl.NUM = kon_val.NUM NO-LOCK NO-ERROR. 
      IF NOT AVAILABLE list_mtrl THEN DO:
         CREATE ekon_val.
         BUFFER-COPY kon_val TO ekon_val.
         FOR EACH kon_valbuff WHERE kon_valbuff.KSKAP = TRUE AND kon_valbuff.NUM = kon_val.NUM:
            CREATE ekon_val.
            BUFFER-COPY kon_valbuff TO ekon_val.
         END.
      END.     
   END. 
   IF Guru.GlobalaVariabler:KorBerDS = TRUE THEN DO:
      /*MTRLDS
      RUN LaddaBerMtrl_UI IN btnbervalh (INPUT valnum).
      */
      RUN MtrlKonHmt_UI IN Guru.GlobalaVariabler:BerDSapph 
      (INPUT datvar,INPUT valnum, INPUT xtillyvar, INPUT TABLE sparakon_val,OUTPUT TABLE list_mtrl APPEND).
   END. 
   ELSE DO:  
      IF Guru.Konstanter:appcon THEN DO:                           
         RUN BERHMTKONMTRL.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
         (INPUT valaonr, INPUT valomrade, INPUT datvar,INPUT valnum, INPUT xtillyvar, INPUT TABLE ekon_val, 
         OUTPUT TABLE list_mtrl APPEND).
      END.
      ELSE DO:
         RUN BERHMTKONMTRL.P
         (INPUT valaonr, INPUT valomrade, INPUT datvar,INPUT valnum, INPUT xtillyvar, INPUT TABLE ekon_val, 
         OUTPUT TABLE list_mtrl APPEND).
      END.
   END.   
   EMPTY TEMP-TABLE ekon_val NO-ERROR. 
   /*anders 2006-04-10*/
   EMPTY TEMP-TABLE kon_id2 NO-ERROR.    
   
   FOR EACH kon_id:
      CREATE kon_id2.              
      ASSIGN
      kon_id2.NUM = kon_id.NUM
      kon_id2.GRUPP = kon_id.GRUPP
      kon_id2.FORNR = kon_id.FORNR 
      kon_id2.LINNR = kon_id.LINNR 
      kon_id2.NATNR = kon_id.NATNR
      kon_id2.FRI1 = kon_id.FRI1 
      kon_id2.FRI2 = kon_id.FRI2 
      kon_id2.FRI3 = kon_id.FRI3
      kon_id2.XKORD = kon_id.XKORD         
      kon_id2.ENDKOMB = kon_id.ENDKOMB.    
   END.  
   RUN dubbbort_UI.                
   RUN dubbel_UI.
   ASSIGN       
   FILL-IN-ANTAL:SCREEN-VALUE = "1"
   CMB_VAL:LIST-ITEMS = "".
   FOR EACH konstgrptemp NO-LOCK:
      FIND FIRST kon_id WHERE kon_id.GRUPP = konstgrptemp.KONSKOD 
      AND kon_id.ENDKOMB = FALSE NO-LOCK NO-ERROR.
      IF AVAILABLE kon_id THEN DO:
         ASSIGN
         status-ok = CMB_VAL:ADD-LAST(konstgrptemp.BENAMNING) 
         CMB_VAL:SCREEN-VALUE = konstgrptemp.BENAMNING.   
      END.
   END.
   RUN konlabel_UI IN huvprogh 
  (INPUT "LIN",
   INPUT Guru.Konstanter:genk,
   INPUT "Antal",
   INPUT "",
   INPUT "",
   INPUT "",
   INPUT "",
   INPUT "",
   INPUT "",
   INPUT "",
   INPUT "").
   CMB_VAL2:LIST-ITEMS = "".    
   FOR EACH konstgrptemp NO-LOCK:
      FIND FIRST kon_id WHERE kon_id.GRUPP = konstgrptemp.KONSKOD 
      AND kon_id.ENDKOMB = FALSE NO-LOCK NO-ERROR.
      IF AVAILABLE kon_id THEN DO:
         ASSIGN
         status-ok = CMB_VAL2:ADD-LAST(konstgrptemp.BENAMNING) 
         CMB_VAL2:SCREEN-VALUE = konstgrptemp.BENAMNING.   
      END.
   END.     
   FIND FIRST kon_val WHERE ROWID(kon_val) = kon_rowid NO-LOCK NO-ERROR.     
   FIND FIRST kon_id WHERE kon_id.NUM = kon_val.NUM NO-LOCK NO-ERROR.  
   IF NOT AVAILABLE kon_id THEN DO:
      FIND FIRST kon_id WHERE kon_id.ENDKOMB = FALSE NO-LOCK NO-ERROR.
   END.
   IF AVAILABLE kon_id THEN DO:
      IF kon_id.ENDKOMB = FALSE THEN DO:
         FIND FIRST konstgrptemp WHERE konstgrptemp.KONSKOD = kon_id.GRUPP NO-LOCK NO-ERROR.
         IF AVAILABLE konstgrptemp THEN DO:                     
            ASSIGN
            CMB_VAL:SCREEN-VALUE = konstgrptemp.BENAMNING
            CMB_VAL2:SCREEN-VALUE = konstgrptemp.BENAMNING. 
         END.
      END.   
   END.        
   FIND FIRST annamntemp NO-LOCK NO-ERROR.   
   FIND FIRST konstgrptemp WHERE konstgrptemp.BENAMNING = CMB_VAL:SCREEN-VALUE 
   NO-LOCK NO-ERROR.
   FIND FIRST bbenamntemp WHERE bbenamntemp.KONSKOD = konstgrptemp.KONSKOD 
   NO-LOCK NO-ERROR.
   RUN konlabel_UI IN huvprogh 
   (INPUT "LIN2",
    INPUT annamntemp.TAB2,
    INPUT annamntemp.TAB3,
    INPUT bbenamntemp.ID1,
    INPUT bbenamntemp.ID2,
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "").  
   RUN konlabel_UI IN huvprogh 
   (INPUT "LIN3",
    INPUT annamntemp.TAB2,
    INPUT annamntemp.TAB3,
    INPUT bbenamntemp.ID1,
    INPUT bbenamntemp.ID2,
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "",
    INPUT "").
   RUN setcolsortvar_UI IN brwproc[1] 
   (INPUT " WHERE GRUPP = '" + STRING(konstgrptemp.KONSKOD) + "' AND ENDKOMB =  FALSE ").   
   RUN setcolindex_UI IN brwproc[1] (INPUT " LINNR BY NATNR BY FRI1 BY FRI2").
   RUN openbdynspec_UI IN brwproc[1].  
   RUN setcolindex_UI IN brwproc[1] (INPUT "").
   RUN setcolsortvar_UI IN brwproc[3] 
   (INPUT " WHERE NUM1 = '" + STRING(kon_id.NUM) + "' AND NUM2 = '" + STRING(kon_id2.NUM) + "' AND KORTKOD = '" + STRING("?") + "' AND TOTMETER = '" + STRING("0") + "' ").   
   RUN openbdynspec_UI IN brwproc[3].
   APPLY "VALUE-CHANGED" TO CMB_VAL2 .
   /*Knappen kort skall ej användas längre tillsvidare Niklas 20060519*/   
   FBTN_KORT:HIDDEN  = TRUE.
   IF globforetag NE "ELPA" THEN FBTN_SCHAKT:HIDDEN  = TRUE.
   ASSIGN
   entrylinmeter = FALSE.  
   entrylinledare = FALSE.
   {musarrow.i}   
END PROCEDURE.

PROCEDURE pselectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(kon_idh) THEN     kon_idh  = TEMP-TABLE kon_id:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(kon_id2h) THEN    kon_id2h = TEMP-TABLE kon_id2:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(kopp_linah) THEN  kopp_linah = TEMP-TABLE kopp_lina:DEFAULT-BUFFER-HANDLE.
   RUN pselectrowid_UI IN brwproc[brwvald] (OUTPUT brwrowid).
   IF brwvald = 1 THEN FIND FIRST kon_id WHERE ROWID(kon_id) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 2 THEN FIND FIRST kon_id2 WHERE ROWID(kon_id2) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 3 THEN FIND FIRST kopp_lina WHERE ROWID(kopp_lina) = brwrowid NO-LOCK NO-ERROR.    
END PROCEDURE.
PROCEDURE nselectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(kon_idh) THEN     kon_idh  = TEMP-TABLE kon_id:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(kon_id2h) THEN    kon_id2h = TEMP-TABLE kon_id2:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(kopp_linah) THEN  kopp_linah = TEMP-TABLE kopp_lina:DEFAULT-BUFFER-HANDLE.
   RUN nselectrowid_UI IN brwproc[brwvald] (OUTPUT brwrowid).
   IF brwvald = 1 THEN FIND FIRST kon_id WHERE ROWID(kon_id) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 2 THEN FIND FIRST kon_id2 WHERE ROWID(kon_id2) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 3 THEN FIND FIRST kopp_lina WHERE ROWID(kopp_lina) = brwrowid NO-LOCK NO-ERROR.    
END PROCEDURE.
PROCEDURE selectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.      
   IF NOT VALID-HANDLE(kon_idh) THEN     kon_idh  = TEMP-TABLE kon_id:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(kon_id2h) THEN    kon_id2h = TEMP-TABLE kon_id2:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(kopp_linah) THEN  kopp_linah = TEMP-TABLE kopp_lina:DEFAULT-BUFFER-HANDLE.
   RUN selectrowid_UI IN brwproc[brwvald] (OUTPUT brwrowid).
   IF brwvald = 1 THEN FIND FIRST kon_id WHERE ROWID(kon_id) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 2 THEN FIND FIRST kon_id2 WHERE ROWID(kon_id2) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 3 THEN FIND FIRST kopp_lina WHERE ROWID(kopp_lina) = brwrowid NO-LOCK NO-ERROR.    

END PROCEDURE.
PROCEDURE fselectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   IF NOT VALID-HANDLE(kon_idh) THEN     kon_idh  = TEMP-TABLE kon_id:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(kon_id2h) THEN    kon_id2h = TEMP-TABLE kon_id2:DEFAULT-BUFFER-HANDLE.
   IF NOT VALID-HANDLE(kopp_linah) THEN  kopp_linah = TEMP-TABLE kopp_lina:DEFAULT-BUFFER-HANDLE.
   RUN fetrowid_UI IN brwproc[brwvald] (INPUT antal_raknare,OUTPUT brwrowid) .
   IF brwvald = 1 THEN FIND FIRST kon_id WHERE ROWID(kon_id) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 2 THEN FIND FIRST kon_id2 WHERE ROWID(kon_id2) = brwrowid NO-LOCK NO-ERROR.  
   IF brwvald = 3 THEN FIND FIRST kopp_lina WHERE ROWID(kopp_lina) = brwrowid NO-LOCK NO-ERROR.    
END PROCEDURE.
PROCEDURE dselectfoc_UI :
   DEFINE INPUT PARAMETER brwvald AS INTEGER NO-UNDO.
   RUN dselectfoc_UI IN brwproc[brwvald].      
END PROCEDURE.
PROCEDURE borthand_UI :
   kon_idh:EMPTY-TEMP-TABLE() NO-ERROR.
   kon_id2h:EMPTY-TEMP-TABLE() NO-ERROR.
   kopp_linah:EMPTY-TEMP-TABLE() NO-ERROR.
   IF VALID-HANDLE(kon_idh) THEN   DELETE OBJECT kon_idh  NO-ERROR.
   IF VALID-HANDLE(kon_id2h) THEN   DELETE OBJECT kon_id2h  NO-ERROR.
   IF VALID-HANDLE(kopp_linah) THEN   DELETE OBJECT kopp_linah  NO-ERROR.
   IF VALID-HANDLE(konstvaltapph) THEN DELETE PROCEDURE konstvaltapph.  
   ASSIGN
   kon_idh = ?
   kon_id2h = ?
   kopp_linah = ?.
   {BORTBRWPROC.I}      
END PROCEDURE.
