/*MTRLMENY.P*/
{ALLDEF.I}
{GLOBVAR2DEL1.I}
{HOPPSEK2W.I}
{FORETEMP.I}
DEFINE SHARED VARIABLE bestant AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE huvudlev AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE vald_kundlev AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE vald_lev AS CHARACTER NO-UNDO.  
DEFINE SHARED VARIABLE skrivut AS LOGICAL NO-UNDO.  
DEFINE SHARED VARIABLE musz AS LOGICAL NO-UNDO. 
     


&Scoped-define NEW 
&Scoped-define SHARED SHARED
{LEVTEMP.I}
{DEPATEMP.I}
{SPECMTRLTEMP.I}
{MTRLTEMP.I}
{SOKDEF.I}
{DEFSOK.I}
{MTRLWID.I}
{MTTEMP.I}
{EXECLIN2.I}
DEFINE SHARED TEMP-TABLE mspec_mtrlextra NO-UNDO LIKE spec_mtrl.
   
DEFINE VARIABLE hittmtrlrowid AS ROWID NO-UNDO.
DEFINE VARIABLE mtrlbapph AS HANDLE NO-UNDO.
DEFINE VARIABLE status-ok AS LOGICAL NO-UNDO.
DEFINE VARIABLE aosok AS CHARACTER FORMAT "X(40)" NO-UNDO.
DEFINE VARIABLE posok AS CHARACTER FORMAT "X(11)" NO-UNDO.
DEFINE VARIABLE antal_valda AS INTEGER NO-UNDO.
DEFINE VARIABLE antal_raknare AS INTEGER NO-UNDO. 
DEFINE VARIABLE mtrl_rowid AS ROWID NO-UNDO.
DEFINE VARIABLE lev AS CHARACTER NO-UNDO.  
DEFINE VARIABLE svar AS LOGICAL NO-UNDO.
DEFINE VARIABLE spec_rowid AS ROWID NO-UNDO.
DEFINE VARIABLE enrvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE enrvar2 AS CHARACTER NO-UNDO.
DEFINE VARIABLE forstaenr AS CHARACTER NO-UNDO.
DEFINE VARIABLE sistaenr AS CHARACTER NO-UNDO.
DEFINE VARIABLE felmedd AS CHARACTER NO-UNDO.
DEFINE VARIABLE anyprintquery AS CHARACTER NO-UNDO.
DEFINE VARIABLE numrows AS INTEGER NO-UNDO.    
DEFINE VARIABLE antalvar AS INTEGER NO-UNDO.
DEFINE VARIABLE enrval AS LOGICAL NO-UNDO.
DEFINE VARIABLE valdmtrlh AS HANDLE NO-UNDO.
DEFINE VARIABLE urmtrlh AS HANDLE NO-UNDO.
DEFINE VARIABLE fildir AS CHARACTER NO-UNDO.
DEFINE VARIABLE mappvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE felfil AS CHARACTER NO-UNDO.
DEFINE VARIABLE vlev AS CHARACTER NO-UNDO.
DEFINE VARIABLE levinlast AS CHARACTER NO-UNDO.
DEFINE VARIABLE oversatt AS LOGICAL NO-UNDO.
DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.
DEFINE VARIABLE netth AS HANDLE NO-UNDO.
{EXTRADATA.I}
framesizeh = framesizeextrah.
valdmtrlh = TEMP-TABLE mspec_mtrlextra:DEFAULT-BUFFER-HANDLE. 
urmtrlh = TEMP-TABLE mtrltemp:DEFAULT-BUFFER-HANDLE. 
ON 'CHOOSE':U OF BTN_AVB PERSISTENT RUN avb_UI IN THIS-PROCEDURE.
ON 'CHOOSE' OF m_AvmarkeraHLEV RUN avmarkhlev_UI IN THIS-PROCEDURE .
ON 'CHOOSE' OF m_Sats_information RUN visasats_UI IN THIS-PROCEDURE .
ON 'CHOOSE' OF m_Sats_information2 RUN visasats2_UI IN THIS-PROCEDURE .
ON 'ENTRY' OF mtrlantal PERSISTENT RUN entryant_UI IN THIS-PROCEDURE.
ON 'LEAVE' OF mtrlantal PERSISTENT RUN leaveant_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-CLICK' OF mtrlantal PERSISTENT RUN mantal_UI IN THIS-PROCEDURE.
PROCEDURE leaveant_UI :
   IF AVAILABLE mspec_mtrlextra THEN DO:
      mspec_mtrlextra.ANTAL = DECIMAL(mtrlantal:SCREEN-VALUE).   
   END.
END PROCEDURE.
PROCEDURE mantal_UI :
   APPLY "ENTRY" TO  mtrlantal.
END PROCEDURE.


PROCEDURE entryant_UI :

END PROCEDURE.

ON 'CHOOSE':U OF BTN_back PERSISTENT RUN btnback_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_LEV PERSISTENT RUN btnlev_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_MIN PERSISTENT RUN btnmin_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_over PERSISTENT RUN btnover_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_UP PERSISTENT RUN btnup_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF CMB_LEV PERSISTENT RUN cmblev_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF TOG_LEVMTRL PERSISTENT RUN ValjLev_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_MTRL PERSISTENT RUN btnfmtrl_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_OFF PERSISTENT RUN btnoff_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_SKRIV PERSISTENT RUN btnskriv_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK':U OF FBTN_SKRIV PERSISTENT RUN btnmskriv_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_VISA PERSISTENT RUN btnvisa_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN-ANTAL PERSISTENT RUN akantal_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN-BEN PERSISTENT RUN akben_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN-BEN PERSISTENT RUN mdben_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN-ENR PERSISTENT RUN akenr_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN-ENR PERSISTENT RUN mdenr_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN-ENR2 PERSISTENT RUN akenr2_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN-ENR2 PERSISTENT RUN mdenr2_UI IN THIS-PROCEDURE.
ON 'LEAVE':U OF FILL-IN-ENR2 PERSISTENT RUN lenr2_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_IEXC PERSISTENT RUN btniexc_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_JMFPRIS PERSISTENT RUN btnjmfexc_UI IN THIS-PROCEDURE.
ON 'DROP-FILE-NOTIFY' OF BTN_JMFPRIS PERSISTENT RUN dropjmfexc_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_AOF PERSISTENT RUN sparaaofavoriter_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_HAOF PERSISTENT RUN hmtfavoriter_UI IN THIS-PROCEDURE.

ON 'VALUE-CHANGED':U OF TOG_ENR7 PERSISTENT RUN togenr7_UI IN THIS-PROCEDURE.
BTN_JMFPRIS:HIDDEN = TRUE.
IF Guru.Konstanter:mtrlsekvar[6] = FALSE THEN DO:   
   BTN_JMFPRIS:HIDDEN = FALSE.  
END.      
RUN main_UI.

PROCEDURE sparaaofavoriter_UI :
   DEFINE VARIABLE ReturnSpara AS INTEGER NO-UNDO.
   DEFINE VARIABLE ttbuffh AS HANDLE NO-UNDO.  
   tthandle = TEMP-TABLE mspec_mtrlextra:HANDLE.
   ttbuffh = tthandle:DEFAULT-BUFFER-HANDLE.
   FIND FIRST sparaladdatemp NO-ERROR.
   IF NOT AVAILABLE sparaladdatemp THEN CREATE sparaladdatemp.
   ASSIGN
   sparaladdatemp.GLOBANV = Guru.Konstanter:globanv /*Användare, i detta fall ELPAO*/
   sparaladdatemp.BENAMNING = "MTRLPRISE" /*Benämnings sufix, i detta fall ELPAO$STOR*/
   sparaladdatemp.TABVAL = "MTRL" /*Tabellnamn*/
   sparaladdatemp.FALTVALAO = "ENR" /*CHARACTER field*/
   sparaladdatemp.FALTVALDEL = "LEVKOD" /*Integer field*/
   sparaladdatemp.FALTVALDATE = "".   /*DATE field*/
   RUN SparaFavoFraga.w (OUTPUT ReturnSpara).
   IF ReturnSpara = ? THEN RETURN.
   ELSE IF ReturnSpara = 2 THEN RUN sparabrw_UI IN brwproc[4]  (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp).
   ELSE IF ReturnSpara = 1 THEN DO:     
      RUN ttcopy_UI IN huvprogh (INPUT TABLE-HANDLE tthandle).
      ttbuffh:EMPTY-TEMP-TABLE() NO-ERROR.
      RUN laddabrw_UI IN brwproc[4]  (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp).
      
      RUN ttjmfPair_UI IN huvprogh (INPUT TRUE,INPUT "LEVKOD,LEVKOD,ENR,ENR",INPUT TRUE,INPUT-OUTPUT ttbuffh).
      RUN openbdyn_UI IN brwproc[4] (INPUT "").
      RUN sparabrw_UI IN brwproc[4]  (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp).
      tthandle:EMPTY-TEMP-TABLE ().
      EMPTY TEMP-TABLE mspec_mtrlextra NO-ERROR. 
      RUN openbdyn_UI IN brwproc[4] (INPUT "").     
      RUN ttcopyhmt_UI IN huvprogh (INPUT-OUTPUT TABLE-HANDLE tthandle).
      FOR EACH mspec_mtrlextra :
         ASSIGN mspec_mtrlextra.MARK = TRUE.      
      END.
      IF Guru.Konstanter:varforetypval[29] = 1  THEN DO:                 
         RUN mtmenymark_UI IN netth (INPUT TABLE mspec_mtrlextra, OUTPUT TABLE mkmtrltemp APPEND).            
      END.
      RUN levnamnvald_UI.
      RUN openbdyn_UI IN brwproc[4] (INPUT "").
   END.   
END PROCEDURE.
PROCEDURE hmtfavoriter_UI :
   DEFINE VARIABLE ttbuffh AS HANDLE NO-UNDO.  
   tthandle = TEMP-TABLE mspec_mtrlextra:HANDLE.
   ttbuffh = tthandle:DEFAULT-BUFFER-HANDLE.     
   RUN ttcopy_UI IN huvprogh (INPUT TABLE-HANDLE tthandle).
   ttbuffh:EMPTY-TEMP-TABLE() NO-ERROR.    
   FIND FIRST sparaladdatemp NO-ERROR.
   IF NOT AVAILABLE sparaladdatemp THEN CREATE sparaladdatemp.
   ASSIGN
   sparaladdatemp.GLOBANV = Guru.Konstanter:globanv /*Användare, i detta fall ELPAO*/
   sparaladdatemp.BENAMNING = "MTRLPRISE"  /*Benämnings sufix, i detta fall ELPAO$STOR*/
   sparaladdatemp.TABVAL = "MTRL" /*Tabellnamn*/
   sparaladdatemp.FALTVALAO = "ENR" /*CHARACTER field*/
   sparaladdatemp.FALTVALDEL = "LEVKOD" /*Integer field*/
   sparaladdatemp.FALTVALDATE = "".   /*DATE field*/
   EMPTY TEMP-TABLE mspec_mtrlextra NO-ERROR. 
   RUN laddabrw_UI IN brwproc[4]  (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp). 
   RUN ttjmfPair_UI IN huvprogh (INPUT TRUE,INPUT "LEVKOD,LEVKOD,ENR,ENR",INPUT FALSE, INPUT-OUTPUT ttbuffh).   
   FOR EACH mspec_mtrlextra :
      ASSIGN mspec_mtrlextra.MARK = TRUE.      
   END.
   IF Guru.Konstanter:varforetypval[29] = 1  THEN DO:                 
      RUN mtmenymark_UI IN netth (INPUT TABLE mspec_mtrlextra, OUTPUT TABLE mkmtrltemp APPEND).            
   END.
   RUN levnamnvald_UI.
   RUN openbdyn_UI IN brwproc[4] (INPUT "").
   
END PROCEDURE.
PROCEDURE akenr2_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      RUN enrval_UI.
   END.   
   IF FILL-IN-ENR2:MODIFIED = TRUE THEN DO:
      IF TOG_ENR7:CHECKED = TRUE THEN DO:        
         IF LENGTH(STRING(FILL-IN-ENR2:SCREEN-VALUE)) = 7 THEN DO:
            APPLY "ENTRY" TO FILL-IN-ANTAL.
            RETURN NO-APPLY.
         END.
         
      END.
   END.
END PROCEDURE.

PROCEDURE mdenr2_UI :
   RUN enrval_UI.
END PROCEDURE.
PROCEDURE lenr2_UI :
   FILL-IN-ENR2:MODIFIED = FALSE.
END PROCEDURE.
PROCEDURE mdenr_UI :
   {OMSTARTAVGURUH.I}   
   {ENRHMTSM.I}
   RUN initsok_UI (INPUT 2,INPUT posok).
   {musarrow.i}  
   RUN levnamn_UI.
END PROCEDURE.
PROCEDURE akenr_UI :
    {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN-ENR.
   END.
END PROCEDURE.
PROCEDURE mdben_UI :
   {OMSTARTAVGURUH.I}  
   {BENHMT3.I}      
   RUN initsok_UI (INPUT 1,INPUT aosok).
   RUN levnamn_UI.
   {musarrow.i}   
END PROCEDURE.
PROCEDURE levnamn_UI :
   FOR EACH levtemp,
   EACH mtrltemp WHERE mtrltemp.LEVKOD = levtemp.LEVKOD AND mtrltemp.LEVNAMN = "":
      mtrltemp.LEVNAMN = levtemp.LEVNAMN.
   END.   
   RUN openbdynspec_UI IN brwproc[1].
   RUN title_UI IN brwproc[1].  
END PROCEDURE.
PROCEDURE levnamnvald_UI :   
   FOR EACH levtemp,
   EACH mspec_mtrlextra WHERE mspec_mtrlextra.LEVKOD = levtemp.LEVKOD AND mspec_mtrlextra.LEVNAMN = "":
      mspec_mtrlextra.LEVNAMN = levtemp.LEVNAMN.
   END.   
   RUN openbdynspec_UI IN brwproc[1].
   RUN title_UI IN brwproc[1].  
END PROCEDURE.
PROCEDURE akben_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN-BEN.
   END.
END PROCEDURE.
PROCEDURE akantal_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      RUN enrval_UI.
      FILL-IN-ENR2:SCREEN-VALUE = "".      
   END.
   IF FILL-IN-ENR2:SCREEN-VALUE = "" THEN DO:
      APPLY "ENTRY" TO FILL-IN-ENR2.
      RETURN NO-APPLY.
   END.   
END PROCEDURE.

PROCEDURE btnvisa_UI :
   {OMSTARTAVGURUH.I} 
   IF musz = TRUE THEN musz = FALSE.   
   ASSIGN    
   skrivut = FALSE.   
   {AVBGOM2.I}
   RUN spec_UI.
   RUN MTRLPRIS2V.W.
   RUN specb_UI.
   {AVBFRAM2.I} 
   {musarrow.i}  
END PROCEDURE.
PROCEDURE btnmskriv_UI :
   RUN SIDLANGD.W.
END PROCEDURE.
PROCEDURE btnskriv_UI :
   RUN SKRIVVAL.W (INPUT FALSE).       
   IF musz = TRUE THEN musz = FALSE. 
   ELSE DO:
      {OMSTARTAVGURUH.I}                 
      skrivut = TRUE.
      {AVBGOM2.I}
      RUN spec_UI.
      RUN MTRLPRIS2V.W.
      RUN specb_UI.
      {AVBFRAM2.I}
   END.     
   {musarrow.i}  
END PROCEDURE.
PROCEDURE btnoff_UI :
   {OMSTARTAVGURUH.I}    
   {AVBGOM2.I}
   MESSAGE "OBS! Alla artikler som Ni valt, kommer att skickas i offerten till Onninen."
   VIEW-AS ALERT-BOX TITLE "Meddelande".
   RUN spec_UI.
   RUN ELEFOFFV.W.
   RUN specb_UI.
   {AVBFRAM2.I} 
   {musarrow.i}  
END PROCEDURE.

PROCEDURE dropjmfexc_UI :
   fildir = BTN_JMFPRIS:GET-DROPPED-FILE(1).
   RUN jmfpris_UI.
END PROCEDURE.
PROCEDURE btnjmfexc_UI :
   DEFINE VARIABLE OKvald AS LOGICAL NO-UNDO.
   fildir = SESSION:TEMP-DIRECTORY + Guru.Konstanter:globanv + "\".
   {SESSIONTEMPDIR.I}  
   RUN getnumresult_UI IN brwproc[4] (OUTPUT antal_valda).  
   Guru.GlobalaVariabler:jmfPrisEnrTTh:EMPTY-TEMP-TABLE().   
   IF antal_valda > 0 THEN RUN jmfprisvaltmtrl_UI.
   ELSE DO:    
      IF SESSION:CLIENT-TYPE = "WEBCLIENT" THEN fildir = webclienttempdir.   
      OS-CREATE-DIR VALUE(fildir) NO-ERROR.
      mappvar = fildir.
      SYSTEM-DIALOG GET-FILE fildir
      TITLE          "Välj den excelfil som Ni vill läsa in"
      FILTERS        "All Files (*.xls;*.xlsx)"  "*.xls;*.xlsx"
      INITIAL-DIR    mappvar
      UPDATE OKvald.      
      IF OKvald = TRUE THEN DO:
         RUN jmfpris_UI.                  
         
      END.
   END.   
END PROCEDURE.
PROCEDURE btniexc_UI :
   DEFINE VARIABLE OKvald AS LOGICAL NO-UNDO.
   EMPTY TEMP-TABLE mttemp NO-ERROR. 
   EMPTY TEMP-TABLE felmex NO-ERROR. 
   oversatt = TRUE.
   IF Guru.Konstanter:globniv = 0 OR Guru.Konstanter:globniv = 1 THEN DO:
      MESSAGE  "Ska importen gå via översättningslistan?" VIEW-AS ALERT-BOX
      QUESTION BUTTONS YES-NO UPDATE svar AS LOGICAL.         
      IF svar = FALSE THEN oversatt = FALSE. 
   END.   
   fildir = SESSION:TEMP-DIRECTORY + Guru.Konstanter:globanv + "\".
   {SESSIONTEMPDIR.I}
   IF SESSION:CLIENT-TYPE = "WEBCLIENT" THEN fildir = webclienttempdir.   
   OS-CREATE-DIR VALUE(fildir) NO-ERROR.
   mappvar = fildir.
   SYSTEM-DIALOG GET-FILE fildir
   TITLE          "Välj den excelfil som Ni vill läsa in"
   FILTERS        "All Files (*.xls;*.xlsx)"  "*.xls;*.xlsx"
   INITIAL-DIR    mappvar
   UPDATE OKvald.      
   IF OKvald = TRUE THEN DO:                      
      {OMSTARTAVGURUH.I}    
      RUN MTRLEXELIN.P (INPUT fildir,INPUT vald_lev, OUTPUT TABLE mttemp ).   
      RUN enrvalexc_UI.
      IF Guru.Konstanter:varforetypval[29] = 1  THEN DO:                 
         RUN mtmenymark_UI IN netth (INPUT TABLE mspec_mtrlextra, OUTPUT TABLE mkmtrltemp APPEND).            
      END.      
      RUN levnamnvald_UI. 
      RUN setcolsortvar_UI IN brwproc[4] (INPUT "").
      RUN openbdynspec_UI IN brwproc[4].
      RUN title_UI IN brwproc[4].
      FIND FIRST felmex NO-ERROR.
      IF AVAILABLE felmex THEN DO:
         felfil = SESSION:TEMP-DIR + STRING(TIME) + ".txt". 
         {AMERICANEUROPEAN.I}      
         OUTPUT TO VALUE(felfil).
         FIND FIRST levtemp WHERE levtemp.LEVKOD =  vald_lev NO-LOCK NO-ERROR.
         PUT "Dessa enr blev ej inlästa från excel . Var god kontrollera!" AT 6.         
         PUT SKIP.         
         FOR EACH felmex:           
            PUT UNFORMATTED felmex.ENR AT 6 felmex.ANTAL AT 19 SUBSTRING(felmex.LEVKOD,1,3) AT 32 SUBSTRING(felmex.LEVNAMN,1,20) AT 42 SUBSTRING(felmex.BENAMNING,1,20) AT 65.  
            PUT SKIP.
         END.
         {EUROPEANAMERICAN.I}
         RUN OPENDOC.P (felfil,"","",NO).         
      END.   
   END.               
   {musarrow.i}  
END PROCEDURE.
/*från brw*/
PROCEDURE jmfprisvaltmtrl_UI :
   DEFINE VARIABLE dynbuffh AS HANDLE NO-UNDO.
   dynbuffh = TEMP-TABLE mspec_mtrlextra:DEFAULT-BUFFER-HANDLE.
   FOR EACH mspec_mtrlextra WHERE NO-LOCK:
      Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-CREATE().
      IF Guru.Konstanter:globforetag = "sund" OR Guru.Konstanter:globforetag = "SNAT" OR Guru.Konstanter:globforetag = "ORBI" OR Guru.Konstanter:globforetag = "celpa" THEN DO:            
          IF SUBSTRING(mspec_mtrlextra.ENR,1,1) NE "E" THEN Guru.GlobalaVariabler:jmfPrisEnrTTh::BUFFER-FIELD("ENR"):BUFFER-VALUE = "E" + mspec_mtrlextra.ENR.
          Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("ENR"):BUFFER-VALUE = mspec_mtrlextra.ENR.
      END.
      ELSE Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("ENR"):BUFFER-VALUE = mspec_mtrlextra.ENR.
      Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("LEVKOD"):BUFFER-VALUE = mspec_mtrlextra.LEVKOD.    
      IF  mspec_mtrlextra.BERKVANT > 0 THEN  Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("ANTAL"):BUFFER-VALUE = mspec_mtrlextra.BERKVANT.
      ELSE Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("ANTAL"):BUFFER-VALUE = 1.  
      Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("InputLEVKOD"):BUFFER-VALUE = Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("LEVKOD"):BUFFER-VALUE . 
   END.
   Guru.Konstanter:MtrlHelpStart().
   RUN jmfmtrpris_UI IN Guru.Konstanter:MtrlClasserStart.

END PROCEDURE.
/*från excel*/
PROCEDURE jmfpris_UI :
   RUN startin_UI.
   Guru.Konstanter:MtrlHelpStart().
   
   RUN jmfmtrpris_UI IN Guru.Konstanter:MtrlClasserStart.
   
END PROCEDURE.
 
PROCEDURE startin_UI: 
  
   DEFINE VARIABLE lid AS CHARACTER NO-UNDO.

   DEFINE VARIABLE artecken AS LOGICAL NO-UNDO. 
   ASSIGN
   startc = "A"
   slutc = "C"
   iRad = 0.    
   RUN HuvudLev_UI IN netth (OUTPUT lid). 
   RUN readexcelstart_UI (INPUT fildir).
   DO WHILE iRad <= iRadslut:
      iRad = iRad + 1.
      RUN readexcel_UI.     
      IF allacolumtext[1] NE "" THEN DO:                  
         allacolumtext[1] = REPLACE(allacolumtext[1]," ","") NO-ERROR.                 
         allacolumtext[1] = REPLACE(allacolumtext[1],CHR(9),"")NO-ERROR.
         RUN SiffraBokstav_UI (INPUT SUBSTRING(allacolumtext[1],1,1),OUTPUT artecken). 
         IF artecken = FALSE THEN allacolumtext[1] = SUBSTRING(allacolumtext[1],2).                      
         IF Guru.Konstanter:globforetag = "sund" OR Guru.Konstanter:globforetag = "SNAT" OR Guru.Konstanter:globforetag = "ORBI" OR Guru.Konstanter:globforetag = "celpa" THEN DO:            
            IF SUBSTRING(allacolumtext[1],1,1) NE "E" THEN allacolumtext[1] = "E" + allacolumtext[1].                                       
         END.
         ELSE DO:                     
            IF SUBSTRING(allacolumtext[1],1,1) = "E" THEN allacolumtext[1] = SUBSTRING(allacolumtext[1],2).                            
         END.           
         Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-CREATE().
         Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("ORDNING"):BUFFER-VALUE = iRad.
         Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("ENR"):BUFFER-VALUE = allacolumtext[1].
         Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("ANTAL"):BUFFER-VALUE = allacolumtext[2].
         IF Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("ANTAL"):BUFFER-VALUE = 0 THEN Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("ANTAL"):BUFFER-VALUE = 1.                 
         Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("LEVKOD"):BUFFER-VALUE = allacolumtext[3].
         Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("InputLEVKOD"):BUFFER-VALUE = Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("LEVKOD"):BUFFER-VALUE.                                     
      END.   
      ELSE iRad = iRadslut + 1. 
   END.   
   RUN slutreadexcel_UI.
   RUN LevSetExcel_UI.
END PROCEDURE.

PROCEDURE LevSetExcel_UI :
   DEFINE VARIABLE queryvar AS CHARACTER NO-UNDO.
   queryvar =  "FOR EACH " + Guru.GlobalaVariabler:jmfPrisEnrTTh:TABLE + " WHERE LEVKOD = '' ".
   Guru.Konstanter:CreateCustomQuery(Guru.GlobalaVariabler:jmfPrisEnrTTh,queryvar).
   FOR EACH levtemp WHERE NO-LOCK:
      Guru.GlobalaVariabler:jmfPrisEnrTTh:FIND-FIRST("WHERE LEVKOD = '' ",NO-LOCK) NO-ERROR.
      IF Guru.GlobalaVariabler:jmfPrisEnrTTh:AVAILABLE THEN DO:
         Guru.GlobalaVariabler:CustomQueryDyn:QUERY-OPEN().
         Guru.GlobalaVariabler:CustomQueryDyn:GET-FIRST().
         DO WHILE Guru.GlobalaVariabler:CustomQueryDyn:QUERY-OFF-END = FALSE:
            queryvar = " WHERE ENR = " + QUOTER(Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("ENR"):BUFFER-VALUE) +
            " AND LEVKOD = " + QUOTER(levtemp.LEVKOD).            
            Guru.GlobalaVariabler:jmfPrisEnrBuffTTh:FIND-FIRST(queryvar,NO-LOCK) NO-ERROR.
            IF Guru.GlobalaVariabler:jmfPrisEnrBuffTTh:AVAILABLE THEN.
            ELSE DO: 
               Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("LEVKOD"):BUFFER-VALUE = levtemp.LEVKOD. 
               Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("InputLEVKOD"):BUFFER-VALUE = Guru.GlobalaVariabler:jmfPrisEnrTTh:BUFFER-FIELD("LEVKOD"):BUFFER-VALUE.             
            END.
            Guru.GlobalaVariabler:CustomQueryDyn:GET-NEXT().   
         END.         
      END.
      ELSE LEAVE.       
   END.  
END PROCEDURE.

PROCEDURE btnfmtrl_UI :
   {OMSTARTAVGURUH.I}
   {AVBGOM2.I}
   RUN spec_UI.   
   {AMERICANEUROPEAN.I}
   RUN MTRLADMV.W.
   {EUROPEANAMERICAN.I}
   RUN specb_UI.
   {AVBFRAM2.I}
   {musarrow.i}
END PROCEDURE.

PROCEDURE Vallev_UI :
   DEFINE VARIABLE justrun AS LOGICAL NO-UNDO.
   IF NOT VALID-HANDLE(Guru.GlobalaVariabler:ttBuffHandleVallistaDyn) THEN justrun = TRUE.
   ELSE IF Guru.GlobalaVariabler:ttBuffHandleVallistaDyn:NAME NE "VL" + Guru.Konstanter:LeverantorTTh:NAME THEN justrun = TRUE. 
   IF justrun = TRUE THEN DO:   
      Guru.Konstanter:CreateVallistaDynTable(INPUT Guru.Konstanter:LeverantorTTh).
      Guru.Konstanter:CreateCustomQuery(Guru.Konstanter:LeverantorTTh,"").
      Guru.GlobalaVariabler:CustomQueryDyn:GET-FIRST().
      DO WHILE Guru.GlobalaVariabler:CustomQueryDyn:QUERY-OFF-END = FALSE:
         Guru.GlobalaVariabler:ttBuffHandleVallistaDyn:BUFFER-CREATE().
         Guru.GlobalaVariabler:ttBuffHandleVallistaDyn:BUFFER-COPY(Guru.Konstanter:LeverantorTTh).
         Guru.GlobalaVariabler:CustomQueryDyn:GET-NEXT().
      END.
   END.
END PROCEDURE.

PROCEDURE ValjLev_UI :
   RUN Vallev_UI.
   IF TOG_LEVMTRL:CHECKED = FALSE THEN DO:
      MESSAGE "Vill du välja fler eller ändra dina leverantörer?"
      VIEW-AS ALERT-BOX
      QUESTION BUTTONS YES-NO UPDATE svar AS LOGICAL.  
      IF svar = TRUE THEN DO:
         TOG_LEVMTRL:CHECKED = TRUE.
         RUN DynVallista.w.
      END.   
      ELSE TOG_LEVMTRL:CHECKED = FALSE. 
   END.   
   ELSE RUN DynVallista.w.
   Guru.GlobalaVariabler:ttBuffHandleValdaDyn:FIND-FIRST("WHERE  ",NO-LOCK) NO-ERROR.
   IF Guru.GlobalaVariabler:ttBuffHandleValdaDyn:AVAILABLE THEN.
   ELSE TOG_LEVMTRL:CHECKED = FALSE.
   IF TOG_LEVMTRL:CHECKED = FALSE THEN Guru.GlobalaVariabler:ttBuffHandleValdaDyn:EMPTY-TEMP-TABLE().
END PROCEDURE.

PROCEDURE cmblev_UI :
   {OMSTARTAVGURUH.I}     
   lev = CMB_LEV:SCREEN-VALUE.    
   IF lev NE huvudlev THEN DO:
      ASSIGN                            
      CMB_LEV:HIDDEN = TRUE      
      BTN_LEV:HIDDEN = FALSE.
      IF lev BEGINS Guru.Konstanter:globanv THEN vald_lev = "99" + Guru.Konstanter:globanv.
      ELSE IF lev = "Alla leverantörer" THEN RUN gomlevkod_UI IN huvprogh (TRUE).
      ELSE DO:            
         FIND FIRST levtemp WHERE levtemp.LEVNAMN = lev AND levtemp.BORTTAG = FALSE
         USE-INDEX LEV NO-LOCK NO-ERROR.
         vald_lev = levtemp.LEVKOD.
      END.
      levinlast = "".  
      IF lev = "Alla leverantörer" THEN DO:
         RUN setorgtitle_UI IN brwproc[1] (INPUT lev).
         RUN tooltip_UI IN brwproc[1] (INPUT "").
         RUN setcolsortvar_UI IN brwproc[1] (INPUT " WHERE KALKNR = 0 USE-INDEX ENR ").
         RUN openbdynspec_UI IN brwproc[1].
      END.
      ELSE DO:       
         RUN levinlast_UI (INPUT vald_lev,OUTPUT levinlast).
         RUN setorgtitle_UI IN brwproc[1] (INPUT lev + levinlast).               
         RUN setcolsortvar_UI IN brwproc[1] (INPUT " WHERE KALKNR = 0 AND LEVKOD = '" + STRING(vald_lev) + "' USE-INDEX ENR ").
         RUN openbdynspec_UI IN brwproc[1].
      END.   
   END.
   ELSE DO:
      vald_lev = vald_kundlev.
      RUN setcolsortvar_UI IN brwproc[1] (INPUT " WHERE KALKNR = 0 AND LEVKOD = '" + STRING(vald_lev) + "' USE-INDEX ENR ").
      RUN openbdynspec_UI IN brwproc[1].
   END. 
   IF vald_lev BEGINS "99" THEN DO:                   
      RUN initsok_UI (INPUT 2,INPUT "").
   END.
   {musarrow.i}     
END PROCEDURE.
PROCEDURE btnup_UI :
   FILL-IN-ANTAL:SCREEN-VALUE = STRING(INTEGER(FILL-IN-ANTAL:SCREEN-VALUE) + 1).
   APPLY "ENTRY" TO FILL-IN-ANTAL.
END PROCEDURE.
PROCEDURE selectfoc2_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(urmtrlh) THEN DO:
      urmtrlh = TEMP-TABLE mtrltemp:DEFAULT-BUFFER-HANDLE.
   END.
   RUN selectrowid_UI IN brwproc[1] (OUTPUT brwrowid).
   FIND FIRST mtrltemp WHERE ROWID(mtrltemp) = brwrowid NO-LOCK NO-ERROR.   
END PROCEDURE.
PROCEDURE selectfoc_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(valdmtrlh) THEN DO:
      valdmtrlh = TEMP-TABLE mspec_mtrlextra:DEFAULT-BUFFER-HANDLE.   
   END.
   RUN selectrowid_UI IN brwproc[4] (OUTPUT brwrowid).
   FIND FIRST mspec_mtrlextra WHERE ROWID(mspec_mtrlextra) = brwrowid NO-LOCK NO-ERROR. 
   hittmtrlrowid = brwrowid.
END PROCEDURE.
PROCEDURE fselectfoc_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(urmtrlh) THEN DO:
      urmtrlh = TEMP-TABLE mtrltemp:DEFAULT-BUFFER-HANDLE.
   END.
   RUN fetrowid_UI IN brwproc[1] (INPUT antal_raknare,OUTPUT brwrowid) .
   FIND FIRST mtrltemp WHERE ROWID(mtrltemp) = brwrowid NO-LOCK NO-ERROR.   
END PROCEDURE.

PROCEDURE fselectfoc2_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(valdmtrlh) THEN DO:
      valdmtrlh = TEMP-TABLE mspec_mtrlextra:DEFAULT-BUFFER-HANDLE.
   END.
   RUN fetrowid_UI IN brwproc[4] (INPUT antal_raknare,OUTPUT brwrowid) .
   FIND FIRST mspec_mtrlextra WHERE ROWID(mspec_mtrlextra) = brwrowid NO-LOCK NO-ERROR.          
END PROCEDURE.
PROCEDURE btnover_UI :
   antal_valda = BRW_HLEV:NUM-SELECTED-ROWS.         
   antal_raknare = 1.
   antalvar = 1.
   IF antal_valda > 0 THEN DO:
      DO WHILE antal_raknare LE antal_valda:                                           
         RUN fselectfoc_UI.         
         RUN over_UI.
      END.       
      FOR EACH mspec_mtrlextra WHERE mspec_mtrlextra.MARK = FALSE.
         DELETE mspec_mtrlextra.
      END.
      RUN setcolsortvar_UI IN brwproc[4] (INPUT "").
      RUN openbdynspec_UI IN brwproc[4].
      RUN title_UI IN brwproc[4].
      FIND FIRST mspec_mtrlextra WHERE ROWID(mspec_mtrlextra) = spec_rowid NO-LOCK NO-ERROR.
      IF AVAILABLE mspec_mtrlextra THEN DO:
         RUN setlastrowid_UI IN brwproc[4] (INPUT ROWID(mspec_mtrlextra)).
         RUN lastselectdyn_UI IN brwproc[4].        
      END.      
      status-ok = BRW_MTRL:SELECT-FOCUSED-ROW() NO-ERROR.      
      APPLY "ENTRY" TO  mtrlantal.      
      status-ok = BRW_HLEV:DESELECT-ROWS() NO-ERROR.
   END.   
END PROCEDURE.
PROCEDURE btnmin_UI :
   IF INTEGER(FILL-IN-ANTAL:SCREEN-VALUE) >= 2 THEN DO:
      FILL-IN-ANTAL:SCREEN-VALUE = STRING(INTEGER(FILL-IN-ANTAL:SCREEN-VALUE) - 1).
   END.   
   ELSE DO:
      MESSAGE "Antal kan inte vara mindre än 1!" VIEW-AS ALERT-BOX TITLE "Meddelande".
   END.         
   APPLY "ENTRY" TO FILL-IN-ANTAL.
END PROCEDURE.
PROCEDURE btnlev_UI :
   vald_lev = vald_kundlev.            
   levinlast = "".
   RUN levinlast_UI (INPUT vald_lev,OUTPUT levinlast).
   RUN setorgtitle_UI IN brwproc[1] (INPUT huvudlev + levinlast).               
   RUN setcolsortvar_UI IN brwproc[1] (INPUT " WHERE KALKNR = 0 AND LEVKOD = '" + STRING(vald_lev) + "' USE-INDEX ENR ").
   RUN openbdynspec_UI IN brwproc[1].
   RUN gomlevkod_UI IN huvprogh (FALSE).
   ASSIGN 
   FILL-IN-BEN:HIDDEN = FALSE 
   FILL-IN-ENR:HIDDEN = FALSE    
   BTN_LEV:HIDDEN = TRUE
   CMB_LEV:HIDDEN = FALSE
   BRW_HLEV:HIDDEN = FALSE 
   CMB_LEV:SCREEN-VALUE = huvudlev
   vald_lev = vald_kundlev.      
   {musarrow.i}   
   IF posok NE " " THEN DO:
      APPLY "ENTRY" TO FILL-IN-ENR.
      RETURN.
   END.
   ELSE DO:
      APPLY "ENTRY" TO FILL-IN-BEN.
      RETURN.
   END.               
END PROCEDURE.
PROCEDURE btnback_UI :
   antal_valda = BRW_MTRL:NUM-SELECTED-ROWS NO-ERROR.
   antal_raknare = 1.
   DO WHILE antal_raknare LE antal_valda:                                   
      RUN fselectfoc2_UI.
      IF AVAILABLE mspec_mtrlextra THEN DO:
         DELETE mspec_mtrlextra.
      END.
      IF antal_raknare = antal_valda THEN  DO:
         RUN selnextprevrow_UI IN brwproc[4].
      END.
      antal_raknare = antal_raknare + 1.   
   END.
   FOR EACH mspec_mtrlextra WHERE mspec_mtrlextra.MARK = FALSE.
      DELETE mspec_mtrlextra.
   END.   
   RUN openbdynspec_UI IN brwproc[4].
   RUN lastselectdyn_UI IN brwproc[4].
   RUN title_UI IN brwproc[4].
END PROCEDURE.
PROCEDURE avb_UI :
   MESSAGE "Du avslutar nu " + SUBSTRING(foretemp.VERSION,1,10)
   VIEW-AS ALERT-BOX QUESTION BUTTONS OK-CANCEL UPDATE val AS LOGICAL.   
   IF val = FALSE THEN RETURN NO-APPLY.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph NO-ERROR. 
   edataapph = ?.
   RUN avb_UI IN huvprogh.
END PROCEDURE.

PROCEDURE spec_UI :
   EMPTY TEMP-TABLE spec_mtrl NO-ERROR. 
   RUN selectfoc_UI.
   FOR EACH mspec_mtrlextra:
      CREATE spec_mtrl.
      BUFFER-COPY mspec_mtrlextra TO spec_mtrl.
   END.
END PROCEDURE.
PROCEDURE specb_UI :
   DEFINE VARIABLE enrvar AS CHARACTER NO-UNDO.
   FIND FIRST mspec_mtrlextra WHERE ROWID(mspec_mtrlextra) = hittmtrlrowid NO-LOCK NO-ERROR.
   IF AVAILABLE mspec_mtrlextra THEN enrvar = mspec_mtrlextra.ENR.
   EMPTY TEMP-TABLE mspec_mtrlextra NO-ERROR. 
   
   FOR EACH spec_mtrl:
      CREATE mspec_mtrlextra.
      BUFFER-COPY spec_mtrl TO mspec_mtrlextra.
   END.
   RUN openbdynspec_UI IN brwproc[4].  
   FIND FIRST mspec_mtrlextra WHERE mspec_mtrlextra.ENR = enrvar  NO-LOCK NO-ERROR.
   IF AVAILABLE  mspec_mtrlextra THEN DO:
      RUN setlastrowid_UI IN brwproc[4] (INPUT  ROWID(mspec_mtrlextra)).
      RUN lastselectdyn_UI IN brwproc[4].     
   END.   
   RUN title_UI IN brwproc[4].
END PROCEDURE.
PROCEDURE PlaceraKnapp_UI :
   Guru.GlobalaVariabler:StartRadForKnappar = BRW_MTRL:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_OFF).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_MTRL).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_VISA).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_SKRIV).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_IEXC).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_JMFPRIS).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_HAOF).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_AOF).
   
   Guru.GlobalaVariabler:StartKolumnForKnappar = FBTN_OFF:COLUMN. 
  
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_MTRL,FALSE).
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_VISA,FALSE).
   Guru.Konstanter:PlaceraKnapparVagratt(FBTN_SKRIV,FALSE).
   Guru.Konstanter:PlaceraKnapparVagratt(BTN_IEXC,FALSE).
   Guru.Konstanter:PlaceraKnapparVagratt(BTN_JMFPRIS,FALSE).
   Guru.Konstanter:PlaceraKnapparVagratt(BTN_HAOF,FALSE).
   Guru.Konstanter:PlaceraKnapparVagratt(BTN_AOF,FALSE).     
END PROCEDURE.
PROCEDURE buttplac_UI :
   Guru.GlobalaVariabler:collefth = ?.
   FBTN_OFF:HIDDEN = TRUE.  /*ANVÄNDS EJ*/  
   IF Guru.Konstanter:globforetag = "CELPA" OR Guru.Konstanter:globforetag = "CSUND" THEN DO:
      FBTN_OFF:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_OFF:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).      
   END.
   ELSE FBTN_OFF:HIDDEN = TRUE.       
   IF Guru.Konstanter:mtrlsekvar[3] = TRUE THEN DO:     
      FBTN_MTRL:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_MTRL:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).      
   END.
   ELSE FBTN_MTRL:HIDDEN = TRUE.
   FBTN_VISA:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = FBTN_VISA:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).      
   FBTN_SKRIV:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = FBTN_SKRIV:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).      
   BTN_IEXC:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = BTN_IEXC:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   BTN_JMFPRIS:HIDDEN = TRUE.
   IF Guru.Konstanter:mtrlsekvar[6] = FALSE THEN DO:     
      BTN_JMFPRIS:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = BTN_JMFPRIS:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.                 
END PROCEDURE.
PROCEDURE main_UI :
   {OMSTARTAVGURUH.I}
   C-Win:TITLE = "Materielpriser" + "-" + "Systemsupport 090/184540    elpool.ume@elpool.se  " + foretemp.ATRHOME.
   ASSIGN
   satsmtrl = FALSE
   satstrue = FALSE.
   RUN VISMEDDU.W.   
   {ALLSTARTDYN.I}
   ASSIGN BTN_IEXC:LABEL = "Import Excel".
   BTN_JMFPRIS:LABEL = "Jämföra Priser". 
   {musarrow.i}    
   RUN gomlevkod_UI IN huvprogh (TRUE).
END PROCEDURE.
PROCEDURE allstartbrw_UI :
   DEFINE VARIABLE korextra AS LOGICAL NO-UNDO.
   korextra = FALSE.
   IF NOT VALID-HANDLE(brwproc[1]) THEN DO: 
      RUN DYNBRW.P PERSISTENT SET brwproc[1] (INPUT BRW_HLEV).    
      RUN StartSokEnrLev_UI IN brwproc[1] (INPUT THIS-PROCEDURE).   
      RUN dynprogextra IN brwproc[1] (INPUT "rowdispextra_UI",INPUT THIS-PROCEDURE).
      RUN rowdispextrakor IN  brwproc[1] (INPUT TRUE).   
      IF Guru.Konstanter:globnetprissortvar = 1 THEN  RUN setcolindex_UI IN brwproc[1] (INPUT "kund DESCENDING by enr").        
   END.
   IF NOT VALID-HANDLE(brwproc[4]) THEN DO:
      RUN DYNBRW.P PERSISTENT SET brwproc[4] (INPUT BRW_MTRL).
      RUN StartSokEnrLev_UI IN brwproc[4] (INPUT THIS-PROCEDURE).     
      RUN dynprogextra IN brwproc[4] (INPUT "rowdispextra_UI",INPUT THIS-PROCEDURE).
      IF Guru.Konstanter:globnetprissortvar = 1 THEN  RUN setcolindex_UI IN brwproc[4] (INPUT "kund DESCENDING by enr").
      RUN rowdispextrakor IN  brwproc[4] (INPUT TRUE).   
   END.
   IF NOT VALID-HANDLE(brwproc[5]) THEN RUN DYNARROW.P PERSISTENT SET brwproc[5] 
      (INPUT BRW_HLEV, INPUT BRW_MTRL,INPUT ?, INPUT ?,INPUT ? , INPUT ?).      
   RUN setdefaultcol_UI IN brwproc[1] (INPUT 1).
   RUN setdefaultcol_UI IN brwproc[4] (INPUT 1).
   IF Guru.Konstanter:appcon THEN DO:
      RUN EXTRADATAHMT.P PERSISTENT SET edataapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT.                  
   END.
   ELSE DO:
      RUN EXTRADATAHMT.P PERSISTENT SET edataapph.      
   END.
   IF NOT VALID-HANDLE(mtrlbapph) THEN korextra = TRUE.
   IF Guru.Konstanter:appcon THEN DO:
      IF NOT VALID-HANDLE(mtrlbapph) AND Guru.Konstanter:varforetypval[27] = 0 THEN RUN MTRLBAPP.P PERSISTENT SET mtrlbapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
   END.
   ELSE DO:
      IF NOT VALID-HANDLE(mtrlbapph) AND Guru.Konstanter:varforetypval[27] = 0 THEN RUN MTRLBAPP.P PERSISTENT SET mtrlbapph.
   END.      
   IF Guru.Konstanter:appcon THEN DO:
      IF Guru.Konstanter:varforetypval[27] = 0 THEN RUN NETTOMARK.P PERSISTENT SET netth ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
   END.
   ELSE DO:
      IF Guru.Konstanter:varforetypval[27] = 0 THEN RUN NETTOMARK.P PERSISTENT SET netth.
   END.   
   IF korextra = TRUE THEN DO:
      korextra = FALSE.
      RUN korextra_UI.
      RUN buttplac_UI.
   END.
END PROCEDURE.

PROCEDURE korextra_UI :
   FIND FIRST depatemp  NO-LOCK NO-ERROR.
   IF NOT AVAILABLE depatemp THEN DO:
      IF Guru.Konstanter:varforetypval[27] = 0 THEN  RUN mhmt_UI IN mtrlbapph (OUTPUT TABLE levtemp,OUTPUT TABLE depatemp, OUTPUT vald_kundlev).                      
   END.
   IF vald_kundlev = "" THEN DO:
      FIND FIRST levtemp WHERE levtemp.LEVKOD NE "0" 
      AND levtemp.BORTTAG = FALSE NO-LOCK NO-ERROR.
       IF AVAILABLE levtemp THEN vald_kundlev = levtemp.LEVKOD.
   END.
   CMB_LEV:LIST-ITEMS = "".
   FIND FIRST levtemp WHERE levtemp.LEVKOD = vald_kundlev
   USE-INDEX LEV NO-LOCK NO-ERROR. 
   IF AVAILABLE levtemp THEN DO:
      ASSIGN
      status-ok = CMB_LEV:ADD-LAST(levtemp.LEVNAMN)
      CMB_LEV:SCREEN-VALUE = levtemp.LEVNAMN.
      ASSIGN
      Guru.SharedVariable:ValdmtrlLeverantor = levtemp.LEVKOD
      Guru.SharedVariable:ValdmtrlLeverantorName = levtemp.LEVNAMN. 
   END.
   FOR EACH levtemp WHERE levtemp.LEVKOD NE vald_kundlev AND 
   levtemp.LEVKOD NE "0" AND levtemp.BORTTAG = FALSE USE-INDEX LEV NO-LOCK:      
      status-ok = CMB_LEV:ADD-LAST(levtemp.LEVNAMN).      
      IF levtemp.LEVKOD = "99" THEN DO:
         status-ok = CMB_LEV:ADD-LAST(Guru.Konstanter:globanv + " " + levtemp.LEVNAMN).         
      END.        
   END. 
   status-ok = CMB_LEV:ADD-LAST("Alla leverantörer").  
   ASSIGN 
   vald_lev = vald_kundlev
   bestant = FALSE.   
   levinlast = "".
   RUN levinlast_UI (INPUT vald_lev,OUTPUT levinlast).
   RUN setorgtitle_UI IN brwproc[1] (INPUT  huvudlev + levinlast).               
   RUN setcolsortvar_UI IN brwproc[1] (INPUT " WHERE KALKNR = 0 AND LEVKOD = '" + STRING(vald_lev) + "' USE-INDEX ENR ").
   RUN openbdynspec_UI IN brwproc[1].
   BTN_LEV:HIDDEN = TRUE.
END PROCEDURE.
PROCEDURE enrval_UI :
  FIND FIRST mtrltemp WHERE mtrltemp.ENR = FILL-IN-ENR2:SCREEN-VALUE AND mtrltemp.LEVKOD = vald_lev
  NO-LOCK NO-ERROR.
  IF AVAILABLE mtrltemp THEN DO:
     ASSIGN
     antalvar = INTEGER(FILL-IN-ANTAL:SCREEN-VALUE)
     enrval = TRUE.
     RUN over_UI.
  END.  
  ELSE DO:
     EMPTY TEMP-TABLE emtrltemp NO-ERROR.          
     RUN hmtskap_UI IN mtrlbapph (INPUT FILL-IN-ENR2:SCREEN-VALUE,INPUT vald_lev,OUTPUT TABLE emtrltemp). 
     FIND FIRST emtrltemp NO-LOCK NO-ERROR.
     IF AVAILABLE emtrltemp THEN DO:
        ASSIGN
        antalvar = INTEGER(FILL-IN-ANTAL:SCREEN-VALUE)
        enrval = TRUE.
        RUN over4_UI.
      END.
      ELSE DO:      
         FIND FIRST levtemp WHERE levtemp.LEVKOD =  vald_lev NO-LOCK NO-ERROR.
         MESSAGE "Det finns ingen materiel med E-nummer: " + FILL-IN-ENR2:SCREEN-VALUE + " hos leverantör: " + STRING(levtemp.LEVNAMN) VIEW-AS ALERT-BOX
         TITLE "Meddelande".    
         RETURN.
      END.
  END.
  RUN openbdynspec_UI IN brwproc[4].  
  RUN setlastrowid_UI IN brwproc[4] (INPUT spec_rowid).
  RUN lastselectdyn_UI IN brwproc[4].
  RUN title_UI IN brwproc[4].
END PROCEDURE.

PROCEDURE enrvalexc_UI :          
  FOR EACH mttemp :  
     FIND FIRST levtemp WHERE levtemp.LEVKOD = mttemp.LEVKOD NO-LOCK NO-ERROR.      
     IF AVAILABLE levtemp THEN DO: 
        ASSIGN
        mttemp.LEVNAMN = levtemp.LEVNAMN
        vlev = mttemp.LEVKOD.
     END.
     ELSE DO:
        vlev = vald_lev.
        FIND FIRST levtemp WHERE levtemp.LEVKOD = vald_lev NO-LOCK NO-ERROR.   
        IF AVAILABLE levtemp THEN DO: 
           ASSIGN
           mttemp.LEVKOD = vald_lev.
           mttemp.LEVNAMN = levtemp.LEVNAMN.
        END.
     END.
     EMPTY TEMP-TABLE emtrltemp NO-ERROR.  
     IF oversatt = FALSE THEN RUN hmtskap_UI IN mtrlbapph (INPUT mttemp.ENR,INPUT vlev,OUTPUT TABLE emtrltemp).        
     ELSE RUN hmtskap2_UI IN mtrlbapph (INPUT mttemp.ENR,INPUT vlev,OUTPUT TABLE emtrltemp). 
     FIND FIRST emtrltemp NO-LOCK NO-ERROR.
     IF AVAILABLE emtrltemp THEN DO:
        ASSIGN
        antalvar = INTEGER(mttemp.ANTAL)
        enrval = TRUE.
        RUN over4_UI.
     END.
     ELSE DO:      
        CREATE felmex.       
        ASSIGN 
        felmex.ENR = mttemp.ENR
        felmex.ANTAL = mttemp.ANTAL
        felmex.LEVKOD = mttemp.LEVKOD                 
        felmex.LEVNAMN = mttemp.LEVNAMN
        felmex.BENAMNING = mttemp.BENAMNING.  
     END.  
  END.  
END PROCEDURE.

PROCEDURE infoES_UI :
   DEFINE INPUT  PARAMETER valenr AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER brwname AS CHARACTER NO-UNDO.
   DEFINE VARIABLE valbrw AS INTEGER NO-UNDO.  
   DEFINE VARIABLE levnamnvar AS CHARACTER NO-UNDO.
   IF brwname = "BRW_MTRL" THEN valbrw = 1.  
   IF brwname = "BRW_HLEV" THEN valbrw = 2. 
   /*GÅR TILL HEMSIDA*/   
   IF valbrw = 1 THEN DO:   
      RUN selectfoc_UI.      
      IF AVAILABLE mspec_mtrlextra THEN DO:
         valenr = mspec_mtrlextra.ENR.
         FIND FIRST levtemp WHERE levtemp.LEVKOD = mspec_mtrlextra.LEVKOD
         NO-LOCK NO-ERROR.      
      END.
      ELSE RETURN.
   END.
   ELSE IF valbrw = 2 THEN DO:
      RUN selectfoc2_UI.      
      IF AVAILABLE mtrltemp THEN DO:
         valenr = mtrltemp.ENR.
         FIND FIRST levtemp WHERE levtemp.LEVKOD = mtrltemp.LEVKOD
         NO-LOCK NO-ERROR.      
      END.
      ELSE RETURN.
   END.
   IF status-ok THEN DO:
      levnamnvar = levtemp.LEVNAMN.
      {LEVLANK.I}
   END.
END PROCEDURE.

PROCEDURE avmarkhlev_UI :
   status-ok = BRW_HLEV:DESELECT-ROWS() NO-ERROR.
            
END PROCEDURE.

PROCEDURE togenr7_UI :
   IF TOG_ENR7:CHECKED = ? THEN TOG_ENR7:CHECKED = FALSE.   
   IF TOG_ENR7:CHECKED = TRUE THEN DO:       
      ASSIGN
      FILL-IN-ENR2:FORMAT = "X(7)".
      FILL-IN-ENR2:AUTO-RETURN = TRUE.            
   END.   
   ELSE DO:
      ASSIGN
      FILL-IN-ENR2:FORMAT = "X(11)".  
       FILL-IN-ENR2:AUTO-RETURN = FALSE.    
   END.      
END PROCEDURE.

PROCEDURE visasats2_UI :    
   {OMSTARTAVGURUH.I}
   satsmtrl = TRUE.   
   RUN selectfoc_UI .
   IF NOT AVAILABLE mspec_mtrlextra THEN RETURN.   
   FIND FIRST mtrltemp WHERE mtrltemp.ENR = mspec_mtrlextra.ENR AND mtrltemp.LEVKOD = mspec_mtrlextra.LEVKOD NO-LOCK NO-ERROR.
   IF NOT AVAILABLE mtrltemp THEN DO:
      RUN hmtskap_UI IN mtrlbapph (INPUT  mspec_mtrlextra.ENR,INPUT mspec_mtrlextra.LEVKOD,OUTPUT TABLE emtrltemp). 
      FIND FIRST emtrltemp NO-LOCK NO-ERROR.
      IF NOT AVAILABLE emtrltemp THEN DO:
         MESSAGE "Visningen gick ej att genomföra." VIEW-AS ALERT-BOX.
         satsmtrl = FALSE.
         RETURN.
      END.
      CREATE mtrltemp.
      BUFFER-COPY emtrltemp TO mtrltemp.      
      mtrltemp.ENHET = LC(mtrltemp.ENHET).
   END.
   IF AVAILABLE mtrltemp THEN DO:
      RUN SATSINNEU.W (INPUT ROWID(mtrltemp)).
   END.
   FIND FIRST emtrltemp NO-LOCK NO-ERROR.
   IF AVAILABLE emtrltemp THEN DO:
      FIND FIRST mtrltemp WHERE mtrltemp.ENR = emtrltemp.ENR AND mtrltemp.LEVKOD = emtrltemp.LEVKOD NO-LOCK NO-ERROR.
      IF AVAILABLE mtrltemp THEN DO:
         DELETE mtrltemp.
      END.
      EMPTY TEMP-TABLE emtrltemp NO-ERROR. 
   END.
   satsmtrl = FALSE.
   {musarrow.i}   
            
END PROCEDURE.

PROCEDURE visasats_UI :    
   {OMSTARTAVGURUH.I}
   satsmtrl = TRUE.   
   RUN selectfoc2_UI . 
   IF NOT AVAILABLE mtrltemp THEN RETURN.   
   RUN SATSINNEU.W (INPUT ROWID(mtrltemp)).
   satsmtrl = FALSE.
   {musarrow.i}               
END PROCEDURE.


PROCEDURE initsok_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/           
   DEFINE INPUT  PARAMETER vad AS INTEGER    NO-UNDO.
   DEFINE INPUT PARAMETER sokpa AS CHARACTER NO-UNDO.
   DEFINE VARIABLE orgfraga AS CHARACTER NO-UNDO.
   IF TOG_LEVMTRL:CHECKED = TRUE THEN DO:
      EMPTY TEMP-TABLE emtrltemp NO-ERROR. 
      tth = TEMP-TABLE emtrltemp:HANDLE.      
      RUN tomaTT_UI IN brwproc[1].
      RUN sokFelerahmt_UI IN  brwproc[1] (INPUT TRUE). 
      Guru.Konstanter:CreateCustomQuery(Guru.GlobalaVariabler:ttBuffHandleValdaDyn,"").
      Guru.GlobalaVariabler:CustomQueryDyn:GET-FIRST().
      DO WHILE Guru.GlobalaVariabler:CustomQueryDyn:QUERY-OFF-END = FALSE:
         IF vad = 1 THEN DO:
            orgfraga = " WHERE KALKNR = " + STRING(0) + " AND LEVKOD = '" + Guru.GlobalaVariabler:ttBuffHandleValdaDyn:BUFFER-FIELD("LEVKOD"):BUFFER-VALUE + "' USE-INDEX LEV ".
            EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
            CREATE valsoktemp.
            ASSIGN 
            valsoktemp.SOKCHAR[1] = "MTRL"     /*Skarp tabell*/
            valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
            valsoktemp.SOKCHAR[3] = "BENAMNING" /*sökfält*/
            valsoktemp.SOKCHAR[4] = "MTRLROW"  /*temptabells faltnamn för rowid*/
            valsoktemp.SOKCHAR[5] = sokpa.      /*sök på*/       
            RUN sokhmt_UI IN  brwproc[1] (INPUT TABLE valsoktemp).
            FOR EACH emtrltemp WHERE NO-LOCK:
               CREATE mtrltemp.
               BUFFER-COPY emtrltemp TO mtrltemp.
               DELETE emtrltemp.
            END.
         END.     
         IF vad = 2 THEN DO:
            orgfraga = " WHERE KALKNR = " + STRING(0) + " AND LEVKOD = '" +  Guru.GlobalaVariabler:ttBuffHandleValdaDyn:BUFFER-FIELD("LEVKOD"):BUFFER-VALUE + "' USE-INDEX LEV".
            EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
            CREATE valsoktemp.
            ASSIGN 
            valsoktemp.SOKCHAR[1] = "MTRL"     /*Skarp tabell*/
            valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
            valsoktemp.SOKCHAR[3] = "ENR" /*sökfält*/
            valsoktemp.SOKCHAR[4] = "MTRLROW"  /*temptabells faltnamn för rowid*/
            valsoktemp.SOKCHAR[5] = sokpa.      /*sök på*/              
            RUN sokhmt_UI IN  brwproc[1] (INPUT TABLE valsoktemp).
            FOR EACH emtrltemp WHERE NO-LOCK:
               CREATE mtrltemp.
               BUFFER-COPY emtrltemp TO mtrltemp.
               DELETE emtrltemp.
            END.
         END.        
         Guru.GlobalaVariabler:CustomQueryDyn:GET-NEXT().
      END.
      RUN sokFelerahmt_UI IN  brwproc[1] (INPUT FALSE).
      RUN setcolsortvar_UI IN brwproc[1] (INPUT " WHERE KALKNR = 0 USE-INDEX ENR ").
      RUN setorgtitle_UI IN brwproc[1] (INPUT "Uraval av leverantörer").
      RETURN.
   END.       
   IF vad = 1 THEN DO:
      orgfraga = " WHERE KALKNR = " + STRING(0) + " AND LEVKOD = '" + STRING(vald_lev) + "' USE-INDEX LEV ".
      IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE KALKNR = " + STRING(0) + " USE-INDEX KALKNR".
      tth = TEMP-TABLE mtrltemp:HANDLE.
      EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
      CREATE valsoktemp.
      ASSIGN 
      valsoktemp.SOKCHAR[1] = "MTRL"     /*Skarp tabell*/
      valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
      valsoktemp.SOKCHAR[3] = "BENAMNING" /*sökfält*/
      valsoktemp.SOKCHAR[4] = "MTRLROW"  /*temptabells faltnamn för rowid*/
      valsoktemp.SOKCHAR[5] = sokpa.      /*sök på*/       
      RUN sokhmt_UI IN  brwproc[1] (INPUT TABLE valsoktemp).  
   END.
   IF vad = 2 THEN DO:
     orgfraga = " WHERE KALKNR = " + STRING(0) + " AND LEVKOD = '" + STRING(vald_lev) + "' USE-INDEX LEV".
     IF CMB_LEV:SCREEN-VALUE = "Alla leverantörer" THEN orgfraga = " WHERE KALKNR = " + STRING(0) + " USE-INDEX KALKNR ".
     tth = TEMP-TABLE mtrltemp:HANDLE.
     EMPTY TEMP-TABLE valsoktemp NO-ERROR. 
     CREATE valsoktemp.
     ASSIGN 
     valsoktemp.SOKCHAR[1] = "MTRL"     /*Skarp tabell*/
     valsoktemp.SOKCHAR[2] = orgfraga   /*Öppningsquery*/
     valsoktemp.SOKCHAR[3] = "ENR" /*sökfält*/
     valsoktemp.SOKCHAR[4] = "MTRLROW"  /*temptabells faltnamn för rowid*/
     valsoktemp.SOKCHAR[5] = sokpa.      /*sök på*/       
     RUN sokhmt_UI IN  brwproc[1] (INPUT TABLE valsoktemp).  
  END.  
END PROCEDURE.

PROCEDURE levinlast_UI :
   DEFINE INPUT PARAMETER lekod AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER levinlast AS CHARACTER NO-UNDO.   
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "INLKAT"                   
   inextradatatemp.HUVUDCH = lekod.                                              
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:
      IF extradatatemp.SOKDATE[1] NE ? THEN levinlast = " Inläst " + STRING(extradatatemp.SOKDATE[1]).
      IF extradatatemp.SOKDATE[2] NE ? AND extradatatemp.SOKDATE[3] NE ?  THEN DO:      
         RUN tooltip_UI IN brwproc[1] (INPUT "Katalogen gäller från: " + STRING(extradatatemp.SOKDATE[2]) + " till: " + STRING(extradatatemp.SOKDATE[3])).          
      END.
      ELSE RUN tooltip_UI IN brwproc[1] (INPUT "").             
   END.   
   ELSE RUN tooltip_UI IN brwproc[1] (INPUT "").             
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
END PROCEDURE.

PROCEDURE over_UI :   
   FIND FIRST mspec_mtrlextra WHERE mspec_mtrlextra.ENR = mtrltemp.ENR AND mspec_mtrlextra.LEVKOD = mtrltemp.LEVKOD 
   NO-LOCK NO-ERROR. 
   IF AVAILABLE mspec_mtrlextra THEN DO:
      mspec_mtrlextra.MARK = TRUE.
   END.      
   ELSE DO:
      CREATE mspec_mtrlextra. 
      ASSIGN
      mspec_mtrlextra.KUND = mtrltemp.KUND
      mspec_mtrlextra.ENR = mtrltemp.ENR
      mspec_mtrlextra.BENAMNING = mtrltemp.BENAMNING
      mspec_mtrlextra.ENHET = LC(mtrltemp.ENHET)
      mspec_mtrlextra.BERKVANT = antalvar
      mspec_mtrlextra.NPRIS = mtrltemp.NPRIS 
      mspec_mtrlextra.BPRIS = mtrltemp.BPRIS
      mspec_mtrlextra.LEVKOD = mtrltemp.LEVKOD
      mspec_mtrlextra.LEVNAMN = mtrltemp.LEVNAMN
      mspec_mtrlextra.MARK = TRUE
      spec_rowid = ROWID(mspec_mtrlextra).
      IF Guru.Konstanter:varforetypval[29] = 1  THEN DO:                 
         /*nettopris beredning inköp*/
         FIND FIRST mkmtrltemp WHERE mkmtrltemp.LEVKOD = mtrltemp.LEVKOD AND mkmtrltemp.ENR = mtrltemp.ENR AND mkmtrltemp.KALKNR = 0
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE mkmtrltemp THEN DO:                        
            CREATE mkmtrltemp.
            BUFFER-COPY mtrltemp TO mkmtrltemp.                  
         END.
      END.
   END. 
   antal_raknare = antal_raknare + 1.                     
END PROCEDURE.

PROCEDURE over4_UI :
   FIND FIRST mspec_mtrlextra WHERE mspec_mtrlextra.ENR = emtrltemp.ENR AND mspec_mtrlextra.LEVKOD = emtrltemp.LEVKOD 
   NO-LOCK NO-ERROR. 
   IF AVAILABLE mspec_mtrlextra THEN DO:
      ASSIGN
      spec_rowid = ROWID(mspec_mtrlextra)
      mspec_mtrlextra.MARK = TRUE.
      /*inlagt 20121127 lena om två artiklar är översatta till samma artikel*/
      mspec_mtrlextra.BERKVANT = mspec_mtrlextra.BERKVANT + antalvar.     
   END.      
   ELSE DO:
      CREATE mspec_mtrlextra. 
      ASSIGN
      mspec_mtrlextra.ENR = emtrltemp.ENR
      mspec_mtrlextra.BENAMNING = emtrltemp.BENAMNING
      mspec_mtrlextra.ENHET = LC(emtrltemp.ENHET)
      mspec_mtrlextra.BERKVANT = antalvar
      mspec_mtrlextra.NPRIS = emtrltemp.NPRIS 
      mspec_mtrlextra.BPRIS = emtrltemp.BPRIS
      mspec_mtrlextra.LEVKOD = emtrltemp.LEVKOD
      mspec_mtrlextra.LEVNAMN = emtrltemp.LEVNAMN
      mspec_mtrlextra.MARK = TRUE
      spec_rowid = ROWID(mspec_mtrlextra).
   END. 
   antal_raknare = antal_raknare + 1.                     
END PROCEDURE.

PROCEDURE rowdispextra_UI :
   DEFINE INPUT PARAMETER TABLE FOR coltemp.
   DEFINE INPUT PARAMETER brwh AS HANDLE NO-UNDO.   
   IF brwh:NAME = "BRW_HLEV" THEN RUN rowdispmtrl_UI IN huvprogh (INPUT 1).    
   IF brwh:NAME = "BRW_MTRL" THEN RUN rowdispmtrl_UI IN huvprogh (INPUT 2).    
   
END PROCEDURE.


PROCEDURE borthand_UI :
   valdmtrlh:EMPTY-TEMP-TABLE() NO-ERROR.    
   IF VALID-HANDLE(valdmtrlh) THEN   DELETE OBJECT valdmtrlh NO-ERROR.
   valdmtrlh = ?.
   {BORTBRWPROC.I}   
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph NO-ERROR.
   IF VALID-HANDLE(mtrlbapph) THEN DELETE PROCEDURE mtrlbapph NO-ERROR.   
   IF VALID-HANDLE(netth) THEN DELETE PROCEDURE netth NO-ERROR.   
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph NO-ERROR.  
   netth = ?.
   edataapph = ?. 
   mtrlbapph = ?.
END PROCEDURE.
