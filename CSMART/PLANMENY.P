/*PLANMENY.P*/
 FUNCTION brwval RETURNS LOGICAL
  ( /* parameter-definitions */ )  FORWARD.     
{ALLDEF.I}
{GLOBVAR2DEL1.I}
{PLANWID.I}
{KALKIN.I}
{REGVAR.I}
{FAKTTYPDEF.I}
{FORETEMP.I}
{JURPERST.I}
{PRIOTEMP.I}
&Scoped-define NEW NEW 
&Scoped-define SHARED SHARED
{KALKALLTEMP.I}
&Scoped-define NEW 
&Scoped-define SHARED SHARED
{AVDTEMP.I}                   
{ANSVPLANTEMP.I}
{ARBATE.I}
{AONRDEF.I}
{AVTPLANTEMP.I}
{AUTOMREGTEMP.I}
{PLANNRTEMP.I} /* här finns valplantemp osv */ 
{DIRDEF.I}
{ANSPROJBER.I}
{OMRTEMPW.I}
{SOKDEF.I}

DEFINE SHARED VARIABLE musz AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE vartpro AS CHARACTER FORMAT "X(3)" NO-UNDO.
DEFINE SHARED VARIABLE vart AS CHARACTER FORMAT "X(3)" NO-UNDO.
DEFINE SHARED VARIABLE franar AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE tillar AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE period AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE omrbildvar AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE aonrrec AS RECID NO-UNDO.

DEFINE VARIABLE plannrvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE artalvar AS INTEGER NO-UNDO.
DEFINE VARIABLE aonrvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE kalkrec AS RECID NO-UNDO.
DEFINE VARIABLE skaplanrec AS RECID NO-UNDO.

DEFINE VARIABLE vplannr AS CHARACTER NO-UNDO.
DEFINE VARIABLE saonrrec AS RECID NO-UNDO.
DEFINE VARIABLE plannrrec AS RECID NO-UNDO.
DEFINE VARIABLE plannrrec2 AS RECID NO-UNDO.
DEFINE VARIABLE valdarec AS RECID NO-UNDO.
DEFINE VARIABLE uppar AS INTEGER NO-UNDO. 
DEFINE VARIABLE medvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE status-ok AS LOGICAL NO-UNDO.
DEFINE VARIABLE antal_valda AS INTEGER NO-UNDO. 
DEFINE VARIABLE antal_raknare AS INTEGER NO-UNDO. 
DEFINE VARIABLE slutar AS INTEGER NO-UNDO.
DEFINE VARIABLE sparar1 AS INTEGER NO-UNDO.
DEFINE VARIABLE sparar2 AS INTEGER NO-UNDO.
DEFINE VARIABLE planyear AS INTEGER NO-UNDO.
DEFINE VARIABLE norep AS LOGICAL NO-UNDO.
DEFINE VARIABLE valnr AS CHARACTER NO-UNDO. 
DEFINE VARIABLE kalknrvar AS INTEGER NO-UNDO.
DEFINE VARIABLE kalktypvar AS INTEGER NO-UNDO.
DEFINE VARIABLE togfasta AS LOGICAL NO-UNDO.
DEFINE VARIABLE varfinns AS LOGICAL NO-UNDO.
DEFINE VARIABLE vilkor AS CHARACTER NO-UNDO.
DEFINE VARIABLE leftbrwakt AS LOGICAL NO-UNDO.
DEFINE VARIABLE startartal AS INTEGER NO-UNDO.
DEFINE VARIABLE slutartal AS INTEGER NO-UNDO.
DEFINE VARIABLE planapph AS HANDLE NO-UNDO.
DEFINE VARIABLE labelvar1 AS CHARACTER NO-UNDO.
DEFINE VARIABLE labelvar2 AS CHARACTER NO-UNDO.
DEFINE VARIABLE labelvar3 AS CHARACTER NO-UNDO.
DEFINE VARIABLE labelvar4 AS CHARACTER NO-UNDO.
DEFINE VARIABLE persproch AS HANDLE NO-UNDO.
DEFINE VARIABLE nyttaoapph2 AS HANDLE NO-UNDO.                      /*NYTTAOAPP.P*/
DEFINE SHARED TEMP-TABLE plantemp    
   FIELD PLANNR AS CHARACTER 
   FIELD ARTAL AS INTEGER 
   FIELD OMRADE AS CHARACTER
   FIELD AONR AS CHARACTER
   FIELD DELNR AS INTEGER
   FIELD PLANNRTABREC AS RECID
   INDEX PLANNR IS PRIMARY PLANNR ARTAL ASCENDING.



&Scoped-define NEW 
&Scoped-define SHARED SHARED 
{BESTKUNDALLT.I}

DEFINE BUFFER planbuff FOR plannrtemp.
DEFINE VARIABLE plansok AS CHARACTER FORMAT "X(10)" NO-UNDO.
DEFINE VARIABLE ortssok AS CHARACTER NO-UNDO.
DEFINE VARIABLE svar AS LOGICAL NO-UNDO.


framesizeh = framesizeextrah.
DEFINE VARIABLE valplanh AS HANDLE NO-UNDO.
valplanh = TEMP-TABLE valplantemp:DEFAULT-BUFFER-HANDLE.
{HOPPSEK2W.I}

ON 'CHOOSE':U OF BTN_AVB PERSISTENT RUN avb_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF BRW_VPLAN PERSISTENT RUN mdbrwvplan_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF BRW_VPLAN PERSISTENT RUN vcbrwvplan_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_BORT PERSISTENT RUN bort_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_FVE-3 PERSISTENT RUN btnfvr3_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_FVE-4 PERSISTENT RUN btnfvr4_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_HAMT-6 PERSISTENT RUN btnhmt_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_NVE-3 PERSISTENT RUN btnnvr3_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_NVE-4 PERSISTENT RUN btnnvr4_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_NY PERSISTENT RUN ny_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF CMB_ARTAL PERSISTENT RUN vccmbartal_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF CMB_FRAN PERSISTENT RUN vccmbfran_UI IN THIS-PROCEDURE.
ON 'LEAVE':U OF CMB_FRAN PERSISTENT RUN lvcmbfran_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF CMB_OMR PERSISTENT RUN vccmbomr_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF CMB_TILL PERSISTENT RUN vccmbtill_UI IN THIS-PROCEDURE.
ON 'LEAVE':U OF CMB_TILL PERSISTENT RUN lvcmbtill_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_AVSAONR-2  PERSISTENT RUN avsluta_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_BUD  PERSISTENT RUN fbtnbud_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_BUNDER  PERSISTENT RUN fbtnbunder_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_KALK-4 PERSISTENT RUN fbtnkalk_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_KALKNATREG PERSISTENT RUN visnatkalk_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_RAPP-2 PERSISTENT RUN fbtnrapp_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_UNDER-2 PERSISTENT RUN fbtnunder_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_UPP-6 PERSISTENT RUN fbtnupp_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_VISAO-3 PERSISTENT RUN fbtnvisao_UI IN THIS-PROCEDURE.
ON 'LEAVE':U OF FILL-IN-AVSLUTD PERSISTENT RUN lvavslut_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK':U OF FILL-IN-AVSTARTD PERSISTENT RUN mdavslut_UI IN THIS-PROCEDURE.
ON 'LEAVE':U OF FILL-IN-AVSLUTD PERSISTENT RUN lvavstart_UI IN THIS-PROCEDURE.
ON 'MOUSE-MENU-CLICK':U OF FILL-IN-AVSTARTD PERSISTENT RUN mdavstart_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN_ARTAL PERSISTENT RUN akartal_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN_EPLANNR PERSISTENT RUN akeplan_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN_EPLANNR PERSISTENT RUN mdeplan_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF RAD_PERIOD PERSISTENT RUN vcradperiod_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF TOG_AVSLUTADE  PERSISTENT RUN vctogavs_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_AOF PERSISTENT RUN sparaaofavoriter_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_HAOF PERSISTENT RUN hmtfavoriter_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_PTIDPLAN PERSISTENT RUN btntidplan_UI IN THIS-PROCEDURE.

PROCEDURE btntidplan_UI :
   {AVBGOM2.I}
   RUN valdplan_UI.
   RUN TIDSPLAN.W (INPUT "PLAN").   
   {AVBFRAM2.I}      
END PROCEDURE.


PROCEDURE valdplan_UI :

END PROCEDURE.


PROCEDURE autofavo_UI :
   FIND FIRST valplantemp NO-LOCK NO-ERROR.
   IF AVAILABLE valplantemp THEN DO:
      RUN sparaaofavoriter_UI.
   END.
END PROCEDURE.
PROCEDURE hmtfavoriter_UI :
   
   DEFINE VARIABLE ttbuffh AS HANDLE NO-UNDO.
   tthandle = TEMP-TABLE valplantemp:HANDLE.
   ttbuffh = tthandle:DEFAULT-BUFFER-HANDLE.
   RUN ttcopy_UI IN huvprogh (INPUT TABLE-HANDLE tthandle).
   ttbuffh:EMPTY-TEMP-TABLE() NO-ERROR.
   FIND FIRST sparaladdatemp NO-ERROR.
   IF NOT AVAILABLE sparaladdatemp THEN CREATE sparaladdatemp.
   
   ASSIGN
   sparaladdatemp.GLOBANV = Guru.Konstanter:globanv /*Användare, i detta fall ELPAO*/
   sparaladdatemp.BENAMNING = "PLAN" /*Benämnings sufix, i detta fall ELPAO$STOR*/
   sparaladdatemp.TABVAL = "PLANNRTAB" /*Tabellnamn*/
   sparaladdatemp.FALTVALAO = "PLANNR" /*CHARACTER field*/
   sparaladdatemp.FALTVALDEL = "ARTAL" /*Integer field*/
   sparaladdatemp.FALTVALDATE = "".   /*DATE field*/
   
   EMPTY TEMP-TABLE valplantemp  NO-ERROR.
   
   RUN laddabrw_UI IN brwproc[{&RIGHT-BROWSE}]
      (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp).
   RUN allaplan_UI (INPUT 2).   
   RUN ttjmf_UI IN huvprogh (INPUT-OUTPUT ttbuffh).
   RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ""). 
   RUN allaplan_UI (INPUT 2).
END PROCEDURE.
{OMSTARTAVGURUH.I}
RUN main_UI.
{musarrow.i}

PROCEDURE vctogavs_UI :
   {OMSTARTAVGURUH.I}                
   ASSIGN 
   FILL-IN-AVSTARTD:SCREEN-VALUE = STRING(uppvaltemp.AVSLUTSTART)
   FILL-IN-AVSLUTD:SCREEN-VALUE = STRING(uppvaltemp.AVSLUTSLUT).
   RUN goma_UI.
   {musarrow.i}               
END PROCEDURE.
PROCEDURE goma_UI :
  IF TOG_AVSLUTADE:CHECKED = TRUE THEN DO:
      ASSIGN
      BTN_FVE-3:HIDDEN = FALSE 
      BTN_FVE-4:HIDDEN = FALSE 
      BTN_NVE-3:HIDDEN = FALSE 
      BTN_NVE-4:HIDDEN = FALSE
      FILL-IN-MELL:HIDDEN = TRUE  
      FILL-IN-OCH:HIDDEN = TRUE 
      FILL-IN-AVSLUTD:HIDDEN = FALSE 
      FILL-IN-AVSTARTD:HIDDEN = FALSE.
   END.
   ELSE DO:
      ASSIGN
      BTN_FVE-3:HIDDEN = TRUE
      BTN_FVE-4:HIDDEN = TRUE 
      BTN_NVE-3:HIDDEN = TRUE 
      BTN_NVE-4:HIDDEN = TRUE 
      FILL-IN-MELL:HIDDEN = TRUE 
      FILL-IN-OCH:HIDDEN = TRUE 
      FILL-IN-AVSLUTD:HIDDEN = TRUE 
      FILL-IN-AVSTARTD:HIDDEN = TRUE.
   END.  
END PROCEDURE.


PROCEDURE aohmt_UI :
   DEFINE OUTPUT PARAMETER TABLE FOR evaldaao.
   RUN vaohmt_UI IN planapph (INPUT TABLE valplantemp,OUTPUT TABLE evaldaao).
END PROCEDURE.

PROCEDURE vcradperiod_UI :
   period = INTEGER(RAD_PERIOD:SCREEN-VALUE).
   IF RAD_PERIOD:SCREEN-VALUE = STRING(1) THEN DO:  /*Visning per år*/
      ASSIGN 
      uppvaltemp.VISPERAR = FALSE.     
      APPLY "VALUE-CHANGED" TO CMB_ARTAL.
   END.
   ELSE DO:   /*Visning per period*/ 
      ASSIGN
      uppvaltemp.VISPERAR = TRUE 
      franar = INTEGER(CMB_FRAN:SCREEN-VALUE)
      tillar = INTEGER(CMB_TILL:SCREEN-VALUE).   
      APPLY "VALUE-CHANGED" TO CMB_FRAN.
   END.   
   RUN hide_UI.
END PROCEDURE.
PROCEDURE mdeplan_UI :
   {OMSTARTAVGURUH.I}
   IF FILL-IN_EPLANNR:SCREEN-VALUE = "" THEN DO:
      MESSAGE "Sökbegreppet kan inte vara blankt." VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.
   IF FILL-IN_ARTAL:SCREEN-VALUE = ? OR FILL-IN_ARTAL:SCREEN-VALUE = "" OR FILL-IN_ARTAL:SCREEN-VALUE =  "0" THEN DO:
      MESSAGE "Årtal kan inte vara blankt." VIEW-AS ALERT-BOX.
      RETURN NO-APPLY.
   END.
   FIND FIRST valplantemp WHERE valplantemp.PLANNR = FILL-IN_EPLANNR:SCREEN-VALUE AND 
   valplantemp.ARTAL = INTEGER(FILL-IN_ARTAL:SCREEN-VALUE) NO-LOCK NO-ERROR. 
   IF NOT AVAILABLE valplantemp THEN DO:
      
      IF Guru.Konstanter:appcon THEN DO:                           
         RUN PLANHMTEN.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
         (INPUT FILL-IN_EPLANNR:SCREEN-VALUE,INPUT INTEGER(FILL-IN_ARTAL:SCREEN-VALUE),OUTPUT varfinns,OUTPUT TABLE valplantemp APPEND).
      END.
      ELSE DO:
         RUN PLANHMTEN.P  
         (INPUT FILL-IN_EPLANNR:SCREEN-VALUE,INPUT INTEGER(FILL-IN_ARTAL:SCREEN-VALUE),OUTPUT varfinns,OUTPUT TABLE valplantemp APPEND).      
      END.
      IF varfinns = TRUE THEN DO:
         RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
         FIND FIRST valplantemp WHERE valplantemp.PLANNR = FILL-IN_EPLANNR:SCREEN-VALUE AND 
         valplantemp.ARTAL = INTEGER(FILL-IN_ARTAL:SCREEN-VALUE) NO-LOCK NO-ERROR.
         RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valplantemp)).
         RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
      END.
   END.
   {musarrow.i}
END PROCEDURE.
PROCEDURE akeplan_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN_EPLANNR.
   END.
END PROCEDURE.
PROCEDURE akartal_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN_EPLANNR.
   END.
END PROCEDURE.
PROCEDURE mdavstart_UI :
   ASSIGN
   Guru.GlobalaVariabler:regdatum = DATE(FILL-IN-AVSTARTD:SCREEN-VALUE).
   RUN AlmanBtn.w.
   FILL-IN-AVSTARTD:SCREEN-VALUE = STRING(Guru.GlobalaVariabler:regdatum).   
END PROCEDURE.
PROCEDURE lvavstart_UI :
   IF DATE(FILL-IN-AVSLUTD:SCREEN-VALUE) < DATE(FILL-IN-AVSTARTD:SCREEN-VALUE) THEN DO:
      FILL-IN-AVSLUTD:SCREEN-VALUE = FILL-IN-AVSTARTD:SCREEN-VALUE.     
   END. 
END PROCEDURE.


PROCEDURE mdavslut_UI :
   ASSIGN
   Guru.GlobalaVariabler:regdatum = DATE(FILL-IN-AVSLUTD:SCREEN-VALUE).
   RUN AlmanBtn.w.
   FILL-IN-AVSLUTD:SCREEN-VALUE = STRING(Guru.GlobalaVariabler:regdatum).   
END PROCEDURE.
PROCEDURE lvavslut_UI :
   IF DATE(FILL-IN-AVSLUTD:SCREEN-VALUE) < DATE(FILL-IN-AVSTARTD:SCREEN-VALUE) THEN DO:
      FILL-IN-AVSTARTD:SCREEN-VALUE = FILL-IN-AVSLUTD:SCREEN-VALUE.     
   END. 
END PROCEDURE.
PROCEDURE fbtnvisao_UI :
   {OMSTARTAVGURUH.I}
   IF brwval() = TRUE THEN RETURN NO-APPLY.
   antal_valda = BRW_VPLAN:NUM-SELECTED-ROWS NO-ERROR.
   IF antal_valda = 0 THEN RETURN.   
   antal_raknare = 1.
   DO TRANSACTION:
      DO WHILE antal_raknare LE antal_valda:
         RUN fselectfoc_UI.        
         plannrrec = RECID(valplantemp).
         {SOKSTART.I}                              
         ASSIGN                                    
         soktemp.SOKVAL = 45                       
         soktemp.SOKCHAR[1] = valplantemp.PLANNR   
         soktemp.SOKINT[1] = valplantemp.ARTAL.    
         {SOKANROP.I}                              
         CREATE plantemp.                          
         ASSIGN                                    
         plantemp.PLANNR = valplantemp.PLANNR      
         plantemp.ARTAL = valplantemp.ARTAL        
         plantemp.OMRADE = valplantemp.OMRADE      
         plantemp.AONR = valplantemp.AONR          
         plantemp.DELNR = valplantemp.DELNR        
         plantemp.PLANNRTABREC = soktemp.SOKINT[2].        
         antal_raknare = antal_raknare + 1.
      END.
   END.        
   {AVBGOM2.I}      
   RUN VISAPLAN.W (INPUT TABLE plantemp).
   {AVBFRAM2.I}
   musz = FALSE.
   {musarrow.i} 
END PROCEDURE.
PROCEDURE fbtnupp_UI :
   IF brwval() = TRUE THEN RETURN NO-APPLY.
   {OMSTARTAVGURUH.I}
   IF NOT AVAILABLE valplantemp THEN DO:      
      MESSAGE "Inget är markerat" VIEW-AS ALERT-BOX.          
      RETURN NO-APPLY.                
   END.
   RUN planhuvud_UI.
   {musarrow.i}
END PROCEDURE.
PROCEDURE planhuvud_UI :
   IF Guru.Konstanter:plansekvar[2] = FALSE THEN DO:
      MESSAGE "Du är inte behörig att göra ändringar på " LC(Guru.Konstanter:gplk) "."
      VIEW-AS ALERT-BOX.
      RETURN.
   END.   
   IF NOT AVAILABLE valplantemp THEN RETURN.
   ASSIGN
   plannrvar = valplantemp.PLANNR
   artalvar = valplantemp.ARTAL
   valdarec = RECID(valplantemp). 
   {AVBGOM2.I}
   RUN uttstart_UI IN huvprogh (INPUT 1).
   RUN NYTTPLANNR.W (INPUT FALSE,INPUT FALSE,INPUT 3,INPUT-OUTPUT plannrvar,INPUT-OUTPUT artalvar).
   RUN uttstart_UI IN huvprogh (INPUT 2).   
   {AVBFRAM2.I}
   musz = FALSE.
   RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
   FIND FIRST valplantemp WHERE valplantemp.PLANNR = plannrvar AND 
   valplantemp.ARTAL = artalvar NO-LOCK NO-ERROR. 
   IF AVAILABLE valplantemp THEN DO:
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valplantemp)).
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
      FIND FIRST plannrtemp WHERE plannrtemp.PLANNR = plannrvar AND 
      plannrtemp.ARTAL = artalvar NO-LOCK NO-ERROR. 
      IF AVAILABLE plannrtemp THEN DO:
         BUFFER-COPY valplantemp TO plannrtemp.  
         RUN openbdyn_UI IN brwproc[{&LEFT-BROWSE}] (INPUT "").
      END.
   END.
END PROCEDURE.

PROCEDURE fbtnunder_UI :
   IF brwval() = TRUE THEN RETURN NO-APPLY.
   {OMSTARTAVGURUH.I}
   RUN under_UI.   
   {musarrow.i}  
END PROCEDURE.
PROCEDURE under_UI :
   IF NOT AVAILABLE valplantemp THEN RETURN.
   musz = FALSE.
   plannrrec = RECID(valplantemp).  
   IF valplantemp.UPP = FALSE THEN DO:
      {SOKSTART.I}
      ASSIGN
      soktemp.SOKVAL = 54
      soktemp.SOKCHAR[1] = valplantemp.PLANNR
      soktemp.SOKINT[1] = valplantemp.ARTAL.
      {SOKANROP.I}
      IF soktemp.SOKLOG[1] = TRUE THEN DO:
         MESSAGE "Årsuppdelning ej möjlig då det redan finns ett " + LC(Guru.Konstanter:gplk) + ":" +
         valplantemp.PLANNR + " med årtal:" + STRING(valplantemp.ARTAL + 1) + "."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         RETURN.
      END.
   END.  
   {SOKSTART.I}
   ASSIGN
   soktemp.SOKVAL = 45
   soktemp.SOKCHAR[1] = valplantemp.PLANNR
   soktemp.SOKINT[1] = valplantemp.ARTAL.
   {SOKANROP.I}
   ASSIGN
   aonrrec = soktemp.SOKINT[2]
   plannrvar = valplantemp.PLANNR  
   artalvar = valplantemp.ARTAL.
   {AVBGOM2.I}
   RUN ARSUPPU.W (INPUT plannrvar,INPUT artalvar).
   {AVBFRAM2.I}   
   IF musz = TRUE THEN DO:
      musz = FALSE.
   END.
   FIND FIRST valplantemp WHERE valplantemp.PLANNR = plannrvar AND 
   valplantemp.ARTAL = artalvar NO-LOCK NO-ERROR.
   IF AVAILABLE valplantemp THEN DO:      
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] ("").
      FIND FIRST valplantemp WHERE valplantemp.PLANNR = plannrvar AND 
      valplantemp.ARTAL = artalvar NO-LOCK NO-ERROR.
      IF AVAILABLE valplantemp THEN DO:
         RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valplantemp)).
         RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
      END.
   END.
   musz = FALSE.  
END PROCEDURE.

PROCEDURE fbtnrapp_UI :
   {OMSTARTAVGURUH.I}
   RUN rapp_UI.
   {musarrow.i} 
END PROCEDURE.
PROCEDURE rapp_UI :
   {AVBGOM2.I}
   RUN PLANRAPP.W.
   {AVBFRAM2.I}  
END PROCEDURE.

PROCEDURE visnatkalk_UI :
   FIND FIRST valplantemp WHERE NO-LOCK NO-ERROR.
   IF NOT AVAILABLE valplantemp THEN DO:
      MESSAGE "Inget " LC(Guru.Konstanter:gplk) "är valt!"
      VIEW-AS ALERT-BOX.
      RETURN.
   END.
   {OMSTARTAVGURUH.I}
   {AMERICANEUROPEAN.I}
   EMPTY TEMP-TABLE valdfasttemp NO-ERROR.
   FOR EACH valplantemp:
      CREATE valdfasttemp.
      BUFFER-COPY valplantemp TO valdfasttemp.
      valdfasttemp.SLUTVNR = 99.      
   END.
   {AVBGOM2.I}
   RUN VISAFKALNAT.W (INPUT TRUE).
   {AVBFRAM2.I}
   EMPTY TEMP-TABLE valdfasttemp NO-ERROR. 
   {EUROPEANAMERICAN.I}
   {musarrow.i}
END PROCEDURE.
PROCEDURE fbtnkalk_UI :
   IF brwval() = TRUE THEN RETURN NO-APPLY.
   {OMSTARTAVGURUH.I}
   RUN kalk_UI.
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnkalk_UI :
   DEFINE VARIABLE kalkaonr AS CHARACTER NO-UNDO.
   DEFINE VARIABLE kalkdelnr AS INTEGER NO-UNDO.
   RUN selectfoc_UI.
   IF AVAILABLE valplantemp THEN DO:
      ASSIGN
      kalkaonr  = valplantemp.PLANNR 
      kalkdelnr = valplantemp.ARTAL
      plannrrec = RECID(valplantemp).
      plannrrec2 = plannrrec.
   END.
   FOR EACH valplantemp:
      IF valplantemp.UPP = TRUE AND valplantemp.UPPNR = FALSE THEN.
      ELSE DO:
         CREATE kalkinmtemp.
         ASSIGN
         kalkinmtemp.PLANNR = valplantemp.PLANNR
         kalkinmtemp.ARTAL = valplantemp.ARTAL
         kalkinmtemp.BENAMNING = valplantemp.ORT
         kalkinmtemp.PLANNRAVDATUM = valplantemp.PLANNRAVDATUM.
         IF kalkaonr = valplantemp.PLANNR AND kalkdelnr = valplantemp.ARTAL THEN kalkinmtemp.REPO = TRUE.
      END.
   END.
   RUN btnkalkstart_UI IN huvprogh (INPUT 1,INPUT kalknrvar, INPUT kalktypvar,INPUT TABLE kalkinmtemp).
   EMPTY TEMP-TABLE kalkinmtemp NO-ERROR. 
END PROCEDURE.
PROCEDURE kalk_UI :
   DEFINE VARIABLE kalkaonr AS CHARACTER NO-UNDO.
   DEFINE VARIABLE kalkdelnr AS INTEGER NO-UNDO.
   IF NOT AVAILABLE valplantemp THEN RETURN.
   DEFINE VARIABLE outanvanv AS CHARACTER NO-UNDO.
   DEFINE VARIABLE outdatornamn AS CHARACTER NO-UNDO.
   ASSIGN      
   kalkaonr  = valplantemp.PLANNR 
   kalkdelnr = valplantemp.ARTAL
   plannrrec = RECID(valplantemp).
   plannrrec2 = plannrrec.
   IF valplantemp.UPP = TRUE THEN DO:
      IF valplantemp.UPPNR = FALSE THEN DO:
         MESSAGE "Det är inte möjligt att kalkylera på detta nummer då det är årsuppdelat. Kalkylera på " LC(Guru.Konstanter:gplk) ":"
         valplantemp.PLANNR " med årtal:" STRING(valplantemp.ARTAL - 1) "."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         RETURN.         
      END.
   END.
   vartpro = "".
   EMPTY TEMP-TABLE kalkinmtemp NO-ERROR.    
   
   FOR EACH valplantemp:
      CREATE kalkinmtemp.
      ASSIGN
      kalkinmtemp.PLANNR = valplantemp.PLANNR
      kalkinmtemp.ARTAL = valplantemp.ARTAL
      kalkinmtemp.BENAMNING = valplantemp.ORT
      kalkinmtemp.PLANNRAVDATUM = valplantemp.PLANNRAVDATUM.
      IF kalkaonr = valplantemp.PLANNR AND kalkdelnr = valplantemp.ARTAL THEN kalkinmtemp.REPO = TRUE.
   END.
   {AVBGOM2.I}   
   RUN INLOAPI.P (OUTPUT outanvanv, OUTPUT outdatornamn).
   RUN btnkalkstart_UI IN huvprogh (INPUT 3,INPUT kalknrvar, INPUT kalktypvar,INPUT TABLE kalkinmtemp).
   EMPTY TEMP-TABLE kalkinmtemp NO-ERROR. 
   {AVBFRAM2.I}
   IF vartpro NE "" THEN DO:
      APPLY "CLOSE":U TO THIS-PROCEDURE.
      RETURN.
   END.
END PROCEDURE.

PROCEDURE fbtnbunder_UI :
   {OMSTARTAVGURUH.I}
   IF brwval() = TRUE THEN RETURN NO-APPLY.
   musz = FALSE.
   IF NOT AVAILABLE valplantemp THEN DO:
      RETURN NO-APPLY. 
   END.
   ELSE DO:
      ASSIGN 
      plannrvar = valplantemp.PLANNR
      artalvar = valplantemp.ARTAL.
      IF valplantemp.UPP = FALSE THEN DO:
         MESSAGE Guru.Konstanter:gplk + ":" + valplantemp.PLANNR + " är inte årsuppdelat. Borttag ej möjligt."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
      END.
      ELSE DO:
         MESSAGE "Vill du ta bort årsuppdelningen för " + LC(Guru.Konstanter:gplk) + ":" + plannrvar + "?"
         VIEW-AS ALERT-BOX
         QUESTION BUTTONS YES-NO TITLE "Ta bort årsuppdelning?" UPDATE svar.         
         IF svar = TRUE THEN DO:
            RUN appat_UI (INPUT 2,INPUT plannrvar,INPUT valplantemp.ARTAL). 
            RUN openbdyn_UI IN brwproc[{&LEFT-BROWSE}] (INPUT "").
            RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
            FIND FIRST valplantemp WHERE valplantemp.PLANNR = plannrvar AND 
            valplantemp.ARTAL = artalvar NO-LOCK NO-ERROR.
            IF NOT AVAILABLE valplantemp THEN DO:               
               FIND FIRST valplantemp WHERE valplantemp.PLANNR = plannrvar AND 
               valplantemp.ARTAL = artalvar - 1 NO-LOCK NO-ERROR.
            END.
            RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valplantemp)).            
            RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
            {musarrow.i}
         END.   
      END. 
   END. 
END PROCEDURE.
PROCEDURE fbtnbud_UI :
   {OMSTARTAVGURUH.I}
   {AVBGOM2.I}
   RUN BUDGET.W.
   {AVBFRAM2.I}
   musz = FALSE.
   {musarrow.i}
END PROCEDURE.
PROCEDURE avsluta_UI :
   IF brwval() = TRUE THEN RETURN.
   IF NOT AVAILABLE valplantemp THEN RETURN.
   ASSIGN
   plannrvar = valplantemp.PLANNR
   artalvar = valplantemp.ARTAL.
   {OMSTARTAVGURUH.I}
   {AVBGOM2.I}
   RUN PLANAVSLU.W (INPUT plannrvar,INPUT artalvar).
   {AVBFRAM2.I}
   IF vartpro NE "" THEN DO:
      APPLY "CLOSE":U TO THIS-PROCEDURE.
      RETURN.
   END.
   FIND FIRST valplantemp WHERE valplantemp.PLANNR = plannrvar AND 
   valplantemp.ARTAL = artalvar NO-LOCK NO-ERROR. 
   RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valplantemp)).
   RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
   FOR EACH valplantemp:
      FIND FIRST plannrtemp WHERE plannrtemp.PLANNR = valplantemp.PLANNR AND
      plannrtemp.ARTAL = valplantemp.ARTAL NO-LOCK NO-ERROR.
      IF NOT AVAILABLE plannrtemp THEN DO:
         CREATE plannrtemp.
      END.
      BUFFER-COPY valplantemp TO plannrtemp. 
   END.
   {musarrow.i}
END PROCEDURE.

PROCEDURE lvcmbtill_UI :
   franar = INTEGER(CMB_TILL:SCREEN-VALUE).
END PROCEDURE.
PROCEDURE vccmtill_UI :
   tillar = INTEGER(CMB_TILL:SCREEN-VALUE).
   RUN check_UI.
END PROCEDURE.

PROCEDURE vccmbomr_UI :
   FIND FIRST omrtemp WHERE omrtemp.NAMN = CMB_OMR:SCREEN-VALUE 
   USE-INDEX OMRNAMN NO-LOCK NO-ERROR.
   {CMB_PRIO.I} 
END PROCEDURE.
PROCEDURE lvcmbfran_UI :
   franar = INTEGER(CMB_FRAN:SCREEN-VALUE).
END PROCEDURE.
PROCEDURE vccmbfran_UI :
   franar = INTEGER(CMB_FRAN:SCREEN-VALUE).
   RUN check_UI.
END PROCEDURE.
PROCEDURE vccmbartal_UI :
   franar = INTEGER(CMB_ARTAL:SCREEN-VALUE).
END PROCEDURE.
PROCEDURE check_UI :
   IF INTEGER(CMB_FRAN:SCREEN-VALUE) > INTEGER(CMB_TILL:SCREEN-VALUE) THEN DO:     
      MESSAGE "Årtalet 'Från' får inte vara större än årtalet 'Till'. Byt årtal." 
      VIEW-AS ALERT-BOX TITLE "Meddelnade".
      ASSIGN
      CMB_FRAN:SCREEN-VALUE = STRING(sparar1)
      CMB_TILL:SCREEN-VALUE = STRING(sparar2).
      APPLY "ENTRY" TO CMB_FRAN.
      RETURN.
   END.
   ASSIGN
   sparar1 = INTEGER(CMB_FRAN:SCREEN-VALUE)
   sparar2 = INTEGER(CMB_TILL:SCREEN-VALUE).
END PROCEDURE.

PROCEDURE ny_UI :
   {OMSTARTAVGURUH.I}
   ASSIGN
   plannrvar = ""
   artalvar = ?.
   {AVBGOM2.I}
   RUN NYTTPLANNR.W (INPUT TRUE,INPUT FALSE,INPUT 3,INPUT-OUTPUT plannrvar,INPUT-OUTPUT artalvar).
   {AVBFRAM2.I}    
   musz = FALSE.
   RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
   FIND FIRST valplantemp WHERE valplantemp.PLANNR = plannrvar AND 
   valplantemp.ARTAL = artalvar NO-LOCK NO-ERROR.     
   IF AVAILABLE valplantemp THEN DO:
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valplantemp)).
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
      FIND FIRST plannrtemp WHERE plannrtemp.PLANNR = plannrvar AND 
      plannrtemp.ARTAL = artalvar NO-LOCK NO-ERROR.     
      IF NOT AVAILABLE plannrtemp THEN DO:
         CREATE plannrtemp.
      END.
      BUFFER-COPY valplantemp TO plannrtemp.  
      RUN openbdyn_UI IN brwproc[{&LEFT-BROWSE}] (INPUT "").
   END.
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnnvr4_UI :
   ASSIGN   
   FILL-IN-AVSLUTD:SCREEN-VALUE = STRING(DATE(FILL-IN-AVSLUTD:SCREEN-VALU) + 1).      
END PROCEDURE.
PROCEDURE btnnvr3_UI :
   ASSIGN   
   FILL-IN-AVSTARTD:SCREEN-VALUE = STRING(DATE(FILL-IN-AVSTARTD:SCREEN-VALU) + 1).      
END PROCEDURE.
PROCEDURE btnhmt_UI :
   BTN_HAMT-6:LOAD-IMAGE("BILDER\xbtn_hamt_over.gif") NO-ERROR.
   RUN utvald_UI.
   IF uppvaltemp.TILLFALLFAST = 0 THEN DO:
      RETURN NO-APPLY.
   END.
   IF uppvaltemp.PAAV = 0 THEN DO:
      RETURN NO-APPLY.
   END.
   RUN allaplan_UI (INPUT 1).
   BTN_HAMT-6:LOAD-IMAGE("BILDER\xbtn_hamt.gif") NO-ERROR.
   /*Dummy */
   status-ok = BRW_PLAN:SELECT-FOCUSED-ROW() NO-ERROR.
   status-ok = BRW_PLAN:DESELECT-FOCUSED-ROW() NO-ERROR.   
END PROCEDURE.
PROCEDURE utvald_UI :
   FIND FIRST uppvaltemp NO-ERROR.
   IF RAD_PERIOD:SCREEN-VALUE = STRING(1) THEN DO:
      ASSIGN 
      uppvaltemp.VISPERAR = FALSE
      uppvaltemp.STARTDATUM = DATE(01,01,INTEGER(CMB_ARTAL:SCREEN-VALUE)).
   END.
   ELSE DO:
      ASSIGN 
      uppvaltemp.VISPERAR = TRUE
      uppvaltemp.STARTDATUM = DATE(01,01,INTEGER(CMB_FRAN:SCREEN-VALUE))
      uppvaltemp.SLUTDATUM = DATE(01,01,INTEGER(CMB_TILL:SCREEN-VALUE)).
   END.
   ASSIGN
   uppvaltemp.AVSLUTSTART = DATE(FILL-IN-AVSTARTD:SCREEN-VALUE)
   uppvaltemp.AVSLUTSLUT = DATE(FILL-IN-AVSLUTD:SCREEN-VALUE)
   uppvaltemp.OMRADE = CMB_OMR:SCREEN-VALUE
   
   uppvaltemp.ARBANSVARIG = CMB_ANSV:SCREEN-VALUE
   uppvaltemp.PROJEKTOR = ""
   SUBSTRING(uppvaltemp.PROJEKTOR,1,24) = "Alla".
   SUBSTRING(uppvaltemp.PROJEKTOR,25,10) = FILL-IN-K2:SCREEN-VALUE.
   SUBSTRING(uppvaltemp.PROJEKTOR,35,10) = FILL-IN-K1:SCREEN-VALUE.
   SUBSTRING(uppvaltemp.PROJEKTOR,45,10) = FILL-IN-K3:SCREEN-VALUE.
   SUBSTRING(uppvaltemp.PROJEKTOR,55,10) = FILL-IN-K4:SCREEN-VALUE.
   IF Guru.Konstanter:varforetypval[45] = 1 THEN.
   ELSE uppvaltemp.BESTNAMN = CMB_BESORG:SCREEN-VALUE.
   IF TOG_PAGA:CHECKED = TRUE AND TOG_AVSLUTADE:CHECKED = TRUE THEN DO:
      uppvaltemp.PAAV = 3.
   END.       
   ELSE IF TOG_PAGA:CHECKED = FALSE AND TOG_AVSLUTADE:CHECKED = TRUE THEN DO:
      uppvaltemp.PAAV = 2.
   END.
   ELSE IF TOG_PAGA:CHECKED = TRUE AND TOG_AVSLUTADE:CHECKED = FALSE THEN DO:
      uppvaltemp.PAAV = 1.
   END.
   ELSE DO:
      MESSAGE "Välj pågående eller avslutade " + LC(Guru.Konstanter:gplk) + "!" VIEW-AS ALERT-BOX TITLE "Meddelande".
      ASSIGN uppvaltemp.PAAV = 0.
   END.
   IF TOG_TILLF:CHECKED = TRUE AND TOG_FASTA:CHECKED = TRUE THEN DO:
      uppvaltemp.TILLFALLFAST = 3.
   END.
   ELSE IF TOG_TILLF:CHECKED = FALSE AND TOG_FASTA:CHECKED = TRUE THEN DO:
      uppvaltemp.TILLFALLFAST = 2.
   END.
   ELSE IF TOG_TILLF:CHECKED = TRUE AND TOG_FASTA:CHECKED = FALSE THEN DO:
      uppvaltemp.TILLFALLFAST = 1.
   END.
   ELSE DO:
      MESSAGE "Välj fasta eller tillfälliga " + LC(Guru.Konstanter:gplk) + "!" VIEW-AS ALERT-BOX TITLE "Meddelande".
      ASSIGN uppvaltemp.TILLFALLFAST = 0.
   END.
   FIND FIRST omrtemp WHERE omrtemp.NAMN = CMB_OMR:SCREEN-VALUE NO-LOCK NO-ERROR.
   IF AVAILABLE omrtemp THEN uppvaltemp.OMRADE = omrtemp.OMRADE.
   ELSE uppvaltemp.OMRADE = "Alla".
   IF Guru.Konstanter:varforetypval[45] = 1 THEN uppvaltemp.BESTID = "Alla".
   ELSE DO:
      FIND FIRST bestkundallt WHERE bestkundallt.BESTNAMN = CMB_BESORG:SCREEN-VALUE NO-LOCK NO-ERROR.
      IF AVAILABLE bestkundallt THEN uppvaltemp.BESTID = bestkundallt.BESTID.
      ELSE DO:
         IF CMB_BESORG:SCREEN-VALUE = "Samma som ovan" THEN uppvaltemp.BESTID = uppvaltemp.OMRADE.
         ELSE uppvaltemp.BESTID = CMB_BESORG:SCREEN-VALUE. 
      END.
   END.   
   FIND FIRST ansvplantemp WHERE ansvplantemp.NAMN = CMB_ANSV:SCREEN-VALUE NO-ERROR.
   IF AVAILABLE ansvplantemp THEN uppvaltemp.ARBANSVARIG = ansvplantemp.PERSONALKOD.
   ELSE uppvaltemp.ARBANSVARIG = "Alla".

END PROCEDURE.
PROCEDURE btnfvr4_UI :
   ASSIGN   
   FILL-IN-AVSLUTD:SCREEN-VALUE = STRING(DATE(FILL-IN-AVSLUTD:SCREEN-VALU) - 1).      
END PROCEDURE.
PROCEDURE btnfvr3_UI :
   ASSIGN   
   FILL-IN-AVSTARTD:SCREEN-VALUE = STRING(DATE(FILL-IN-AVSTARTD:SCREEN-VALU) - 1).      
END PROCEDURE.
PROCEDURE bort_UI :
   {OMSTARTAVGURUH.I}
   IF brwval() = TRUE THEN RETURN.  
   IF NOT AVAILABLE valplantemp THEN DO:
      RETURN.
   END.
   ELSE DO:
      plannrrec = RECID(valplantemp).
      plannrrec2 = plannrrec.    
      IF Guru.Konstanter:appcon THEN DO:
         RUN BOPLANAPP.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT
         (INPUT valplantemp.PLANNR,INPUT valplantemp.ARTAL, OUTPUT musz).
      END.
      ELSE DO:
         RUN BOPLANAPP.P 
         (INPUT valplantemp.PLANNR,INPUT valplantemp.ARTAL, OUTPUT musz).
      END.
      IF musz = TRUE THEN DO:
         musz = FALSE.
         MESSAGE "Det finns kopplingar. Borttag ej möjligt."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
         RETURN.
      END.
      ELSE IF valplantemp.UPP = TRUE AND valplantemp.UPPNR = FALSE THEN DO:
         MESSAGE "För att ta bort årsuppdelning, klicka på knappen Ta bort uppdel."
         VIEW-AS ALERT-BOX TITLE "meddelande".
         RETURN.
      END.
      ELSE DO:                
         IF valplantemp.UPP = TRUE AND valplantemp.UPPNR = TRUE THEN DO:
            MESSAGE "Vill du ta bort " + LC(Guru.Konstanter:gplk) + ": " +
            valplantemp.PLANNR + " med Årtal: " + STRING(valplantemp.ARTAL) + "? Obs! Årsuppdelning kommer också att tas bort." 
            VIEW-AS ALERT-BOX
            QUESTION BUTTONS YES-NO TITLE "Ta bort?" UPDATE svar.
         END.     
         ELSE DO:
            MESSAGE "Vill du ta bort " + LC(Guru.Konstanter:gplk) + ": " +
            valplantemp.PLANNR + " med Årtal: " + STRING(valplantemp.ARTAL) + "?" 
            VIEW-AS ALERT-BOX
            QUESTION BUTTONS YES-NO TITLE "Ta bort?" UPDATE svar.         
         END.   
         IF svar THEN DO: 
            
            RUN selnextprevrow_UI IN brwproc[{&RIGHT-BROWSE}].
            status-ok = BRW_VPLAN:SELECT-NEXT-ROW() NO-ERROR.  
            IF status-ok = TRUE THEN plannrrec2 = RECID(valplantemp).
            ELSE DO:          
               status-ok = BRW_VPLAN:SELECT-PREV-ROW() NO-ERROR.          
               IF status-ok = TRUE THEN plannrrec2 = RECID(valplantemp).          
               ELSE plannrrec2 = plannrrec.
            END.
            FIND valplantemp WHERE RECID(valplantemp) = plannrrec NO-LOCK NO-ERROR.  
            ASSIGN plannrvar = valplantemp.PLANNR.
            RUN appat_UI (INPUT 1,INPUT plannrvar,INPUT valplantemp.ARTAL).    
            RUN openbdyn_UI IN brwproc[{&LEFT-BROWSE}] (INPUT "").
            RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
            FIND FIRST valplantemp WHERE RECID(valplantemp) = plannrrec EXCLUSIVE-LOCK NO-ERROR.
            IF AVAILABLE valplantemp THEN DO:
               IF plannrrec2 NE plannrrec THEN DO:
                   FIND FIRST valplantemp WHERE RECID(valplantemp) = plannrrec2 EXCLUSIVE-LOCK NO-ERROR.
                   IF AVAILABLE valplantemp THEN DO:
                       RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valplantemp)).
                       RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
                   END.
               END.
               RUN selectfoc_UI.               
            END.
            musz = FALSE.
            {musarrow.i}
         END.
         ELSE DO:
            RETURN.
         END.          
      END.  
   END.
END PROCEDURE.
PROCEDURE appat_UI :
   DEFINE INPUT PARAMETER vart AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER plannrvar AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER artalvar AS INTEGER NO-UNDO.
   IF Guru.Konstanter:appcon THEN DO:
      RUN PLANNRAPP.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT
      (INPUT vart,INPUT plannrvar,INPUT artalvar,
      INPUT TABLE uppvaltemp,OUTPUT TABLE felmeddtemp,
      INPUT-OUTPUT TABLE plannrtemp,INPUT-OUTPUT TABLE valplantemp).
   END.
   ELSE DO:
      RUN PLANNRAPP.P
      (INPUT vart,INPUT plannrvar,INPUT artalvar,
      INPUT TABLE uppvaltemp,OUTPUT TABLE felmeddtemp,
      INPUT-OUTPUT TABLE plannrtemp,INPUT-OUTPUT TABLE valplantemp).
   END.
END PROCEDURE.

PROCEDURE vcbrwvplan_UI :
   FIND FIRST valplantemp WHERE ROWID(valplantemp) = valplanh:ROWID NO-LOCK NO-ERROR.
   ASSIGN                         
   Guru.GlobalaVariabler:plusaonr = valplantemp.AONR  
   Guru.GlobalaVariabler:plusdnr = valplantemp.DELNR.
END PROCEDURE.
PROCEDURE mdbrwvplan_UI :
   APPLY "CHOOSE" TO FBTN_UPP-6.
END PROCEDURE.
PROCEDURE main_UI :
   C-Win:TITLE = Guru.Konstanter:gpll + "hantering" + "-" + "Systemsupport 090/184540    elpool.ume@elpool.se  " + foretemp.ATRHOME.
   {OMSTARTAVGURUH.I}
   {ALLSTARTDYN.I}
   RUN sek_UI.
   EMPTY TEMP-TABLE priotemp NO-ERROR. 
   RUN laddaprio IN nyttaoapph2 ( OUTPUT TABLE priotemp).
   {CMB_PRIO.I} 
   IF Guru.Konstanter:varforetypval[45] = 1 THEN DO:
      CMB_BESORG:HIDDEN = TRUE.
   END.   
   {musarrow.i} 
END PROCEDURE.
PROCEDURE ladda_UI :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
   ASSIGN
   CMB_ARTAL:SCREEN-VALUE = STRING(YEAR(uppvaltemp.STARTDATUM))
   CMB_TILL:SCREEN-VALUE = STRING(YEAR(uppvaltemp.SLUTDATUM))
   CMB_FRAN:SCREEN-VALUE = STRING(YEAR(uppvaltemp.STARTDATUM))   
   CMB_OMR:SCREEN-VALUE = uppvaltemp.OMRNAMN
   CMB_ANSV:SCREEN-VALUE = uppvaltemp.ARBANSVARIG 
   FILL-IN-AVSLUTD:SCREEN-VALUE = STRING(uppvaltemp.AVSLUTSLUT) 
   FILL-IN-AVSTARTD:SCREEN-VALUE = STRING(uppvaltemp.AVSLUTSTART).
   IF Guru.Konstanter:varforetypval[45] = 1 THEN.
   ELSE CMB_BESORG:SCREEN-VALUE = uppvaltemp.BESTNAMN.
   IF uppvaltemp.PAAV = 3 THEN DO:
      ASSIGN
      TOG_PAGA:CHECKED = TRUE     
      TOG_AVSLUTADE:CHECKED = TRUE.
   END.
   ELSE IF uppvaltemp.PAAV = 2 THEN DO:
      ASSIGN
      TOG_PAGA:CHECKED = FALSE     
      TOG_AVSLUTADE:CHECKED = TRUE.
   END.
   ELSE IF uppvaltemp.PAAV = 1 THEN DO:
      ASSIGN
      TOG_PAGA:CHECKED = TRUE     
      TOG_AVSLUTADE:CHECKED = FALSE.
   END.
   ELSE DO:
      ASSIGN
      TOG_PAGA:CHECKED = FALSE     
      TOG_AVSLUTADE:CHECKED = FALSE.
   END.
   IF uppvaltemp.TILLFALLFAST = 3 THEN DO:
      ASSIGN
      TOG_TILLF:CHECKED = TRUE     
      TOG_FASTA:CHECKED = TRUE.
   END.
   ELSE IF uppvaltemp.TILLFALLFAST = 2 THEN DO:
      ASSIGN
      TOG_TILLF:CHECKED = FALSE     
      TOG_FASTA:CHECKED = TRUE.
   END.
   ELSE IF uppvaltemp.TILLFALLFAST = 1 THEN DO:
      ASSIGN
      TOG_TILLF:CHECKED = TRUE     
      TOG_FASTA:CHECKED = FALSE.
   END.
   ELSE DO:
      ASSIGN
      TOG_TILLF:CHECKED = FALSE     
      TOG_FASTA:CHECKED = FALSE.
   END.   
   
END PROCEDURE.
PROCEDURE PlaceraKnapp_UI :
   Guru.GlobalaVariabler:StartRadForKnappar = BRW_VPLAN:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_UPP-6).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_UNDER-2).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_BUNDER).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_BUD).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_KALK-4).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_KALKNATREG).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_RAPP-2).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_AVSAONR-2).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_VISAO-3).        
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_PTIDPLAN).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_HAOF).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_AOF).
   RUN placeracmb_UI .         
END PROCEDURE.

PROCEDURE placeraCmb_UI :    
   Guru.GlobalaVariabler:StartRadForKnappar = CMB_OMR:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_OMR).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_BESORG).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_ANSV).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_ARBART).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_PRIO).
   RUN placeraFill_UI.              
END PROCEDURE.

PROCEDURE placeraFill_UI :
   Guru.GlobalaVariabler:StartRadForKnappar = CMB_OMR:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(FILL-IN-KTO). 
   Guru.Konstanter:PlaceraKnapparLodratt(FILL-IN-K1).
   Guru.Konstanter:PlaceraKnapparLodratt(FILL-IN-K2).
   Guru.Konstanter:PlaceraKnapparLodratt(FILL-IN-K3).
   Guru.Konstanter:PlaceraKnapparLodratt(FILL-IN-K4).
   
   Guru.GlobalaVariabler:StartKolumnForKnappar = FILL-IN-KTO:COLUMN + 4. 
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN-K1,FALSE).
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN-K2,FALSE).
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN-K3,FALSE).
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN-K4,FALSE).       
END PROCEDURE.
PROCEDURE buttplac_UI :
   Guru.GlobalaVariabler:collefth = ?.
   IF Guru.Konstanter:plansekvar[2] = TRUE THEN DO:
      FBTN_UPP-6:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_UPP-6:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.
   ELSE FBTN_UPP-6:HIDDEN = TRUE.
   IF Guru.Konstanter:plansekvar[5] = TRUE THEN DO:
      FBTN_UNDER-2:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_UNDER-2:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.
   ELSE FBTN_UNDER-2:HIDDEN = TRUE.
   IF Guru.Konstanter:plansekvar[5] = TRUE THEN DO:
      FBTN_BUNDER:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_BUNDER:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.
   ELSE FBTN_BUNDER:HIDDEN = TRUE.
   IF Guru.Konstanter:plansekvar[6] = TRUE THEN DO:
      FBTN_BUD:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_BUD:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.
   ELSE FBTN_BUD:HIDDEN = TRUE.
   
   FBTN_KALK-4:HIDDEN = TRUE.
   BTN_KALKNATREG:HIDDEN = TRUE.
   IF Guru.Konstanter:varforetypval[41] = 1 AND Guru.Konstanter:kalk2sekvar[6] = TRUE THEN DO:
      BTN_KALKNATREG:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = BTN_KALKNATREG:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).    
   END.                    
   IF Guru.Konstanter:plansekvar[8] = TRUE THEN DO:
      FBTN_RAPP-2:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_RAPP-2:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.
   ELSE FBTN_RAPP-2:HIDDEN = TRUE.
   IF Guru.Konstanter:plansekvar[9] = TRUE THEN DO:
      FBTN_AVSAONR-2:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_AVSAONR-2:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.
   ELSE FBTN_AVSAONR-2:HIDDEN = TRUE.
   IF Guru.Konstanter:plansekvar[4] = TRUE THEN DO:
      FBTN_VISAO-3:HIDDEN = FALSE.        
      Guru.GlobalaVariabler:colrighth = FBTN_VISAO-3:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.
   ELSE FBTN_VISAO-3:HIDDEN = TRUE.

  BTN_PTIDPLAN:HIDDEN = FALSE.
  Guru.GlobalaVariabler:colrighth = BTN_PTIDPLAN:HANDLE.           
  RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).             
   BTN_HAOF:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = BTN_HAOF:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).      
   BTN_AOF:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = BTN_AOF:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
END PROCEDURE.
PROCEDURE sek_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/
   IF Guru.Konstanter:plansekvar[1] = TRUE THEN BTN_NY:HIDDEN = FALSE.
   ELSE BTN_NY:HIDDEN = TRUE.
   IF Guru.Konstanter:plansekvar[3] = TRUE THEN BTN_BORT:HIDDEN = FALSE.
   ELSE BTN_BORT:HIDDEN = TRUE.   
END PROCEDURE.

PROCEDURE hide_UI :
   IF RAD_PERIOD:SCREEN-VALUE = STRING(1) THEN DO:                  
      CMB_ARTAL:HIDDEN  = FALSE. 
      CMB_FRAN:HIDDEN  = TRUE.
      CMB_TILL:HIDDEN  = TRUE.    
   END.
   ELSE DO:                                                   
      CMB_ARTAL:HIDDEN  = TRUE.
      CMB_FRAN:HIDDEN  = FALSE.
      CMB_TILL:HIDDEN  = FALSE. 
   END.
END PROCEDURE.


PROCEDURE allstartbrw_UI :
   DEFINE VARIABLE korextra AS LOGICAL NO-UNDO.
   korextra = FALSE.
   IF NOT VALID-HANDLE(brwproc[{&LEFT-BROWSE}]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[{&LEFT-BROWSE}] (INPUT BRW_PLAN).
   IF NOT VALID-HANDLE(brwproc[{&RIGHT-BROWSE}]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[{&RIGHT-BROWSE}] (INPUT BRW_VPLAN).
   IF NOT VALID-HANDLE(brwproc[{&ARROWS}]) THEN DO:
      RUN DYNARROW.P PERSISTENT SET brwproc[{&ARROWS}] 
      (INPUT BRW_PLAN, INPUT BRW_VPLAN,
       INPUT BTN_OVER, INPUT BTN_ALLOVER,
       INPUT BTN_ALLBACK, INPUT BTN_BACK). 
      RUN addfillin_UI IN brwproc[{&ARROWS}] 
      (INPUT FILL-IN_ORT, INPUT "ORT").
      RUN addfillin_UI IN brwproc[{&ARROWS}]          
      (INPUT FILL-IN_SPLANNR, INPUT "PLANNR").  
   END.
   IF NOT VALID-HANDLE(planapph) THEN korextra = TRUE.
   IF NOT VALID-HANDLE(planapph) THEN DO:
      IF Guru.Konstanter:appcon THEN DO:    
         RUN PERSONALAPP.P PERSISTENT SET persproch ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
         RUN PLANNRHMTU.P PERSISTENT SET planapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
         RUN ANSBER.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
         (OUTPUT TABLE ansvaraotemp,OUTPUT TABLE beredartemp,OUTPUT TABLE projtemp).
         RUN PANSBER.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
         (OUTPUT TABLE ansvplantemp).
         RUN ARBARTS.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
         (OUTPUT TABLE aarttemp).
         
      END.
      ELSE DO:
         RUN PERSONALAPP.P PERSISTENT SET persproch.  
         RUN PLANNRHMTU.P PERSISTENT SET planapph.      
         RUN ANSBER.P 
         (OUTPUT TABLE ansvaraotemp,OUTPUT TABLE beredartemp,OUTPUT TABLE projtemp).
         RUN PANSBER.P 
         (OUTPUT TABLE ansvplantemp).     
         RUN ARBARTS.P 
         (OUTPUT TABLE aarttemp).                  
      END.           
      
   END.
   IF Guru.Konstanter:appcon THEN DO:
      IF NOT VALID-HANDLE(nyttaoapph2) THEN RUN NYTTAOAPP.P PERSISTENT SET nyttaoapph2 ON Guru.Konstanter:apphand TRANSACTION DISTINCT.
   END.
   ELSE DO:
       IF NOT VALID-HANDLE(nyttaoapph2) THEN RUN NYTTAOAPP.P PERSISTENT SET nyttaoapph2.  
   END.
   IF korextra = TRUE THEN DO:
      korextra = FALSE.
      RUN korextra_UI.
      RUN buttplac_UI.
   END.
   FIND FIRST valplantemp NO-LOCK NO-ERROR.
   IF NOT AVAILABLE valplantemp THEN DO:
      RUN hmtfavoriter_UI.               
   END.
   
END PROCEDURE.

PROCEDURE korextra_UI :

   RUN allaplan_UI (INPUT 2).   
   /*Ladda områden*/
   {OMRHMT.I}
   ASSIGN
   kalknrvar = ?
   kalktypvar = ?.
   RUN jurp_UI IN persproch (INPUT Guru.Konstanter:globanv,OUTPUT TABLE jurperstemp,OUTPUT TABLE judavdtemp).
   CMB_OMR:LIST-ITEMS = "".     
   status-ok = CMB_OMR:ADD-FIRST("Alla").
   FOR EACH judavdtemp,         
   EACH omrtemp WHERE omrtemp.AVDELNINGNR = judavdtemp.AVDELNINGNR.
      status-ok = CMB_OMR:ADD-LAST(omrtemp.NAMN). 
      CMB_OMR:SCREEN-VALUE = omrtemp.NAMN.
   END.
   FIND FIRST omrtemp WHERE omrtemp.OMRADE = Guru.Konstanter:globomr 
   USE-INDEX OMR NO-LOCK NO-ERROR.
   IF NOT AVAILABLE omrtemp THEN DO:
      FIND FIRST omrtemp USE-INDEX OMR NO-LOCK NO-ERROR.
   END.
   IF NOT AVAILABLE omrtemp THEN ASSIGN CMB_OMR:SCREEN-VALUE = "Alla".
   ELSE ASSIGN CMB_OMR:SCREEN-VALUE = omrtemp.NAMN.
   IF Guru.Konstanter:globomr = "" OR Guru.Konstanter:globallao = TRUE THEN DO:
      CMB_OMR:SCREEN-VALUE = "Alla".      
   END.
   FIND FIRST bestkundallt NO-LOCK NO-ERROR.
   IF NOT AVAILABLE bestkundallt THEN DO:    
      bestvad = 2.
      {BESTHMT.I}      
   END.
   IF Guru.Konstanter:varforetypval[3] >= 1 THEN DO:

   END.
   ELSE DO:
      OPEN QUERY oq FOR EACH omrtemp USE-INDEX OMR NO-LOCK.
      GET FIRST oq NO-LOCK.
      DO WHILE AVAILABLE(omrtemp):
         FIND FIRST bestkundallt WHERE bestkundallt.BESTID = omrtemp.OMRADE NO-ERROR.
         IF NOT AVAILABLE bestkundallt THEN DO:
            CREATE bestkundallt.
            ASSIGN 
            bestkundallt.VIBESTID = omrtemp.OMRADE 
            bestkundallt.BESTID = omrtemp.OMRADE 
            bestkundallt.BESTNAMN = omrtemp.NAMN.                      
         END.      
         GET NEXT oq NO-LOCK.
      END.
   END.
   CMB_BESORG:LIST-ITEMS = "".
   IF Guru.Konstanter:varforetypval[45] = 1 THEN.
   ELSE DO:
      status-ok = CMB_BESORG:ADD-FIRST("Alla").
      FOR EACH bestkundallt USE-INDEX BESTNAMN NO-LOCK:
         status-ok = CMB_BESORG:ADD-LAST(bestkundallt.BESTNAMN).
      END.
      status-ok = CMB_BESORG:ADD-LAST("Samma som ovan").
   END.   
   musz = FALSE.
   CMB_ANSV:LIST-ITEMS = "".
   status-ok = CMB_ANSV:ADD-FIRST("Alla").
   FOR EACH ansvplantemp USE-INDEX NAMN NO-LOCK:
      status-ok = CMB_ANSV:ADD-LAST(ansvplantemp.NAMN).
   END.
   CMB_ARBART:LIST-ITEMS = "".
   status-ok = CMB_ARBART:ADD-FIRST("Alla").
   FOR EACH aarttemp USE-INDEX ARBARTKOD NO-LOCK:
      status-ok = CMB_ARBART:ADD-LAST(aarttemp.ARBBENAMNING).
   END.
   RUN labelk2 IN planapph (OUTPUT labelvar2).   
   RUN labelk3 IN planapph (OUTPUT labelvar3).      
   RUN labelk4 IN planapph (OUTPUT labelvar4).      
   ASSIGN   
   FILL-IN-K2:LABEL = labelvar2
   FILL-IN-K3:LABEL = labelvar3.
   FILL-IN-K4:LABEL = labelvar4.
   RUN labelk1 IN planapph (OUTPUT labelvar1).   
   ASSIGN   
   FILL-IN-K1:LABEL = labelvar1.   
   ASSIGN
   status-ok = CMB_ARTAL:DELETE("0")
   status-ok = CMB_FRAN:DELETE("0")
   status-ok = CMB_TILL:DELETE("0").
   /*LADDAR ÅR I CMB_ARTAL*/  
   {SOKSTART.I}
   ASSIGN
   soktemp.SOKVAL = 64. 
   {SOKANROP.I}
   ASSIGN
   startartal = soktemp.SOKINT[1] 
   slutartal =   soktemp.SOKINT[2].
   uppar = startartal.
   slutar = slutartal + 5.
   status-ok = CMB_ARTAL:ADD-LAST(STRING(uppar,"9999")).
   DO WHILE uppar < slutar:
       uppar = uppar + 1.
       status-ok = CMB_ARTAL:ADD-LAST(STRING(uppar,"9999")).
   END.
   ASSIGN
   CMB_ARTAL:SCREEN-VALUE = STRING(YEAR(TODAY),"9999").
   /*LADDAR ÅR I CMB_FRAN*/ 
   uppar = startartal.
   slutar = slutartal + 5.
   status-ok = CMB_FRAN:ADD-LAST(STRING(uppar,"9999")).             
   DO WHILE uppar < slutar: 
      uppar = uppar + 1.             
      status-ok = CMB_FRAN:ADD-LAST(STRING(uppar,"9999")).    
   END.  
   ASSIGN
   CMB_FRAN:SCREEN-VALUE = STRING(YEAR(TODAY),"9999").
   /*LADDAR ÅR I CMB_TILL*/  
   uppar = startartal.
   slutar = slutartal + 5.
   status-ok = CMB_TILL:ADD-LAST(STRING(uppar,"9999")).             
   DO WHILE uppar < slutar: 
      uppar = uppar + 1.             
      status-ok = CMB_TILL:ADD-LAST(STRING(uppar,"9999")).    
   END.     
   IF startartal = slutartal THEN CMB_TILL:SCREEN-VALUE = STRING(YEAR(TODAY),"9999").
   ELSE CMB_TILL:SCREEN-VALUE = STRING(YEAR(TODAY) + 1,"9999").
   ASSIGN
   FILL-IN_ARTAL:SCREEN-VALUE = STRING(YEAR(TODAY),"9999").
   ASSIGN
   franar = INTEGER(CMB_FRAN:SCREEN-VALUE)
   tillar = INTEGER(CMB_TILL:SCREEN-VALUE)
   sparar1 = INTEGER(CMB_FRAN:SCREEN-VALUE)
   sparar2 = INTEGER(CMB_TILL:SCREEN-VALUE)
   RAD_PERIOD:SCREEN-VALUE = STRING(1)
   period = INTEGER(RAD_PERIOD:SCREEN-VALUE).
   ASSIGN      
   BTN_ALLBACK:TOOLTIP = "Alla valda " + LC(Guru.Konstanter:gplk) + " tas bort från vallistan"   
   BTN_ALLOVER:TOOLTIP = "Alla " + LC(Guru.Konstanter:gplk) + " väljs"
   BTN_BORT:TOOLTIP = "Ta bort ett " + LC(Guru.Konstanter:gplk)
   BTN_HAMT-6:TOOLTIP = "Dina val ovan avgör vilka " + LC(Guru.Konstanter:gplk) +  " du får i listan nedan."
   BTN_NY:TOOLTIP = "Skapa ett nytt " + LC(Guru.Konstanter:gplk).
   CREATE uppvaltemp.
   ASSIGN 
   uppvaltemp.VISPERAR = TRUE
   uppvaltemp.AVSLUTSTART = DATE(01,01,YEAR(TODAY))
   uppvaltemp.AVSLUTSLUT = TODAY         
   uppvaltemp.STARTDATUM = DATE(01,01,YEAR(TODAY))
   uppvaltemp.SLUTDATUM  = TODAY
   uppvaltemp.TILLFALLFAST = 1
   uppvaltemp.PAAV = 1
   uppvaltemp.BESTID = "ALLA"
   uppvaltemp.OMRNAMN = CMB_OMR:SCREEN-VALUE
   uppvaltemp.ARBANSVARIG = "ALLA".
   SUBSTRING(uppvaltemp.PROJEKTOR,1,24) = "ALLA".
   {TOGTIFA.I}
   ASSIGN
   FILL-IN-MELL:SCREEN-VALUE = "mellan" 
   FILL-IN-OCH:SCREEN-VALUE = "och". 
   ASSIGN       
   CMB_BESORG:SCREEN-VALUE = "Alla"
   CMB_ANSV:SCREEN-VALUE = "Alla".
   ASSIGN C-WIN:TITLE = Guru.Konstanter:gpll + "hantering" + "-" + "Systemsupport 090/184540    elpool.ume@elpool.se  " + foretemp.ATRHOME.
   ASSIGN 
   TOG_PAGA:CHECKED = TRUE      
   TOG_AVSLUTADE:CHECKED = FALSE 
   TOG_TILLF:CHECKED = TRUE     
   TOG_FASTA:CHECKED = FALSE
   BTN_FVE-3:HIDDEN = TRUE 
   BTN_FVE-4:HIDDEN = TRUE 
   BTN_NVE-3:HIDDEN = TRUE 
   BTN_NVE-4:HIDDEN = TRUE 
   FILL-IN-MELL:HIDDEN = TRUE 
   FILL-IN-OCH:HIDDEN = TRUE 
   FILL-IN-AVSLUTD:HIDDEN = TRUE 
   FILL-IN-AVSTARTD:HIDDEN = TRUE.
   RUN hide_UI.   /*Årtal eller period*/   
   RUN ladda_UI.
   BRW_PLAN:HIDDEN = FALSE.
   BRW_PLAN:MAX-DATA-GUESS  = 1000.
   BRW_VPLAN:HIDDEN = FALSE.
   BRW_VPLAN:MAX-DATA-GUESS  = 100.
   RUN gomfalt_UI IN huvprogh (INPUT "PLAN",INPUT 1).
   ASSIGN
   FBTN_KALK-4:LABEL = "Kalkylera " + LC(Guru.Konstanter:gplk) 
   FBTN_AVSAONR-2:LABEL = "Avsluta " + LC(Guru.Konstanter:gplk)
   FILL-IN_SPLANNR:LABEL = Guru.Konstanter:gplk
   CMB_ANSV:LABEL = Guru.Konstanter:garbal
   CMB_OMR:LABEL = Guru.Konstanter:gomrk
   FBTN_UPP-6:LABEL = Guru.Konstanter:gpll + "huvud".
   ASSIGN
   FILL-IN_PLANNRVAL:SCREEN-VALUE = "Gör urval av " + LC(Guru.Konstanter:gpll)
   FILL-IN-VAL:SCREEN-VALUE = "Hämta:" /* + LC(Guru.Konstanter:gplk)*/
   FILL-IN-SOK:SCREEN-VALUE = "Sök i urval".
   ASSIGN
   TOG_FASTA:LABEL = "Fasta " + LC(Guru.Konstanter:gplk)
   TOG_TILLF:LABEL = "Tillfälliga " + LC(Guru.Konstanter:gplk)
   TOG_AVSLUTADE:LABEL = "Avslutade " + LC(Guru.Konstanter:gplk)
   TOG_PAGA:LABEL = "Pågående " + LC(Guru.Konstanter:gplk).   
   FIND FIRST aarttemp NO-ERROR.
   IF AVAILABLE aarttemp THEN DO:   
      CMB_ARBART:HIDDEN  = FALSE.      
      CMB_ARBART:SCREEN-VALUE = "Alla".      
   END.
   IF labelvar2 = "" THEN FILL-IN-K2:HIDDEN = TRUE.
   IF labelvar1 = "" THEN FILL-IN-K1:HIDDEN = TRUE.
   IF labelvar3 = "" THEN FILL-IN-K3:HIDDEN = TRUE.
   IF labelvar4 = "" THEN FILL-IN-K4:HIDDEN = TRUE.
   IF labelvar1 = "" AND labelvar2 = ""  THEN FILL-IN-KTO:HIDDEN  = TRUE.      
END PROCEDURE.
PROCEDURE allaplan_UI :
   DEFINE INPUT PARAMETER vart AS INTEGER NO-UNDO.
   {OMSTARTAVGURUH.I}   
   EMPTY TEMP-TABLE valsoktemp NO-ERROR.         
   CREATE valsoktemp.    
   ASSIGN
   valsoktemp.SOKCHAR[1] = CMB_ARBART:SCREEN-VALUE.   
   FIND FIRST aarttemp WHERE aarttemp.ARBBENAMNING = CMB_ARBART:SCREEN-VALUE USE-INDEX ARBARTKOD NO-LOCK NO-ERROR.
   IF AVAILABLE aarttemp THEN DO:           
      valsoktemp.SOKINT[1] = aarttemp.ARBARTKOD.
   END.   
   RUN planhmt_UI IN planapph 
   (INPUT vart,INPUT TABLE valsoktemp,
   INPUT-OUTPUT TABLE uppvaltemp,INPUT-OUTPUT TABLE valplantemp,INPUT-OUTPUT TABLE plannrtemp). 
   FIND FIRST uppvaltemp WHERE NO-LOCK NO-ERROR.
   
   RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
   RUN openbdyn_UI IN brwproc[{&LEFT-BROWSE}] (INPUT "").
   RUN fetchselrowid_UI IN brwproc[{&LEFT-BROWSE}].
   {musarrow.i}  
END PROCEDURE.

PROCEDURE sparaaofavoriter_UI :
   tthandle = TEMP-TABLE valplantemp:HANDLE.
   FIND FIRST sparaladdatemp NO-ERROR.
   IF NOT AVAILABLE sparaladdatemp THEN CREATE sparaladdatemp.
   ASSIGN
   sparaladdatemp.GLOBANV = Guru.Konstanter:globanv /*Användare, i detta fall ELPAO*/
   sparaladdatemp.BENAMNING = "PLAN" /*Benämnings sufix, i detta fall ELPAO$STOR*/
   sparaladdatemp.TABVAL = "PLANNRTAB" /*Tabellnamn*/
   sparaladdatemp.FALTVALAO = "PLANNR" /*Character field*/
   sparaladdatemp.FALTVALDEL = "ARTAL" /*Integer field*/
   sparaladdatemp.FALTVALDATE = "".  /*DATE field*/
   RUN sparabrw_UI IN brwproc[{&RIGHT-BROWSE}] 
      (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp).
END PROCEDURE.
PROCEDURE avb_UI : 
   MESSAGE "Du avslutar nu " + SUBSTRING(foretemp.VERSION,1,10)
   VIEW-AS ALERT-BOX QUESTION BUTTONS OK-CANCEL UPDATE val AS LOGICAL.   
   IF val = FALSE THEN RETURN NO-APPLY.   
   RUN avb_UI IN huvprogh.   
END PROCEDURE.
   
PROCEDURE borthand_UI :
   IF VALID-HANDLE(persproch) THEN DELETE PROCEDURE persproch NO-ERROR.
   {BORTBRWPROC.I}   
   valplanh:EMPTY-TEMP-TABLE() NO-ERROR.    
   IF VALID-HANDLE(planapph) THEN DELETE PROCEDURE planapph NO-ERROR.      
   IF VALID-HANDLE(valplanh) THEN   DELETE OBJECT valplanh NO-ERROR.
   valplanh = ?.
END PROCEDURE.
PROCEDURE fselectfoc_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(valplanh) THEN DO:
      valplanh = TEMP-TABLE valplantemp:DEFAULT-BUFFER-HANDLE.
   END.
   RUN fetrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT antal_raknare,OUTPUT brwrowid) .
   FIND FIRST valplantemp WHERE ROWID(valplantemp) = brwrowid NO-LOCK NO-ERROR.
END PROCEDURE.
PROCEDURE selectfoc_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(valplanh) THEN DO:
      valplanh = TEMP-TABLE valplantemp:DEFAULT-BUFFER-HANDLE.
   END.
   RUN selectrowid_UI IN brwproc[{&RIGHT-BROWSE}] (OUTPUT brwrowid).
   RUN selectrecid_UI IN brwproc[{&RIGHT-BROWSE}] (OUTPUT brwrecid).
   FIND FIRST valplantemp WHERE ROWID(valplantemp) = brwrowid NO-LOCK NO-ERROR.
END PROCEDURE.

FUNCTION brwval RETURNS LOGICAL
  ( /* parameter-definitions */ ) :
   RUN urvalaktiv_UI IN brwproc[{&ARROWS}] (OUTPUT leftbrwakt).
   IF leftbrwakt = TRUE THEN 
      antal_valda = BRW_PLAN:NUM-SELECTED-ROWS.
   ELSE antal_valda = BRW_VPLAN:NUM-SELECTED-ROWS. 
   IF antal_valda = 0 THEN DO:      
      MESSAGE "Inget " LC(Guru.Konstanter:gplk) + " är valt!" VIEW-AS ALERT-BOX.
      RETURN TRUE.                
   END.
   IF leftbrwakt = TRUE THEN DO:
      EMPTY TEMP-TABLE valplantemp NO-ERROR.       
      RUN sel_over_UI IN brwproc[{&ARROWS}].
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valplantemp)).
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").  
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
   END.
   ELSE DO:
      RUN selectfoc_UI.      
   END.
   RETURN FALSE.   /* Function return value. */
END FUNCTION.

