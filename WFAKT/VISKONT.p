/*VISKONT.P*/

DEFINE SHARED VARIABLE musz AS LOGICAL NO-UNDO.
DEFINE VARIABLE summvar AS DECIMAL NO-UNDO.
DEFINE VARIABLE stat AS LOGICAL NO-UNDO.
DEFINE VARIABLE status-ok AS LOGICAL NO-UNDO.
DEFINE VARIABLE fadatum AS DATE NO-UNDO.
DEFINE VARIABLE fodatum AS DATE NO-UNDO.
DEFINE TEMP-TABLE sumkont
   FIELD AONR LIKE AONRKONTKOD.AONR 
   FIELD DELNR LIKE AONRKONTKOD.DELNR
   FIELD K1 LIKE AONRKONTKOD.K1 
   FIELD K2 LIKE AONRKONTKOD.K2 
   FIELD K3 LIKE AONRKONTKOD.K3 
   FIELD K4 LIKE AONRKONTKOD.K4 
   FIELD K5 LIKE AONRKONTKOD.K5 
   FIELD BELOPP AS DECIMAL
   INDEX AONR IS PRIMARY AONR DELNR K1 K2.
         

{VISKONTAB.I}

{TIDUTTTSHARED.I}


DEFINE BUFFER faktureradbuff FOR FAKTURERAD.

DEFINE INPUT PARAMETER infaktnr LIKE FAKTPLAN.FAKTNR NO-UNDO.
DEFINE INPUT PARAMETER vfknr LIKE FAKTURERAD.VFAKTNR NO-UNDO. 
FIND FAKTPLAN WHERE FAKTPLAN.FAKTNR = infaktnr NO-LOCK NO-ERROR.
  
IF vfknr NE 0 THEN DO:
   FIND FIRST FAKTURERAD WHERE FAKTURERAD.FAKTNR = FAKTPLAN.FAKTNR AND 
   FAKTURERAD.VFAKTNR = vfknr NO-LOCK NO-ERROR.
END.
ELSE DO:
   FIND FIRST FAKTURERAD WHERE FAKTURERAD.FAKTNR = FAKTPLAN.FAKTNR AND
   FAKTURERAD.FDELNR = FAKTPLAN.FDELNR NO-LOCK NO-ERROR.  
END.
FIND FIRST FAKTREGLER WHERE FAKTREGLER.FAKTNR = FAKTPLAN.FAKTNR 
USE-INDEX FAKTREGLER NO-LOCK NO-ERROR.    
FIND FIRST FAKTURERINGSTYP WHERE 
FAKTURERINGSTYP.FAKTTYPID = FAKTURERAD.FAKTTYPID NO-LOCK NO-ERROR.
IF vfknr NE 0 THEN DO:
   OPEN QUERY BRW_K1 FOR EACH FAKTKUNDKONTO WHERE 
   FAKTKUNDKONTO.FAKTNR = FAKTPLAN.FAKTNR AND 
   FAKTKUNDKONTO.VFAKTNR = FAKTURERAD.VFAKTNR NO-LOCK, 
   EACH KUNDFODRAN WHERE KUNDFODRAN.KUNDKONTOID = FAKTKUNDKONTO.KUNDKONTOID NO-LOCK, 
   EACH MOTPART WHERE MOTPART.MOTPARTID = FAKTKUNDKONTO.MOTPARTID NO-LOCK.
END.
ELSE DO:
   OPEN QUERY BRW_K1 FOR EACH FAKTKUNDKONTO WHERE 
   FAKTKUNDKONTO.FAKTNR = FAKTPLAN.FAKTNR AND 
   FAKTKUNDKONTO.FDELNR = FAKTURERAD.FDELNR NO-LOCK, 
   EACH KUNDFODRAN WHERE KUNDFODRAN.KUNDKONTOID = FAKTKUNDKONTO.KUNDKONTOID NO-LOCK, 
   EACH MOTPART WHERE MOTPART.MOTPARTID = FAKTKUNDKONTO.MOTPARTID NO-LOCK.
END.
IF vfknr NE 0 THEN DO:
   OPEN QUERY BRW_K2 FOR EACH FAKTINTAKTKONT WHERE 
   FAKTINTAKTKONT.FAKTNR = FAKTPLAN.FAKTNR AND 
   FAKTINTAKTKONT.VFAKTNR = FAKTURERAD.VFAKTNR NO-LOCK, 
   EACH INTAKTTAB WHERE INTAKTTAB.INTAKTID = FAKTINTAKTKONT.INTAKTID NO-LOCK, 
   EACH MOTPART WHERE MOTPART.MOTPARTID = FAKTINTAKTKONT.MOTPARTID NO-LOCK.
END.
ELSE DO:
   OPEN QUERY BRW_K2 FOR EACH FAKTINTAKTKONT WHERE 
   FAKTINTAKTKONT.FAKTNR = FAKTPLAN.FAKTNR AND 
   FAKTINTAKTKONT.FDELNR = FAKTURERAD.FDELNR NO-LOCK, 
   EACH INTAKTTAB WHERE INTAKTTAB.INTAKTID = FAKTINTAKTKONT.INTAKTID NO-LOCK, 
   EACH MOTPART WHERE MOTPART.MOTPARTID = FAKTINTAKTKONT.MOTPARTID NO-LOCK.
END.
IF vfknr NE 0 THEN DO:
   OPEN QUERY BRW_K4 FOR EACH FAKTMOMS WHERE 
   FAKTMOMS.FAKTNR = FAKTPLAN.FAKTNR AND 
   FAKTMOMS.VFAKTNR = FAKTURERAD.VFAKTNR NO-LOCK, 
   EACH MOMSTAB WHERE MOMSTAB.MOMSID = FAKTMOMS.MOMSID NO-LOCK.       
END.
ELSE DO:
   OPEN QUERY BRW_K4 FOR EACH FAKTMOMS WHERE 
   FAKTMOMS.FAKTNR = FAKTPLAN.FAKTNR AND 
   FAKTMOMS.FDELNR = FAKTURERAD.FDELNR NO-LOCK, 
   EACH MOMSTAB WHERE MOMSTAB.MOMSID = FAKTMOMS.MOMSID NO-LOCK.       
END.
GET FIRST BRW_K2 NO-LOCK.
IF NOT AVAILABLE FAKTINTAKTKONT THEN RETURN.
RUN viskont_UI.
FIND FIRST viskonttemp NO-LOCK NO-ERROR.
IF NOT AVAILABLE viskonttemp THEN RETURN.
CREATE tidut.
CREATE tidut. 

ASSIGN                        
SUBSTRING(tidut.UT,132) = "$". 
CREATE tidut. 
ASSIGN                        
SUBSTRING(tidut.UT,1) = "Kontering :". 
CREATE tidut.
CREATE tidut.
ASSIGN                        
SUBSTRING(tidut.UT,1) = "KONTO" 
SUBSTRING(tidut.UT,8) = "MOTPART" 
SUBSTRING(tidut.UT,16) = CAPS(Guru.Konstanter:gomrk) 
SUBSTRING(tidut.UT,23) = CAPS(Guru.Konstanter:gaok)                   
SUBSTRING(tidut.UT,30) = CAPS(Guru.Konstanter:gdelnrk) 
SUBSTRING(tidut.UT,36) = "DEBET"
SUBSTRING(tidut.UT,49) = "KREDIT".
CREATE tidut.
ASSIGN                                   
SUBSTRING(tidut.UT,1) = "======.=======.======.======.=====.============.============". 
   
FOR EACH viskonttemp:   
   CREATE tidut.
   ASSIGN                        
   SUBSTRING(tidut.UT,1) = viskonttemp.KONTO 
   SUBSTRING(tidut.UT,8) = viskonttemp.MOTPART 
   SUBSTRING(tidut.UT,16) = viskonttemp.OMRADE 
   SUBSTRING(tidut.UT,23) = viskonttemp.AONR                   
   SUBSTRING(tidut.UT,30) = viskonttemp.VDELNR 
   SUBSTRING(tidut.UT,36) = STRING(viskonttemp.DEBET,"->>>>>>>9.99")
   SUBSTRING(tidut.UT,49) = STRING(viskonttemp.KREDIT,"->>>>>>>9.99").
   
END. 
/*
RUN aokont_UI.
*/
PROCEDURE aokont_UI :
   FIND FIRST KBENAMNING USE-INDEX KBEN NO-LOCK NO-ERROR.
   GET FIRST BRW_K2 NO-LOCK.
   DO WHILE AVAILABLE(FAKTINTAKTKONT):
      IF FAKTINTAKTKONT.VFAKTNR = 0 THEN DO:      
         OPEN QUERY aokq FOR EACH AONRKONTKOD WHERE AONRKONTKOD.AONR = FAKTINTAKTKONT.AONR AND       
         AONRKONTKOD.DELNR = FAKTINTAKTKONT.DELNR NO-LOCK.
         GET FIRST aokq NO-LOCK.
         DO WHILE AVAILABLE(AONRKONTKOD):
            CREATE sumkont.
            ASSIGN
            sumkont.AONR = AONRKONTKOD.AONR 
            sumkont.DELNR = AONRKONTKOD.DELNR
            sumkont.K1 = AONRKONTKOD.K1 
            sumkont.K2 = AONRKONTKOD.K2 
            sumkont.K3 = AONRKONTKOD.K3 
            sumkont.K4 = AONRKONTKOD.K4 
            sumkont.K5 = AONRKONTKOD.K5 
            sumkont.BELOPP = AONRKONTKOD.SATS% * FAKTINTAKTKONT.BELOPP / 100.
            GET NEXT aokq NO-LOCK.
         END.
      END.
      ELSE DO:      
         OPEN QUERY faokq FOR EACH FAKTAONRKONTO WHERE 
         FAKTAONRKONTO.FDELNR = 0 AND
         FAKTAONRKONTO.FAKTNR = FAKTINTAKTKONT.FAKTNR AND 
         FAKTAONRKONTO.VFAKTNR = FAKTINTAKTKONT.VFAKTNR AND
         FAKTAONRKONTO.AONR = FAKTINTAKTKONT.AONR AND       
         FAKTAONRKONTO.DELNR = FAKTINTAKTKONT.DELNR NO-LOCK.
         GET FIRST faokq NO-LOCK.
         DO WHILE AVAILABLE(FAKTAONRKONTO):
            CREATE sumkont.
            ASSIGN
            sumkont.AONR = FAKTAONRKONTO.AONR 
            sumkont.DELNR = FAKTAONRKONTO.DELNR
            sumkont.K1 = FAKTAONRKONTO.K1 
            sumkont.K2 = FAKTAONRKONTO.K2 
            sumkont.K3 = FAKTAONRKONTO.K3 
            sumkont.K4 = FAKTAONRKONTO.K4 
            sumkont.K5 = FAKTAONRKONTO.K5 
            sumkont.BELOPP = FAKTAONRKONTO.SATS% * FAKTINTAKTKONT.BELOPP / 100.
            GET NEXT faokq NO-LOCK.
         END.
      END.
      GET NEXT BRW_K2 NO-LOCK.
   END. 
   FIND FIRST sumkont NO-LOCK NO-ERROR.
   IF NOT AVAILABLE sumkont THEN RETURN.       
   CREATE tidut.
   CREATE tidut.
   ASSIGN                        
   SUBSTRING(tidut.UT,132) = "$". 
   CREATE tidut. 
   ASSIGN                        
   SUBSTRING(tidut.UT,1) = "Kontering :". 
   CREATE tidut.
   CREATE tidut.
   ASSIGN                        
   SUBSTRING(tidut.UT,1) = CAPS(KBENAMNING.K2) 
   SUBSTRING(tidut.UT,8) = "BELOPP".
   CREATE tidut.
   ASSIGN                  
   SUBSTRING(tidut.UT,1) = "======.============". 
   
   FOR EACH sumkont BREAK BY sumkont.K2:         
      ACCUMULATE 
      sumkont.BELOPP (TOTAL BY sumkont.K2).         
      IF LAST-OF(sumkont.K2) THEN DO:                        
         CREATE tidut.
         ASSIGN                        
         SUBSTRING(tidut.UT,1) = sumkont.K2 
         SUBSTRING(tidut.UT,8) = STRING((ACCUM TOTAL BY sumkont.K2 sumkont.BELOPP),"->>>>>>>9.99").
         summvar = summvar + ACCUM TOTAL BY sumkont.K2 sumkont.BELOPP.
      END. 
   END.
   CREATE tidut.
   ASSIGN                        
   SUBSTRING(tidut.UT,1) = "Summa:" 
   SUBSTRING(tidut.UT,8) = STRING(summvar,"->>>>>>>9.99").
   
END PROCEDURE.

PROCEDURE styrintakt_UI :
   {STYRDEB.I}         
END PROCEDURE.

PROCEDURE viskont_UI :
   {VISKONT.I}      
END PROCEDURE.

