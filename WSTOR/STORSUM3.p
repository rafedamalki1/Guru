/*STORSUM3.P SUMMERING AV STÖRNING*/
DEFINE VARIABLE timmar100 AS DECIMAL NO-UNDO.
DEFINE VARIABLE timmar60 AS DECIMAL NO-UNDO.

DEFINE TEMP-TABLE summ_temp
   FIELD STORTYPID LIKE STORNINGSTAB.STORTYPID
   FIELD ADELID LIKE STORNINGSTAB.ADELID
   FIELD SAVBROTT LIKE STORNINGSTAB.AVBROTTSTID 
   FIELD PAVBROTT LIKE STORNINGSTAB.AVBROTTSTID 
   FIELD KUNDER LIKE STORNINGSTAB.ANTALLSP
   FIELD TOTTIM LIKE STORNINGSTAB.AVBROTTSTID 
   FIELD PLANTIM LIKE STORNINGSTAB.AVBROTTSTID 
   FIELD HTIM LIKE STORNINGSTAB.AVBROTTSTID 
   FIELD MAXTIM LIKE STORNINGSTAB.AVBROTTSTID .

DEFINE TEMP-TABLE avd_temp
   FIELD AVDELNINGNR LIKE STORDISTRIKT.AVDELNINGNR   
   FIELD NAMN LIKE STORDISTRIKT.NAMN
   INDEX AVD IS PRIMARY AVDELNINGNR.

DEFINE INPUT PARAMETER TABLE FOR avd_temp.
DEFINE INPUT PARAMETER valfore AS LOGICAL NO-UNDO.
DEFINE INPUT PARAMETER distvar LIKE STORDISTRIKT.DISTRIKTID NO-UNDO.   
DEFINE INPUT PARAMETER bdatum AS DATE NO-UNDO.
DEFINE INPUT PARAMETER avdatum AS DATE NO-UNDO.
DEFINE INPUT PARAMETER period AS INTEGER NO-UNDO.
DEFINE INPUT PARAMETER uttyp AS INTEGER NO-UNDO.
DEFINE INPUT PARAMETER driftvar LIKE STORDRIFTOMR.STDRIFTID NO-UNDO.
DEFINE INPUT PARAMETER alla AS LOGICAL NO-UNDO.
DEFINE INPUT PARAMETER spannvar LIKE SPANNINGSNIV.SPANID NO-UNDO.
DEFINE INPUT-OUTPUT PARAMETER TABLE FOR summ_temp.

FUNCTION klockan100 RETURNS DECIMAL
  (INPUT ber60 AS DECIMAL) :
  RETURN  (TRUNCATE(ber60,0) * 3600 + (ber60 - TRUNCATE(ber60,0)) * 100 * 60) / 3600. 
END FUNCTION.

FUNCTION klockan60 RETURNS DECIMAL
  (INPUT ber100 AS DECIMAL) :
  RETURN TRUNCATE(ber100,0) + ((ber100 - TRUNCATE(ber100,0)) / 100) * 60.
END FUNCTION.

   {muswait.i} 
   IF valfore = TRUE THEN DO:
      FOR EACH avd_temp USE-INDEX AVD:
         OPEN QUERY dq FOR EACH STORDISTRIKT WHERE 
         STORDISTRIKT.AVDELNINGNR = avd_temp.AVDELNINGNR AND 
         STORDISTRIKT.ARTAL = YEAR(bdatum) USE-INDEX AVDARTAL NO-LOCK.
         GET FIRST dq NO-LOCK.
         DO WHILE AVAILABLE(STORDISTRIKT):
            distvar = STORDISTRIKT.DISTRIKTID.
            RUN distrikt_UI.
            GET NEXT dq NO-LOCK.
         END.
         CLOSE QUERY dq.
      END.         
   END.
   ELSE DO:
      IF alla = TRUE THEN DO:
         IF uttyp = 3 THEN DO:
            IF period = 1 THEN DO:
               OPEN QUERY sq FOR EACH STORNINGSTAB WHERE YEAR(STORNINGSTAB.HDATUM) = YEAR(bdatum) AND
               STORNINGSTAB.STDRIFTID = driftvar AND STORNINGSTAB.FRANSPANID = spannvar
               USE-INDEX LISTA1 NO-LOCK.
            END.
            ELSE DO:
               OPEN QUERY sq FOR EACH STORNINGSTAB WHERE STORNINGSTAB.HDATUM >= bdatum AND
               STORNINGSTAB.HDATUM <= avdatum AND
               STORNINGSTAB.STDRIFTID = driftvar AND STORNINGSTAB.FRANSPANID = spannvar
               USE-INDEX LISTA1 NO-LOCK.
            END.
         END.
         ELSE DO:
            IF period = 1 THEN DO:
               OPEN QUERY sq FOR EACH STORNINGSTAB WHERE YEAR(STORNINGSTAB.HDATUM) = YEAR(bdatum) AND
               STORNINGSTAB.STDRIFTID = driftvar AND STORNINGSTAB.FRANSPANID = spannvar AND 
               STORNINGSTAB.STORTYPID = uttyp 
               USE-INDEX LISTA2 NO-LOCK.
            END.
            ELSE DO:
               OPEN QUERY sq FOR EACH STORNINGSTAB WHERE STORNINGSTAB.HDATUM >= bdatum AND
               STORNINGSTAB.HDATUM <= avdatum AND
               STORNINGSTAB.STDRIFTID = driftvar AND STORNINGSTAB.FRANSPANID = spannvar AND 
               STORNINGSTAB.STORTYPID = uttyp 
               USE-INDEX LISTA2 NO-LOCK.
            END.
         END.      
         GET FIRST sq NO-LOCK.
         DO WHILE AVAILABLE(STORNINGSTAB):        
            RUN summa_UI.         
            GET NEXT sq NO-LOCK.
         END.
         CLOSE QUERY sq.      
      END.
      ELSE DO:
         RUN distrikt_UI.         
      END.
   END.

PROCEDURE distrikt_UI:   
   IF uttyp = 3 THEN DO:
      IF period = 1 THEN DO:
         OPEN QUERY sq FOR EACH STORNINGSTAB WHERE STORNINGSTAB.DISTRIKTID = distvar AND
         YEAR(STORNINGSTAB.HDATUM) = YEAR(bdatum) AND STORNINGSTAB.STDRIFTID = driftvar AND
         STORNINGSTAB.FRANSPANID = spannvar 
         USE-INDEX LISTA3 NO-LOCK.
      END.
      ELSE DO:
         OPEN QUERY sq FOR EACH STORNINGSTAB WHERE STORNINGSTAB.DISTRIKTID = distvar AND
         STORNINGSTAB.HDATUM >= bdatum AND
         STORNINGSTAB.HDATUM <= avdatum AND STORNINGSTAB.STDRIFTID = driftvar AND
         STORNINGSTAB.FRANSPANID = spannvar 
         USE-INDEX LISTA3 NO-LOCK.
      END.
   END.
   ELSE DO:
      IF period = 1 THEN DO:
         OPEN QUERY sq FOR EACH STORNINGSTAB WHERE STORNINGSTAB.DISTRIKTID = distvar AND
         YEAR(STORNINGSTAB.HDATUM) = YEAR(bdatum) AND STORNINGSTAB.FRANSPANID = spannvar AND 
         STORNINGSTAB.STDRIFTID = driftvar AND STORNINGSTAB.STORTYPID = uttyp
         USE-INDEX LISTA3 NO-LOCK.
      END.
      ELSE DO:
         OPEN QUERY sq FOR EACH STORNINGSTAB WHERE STORNINGSTAB.DISTRIKTID = distvar AND
         STORNINGSTAB.HDATUM >= bdatum AND
         STORNINGSTAB.HDATUM <= avdatum AND STORNINGSTAB.FRANSPANID = spannvar AND 
         STORNINGSTAB.STDRIFTID = driftvar AND STORNINGSTAB.STORTYPID = uttyp
         USE-INDEX LISTA3 NO-LOCK.
      END.
   END.     
   GET FIRST sq NO-LOCK.
   DO WHILE AVAILABLE(STORNINGSTAB):                  
      RUN summa_UI.
      GET NEXT sq NO-LOCK.
   END.
   CLOSE QUERY sq.
END PROCEDURE.

PROCEDURE summa_UI. 
   IF STORNINGSTAB.STORTYPID = 1 THEN DO:
      IF STORNINGSTAB.AVBROTTSTID > 0.05 THEN DO:
         FIND LAST BORTKOPPLAD WHERE BORTKOPPLAD.STORNUMMERID = STORNINGSTAB.STORNUMMERID
         USE-INDEX AVBROTT NO-LOCK NO-ERROR.
         IF AVAILABLE BORTKOPPLAD THEN DO:
            RUN TIDBER.P (INPUT STORNINGSTAB.HDATUM, INPUT BORTKOPPLAD.ATERDATUM, INPUT STORNINGSTAB.HKLOCKAN,
            INPUT BORTKOPPLAD.ATERKLOCKAN, OUTPUT timmar100, OUTPUT timmar60).
            CREATE summ_temp.
            ASSIGN
            summ_temp.STORTYPID = STORNINGSTAB.STORTYPID
            summ_temp.ADELID = STORNINGSTAB.ADELID
            summ_temp.SAVBROTT = STORNINGSTAB.AVBROTTSTID 
            summ_temp.KUNDER = STORNINGSTAB.ANTALHSP + STORNINGSTAB.ANTALLSP
            summ_temp.HTIM = timmar100
            summ_temp.TOTTIM = timmar100
            summ_temp.MAXTIM = timmar100.
         END.
         ELSE DO:
            RUN TIDBER.P (INPUT STORNINGSTAB.HDATUM, INPUT STORNINGSTAB.DATUM100%, INPUT STORNINGSTAB.HKLOCKAN,
            INPUT STORNINGSTAB.KLOCKAN100%, OUTPUT timmar100, OUTPUT timmar60).
            CREATE summ_temp.
            ASSIGN
            summ_temp.STORTYPID = STORNINGSTAB.STORTYPID
            summ_temp.ADELID = STORNINGSTAB.ADELID
            summ_temp.SAVBROTT = STORNINGSTAB.AVBROTTSTID 
            summ_temp.KUNDER = STORNINGSTAB.ANTALHSP + STORNINGSTAB.ANTALLSP
            summ_temp.HTIM = 0
            summ_temp.TOTTIM = timmar100
            summ_temp.MAXTIM = timmar100.
            IF STORNINGSTAB.KLOCKAN70% NE ? THEN DO:      
               RUN TIDBER.P (INPUT STORNINGSTAB.HDATUM, INPUT STORNINGSTAB.DATUM70%, INPUT STORNINGSTAB.HKLOCKAN,
               INPUT STORNINGSTAB.KLOCKAN70%, OUTPUT timmar100, OUTPUT timmar60).
               ASSIGN
               summ_temp.TOTTIM = timmar100
               summ_temp.HTIM = timmar100.
            END.
            ELSE DO:
               summ_temp.HTIM = summ_temp.TOTTIM.
            END.         
         END.
      END.
   END.
   ELSE DO:
      FIND LAST BORTKOPPLAD WHERE BORTKOPPLAD.STORNUMMERID = STORNINGSTAB.STORNUMMERID
      USE-INDEX AVBROTT NO-LOCK NO-ERROR.
      IF AVAILABLE BORTKOPPLAD THEN DO:
         RUN TIDBER.P (INPUT STORNINGSTAB.HDATUM, INPUT BORTKOPPLAD.ATERDATUM, INPUT STORNINGSTAB.HKLOCKAN,
         INPUT BORTKOPPLAD.ATERKLOCKAN, OUTPUT timmar100, OUTPUT timmar60).
      END.
      ELSE DO:
         RUN TIDBER.P (INPUT STORNINGSTAB.HDATUM, INPUT STORNINGSTAB.DATUM100%, INPUT STORNINGSTAB.HKLOCKAN,
         INPUT STORNINGSTAB.KLOCKAN100%, OUTPUT timmar100, OUTPUT timmar60).            
      END.
      CREATE summ_temp.
      ASSIGN
      summ_temp.STORTYPID = STORNINGSTAB.STORTYPID
      summ_temp.ADELID = STORNINGSTAB.ADELID
      summ_temp.PAVBROTT = STORNINGSTAB.AVBROTTSTID 
      summ_temp.KUNDER = STORNINGSTAB.ANTALHSP + STORNINGSTAB.ANTALLSP
      summ_temp.HTIM = 0
      summ_temp.TOTTIM = timmar100
      summ_temp.PLANTIM = timmar100.
   END.
END PROCEDURE.
