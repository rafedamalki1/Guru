The example below is one that works for me using ODBC to connect to a MySQL
database.

Thanks to Alex Pearlstein [apearlst@progress.com] for the original template
that I used to develop this code sample.

/* Procedure to Update Email Users Database */

DEF INPUT PARAMETER action AS CHAR FORMAT "x(1)" NO-UNDO.
DEF INPUT PARAMETER X_indx AS INTEGER NO-UNDO.

Def var ObjRecordSet as com-handle no-undo.
Def var ObjConnection as com-handle no-undo.
Def var ObjCommand as com-handle no-undo.
Def var ODBC-DSN as character no-undo.
Def var ODBC-SERVER as character no-undo.
Def var ODBC-USERID as CHARACTER no-undo.
Def var ODBC-PASSWD as character no-undo.
Def var ODBC-QUERY as character no-undo.
DEF VAR ODBC-Add AS CHARACTER NO-UNDO.
DEF VAR ODBC-Delete AS CHARACTER NO-UNDO.
Def var ODBC-STATUS as character no-undo.
Def var ODBC-RECCOUNT as integer no-undo.
Def var ODBC-NULL as character no-undo.
Def var ODBC-CURSOR as integer no-undo.

DEF VAR I AS INT NO-UNDO.
DEF VAR J AS INT NO-UNDO.
DEF VAR Cexp AS CHAR NO-UNDO.


/* Create the connection object for the link to SQL */
Create "ADODB.Connection" ObjConnection.
/* Create a recordset object ready to return the data */
Create "ADODB.RecordSet" ObjRecordSet.
/* Create a command object for sending the SQL statement */
Create "ADODB.Command" ObjCommand.

/* Change the below values as necessary */
Assign ODBC-DSN = "Email_Users" /* The ODBC DSN */
ODBC-SERVER = "206.58.236.176" /* The name of the server
hosting the SQL DB and DSN */
ODBC-USERID = "usermgr" /* The user id for access to the
SQL Database */
ODBC-PASSWD = "secretdb". /* Password required by above
user-id */

FIND FIRST members WHERE members.m_indx = X_indx NO-LOCK NO-ERROR.
IF AVAILABLE members THEN DO:
FIND FIRST course WHERE course.c_indx = members.c_indx NO-LOCK
NO-ERROR.

j = LENGTH(members.credit_card_expire_dt).
cexp = "".
DO i = 1 TO J.
IF SUBSTR(members.credit_card_expire_dt,i,1) GE "0" AND
SUBSTR(members.credit_card_expire_dt,i,1) LE "9"
THEN cexp = cexp + SUBSTR(members.credit_card_expire_dt,i,1).
END.


ODBC-Add =
"Insert into passwd (Login, Uid, Gid, home, Virtual_Host,
Password) VALUES (" +
"'" + members.login_name + "',1000, 1000, " +
"'" + "/home/golfersrow.com/" + members.login_name +
"', " +
"'golfersrow.com', " +
"'" + Members.Password + "');".

PUT substring(odbc-add,1,100) FORMAT "x(100)" SKIP
substring(odbc-add,101,200) FORMAT "x(100)" SKIP
substring(odbc-add,201,300) FORMAT "x(100)" SKIP
substring(odbc-add,301,400) FORMAT "x(100)" SKIP
substring(odbc-add,401,500) FORMAT "x(100)" SKIP
substring(odbc-add,501,600) FORMAT "x(100)" SKIP
substring(odbc-add,601,700) FORMAT "x(100)" SKIP
substring(odbc-add,701,800) FORMAT "x(100)" SKIP
substring(odbc-add,801,900) FORMAT "x(100)" SKIP
substring(odbc-add,901,1000) FORMAT "x(100)" SKIP
substring(odbc-add,1001,1100) FORMAT "x(100)" SKIP
substring(odbc-add,1101,1200) FORMAT "x(100)" SKIP
substring(odbc-add,1201,1300) FORMAT "x(100)" SKIP
SKIP.

END.

ODBC-Delete =
"Delete From passwd Where login = " +
members.login_name + ";".
/* Open up the connection to the ODBC Layer */
ObjConnection:Open ( "data source=" + ODBC-DSN + ";server=" +
ODBC-SERVER, ODBC-USERID, ODBC-PASSWD, 0 ) no-error.
/* Check for connection errors */

If ( error-status:num-messages > 0 ) THEN DO:
ODBC-STATUS = "Error: Could not establish connection.".
END.
Else
DO:

CASE action:
WHEN "D" THEN DO:

Assign ObjCommand:ActiveConnection = ObjConnection
ObjCommand:CommandText = ODBC-Delete
ObjCommand:CommandType = 1 /* adCmdText */
ObjConnection:CursorLocation = 3 /* adUseClient */
ObjRecordSet:CursorType = 3 /* adOpenStatic */
ObjRecordSet = ObjCommand:Execute (
OUTPUT ODBC-NULL, "", 32 ).

END.

WHEN "A" THEN DO:

Assign ObjCommand:ActiveConnection = ObjConnection
ObjCommand:CommandText = ODBC-Add
ObjCommand:CommandType = 1 /* adCmdText */
ObjConnection:CursorLocation = 3 /* adUseClient */
ObjRecordSet:CursorType = 3 /* adOpenStatic */
ObjRecordSet = ObjCommand:Execute (
OUTPUT ODBC-NULL, "", 32 ).

END.

WHEN "C" THEN DO:

Assign ObjCommand:ActiveConnection = ObjConnection
ObjCommand:CommandText = ODBC-Delete
ObjCommand:CommandType = 1 /* adCmdText */
ObjConnection:CursorLocation = 3 /* adUseClient */
ObjRecordSet:CursorType = 3 /* adOpenStatic */
ObjRecordSet = ObjCommand:Execute (
OUTPUT ODBC-NULL, "", 32 ).


Assign ObjCommand:ActiveConnection = ObjConnection
ObjCommand:CommandText = ODBC-Add
ObjCommand:CommandType = 1 /* adCmdText */
ObjConnection:CursorLocation = 3 /* adUseClient */
ObjRecordSet:CursorType = 3 /* adOpenStatic
*/
ObjRecordSet = ObjCommand:Execute
( OUTPUT ODBC-NULL, "", 32 ).

END.

END CASE.



/* Close the ADO connection */
ObjConnection:Close no-error.

End. /* The connection opened correctly */


/* Don't forget to release the memory!! */
Release object ObjConnection no-error.
Release object ObjCommand no-error.
Release object ObjRecordSet no-error.

Assign ObjConnection = ? ObjCommand = ? ObjRecordSet = ?.





-----Original Message-----
From: postmaster@peg.com [mailto:postmaster@peg.com]On Behalf Of Gerard
Keane
Sent: Wednesday, May 22, 2002 9:19 AM
To: webspeed@peg.com
Subject: ADO connection to ODBC db


Hi,

Can anyone point me in the direction of some documentation/manuals for the
commands to allow connecting to an ODBC database using ADO. I've seen sample
code (see samples below) but need the full set of commands to create and
update records. TIA.

