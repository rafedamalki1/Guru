/*BERMENY.P*/
/*
används beredningen
anvkoll_UI
/*ÄNDRA BEREDNING*/  
   IF vad = 1 THEN DO:
/*pågår det ett inköp*/
 RUN inkkoll_UI IN inkberh (INPUT valberedningtemp.AONR,INPUT valberedningtemp.DELNR,OUTPUT startadi).
IF (beresekvar[6] = FALSE OR Guru.Konstanter:beresekvar[16] = FALSE)  AND vad = 2 THEN DO:
      IF VALID-HANDLE(inkberh) THEN DO: 
         RUN inkfinns2_UI IN inkberh (INPUT valberedningtemp.AONR,INPUT valberedningtemp.DELNR,OUTPUT startadi).

/*kör man utgången inköpr*/
            RUN inkfinns_UI IN inkberh (INPUT valberedningtemp.AONR,INPUT valberedningtemp.DELNR,OUTPUT startadi).

/*finns inkber*/
            RUN inkkollstart_UI IN inkberh (INPUT valberedningtemp.AONR,INPUT valberedningtemp.DELNR,OUTPUT startadi). 
/*skapar inkber*/
               RUN inkstart_UI IN inkberh (INPUT valberedningtemp.AONR,INPUT valberedningtemp.DELNR). 
*/  
FUNCTION brwval RETURNS LOGICAL
  (  )  FORWARD.

FUNCTION felkoll RETURNS LOGICAL
  ( INPUT felmed AS INTEGER )  FORWARD.
&Scoped-define NEW 
&Scoped-define SHARED 
 {UTSOKAONR.I}
  
{BERWID.I}
{ALLDEF.I}
{ANVTEMPS.I}
{EXTRATAB.I}
DEFINE SHARED TEMP-TABLE berkalanvandartemp NO-UNDO LIKE anvandartemp.
DEFINE SHARED VARIABLE summeradberedning AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE vart AS CHARACTER FORMAT "X(3)" NO-UNDO.
DEFINE SHARED VARIABLE kalkrec2 AS RECID NO-UNDO.
DEFINE SHARED VARIABLE karlrec AS RECID NO-UNDO. 
DEFINE SHARED VARIABLE valaonr AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE valbernr AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE valdelnr AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE valort AS CHARACTER NO-UNDO. 
DEFINE SHARED VARIABLE valomrade AS CHARACTER NO-UNDO. 
DEFINE SHARED VARIABLE katvar AS INTEGER NO-UNDO.

DEFINE SHARED VARIABLE ejanv AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE nyvar AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE datvar AS DATE NO-UNDO.
DEFINE SHARED VARIABLE skapamtrl AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE lista AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE inkop AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE laddaproch AS HANDLE NO-UNDO.
DEFINE SHARED VARIABLE felmedd1 AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE felmedd2 AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE avbryt AS LOGICAL NO-UNDO. 
DEFINE SHARED VARIABLE vartpro AS CHARACTER FORMAT "X(3)" NO-UNDO.
DEFINE SHARED VARIABLE vald_lev AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE vald_kundlev AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE musz AS LOGICAL NO-UNDO.
DEFINE VARIABLE inkopvart AS CHARACTER NO-UNDO.
DEFINE VARIABLE x-multi AS DECIMAL NO-UNDO.
DEFINE VARIABLE y-multi AS DECIMAL NO-UNDO.
DEFINE VARIABLE leftbrwakt AS LOGICAL NO-UNDO.
DEFINE VARIABLE status-ok AS LOGICAL NO-UNDO.
DEFINE VARIABLE jid AS CHARACTER NO-UNDO.
DEFINE VARIABLE berapph AS HANDLE NO-UNDO.
DEFINE VARIABLE nyttaoapph2 AS HANDLE NO-UNDO.                      /*NYTTAOAPP.P*/
DEFINE VARIABLE aonrapph AS HANDLE NO-UNDO.
DEFINE VARIABLE berstopp AS LOGICAL NO-UNDO.
DEFINE VARIABLE antal_valda AS INTEGER NO-UNDO. 
DEFINE VARIABLE fellog AS LOGICAL NO-UNDO.
DEFINE VARIABLE stopp AS LOGICAL NO-UNDO.
DEFINE VARIABLE orgtab AS CHARACTER NO-UNDO.
DEFINE VARIABLE comquery AS CHARACTER NO-UNDO.
DEFINE VARIABLE felmedd AS CHARACTER NO-UNDO.
DEFINE VARIABLE nyhandvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE valaonr2 AS CHARACTER NO-UNDO.
DEFINE VARIABLE valomrade2 AS CHARACTER NO-UNDO.
DEFINE VARIABLE medvar AS CHARACTER NO-UNDO.
DEFINE VARIABLE recaonr AS RECID NO-UNDO.
DEFINE VARIABLE skick AS LOGICAL NO-UNDO.
DEFINE VARIABLE efel AS CHARACTER FORMAT "X(30)" NO-UNDO.
DEFINE VARIABLE sparber AS INTEGER NO-UNDO.
DEFINE VARIABLE sparomr AS CHARACTER NO-UNDO.
DEFINE VARIABLE antal_raknare AS INTEGER NO-UNDO.
DEFINE VARIABLE vlaonr AS CHARACTER NO-UNDO.
DEFINE VARIABLE vldelnr AS INTEGER NO-UNDO.
DEFINE VARIABLE anamn AS CHARACTER NO-UNDO.
DEFINE VARIABLE delbernr AS CHARACTER NO-UNDO.
DEFINE VARIABLE kalkbervar AS LOGICAL NO-UNDO.
DEFINE VARIABLE valdutf AS INTEGER NO-UNDO.
DEFINE VARIABLE fbestapph AS HANDLE NO-UNDO.                      /*EXTRATABHMT*/
DEFINE NEW SHARED VARIABLE inkberh AS HANDLE NO-UNDO.

DEFINE VARIABLE startaannatpro AS CHARACTER NO-UNDO.
DEFINE VARIABLE kopplatillaonr  AS CHARACTER NO-UNDO.
DEFINE VARIABLE kopplatilldelnr AS INTEGER NO-UNDO.
DEFINE VARIABLE kopberapph AS HANDLE NO-UNDO. 
&Scoped-define NEW 
&Scoped-define SHARED SHARED
&Scoped-define NEW 
{GLOBVAR2DEL1.I}
{FORETEMP.I}
&Scoped-define SHARED SHARED
{HUVLEVTEMP.I}
{LEVTEMP.I}  
{HOPPSEK2W.I}
{OMRTEMPW.I}
{AVDTEMP.I}
{AVDELNINGTEMP.I}
{BERTEMPTAB.I}
{SOKDEF.I}
{KONVALTEMP.I}   
DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.
{EXTRADATA.I}

framesizeh = framesizeextrah.
DEFINE VARIABLE valdberbh AS HANDLE NO-UNDO.
valdberbh = TEMP-TABLE valberedningtemp:DEFAULT-BUFFER-HANDLE.
ON 'VALUE-CHANGED':U OF CMB_JURP PERSISTENT RUN cmbjurp_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF CMB_AVD PERSISTENT RUN cmbavd_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF TOG_ALLABER PERSISTENT RUN mddelnr_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN_EAONR PERSISTENT RUN mdeaonr_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN_EAONR PERSISTENT RUN akeaonr_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN_DELNR PERSISTENT RUN mddelnr_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN_DELNR PERSISTENT RUN akdelnr_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF  FILL-IN-HBERNR PERSISTENT RUN mdhbernr_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN-HBERNR PERSISTENT RUN akbernr_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_HAMT PERSISTENT RUN btnhmt_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_BORT PERSISTENT RUN bort_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_NY PERSISTENT RUN ny_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_AVB PERSISTENT RUN avb_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF BRW_VBER PERSISTENT RUN mdbrwber_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF  BRW_VBER PERSISTENT RUN vcbrwbere_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_ADM PERSISTENT RUN btnadm_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_ATG PERSISTENT RUN btnatg_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_ATT PERSISTENT RUN btnatt_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_BA PERSISTENT RUN ba_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_EXP PERSISTENT RUN exp_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_IMP PERSISTENT RUN imp_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_INAKTIV PERSISTENT RUN inaktiv_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_INK PERSISTENT RUN inkop_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_GJORDABES PERSISTENT RUN Ginkop_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_BER PERSISTENT RUN bereda_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_KOPI PERSISTENT RUN btnkopi_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_LAS PERSISTENT RUN btnlas_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_LIST PERSISTENT RUN listor_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_UPP PERSISTENT RUN andra_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_AOF PERSISTENT RUN sparaaofavoriter_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_HAOF PERSISTENT RUN hmtfavoriter_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_SCHAKTP PERSISTENT RUN btnschktp_UI IN THIS-PROCEDURE.
RUN main_UI.

PROCEDURE btnschktp_UI :
   IF startaannatpro = "schakt" THEN startaannatpro = "BERE".   
   IF brwval() = TRUE THEN RETURN.
   IF felkoll (INPUT 1) = TRUE THEN RETURN.
   RUN val_UI.
   RUN berkoll_UI (INPUT 2).
   IF franvart > 1 THEN .
   ELSE DO:
      {AVBFRAM2.I}
   END.
   
END PROCEDURE.
PROCEDURE autofavo_UI :
   FIND FIRST valberedningtemp NO-LOCK NO-ERROR.
   IF AVAILABLE valberedningtemp THEN DO:
      RUN sparaaofavoriter_UI.
   END.
END PROCEDURE.
PROCEDURE hmtfavoriter_UI :
   DEFINE VARIABLE ttbuffh AS HANDLE NO-UNDO.
   tthandle = TEMP-TABLE valberedningtemp:HANDLE.
   ttbuffh = tthandle:DEFAULT-BUFFER-HANDLE.   
   RUN ttcopy_UI IN huvprogh (INPUT TABLE-HANDLE tthandle).
   ttbuffh:EMPTY-TEMP-TABLE() NO-ERROR.
   FIND FIRST sparaladdatemp NO-ERROR.
   IF NOT AVAILABLE sparaladdatemp THEN CREATE sparaladdatemp.
   ASSIGN
   sparaladdatemp.GLOBANV = Guru.Konstanter:globanv /*Användare, i detta fall ELPAO*/
   sparaladdatemp.BENAMNING = "BER" /*Benämnings sufix, i detta fall ELPAO$STOR*/
   sparaladdatemp.TABVAL = "BEREDNING" /*Tabellnamn*/
   sparaladdatemp.FALTVALAO = "OMRADE" /*Character field*/
   sparaladdatemp.FALTVALDEL = "BERNR" /*Integer field*/
   sparaladdatemp.FALTVALDATE = "".   /*DATE field*/
   EMPTY TEMP-TABLE valberedningtemp NO-ERROR. 
   RUN laddabrw_UI IN brwproc[{&RIGHT-BROWSE}]  (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp). 
   RUN ttjmf_UI IN huvprogh (INPUT-OUTPUT ttbuffh).
   RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").  
END PROCEDURE.


PROCEDURE openb_UI :
   RUN uppdatvalber_UI IN berapph (INPUT-OUTPUT TABLE valberedningtemp).
   RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
   FIND FIRST valberedningtemp WHERE valberedningtemp.BERNR = sparber
   AND valberedningtemp.OMRADE = sparomr NO-LOCK NO-ERROR.
   RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valberedningtemp)).
   RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].     
END PROCEDURE.
PROCEDURE wingom_UI :  
   {AVBGOM2.I} 
END PROCEDURE.
PROCEDURE menyberval_UI :
   DEFINE INPUT PARAMETER vad AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER franvart2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER beraonr2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER berdelnr2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR berintemp.
   DEFINE INPUT-OUTPUT PARAMETER inkopvartin AS CHARACTER NO-UNDO.
   inkopvart = inkopvartin.   
   ASSIGN
   franvart = franvart2
   beraonr  = beraonr2 
   berdelnr = berdelnr2.
   
   RUN btnberstart_UI IN huvprogh (INPUT franvart, INPUT beraonr, INPUT berdelnr, INPUT TABLE berintemp).
   IF vad = 1 THEN DO:
      IF AVAILABLE valberedningtemp THEN DO:
         RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valberedningtemp)).
         startaannatpro = "".
         RUN ny_UI.
         RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
         IF startaannatpro NE "" THEN DO:
            RUN startaannatpro_UI.
         END.
      END.      
   END.   
   IF vad = 3 THEN DO:
      APPLY "CHOOSE" TO FBTN_UPP.
   END.
   IF vad = 4 THEN DO:
      APPLY "CHOOSE" TO FBTN_BER.
   END.
   IF vad = 5 THEN DO:
      APPLY "CHOOSE" TO FBTN_INK.
      inkopvartin = inkopvart.
      inkopvart = "".
   END.
   IF vad = 6 THEN DO:
      APPLY "CHOOSE" TO FBTN_LIST.
   END.
   IF vad = 7 THEN DO:
      APPLY "CHOOSE" TO FBTN_ATG.
   END.
   IF vad = 8 THEN DO:
      APPLY "CHOOSE" TO FBTN_LAS.
   END.
   IF vad = 9 THEN DO:
      APPLY "CHOOSE" TO FBTN_EXP.
   END.
   IF vad = 91 THEN DO:
      ASSIGN
      kopplatillaonr = valberedningtemp.AONR
      kopplatilldelnr = valberedningtemp.DELNR.
      
      APPLY "CHOOSE" TO FBTN_IMP.
      IF kopplatillaonr NE "" THEN DO:   
         DEFINE VARIABLE nyttbernr AS INTEGER NO-UNDO.  
         DEFINE VARIABLE nyttomrade AS CHARACTER NO-UNDO.
         RUN btnreg IN kopberapph (INPUT kopplatillaonr,INPUT kopplatilldelnr,
                                   INPUT valbernr,
                                   INPUT valomrade,
                                   INPUT "",
                                   OUTPUT TABLE felmeddtemp, OUTPUT nyttbernr, OUTPUT nyttomrade).
         RUN goma_UI IN huvprogh (INPUT FALSE,INPUT "AONR").      
      END.     
      kopplatillaonr = "".
      kopplatilldelnr = 0.      
   END.   
   IF vad = 10 THEN DO:
      APPLY "CHOOSE" TO BTN_SCHAKTP.
   END.
   APPLY "CHOOSE" TO BTN_AVB.  
END PROCEDURE.

PROCEDURE menyber_UI :
   DEFINE INPUT PARAMETER franvart2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER beraonr2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER berdelnr2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR berintemp.
      
   ASSIGN
   franvart = franvart2
   beraonr  = beraonr2 
   berdelnr = berdelnr2.
   
   RUN btnberstart_UI IN huvprogh (INPUT franvart, INPUT beraonr, INPUT berdelnr, INPUT TABLE berintemp).
   {AVBFRAM2.I}
   RUN SetDefaultCursors IN Guru.Konstanter:hpApi.      
   WAIT-FOR CHOOSE OF BTN_AVB OR WINDOW-CLOSE OF C-WIN OR END-ERROR OF C-Win OR ENDKEY OF C-Win.
END PROCEDURE.
PROCEDURE andra_UI :
   IF brwval() = TRUE THEN RETURN.
   IF felkoll (INPUT 1) = TRUE THEN RETURN.
   {OMSTARTAVGURUH.I}   
   RUN val_UI.
   
   RUN anvkoll_UI (INPUT TRUE).
   IF berstopp = FALSE THEN DO:
   RUN inkkoll_UI (INPUT 1 ,OUTPUT musz).
   IF musz = FALSE THEN RETURN.
   musz = FALSE.
      vart = "AND".
      avbryt = FALSE.      
      IF franvart NE 1 THEN valaonr = valberedningtemp.AONR.
      ELSE valaonr = ?.      
      RUN NYBEREU.W (INPUT franvart,INPUT "").
      musz = FALSE.      
      FIND FIRST valberedningtemp WHERE valberedningtemp.BERNR = valbernr
      AND valberedningtemp.OMRADE = valomrade NO-LOCK NO-ERROR.
      IF AVAILABLE valberedningtemp THEN DO:
         RUN gorlika_UI IN brwproc[{&ARROWS}] (INPUT "BERNR", INPUT "OMRADE").
         RUN setcolsortvar_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
         RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
         FIND FIRST valberedningtemp WHERE valberedningtemp.BERNR = valbernr
         AND valberedningtemp.OMRADE = valomrade NO-LOCK NO-ERROR.
         IF AVAILABLE valberedningtemp THEN DO:
            RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valberedningtemp)).
            RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
         END.
      END.          
   END.
   {musarrow.i}
END PROCEDURE.
PROCEDURE listor_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/
   IF brwval() = TRUE THEN RETURN.
   IF felkoll (INPUT 2) = TRUE THEN RETURN.
   {OMSTARTAVGURUH.I}
   antal_valda = BRW_VBER:NUM-SELECTED-ROWS.
   EMPTY TEMP-TABLE eurberedningtemp NO-ERROR. 
   IF antal_valda > 1 THEN DO:      
      MESSAGE "Vill Ni summera valda beredningar?" VIEW-AS ALERT-BOX
      QUESTION BUTTONS YES-NO TITLE "Summera berdningar?" UPDATE svar AS LOGICAL.
      IF svar = TRUE THEN DO:
         summeradberedning = TRUE.
         RUN listorm_UI.
         summeradberedning = FALSE.
         RETURN.
      END.
      ELSE DO:           
         RUN selectfoc_UI.
      END.
   END.
   ELSE RUN selectfoc_UI.
   RUN val_UI.   
   RUN anvkoll_UI (INPUT TRUE).
   IF berstopp = FALSE THEN DO:
      {SOKSTART.I}
      ASSIGN
      soktemp.SOKVAL = 59   
      soktemp.SOKINT[1] = 2
      soktemp.SOKLOG[1] = FALSE
      soktemp.SOKCHAR[1] = valaonr
      soktemp.SOKCHAR[2] = valomrade.
      {SOKANROP.I}
      IF soktemp.SOKLOG[1] = TRUE THEN DO:
         RUN beranv_UI.
         {AVBGOM2.I}
                        
         RUN BERLISTAU.W (INPUT TABLE kon_val,INPUT TABLE eurberedningtemp).
         
         IF franvart > 1 THEN .
         ELSE DO:
            {AVBFRAM2.I}
         END.
         RUN anvbort_UI.
      END.
      ELSE DO:
         MESSAGE "Det finns inga konstruktioner i den valda beredningen. Funktionen ej möjlig att utföra."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
      END.     
   END.   
   {musarrow.i}
END PROCEDURE.


PROCEDURE listorm_UI :
   DEFINE VARIABLE ordning AS INTEGER NO-UNDO.
   DEFINE VARIABLE kombnr AS INTEGER NO-UNDO.
   kombnr = 1.
   {OMSTARTAVGURUH.I}
   antal_valda = BRW_VBER:NUM-SELECTED-ROWS.
   antal_raknare = 1. 
   EMPTY TEMP-TABLE kon_val NO-ERROR. 
   DO WHILE antal_raknare LE antal_valda:
      RUN fselectfoc_UI.
      IF AVAILABLE valberedningtemp THEN DO:
         CREATE eurberedningtemp.
         BUFFER-COPY valberedningtemp TO eurberedningtemp.
         ASSIGN
         valaonr = valberedningtemp.BERAONR
         valdelnr = valberedningtemp.DELNR
         valbernr = valberedningtemp.BERNR
         valomrade = valberedningtemp.OMRADE
         valort = valberedningtemp.BENAMNING

         katvar = valberedningtemp.KATAR.   
      END.      
      RUN anvkoll_UI (INPUT TRUE).
      IF berstopp = FALSE THEN DO:        
         {SOKSTART.I}
         ASSIGN
         soktemp.SOKVAL = 59   
         soktemp.SOKINT[1] = 2
         soktemp.SOKLOG[1] = FALSE
         soktemp.SOKCHAR[1] = valaonr
         soktemp.SOKCHAR[2] = valomrade.
         {SOKANROP.I}
         IF soktemp.SOKLOG[1] = TRUE THEN DO:
            IF Guru.Konstanter:appcon THEN DO:                           
               RUN VALBERMU.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
               (INPUT-OUTPUT kombnr,INPUT valaonr, INPUT valomrade, OUTPUT TABLE kon_val APPEND).                             
            END.
            ELSE DO:
               RUN VALBERMU.P
               (INPUT-OUTPUT kombnr,INPUT valaonr, INPUT valomrade, OUTPUT TABLE kon_val APPEND).               
            END.  
         END.         
         ELSE DO:
            MESSAGE "Det finns inga konstruktioner i beredning " valomrade valaonr ". Funktinonen ej möjlig att utföra."
            VIEW-AS ALERT-BOX TITLE "Meddelande".
            RETURN.
         END.     
         
      END.   
      antal_raknare = antal_raknare + 1.
   END.
   FOR EACH kon_val WHERE kon_val.KSKAP = TRUE:
      DELETE kon_val.
   END.
   FIND FIRST kon_val NO-LOCK NO-ERROR.
   IF NOT AVAILABLE kon_val THEN DO:
      MESSAGE "Det finns inga konstruktioner i beredningarna Funktinonen ej möjlig att utföra."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN.
   END.
   ordning = 0.
   FOR EACH kon_val:
      IF kon_val.SKAPNUM = 0 THEN kon_val.SKAPNUM = ?.
      ordning = ordning + 1.
      kon_val.ORD = ordning.      
   END.
   {AVBGOM2.I}
   
   RUN BERLISTAU.W (INPUT TABLE kon_val, INPUT TABLE eurberedningtemp).
   IF franvart > 1 THEN .
   ELSE DO:
      {AVBFRAM2.I}
   END.
   RUN anvbort_UI.
   EMPTY TEMP-TABLE kon_val NO-ERROR. 
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnlas_UI :   
   RUN val_UI.
   {OMSTARTAVGURUH.I}
   RUN BERLASU.W.   
   {musarrow.i}
END PROCEDURE.
PROCEDURE kopplaaonr_UI :
   DEFINE INPUT  PARAMETER kopplatillaonrIN AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER kopplatilldelnrIN AS INTEGER NO-UNDO. 
   kopplatillaonr = kopplatillaonrIN.
   kopplatilldelnr = kopplatilldelnrIN.
END PROCEDURE.
PROCEDURE btnkopi_UI :
   {OMSTARTAVGURUH.I}
   IF brwval() = TRUE THEN RETURN.
   IF felkoll (INPUT 2) = TRUE THEN RETURN.
   RUN val_UI.                              
   RUN anvkoll_UI (INPUT TRUE).
   IF berstopp = TRUE OR ejanv = TRUE THEN RETURN.
   RUN inkkoll_UI (INPUT 1 ,OUTPUT musz).
   IF musz = FALSE THEN RETURN.
   musz = FALSE.
      
   ASSIGN
   valaonr2 = valaonr
   valomrade2 = valomrade.
   valaonr = ?.    
   ASSIGN
   vart = "NYA".  
   avbryt = FALSE.
   RUN NYBEREU.W (INPUT franvart,INPUT "").
   RUN setcolsortvar_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
   RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
   FIND FIRST valberedningtemp WHERE valberedningtemp.BERNR = valbernr
   AND valberedningtemp.OMRADE = valomrade NO-LOCK NO-ERROR.
   IF AVAILABLE valberedningtemp THEN DO:
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valberedningtemp)).
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
   END.
   IF avbryt = FALSE THEN DO:
      IF Guru.Konstanter:appcon THEN DO:                           
         RUN KOPIBER.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
         (INPUT valaonr2, INPUT valomrade2, INPUT STRING(valbernr), INPUT valomrade).
      END.
      ELSE DO:
         RUN KOPIBER.P
         (INPUT valaonr2, INPUT valomrade2, INPUT STRING(valbernr), INPUT valomrade).
      END.
   END.
   ELSE DO:              
      MESSAGE "Kopiering avbruten!" VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN.
   END. 
   IF kopplatillaonr NE "" THEN DO:   
      DEFINE VARIABLE nyttbernr AS INTEGER NO-UNDO.  
      DEFINE VARIABLE nyttomrade AS CHARACTER NO-UNDO.
      RUN btnreg IN kopberapph (INPUT kopplatillaonr,INPUT kopplatilldelnr,
                                INPUT valbernr,
                                INPUT valomrade,
                                INPUT valaonr2,
                                OUTPUT TABLE felmeddtemp, OUTPUT nyttbernr, OUTPUT nyttomrade).
      RUN goma_UI IN huvprogh (INPUT FALSE,INPUT "AONR").
      kopplatillaonr = "".
      kopplatilldelnr = 0.
      RETURN.
   
   END.                                                        
   {musarrow.i}   
END PROCEDURE.
/*KALKYL-BEREDNING SUNDSVALL*/
PROCEDURE kalkbereda_UI :
   DEFINE INPUT PARAMETER valomradekalk AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valbernrkalk AS INTEGER NO-UNDO.
   valbernr = valbernrkalk.
   valomrade = valomradekalk.
   DEFINE VARIABLE tabortvar AS LOGICAL NO-UNDO.
   FIND FIRST valberedningtemp WHERE valberedningtemp.BERNR = valbernr AND 
   valberedningtemp.OMRADE = valomrade NO-LOCK NO-ERROR.
   IF NOT AVAILABLE valberedningtemp THEN DO:
      FIND FIRST valsoktemp NO-LOCK NO-ERROR.
      IF NOT AVAILABLE valsoktemp THEN CREATE valsoktemp.
      ASSIGN
      valsoktemp.SOKVAL = 3 
      valsoktemp.SOKINT[1] = valbernr.
      valsoktemp.SOKCHAR[1] = valomrade.
      RUN valberhmtenKB_UI IN berapph (INPUT TABLE valsoktemp,OUTPUT TABLE valberedningtemp APPEND).
      FIND FIRST valberedningtemp WHERE valberedningtemp.BERNR = valbernr AND 
      valberedningtemp.OMRADE = valomrade NO-LOCK NO-ERROR.
      IF NOT AVAILABLE valberedningtemp THEN DO:
         MESSAGE "Hittar ingen beredning med beredningsnummer:" valbernr 
         "för område:" valomrade VIEW-AS ALERT-BOX TITLE "Meddelande!".
         RETURN. 
      END.
      valsoktemp.SOKVAL = 2.
      tabortvar = TRUE.
   END.
   IF AVAILABLE valberedningtemp THEN DO:
      ASSIGN
      valaonr = valberedningtemp.BERAONR
      valdelnr = valberedningtemp.DELNR
      valbernr = valberedningtemp.BERNR
      valomrade = valberedningtemp.OMRADE
      valort = valberedningtemp.BENAMNING
      katvar = valberedningtemp.KATAR.   
   END.  
   kalkbervar = TRUE.
   RUN berkoll_UI (INPUT 1).
   kalkbervar = FALSE.
   IF tabortvar = TRUE THEN DELETE valberedningtemp.
END PROCEDURE.

PROCEDURE bereda_UI :
   IF brwval() = TRUE THEN RETURN.
   IF felkoll (INPUT 1) = TRUE THEN RETURN.
   RUN val_UI.
   
   RUN berkoll_UI (INPUT 1).
END PROCEDURE.

PROCEDURE berkoll_UI :
   DEFINE INPUT PARAMETER vad AS INTEGER NO-UNDO.
   /*vad = 1 btn bereda
         = 2 schakt
   */
   {OMSTARTAVGURUH.I}
   RUN anvkoll_UI (INPUT TRUE).
   
   IF berstopp = FALSE THEN DO:
      RUN inkkoll_UI (INPUT 1 ,OUTPUT musz).
      IF musz = FALSE THEN RETURN.
      musz = FALSE.
     
      /*koll om gamla ink*/
      {SOKSTART.I}
      ASSIGN
      soktemp.SOKVAL = 58   
      soktemp.SOKCHAR[1] = valaonr
      soktemp.SOKCHAR[2] = valomrade
      soktemp.SOKCHAR[3] = ""
      soktemp.SOKLOG[1] = FALSE
      soktemp.SOKLOG[2] = FALSE
      soktemp.SOKLOG[3] = skapamtrl
      soktemp.SOKLOG[4] = nyvar.
      {SOKANROP.I}
      
      IF soktemp.SOKLOG[1] = TRUE OR soktemp.SOKLOG[2] = TRUE THEN DO:
         MESSAGE soktemp.SOKCHAR[3] VIEW-AS ALERT-BOX TITLE "Meddelande".
      END.
      ELSE DO:
         ASSIGN
         datvar = soktemp.SOKDATE[1] 
         skapamtrl = soktemp.SOKLOG[3]
         nyvar = soktemp.SOKLOG[4].
         RUN beranv_UI.
         nyvar = FALSE.
         IF kalkbervar = TRUE THEN.
         ELSE DO:
            {AVBGOM2.I}
         END.
         IF vad = 1 THEN DO:            
            /*nya ink*/
            RUN inkkoll_UI (INPUT 1,OUTPUT musz).
            IF musz = TRUE THEN DO:
               musz = FALSE.             
               /*ÄNDRA BERE*/  
               EMPTY TEMP-TABLE kskkon_val NO-ERROR.
               /*
               IF Guru.Konstanter:varforetypval[60] = 1 THEN RUN BERVALSDIBYGG.W (INPUT kalkbervar, OUTPUT startaannatpro).
               ELSE 
               */
               RUN BERVALSDI.W (INPUT kalkbervar, OUTPUT startaannatpro).  
               {OMSTARTAVGURUH.I}    
            END.                 
            IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "GRAN" OR Guru.Konstanter:globforetag = "GKAL" THEN DO:
               IF Guru.Konstanter:appcon THEN DO:                           
                  RUN BERUPPF.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
                  (INPUT valaonr, INPUT valomrade).
               END.
               ELSE DO:
                  RUN BERUPPF.P
                  (INPUT valaonr, INPUT valomrade).
               END.  
            END.
            IF kalkbervar = TRUE THEN.
            ELSE DO:
               IF franvart > 1 THEN .
               ELSE DO:
                  {AVBFRAM2.I}
               END.
            END.
         END.
         ELSE IF vad = 2 THEN DO:
            RUN inkkoll_UI (INPUT 1,OUTPUT musz).
            IF musz = TRUE THEN DO:
               musz = FALSE.
               RUN SCHAKTPRO.W.
            END.   
         END.
         RUN anvbort_UI.
      END.
   END.   
   IF startaannatpro NE "" THEN DO:
      RUN startaannatpro_UI.
   END. 
   {musarrow.i}
END PROCEDURE.
PROCEDURE startaannatpro_UI :
   IF startaannatpro = "INK" THEN DO:
      RUN inkop_UI.
   END.  
   IF startaannatpro = "BERE" THEN DO:
      startaannatpro = "".
      RUN berkoll_UI (INPUT 1).      
   END.
   IF startaannatpro = "schakt" THEN DO:
      RUN btnschktp_UI.
   END.  
END PROCEDURE.
PROCEDURE Ginkop_UI :
   EMPTY TEMP-TABLE evaldaao NO-ERROR.
   FOR EACH valberedningtemp WHERE NO-LOCK:
      IF valberedningtemp.AONR = "" THEN.
      ELSE IF valberedningtemp.AONR = ? THEN.
      ELSE DO:
         CREATE evaldaao.
         ASSIGN 
         evaldaao.AONR = valberedningtemp.AONR
         evaldaao.DELNR = valberedningtemp.DELNR
         evaldaao.ORT = valberedningtemp.BENAMNING. 
      END.   
   END.
   FIND FIRST evaldaao WHERE NO-LOCK NO-ERROR.
   IF NOT AVAILABLE evaldaao THEN RETURN.
   {AVBGOM2.I}
   RUN GJORDABEST.w (INPUT TABLE evaldaao).
   {AVBFRAM2.I}
END PROCEDURE.
PROCEDURE inkop_UI :
   DEFINE VARIABLE direktanv AS CHARACTER NO-UNDO.
   DEFINE VARIABLE startadi AS LOGICAL NO-UNDO.
   DEFINE VARIABLE bvar AS INTEGER NO-UNDO.
   DEFINE VARIABLE ovar AS CHARACTER NO-UNDO.
   {OMSTARTAVGURUH.I} 
   IF brwval() = TRUE THEN RETURN.
   IF valberedningtemp.AONR = ? THEN DO:
      MESSAGE "Det går inte att göra inköp om inte beredningen är" SKIP 
      "kopplad till ett " + LC(Guru.Konstanter:gaok) VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN NO-APPLY.
   END.
   IF felkoll (INPUT 1) = TRUE THEN RETURN.
   IF NOT VALID-HANDLE(inkberh) THEN DO:
      IF Guru.Konstanter:appcon THEN DO:
         RUN INKBERAPP.P PERSISTENT SET inkberh ON Guru.Konstanter:apphand TRANSACTION DISTINCT.      
      END.                             
      ELSE DO:
         RUN INKBERAPP.P PERSISTENT SET inkberh.   
      END.
   END.  
   RUN inkkollPagar_UI IN inkberh (INPUT valberedningtemp.AONR,INPUT valberedningtemp.DELNR,OUTPUT startadi,OUTPUT bvar,OUTPUT ovar).
   IF startadi = TRUE THEN DO:
      startadi = FALSE.
      IF Guru.GlobalaVariabler:InkDirekt = TRUE THEN DO:
         IF bvar = ? THEN startadi = startadi.
         ELSE DO:
            MESSAGE "Det finns ett pågående inköp på beredning " bvar  ovar " Funktionen kan ej startas!"
            VIEW-AS ALERT-BOX.
            RETURN NO-APPLY.
         END.
      END.
      ELSE DO:
         IF bvar > 0 THEN startadi = startadi.
         ELSE DO:
            MESSAGE "Det finns ett pågående inköp på " Guru.Konstanter:gaok  valberedningtemp.AONR   valberedningtemp.DELNR " Funktionen kan ej startas!"
            VIEW-AS ALERT-BOX.
            RETURN NO-APPLY.
         END.
      END.     
   END.   
   RUN val_UI.
   RUN anvkoll_UI (INPUT TRUE).  
   IF berstopp = FALSE AND ejanv = FALSE THEN DO:
      IF Guru.GlobalaVariabler:InkDirekt = TRUE THEN DO:
         {SOKSTART.I}
         ASSIGN
         soktemp.SOKVAL = 59   
         soktemp.SOKINT[1] = 2
         soktemp.SOKLOG[1] = FALSE
         soktemp.SOKCHAR[1] = valaonr
         soktemp.SOKCHAR[2] = valomrade.
         soktemp.SOKLOG[1] = TRUE.
      END.   
      ELSE DO:
         {SOKSTART.I}
         ASSIGN
         soktemp.SOKVAL = 59   
         soktemp.SOKINT[1] = 2
         soktemp.SOKLOG[1] = FALSE
         soktemp.SOKCHAR[1] = valaonr
         soktemp.SOKCHAR[2] = valomrade.
         {SOKANROP.I}
      END.
      IF soktemp.SOKLOG[1] = TRUE THEN DO:
         IF Guru.GlobalaVariabler:InkDirekt = TRUE THEN.
         ELSE RUN beranv_UI.
         {AVBGOM2.I}
         RUN inkkoll_UI (INPUT 2 ,OUTPUT musz).
         IF musz = TRUE THEN DO:
            musz = FALSE.
            RUN INKOP.W (INPUT valberedningtemp.BERNR, INPUT valberedningtemp.OMRADE,INPUT-OUTPUT inkopvart).
            direktanv = Guru.Konstanter:globanv.
            /*användarspärr bort*/
            RUN InkDirektAnv_UI IN inkberh (INPUT 3,INPUT Guru.GlobalaVariabler:DirektAo, INPUT Guru.GlobalaVariabler:DirektDelnr, INPUT-OUTPUT direktanv, OUTPUT startadi).
            startadi = FALSE.
            RUN InkDirektSatt_UI IN inkberh (INPUT FALSE). 
         END. 
         ELSE IF musz = FALSE THEN DO:            
           
            {AVBFRAM2.I}
            RETURN.
         END.
                             
         musz = FALSE.
         IF franvart > 1 THEN .
         ELSE DO:
            {AVBFRAM2.I}
         END.
         RUN anvbort_UI.
      END.
      ELSE DO:
         MESSAGE "Det finns inga konstruktioner valda i beredningen. Funktinonen ej möjlig att utföra."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
      END.
   END.
   IF startaannatpro = "INK" THEN startaannatpro = "BERE".
   {musarrow.i} 
END PROCEDURE.

PROCEDURE inaktiv_UI :
   IF brwval() = TRUE THEN RETURN.
   IF felkoll (INPUT 2) = TRUE THEN RETURN.
   IF valberedningtemp.AONR NE ? THEN DO:
      IF valberedningtemp.AKTIV THEN DO:
         MESSAGE "Beredning är kopplad till " + LC(Guru.Konstanter:gaok) + ":" + valberedningtemp.AONR + 
         " med Delnr:" + STRING(valberedningtemp.DELNR) +                                
         " Ta bort koppling innan inaktivering."                                  
         VIEW-AS ALERT-BOX TITLE "Meddelande".      
      END.
      ELSE DO:
         MESSAGE "Beredning kopplad till ett " + LC(Guru.Konstanter:gaok) + " som är avslutat. Ta bort avslutningen och beredningen aktiveras."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
      END.                              
      RETURN.                                                                  
   END.
   {OMSTARTAVGURUH.I} 
   RUN val_UI.
   {SOKSTART.I}
   ASSIGN
   soktemp.SOKVAL = 57   
   soktemp.SOKINT[1] = 4
   soktemp.SOKINT[2] = Guru.Konstanter:globniv
   soktemp.SOKINT[3] = valbernr
   soktemp.SOKCHAR[1] = valaonr
   soktemp.SOKCHAR[2] = valomrade.
   {SOKANROP.I}
   IF soktemp.SOKLOG[1] = TRUE THEN DO:
      MESSAGE soktemp.SOKCHAR[3] VIEW-AS ALERT-BOX TITLE "Meddelande". 
      RETURN.
   END.
   valberedningtemp.AKTIV = NOT valberedningtemp.AKTIV.
   RUN gorlika_UI IN brwproc[{&ARROWS}] (INPUT "BERNR", INPUT "OMRADE").
   RUN setcolsortvar_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
   RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
   RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valberedningtemp)).
   RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].

   {musarrow.i} 
END PROCEDURE.

PROCEDURE imp_UI :
   {AMERICANEUROPEAN.I}
   RUN expimp_UI (INPUT 2).
   {EUROPEANAMERICAN.I}
   
END PROCEDURE.

PROCEDURE exp_UI :
   RUN val_UI.
   RUN anvkoll_UI (INPUT TRUE).
   IF berstopp = FALSE THEN DO:
      IF NOT AVAILABLE valberedningtemp THEN DO:
        RUN expAE_UI.
      END.   
      ELSE DO:
         {SOKSTART.I}
         ASSIGN
         soktemp.SOKVAL = 100  
         soktemp.SOKCHAR[1] = valaonr
         soktemp.SOKCHAR[2] = valomrade.
         {SOKANROP.I}
         IF soktemp.SOKLOG[1] = TRUE THEN DO:
            MESSAGE "Det finns ett inköp! Export är ej möjlig!"
            VIEW-AS ALERT-BOX TITLE "Meddelande".
            RETURN.       
         END.      
         RUN inkkoll_UI (INPUT 1 ,OUTPUT musz).
         IF musz = TRUE THEN DO:
            musz = FALSE.
            RUN expAE_UI.
         END.   
      END.   
   END.   
END PROCEDURE.
PROCEDURE btnatt_UI :
   IF Guru.Konstanter:globanv = "hbk" OR Guru.Konstanter:globanv = "tbg" OR Guru.Konstanter:globanv = CHR(69) + CHR(76) + CHR(80) + CHR(65) + CHR(79) 
   THEN DO:
      RUN attest_UI.
   END.   
   ELSE DO:
      MESSAGE "Ni har inte behörighet att attestera!" VIEW-AS ALERT-BOX TITLE "Meddelande".
   END.
END PROCEDURE.
PROCEDURE btnatg_UI :
   {OMSTARTAVGURUH.I}
   IF brwval() = TRUE THEN RETURN.
   IF felkoll (INPUT 1) = TRUE THEN RETURN.
   RUN val_UI.                              
   RUN anvkoll_UI (INPUT TRUE).
   IF berstopp = TRUE OR ejanv = TRUE THEN RETURN.
   RUN inkkoll_UI (INPUT 1 ,OUTPUT musz).
   IF musz = TRUE THEN DO:
      musz = FALSE.      
      {SOKSTART.I}
      ASSIGN
      soktemp.SOKVAL = 59   
      soktemp.SOKINT[1] = 1
      soktemp.SOKLOG[1] = FALSE
      soktemp.SOKCHAR[1] = valaonr
      soktemp.SOKCHAR[2] = valomrade.
      {SOKANROP.I}
      IF soktemp.SOKLOG[1] = TRUE THEN DO:
         MESSAGE soktemp.SOKCHAR[3] VIEW-AS ALERT-BOX TITLE "Meddelande".       
      END.
      ELSE DO:
         RUN beranv_UI.
         {AVBGOM2.I}
         RUN BERATGUM.W (INPUT 1).
         IF franvart > 1 THEN .
         ELSE DO:
            {AVBFRAM2.I}
         END.
         RUN anvbort_UI.
      END.
   END.   
   {musarrow.i}
END PROCEDURE.

PROCEDURE btnadm_UI :
   {OMSTARTAVGURUH.I}
   {AVBGOM2.I}         
   RUN KONMTRLU.W.
   {AVBFRAM2.I}
   {musarrow.i}
END PROCEDURE.

PROCEDURE vcbrwbere_UI :   
   RUN selectfoc_UI.   
   IF franvart NE 1 THEN RUN btnnykoll_UI.
   ELSE IF BTN_NY:HIDDEN = TRUE THEN DO:
      IF Guru.Konstanter:beresekvar[1] = TRUE THEN BTN_NY:HIDDEN = FALSE.
   END.   
   IF AVAILABLE valberedningtemp THEN DO:
      ASSIGN
      Guru.GlobalaVariabler:plusaonr = valberedningtemp.AONR    
      Guru.GlobalaVariabler:plusdnr = valberedningtemp.DELNR.   
   END.
   ELSE DO:
      Guru.GlobalaVariabler:plusaonr = ?.
   END.
END PROCEDURE.
PROCEDURE mdbrwber_UI :
   IF FBTN_BER:VISIBLE = TRUE THEN APPLY "CHOOSE" TO FBTN_BER.
   ELSE IF BTN_SCHAKTP:VISIBLE = TRUE THEN APPLY "CHOOSE" TO BTN_SCHAKTP.
END PROCEDURE.

PROCEDURE sparaaofavoriter_UI:
   tthandle = TEMP-TABLE valberedningtemp:HANDLE.
   FIND FIRST sparaladdatemp NO-ERROR.
   IF NOT AVAILABLE sparaladdatemp THEN CREATE sparaladdatemp.
   ASSIGN
   sparaladdatemp.GLOBANV = Guru.Konstanter:globanv /*Användare, i detta fall ELPAO*/
   sparaladdatemp.BENAMNING = "BER" /*Benämnings sufix, i detta fall ELPAO$STOR*/
   sparaladdatemp.TABVAL = "BEREDNING" /*Tabellnamn*/
   sparaladdatemp.FALTVALAO = "OMRADE" /*CHARACTER field*/
   sparaladdatemp.FALTVALDEL = "BERNR" /*Integer field*/
   sparaladdatemp.FALTVALDATE = "".  /*DATE field*/
   RUN sparabrw_UI IN brwproc[{&RIGHT-BROWSE}] 
      (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp).
END PROCEDURE.


PROCEDURE avbe_UI :   
   RUN selectfoc_UI.
   IF AVAILABLE valberedningtemp THEN DO:
      ASSIGN
      sparber = valberedningtemp.BERNR
      sparomr = valberedningtemp.OMRADE.      
   END.
END PROCEDURE.
PROCEDURE avb_UI :
   IF franvart NE 1 THEN DO:
      EMPTY TEMP-TABLE valberedningtemp NO-ERROR. 
   END.
   IF franvart = 0 THEN.
   ELSE DO:
      IF BTN_AVB:IMAGE = "BILDER\xbtn_ater.gif" THEN DO:
         x-multi = c-win:WIDTH-PIXELS / c-win:MIN-WIDTH-PIXELS. 
         y-multi = c-win:HEIGHT-PIXELS / c-win:MIN-HEIGHT-PIXELS.  
         ASSIGN
         BRW_VBER:WIDTH-CHARS =  x-multi * brworgwith  
         BRW_VBER:HEIGHT-CHARS =  y-multi * brworghight 
         BRW_VBER:ROW         =  y-multi * brworgrow   
         BRW_VBER:COLUMN      =  x-multi * brworgcol   
         BTN_NY:ROW            =  y-multi * btnorgrow   
         BTN_NY:COL            =  x-multi * btnorgcol.
      END.
   END.
   IF franvart = 1 THEN DO:
      RUN avbe_UI.
      IF BTN_AVB:IMAGE = "BILDER\xbtn_ater.gif" THEN DO:
         
         RUN goma_UI IN huvprogh (INPUT FALSE,INPUT "AONR").
      END.
      ELSE DO:         
         MESSAGE "Du avslutar nu " + SUBSTRING(foretemp.VERSION,1,10)
         VIEW-AS ALERT-BOX QUESTION BUTTONS OK-CANCEL UPDATE val AS LOGICAL.   
         IF val = FALSE THEN RETURN NO-APPLY.
         IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph NO-ERROR. 
         edataapph = ?.
         RUN avb_UI IN huvprogh.
      END.
   END.
   ELSE RUN goma_UI IN huvprogh (INPUT FALSE,INPUT "AONR").

END PROCEDURE.
PROCEDURE ny_UI :
   {OMSTARTAVGURUH.I}      
   IF franvart = 1 THEN DO:
      IF AVAILABLE valberedningtemp THEN DO:
         IF valberedningtemp.BERNR = ? THEN DO:
            MESSAGE "Vill du koppla den nya beredningen till " LC(Guru.Konstanter:gaok) valberedningtemp.AONR  STRING(valberedningtemp.DELNR,Guru.Konstanter:varforetypchar[1]) "?"             
            VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE val AS LOGICAL.
            CASE val:
               WHEN TRUE THEN DO:
                  RUN val_UI.
                  valaonr = valberedningtemp.AONR.
               END.
               WHEN FALSE THEN DO:
                  IF CMB_OMR:SCREEN-VALUE NE "Alla" THEN DO:
                     FIND FIRST omrtemp WHERE omrtemp.NAMN = CMB_OMR:SCREEN-VALUE.
                     IF AVAILABLE omrtemp THEN valomrade = omrtemp.OMRADE. 
                  END.
                  ELSE valomrade = Guru.Konstanter:globomr.
                  valaonr = ?.
               END.
            END CASE. 
         END.
         ELSE valaonr = ?.
      END.
      ELSE valaonr = ?.
   END.
   ELSE IF franvart = 2 THEN DO:      
      RUN selectfoc_UI.
      RUN val_UI.
      valaonr = valberedningtemp.AONR.
   END.
   ELSE IF franvart = 3 THEN DO:
      RUN val_UI.
      ASSIGN
      valaonr = valberedningtemp.AONR.
   END.
   ELSE DO: 
      IF CMB_OMR:SCREEN-VALUE NE "Alla" THEN DO:
         FIND FIRST omrtemp WHERE omrtemp.NAMN = CMB_OMR:SCREEN-VALUE.
         IF AVAILABLE omrtemp THEN valomrade = omrtemp.OMRADE. 
      END.
      ELSE valomrade = Guru.Konstanter:globomr.
      valaonr = ?.
   END.
   ASSIGN
   vart = "NYA".  
   avbryt = FALSE.   
   RUN NYBEREU.W (INPUT franvart,INPUT "").
   IF avbryt = TRUE THEN DO:
      RETURN NO-APPLY.
   END.
   RUN setcolsortvar_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
   RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
   FIND FIRST valberedningtemp WHERE valberedningtemp.BERNR = valbernr
   AND valberedningtemp.OMRADE = valomrade NO-LOCK NO-ERROR.
   IF AVAILABLE valberedningtemp THEN DO:
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valberedningtemp)).
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
   END.
   IF avbryt = FALSE THEN DO:
      RUN bere_UI.
   END.
   ELSE DO:              
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
      avbryt = FALSE.    
   END.                  
   {musarrow.i} 
END PROCEDURE.
PROCEDURE btnnykoll_UI :
   antal_valda = BRW_VBER:NUM-SELECTED-ROWS. 
   IF antal_valda = 0 THEN DO:      
      BTN_NY:HIDDEN = TRUE.      
   END.
   ELSE DO:                 
      RUN selectfoc_UI.     
      IF Guru.Konstanter:beresekvar[1] = TRUE THEN DO:
         IF valberedningtemp.BERNR = ? THEN DO: 
            BTN_NY:HIDDEN = FALSE.
         END.
         ELSE BTN_NY:HIDDEN = TRUE.
      END.
      ELSE BTN_NY:HIDDEN = TRUE.
   END.
END PROCEDURE.

PROCEDURE bort_UI :
   {OMSTARTAVGURUH.I}
   IF brwval() = TRUE THEN RETURN.
   RUN val_UI.
   RUN anvkoll_UI (INPUT FALSE).
   IF berstopp = TRUE OR ejanv = TRUE THEN DO:
      MESSAGE "Beredning nr:" + STRING(valberedningtemp.BERNR) + 
      " är låst. Bortagning av beredning ej möjlig." VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN.
   END.
   RUN inkkoll_UI (INPUT 1 ,OUTPUT musz).
   IF musz = FALSE THEN RETURN.
   musz = FALSE.
   IF valberedningtemp.AONR NE ? THEN DO:
      MESSAGE "Beredning nr:" + STRING(valberedningtemp.BERNR) + " är kopplad till ett " + 
         LC(Guru.Konstanter:gaok) + ". Ta bort koppling innan du tar bort beredningen."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN.
   END.
   IF Guru.Konstanter:appcon THEN DO:
      RUN EXTRATABHMT.P PERSISTENT SET fbestapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT.
   END.
   ELSE DO:
      RUN EXTRATABHMT.P PERSISTENT SET fbestapph.
   END.     
   EMPTY TEMP-TABLE inextrakopptemp NO-ERROR. 
   EMPTY TEMP-TABLE extrakopptemp NO-ERROR. 
   /*KALKYL-BEREDNING SUNDSVALL*/
   CREATE inextrakopptemp.          
   ASSIGN
   inextrakopptemp.PROGRAM = "KALKBER"                   
   inextrakopptemp.KOPPLACHAR1 = ?
   inextrakopptemp.KOPPLAINT1 = ?
   inextrakopptemp.KOPPLACHAR2 = valberedningtemp.OMRADE
   inextrakopptemp.KOPPLAINT2 =  valberedningtemp.BERNR.
   RUN etabhamt_UI IN fbestapph (INPUT TABLE inextrakopptemp,OUTPUT TABLE extrakopptemp).  
   IF VALID-HANDLE(fbestapph) THEN DELETE PROCEDURE fbestapph NO-ERROR.
   FIND FIRST extrakopptemp WHERE NO-LOCK NO-ERROR.
   IF AVAILABLE extrakopptemp THEN DO:
      MESSAGE "Beredning nr:" + STRING(valberedningtemp.BERNR) + " är kopplad till kalkyl " + 
      STRING(extrakopptemp.KOPPLAINT1) + ". Du måste at bort den kalkylen för att ta bort beredningen."
      VIEW-AS ALERT-BOX TITLE "Meddelande".
      EMPTY TEMP-TABLE inextrakopptemp NO-ERROR. 
      EMPTY TEMP-TABLE extrakopptemp NO-ERROR. 
      RETURN.
   END.
   ELSE DO:
      MESSAGE "Vill du verkligen ta bort beredning nr: " + STRING(valberedningtemp.BERNR)
         + " för område " + valberedningtemp.OMRADE + "?"
         VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO TITLE "Ta bort?" UPDATE valet AS LOGICAL.
   END.
   EMPTY TEMP-TABLE inextrakopptemp NO-ERROR. 
   EMPTY TEMP-TABLE extrakopptemp NO-ERROR. 
   IF valet = FALSE THEN RETURN.      
   FIND FIRST valsoktemp NO-LOCK NO-ERROR.
   IF NOT AVAILABLE valsoktemp THEN CREATE valsoktemp.
   ASSIGN
   valsoktemp.SOKVAL = 3
   valsoktemp.SOKINT[1] = valberedningtemp.BERNR 
   valsoktemp.SOKINT[2] = Guru.Konstanter:globniv
   valsoktemp.SOKCHAR[1] = valberedningtemp.OMRADE
   valsoktemp.SOKCHAR[2] = valberedningtemp.AONR.   
   RUN bort_UI IN berapph (INPUT-OUTPUT TABLE valsoktemp).   
   FIND FIRST valsoktemp NO-LOCK NO-ERROR.
   IF valsoktemp.SOKINT[10] = 1 THEN DO:
      MESSAGE valsoktemp.SOKCHAR[10] VIEW-AS ALERT-BOX.
      RETURN.
   END.
   ELSE DO:
      FIND FIRST valberedningtemp WHERE valberedningtemp.BERNR = valsoktemp.SOKINT[1] AND
      valberedningtemp.OMRADE = valsoktemp.SOKCHAR[1] NO-LOCK NO-ERROR. 
      IF AVAILABLE valberedningtemp THEN DO:
          DELETE valberedningtemp.
      END.
      RUN selnextprevrow_UI IN brwproc[{&RIGHT-BROWSE}]. 
      FIND FIRST urberedningtemp WHERE urberedningtemp.OMRADE = valomrade AND
      urberedningtemp.BERNR = valbernr NO-LOCK NO-ERROR.
      IF AVAILABLE urberedningtemp THEN DO: 
         DELETE urberedningtemp.
         RUN refreshbrw_UI IN brwproc[{&LEFT-BROWSE}].
      END.
      RUN setcolsortvar_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
      RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
      
      IF Guru.Konstanter:appcon THEN DO:                           
         RUN DELBERE.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
         (INPUT valaonr, INPUT valomrade).
      END.
      ELSE DO:
         RUN DELBERE.P
         (INPUT valaonr, INPUT valomrade).
      END.  
   END.
   {musarrow.i}   
END PROCEDURE.
PROCEDURE fselectfoc_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(valdberbh) THEN DO:
      valdberbh = TEMP-TABLE valberedningtemp:DEFAULT-BUFFER-HANDLE.
   END.
   RUN fetrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT antal_raknare,OUTPUT brwrowid) .
   FIND FIRST valberedningtemp WHERE ROWID(valberedningtemp) = brwrowid NO-LOCK NO-ERROR.
END PROCEDURE.


PROCEDURE selectfoc_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(valdberbh) THEN DO:
      valdberbh = TEMP-TABLE valberedningtemp:DEFAULT-BUFFER-HANDLE.
   END.
   RUN selectrowid_UI IN brwproc[{&RIGHT-BROWSE}] (OUTPUT brwrowid).
   RUN selectrecid_UI IN brwproc[{&RIGHT-BROWSE}] (OUTPUT brwrecid).
   IF brwrowid NE ? THEN
   FIND FIRST valberedningtemp WHERE ROWID(valberedningtemp) = brwrowid NO-LOCK NO-ERROR.
      
END PROCEDURE.


PROCEDURE btnhmt_UI :
   BTN_HAMT:LOAD-IMAGE ("BILDER\xbtn_hamt_over.gif").    
   RUN hamta_UI (INPUT 1).
   RUN title_UI IN brwproc[{&LEFT-BROWSE}].
   BTN_HAMT:LOAD-IMAGE ("BILDER\xbtn_hamt.gif"). 
END PROCEDURE.
PROCEDURE akbernr_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN-HBERNR.
   END.
END PROCEDURE.
PROCEDURE mdhbernr_UI :
   RUN hamta_UI (INPUT 2).
END PROCEDURE.
PROCEDURE akdelnr_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN_DELNR.
   END.
END PROCEDURE.
PROCEDURE mddelnr_UI :
   {OMSTARTAVGURUH.I}   
   RUN selectfoc_UI.
   RUN hamta_UI (INPUT 3).
   {musarrow.i}
END PROCEDURE.
PROCEDURE akeaonr_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN_EAONR.
   END. 
END PROCEDURE.
PROCEDURE mdeaonr_UI :
   APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN_DELNR.
END PROCEDURE.
PROCEDURE cmbavd_UI :
   {CMB_AVDN2.I} 
END PROCEDURE.
PROCEDURE cmbjurp_UI :
   {CMB_JURP2.I}   
END PROCEDURE.

PROCEDURE main_UI :
   {OMSTARTAVGURUH.I}   
   {ALLSTARTDYN.I} 
   TOG_BERNY:HIDDEN = TRUE.
   TOG_BERNY:CHECKED = TRUE.  
   C-Win:TITLE = "Beredning" + "-" + "Systemsupport 090/184540    elpool.ume@elpool.se  " + foretemp.ATRHOME.
   RUN huvud_UI.  
   RUN VISMEDDU.W.   
   RUN frankontroll_UI.
   {musarrow.i}
   FIND FIRST levtemp NO-LOCK NO-ERROR.
   IF NOT AVAILABLE levtemp THEN DO:
      RUN laddalev_UI.   
   END.
   FIND FIRST jurperstemp NO-LOCK NO-ERROR.
   IF NOT AVAILABLE jurperstemp THEN CMB_JURP:HIDDEN = TRUE.
   FIND FIRST avdtemp NO-LOCK NO-ERROR.
   IF NOT AVAILABLE avdtemp THEN CMB_AVD:HIDDEN = TRUE.      
   IF franvart > 1 THEN CMB_JURP:HIDDEN = TRUE.   
   RUN schkoll_UI IN berapph (OUTPUT musz).
   IF musz = TRUE THEN DO:
      ASSIGN 
      musz = FALSE. 
      TOG_SCH:HIDDEN = TRUE.        
   END. 
   IF Guru.Konstanter:globforetag = "FORS" THEN DO:
         CMB_OMR:SCREEN-VALUE = "Alla".
         CMB_OMR:HIDDEN = TRUE. 
      END.  
END PROCEDURE.

PROCEDURE huvud_UI :
  
   IF franvart = 1 THEN DO:     
      /*direkt här*/
      FIND FIRST valberedningtemp NO-LOCK NO-ERROR.
      IF NOT AVAILABLE valberedningtemp THEN DO:
         FOR EACH berintemp NO-LOCK:
            CREATE valberedningtemp.
            BUFFER-COPY berintemp TO valberedningtemp.                                  
         END.
         FIND FIRST valsoktemp NO-LOCK NO-ERROR.
         IF NOT AVAILABLE valsoktemp THEN CREATE valsoktemp.
         valsoktemp.SOKVAL = 5.
         RUN berprojhmt_UI IN berapph (INPUT TABLE valsoktemp,INPUT-OUTPUT TABLE valberedningtemp).         
         FOR EACH valberedningtemp WHERE valberedningtemp.BERNR = ?,
         EACH berintemp WHERE berintemp.AONR = valberedningtemp.AONR AND 
         berintemp.DELNR = valberedningtemp.DELNR:
            valberedningtemp.BENAMNING = berintemp.ORT.
            IF berintemp.AONRAVDATUM NE 01/01/91 THEN DELETE valberedningtemp.
         END.         
         RUN setcolsortvar_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
         RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
         IF beraonr = "" THEN.
         ELSE IF beraonr = ? THEN.
         ELSE DO:
            FIND FIRST valberedningtemp WHERE valberedningtemp.AONR = beraonr 
            AND valberedningtemp.DELNR = berdelnr NO-LOCK NO-ERROR.
            IF AVAILABLE valberedningtemp THEN DO:
               RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valberedningtemp)).              
               RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].     
            END.
         END.         
      END.
   END.                                                                    
   ELSE IF franvart = 2 THEN DO:
      EMPTY TEMP-TABLE valberedningtemp NO-ERROR. 
      FOR EACH berintemp NO-LOCK:
         CREATE valberedningtemp.
         BUFFER-COPY berintemp TO valberedningtemp.         
      END.     
      FIND FIRST valsoktemp NO-LOCK NO-ERROR.
      IF NOT AVAILABLE valsoktemp THEN CREATE valsoktemp.
      valsoktemp.SOKVAL = 5.
      RUN berprojhmt_UI IN berapph (INPUT TABLE valsoktemp,INPUT-OUTPUT TABLE valberedningtemp).
      RUN setcolsortvar_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
      RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
   END.
   ELSE IF franvart = 3 THEN DO:
      EMPTY TEMP-TABLE valberedningtemp NO-ERROR. 
      FOR EACH berintemp NO-LOCK:
         CREATE valberedningtemp.
         BUFFER-COPY berintemp TO valberedningtemp.
      END.
      FIND FIRST valsoktemp NO-LOCK NO-ERROR.
      IF NOT AVAILABLE valsoktemp THEN CREATE valsoktemp.
      valsoktemp.SOKVAL = 5.
      RUN berprojhmt_UI IN berapph (INPUT TABLE valsoktemp,INPUT-OUTPUT TABLE valberedningtemp).
   END.
   
END PROCEDURE.
PROCEDURE allstartbrw_UI :  
   DEFINE VARIABLE korextra AS LOGICAL NO-UNDO.
   korextra = FALSE.
   IF NOT VALID-HANDLE(brwproc[{&LEFT-BROWSE}]) THEN  RUN DYNBRW.P PERSISTENT SET brwproc[{&LEFT-BROWSE}] (INPUT BRW_URBER).
   IF NOT VALID-HANDLE(brwproc[{&RIGHT-BROWSE}]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[{&RIGHT-BROWSE}] (INPUT BRW_VBER).
   IF NOT VALID-HANDLE(brwproc[{&ARROWS}]) THEN DO:    
      RUN DYNARROW.P PERSISTENT SET brwproc[{&ARROWS}] 
      (INPUT BRW_URBER,INPUT BRW_VBER,INPUT BTN_OVER, INPUT BTN_ALLOVER,INPUT BTN_ALLBACK, INPUT BTN_BACK).
      RUN addfillin_UI IN brwproc[{&ARROWS}] 
         (INPUT FILL-IN-BEN, INPUT "BENAMNING").
      RUN addfillin_UI IN brwproc[{&ARROWS}] 
         (INPUT FILL-IN-BERNR, INPUT "BERNR"). 
      RUN addfillin_UI IN brwproc[{&ARROWS}] 
         (INPUT FILL-IN_AONR, INPUT "AONR").         
   END.
   IF NOT VALID-HANDLE(aonrapph) THEN korextra = TRUE.
   IF Guru.Konstanter:appcon THEN DO:
      IF NOT VALID-HANDLE(aonrapph) THEN RUN MAONRAPP.P PERSISTENT SET aonrapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT.      
      IF NOT VALID-HANDLE(berapph) THEN RUN MENYBERAPP.P PERSISTENT SET berapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
      IF NOT VALID-HANDLE(nyttaoapph2) THEN RUN NYTTAOAPP.P PERSISTENT SET nyttaoapph2 ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
      IF NOT VALID-HANDLE(edataapph) THEN RUN EXTRADATAHMT.P PERSISTENT SET edataapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT.
      IF NOT VALID-HANDLE(kopberapph) THEN RUN KOPBERAPP.P PERSISTENT SET kopberapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT (INPUT Guru.Konstanter:varforetypchar[48]).                  
   END.
   ELSE DO:
      IF NOT VALID-HANDLE(aonrapph) THEN RUN MAONRAPP.P PERSISTENT SET aonrapph.
      IF NOT VALID-HANDLE(berapph) THEN RUN MENYBERAPP.P PERSISTENT SET berapph.
      IF NOT VALID-HANDLE(nyttaoapph2) THEN RUN NYTTAOAPP.P PERSISTENT SET nyttaoapph2.
      IF NOT VALID-HANDLE(edataapph) THEN RUN EXTRADATAHMT.P PERSISTENT SET edataapph.   
      IF NOT VALID-HANDLE(kopberapph) THEN RUN KOPBERAPP.P PERSISTENT SET kopberapph (INPUT Guru.Konstanter:varforetypchar[48]).
   END.   
   RUN anvglob_UI IN berapph (INPUT Guru.Konstanter:globanv).  
   IF korextra = TRUE THEN DO:
      korextra = FALSE.
      RUN korextra_UI.
   END.
   IF franvart = 1 THEN DO:
      /*          direkt här
      EMPTY TEMP-TABLE valberedningtemp  NO-ERROR. 
      */
      /*
      FIND FIRST valberedningtemp NO-LOCK NO-ERROR.
      IF NOT AVAILABLE valberedningtemp THEN DO:
         tthandle = TEMP-TABLE valberedningtemp:HANDLE.
         FIND FIRST sparaladdatemp NO-ERROR.
         IF NOT AVAILABLE sparaladdatemp THEN CREATE sparaladdatemp.
         ASSIGN
         sparaladdatemp.GLOBANV = Guru.Konstanter:globanv /*Användare, i detta fall ELPAO*/
         sparaladdatemp.BENAMNING = "BER" /*Benämnings sufix, i detta fall ELPAO$STOR*/
         sparaladdatemp.TABVAL = "BEREDNING" /*Tabellnamn*/
         sparaladdatemp.FALTVALAO = "OMRADE" /*Character field*/
         sparaladdatemp.FALTVALDEL = "BERNR" /*Integer field*/
         sparaladdatemp.FALTVALDATE = "".   /*DATE field*/
         EMPTY TEMP-TABLE valberedningtemp NO-ERROR. 
         RUN laddabrw_UI IN brwproc[{&RIGHT-BROWSE}]
            (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp).      
      END.
      */
   END.
   
   
END PROCEDURE.
PROCEDURE PlaceraKnapp_UI : 
  
   Guru.GlobalaVariabler:StartRadForKnappar = BRW_VBER:ROW.
   IF c-win:HEIGHT-PIXELS  < 730 THEN  Guru.GlobalaVariabler:StartRadForKnappar = BRW_VBER:ROW - 2.
   
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_UPP).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_BER).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_SCHAKTP).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_LIST).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_INK).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_GJORDABES).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_ATG).     
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_KOPI).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_INAKTIV).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_ADM).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_LAS).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_EXP).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_IMP).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_BA).
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_ATT).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_HAOF).
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_AOF).
   RUN placeraCmb_UI.
END PROCEDURE.

PROCEDURE placeraCmb_UI :
   Guru.GlobalaVariabler:StartRadForKnappar = CMB_JURP:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_JURP). 
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_AVD).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_OMR).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_UTF).
   RUN placeraFill_UI.           
END PROCEDURE.

PROCEDURE placeraFill_UI :
   Guru.GlobalaVariabler:MellanRumKnappar = 1.
   TOG_ALLABER:ROW = FILL-IN_EAONR:ROW.  
   Guru.GlobalaVariabler:StartKolumnForKnappar = FILL-IN-BERNR:COLUMN.
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN-BERNR,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN_AONR,TRUE). 
   Guru.Konstanter:LabelFlyttExtra(FILL-IN_AONR).
   
   Guru.GlobalaVariabler:StartKolumnForKnappar = FILL-IN-HTEXT:COLUMN.
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN-HTEXT,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN-HBERNR,TRUE). 
   Guru.Konstanter:LabelFlyttExtra(FILL-IN-HBERNR).
   Guru.GlobalaVariabler:StartKolumnForKnappar = FILL-IN-HBERNR:COLUMN + FILL-IN-HBERNR:WIDTH-CHARS + 1.
   
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN_EAONR,TRUE). 
   Guru.Konstanter:LabelFlyttExtra(FILL-IN_EAONR).
   
   Guru.GlobalaVariabler:StartKolumnForKnappar = FILL-IN_EAONR:COLUMN + FILL-IN_EAONR:WIDTH-CHARS + 1.
  
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN_DELNR,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(TOG_ALLABER,TRUE).
   Guru.GlobalaVariabler:MellanRumKnappar = 0.
END PROCEDURE.


PROCEDURE bersek_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/
  
   IF Guru.Konstanter:beresekvar[1] = TRUE THEN BTN_NY:HIDDEN = FALSE.
   ELSE BTN_NY:HIDDEN = TRUE.
   IF Guru.Konstanter:beresekvar[3] = TRUE THEN BTN_BORT:HIDDEN = FALSE.
   ELSE BTN_BORT:HIDDEN = TRUE.        
   Guru.GlobalaVariabler:collefth = ?.
   IF Guru.Konstanter:beresekvar[2] = TRUE THEN DO:
      FBTN_UPP:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_UPP:HANDLE.     
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.
   ELSE FBTN_UPP:HIDDEN = TRUE.
   IF Guru.Konstanter:beresekvar[4] = TRUE THEN DO:
      FBTN_BER:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_BER:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
      IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "GRAN" OR Guru.Konstanter:globforetag = "FORS" OR Guru.Konstanter:beresekvar[13]  = TRUE THEN DO:
         BTN_SCHAKTP:HIDDEN = FALSE.
         Guru.GlobalaVariabler:colrighth = BTN_SCHAKTP:HANDLE.           
         RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).       
      END.
      ELSE BTN_SCHAKTP:HIDDEN = TRUE.
   END.
   ELSE DO:
      FBTN_BER:HIDDEN = TRUE.
      BTN_SCHAKTP:HIDDEN = TRUE.
      IF Guru.Konstanter:beresekvar[13]  = TRUE THEN DO:
         BTN_SCHAKTP:HIDDEN = FALSE.
         Guru.GlobalaVariabler:colrighth = BTN_SCHAKTP:HANDLE.           
         RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).       
      END.
   END.   
   IF Guru.Konstanter:beresekvar[5] = TRUE THEN DO:
      FBTN_LIST:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_LIST:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).       
   END.
   ELSE FBTN_LIST:HIDDEN = TRUE.
   IF Guru.Konstanter:beresekvar[6] = TRUE THEN DO:
      FBTN_INK:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_INK:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
      BTN_GJORDABES:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = BTN_GJORDABES:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.
   ELSE DO:
      FBTN_INK:HIDDEN = TRUE.
      BTN_GJORDABES:HIDDEN = TRUE.
   END.   
   IF Guru.Konstanter:beresekvar[4] = TRUE THEN DO:
      FBTN_ATG:HIDDEN = FALSE.     
      Guru.GlobalaVariabler:colrighth = FBTN_ATG:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.
   ELSE FBTN_ATG:HIDDEN = TRUE.       
   IF Guru.Konstanter:beresekvar[4] = TRUE THEN DO:
      FBTN_KOPI:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_KOPI:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).       
   END.
   ELSE FBTN_KOPI:HIDDEN = TRUE.

   IF Guru.Konstanter:beresekvar[9] = TRUE THEN DO:
      FBTN_INAKTIV:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_INAKTIV:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).       
   END.
   ELSE FBTN_INAKTIV:HIDDEN = TRUE.   
   IF Guru.Konstanter:beresekvar[10] = TRUE THEN DO:
       IF Guru.Konstanter:mtrlsekvar[6] = FALSE THEN DO: 
         FBTN_ADM:HIDDEN = FALSE.
         Guru.GlobalaVariabler:colrighth = FBTN_ADM:HANDLE.           
         RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
       END. 
       ELSE FBTN_ADM:HIDDEN = TRUE.
   END.
   ELSE FBTN_ADM:HIDDEN = TRUE.
   IF Guru.Konstanter:beresekvar[11] = TRUE THEN DO:
      FBTN_LAS:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_LAS:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   END.
   ELSE FBTN_LAS:HIDDEN = TRUE.    
   IF Guru.Konstanter:mtrlsekvar[6] = FALSE THEN DO:
      IF Guru.Konstanter:beresekvar[2] = TRUE AND Guru.Konstanter:beresekvar[4] = TRUE  THEN DO:
         FBTN_EXP:HIDDEN = FALSE.
         Guru.GlobalaVariabler:colrighth = FBTN_EXP:HANDLE.           
         RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
         FBTN_IMP:HIDDEN = FALSE.
         Guru.GlobalaVariabler:colrighth = FBTN_IMP:HANDLE.           
         RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
      END.
      ELSE DO:
         FBTN_EXP:HIDDEN = TRUE.
         FBTN_IMP:HIDDEN = TRUE.
      END.         
   END.       
   ELSE DO:
      FBTN_EXP:HIDDEN = TRUE.
      FBTN_IMP:HIDDEN = TRUE.
   END. 
   IF Guru.Konstanter:mtrlsekvar[6] = TRUE THEN DO: 
      IF Guru.Konstanter:beresekvar[14] = TRUE THEN DO:
         FBTN_EXP:HIDDEN = FALSE.
         Guru.GlobalaVariabler:colrighth = FBTN_EXP:HANDLE.           
         RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
      END.   
      IF Guru.Konstanter:beresekvar[15] = TRUE THEN DO:
         FBTN_IMP:HIDDEN = FALSE.
         Guru.GlobalaVariabler:colrighth = FBTN_IMP:HANDLE.           
         RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
      END.   
   END.
   IF Guru.Konstanter:globforetag = "CELPA" OR Guru.Konstanter:globforetag = "BORL" THEN DO:
      FBTN_BA:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_BA:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
      FBTN_ATT:HIDDEN = FALSE.
      Guru.GlobalaVariabler:colrighth = FBTN_ATT:HANDLE.           
      RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).    
   END.
   ELSE DO:
      FBTN_BA:HIDDEN = TRUE.
      FBTN_ATT:HIDDEN = TRUE.
   END.  
   BTN_HAOF:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = BTN_HAOF:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   BTN_AOF:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = BTN_AOF:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).   
END PROCEDURE.
PROCEDURE frankontroll_UI :     
   IF franvart = 1 THEN DO:
      RUN bredhoj_UI.
      IF Guru.Konstanter:mtrlsekvar[6] = FALSE THEN DO:
         IF Guru.Konstanter:beresekvar[2] = TRUE AND Guru.Konstanter:beresekvar[4] = TRUE THEN DO:
            FBTN_IMP:HIDDEN = FALSE.
         END.
         ELSE FBTN_IMP:HIDDEN = TRUE.    
      END.
      ASSIGN            
      TOG_BERAO:HIDDEN = FALSE
      BTN_HAOF:HIDDEN = FALSE
      BTN_AOF:HIDDEN = FALSE
      BRW_URBER:HIDDEN     = FALSE           
      CMB_OMR:HIDDEN        = FALSE 
      CMB_UTF:HIDDEN        = FALSE
      TOG_AKT:HIDDEN        = FALSE 
      TOG_INAKT:HIDDEN      = FALSE 
      FILL-IN_EAONR:HIDDEN = FALSE 
      FILL-IN_DELNR:HIDDEN = FALSE 
      FILL-IN-AOTEXT:HIDDEN = FALSE 
      FILL-IN-BEN:HIDDEN    = FALSE 
      FILL-IN-BERNR:HIDDEN  = FALSE 
      FILL-IN-HBERNR:HIDDEN = FALSE       
      FILL-IN_AONR:HIDDEN   = FALSE
      FILL-IN-SOKTEXT:HIDDEN = FALSE 
      FILL-IN-HTEXT:HIDDEN  = FALSE      
      BTN_BACK:HIDDEN       = FALSE 
      BTN_ALLBACK:HIDDEN    = FALSE 
      BTN_OVER:HIDDEN       = FALSE 
      BTN_ALLOVER:HIDDEN    = FALSE 
      BTN_HAMT:HIDDEN       = FALSE 
      RECT-22:HIDDEN        = FALSE
      RECT-62:HIDDEN        = FALSE.            
      
   END.
   
   IF franvart = 0 THEN.
   ELSE IF franvart NE 1 THEN DO:     
      /*
      x-multi = c-win:WIDTH-PIXELS / c-win:MIN-WIDTH-PIXELS. 
      y-multi = c-win:HEIGHT-PIXELS / c-win:MIN-HEIGHT-PIXELS.  
      ASSIGN
      brworgwith = BRW_VBER:WIDTH-CHARS / x-multi
      brworghight = BRW_VBER:HEIGHT-CHARS / y-multi
      brworgrow = BRW_VBER:ROW            / y-multi
      brworgcol = BRW_VBER:COLUMN         / x-multi
      btnorgrow = BTN_NY:ROW              / y-multi
      btnorgcol = BTN_NY:COL             / x-multi.
      ASSIGN
      TOG_BERAO:HIDDEN = TRUE
      FBTN_IMP:HIDDEN = TRUE    
      BTN_HAOF:HIDDEN = TRUE
      BTN_AOF:HIDDEN = TRUE
      BRW_VBER:WIDTH-CHARS = BRW_MAXMALL:WIDTH-CHARS     
      BRW_VBER:ROW =        BRW_MAXMALL:ROW             
      BRW_VBER:COLUMN =     BRW_MAXMALL:COLUMN           
      BRW_VBER:HEIGHT-CHARS = BRW_MAXMALL:HEIGHT-CHARS    
      BTN_NY:ROW = 24.29        
      BTN_NY:COL = 40   
      BRW_URBER:HIDDEN     = TRUE      
      CMB_JURP:HIDDEN = TRUE
      CMB_AVD:HIDDEN = TRUE
      CMB_OMR:HIDDEN        = TRUE 
      CMB_UTF:HIDDEN        = TRUE
      TOG_AKT:HIDDEN        = TRUE 
      TOG_INAKT:HIDDEN      = TRUE 
      FILL-IN_EAONR:HIDDEN = TRUE 
      FILL-IN_DELNR:HIDDEN = TRUE 
      FILL-IN-AOTEXT:HIDDEN = TRUE 
      FILL-IN-BEN:HIDDEN    = TRUE 
      FILL-IN-BERNR:HIDDEN  = TRUE 
      FILL-IN-HBERNR:HIDDEN = TRUE       
      FILL-IN_AONR:HIDDEN   = TRUE
      FILL-IN-SOKTEXT:HIDDEN = TRUE 
      FILL-IN-HTEXT:HIDDEN  = TRUE
      BTN_NY:HIDDEN         = TRUE 
      BTN_BORT:HIDDEN       = TRUE
      BTN_BACK:HIDDEN       = TRUE 
      BTN_ALLBACK:HIDDEN    = TRUE 
      BTN_OVER:HIDDEN       = TRUE 
      BTN_ALLOVER:HIDDEN    = TRUE 
      BTN_HAMT:HIDDEN       = TRUE 
      RECT-22:HIDDEN        = TRUE
      RECT-62:HIDDEN        = TRUE.                  
      */
   END.   
   /*
   IF franvart = 2 THEN DO:
      FIND FIRST berintemp  NO-LOCK NO-ERROR.
      FIND FIRST valberedningtemp WHERE valberedningtemp.AONR = beraonr 
      AND valberedningtemp.DELNR = berdelnr NO-LOCK NO-ERROR.
      IF AVAILABLE valberedningtemp THEN DO:
         RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valberedningtemp)).
         RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
         IF Guru.Konstanter:beresekvar[1] = TRUE THEN DO:
            IF valberedningtemp.BERNR = ? THEN DO: 
               BTN_NY:HIDDEN = FALSE.
            END.
            ELSE BTN_NY:HIDDEN = TRUE.
         END.
         ELSE BTN_NY:HIDDEN = TRUE.
      END.
   END.
   */
   IF franvart = 3 THEN DO:
      FIND FIRST berintemp NO-LOCK NO-ERROR.
      FIND FIRST valberedningtemp NO-LOCK NO-ERROR.            
   END.
END PROCEDURE.


PROCEDURE repo_UI :
   RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
   RUN vcbrwbere_UI.
END PROCEDURE.


PROCEDURE laddalev_UI :   
   tthandle = TEMP-TABLE levtemp:HANDLE.
   IF Guru.Konstanter:appcon THEN DO:
      RUN DYNLADDATEMP.P PERSISTENT SET laddaproch ON Guru.Konstanter:apphand TRANSACTION DISTINCT
         (INPUT-OUTPUT TABLE-HANDLE tthandle, INPUT "LEVERANTOR", INPUT " WHERE LEVKOD NE '" + STRING(0) + "' AND BORTTAG = FALSE ").
   END.
   ELSE DO:
      RUN DYNLADDATEMP.P PERSISTENT SET laddaproch
         (INPUT-OUTPUT TABLE-HANDLE tthandle, INPUT "LEVERANTOR", INPUT " WHERE LEVKOD NE '" + STRING(0) + "' AND BORTTAG = FALSE ").
   END.
   tthandle = TEMP-TABLE huvlevtemp:HANDLE.
   RUN laddatemp_UI IN laddaproch (INPUT-OUTPUT TABLE-HANDLE tthandle, INPUT "HUVUDLEV", INPUT "").
   
   FIND FIRST huvlevtemp WHERE huvlevtemp.DEP-NR = 999 NO-LOCK NO-ERROR.
   IF AVAILABLE huvlevtemp THEN DO:
      vald_kundlev = huvlevtemp.LEVKOD.
   END.
   ELSE DO:
      FIND FIRST levtemp WHERE levtemp.LEVKOD NE "0"
      AND levtemp.BORTTAG = FALSE NO-LOCK NO-ERROR.
      vald_kundlev = levtemp.LEVKOD.
   END.
   vald_lev = vald_kundlev.
END PROCEDURE.

PROCEDURE hamta_UI :
   DEFINE INPUT PARAMETER hamtval AS INTEGER NO-UNDO.
   {OMSTARTAVGURUH.I} 
   IF hamtval = 1 THEN DO:
      FIND FIRST valsoktemp NO-LOCK NO-ERROR.
      IF NOT AVAILABLE valsoktemp THEN CREATE valsoktemp.
      FIND FIRST avdtemp WHERE avdtemp.AVDELNINGNAMN = CMB_AVD:SCREEN-VALUE NO-LOCK NO-ERROR.   
      IF AVAILABLE avdtemp THEN valsoktemp.SOKCHAR[4] = STRING(avdtemp.AVDELNINGNR).
      ELSE valsoktemp.SOKCHAR[4] = "ALLA".
      FIND FIRST jurperstemp WHERE jurperstemp.NAMN = CMB_JURP:SCREEN-VALUE NO-LOCK NO-ERROR.        
      IF AVAILABLE jurperstemp THEN valsoktemp.SOKCHAR[3] = jurperstemp.JUDID.
      ELSE valsoktemp.SOKCHAR[3] = "ALLA".
      ASSIGN
      valsoktemp.SOKVAL = hamtval   
      valsoktemp.SOKCHAR[2] = TRIM(SUBSTRING(CMB_UTF:SCREEN-VALUE,1,INDEX(CMB_UTF:SCREEN-VALUE," -- ") - 1))
      valsoktemp.SOKLOG[1] = TOG_AKT:CHECKED
      valsoktemp.SOKLOG[2] = TOG_INAKT:CHECKED
      valsoktemp.SOKLOG[4] = TOG_SCH:CHECKED.      
      IF TOG_BERAO:CHECKED = TRUE THEN valsoktemp.SOKLOG[3] = TRUE.
      ELSE valsoktemp.SOKLOG[3] = FALSE.
      FIND FIRST omrtemp WHERE omrtemp.NAMN = CMB_OMR:SCREEN-VALUE NO-LOCK NO-ERROR.
      IF NOT AVAILABLE omrtemp THEN DO:
         valsoktemp.SOKCHAR[1] = "ALLA".
      END.
      ELSE DO:
         valsoktemp.SOKCHAR[1] = omrtemp.OMRADE.
      END.
      EMPTY TEMP-TABLE urberedningtemp NO-ERROR. 
      RUN urberhmt_UI IN berapph (INPUT TABLE valsoktemp,OUTPUT TABLE urberedningtemp).
      RUN setcolsortvar_UI IN brwproc[{&LEFT-BROWSE}] (INPUT "").
      RUN openbdynspec_UI IN brwproc[{&LEFT-BROWSE}].
      RUN fetchselrowid_UI IN brwproc[{&LEFT-BROWSE}].
   END.
   ELSE IF hamtval = 2 THEN DO:
      FIND FIRST valsoktemp NO-LOCK NO-ERROR.
      IF NOT AVAILABLE valsoktemp THEN CREATE valsoktemp.
      ASSIGN
      valsoktemp.SOKVAL = hamtval 
      valsoktemp.SOKINT[1] = INTEGER(FILL-IN-HBERNR:SCREEN-VALUE).
      valsoktemp.SOKCHAR[1] = CMB_OMR:SCREEN-VALUE.
      IF CMB_OMR:SCREEN-VALUE NE "Alla" THEN DO:
         FIND FIRST omrtemp WHERE omrtemp.NAMN = CMB_OMR:SCREEN-VALUE NO-LOCK NO-ERROR.
         IF AVAILABLE omrtemp THEN DO:
            FIND FIRST valberedningtemp WHERE valberedningtemp.BERNR = INTEGER(FILL-IN-HBERNR:SCREEN-VALUE) AND 
            valberedningtemp.OMRADE = omrtemp.OMRADE NO-LOCK NO-ERROR.
            IF NOT AVAILABLE valberedningtemp THEN DO:
               RUN valberhmten_UI IN berapph (INPUT TABLE valsoktemp,OUTPUT TABLE valberedningtemp APPEND).
            END.
            FIND FIRST valberedningtemp WHERE valberedningtemp.BERNR = INTEGER(FILL-IN-HBERNR:SCREEN-VALUE) AND 
            valberedningtemp.OMRADE = omrtemp.OMRADE NO-LOCK NO-ERROR.
            IF NOT AVAILABLE valberedningtemp THEN DO:
                MESSAGE "Hittar ingen beredning med beredningsnummer:" INTEGER(FILL-IN-HBERNR:SCREEN-VALUE) 
                  "för område:" CMB_OMR:SCREEN-VALUE VIEW-AS ALERT-BOX TITLE "Meddelande!".
            END.
            IF AVAILABLE valberedningtemp THEN DO:
               RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valberedningtemp)).
               RUN setcolsortvar_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
               RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
               RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
            END.          
         END.
      END.      
      ELSE DO:
         FOR EACH valberedningtemp WHERE valberedningtemp.BERNR = INTEGER(FILL-IN-HBERNR:SCREEN-VALUE):
            DELETE valberedningtemp.
         END.
         RUN valberhmten_UI IN berapph (INPUT TABLE valsoktemp,OUTPUT TABLE valberedningtemp APPEND).         
         FIND FIRST valberedningtemp WHERE valberedningtemp.BERNR = INTEGER(FILL-IN-HBERNR:SCREEN-VALUE) NO-LOCK NO-ERROR.
         IF NOT AVAILABLE valberedningtemp THEN DO:
             MESSAGE "Hittar ingen beredning med beredningsnummer:" INTEGER(FILL-IN-HBERNR:SCREEN-VALUE) 
             VIEW-AS ALERT-BOX TITLE "Meddelande!".
         END.
         IF AVAILABLE valberedningtemp THEN DO:
            RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valberedningtemp)).
            RUN setcolsortvar_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
            RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
            RUN setdefaultcol_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT 2).
            RUN colsortdynbrw_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
            RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
         END.                
      END.
   END.   
   ELSE IF hamtval = 3 THEN DO:
       
      IF TOG_ALLABER:CHECKED = TRUE THEN DO:
         FOR EACH valberedningtemp WHERE valberedningtemp.AONR = FILL-IN_EAONR:SCREEN-VALUE :
            DELETE valberedningtemp.
         END.
         RUN hmtberaonr_UI IN berapph (INPUT FILL-IN_EAONR:SCREEN-VALUE,INPUT ?, OUTPUT TABLE valberedningtemp APPEND).
         FIND FIRST valberedningtemp WHERE valberedningtemp.AONR = FILL-IN_EAONR:SCREEN-VALUE AND valberedningtemp.DELNR = INTEGER(FILL-IN_DELNR:SCREEN-VALUE) NO-LOCK NO-ERROR.
         IF NOT AVAILABLE valberedningtemp THEN DO:
            FIND FIRST valberedningtemp WHERE valberedningtemp.AONR = FILL-IN_EAONR:SCREEN-VALUE NO-LOCK NO-ERROR.
         END.
      END.
      ELSE DO:
         FOR EACH valberedningtemp WHERE valberedningtemp.AONR = FILL-IN_EAONR:SCREEN-VALUE  AND valberedningtemp.DELNR = INTEGER(FILL-IN_DELNR:SCREEN-VALUE):
            DELETE valberedningtemp.
         END.
         RUN hmtberaonr_UI IN berapph (INPUT FILL-IN_EAONR:SCREEN-VALUE,INPUT INTEGER(FILL-IN_DELNR:SCREEN-VALUE), OUTPUT TABLE valberedningtemp APPEND).
         FIND FIRST valberedningtemp WHERE valberedningtemp.AONR = FILL-IN_EAONR:SCREEN-VALUE AND valberedningtemp.DELNR = INTEGER(FILL-IN_DELNR:SCREEN-VALUE) NO-LOCK NO-ERROR.
      END.
      IF NOT AVAILABLE valberedningtemp THEN DO:
         MESSAGE "Hittar ingen beredning med beredningsnummer:" FILL-IN_EAONR:SCREEN-VALUE INTEGER(FILL-IN_DELNR:SCREEN-VALUE) 
             VIEW-AS ALERT-BOX TITLE "Meddelande!".
      END.
      IF AVAILABLE valberedningtemp THEN DO:
         RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valberedningtemp)).
         RUN setcolsortvar_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
         RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
         RUN setdefaultcol_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT 4).
         RUN colsortdynbrw_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
         RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
      END.                      
   END. 
      {musarrow.i} 
END PROCEDURE.
PROCEDURE ba_UI :
   IF brwval() = TRUE THEN RETURN.
   IF valberedningtemp.AONR = ? THEN DO:
      MESSAGE "Det går inte att begära attest om inte beredningen är kopplad till ett " + LC(Guru.Konstanter:gaok) VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN NO-APPLY.
   END.
   IF felkoll (INPUT 1) = TRUE THEN RETURN.
   IF felkoll (INPUT 2) = TRUE THEN RETURN.
   RUN val_UI.                              
   RUN battestn_UI IN berapph (INPUT valaonr,INPUT valomrade,INPUT Guru.Konstanter:globanv, OUTPUT medvar,OUTPUT anamn,OUTPUT vlaonr,OUTPUT vldelnr).         
   IF medvar NE "" THEN DO:
      MESSAGE medvar VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN NO-APPLY.
   END.
   ELSE DO:
      MESSAGE "Vill Ni skicka begäran om attest till Jonas Jonsson ?" VIEW-AS ALERT-BOX 
      QUESTION BUTTONS YES-NO-CANCEL TITLE "Till vem?" UPDATE val AS LOGICAL.
      IF val THEN DO:
         /*jonas.jonsson@borlange-energi.se*/
         RUN EPOST.P (INPUT "", INPUT "jonas.jonsson@borlange-energi.se", INPUT "Attest begärd av " + anamn + " för projekt " + vlaonr + " " + STRING(vldelnr), 
         INPUT "", INPUT "", INPUT "",INPUT Guru.Konstanter:globforetag, OUTPUT skick, OUTPUT efel).         
         IF efel NE "" THEN MESSAGE efel VIEW-AS ALERT-BOX.
         IF skick = TRUE THEN RETURN NO-APPLY.
         ELSE DO:
            MESSAGE "E-posten är nu skickad till utkorgen" VIEW-AS ALERT-BOX.
            RUN hmtaonrrec_UI IN berapph (INPUT valaonr,INPUT valomrade,OUTPUT recaonr).                           
            IF Guru.Konstanter:appcon THEN DO:                           
               RUN TLAGAUTO.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
               (INPUT Guru.Konstanter:globanv, INPUT recaonr, INPUT "Attest").
            END.
            ELSE DO:
               RUN TLAGAUTO.P  
               (INPUT Guru.Konstanter:globanv, INPUT recaonr, INPUT "Attest").                  
            END.                        
         END.
      END.
      ELSE IF NOT val THEN DO:
         MESSAGE "Vill Ni skicka begäran om attest till Håkan Björk?" VIEW-AS ALERT-BOX 
         QUESTION BUTTONS YES-NO-CANCEL TITLE "Till vem?" UPDATE val2 AS LOGICAL.
         IF val2 THEN DO:
            /*hakan.bjork@borlange-energi.se*/ 
            RUN EPOST.P (INPUT "", INPUT "hakan.bjork@borlange-energi.se", INPUT "Attest begärd av " + anamn + " för projekt " + vlaonr + " " + STRING(vldelnr), 
            INPUT "", INPUT "", INPUT "",INPUT Guru.Konstanter:globforetag, OUTPUT skick, OUTPUT efel).         
            IF efel NE "" THEN MESSAGE efel VIEW-AS ALERT-BOX.
            IF skick = TRUE THEN RETURN NO-APPLY.
            ELSE DO:
               MESSAGE "E-posten är nu skickad till utkorgen" VIEW-AS ALERT-BOX.
               RUN hmtaonrrec_UI IN berapph (INPUT valaonr,INPUT valomrade,OUTPUT recaonr).                           
               IF Guru.Konstanter:appcon THEN DO:                           
                  RUN TLAGAUTO.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
                  (INPUT Guru.Konstanter:globanv, INPUT recaonr, INPUT "Attest").
               END.
               ELSE DO:
                  RUN TLAGAUTO.P  
                  (INPUT Guru.Konstanter:globanv, INPUT recaonr, INPUT "Attest").                  
               END.                        
            END.
         END.
         ELSE IF NOT val2 THEN DO:
            MESSAGE "Vill Ni skicka begäran om attest till Thomas Blomberg?" VIEW-AS ALERT-BOX 
            QUESTION BUTTONS YES-NO-CANCEL TITLE "Till vem?" UPDATE val3 AS LOGICAL.
            IF val3 THEN DO:
               /*thomas.blomberg@borlange-energi.se*/ 
               RUN EPOST.P (INPUT "", INPUT "thomas.blomberg@borlange-energi.se", INPUT "Attest begärd av " + anamn + " för projekt " + vlaonr + " " + STRING(vldelnr), 
               INPUT "", INPUT "", INPUT "",INPUT Guru.Konstanter:globforetag, OUTPUT skick, OUTPUT efel).         
               IF efel NE "" THEN MESSAGE efel VIEW-AS ALERT-BOX.
               IF skick = TRUE THEN RETURN NO-APPLY.
               ELSE DO:
                  MESSAGE "E-posten är nu skickad till utkorgen" VIEW-AS ALERT-BOX.
                  RUN hmtaonrrec_UI IN berapph (INPUT valaonr,INPUT valomrade,OUTPUT recaonr).                           
                  IF Guru.Konstanter:appcon THEN DO:                           
                     RUN TLAGAUTO.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
                     (INPUT Guru.Konstanter:globanv, INPUT recaonr, INPUT "Attest").
                  END.
                  ELSE DO:
                     RUN TLAGAUTO.P  
                     (INPUT Guru.Konstanter:globanv, INPUT recaonr, INPUT "Attest").                  
                  END.                        
               END.
            END.
            ELSE DO:
               MESSAGE "Ingen begäran om attest skickad." VIEW-AS ALERT-BOX.               
            END.
         END.
         ELSE DO:
            RETURN NO-APPLY.
         END.         
      END.
      ELSE DO:
         RETURN NO-APPLY.
      END.
   END.
END PROCEDURE.
PROCEDURE attest_UI :
   IF brwval() = TRUE THEN RETURN.
   FIND FIRST valberedningtemp WHERE ROWID(valberedningtemp) = valdberbh:ROWID NO-LOCK NO-ERROR.
   IF valberedningtemp.AONR = ? THEN DO:
      MESSAGE "Det går inte att attestera om inte beredningen är kopplad till ett " + LC(Guru.Konstanter:gaok) VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN NO-APPLY.
   END.
   IF felkoll (INPUT 1) = TRUE THEN RETURN.
   IF felkoll (INPUT 2) = TRUE THEN RETURN.
   RUN val_UI.                              
   RUN attestera_UI IN berapph (INPUT valaonr,INPUT valomrade, OUTPUT medvar).         
   IF medvar NE "" THEN DO:
      MESSAGE medvar VIEW-AS ALERT-BOX TITLE "Meddelande".
      RETURN NO-APPLY.
   END.
   ELSE DO:      
      RUN hmtaonrrec_UI IN berapph (INPUT valaonr,INPUT valomrade,OUTPUT recaonr).                           
      IF Guru.Konstanter:appcon THEN DO:                           
         RUN TLAGAUTO.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
         (INPUT Guru.Konstanter:globanv, INPUT recaonr, INPUT "Attest").
      END.
      ELSE DO:
         RUN TLAGAUTO.P  
         (INPUT Guru.Konstanter:globanv, INPUT recaonr, INPUT "Attest").                  
      END.  
      MESSAGE "Attestering klar!" VIEW-AS ALERT-BOX TITLE "Meddelande".
   END.
END PROCEDURE.

PROCEDURE val_UI :
   DEFINE VARIABLE extrow AS ROWID NO-UNDO.
   RUN selectfoc_UI.   
   IF AVAILABLE valberedningtemp THEN DO:
      ASSIGN
      valaonr = valberedningtemp.BERAONR
      valdelnr = valberedningtemp.DELNR
      valbernr = valberedningtemp.BERNR
      valomrade = valberedningtemp.OMRADE
      valort = valberedningtemp.BENAMNING
      katvar = valberedningtemp.KATAR.   
   END.
   ELSE DO:
      ASSIGN
      valaonr = ?
      valdelnr = ?
      valbernr = ?
      valomrade = ?
      valort = ?
      katvar = ?.   
   END.   
END PROCEDURE.
PROCEDURE bere_UI :
   IF Guru.Konstanter:beresekvar[4] = TRUE OR Guru.Konstanter:beresekvar[13] = TRUE OR Guru.Konstanter:globniv = 0 THEN DO: 
      IF brwval() = TRUE THEN RETURN.
      IF felkoll (INPUT 1) = TRUE THEN RETURN.
      {OMSTARTAVGURUH.I}
      RUN val_UI.
      RUN beranv_UI.
      ASSIGN
      skapamtrl = FALSE
      nyvar = TRUE
      datvar = TODAY.
      {AVBGOM2.I} 
      RUN inkkoll_UI (INPUT 1 ,OUTPUT musz).
      IF musz = TRUE THEN DO:
         musz = FALSE.
         /*NY BERE*/
         EMPTY TEMP-TABLE kskkon_val NO-ERROR.
         IF Guru.Konstanter:beresekvar[4] = TRUE THEN RUN BERVALSDI.W (INPUT kalkbervar,OUTPUT startaannatpro).
         ELSE IF Guru.Konstanter:beresekvar[13] = TRUE THEN RUN SCHAKTPRO.W.   
         {OMSTARTAVGURUH.I}               
      END.
      IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "GRAN" OR Guru.Konstanter:globforetag = "GKAL" THEN DO:
         IF Guru.Konstanter:appcon THEN DO:                           
            RUN BERUPPF.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
            (INPUT valaonr, INPUT valomrade).
         END.
         ELSE DO:
            RUN BERUPPF.P
            (INPUT valaonr, INPUT valomrade).
         END.  
      END.
      IF franvart > 1 THEN .
      ELSE DO:
         {AVBFRAM2.I}
      END.
      RUN anvbort_UI.              
   END.   
   musz = FALSE.
   {musarrow.i}
END PROCEDURE.
PROCEDURE beranv_UI :
   {OMSTARTAVGURUH.I}
   {SOKSTART.I}
   ASSIGN
   soktemp.SOKVAL = 57   
   soktemp.SOKINT[1] = 1
   soktemp.SOKINT[2] = Guru.Konstanter:globniv
   soktemp.SOKCHAR[1] = valaonr
   soktemp.SOKCHAR[2] = valomrade
   soktemp.SOKCHAR[3] = Guru.Konstanter:globanv
   soktemp.SOKLOG[1] = ejanv.
   {SOKANROP.I}
   {musarrow.i}
END PROCEDURE.
PROCEDURE anvbort_UI :
   {OMSTARTAVGURUH.I}
   {SOKSTART.I}
   ASSIGN
   soktemp.SOKVAL = 57   
   soktemp.SOKINT[1] = 3
   soktemp.SOKINT[2] = Guru.Konstanter:globniv
   soktemp.SOKCHAR[1] = valaonr
   soktemp.SOKCHAR[2] = valomrade
   soktemp.SOKLOG[1] = ejanv.
   {SOKANROP.I}
   ejanv = soktemp.SOKLOG[1].   
   {musarrow.i}
END PROCEDURE.

PROCEDURE inkkoll_UI :
   
   DEFINE INPUT  PARAMETER vad AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER startadi AS LOGICAL NO-UNDO.
   DEFINE VARIABLE direktanv AS CHARACTER NO-UNDO.
    
   IF NOT VALID-HANDLE(inkberh) THEN DO:
      IF Guru.Konstanter:appcon THEN DO:
         RUN INKBERAPP.P PERSISTENT SET inkberh ON Guru.Konstanter:apphand TRANSACTION DISTINCT.      
      END.                             
      ELSE DO:
         RUN INKBERAPP.P PERSISTENT SET inkberh.   
      END.
   END.    
   /*ÄNDRA BEREDNING*/  
   IF vad = 1 THEN DO:
      /*pågår det ett inköp*/
      IF VALID-HANDLE(inkberh) THEN DO:
         RUN inkkoll_UI IN inkberh (INPUT valberedningtemp.AONR,INPUT valberedningtemp.DELNR,OUTPUT startadi).
         IF startadi = TRUE THEN DO:
            startadi = FALSE.
            MESSAGE "Det finns ett pågående inköp! Funktionen kan ej startas. Du skickas tillbaka till beredningsmenyn."
            VIEW-AS ALERT-BOX.
            RETURN.
         END.  
         ELSE startadi = TRUE.  
      END.    
      ELSE startadi = TRUE.                  
   END. /*inköp    och inköp mtrllista*/
   IF (Guru.Konstanter:beresekvar[6] = FALSE AND Guru.Konstanter:beresekvar[16] = FALSE)  AND vad = 2 THEN DO:
      IF VALID-HANDLE(inkberh) THEN DO: 
         RUN inkfinns2_UI IN inkberh (INPUT valberedningtemp.AONR,INPUT valberedningtemp.DELNR,OUTPUT startadi).
         IF startadi = TRUE THEN DO:
            startadi = ?.
            MESSAGE "Det pågår ett inköp på " valberedningtemp.AONR "-"  valberedningtemp.DELNR "!"
            VIEW-AS ALERT-BOX.
         END.
         RETURN.
      END.
      ELSE RETURN.   
   END. 
   IF Guru.Konstanter:beresekvar[6] = TRUE OR Guru.Konstanter:beresekvar[16] = TRUE THEN DO:      
      IF vad = 2 THEN DO:
         startadi = FALSE.
         IF NOT VALID-HANDLE(inkberh) THEN DO:
            IF Guru.Konstanter:appcon THEN DO:
               RUN INKBERAPP.P PERSISTENT SET inkberh ON Guru.Konstanter:apphand TRANSACTION DISTINCT.      
             END.                             
             ELSE DO:
               RUN INKBERAPP.P PERSISTENT SET inkberh.   
            END.
         END. 
         IF VALID-HANDLE(inkberh) THEN DO:
            RUN InkDirektSatt_UI IN inkberh (INPUT Guru.GlobalaVariabler:InkDirekt).
              
            IF Guru.GlobalaVariabler:InkDirekt = TRUE THEN DO:
               direktanv = Guru.Konstanter:globanv.
               /*beredning låst av*/
               RUN InkDirektAnv_UI IN inkberh (INPUT 1,INPUT Guru.GlobalaVariabler:DirektAo, INPUT Guru.GlobalaVariabler:DirektDelnr, INPUT-OUTPUT direktanv, OUTPUT startadi).
               IF startadi = TRUE THEN DO:
                  startadi = FALSE.
                  MESSAGE "Inköpet är låst av " direktanv "! Personen måste avluta inköpet korrekt!"
                  VIEW-AS ALERT-BOX.
                  RETURN.
               END. 
               RUN InkDirektAnv_UI IN inkberh (INPUT 2,INPUT Guru.GlobalaVariabler:DirektAo, INPUT Guru.GlobalaVariabler:DirektDelnr, INPUT-OUTPUT direktanv, OUTPUT startadi). 
               RUN inkstart_UI IN inkberh (INPUT valberedningtemp.AONR,INPUT valberedningtemp.DELNR).
               startadi = TRUE. 
               RETURN. 
            END.   
            RUN InkDirektAnv_UI IN inkberh (INPUT 1,INPUT valberedningtemp.AONR, INPUT valberedningtemp.DELNR, INPUT-OUTPUT direktanv, OUTPUT startadi).
            IF startadi = TRUE THEN DO:
               startadi = FALSE.
               MESSAGE "Inköpet är låst av " direktanv "! Personen måste avluta inköpet korrekt!"
               VIEW-AS ALERT-BOX.
               RETURN.
            END.  
         /* får du starta det nya ör man utgången inköpr*/
            RUN inkfinns_UI IN inkberh (INPUT valberedningtemp.AONR,INPUT valberedningtemp.DELNR,OUTPUT startadi).
            IF startadi = TRUE THEN DO:
               startadi = FALSE.
               MESSAGE "Inköpet är för gammalt för att kunna visas"
               VIEW-AS ALERT-BOX.
               RUN InkDirektSatt_UI IN inkberh (INPUT FALSE).
               RETURN. 
            END.
            /*finns inkber*/
            RUN inkkollstart_UI IN inkberh (INPUT valberedningtemp.AONR,INPUT valberedningtemp.DELNR,OUTPUT startadi).  
            IF startadi = FALSE THEN DO:
               startadi = TRUE.
               /*skapar inkber*/
               RUN inkstart_UI IN inkberh (INPUT valberedningtemp.AONR,INPUT valberedningtemp.DELNR).
               RETURN.                          
            END. 
            
         END.   
      END.
   END.   
END PROCEDURE.

PROCEDURE anvkoll_UI :
   DEFINE INPUT PARAMETER visamedd AS LOGICAL NO-UNDO.
   {OMSTARTAVGURUH.I}
   {SOKSTART.I}
   ASSIGN
   soktemp.SOKVAL = 57   
   soktemp.SOKINT[1] = 2
   soktemp.SOKINT[2] = Guru.Konstanter:globniv
   soktemp.SOKCHAR[1] = valaonr
   soktemp.SOKCHAR[2] = valomrade
   soktemp.SOKCHAR[4] = Guru.Konstanter:globanv
   soktemp.SOKCHAR[5] = valberedningtemp.AONR 
   soktemp.SOKINT[3] = valberedningtemp.DELNR.
   {SOKANROP.I}
   IF visamedd = TRUE THEN DO:
      IF soktemp.SOKCHAR[4] = Guru.Konstanter:globanv THEN DO:
         MESSAGE soktemp.SOKCHAR[3] VIEW-AS ALERT-BOX 
         QUESTION BUTTONS YES-NO TITLE "Låsa upp beredning?" UPDATE lasbort AS LOGICAL .
            CASE lasbort:
            WHEN TRUE THEN DO:
               RUN anvbort_UI.
            END.
            WHEN FALSE THEN DO:
               ASSIGN  
               berstopp = soktemp.SOKLOG[2]
               ejanv = soktemp.SOKLOG[3].   
               RETURN.
            END.   
            
         END CASE.
      END.
      ELSE IF soktemp.SOKLOG[2] = TRUE OR soktemp.SOKLOG[3] = TRUE THEN DO:
         MESSAGE soktemp.SOKCHAR[3] VIEW-AS ALERT-BOX TITLE "Meddelande". 
      END.
   END.
   ASSIGN            
   berstopp = soktemp.SOKLOG[2]
   ejanv = soktemp.SOKLOG[3].      
   {musarrow.i}
END PROCEDURE.
PROCEDURE expAE_UI :
   {AMERICANEUROPEAN.I}
   RUN expimp_UI (INPUT 1).
   {EUROPEANAMERICAN.I}
   
END PROCEDURE.
PROCEDURE expimp_UI :
   DEFINE INPUT PARAMETER val AS INTEGER NO-UNDO.
   IF val = 1 THEN DO:
      IF brwval() = TRUE THEN DO: 
         
      END.
      ELSE DO:
         IF felkoll (INPUT 1) = TRUE THEN RETURN.
         RUN val_UI.
      END.
   END.
   IF val = 2 THEN DO:
      IF brwval() = FALSE THEN DO: 
         ASSIGN
         valaonr = valberedningtemp.AONR
         valdelnr = valberedningtemp.DELNR
         valbernr = valberedningtemp.BERNR
         valomrade = valberedningtemp.OMRADE
         valort = valberedningtemp.BENAMNING.
         IF valort = ? THEN DO:
             FIND FIRST berintemp  WHERE berintemp.AONR = valaonr AND berintemp.DELNR = valdelnr NO-LOCK NO-ERROR.
             IF AVAILABLE berintemp THEN valort = berintemp.ORT.
         END.  
        
         IF valbernr NE ? THEN DO:
            ASSIGN        
            valaonr = ?   
            valdelnr = 0  
            valbernr = ?            
            valort = "".  
         END.
      END.
      ELSE DO:
         ASSIGN      
         valaonr = ?
         valdelnr = 0
         valbernr = ?
         valomrade = "" 
         valort = "".         
      END.
   END.
   {OMSTARTAVGURUH.I}
   {AVBGOM2.I}      
   musz = FALSE.
  
   RUN EXPIMPBERDS.W (INPUT val).
   IF musz = FALSE AND val = 2 THEN DO:
      FOR EACH valberedningtemp WHERE valberedningtemp.AONR = "":
         DELETE valberedningtemp.
      END.
      FOR EACH valberedningtemp WHERE valberedningtemp.BERNR = ?:
         DELETE valberedningtemp.
      END.
      FIND FIRST valberedningtemp WHERE valberedningtemp.BERNR = valbernr
      AND valberedningtemp.OMRADE = valomrade NO-LOCK NO-ERROR.
      IF NOT AVAILABLE valberedningtemp THEN DO:
         IF valbernr = 0  OR valbernr = ? THEN.
         ELSE DO:
            FIND FIRST valsoktemp NO-LOCK NO-ERROR.
            IF NOT AVAILABLE valsoktemp THEN CREATE valsoktemp.
            ASSIGN
            valsoktemp.SOKVAL = 4  
            valsoktemp.SOKINT[1] = valbernr
            valsoktemp.SOKCHAR[1] = valomrade.
            RUN imphmt_UI IN berapph (INPUT TABLE valsoktemp,OUTPUT TABLE valberedningtemp APPEND).
            FIND FIRST valberedningtemp WHERE valberedningtemp.BERNR = valbernr
            AND valberedningtemp.OMRADE = valomrade NO-LOCK NO-ERROR.         
         END.
      END.
      IF AVAILABLE valberedningtemp THEN DO:
         FIND FIRST urberedningtemp WHERE urberedningtemp.OMRADE = valberedningtemp.OMRADE  AND 
         urberedningtemp.AONR = valberedningtemp.AONR AND urberedningtemp.DELNR = valberedningtemp.DELNR
         NO-LOCK NO-ERROR.
         IF AVAILABLE urberedningtemp THEN DO:
            BUFFER-COPY valberedningtemp TO urberedningtemp.
            RUN refreshbrw_UI IN brwproc[{&LEFT-BROWSE}].
         END.         
      END.
      RUN setcolsortvar_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
      RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valberedningtemp)).
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].      
   END.
   ELSE DO:
      kopplatillaonr = "".
      kopplatilldelnr = 0.
   END.       
   musz = FALSE.
   IF franvart > 1 THEN .
   ELSE DO:
      {AVBFRAM2.I}
   END.
   {musarrow.i}
END PROCEDURE.


PROCEDURE korextra_UI :
   /*behövs ej mer än en gång.....*/
      valdutf = 0.
      EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
      CREATE inextradatatemp.          
      ASSIGN
      inextradatatemp.PROGRAM = "FAVO"                   
      inextradatatemp.HUVUDCH = Guru.Konstanter:globanv              
      inextradatatemp.HUVUDINT =  ?.   
      RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
      FIND FIRST extradatatemp NO-LOCK NO-ERROR.
      IF AVAILABLE extradatatemp THEN DO:
         valdutf = extradatatemp.SOKINT[2].      
      END.
      EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
      CMB_UTF:LIST-ITEMS = "".
      status-ok = CMB_UTF:ADD-FIRST("Alla").
      FIND FIRST berkalanvandartemp WHERE berkalanvandartemp.ANVANDARE = Guru.Konstanter:globanv NO-LOCK NO-ERROR.
      IF AVAILABLE berkalanvandartemp THEN DO:
         status-ok = CMB_UTF:ADD-LAST(Guru.Konstanter:globanv + " -- " + berkalanvandartemp.AV-NAMN).
         IF valdutf = 1 THEN ASSIGN CMB_UTF:SCREEN-VALUE = Guru.Konstanter:globanv + " -- " + berkalanvandartemp.AV-NAMN.
         ELSE ASSIGN CMB_UTF:SCREEN-VALUE = "Alla".   
      END.
      FOR EACH berkalanvandartemp:
         IF berkalanvandartemp.ANVANDARE = Guru.Konstanter:globanv THEN.
         ELSE status-ok = CMB_UTF:ADD-LAST(berkalanvandartemp.ANVANDARE + " -- " + berkalanvandartemp.AV-NAMN).
      END.      
      CMB_OMR:LIST-ITEMS = "".
      status-ok = CMB_OMR:ADD-FIRST("Alla").   
      {OMRHMT.I}
      
      {JURPAVDSTART3.I}      
      vartpro = "".
      FIND FIRST omrtemp WHERE omrtemp.OMRADE = Guru.Konstanter:globomr 
      USE-INDEX OMR NO-LOCK NO-ERROR.
      IF NOT AVAILABLE omrtemp THEN DO:
         FIND FIRST omrtemp USE-INDEX OMR NO-LOCK NO-ERROR.
      END.
      IF NOT AVAILABLE omrtemp THEN ASSIGN CMB_OMR:SCREEN-VALUE = "Alla".
      ELSE ASSIGN CMB_OMR:SCREEN-VALUE = omrtemp.NAMN.       
      
      IF Guru.Konstanter:globomr = "" OR Guru.Konstanter:globallao = TRUE THEN DO:
         ASSIGN CMB_OMR:SCREEN-VALUE = "Alla".         
      END.  
                    
      /*behövs ej mer än en gång.....*/
      ASSIGN
      CMB_JURP:LABEL = Guru.Konstanter:gjuk
      CMB_AVD:LABEL= Guru.Konstanter:gavdk
      FILL-IN_EAONR:LABEL = Guru.Konstanter:gaok
      FILL-IN_AONR:LABEL = Guru.Konstanter:gaok. 
      CMB_OMR:LABEL = Guru.Konstanter:gomrk.
      &Scoped-define FORMATNAMN FILL-IN_AONR   
      {AOFORMAT4.I}
      &Scoped-define FORMATNAMN FILL-IN_EAONR   
      {AOFORMAT4.I}
      &Scoped-define FORMATNAMN FILL-IN_DELNR   
      {DELNRFORMAT2.I}
      vart = "".
      RUN bersek_UI.
      
END PROCEDURE.
PROCEDURE borthand_UI :
   {BORTBRWPROC.I}
   valdberbh:EMPTY-TEMP-TABLE()  NO-ERROR.    
   IF VALID-HANDLE(valdberbh) THEN   DELETE OBJECT valdberbh NO-ERROR.
   valdberbh = ?.
   IF VALID-HANDLE(berapph) THEN DELETE PROCEDURE berapph NO-ERROR.
   IF VALID-HANDLE(laddaproch) THEN DELETE PROCEDURE laddaproch NO-ERROR.
   IF VALID-HANDLE(aonrapph) THEN DELETE PROCEDURE aonrapph NO-ERROR. 
   IF VALID-HANDLE(nyttaoapph2) THEN DO:
      RUN borthandle_UI IN nyttaoapph2 NO-ERROR.
      DELETE PROCEDURE nyttaoapph2  NO-ERROR.
      nyttaoapph2 = ?.
   END.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph NO-ERROR.
   edataapph = ?.
   IF VALID-HANDLE(inkberh) THEN DO: 
      RUN InkAvs_UI IN inkberh.
      DELETE PROCEDURE inkberh NO-ERROR.
   END.   
   IF VALID-HANDLE(kopberapph) THEN DELETE PROCEDURE kopberapph.
END PROCEDURE.


/* ************************  Function Implementations ***************** */

PROCEDURE AvsInk_UI :
   IF VALID-HANDLE(inkberh) THEN DO: 
      RUN InkAvs_UI IN inkberh.
      DELETE PROCEDURE inkberh NO-ERROR.
   END.
END PROCEDURE.


FUNCTION brwval RETURNS LOGICAL
  (  ) :
   RUN urvalaktiv_UI IN brwproc[{&ARROWS}] (OUTPUT leftbrwakt).
   IF leftbrwakt = TRUE THEN 
   antal_valda = BRW_URBER:NUM-SELECTED-ROWS.
   ELSE antal_valda = BRW_VBER:NUM-SELECTED-ROWS.
   IF antal_valda = 0 THEN DO:            
      RETURN TRUE.                
   END.
   IF leftbrwakt = TRUE THEN DO:
      EMPTY TEMP-TABLE valberedningtemp NO-ERROR.       
      RUN sel_over_UI IN brwproc[{&ARROWS}].
      RUN setcolsortvar_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
      RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(valberedningtemp)).
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
   END.
   ELSE DO:
      RUN selectfoc_UI.      
   END.
   RETURN FALSE.   /* Function return value. */
END FUNCTION.

FUNCTION felkoll RETURNS LOGICAL
  ( INPUT felmed AS INTEGER ) :
  IF Guru.GlobalaVariabler:InkDirekt = TRUE THEN RETURN FALSE.
   IF valberedningtemp.BERNR = ? THEN DO:
      MESSAGE "Det finns ingen beredning för " + LC(Guru.Konstanter:gaok) + ": " + valberedningtemp.AONR + "."        
         VIEW-AS ALERT-BOX TITLE "Meddelande". 
      RETURN TRUE.
   END.
   IF felmed LT 2 THEN DO:
      IF valberedningtemp.AKTIV = FALSE THEN DO:
         MESSAGE "Beredningen måste vara aktiv. Funktionen ej möjlig att utföra."        
            VIEW-AS ALERT-BOX TITLE "Meddelande". 
         RETURN TRUE.
      END.
   END.
   RETURN FALSE.   /* Function return value. */
END FUNCTION.
