/*DARIN3.p IMPORT AV KUNDDATA*/       
DEFINE NEW SHARED VARIABLE quotervar AS CHARACTER FORMAT "X(256)" NO-UNDO.




DEFINE VARIABLE musz AS LOGICAL NO-UNDO.

DEFINE VARIABLE rad AS INTEGER NO-UNDO.
DEFINE VARIABLE prognamn AS CHARACTER FORMAT "X(20)" NO-UNDO.
DEFINE VARIABLE prognamndat AS CHARACTER FORMAT "X(20)" NO-UNDO.
DEFINE VARIABLE prognamnque AS CHARACTER FORMAT "X(20)" NO-UNDO.                
DEFINE VARIABLE words AS CHARACTER FORMAT "X(132)" NO-UNDO.
DEFINE VARIABLE kommando AS CHARACTER FORMAT "X(132)" NO-UNDO.
DEFINE VARIABLE kommandoprog AS CHARACTER FORMAT "X(20)" NO-UNDO.
DEFINE VARIABLE satsvar AS CHARACTER FORMAT "X(11)" NO-UNDO.
DEFINE VARIABLE enrvar AS CHARACTER FORMAT "X(11)" NO-UNDO.
DEFINE VARIABLE melvar AS INTEGER NO-UNDO.
DEFINE VARIABLE melvar2 AS INTEGER NO-UNDO.
DEFINE VARIABLE langd AS INTEGER NO-UNDO.
DEFINE VARIABLE pos1 AS INTEGER NO-UNDO. 
DEFINE VARIABLE nrvar AS INTEGER NO-UNDO.
{DARINTIDIN.I}
FUNCTION FFinlasttab RETURNS INTEGER 
(INPUT sid AS INTEGER):
   FIND FIRST SPANNINGSNIV WHERE SPANNINGSNIV.SPANID = sid USE-INDEX SPANID NO-LOCK NO-ERROR.
   IF AVAILABLE SPANNINGSNIV THEN DO:
      FIND FIRST INLASTAB WHERE INLASTAB.INKODID = SPANNINGSNIV.INKODID
      USE-INDEX INKODID NO-LOCK NO-ERROR.
      IF AVAILABLE INLASTAB THEN RETURN INTEGER(INLASTAB.INKODPOSCH).
      ELSE RETURN sid.
   END.
   ELSE RETURN sid.   
END FUNCTION.   
DEFINE TEMP-TABLE infil
   FIELD PROGNAMN AS CHARACTER FORMAT "X(78)" 
   INDEX PRO IS PRIMARY PROGNAMN.
     
DEFINE TEMP-TABLE temp_text
   FIELD B1 AS INTEGER /*företag*/
   FIELD B2 AS CHARACTER /*distrikt*/
   FIELD PROGNAMN AS CHARACTER FORMAT "X(100)".   

DEFINE BUFFER distbuff FOR STORDISTRIKT.   
/*
DEFINE INPUT PARAMETER filnamn AS CHARACTER NO-UNDO.
*/
DEFINE INPUT PARAMETER TABLE FOR tidin3.
DEFINE OUTPUT PARAMETER TABLE FOR temp_text.

{muswait.i}         

   
       
   FOR EACH temp_text:
      DELETE temp_text.
   END.
   RUN skapasats_UI.           
/*    OS-DELETE VALUE(wtidvar). */
{musarrow.i}

PROCEDURE skapasats_UI:
   FIND FIRST tidin3 NO-LOCK NO-ERROR.
   IF NOT AVAILABLE tidin3 THEN DO:
      RETURN.
   END.
   FIND FIRST AVDELNING WHERE AVDELNING.AVDELNINGNR = tidin3.B1 NO-LOCK NO-ERROR.
   IF AVAILABLE AVDELNING THEN DO:      
      FOR EACH tidin3 NO-LOCK:         
         FIND FIRST STORDISTRIKT WHERE STORDISTRIKT.AVDELNINGNR = tidin3.B1 AND
         STORDISTRIKT.VIDISTRIKT = tidin3.B2 AND STORDISTRIKT.ARTAL = tidin3.B3
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE STORDISTRIKT THEN DO:         
            FIND LAST STORDISTRIKT USE-INDEX DISTRIKTID NO-LOCK NO-ERROR.                   
            nrvar = STORDISTRIKT.DISTRIKTID + 1.
            DO TRANSACTION:            
               CREATE STORDISTRIKT.                                               
               ASSIGN
               STORDISTRIKT.AVDELNINGNR = tidin3.B1
               STORDISTRIKT.DISTRIKTID = nrvar
               STORDISTRIKT.VIDISTRIKT = tidin3.B2            
               STORDISTRIKT.ARTAL = tidin3.B3.        
            END.            
         END.
      END.
      FIND FIRST temp_text NO-LOCK NO-ERROR.
      IF NOT AVAILABLE temp_text THEN DO:
         FOR EACH tidin3 NO-LOCK:            
            FIND FIRST STORDISTRIKT WHERE STORDISTRIKT.AVDELNINGNR = tidin3.B1 AND
            STORDISTRIKT.VIDISTRIKT = tidin3.B2 AND STORDISTRIKT.ARTAL = tidin3.B3
            NO-LOCK NO-ERROR.
            RUN skapakund_UI.                                                                 
         END.
      END.
   END.
   ELSE DO:
      CREATE temp_text.
      ASSIGN
      temp_text.B1 = tidin3.B1
      temp_text.B2 = tidin3.B2
      temp_text.PROGNAMN = "FÖRETAG SAKNAS". 
   END.
END PROCEDURE.

PROCEDURE skapakund_UI:   
   FIND FIRST INLASTAB WHERE INLASTAB.INKOD = "D" AND INLASTAB.INKODTYP = "1" AND
   INLASTAB.INKODPOSCH = tidin3.B4 USE-INDEX INKOD
   NO-LOCK NO-ERROR. 
   FIND FIRST SPANNINGSNIV WHERE SPANNINGSNIV.INKODID = INLASTAB.INKODID
   NO-LOCK NO-ERROR.
   DO TRANSACTION:   
      FIND FIRST KUNDSTOR WHERE KUNDSTOR.DISTRIKTID = STORDISTRIKT.DISTRIKTID AND
      KUNDSTOR.SPANID = SPANNINGSNIV.SPANID AND KUNDSTOR.ARTAL = STORDISTRIKT.ARTAL
      EXCLUSIVE-LOCK NO-ERROR.
      IF AVAILABLE KUNDSTOR THEN DO:               
         ASSIGN
         KUNDSTOR.ANTALLUFT = tidin3.B7
         KUNDSTOR.ANTALBLAND = tidin3.B8
         KUNDSTOR.ANTALKABEL = tidin3.B9
         KUNDSTOR.ANTALKUNDER = tidin3.B10.
         KUNDSTOR.SPANDARWINID = FFinlasttab(KUNDSTOR.SPANID).
         IF tidin3.B10 = 0 THEN DO:
            KUNDSTOR.ANTALKUNDER = tidin3.B7 + tidin3.B8 + tidin3.B9.
         END.
      END.
      ELSE DO:
/*          MESSAGE string(STORDISTRIKT.DISTRIKTID) + ":" + STRING(STORDISTRIKT.ARTAL) + ":" + string(SPANNINGSNIV.SPANID) + ":" + tidin3.B4 + ":" + string(tidin3.B7). */
         IF tidin3.B7 > 0 OR tidin3.B8 > 0 OR tidin3.B9 > 0 OR tidin3.B10 > 0 THEN DO:      
            CREATE KUNDSTOR.
            ASSIGN
            KUNDSTOR.DISTRIKTID = STORDISTRIKT.DISTRIKTID
            KUNDSTOR.ARTAL = STORDISTRIKT.ARTAL
            KUNDSTOR.ANTALLUFT = tidin3.B7
            KUNDSTOR.ANTALBLAND = tidin3.B8
            KUNDSTOR.ANTALKABEL = tidin3.B9
            KUNDSTOR.ANTALKUNDER = tidin3.B10
            KUNDSTOR.SPANID = SPANNINGSNIV.SPANID.
            KUNDSTOR.SPANDARWINID = FFinlasttab(KUNDSTOR.SPANID).
            IF tidin3.B10 = 0 THEN DO:
               KUNDSTOR.ANTALKUNDER = tidin3.B7 + tidin3.B8 + tidin3.B9.
            END.            
         END.
      END.   
   END.
END PROCEDURE.   

                
