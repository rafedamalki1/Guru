/*MARKMENY.P*/
FUNCTION brwval RETURNS LOGICAL
  ( INPUT visamed AS LOGICAL )  FORWARD.
FUNCTION felkoll RETURNS LOGICAL
  ( INPUT felmed AS INTEGER )  FORWARD.
&Scoped-define NEW 
{GLOBVAR2DEL1.I}
{ALLDEF.I}
{SOKDEF.I}
{FORETEMP.I}
{MARKVARDIN.I}
{ANVTEMPS.I}
{JURPERST.I}
DEFINE SHARED TEMP-TABLE berkalanvandartemp NO-UNDO LIKE anvandartemp.
&Scoped-define NEW 
&Scoped-define SHARED SHARED
{MARKTEMP.I}
{MARKWID.I}
{OMRTEMPW.I}
{ANSVMARK.I} 
{FASTIGHET.I}
{MARKVARD.I} 
{MARKVAL.I}  
DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.
{EXTRADATA.I}
DEFINE SHARED VARIABLE valkalknr AS INTEGER NO-UNDO. 
DEFINE SHARED VARIABLE kalkregvar AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE vartpro AS CHARACTER FORMAT "X(3)" NO-UNDO.
DEFINE SHARED VARIABLE vart AS CHARACTER FORMAT "X(3)" NO-UNDO.
DEFINE SHARED VARIABLE skrivut AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE aonrrec AS RECID NO-UNDO.
DEFINE SHARED VARIABLE aonrrec2 AS RECID NO-UNDO.
DEFINE SHARED VARIABLE musz AS LOGICAL NO-UNDO.
DEFINE VARIABLE x-multi AS DECIMAL NO-UNDO.
DEFINE VARIABLE y-multi AS DECIMAL NO-UNDO.
DEFINE SHARED VARIABLE fastigregapph AS HANDLE NO-UNDO.
DEFINE SHARED VARIABLE typpris AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE mtrlspec AS LOGICAL NO-UNDO .
DEFINE SHARED VARIABLE vardrec AS RECID NO-UNDO.
DEFINE SHARED VARIABLE vardrec2 AS RECID NO-UNDO.
DEFINE SHARED VARIABLE karlrec AS RECID NO-UNDO. 
DEFINE SHARED VARIABLE fastrec2 AS RECID NO-UNDO.
DEFINE SHARED VARIABLE fastrec AS RECID NO-UNDO. 
DEFINE SHARED VARIABLE skogrec2 AS RECID NO-UNDO.
DEFINE SHARED VARIABLE skogrec AS RECID NO-UNDO. 
DEFINE SHARED VARIABLE volrec2 AS RECID NO-UNDO.
DEFINE SHARED VARIABLE volrec AS RECID NO-UNDO. 
DEFINE SHARED VARIABLE akerrec2 AS RECID NO-UNDO.
DEFINE SHARED VARIABLE akerrec AS RECID NO-UNDO. 
DEFINE SHARED VARIABLE kabrec AS RECID NO-UNDO.
DEFINE SHARED VARIABLE kabrec2 AS RECID NO-UNDO.
DEFINE SHARED VARIABLE fastvrec AS RECID NO-UNDO. 
DEFINE SHARED VARIABLE valmarkrec AS RECID NO-UNDO. 
DEFINE SHARED VARIABLE radvar AS INTEGER NO-UNDO.
DEFINE SHARED VARIABLE valvard AS CHARACTER NO-UNDO.
DEFINE SHARED VARIABLE kindrec AS RECID NO-UNDO.
DEFINE SHARED VARIABLE kindrec2 AS RECID NO-UNDO.
DEFINE SHARED VARIABLE volkrec AS RECID NO-UNDO.
DEFINE SHARED VARIABLE volkrec2 AS RECID NO-UNDO.
DEFINE SHARED VARIABLE aoplan AS LOGICAL NO-UNDO.
DEFINE SHARED VARIABLE avbryt AS LOGICAL NO-UNDO.                           
DEFINE SHARED VARIABLE markrec AS RECID NO-UNDO.
DEFINE SHARED VARIABLE markvrec AS RECID NO-UNDO.
DEFINE VARIABLE andravardapph AS HANDLE NO-UNDO.
DEFINE VARIABLE status-ok AS LOGICAL NO-UNDO.
DEFINE VARIABLE fastvardnr AS INTEGER NO-UNDO.
DEFINE VARIABLE feltextvar AS CHARACTER FORMAT "X(10)" NO-UNDO.
DEFINE VARIABLE markhmth AS HANDLE NO-UNDO.
DEFINE VARIABLE aonrapph AS HANDLE NO-UNDO.
DEFINE VARIABLE valrec AS RECID NO-UNDO.
DEFINE VARIABLE vbenmark AS CHARACTER NO-UNDO.
DEFINE VARIABLE hjdelvar AS INTEGER NO-UNDO.
DEFINE VARIABLE aosok AS CHARACTER FORMAT "X(10)" NO-UNDO.
DEFINE VARIABLE ortssok AS CHARACTER NO-UNDO. 
DEFINE VARIABLE ortkalks AS CHARACTER NO-UNDO.
DEFINE VARIABLE antal_valda AS INTEGER NO-UNDO.
DEFINE VARIABLE antal_valdasp AS INTEGER NO-UNDO.
DEFINE VARIABLE nyvardvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE gatillvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE leftbrwakt AS LOGICAL NO-UNDO.
DEFINE VARIABLE vardnrvar AS INTEGER NO-UNDO.
DEFINE VARIABLE fastighbet AS CHARACTER NO-UNDO.
DEFINE VARIABLE laddaproch AS HANDLE NO-UNDO.
DEFINE VARIABLE sparvardnr AS INTEGER NO-UNDO.
DEFINE VARIABLE valmark AS INTEGER NO-UNDO.
DEFINE VARIABLE valaom AS CHARACTER NO-UNDO.
DEFINE VARIABLE valdelm AS INTEGER NO-UNDO.
DEFINE VARIABLE valomm AS CHARACTER NO-UNDO.
DEFINE VARIABLE valbenm AS CHARACTER NO-UNDO.
DEFINE VARIABLE valdutf AS INTEGER NO-UNDO.
DEFINE VARIABLE flerdelnr AS LOGICAL NO-UNDO.
DEFINE {&NEW} {&SHARED} TEMP-TABLE mvalvardtemp NO-UNDO  LIKE valvardtemp.
DEFINE BUFFER mvalvardtempbuff FOR mvalvardtemp.
framesizeh = framesizeextrah.
DEFINE VARIABLE valdmarkh AS HANDLE NO-UNDO.
valdmarkh = TEMP-TABLE mvalvardtemp:DEFAULT-BUFFER-HANDLE.  
ON 'CHOOSE':U OF BTN_AOF PERSISTENT RUN sparaaofavoriter_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF BRW_VMARK PERSISTENT RUN mdbrwvmark_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF BRW_VMARK PERSISTENT RUN vcbrwvmark_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_AVB PERSISTENT RUN avb_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_BORT PERSISTENT RUN btnbort_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_HAMT PERSISTENT RUN btnhmt_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_NY PERSISTENT RUN ny_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_ADM PERSISTENT RUN fbtnadm_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_FASTIGHET PERSISTENT RUN fbtnfast_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_INAKTIV PERSISTENT RUN fbtninak_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_OMRAKNA PERSISTENT RUN fbtnorm_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_UPP PERSISTENT RUN fbtnupp_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_VARD PERSISTENT RUN fbtnvard_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_VISKAL PERSISTENT RUN fbtnvis_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF FBTN_VISMARK PERSISTENT RUN fbtnvism_UI IN THIS-PROCEDURE.
ON 'VALUE-CHANGED':U OF TOG_ALLAMARK PERSISTENT RUN mddelnr_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN_DELNR PERSISTENT RUN mddelnr_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN_DELNR PERSISTENT RUN akdelnr_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN_EAONR PERSISTENT RUN mdeaonr_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN_EAONR PERSISTENT RUN akeaonr_UI IN THIS-PROCEDURE.
ON 'MOUSE-SELECT-DBLCLICK':U OF FILL-IN_EVARD PERSISTENT RUN mdevard_UI IN THIS-PROCEDURE.
ON 'ANY-KEY':U OF FILL-IN_EVARD PERSISTENT RUN akevard_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_HAOF PERSISTENT RUN hmtfavoriter_UI IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_EXPM PERSISTENT RUN exp_UI  IN THIS-PROCEDURE.
ON 'CHOOSE':U OF BTN_IMPM PERSISTENT RUN imp_UI   IN THIS-PROCEDURE.
PROCEDURE autofavo_UI :
   FIND FIRST mvalvardtemp NO-LOCK NO-ERROR.
   IF AVAILABLE mvalvardtemp THEN DO:
      RUN sparaaofavoriter_UI.
   END.
END PROCEDURE.
PROCEDURE hmtfavoriter_UI :
   DEFINE VARIABLE ttbuffh AS HANDLE NO-UNDO.
   tthandle = TEMP-TABLE mvalvardtemp:HANDLE.
   ttbuffh = tthandle:DEFAULT-BUFFER-HANDLE.
   RUN ttcopy_UI IN huvprogh (INPUT TABLE-HANDLE tthandle).
   ttbuffh:EMPTY-TEMP-TABLE() NO-ERROR.
   FIND FIRST sparaladdatemp NO-ERROR.
   IF NOT AVAILABLE sparaladdatemp THEN CREATE sparaladdatemp.
   ASSIGN
   sparaladdatemp.GLOBANV = Guru.Konstanter:globanv /*Användare, i detta fall ELPAO*/                  
   sparaladdatemp.BENAMNING = "MARK" /*Benämnings sufix, i detta fall ELPAO$STOR*/
   sparaladdatemp.TABVAL = "VARDERING" /*Tabellnamn*/
   sparaladdatemp.FALTVALAO = "" /*CHARACTER field*/
   sparaladdatemp.FALTVALDEL = "VARDNR" /*Integer field*/
   sparaladdatemp.FALTVALDATE = "".   /*DATE field*/
   EMPTY TEMP-TABLE mvalvardtemp NO-ERROR. 
   RUN laddabrw_UI IN brwproc[{&RIGHT-BROWSE}]
      (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp).
   RUN ttjmf_UI IN huvprogh (INPUT-OUTPUT ttbuffh).
   RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").  
END PROCEDURE.

RUN main_UI.

PROCEDURE akevard_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN_EVARD.
   END.
END PROCEDURE.
PROCEDURE mdevard_UI :
   RUN hamta_UI (INPUT 2).
END PROCEDURE.
PROCEDURE akeaonr_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN_EAONR.
   END. 
END PROCEDURE.
PROCEDURE mdeaonr_UI :
   APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN_DELNR.
END PROCEDURE.

PROCEDURE akdelnr_UI :
   {TRYCKS.I}
   IF KEYFUNCTION(LASTKEY) = ("RETURN") THEN DO:
      APPLY "MOUSE-SELECT-DBLCLICK" TO FILL-IN_DELNR.
   END.
END PROCEDURE.
PROCEDURE mddelnr_UI :
   {OMSTARTAVGURUH.I}
   RUN hamta_UI (INPUT 3).
   {musarrow.i}
END PROCEDURE.

PROCEDURE selectfoc_UI :
   DEFINE VARIABLE brwrowid AS ROWID NO-UNDO.
   DEFINE VARIABLE brwrecid AS RECID NO-UNDO.
   IF NOT VALID-HANDLE(valdmarkh) THEN DO:
      valdmarkh = TEMP-TABLE mvalvardtemp:DEFAULT-BUFFER-HANDLE.
   END.
   RUN selectrowid_UI IN brwproc[{&RIGHT-BROWSE}] (OUTPUT brwrowid).
   RUN selectrecid_UI IN brwproc[{&RIGHT-BROWSE}] (OUTPUT brwrecid).
   FIND FIRST mvalvardtemp WHERE ROWID(mvalvardtemp) = brwrowid NO-LOCK NO-ERROR.
END PROCEDURE.
PROCEDURE fbtnvism_UI :
   IF brwval(INPUT TRUE) = TRUE THEN RETURN.
   RUN selectfoc_UI.   
   IF NOT AVAILABLE mvalvardtemp THEN RETURN.
   fastvardnr = mvalvardtemp.VARDNR.
   RUN markvisa_UI.        
   {musarrow.i}  
END PROCEDURE.
PROCEDURE fbtnvis_UI :
   IF brwval(INPUT TRUE) = TRUE THEN RETURN.
   RUN selectfoc_UI.   
   IF NOT AVAILABLE mvalvardtemp THEN RETURN NO-APPLY.
   fastvardnr = mvalvardtemp.VARDNR.
   RUN vardvisa_UI.        
   {musarrow.i}  
END PROCEDURE.
PROCEDURE fbtnvard_UI :
   IF brwval(INPUT TRUE) = TRUE THEN RETURN.
   RUN selectfoc_UI.   
   IF NOT AVAILABLE mvalvardtemp THEN RETURN NO-APPLY.
   fastvardnr = mvalvardtemp.VARDNR.
   RUN vard_UI (INPUT ?).
   {musarrow.i}
END PROCEDURE.
PROCEDURE fbtnupp_UI :
   IF brwval(INPUT TRUE) = TRUE THEN RETURN.
   RUN selectfoc_UI.   
   IF NOT AVAILABLE mvalvardtemp THEN RETURN NO-APPLY.
   fastvardnr = mvalvardtemp.VARDNR.
   RUN andra_UI.
END PROCEDURE.
PROCEDURE fbtnorm_UI :
   IF brwval(INPUT TRUE) = TRUE THEN RETURN.
   RUN selectfoc_UI.   
   IF NOT AVAILABLE mvalvardtemp THEN RETURN NO-APPLY.
   fastvardnr = mvalvardtemp.VARDNR.
   RUN omrakna_UI.
END PROCEDURE.
PROCEDURE fbtninak_UI :
   IF brwval(INPUT TRUE) = TRUE THEN RETURN.
   RUN selectfoc_UI.   
   IF NOT AVAILABLE mvalvardtemp THEN RETURN.
   fastvardnr = mvalvardtemp.VARDNR.
   RUN inaktiv_UI.
END PROCEDURE.

PROCEDURE fbtnfast_UI :
   IF brwval(INPUT FALSE) = TRUE THEN radvar = 0.
   ELSE radvar = 1.
   IF radvar = 1 THEN DO:
      RUN selectfoc_UI.      
      IF NOT AVAILABLE mvalvardtemp THEN RETURN.
      fastvardnr = mvalvardtemp.VARDNR.
      RUN fastighet_UI.
   END.
   ELSE DO:
      fastvardnr = ?.
      RUN fastighet_UI.
   END.
END PROCEDURE.
PROCEDURE markvisa_UI :
   DEFINE VARIABLE val AS LOGICAL NO-UNDO.
   {OMSTARTAVGURUH.I}
   RUN hmtaonrrec IN markhmth (INPUT mvalvardtemp.AONR, INPUT mvalvardtemp.DELNR, OUTPUT aonrrec).
   IF mvalvardtemp.DELNR = 0 THEN DO:
      val = FALSE.
      RUN delnrhmt IN markhmth (INPUT mvalvardtemp.AONR, OUTPUT flerdelnr).
      IF flerdelnr = TRUE THEN DO:            
         MESSAGE "Vill du att " + LC(Guru.Konstanter:gaok) + " samtliga undernummers markägare skall visas ?"
         VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE val.
         IF val = TRUE THEN DO:
            {AVBGOM2.I}
            /*markägare andel*/             
            RUN MARKURVAL3.W (INPUT mvalvardtemp.VARDNR, INPUT 1).                     
            IF franvart > 1 THEN .
            ELSE DO:
               {AVBFRAM2.I}      
            END.
         END.
      END.         
   END.
   IF val = FALSE THEN DO:
      {AVBGOM2.I}      
      RUN MARKURVAL3.W (INPUT mvalvardtemp.VARDNR, INPUT 2).           
      IF franvart > 1 THEN .
      ELSE DO:
         {AVBFRAM2.I}      
      END.
   END.
   vart = "".   
   {musarrow.i}    
   musz = FALSE.
END PROCEDURE.

PROCEDURE vardvisa_UI :
   {OMSTARTAVGURUH.I}
   {AVBGOM2.I}
   /*markägare andel*/
   RUN selectfoc_UI.
   IF AVAILABLE mvalvardtemp  THEN DO:
      fastvardnr = mvalvardtemp.VARDNR.
   END.
   RUN valvardtemp_UI.
   FIND FIRST mvalvardtemp WHERE mvalvardtemp.VARDNR = fastvardnr NO-LOCK NO-ERROR.
   RUN VARDURVAL3.W (INPUT mvalvardtemp.VARDNR).   
   RUN mvalvardtemp_UI.
   FIND FIRST mvalvardtemp WHERE mvalvardtemp.VARDNR = fastvardnr NO-LOCK NO-ERROR.
   IF AVAILABLE mvalvardtemp THEN DO:
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").  
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(mvalvardtemp)).   
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}]. 
   END.
   ELSE DO:
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").  
   END.
   IF franvart > 1 THEN .
   ELSE DO:
      {AVBFRAM2.I}      
   END.
   musz = FALSE.
   vart = "".
   {musarrow.i}
   musz = FALSE.
END PROCEDURE.

PROCEDURE vard_UI :
   DEFINE VARIABLE valdfast AS CHARACTER NO-UNDO.
   DEFINE VARIABLE felmedd AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER felvard AS INTEGER NO-UNDO.
   {OMSTARTAVGURUH.I}
   aoplan = FALSE.
   RUN fastighmt IN fastigregapph (INPUT mvalvardtemp.VARDNR,OUTPUT TABLE varderingtemp,OUTPUT TABLE fastvardtemp).
   valdfast = ?.
   FOR EACH fastvardtemp:
      FIND FIRST fastighettemp WHERE fastighettemp.BETECKNING = fastvardtemp.BETECKNING NO-LOCK NO-ERROR.
      IF NOT AVAILABLE fastighettemp THEN DO:
         IF Guru.Konstanter:appcon THEN DO:                           
            RUN PHMTENFAST.P ON Guru.Konstanter:apphand TRANSACTION DISTINCT 
            (INPUT fastvardtemp.BETECKNING ,OUTPUT TABLE fastighettemp APPEND).
         END.
         ELSE DO:
            RUN PHMTENFAST.P  
            (INPUT fastvardtemp.BETECKNING,OUTPUT TABLE fastighettemp APPEND).
         END.                              
      END.
      IF AVAILABLE fastvardtemp THEN DO:
         IF valdfast = ? THEN valdfast = fastvardtemp.BETECKNING.
      END.
   END.      
   IF valdfast = ? THEN DO:
      MESSAGE "Det finns inga kopplade fastigheter. Gå till: Fastigheter/Markägare, för att koppla fastigheter." 
      VIEW-AS ALERT-BOX.
      RETURN.
   END.
   RUN markkoll_UI IN fastigregapph (INPUT mvalvardtemp.VARDNR,OUTPUT felmedd).
   IF felmedd NE "" THEN DO:
       MESSAGE felmedd VIEW-AS ALERT-BOX
       TITLE "Markägare saknas.".       
       RETURN.
    END.   
    RUN markminderarig_UI IN fastigregapph (INPUT mvalvardtemp.VARDNR,OUTPUT felmedd).
    IF felmedd NE "" THEN DO:
       MESSAGE felmedd SKIP 
       " Vill du ändå värdera tryck JA." SKIP         
       "Tryck Nej om du vill avbryta"
       VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE val1 AS  LOGICAL.        
       IF val1 = FALSE THEN DO:  
          RETURN NO-APPLY.
       END.  
    END.       
   {AVBGOM2.I}     
   RUN VARDSPEC.W (INPUT mvalvardtemp.VARDNR, INPUT valdfast, INPUT felvard).
   IF franvart > 1 THEN .
   ELSE DO:
      {AVBFRAM2.I}      
   END.
   {musarrow.i}    
   musz = FALSE.
END PROCEDURE.

PROCEDURE andra_UI :
   {OMSTARTAVGURUH.I}
   ASSIGN
   vart = "AND"
   aoplan = FALSE
   avbryt = FALSE
   vardnrvar = mvalvardtemp.VARDNR.
   avbryt = FALSE.
   RUN valvardtemp_UI.
   FIND FIRST mvalvardtemp WHERE mvalvardtemp.VARDNR = vardnrvar NO-LOCK NO-ERROR.
   RUN ANDRAVARD2.W (INPUT-OUTPUT vardnrvar, INPUT mvalvardtemp.OMRADE,INPUT vbenmark).
   RUN mvalvardtemp_UI.
   IF avbryt = FALSE THEN DO:
      RUN andrapost IN markhmth
      (INPUT vardnrvar, INPUT-OUTPUT TABLE mvalvardtemp). 
   END.
   ELSE avbryt = FALSE.
   FIND FIRST mvalvardtemp WHERE mvalvardtemp.VARDNR = vardnrvar NO-LOCK NO-ERROR.
   IF AVAILABLE mvalvardtemp THEN DO:
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").  
      RUN gorlika_UI IN brwproc[{&ARROWS}] (INPUT "VARDNR", INPUT "").
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(mvalvardtemp)).   
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").  
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].           
   END.
   ELSE DO:
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").     
   END.      
   {musarrow.i}
   musz = FALSE.
END PROCEDURE.

PROCEDURE omrakna_UI :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
   DEFINE VARIABLE status-mus2 AS LOGICAL NO-UNDO.
   DEFINE VARIABLE tempsvar AS LOGICAL NO-UNDO.
   {OMSTARTAVGURUH.I}
   RUN akervardcheck IN markhmth (INPUT mvalvardtemp.VARDNR, OUTPUT tempsvar).
   IF tempsvar = FALSE THEN DO:
      MESSAGE "Det finns ingen åkernorm på detta " + LC(Guru.Konstanter:gaok) + "." VIEW-AS ALERT-BOX.
      status-mus2 = SESSION:SET-WAIT-STATE("").
      RETURN.
   END.   
   RUN OMRAKNKPI2.W (INPUT mvalvardtemp.VARDNR).   
   {musarrow.i}    
   musz = FALSE.
END PROCEDURE.
PROCEDURE PlaceraKnapp_UI :
   Guru.GlobalaVariabler:StartRadForKnappar = BRW_VMARK:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_UPP).        
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_FASTIGHET).  
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_VARD).       
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_VISKAL).     
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_VISMARK).    
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_OMRAKNA).      
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_INAKTIV).    
   Guru.Konstanter:PlaceraKnapparLodratt(FBTN_ADM).        
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_EXPM).        
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_IMPM).        
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_HAOF).        
   Guru.Konstanter:PlaceraKnapparLodratt(BTN_AOF).         
RUN placeraCmb_UI.
END PROCEDURE.

PROCEDURE placeraCmb_UI :   
   Guru.GlobalaVariabler:StartRadForKnappar = CMB_OMR:ROW.
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_OMR).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_UTF).
   Guru.Konstanter:PlaceraKnapparLodratt(CMB_ANSV). 
   RUN placeraFill_UI.    
END PROCEDURE.

PROCEDURE placeraFill_UI :
   Guru.GlobalaVariabler:MellanRumKnappar = 1.
   TOG_ALLAMARK:ROW = FILL-IN_EAONR:ROW.  
   FILL-IN_VARDANV:COLUMN = FILL-IN_BEN:COLUMN.
   /*
   Guru.GlobalaVariabler:StartKolumnForKnappar = FILL-IN_SVARD:COLUMN.
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN_SVARD,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN_VARDANV,TRUE). 
   Guru.Konstanter:LabelFlyttExtra(FILL-IN_VARDANV).
   */
   Guru.GlobalaVariabler:StartKolumnForKnappar = FILL-IN-HTEXT:COLUMN.
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN-HTEXT,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN_EVARD,TRUE). 
   Guru.Konstanter:LabelFlyttExtra(FILL-IN_EVARD).
   Guru.GlobalaVariabler:StartKolumnForKnappar = FILL-IN_EVARD:COLUMN + FILL-IN_EVARD:WIDTH-CHARS + 1.
   
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN_EAONR,TRUE). 
   Guru.Konstanter:LabelFlyttExtra(FILL-IN_EAONR).
   
   Guru.GlobalaVariabler:StartKolumnForKnappar = FILL-IN_EAONR:COLUMN + FILL-IN_EAONR:WIDTH-CHARS + 1.
  
   Guru.Konstanter:PlaceraKnapparVagratt(FILL-IN_DELNR,TRUE).
   Guru.Konstanter:PlaceraKnapparVagratt(TOG_ALLAMARK,TRUE).
   Guru.GlobalaVariabler:MellanRumKnappar = 0.
END PROCEDURE.


PROCEDURE marksek_UI :
   Guru.GlobalaVariabler:collefth = ?.
   FBTN_UPP:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = FBTN_UPP:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   FBTN_FASTIGHET:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = FBTN_FASTIGHET:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).    
   FBTN_VARD:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = FBTN_VARD:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   FBTN_VISKAL:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = FBTN_VISKAL:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   FBTN_VISMARK:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = FBTN_VISMARK:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   FBTN_OMRAKNA:HIDDEN = FALSE.     
   Guru.GlobalaVariabler:colrighth = FBTN_OMRAKNA:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).    
   FBTN_INAKTIV:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = FBTN_INAKTIV:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   FBTN_ADM:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = FBTN_ADM:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   BTN_EXPM:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = BTN_EXPM:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   BTN_IMPM:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = BTN_IMPM:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).
   BTN_HAOF:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = BTN_HAOF:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).      
   BTN_AOF:HIDDEN = FALSE.
   Guru.GlobalaVariabler:colrighth = BTN_AOF:HANDLE.           
   RUN buttrow_UI IN framesizeh (INPUT Guru.GlobalaVariabler:collefth,INPUT Guru.GlobalaVariabler:colrighth,OUTPUT OPcollefth).  
END PROCEDURE.

PROCEDURE inaktiv_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/
   {OMSTARTAVGURUH.I}
   IF mvalvardtemp.AONR NE ? THEN DO:
      IF mvalvardtemp.AKTIV THEN DO:
         MESSAGE "Markvärderingen är kopplad till " + LC(Guru.Konstanter:gaok) + ":" + mvalvardtemp.AONR + 
         " med Delnr:" + STRING(mvalvardtemp.DELNR) +                                
         " Ta bort koppling innan inaktivering."                                  
         VIEW-AS ALERT-BOX TITLE "Meddelande".      
      END.
      ELSE DO:
         MESSAGE "Markvärderingen kopplad till ett " + LC(Guru.Konstanter:gaok) + " som är avslutat. Ta bort avslutningen och Markvärderingen aktiveras."
         VIEW-AS ALERT-BOX TITLE "Meddelande".
      END.
      RETURN.                                                                  
   END.
   RUN aktivinaktiv IN markhmth (INPUT mvalvardtemp.VARDNR).
   IF AVAILABLE mvalvardtemp THEN DO:
      mvalvardtemp.AKTIV = NOT mvalvardtemp.AKTIV.
      RUN gorlika_UI IN brwproc[{&ARROWS}] (INPUT "VARDNR", INPUT "").
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(mvalvardtemp)).
      RUN refreshbrw_UI IN brwproc[{&RIGHT-BROWSE}].
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
   END.
   {musarrow.i}
   musz = FALSE.
END PROCEDURE.

PROCEDURE fastighet_UI :
   {AVBGOM2.I}
   RUN selectfoc_UI.
   IF AVAILABLE mvalvardtemp  THEN DO:
      vardnrvar = mvalvardtemp.VARDNR.
   END.
   RUN valvardtemp_UI.
   RUN FASTIGREG3.W (INPUT fastvardnr,INPUT franvart).
   RUN mvalvardtemp_UI.
   FIND FIRST mvalvardtemp WHERE mvalvardtemp.VARDNR = vardnrvar NO-LOCK NO-ERROR.
   IF AVAILABLE mvalvardtemp THEN DO:
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").  
      RUN gorlika_UI IN brwproc[{&ARROWS}] (INPUT "VARDNR", INPUT "").
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").  
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(mvalvardtemp)).   
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].           
   END.
   ELSE DO:
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").  
   END.
   IF franvart > 1 THEN .
   ELSE DO:
      {AVBFRAM2.I}      
   END.
END PROCEDURE.

PROCEDURE fbtnadm_UI :
   
    RUN ADMMARKV.W.
    IF musz = FALSE THEN DO:
       RUN ADMMARKV2.W.       
    END.
END PROCEDURE.
PROCEDURE btnhmt_UI :
   BTN_HAMT:LOAD-IMAGE("BILDER\xbtn_hamt_over.gif") NO-ERROR.
   RUN hamta_UI (INPUT 1).
   BTN_HAMT:LOAD-IMAGE("BILDER\xbtn_hamt.gif") NO-ERROR.
   RUN title_UI IN brwproc[{&LEFT-BROWSE}].
   /*Dummy */
   status-ok = BRW_URMARK:SELECT-FOCUSED-ROW()  NO-ERROR.
   status-ok = BRW_URMARK:DESELECT-FOCUSED-ROW()  NO-ERROR.   
END PROCEDURE.
PROCEDURE btnbort_UI :
   IF brwval(INPUT TRUE) = TRUE THEN RETURN.
   RUN selectfoc_UI.   
   APPLY "VALUE-CHANGED" TO BRW_VMARK.
   FIND FIRST mvalvardtemp WHERE ROWID(mvalvardtemp) = valdmarkh:ROWID NO-LOCK NO-ERROR.
   IF NOT AVAILABLE mvalvardtemp THEN RETURN.
   fastvardnr = mvalvardtemp.VARDNR.
   RUN bort_UI.
END PROCEDURE.

PROCEDURE avbe_UI :
   RUN selectfoc_UI.   
   IF AVAILABLE mvalvardtemp THEN DO:
      ASSIGN
      sparvardnr = mvalvardtemp.VARDNR.
   END.
END PROCEDURE.
PROCEDURE avb_UI :
   IF franvart NE 1 THEN DO:
      RUN bredhoj_UI.
      EMPTY TEMP-TABLE mvalvardtemp NO-ERROR. 
   END.
   IF franvart = 0 THEN.
   ELSE DO:
      IF BTN_AVB:IMAGE = "BILDER\xbtn_ater.gif" THEN DO:
         x-multi = c-win:WIDTH-PIXELS / c-win:MIN-WIDTH-PIXELS. 
         y-multi = c-win:HEIGHT-PIXELS / c-win:MIN-HEIGHT-PIXELS.  
         ASSIGN
         BRW_VMARK:WIDTH-CHARS =  x-multi * brworgwith  
         BRW_VMARK:HEIGHT-CHARS =  y-multi * brworghight 
         BRW_VMARK:ROW         =  y-multi * brworgrow   
         BRW_VMARK:COLUMN      =  x-multi * brworgcol   
         BTN_NY:ROW            =  y-multi * btnorgrow   
         BTN_NY:COL            =  x-multi * btnorgcol.
      END.
   END.
   IF franvart = 1 THEN DO:
      RUN avbe_UI.
      
      IF BTN_AVB:IMAGE = "BILDER\xbtn_ater.gif" THEN DO:
         RUN goma_UI IN huvprogh (INPUT FALSE,INPUT "AONR").
      END.
      ELSE DO:
         MESSAGE "Du avslutar nu " + SUBSTRING(foretemp.VERSION,1,10)
         VIEW-AS ALERT-BOX QUESTION BUTTONS OK-CANCEL UPDATE val AS LOGICAL.   
         IF val = FALSE THEN RETURN NO-APPLY.         
         IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph NO-ERROR. 
         edataapph = ?.
         RUN avb_UI IN huvprogh.
      END.
   END.
   ELSE RUN goma_UI IN huvprogh (INPUT FALSE,INPUT "AONR").
     
END PROCEDURE.
PROCEDURE vcbrwvmark_UI :
   FIND FIRST mvalvardtemp WHERE ROWID(mvalvardtemp) = valdmarkh:ROWID NO-LOCK NO-ERROR.
   IF AVAILABLE mvalvardtemp THEN DO:
      IF franvart NE 1 THEN RUN btnnykoll_UI.
      ELSE BTN_NY:HIDDEN = FALSE.
      fastvardnr = mvalvardtemp.VARDNR.
      ASSIGN                         
      Guru.GlobalaVariabler:plusaonr = mvalvardtemp.AONR  
      Guru.GlobalaVariabler:plusdnr = mvalvardtemp.DELNR. 
   END.
END PROCEDURE.
PROCEDURE mdbrwvmark_UI :
   APPLY "CHOOSE" TO FBTN_VARD.
END PROCEDURE.
PROCEDURE main_UI :
   {OMSTARTAVGURUH.I}   
   fastvardnr = ?.
   {ALLSTARTDYN.I} 
   C-Win:TITLE = "Markvärdering" + "-" + "Systemsupport 090/184540    elpool.ume@elpool.se  " + foretemp.ATRHOME.
   RUN huvud_UI.   
   RUN frankontroll_UI.
   RUN VISMEDDU.W.
   {musarrow.i}
END PROCEDURE.
PROCEDURE allstartbrw_UI :
   DEFINE VARIABLE korextra AS LOGICAL NO-UNDO.
   korextra = FALSE.
   IF NOT VALID-HANDLE(brwproc[{&LEFT-BROWSE}]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[{&LEFT-BROWSE}] (INPUT BRW_URMARK).
   IF NOT VALID-HANDLE(brwproc[{&RIGHT-BROWSE}]) THEN RUN DYNBRW.P PERSISTENT SET brwproc[{&RIGHT-BROWSE}](INPUT BRW_VMARK).
   IF NOT VALID-HANDLE(brwproc[{&ARROWS}]) THEN DO:
      RUN DYNARROW.P PERSISTENT SET brwproc[{&ARROWS}] (INPUT BRW_URMARK, INPUT BRW_VMARK , INPUT BTN_OVER, INPUT BTN_ALLOVER, INPUT BTN_ALLBACK, INPUT BTN_BACK).    
      RUN addfillin_UI IN brwproc[{&ARROWS}]  (INPUT FILL-IN_VARDANV, INPUT "VARDANV").
      RUN addfillin_UI IN brwproc[{&ARROWS}]  (INPUT FILL-IN_SVARD, INPUT "VARDNR").  
      RUN addfillin_UI IN brwproc[{&ARROWS}]  (INPUT FILL-IN_BEN, INPUT "BENAMNING").
      RUN addfillin_UI IN brwproc[{&ARROWS}]  (INPUT FILL-IN_AONR, INPUT "AONR"). 
   END.
   IF NOT VALID-HANDLE(markhmth) THEN korextra = TRUE.
   IF Guru.Konstanter:appcon THEN DO:
      IF NOT VALID-HANDLE(aonrapph) THEN RUN MAONRAPP.P PERSISTENT SET aonrapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
      IF NOT VALID-HANDLE(markhmth) THEN RUN MARKHMT.P PERSISTENT SET markhmth ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
      IF NOT VALID-HANDLE(fastigregapph) THEN RUN FASTIGREGUAPP.P PERSISTENT SET fastigregapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT. 
      IF NOT VALID-HANDLE(edataapph) THEN RUN EXTRADATAHMT.P PERSISTENT SET edataapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT.
      IF NOT VALID-HANDLE(andravardapph) THEN RUN ANDRAVARDAPP.P PERSISTENT SET andravardapph ON Guru.Konstanter:apphand TRANSACTION DISTINCT.                  
   END.
   ELSE DO:
      IF NOT VALID-HANDLE(aonrapph) THEN RUN MAONRAPP.P PERSISTENT SET aonrapph.
      IF NOT VALID-HANDLE(markhmth) THEN RUN  MARKHMT.P PERSISTENT SET markhmth.
      IF NOT VALID-HANDLE(fastigregapph) THEN RUN FASTIGREGUAPP.P PERSISTENT SET fastigregapph.
      IF NOT VALID-HANDLE(edataapph) THEN RUN EXTRADATAHMT.P PERSISTENT SET edataapph. 
      IF NOT VALID-HANDLE(andravardapph) THEN RUN ANDRAVARDAPP.P PERSISTENT SET andravardapph.                 
   END.
   
   
   RUN anvglob_UI IN markhmth (INPUT Guru.Konstanter:globanv).

   IF franvart = 1 THEN DO:
            
   END.
   IF korextra = TRUE THEN DO:
      korextra = FALSE.
      RUN korextra_UI.
      RUN marksek_UI.
   END.
END PROCEDURE.

PROCEDURE korextra_UI :
   &Scoped-define FORMATNAMN FILL-IN_AONR   
   {AOFORMAT4.I}
   valdutf = 0.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "FAVO"                   
   inextradatatemp.HUVUDCH = Guru.Konstanter:globanv              
   inextradatatemp.HUVUDINT =  ?.   
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:
      valdutf = extradatatemp.SOKINT[2].      
   END.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CMB_UTF:LIST-ITEMS = "".
   status-ok = CMB_UTF:ADD-FIRST("Alla").
   FIND FIRST berkalanvandartemp WHERE berkalanvandartemp.ANVANDARE = Guru.Konstanter:globanv NO-LOCK NO-ERROR.
   IF AVAILABLE berkalanvandartemp THEN DO:
      status-ok = CMB_UTF:ADD-LAST(Guru.Konstanter:globanv + " -- " + berkalanvandartemp.AV-NAMN).
      IF valdutf = 1 THEN ASSIGN CMB_UTF:SCREEN-VALUE = Guru.Konstanter:globanv + " -- " + berkalanvandartemp.AV-NAMN.
      ELSE ASSIGN CMB_UTF:SCREEN-VALUE = "Alla".   
   END.
   FOR EACH berkalanvandartemp:
      IF berkalanvandartemp.ANVANDARE = Guru.Konstanter:globanv THEN.
      ELSE status-ok = CMB_UTF:ADD-LAST(berkalanvandartemp.ANVANDARE + " -- " + berkalanvandartemp.AV-NAMN).
   END.   
   RUN jurp_UI IN aonrapph (INPUT Guru.Konstanter:globanv,OUTPUT TABLE jurperstemp,OUTPUT TABLE judavdtemp).
   CMB_OMR:LIST-ITEMS = "".
   status-ok = CMB_OMR:ADD-LAST("Alla").
   IF CMB_OMR:SCREEN-VALUE = "" OR CMB_OMR:SCREEN-VALUE = ? THEN CMB_OMR:SCREEN-VALUE = "Alla".
   {OMRHMT.I}
   FOR EACH judavdtemp,         
   EACH omrtemp WHERE omrtemp.AVDELNINGNR = judavdtemp.AVDELNINGNR:
      status-ok = CMB_OMR:ADD-LAST(omrtemp.NAMN).
   END.
   CMB_ANSV:LIST-ITEMS = "".
   status-ok = CMB_ANSV:ADD-FIRST("Alla").
   RUN ansvmarkhmt IN markhmth (OUTPUT TABLE ansvmarktemp).
   FOR EACH ansvmarktemp:
      status-ok = CMB_ANSV:ADD-LAST(ansvmarktemp.PERSONALKOD).
   END.
   FIND FIRST ansvmarktemp WHERE ansvmarktemp.PERSONALKOD = Guru.Konstanter:globanvpkod NO-LOCK NO-ERROR.
   IF AVAILABLE ansvmarktemp THEN DO:
      ASSIGN CMB_ANSV:SCREEN-VALUE = ansvmarktemp.PERSONALKOD.
   END.
   ELSE ASSIGN CMB_ANSV:SCREEN-VALUE = "Alla".
   FIND FIRST omrtemp WHERE omrtemp.OMRADE = Guru.Konstanter:globomr 
   USE-INDEX OMR NO-LOCK NO-ERROR.
   IF NOT AVAILABLE omrtemp THEN DO:
      FIND FIRST omrtemp USE-INDEX OMR NO-LOCK NO-ERROR.
   END.
   IF NOT AVAILABLE omrtemp THEN ASSIGN CMB_OMR:SCREEN-VALUE = "Alla".
      ELSE ASSIGN CMB_OMR:SCREEN-VALUE = omrtemp.NAMN.       
   IF Guru.Konstanter:globomr = "" OR Guru.Konstanter:globallao = TRUE THEN DO:
      ASSIGN CMB_OMR:SCREEN-VALUE = "Alla".
      
   END.          
   IF CMB_OMR:SCREEN-VALUE = "" OR CMB_OMR:SCREEN-VALUE = ? THEN CMB_OMR:SCREEN-VALUE = "Alla".   
END PROCEDURE.
PROCEDURE bort_UI :
/* -----------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
-------------------------------------------------------------*/
   DEFINE VARIABLE felmess AS CHARACTER NO-UNDO.
   DEFINE VARIABLE felval AS INTEGER NO-UNDO.
   DEFINE VARIABLE valdfast AS CHARACTER NO-UNDO.
   DEFINE VARIABLE bortvardnr AS INTEGER NO-UNDO.
   bortvardnr = mvalvardtemp.VARDNR.   
   IF TRIM(SUBSTRING(mvalvardtemp.ANVANDARE,1,39)) = Guru.Konstanter:globanv THEN.
   ELSE DO:
      IF Guru.Konstanter:globniv = 0 OR Guru.Konstanter:globniv = 1 THEN.
      ELSE DO:
         MESSAGE "Värderingen är skapad av " mvalvardtemp.ANVANDARE " Du har inte behörighet att ta bort den. " Guru.Konstanter:globniv Guru.Konstanter:globanv 
         VIEW-AS ALERT-BOX.
         RETURN.
      END.   
   END.   
   RUN bortkontroll IN markhmth
   (INPUT bortvardnr, OUTPUT felval, OUTPUT felmess, OUTPUT valdfast).
   IF felval = 6 THEN DO:
      &Scoped-define FORMATNAMN mvalvardtemp.AONR
      {AOFORMAT2.I}     
      MESSAGE "Värderingen är kopplad till " LC(Guru.Konstanter:gaok) formataonr ". Ta bort denna koppling först."
         VIEW-AS ALERT-BOX.
      RETURN.
   END.
   ELSE IF felval NE 0 THEN DO:
      MESSAGE felmess VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE svarbort AS LOGICAL. 
      IF svarbort = TRUE THEN DO:  
         {AVBGOM2.I}
         RUN vard_UI (INPUT felval).         
         IF franvart > 1 THEN .
         ELSE DO:
            {AVBFRAM2.I}      
         END.
      END.       
      RETURN.
   END.
   ELSE DO:
      MESSAGE "Vill du verkligen ta bort denna värdering" bortvardnr "?"
      VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO TITLE "Bortag av värdering"
      UPDATE svarbort2 AS LOGICAL.       
      IF svarbort2 THEN DO: 
         RUN borttag IN markhmth
         (INPUT bortvardnr).
         FIND FIRST urvardtemp WHERE urvardtemp.VARDNR = bortvardnr NO-LOCK NO-ERROR.
         IF AVAILABLE urvardtemp THEN DO: 
            DELETE urvardtemp.
            RUN refreshbrw_UI IN brwproc[{&LEFT-BROWSE}].
         END.
         FIND FIRST mvalvardtemp WHERE mvalvardtemp.VARDNR = bortvardnr NO-LOCK NO-ERROR.
         IF AVAILABLE mvalvardtemp THEN DO: 
            DELETE mvalvardtemp.
         END.
         RUN selnextprevrow_UI IN brwproc[{&RIGHT-BROWSE}].
         RUN refreshbrw_UI IN brwproc[{&RIGHT-BROWSE}].
         RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
      END.
   END.
END PROCEDURE.

PROCEDURE btnnykoll_UI :
   antal_valda = BRW_VMARK:NUM-SELECTED-ROWS. 
   IF antal_valda = 0 THEN DO:      
      BTN_NY:HIDDEN = TRUE.      
   END.
   ELSE DO:      
      RUN selectfoc_UI.
      IF mvalvardtemp.VARDNR = ? THEN DO: 
         BTN_NY:HIDDEN = FALSE.
      END.
      ELSE BTN_NY:HIDDEN = TRUE.
   END.
END PROCEDURE.

PROCEDURE frankontroll_UI :
   ASSIGN
   vartpro = ""
   FILL-IN_AONR:LABEL = Guru.Konstanter:gaok
   FILL-IN_EAONR:LABEL = Guru.Konstanter:gaok
   CMB_OMR:LABEL = Guru.Konstanter:gomrk.
   &Scoped-define FORMATNAMN FILL-IN_EAONR   
   {AOFORMAT4.I}
   &Scoped-define FORMATNAMN FILL-IN_DELNR   
   {DELNRFORMAT2.I}

   CMB_OMR:LABEL = Guru.Konstanter:gomrk.
   IF franvart = 1 THEN DO:      
      ASSIGN
      BTN_HAOF:HIDDEN = FALSE
      BTN_AOF:HIDDEN = FALSE
      BRW_URMARK:HIDDEN      = FALSE      
      CMB_OMR:HIDDEN         = FALSE 
      CMB_UTF:HIDDEN         = FALSE
      TOG_AKT:HIDDEN       = FALSE 
      TOG_INAKT:HIDDEN       = FALSE 
      FILL-IN-AOTEXT:HIDDEN  = FALSE
      FILL-IN-SOKTEXT:HIDDEN  = FALSE
      FILL-IN-HTEXT:HIDDEN   = FALSE 
      CMB_ANSV:HIDDEN    = FALSE 
      FILL-IN_EAONR:HIDDEN  = FALSE 
      FILL-IN_DELNR:HIDDEN  = FALSE 
      FILL-IN_AONR:HIDDEN    = FALSE 
      FILL-IN_BEN:HIDDEN     = FALSE       
      FILL-IN_EVARD:HIDDEN   = FALSE
      FILL-IN_SVARD:HIDDEN   = FALSE 
      FILL-IN_VARDANV:HIDDEN  = FALSE
      BTN_NY:HIDDEN          = FALSE 
      BTN_BORT:HIDDEN        = FALSE
      BTN_BACK:HIDDEN        = FALSE 
      BTN_ALLBACK:HIDDEN     = FALSE 
      BTN_OVER:HIDDEN        = FALSE 
      BTN_ALLOVER:HIDDEN     = FALSE 
      BTN_HAMT:HIDDEN        = FALSE 
      RECT-23:HIDDEN         = FALSE 
      RECT-52:HIDDEN         = FALSE.
   END.
   IF franvart = 0 THEN.
   ELSE IF franvart NE 1 THEN DO:     
      /*
      x-multi = c-win:WIDTH-PIXELS / c-win:MIN-WIDTH-PIXELS. 
      y-multi = c-win:HEIGHT-PIXELS / c-win:MIN-HEIGHT-PIXELS.  
      ASSIGN
      brworgwith = BRW_VMARK:WIDTH-CHARS / x-multi
      brworghight = BRW_VMARK:HEIGHT-CHARS  / y-multi
      brworgrow = BRW_VMARK:ROW             / y-multi
      brworgcol = BRW_VMARK:COLUMN          / x-multi
      btnorgrow = BTN_NY:ROW                / y-multi
      btnorgcol = BTN_NY:COL               / x-multi.
      ASSIGN 
      BTN_HAOF:HIDDEN = TRUE
      BTN_AOF:HIDDEN = TRUE
      BRW_URMARK:HIDDEN      = TRUE      
      CMB_OMR:HIDDEN         = TRUE 
      CMB_UTF:HIDDEN         = TRUE
      TOG_AKT:HIDDEN       = TRUE 
      TOG_INAKT:HIDDEN       = TRUE 
      FILL-IN-AOTEXT:HIDDEN  = TRUE
      FILL-IN-SOKTEXT:HIDDEN  = TRUE
      FILL-IN-HTEXT:HIDDEN   = TRUE 
      CMB_ANSV:HIDDEN    = TRUE 
      FILL-IN_EAONR:HIDDEN  = TRUE 
      FILL-IN_DELNR:HIDDEN  = TRUE 
      FILL-IN_AONR:HIDDEN    = TRUE 
      FILL-IN_BEN:HIDDEN     = TRUE       
      FILL-IN_EVARD:HIDDEN   = TRUE
      FILL-IN_SVARD:HIDDEN   = TRUE 
      FILL-IN_VARDANV:HIDDEN  = TRUE
      BTN_NY:HIDDEN          = TRUE 
      BTN_BORT:HIDDEN        = TRUE
      BTN_BACK:HIDDEN        = TRUE 
      BTN_ALLBACK:HIDDEN     = TRUE 
      BTN_OVER:HIDDEN        = TRUE 
      BTN_ALLOVER:HIDDEN     = TRUE 
      BTN_HAMT:HIDDEN        = TRUE 
      RECT-23:HIDDEN         = TRUE 
      RECT-52:HIDDEN         = TRUE
      BRW_VMARK:WIDTH-CHARS =    BRW_MAXMALL:WIDTH-CHARS 
      BRW_VMARK:ROW =            BRW_MAXMALL:ROW         
      BRW_VMARK:COLUMN =         BRW_MAXMALL:COLUMN     
      BRW_VMARK:HEIGHT-CHARS =   BRW_MAXMALL:HEIGHT-CHARS
      BTN_NY:ROW = 24.29        
      BTN_NY:COL = 55.   
      */
      FIND FIRST markintemp NO-LOCK NO-ERROR.
      FIND FIRST mvalvardtemp WHERE mvalvardtemp.AONR = markaonr 
         AND mvalvardtemp.DELNR = markdelnr NO-LOCK NO-ERROR.
      IF AVAILABLE mvalvardtemp THEN DO:
         RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(mvalvardtemp)).
         RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
         IF mvalvardtemp.VARDNR = ? THEN BTN_NY:HIDDEN = FALSE. 
      END.
   END.
   IF franvart = 3 THEN DO:
      FIND FIRST markintemp NO-LOCK NO-ERROR.
      FIND FIRST mvalvardtemp NO-LOCK NO-ERROR.      
      IF AVAILABLE mvalvardtemp THEN DO:
         RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(mvalvardtemp)).
         RUN ny_UI.
         RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
      END.
   END.
END PROCEDURE.
PROCEDURE hamta_UI :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
   DEFINE INPUT PARAMETER hamtval AS INTEGER NO-UNDO.
   {OMSTARTAVGURUH.I} 
   IF hamtval = 1 THEN DO: 
      FIND FIRST valsoktemp NO-LOCK NO-ERROR.                      
      IF NOT AVAILABLE valsoktemp THEN CREATE valsoktemp.          
      ASSIGN                                                       
      valsoktemp.SOKCHAR[2] = TRIM(SUBSTRING(CMB_UTF:SCREEN-VALUE,1,INDEX(CMB_UTF:SCREEN-VALUE," -- ") - 1))
      valsoktemp.SOKCHAR[3] = CMB_ANSV:SCREEN-VALUE
      valsoktemp.SOKLOG[1] = TOG_AKT:CHECKED                              
      valsoktemp.SOKLOG[2] = TOG_INAKT:CHECKED.                                
      IF CMB_ANSV:SCREEN-VALUE = "ALLA" THEN ASSIGN valsoktemp.SOKCHAR[3] = "".
      FIND FIRST omrtemp WHERE omrtemp.NAMN = CMB_OMR:SCREEN-VALUE              
      NO-LOCK NO-ERROR.                                         
      IF NOT AVAILABLE omrtemp THEN DO:                            
         valsoktemp.SOKCHAR[1] = "ALLA".                           
      END.                                                         
      ELSE DO:                                         
         valsoktemp.SOKCHAR[1] = omrtemp.OMRADE.       
      END.
      RUN hmtalla IN markhmth
      (INPUT TABLE valsoktemp, INPUT-OUTPUT TABLE urvardtemp). 
      RUN openbdyn_UI IN brwproc[{&LEFT-BROWSE}] (INPUT "").                  
      RUN fetchselrowid_UI IN brwproc[{&LEFT-BROWSE}].                        
   END.
   ELSE IF hamtval = 2 THEN DO:
      FIND FIRST mvalvardtemp WHERE mvalvardtemp.VARDNR = INTEGER(FILL-IN_EVARD:SCREEN-VALUE) NO-LOCK NO-ERROR.
      IF NOT AVAILABLE mvalvardtemp THEN DO:
         RUN hmtenAPPEN IN markhmth
         (INPUT FILL-IN_EVARD:SCREEN-VALUE, OUTPUT TABLE mvalvardtemp APPEND). 
      END.
      RUN fetchselrowid_UI IN brwproc[{&RIGHT-BROWSE}].
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
      FIND FIRST mvalvardtemp WHERE mvalvardtemp.VARDNR = INTEGER(FILL-IN_EVARD:SCREEN-VALUE) NO-LOCK NO-ERROR.
      IF AVAILABLE mvalvardtemp THEN DO:
         RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(mvalvardtemp)).
      END.
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
   END.
   ELSE IF hamtval = 3 THEN DO:
      IF TOG_ALLAMARK:CHECKED = TRUE THEN DO:
         FOR EACH mvalvardtemp WHERE mvalvardtemp.AONR = FILL-IN_EAONR:SCREEN-VALUE:
            DELETE mvalvardtemp.
         END. 
         RUN hmtmarkaonr_UI IN markhmth (INPUT FILL-IN_EAONR:SCREEN-VALUE,?, OUTPUT TABLE mvalvardtemp APPEND).
         FIND FIRST mvalvardtemp  WHERE mvalvardtemp.AONR = FILL-IN_EAONR:SCREEN-VALUE AND mvalvardtemp.DELNR = INTEGER(FILL-IN_DELNR:SCREEN-VALUE) NO-LOCK NO-ERROR.
         IF NOT AVAILABLE mvalvardtemp THEN DO:
            FIND FIRST mvalvardtemp  WHERE mvalvardtemp.AONR = FILL-IN_EAONR:SCREEN-VALUE NO-LOCK NO-ERROR.
         END.
      END.
      ELSE DO:
         FOR EACH mvalvardtemp WHERE mvalvardtemp.AONR = FILL-IN_EAONR:SCREEN-VALUE  AND mvalvardtemp.DELNR = INTEGER(FILL-IN_DELNR:SCREEN-VALUE):
            DELETE mvalvardtemp.
         END. 
         RUN hmtmarkaonr_UI IN markhmth (INPUT FILL-IN_EAONR:SCREEN-VALUE,INPUT INTEGER(FILL-IN_DELNR:SCREEN-VALUE), OUTPUT TABLE mvalvardtemp APPEND).
         FIND FIRST mvalvardtemp  WHERE mvalvardtemp.AONR = FILL-IN_EAONR:SCREEN-VALUE AND mvalvardtemp.DELNR = INTEGER(FILL-IN_DELNR:SCREEN-VALUE) NO-LOCK NO-ERROR.
      END.     
      IF NOT AVAILABLE mvalvardtemp THEN DO:
         MESSAGE "Hittar ingen markvärdering med " FILL-IN_EAONR:SCREEN-VALUE INTEGER(FILL-IN_DELNR:SCREEN-VALUE)
             VIEW-AS ALERT-BOX TITLE "Meddelande!".
      END.
      IF AVAILABLE mvalvardtemp THEN DO:
         RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(mvalvardtemp)).
         RUN setcolsortvar_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
         RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
         RUN setdefaultcol_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT 4).
         RUN colsortdynbrw_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
         RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
      END.                      
   END.
   {musarrow.i} 
END PROCEDURE.


PROCEDURE huvud_UI :
   IF franvart = 1 THEN DO:
      /*direkt här*/
      FIND FIRST mvalvardtemp NO-LOCK NO-ERROR.
      IF NOT AVAILABLE  mvalvardtemp THEN DO:
         FOR EACH markintemp:
            CREATE mvalvardtemp.
            BUFFER-COPY markintemp TO mvalvardtemp.
         END.
         RUN hmtkoppling IN markhmth (INPUT-OUTPUT TABLE mvalvardtemp).
         
         FOR EACH mvalvardtemp WHERE mvalvardtemp.VARDNR = ?,
         EACH markintemp WHERE markintemp.AONR = mvalvardtemp.AONR AND 
         markintemp.DELNR = mvalvardtemp.DELNR:
            mvalvardtemp.BENAMNING = markintemp.ORT.
            IF markintemp.AONRAVDATUM NE 01/01/91 THEN DELETE mvalvardtemp.
         END.
         RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
         FIND FIRST mvalvardtemp WHERE mvalvardtemp.AONR = markaonr AND 
         mvalvardtemp.DELNR = markdelnr NO-LOCK NO-ERROR.
         IF AVAILABLE mvalvardtemp THEN DO:
            RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(mvalvardtemp)).
            RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
            IF mvalvardtemp.VARDNR = ? THEN BTN_NY:HIDDEN = FALSE. 
         END.         
      END.     
   END.
   ELSE DO:    
      EMPTY TEMP-TABLE mvalvardtemp NO-ERROR. 
      FOR EACH markintemp:
         CREATE mvalvardtemp.
         BUFFER-COPY markintemp TO mvalvardtemp.
      END.
      RUN hmtkoppling IN markhmth (INPUT-OUTPUT TABLE mvalvardtemp).
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
   END.
   
END PROCEDURE.

PROCEDURE menymarkval_UI :
   DEFINE INPUT PARAMETER vad AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER franvart2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER aonr2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER delnr2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR markintemp.
   ASSIGN
   franvart = franvart2
   markaonr  = aonr2 
   markdelnr = delnr2.
   RUN btnmarkstart_UI IN huvprogh (INPUT franvart, INPUT markaonr, INPUT markdelnr, INPUT TABLE markintemp).
   IF vad = 1 THEN DO:      
   END.
   IF vad = 3 THEN DO:
      APPLY "CHOOSE" TO FBTN_UPP.
   END.
   IF vad = 4 THEN DO:
      APPLY "CHOOSE" TO FBTN_FASTIGHET.
   END.
   IF vad = 5 THEN DO:
      APPLY "CHOOSE" TO FBTN_VARD.
   END.
   IF vad = 6 THEN DO:
      APPLY "CHOOSE" TO FBTN_VISKAL.
   END.
   IF vad = 7 THEN DO:
      APPLY "CHOOSE" TO FBTN_VISMARK.
   END.
   IF vad = 8 THEN DO:
      APPLY "CHOOSE" TO FBTN_OMRAKNA.
   END.
   IF vad = 9 THEN DO:
      APPLY "CHOOSE" TO BTN_EXPM.
   END.   
   APPLY "CHOOSE" TO BTN_AVB.
END PROCEDURE.

PROCEDURE menymark_UI :
   DEFINE INPUT PARAMETER franvart2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER aonr2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER delnr2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR markintemp.
   ASSIGN
   franvart = franvart2
   markaonr  = aonr2 
   markdelnr = delnr2.
   RUN btnmarkstart_UI IN huvprogh (INPUT franvart, INPUT markaonr, INPUT markdelnr, INPUT TABLE markintemp).
   IF franvart > 1 THEN .
   ELSE DO:
      {AVBFRAM2.I}      
   END.
   RUN SetDefaultCursors IN Guru.Konstanter:hpApi.      
   WAIT-FOR CHOOSE OF BTN_AVB OR WINDOW-CLOSE OF C-WIN OR END-ERROR OF C-Win OR ENDKEY OF C-Win.
END PROCEDURE.
PROCEDURE ny_UI :
   DEFINE VARIABLE valtomrade AS CHARACTER NO-UNDO.
   DEFINE VARIABLE evardnr AS INTEGER NO-UNDO.
   aoplan = FALSE.
   valtomrade = CMB_OMR:SCREEN-VALUE.
   vart = "NYA".     
   avbryt = FALSE.   
   vardnrvar = ?.
   IF franvart NE 1 THEN DO:
      aoplan = TRUE.
      valtomrade = mvalvardtemp.OMRADE.                                                
      RUN hmtaonrrec IN markhmth (INPUT mvalvardtemp.AONR, INPUT mvalvardtemp.DELNR, OUTPUT aonrrec).      
   END.
   IF franvart = 1 THEN DO:
      IF AVAILABLE mvalvardtemp THEN DO:
         IF mvalvardtemp.VARDNR = ? THEN DO:
            MESSAGE "Vill du koppla den nya markvärderingen till " LC(Guru.Konstanter:gaok) mvalvardtemp.AONR  STRING(mvalvardtemp.DELNR,Guru.Konstanter:varforetypchar[1]) "?"             
            VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE val AS LOGICAL.
            CASE val:
               WHEN TRUE THEN DO:
                  aoplan = TRUE.
                  valtomrade = mvalvardtemp.OMRADE.                                                
                  RUN hmtaonrrec IN markhmth (INPUT mvalvardtemp.AONR, INPUT mvalvardtemp.DELNR, OUTPUT aonrrec).      
               END.
               WHEN FALSE THEN DO:                  
               END.
            END CASE. 
         END.
      END.
   END.
   RUN selectfoc_UI.
   IF AVAILABLE mvalvardtemp  THEN DO:
      evardnr = mvalvardtemp.VARDNR.
   END.
   RUN valvardtemp_UI.
   RUN ANDRAVARD2.W (INPUT-OUTPUT vardnrvar, INPUT valtomrade,INPUT vbenmark).
   RUN mvalvardtemp_UI.
   IF avbryt = FALSE AND vardnrvar NE ? THEN DO:
      IF franvart = 3 THEN DO:
         RUN andrapostao IN markhmth
         (INPUT vardnrvar, INPUT-OUTPUT TABLE mvalvardtemp).          
      END.
      ELSE DO:
         RUN hmtenappen IN markhmth
         (INPUT vardnrvar,OUTPUT TABLE mvalvardtemp APPEND). 
         FIND FIRST mvalvardtemp WHERE mvalvardtemp.VARDNR = vardnrvar NO-LOCK NO-ERROR.
         IF mvalvardtemp.AONR NE ? THEN DO:
            FOR EACH mvalvardtempbuff WHERE mvalvardtempbuff.AONR = mvalvardtemp.AONR AND mvalvardtempbuff.DELNR = mvalvardtemp.DELNR:
               IF mvalvardtempbuff.VARDNR = ? THEN DELETE mvalvardtempbuff.
            END.  
         END.
         
      END.
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
      FIND FIRST mvalvardtemp WHERE mvalvardtemp.VARDNR = vardnrvar NO-LOCK NO-ERROR.
      IF AVAILABLE mvalvardtemp THEN DO:
         RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(mvalvardtemp)).         
         RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].      
         IF franvart = 3 AND mvalvardtemp.VARDNR NE ? THEN DO:
            BTN_NY:HIDDEN = TRUE.
         END.
      END.      
   END.
   ELSE DO:
      FIND FIRST mvalvardtemp WHERE mvalvardtemp.VARDNR = evardnr NO-LOCK NO-ERROR.
      IF AVAILABLE mvalvardtemp THEN DO:
         RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").  
         RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(mvalvardtemp)).   
         RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].           
      END.
      avbryt = FALSE.
   END.      
   {musarrow.i}
   musz = FALSE.
END PROCEDURE.

PROCEDURE sparaaofavoriter_UI:
   tthandle = TEMP-TABLE mvalvardtemp:HANDLE.
   FIND FIRST sparaladdatemp NO-ERROR.
   IF NOT AVAILABLE sparaladdatemp THEN CREATE sparaladdatemp.
   ASSIGN
   sparaladdatemp.GLOBANV = Guru.Konstanter:globanv /*Användare, i detta fall ELPAO*/
   sparaladdatemp.BENAMNING = "MARK" /*Benämnings sufix, i detta fall ELPAO$STOR*/
   sparaladdatemp.TABVAL = "VARDERING" /*Tabellnamn*/
   sparaladdatemp.FALTVALAO = "" /*CHARACTER field*/
   sparaladdatemp.FALTVALDEL = "VARDNR" /*Integer field*/
   sparaladdatemp.FALTVALDATE = "".  /*DATE field*/
   RUN sparabrw_UI IN brwproc[{&RIGHT-BROWSE}] 
      (INPUT TABLE-HANDLE tthandle, INPUT TABLE sparaladdatemp).
END PROCEDURE.

PROCEDURE repo_UI :
   RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
   RUN vcbrwvmark_UI.       
END PROCEDURE.
PROCEDURE openb_UI :  
   RUN uppdatvalvard_UI IN markhmth (INPUT-OUTPUT TABLE mvalvardtemp).
   RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
   FIND FIRST mvalvardtemp WHERE mvalvardtemp.VARDNR = sparvardnr
   NO-LOCK NO-ERROR.
   RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(mvalvardtemp)).
   RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].     
END PROCEDURE.
PROCEDURE wingom_UI :  
   {AVBGOM2.I} 
END PROCEDURE.
PROCEDURE borthand_UI :
   valdmarkh:EMPTY-TEMP-TABLE() NO-ERROR.    
   IF VALID-HANDLE(valdmarkh) THEN   DELETE OBJECT valdmarkh NO-ERROR.
   valdmarkh = ?.
   {BORTBRWPROC.I}  
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph NO-ERROR. 
   IF VALID-HANDLE(fastigregapph) THEN DO: 
      RUN fastavs_UI IN fastigregapph.
      DELETE PROCEDURE fastigregapph NO-ERROR.
   END.   
   IF VALID-HANDLE(aonrapph) THEN DELETE PROCEDURE aonrapph NO-ERROR.  
   IF VALID-HANDLE(markhmth) THEN DELETE PROCEDURE markhmth NO-ERROR.
   IF VALID-HANDLE(framesizeh) THEN DELETE PROCEDURE framesizeh NO-ERROR.
   IF VALID-HANDLE(laddaproch) THEN DELETE PROCEDURE laddaproch NO-ERROR.
   IF VALID-HANDLE(andravardapph) THEN DELETE PROCEDURE andravardapph NO-ERROR.
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph NO-ERROR.  
   edataapph = ?. 
END PROCEDURE.
PROCEDURE mvalvardtempen_UI :
   FIND FIRST mvalvardtemp WHERE mvalvardtemp.AONR = valvardtemp.AONR AND mvalvardtemp.DELNR = valvardtemp.DELNR
   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE mvalvardtemp THEN CREATE mvalvardtemp.
   BUFFER-COPY valvardtemp TO mvalvardtemp.   
END PROCEDURE.
PROCEDURE mvalvardtemp_UI :   
   IF musz = TRUE THEN RETURN.
   EMPTY TEMP-TABLE mvalvardtemp NO-ERROR. 
   FOR EACH valvardtemp:
      CREATE mvalvardtemp.
      BUFFER-COPY valvardtemp TO mvalvardtemp.
   END.
END PROCEDURE.

PROCEDURE valvardtempen_UI :
   FIND FIRST valvardtemp WHERE valvardtemp.AONR = mvalvardtemp.AONR AND valvardtemp.DELNR = mvalvardtemp.DELNR
   NO-LOCK NO-ERROR.
   IF NOT AVAILABLE valvardtemp THEN CREATE valvardtemp.
   BUFFER-COPY mvalvardtemp TO valvardtemp.   
END PROCEDURE.
PROCEDURE valvardtemp_UI :
   EMPTY TEMP-TABLE valvardtemp NO-ERROR. 
   FOR EACH mvalvardtemp:
      CREATE valvardtemp.
      BUFFER-COPY mvalvardtemp TO valvardtemp.
   END.
END PROCEDURE.

PROCEDURE valvardtempenbort_UI :
   FIND FIRST valvardtemp WHERE valvardtemp.AONR = mvalvardtemp.AONR AND valvardtemp.DELNR = mvalvardtemp.DELNR
   NO-LOCK NO-ERROR.
   IF AVAILABLE valvardtemp THEN DELETE valvardtemp.
   
END PROCEDURE.
PROCEDURE valvardtempallabort_UI :
   EMPTY TEMP-TABLE valvardtemp NO-ERROR.    
END PROCEDURE.

PROCEDURE imp_UI :
   {AMERICANEUROPEAN.I}
   RUN expimp_UI (INPUT 2).
   {EUROPEANAMERICAN.I}
END PROCEDURE.

PROCEDURE exp_UI :
   {AMERICANEUROPEAN.I}
   RUN expimp_UI (INPUT 1).
   {EUROPEANAMERICAN.I}
END PROCEDURE.

PROCEDURE expimp_UI :
   DEFINE INPUT PARAMETER val AS INTEGER NO-UNDO.      
   IF val = 1 THEN DO:      
      IF brwval(INPUT TRUE) = TRUE THEN DO: 
         RETURN NO-APPLY.
      END.
      ELSE DO:
         IF felkoll(INPUT 1) = TRUE THEN RETURN.                  
         RUN selectfoc_UI.
         ASSIGN 
         valmark = mvalvardtemp.VARDNR
         valaom = mvalvardtemp.AONR
         valdelm = mvalvardtemp.DELNR
         valomm = mvalvardtemp.OMRADE
         valbenm = mvalvardtemp.BENAMNING.         
      END.
   END.
   IF val = 2 THEN DO:
      ASSIGN
      valmark = 0
      valaom = ?
      valdelm = 0
      valomm = ""
      valbenm = "".            
   END.
   {OMSTARTAVGURUH.I}
   {AVBGOM2.I}      
   musz = FALSE.
   RUN vcbrwvmark_UI.
   RUN EXPIMPMVXML.W (INPUT val,INPUT-OUTPUT valmark,INPUT-OUTPUT valomm,INPUT-OUTPUT valbenm,INPUT-OUTPUT valaom,INPUT-OUTPUT valdelm).   
   IF musz = FALSE AND val = 2 THEN DO:
      IF AVAILABLE mvalvardtemp THEN DO:
         IF mvalvardtemp.VARDNR = ? THEN DO:
            MESSAGE "Vill du koppla den nya markvärderingen till " LC(Guru.Konstanter:gaok) mvalvardtemp.AONR  STRING(mvalvardtemp.DELNR,Guru.Konstanter:varforetypchar[1]) "?"             
            VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE valmeny AS LOGICAL.
            CASE valmeny:
               WHEN TRUE THEN DO:                  
                  RUN hmtaonrrec IN markhmth (INPUT mvalvardtemp.AONR, INPUT mvalvardtemp.DELNR, OUTPUT aonrrec). 
                  RUN kontroll IN andravardapph (INPUT TRUE,INPUT aonrrec,OUTPUT TABLE felmeddtemp).
                  FIND FIRST felmeddtemp NO-LOCK NO-ERROR.
                  IF AVAILABLE felmeddtemp THEN DO:
                     MESSAGE felmeddtemp.FELMEDD VIEW-AS ALERT-BOX TITLE "Meddelande".                           
                     DELETE felmeddtemp.                     
                  END.
                  ELSE DO:
                      DELETE mvalvardtemp.
                      RUN koppla_UI IN andravardapph (INPUT aonrrec,INPUT  valmark).
                  END.                         
               END.
               WHEN FALSE THEN DO:                  
               END.
            END CASE. 
         END.
      END.                
      FIND FIRST mvalvardtemp WHERE mvalvardtemp.VARDNR = valmark
      AND mvalvardtemp.OMRADE = valomm NO-LOCK NO-ERROR.
      IF NOT AVAILABLE mvalvardtemp THEN DO:
         FIND FIRST valsoktemp NO-LOCK NO-ERROR.
         IF NOT AVAILABLE valsoktemp THEN CREATE valsoktemp.
         ASSIGN
         valsoktemp.SOKVAL = 4  
         valsoktemp.SOKINT[1] = valmark
         valsoktemp.SOKCHAR[1] = valomm.         
         RUN imphmtmv_UI IN markhmth (INPUT TABLE valsoktemp,OUTPUT TABLE mvalvardtemp APPEND).
         FIND FIRST mvalvardtemp WHERE mvalvardtemp.VARDNR = valmark
         AND mvalvardtemp.OMRADE = valomm NO-LOCK NO-ERROR.         
      END.
      IF AVAILABLE mvalvardtemp THEN DO:
         FIND FIRST urvardtemp WHERE urvardtemp.OMRADE = mvalvardtemp.OMRADE  AND 
         urvardtemp.AONR = mvalvardtemp.AONR AND urvardtemp.DELNR = mvalvardtemp.DELNR
         NO-LOCK NO-ERROR.
         IF AVAILABLE urvardtemp THEN DO:
            BUFFER-COPY mvalvardtemp TO urvardtemp.
            RUN refreshbrw_UI IN brwproc[{&LEFT-BROWSE}].
         END.         
      END.
      RUN setcolsortvar_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").
      RUN openbdynspec_UI IN brwproc[{&RIGHT-BROWSE}].
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(mvalvardtemp)).
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].      
   END.
   musz = FALSE.
   IF franvart > 1 THEN .
   ELSE DO:
      {AVBFRAM2.I}      
   END.
   {musarrow.i}
END PROCEDURE.


FUNCTION brwval RETURNS LOGICAL
   ( INPUT visamed AS LOGICAL ) :
   RUN urvalaktiv_UI IN brwproc[{&ARROWS}] (OUTPUT leftbrwakt).
   IF leftbrwakt = TRUE THEN 
      antal_valda = BRW_URMARK:NUM-SELECTED-ROWS.
   ELSE antal_valda = BRW_VMARK:NUM-SELECTED-ROWS. 
   IF antal_valda = 0 THEN DO:      
      IF visamed = TRUE THEN MESSAGE "Ingen markvärdering är vald!" VIEW-AS ALERT-BOX.
      vardnrvar = 0.
      RETURN TRUE.                
   END.
   IF leftbrwakt = TRUE THEN DO:
      EMPTY TEMP-TABLE mvalvardtemp NO-ERROR.      
      RUN sel_over_UI IN brwproc[{&ARROWS}].
      RUN setlastrowid_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT ROWID(mvalvardtemp)).
      RUN openbdyn_UI IN brwproc[{&RIGHT-BROWSE}] (INPUT "").  
      RUN lastselectdyn_UI IN brwproc[{&RIGHT-BROWSE}].
   END.
   ELSE DO:
      RUN selectfoc_UI.
   END.
   IF mvalvardtemp.VARDNR = ? THEN DO:
      MESSAGE "Det finns ingen markvärdering för " + LC(Guru.Konstanter:gaok) + ": " + mvalvardtemp.AONR + "."        
      VIEW-AS ALERT-BOX TITLE "Meddelande". 
      vardnrvar = ?.
      RETURN TRUE.
   END.
   
   RETURN FALSE.   /* Function return value. */
END FUNCTION.

FUNCTION felkoll RETURNS LOGICAL
  ( INPUT felmed AS INTEGER ) :
   IF mvalvardtemp.VARDNR = ? THEN DO:
      MESSAGE "Det finns ingen värdering för " + LC(Guru.Konstanter:gaok) + ": " + mvalvardtemp.AONR + "."        
         VIEW-AS ALERT-BOX TITLE "Meddelande". 
      RETURN TRUE.
   END.
   IF felmed LT 2 THEN DO:
      IF mvalvardtemp.AKTIV = FALSE THEN DO:
         MESSAGE "Värderingen måste vara aktiv. Funktionen ej möjlig att utföra."        
            VIEW-AS ALERT-BOX TITLE "Meddelande". 
         RETURN TRUE.
      END.
   END.
   RETURN FALSE.   /* Function return value. */
END FUNCTION.
