/*LULEEKO2.P*/

/* GURU            ASW-FIL          GRANEKO         GRANINGE
   K1              IEDIM2           RGL             K2 -OMRÅDE
   K2              IEDIM3           TD              K3 -RÖRELSGREN
   K3              IEDIM5           -               KONTODEL 5
   K4              IEDIM4           AONR            K4-PROJEKTNR
   K5              IEDIM1           KOSTNADSLAG     KONTO        
*/

DEFINE SHARED TEMP-TABLE foretemp NO-UNDO
   FIELD FTG AS CHARACTER
   INDEX FTG IS PRIMARY FTG.
DEFINE TEMP-TABLE ekoforst
   FIELD FTG AS CHARACTER
   FIELD ORT AS CHARACTER
   FIELD ENY LIKE EKRAPPRESULT.ENY 
   FIELD EPERSONALKOD LIKE EKRAPPRESULT.EPERSONALKOD 
   FIELD EPROJEKT LIKE EKRAPPRESULT.EPROJEKT
   FIELD DELNR LIKE AONRTAB.DELNR 
   FIELD EORG LIKE EKRAPPRESULT.EORG     
   FIELD EGEO LIKE EKRAPPRESULT.EGEO  
   FIELD FELDEBKRED AS LOGICAL
   FIELD EVERDATUM AS DATE 
   FIELD EOVERJA LIKE EKRAPPRESULT.EOVERJA
   FIELD EBELOPP LIKE  EKRAPPRESULT.EBELOPP 
   FIELD EANTAL LIKE EKRAPPRESULT.EANTAL 
   FIELD ETIMMAR LIKE EKRAPPRESULT.EANTAL                
   FIELD ELONTILLAGG LIKE EKRAPPRESULT.ELONTILLAGG 
   FIELD ELONTILLANTAL LIKE EKRAPPRESULT.ELONTILLAN
   FIELD ELONBELOPP LIKE EKRAPPRESULT.ELONBELOPP         
   FIELD PERSTYP AS CHARACTER         
   FIELD BEFATTNING AS CHARACTER   
   INDEX PERSORG IS PRIMARY EPERSONALKOD EORG EGEO EPROJEKT DELNR ASCENDING.
DEFINE TEMP-TABLE eko
   FIELD FTG AS CHARACTER
   FIELD ORT AS CHARACTER
   FIELD K1 AS CHARACTER
   FIELD K2 AS CHARACTER
   FIELD K3 AS CHARACTER
   FIELD K4 AS CHARACTER
   FIELD K5 AS CHARACTER
   FIELD EDEBKRED LIKE EKRAPPRESULT.EDEBKRED
   FIELD EVERDATUM AS DATE  
   FIELD EPROJEKT LIKE EKRAPPRESULT.EPROJEKT 
   FIELD DELNR LIKE AONRTAB.DELNR 
   FIELD EORG LIKE EKRAPPRESULT.EORG 
   FIELD EGEO LIKE EKRAPPRESULT.EGEO       
   FIELD EKOSTNADSSLAG LIKE EKRAPPRESULT.EKOSTNADSSLAG    
   FIELD EBELOPP LIKE  EKRAPPRESULT.EBELOPP 
   FIELD EANTAL  LIKE EKRAPPRESULT.EANTAL 	       
   FIELD ELONTILLAGG LIKE EKRAPPRESULT.ELONTILLAGG 
   FIELD ELONTILLANTAL LIKE EKRAPPRESULT.ELONTILLANTAL    
   FIELD ELONBELOPP LIKE EKRAPPRESULT.ELONBELOPP         
   FIELD FELDEBKRED AS LOGICAL
   INDEX ORG IS PRIMARY EVERDATUM EORG EPROJEKT EKOSTNADSSLAG ASCENDING.   
DEFINE TEMP-TABLE slutut
   FIELD FTG AS CHARACTER
   FIELD ORT AS CHARACTER
   FIELD VDATUM AS DATE
   FIELD DEBKRED AS LOGICAL 
   FIELD FELDEBKRED AS LOGICAL
   FIELD ANTAL AS DECIMAL 
   FIELD BELOPP AS DECIMAL       
   FIELD K1 AS CHARACTER
   FIELD K2 AS CHARACTER
   FIELD K3 AS CHARACTER
   FIELD K4 AS CHARACTER
   FIELD K5 AS CHARACTER
   FIELD BIL AS CHARACTER
   FIELD K2POS8 AS CHARACTER
   INDEX ORG IS PRIMARY FTG DEBKRED K1 K2 K3 K4 K5.
DEFINE TEMP-TABLE slututK LIKE slutut.

DEFINE TEMP-TABLE omrkosttemp
   FIELD OMRADE AS CHARACTER
   FIELD KOSTNADSLAGDEB AS CHARACTER
   FIELD KOSTNADSLAGKRED AS CHARACTER
   FIELD KOSTNADSLAGDEB2 AS CHARACTER
   FIELD KOSTNADSLAGKRED2 AS CHARACTER
   FIELD PERSTYP AS CHARACTER
   INDEX PERSTYP IS PRIMARY PERSTYP OMRADE.
DEFINE BUFFER eko2 FOR eko.

{LESAMMAN.I}
DEFINE INPUT PARAMETER feltider AS LOGICAL NO-UNDO.
DEFINE INPUT PARAMETER vkdatum AS DATE NO-UNDO.
DEFINE INPUT PARAMETER skarpvar AS LOGICAL NO-UNDO.
DEFINE INPUT PARAMETER korvar AS CHARACTER NO-UNDO.
DEFINE INPUT PARAMETER TABLE FOR ekoforst.

DEFINE NEW SHARED VARIABLE musz AS LOGICAL NO-UNDO.
DEFINE NEW SHARED VARIABLE nytid AS DECIMAL FORMAT "99.99" NO-UNDO.
DEFINE NEW SHARED VARIABLE sekunder AS INTEGER FORMAT "-9999999" NO-UNDO. 

DEFINE VARIABLE sattfore AS CHARACTER NO-UNDO.
DEFINE VARIABLE summmallab AS DECIMAL NO-UNDO.
DEFINE VARIABLE summmallabch AS CHARACTER NO-UNDO.
DEFINE VARIABLE summmallaant AS DECIMAL NO-UNDO.
DEFINE VARIABLE summmallaantch AS CHARACTER NO-UNDO.
DEFINE VARIABLE kommando AS CHARACTER NO-UNDO. 
DEFINE VARIABLE kommando2 AS CHARACTER NO-UNDO. 
DEFINE VARIABLE filnamn1 AS CHARACTER NO-UNDO. 
DEFINE VARIABLE filnamn2 AS CHARACTER NO-UNDO. 
DEFINE VARIABLE uttagsatt AS INTEGER NO-UNDO.
DEF VAR debvar AS DECIMAL FORMAT "->>>>>>>>>.99" NO-UNDO.
DEF VAR debvar2 AS DECIMAL FORMAT "->>>>>>>>>.99" NO-UNDO.
DEF VAR kredvar AS DECIMAL FORMAT "->>>>>>>>>.99" NO-UNDO.
DEF VAR diffvar AS DECIMAL FORMAT "->>>>>>>>>.99" NO-UNDO.
DEF VAR kredvar2 AS DECIMAL FORMAT "->>>>>>>>>.99" NO-UNDO.
DEF VAR diffvar2 AS DECIMAL FORMAT "->>>>>>>>>.99" NO-UNDO.
DEFINE VARIABLE nolldummy AS CHARACTER NO-UNDO.
nolldummy = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000".
DEFINE VARIABLE kontokod LIKE EKRAPPRESULT.EKOSTNADSSLAG NO-UNDO. 
DEFINE VARIABLE kontokode LIKE EKRAPPRESULT.EKOSTNADSSLAG NO-UNDO. 
DEFINE VARIABLE kontokod2 LIKE EKRAPPRESULT.EKOSTNADSSLAG NO-UNDO. 
DEFINE VARIABLE kontokode2 LIKE EKRAPPRESULT.EKOSTNADSSLAG NO-UNDO. 
OUTPUT TO VALUE(samvar) APPEND.
   PUT "LULEKO2.P " STRING(TIME,"HH:MM") " " TODAY SKIP.
OUTPUT CLOSE.
/*DEBET OCH KREDIT KONTON*/
/*LULEKONTON.I*/
FOR EACH BEFATTNINGSTAB NO-LOCK:
   RUN omrk_UI (INPUT BEFATTNINGSTAB.KOSTNADSSLAG,INPUT "9970",INPUT BEFATTNINGSTAB.BEFATTNING).
END.
RUN omrk_UI (INPUT "9704",INPUT "9970",INPUT "ENKE").
RUN omrk_UI (INPUT "9705",INPUT "9970",INPUT "KVAL").

/*POSTER FÅR RÄTT KONTO*/
RUN kontoposter_UI.      /*debet per aonr kredit per aonr och rätt område*/
FIND LAST eko NO-ERROR.
FIND LAST eko2 NO-ERROR.

/*KONTOFÖRDELLNING*/
RUN kontofordel_UI.      /*fördelning av på konto och blankning av nej aonr*/
/*KREDITPOSTER*/
RUN kreditposter_UI.    /*summering av kredit*/
/*Kontroll av debetsum = kreditsum*/
/*FILEN*/
/*RUN GKALEKOUT.P (INPUT TABLE slutut).*/



RUN LULEEKOUT.P (INPUT samvar,INPUT feltider,INPUT vkdatum,INPUT skarpvar,INPUT TABLE slutut).

PROCEDURE omrk_UI:
   DEFINE INPUT PARAMETER debvar AS CHARACTER.
   DEFINE INPUT PARAMETER krevar AS CHARACTER.
   DEFINE INPUT PARAMETER ptypvar AS CHARACTER.
   CREATE omrkosttemp.
   ASSIGN
   omrkosttemp.KOSTNADSLAGDEB  = debvar 
   omrkosttemp.KOSTNADSLAGKRED = krevar 
   omrkosttemp.PERSTYP         = ptypvar.
END PROCEDURE.
PROCEDURE kontoposter_UI:
   OPEN QUERY qeko FOR EACH ekoforst WHERE ekoforst.ENY = FALSE USE-INDEX PERSORG NO-LOCK.
   GET FIRST qeko.
   DO WHILE AVAILABLE(ekoforst):
      
      /*TIMMAR OCH PENNGAR*/
      IF ekoforst.PERSTYP = "" THEN DO:
         FIND FIRST omrkosttemp WHERE omrkosttemp.PERSTYP = ekoforst.BEFATTNING
         NO-LOCK NO-ERROR.
         ASSIGN
         kontokod =  omrkosttemp.KOSTNADSLAGDEB 
         kontokode = omrkosttemp.KOSTNADSLAGKRED.               
         RUN kost_UI (INPUT TRUE,INPUT omrkosttemp.PERSTYP).    
      END.
      ELSE DO:
         FIND FIRST omrkosttemp WHERE omrkosttemp.PERSTYP = ekoforst.PERSTYP
         NO-LOCK NO-ERROR.
         ASSIGN
         kontokod =  omrkosttemp.KOSTNADSLAGDEB 
         kontokode = omrkosttemp.KOSTNADSLAGKRED.               
         RUN kost_UI (INPUT FALSE,INPUT omrkosttemp.PERSTYP).    
      END.
                 
 
      
      DELETE ekoforst.
      GET NEXT qeko.   
   END.
END PROCEDURE.
PROCEDURE kost_UI:
   
   DEFINE INPUT PARAMETER timlon AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER typvar AS CHARACTER  NO-UNDO.
   DEFINE VARIABLE rgrvar AS CHARACTER NO-UNDO.
   FIND FIRST omrkosttemp WHERE omrkosttemp.PERSTYP = typvar NO-LOCK NO-ERROR.
   
   
   /*DEBET POST*/
   FIND FIRST eko WHERE
   eko.FTG = ekoforst.FTG AND
   eko.EDEBKRED = TRUE AND
   eko.EVERDATUM = ekoforst.EVERDATUM AND
   eko.EPROJEKT = ekoforst.EPROJEKT AND
   eko.DELNR = ekoforst.DELNR AND
   eko.EKOSTNADSSLAG = kontokod AND
   eko.FELDEBKRED = ekoforst.FELDEBKRED
   EXCLUSIVE-LOCK NO-ERROR.  
   IF NOT AVAILABLE eko THEN DO:
      CREATE eko.
      
   END.    
   ASSIGN         
   eko.FTG = ekoforst.FTG 
   eko.ORT = ekoforst.ORT
   eko.K1 = ekoforst.EPROJEKT
   eko.K2 = STRING(ekoforst.DELNR,"999")
   eko.K3 = ""
   eko.K4 = ekoforst.PERSTYP
   eko.K5 = kontokod
   eko.EDEBKRED = TRUE 
   eko.EVERDATUM = ekoforst.EVERDATUM
   eko.EPROJEKT = ekoforst.EPROJEKT 
   eko.DELNR = ekoforst.DELNR 
   eko.EKOSTNADSSLAG = kontokod
   eko.FELDEBKRED = ekoforst.FELDEBKRED.
   IF timlon = TRUE THEN DO:
      ASSIGN
      eko.EANTAL = eko.EANTAL + ekoforst.EANTAL  
      eko.EBELOPP = eko.EBELOPP + ekoforst.EBELOPP.     
   END.
   ELSE DO:
      ASSIGN
      eko.EANTAL = eko.EANTAL + ekoforst.ELONTILLANTAL  
      eko.EBELOPP = eko.EBELOPP + ekoforst.ELONBELOPP.     
   END.
   /*KREDIT POST*/          
   RUN rgr_UI (INPUT ekoforst.EPERSONALKOD,OUTPUT rgrvar).
   IF feltider = FALSE THEN DO:
      FIND FIRST eko2 WHERE
      eko2.FTG = ekoforst.FTG AND
      eko2.K3 = rgrvar AND
      eko2.K4 = "" AND
      eko2.EDEBKRED = FALSE AND
      eko2.EVERDATUM = ekoforst.EVERDATUM AND
      eko2.EKOSTNADSSLAG = kontokode
      EXCLUSIVE-LOCK NO-ERROR.  
      IF NOT AVAILABLE eko2 THEN DO:
         CREATE eko2.
      END.    
      
      ASSIGN      
      eko2.FTG = ekoforst.FTG 
      eko2.ORT = ekoforst.ORT
      eko2.K1 = ""
      eko2.K2 = ""
      eko2.K3 = rgrvar
      eko2.K4 = ""
      eko2.K5 = kontokode
      eko2.EDEBKRED = FALSE 
      eko2.EVERDATUM = ekoforst.EVERDATUM
      eko2.EPROJEKT = ekoforst.EPROJEKT
      eko2.DELNR = ekoforst.DELNR 
      eko2.EKOSTNADSSLAG = kontokode.
   END.
   ELSE DO:
      IF ekoforst.FELDEBKRED = TRUE THEN DO:
         FIND FIRST eko2 WHERE
         eko2.FTG = ekoforst.FTG AND
         eko2.K3 = rgrvar AND
         eko2.EDEBKRED = FALSE AND
         eko2.EVERDATUM = ekoforst.EVERDATUM AND
         eko2.EPROJEKT = "" AND
         eko2.EKOSTNADSSLAG = kontokode AND
         eko2.FELDEBKRED = FALSE
         EXCLUSIVE-LOCK NO-ERROR. 
         IF NOT AVAILABLE eko2 THEN DO:
            CREATE eko2.
         END.            
         ASSIGN      
         eko2.FTG = ekoforst.FTG 
         eko2.ORT = ""
         eko2.K1 = ""
         eko2.K2 = ""
         eko2.K3 = rgrvar 
         eko2.K4 = ""
         eko2.K5 = kontokode
         eko2.EDEBKRED = FALSE 
         eko2.EVERDATUM = ekoforst.EVERDATUM
         eko2.EPROJEKT = ekoforst.EPROJEKT
         eko2.DELNR = ekoforst.DELNR 
         eko2.EKOSTNADSSLAG = kontokode.

      END.
      ELSE DO:
         FIND FIRST eko2 WHERE
         eko2.FTG = ekoforst.FTG AND
         eko2.K3 = rgrvar AND
         eko2.EDEBKRED = FALSE AND
         eko2.K4 = ekoforst.PERSTYP AND
         eko2.EVERDATUM = ekoforst.EVERDATUM AND
         eko2.EPROJEKT = ekoforst.EPROJEKT AND
         eko2.DELNR = ekoforst.DELNR AND
         eko2.EKOSTNADSSLAG = kontokode AND
         eko2.FELDEBKRED = TRUE
         EXCLUSIVE-LOCK NO-ERROR.        
         IF NOT AVAILABLE eko2 THEN DO:
            CREATE eko2.
         END.    
         
         ASSIGN      
         /*
         eko2.ORT = ekoforst.ORT
         eko2.K1 = ekoforst.EPROJEKT
         eko2.K2 = STRING(ekoforst.DELNR,"999")
         eko2.K3 = ""
         */
         eko2.FTG = ekoforst.FTG  
         eko2.K3 = rgrvar
         eko2.K4 = ekoforst.PERSTYP
         eko2.K5 = kontokode
         eko2.EDEBKRED = FALSE 
         eko2.EVERDATUM = ekoforst.EVERDATUM
         eko2.EPROJEKT = ekoforst.EPROJEKT
         eko2.DELNR = ekoforst.DELNR 
         eko2.EKOSTNADSSLAG = kontokode.
      END.
   END.     
   IF feltider = FALSE THEN DO:
   END.
   ELSE DO:
      IF ekoforst.FELDEBKRED = TRUE THEN ASSIGN eko2.FELDEBKRED = FALSE.
      ELSE ASSIGN eko2.FELDEBKRED = TRUE.
   END.
   IF timlon = TRUE THEN DO:
      ASSIGN
      eko2.EANTAL = eko2.EANTAL + ekoforst.EANTAL  
      eko2.EBELOPP = eko2.EBELOPP + ekoforst.EBELOPP.     
   END. 
   ELSE DO:
      ASSIGN
      eko2.EANTAL = eko2.EANTAL + ekoforst.ELONTILLANTAL  
      eko2.EBELOPP = eko2.EBELOPP + ekoforst.ELONBELOPP.     
   END.
   
END PROCEDURE.

PROCEDURE rgr_UI :
   DEFINE INPUT PARAMETER pkod AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER varrgr AS CHARACTER NO-UNDO.
   FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = pkod 
   NO-LOCK NO-ERROR.        
   varrgr = PERSONALTAB.ORGCHEF.
END PROCEDURE.

PROCEDURE kontofordel_UI:
   FOR EACH eko WHERE eko.EPROJEKT = "":
      DELETE eko.
   END.
   OPEN QUERY qe FOR EACH eko.
   GET FIRST qe.
   DO WHILE AVAILABLE(eko):      
      IF eko.EDEBKRED = TRUE THEN DO:              
         FIND FIRST slutut WHERE 
         slutut.FTG = eko.FTG AND
         slutut.DEBKRED = eko.EDEBKRED AND
         slutut.FELDEBKRED = eko.FELDEBKRED AND 
         slutut.VDATUM = eko.EVERDATUM AND
         slutut.K1 = eko.K1 AND
         slutut.K2 = eko.K2 AND
         slutut.K3 = eko.K3 AND
         slutut.K4 = eko.K4 AND               
         slutut.K5 = eko.K5          
         NO-ERROR.  
         IF NOT AVAILABLE slutut THEN DO:
            CREATE slutut.
         END.       
         ASSIGN  
         slutut.FTG = eko.FTG 
         slutut.ORT = eko.ORT
         slutut.VDATUM = eko.EVERDATUM 
         slutut.DEBKRED = eko.EDEBKRED           
         slutut.K1 = eko.K1
         slutut.K2 = eko.K2
         slutut.K3 = eko.K3
         slutut.K4 = eko.K4                
         slutut.K5 = eko.K5 
         slutut.FELDEBKRED = eko.FELDEBKRED.
      END.
      /*kredit*/
      IF eko.EDEBKRED = FALSE THEN DO: 
         FIND FIRST slutut WHERE 
         slutut.FTG = eko.FTG AND
         slutut.VDATUM = eko.EVERDATUM AND
         slutut.DEBKRED = eko.EDEBKRED AND  
         slutut.FELDEBKRED = eko.FELDEBKRED AND 
         slutut.K3 = eko.K3 AND
         slutut.K5 = eko.K5              
         NO-ERROR.  
         IF NOT AVAILABLE slutut THEN DO:
            CREATE slutut.
         END.       
         ASSIGN  
         slutut.FTG = eko.FTG 
         slutut.ORT = eko.ORT
         slutut.VDATUM = eko.EVERDATUM 
         slutut.DEBKRED = eko.EDEBKRED           
         slutut.K1 = eko.K1
         slutut.K2 = eko.K2
         slutut.K3 = eko.K3
         slutut.K4 = eko.K4                
         slutut.K5 = eko.K5 
         slutut.FELDEBKRED = eko.FELDEBKRED.
      END.            
      ASSIGN
      slutut.ANTAL = slutut.ANTAL + (eko.EANTAL )
      slutut.BELOPP = slutut.BELOPP + (eko.EBELOPP).
      GET NEXT qe.
   END.
   IF feltider = FALSE THEN DO:
      FOR EACH slutut:
         slutut.BELOPP = ROUND(slutut.BELOPP,2).
      END.
   END.
END PROCEDURE.

PROCEDURE kreditposter_UI:
   OPEN QUERY sq FOR EACH slutut WHERE slutut.DEBKRED = FALSE NO-LOCK.
   GET FIRST sq.
   DO WHILE AVAILABLE(slutut):
      FIND FIRST slututK WHERE 
      slututK.FTG = slutut.FTG AND
      slututK.VDATUM = slutut.VDATUM AND
      slututK.DEBKRED = slutut.DEBKRED AND 
      slututK.FELDEBKRED = slutut.FELDEBKRED AND 
      slututK.K1 = slutut.K1 AND
      slututK.K2 = slutut.K2 AND
      slututK.K3 = slutut.K3 AND
      slututK.K4 = slutut.K4 AND               
      slututK.K5 = slutut.K5 
      NO-ERROR.  
      IF NOT AVAILABLE slututK THEN DO:
         CREATE slututK.
      END.         
      ASSIGN  
      slututK.FTG = slutut.FTG
      slututK.ORT = slutut.ORT
      slututK.FTG = slutut.FTG
      slututK.VDATUM = slutut.VDATUM 
      slututK.DEBKRED = slutut.DEBKRED           
      slututK.FELDEBKRED = slutut.FELDEBKRED 
      slututK.K1 = slutut.K1
      slututK.K2 = slutut.K2
      slututK.K3 = slutut.K3
      slututK.K4 = slutut.K4
      slututK.K5 = slutut.K5.      
      ASSIGN
      slututK.ANTAL = slututK.ANTAL + ROUND(slutut.ANTAL,2) 
      slututK.BELOPP = slututK.BELOPP + ROUND(slutut.BELOPP,2).
      DELETE slutut.
      GET NEXT sq.
   END.
   /*Nödlösning för öresavrundning*/
   FOR EACH slututk:
      kredvar = kredvar + ROUND(slututK.BELOPP,2).
   END.
   FOR EACH slutut:
      debvar = debvar + ROUND(slutut.BELOPP,2).
   END.
   IF (kredvar - debvar) NE 0 THEN DO:
      diffvar = debvar - kredvar. 
      FIND LAST slututk WHERE slututk.BIL NE "" NO-ERROR.
      IF AVAILABLE slututk THEN DO:
         slututK.BELOPP = slututK.BELOPP + diffvar.
      END.
   END.
   FOR EACH slututK:
      CREATE slutut.
      BUFFER-COPY slututK TO slutut.
      DELETE slututK.
   END.   
   FOR EACH slutut:
      IF slutut.DEBKRED = FALSE THEN slutut.BELOPP = slutut.BELOPP.
      slutut.K2POS8 = slutut.K2.
   END.
END PROCEDURE.

