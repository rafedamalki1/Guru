/*BERLISTAPP2.P*/
{STARTFORAPP.I}
{ANMARKD.I}
{LISTDEF.I} 
{KONVALTEMP.I}
DEFINE VARIABLE globanvpkod AS CHARACTER NO-UNDO.
DEFINE VARIABLE edmedd AS CHARACTER NO-UNDO.                              
DEFINE VARIABLE prisvar AS INTEGER NO-UNDO.
DEFINE VARIABLE musz AS LOGICAL NO-UNDO.         
DEFINE VARIABLE valaonr AS CHARACTER NO-UNDO.
DEFINE VARIABLE valdelnr AS INTEGER NO-UNDO.
DEFINE VARIABLE valort AS CHARACTER NO-UNDO. 
DEFINE VARIABLE valomrade AS CHARACTER NO-UNDO.    
DEFINE VARIABLE valkonst AS LOGICAL NO-UNDO.
DEFINE VARIABLE arrhjsum AS DECIMAL NO-UNDO.      
DEFINE VARIABLE str AS CHARACTER FORMAT "X(130)" NO-UNDO. 
DEFINE VARIABLE str2 AS CHARACTER FORMAT "X(130)" NO-UNDO. 
DEFINE VARIABLE str3 AS CHARACTER FORMAT "X(130)" NO-UNDO.
DEFINE VARIABLE str4 AS CHARACTER FORMAT "X(130)" NO-UNDO.
DEFINE VARIABLE totalsum AS DECIMAL NO-UNDO.
DEFINE VARIABLE totalt AS DECIMAL NO-UNDO. 
DEFINE VARIABLE sumpris AS DECIMAL NO-UNDO.
DEFINE VARIABLE sumantal AS INTEGER NO-UNDO.

DEFINE VARIABLE kant AS INTEGER NO-UNDO.
DEFINE VARIABLE tant AS INTEGER NO-UNDO.
DEFINE VARIABLE totant AS INTEGER NO-UNDO.
DEFINE VARIABLE temptant AS INTEGER NO-UNDO.
DEFINE VARIABLE kvaravsidan    AS INTEGER NO-UNDO.
DEFINE VARIABLE exkant        AS INTEGER NO-UNDO.
DEFINE VARIABLE extant        AS INTEGER NO-UNDO.
DEFINE VARIABLE sidlangd AS INTEGER NO-UNDO.
DEFINE VARIABLE sidlangdex AS INTEGER NO-UNDO.
DEFINE VARIABLE bryt      AS LOGICAL NO-UNDO.
DEFINE VARIABLE forsta AS LOGICAL NO-UNDO.
DEFINE VARIABLE upput AS LOGICAL NO-UNDO.
DEFINE VARIABLE edvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE fetstil AS LOGICAL NO-UNDO.
   
DEFINE VARIABLE vfontname    AS CHARACTER NO-UNDO. 
DEFINE VARIABLE vfontsize    AS INTEGER NO-UNDO.   
DEFINE VARIABLE vfonttype    AS LOGICAL NO-UNDO.   
DEFINE VARIABLE vfontheight  AS INTEGER NO-UNDO.   
DEFINE VARIABLE vfontcolor   AS INTEGER NO-UNDO.

DEFINE VARIABLE utnr AS INTEGER EXTENT 50 NO-UNDO.
DEFINE VARIABLE utrow AS ROWID EXTENT 9 NO-UNDO.
DEFINE VARIABLE utrow1 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow2 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow3 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow4 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow5 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow6 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow7 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow8 AS ROWID NO-UNDO.
DEFINE VARIABLE utrow9 AS ROWID NO-UNDO.


DEFINE TEMP-TABLE mtrl_temp2   
   {MTRLTEMP2TT.I}
   
DEFINE TEMP-TABLE emtrl_temp2 LIKE mtrl_temp2.    

DEFINE TEMP-TABLE id_temp NO-UNDO 
   FIELD NUM AS INTEGER 
   FIELD GRUPP AS INTEGER  
   FIELD FORNR AS CHARACTER
   FIELD LINNR AS CHARACTER
   FIELD NATNR AS CHARACTER
   FIELD FRI1 AS INTEGER
   FIELD FRI2 AS INTEGER 
   FIELD XKORD AS INTEGER
   FIELD ENDKOMB AS LOGICAL
   FIELD FRI3 AS CHARACTER
   FIELD ORD AS INTEGER
   INDEX NUM IS PRIMARY NUM ASCENDING
   INDEX ORD FORNR LINNR NATNR FRI1 FRI2 ASCENDING
   INDEX ORD2 ORD ASCENDING. 

{SKAPTEMP.I}    
{UPPLAGTEMP.I}

{TIDUTTTNEW.I}
DEFINE {&NEW} {&SHARED} TEMP-TABLE extemp
   {EXTEMPDEF.I}
  

DEFINE {&NEW} {&SHARED} TEMP-TABLE excoltemp
   FIELD COLNAME AS CHARACTER
   FIELD COLNUM AS INTEGER
   FIELD WDTH AS INTEGER.

DEFINE QUERY mtrlprisq FOR BERMTRL.


   /*
   DEFINE QUERY upplq FOR BERVAL.
DEFINE QUERY berq FOR BERUPP.
*/
{FLERBER.I}
   
 /*  ASSIGN
   utnr[1] = 1
   utnr[2] = 13
   utnr[3] = 39
   utnr[4] = 54
   utnr[5] = 64
   utnr[6] = 71
   utnr[7] = 80
   utnr[8] = 90.*/
DEFINE VARIABLE tamedtext AS LOGICAL NO-UNDO.
PROCEDURE tamedtext_UI :
   DEFINE INPUT  PARAMETER tamedtextin AS LOGICAL NO-UNDO.
   tamedtext = tamedtextin.
END PROCEDURE.
PROCEDURE skrivhmt_UI :
   DEFINE INPUT PARAMETER printername AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER globsidl AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER globsids AS INTEGER NO-UNDO.
   FIND FIRST SKRIVARDEF WHERE SKRIVARDEF.SKRIVARID = printername NO-LOCK NO-ERROR.
   IF AVAILABLE SKRIVARDEF THEN DO TRANSACTION:
      ASSIGN
      globsidl = SKRIVARDEF.BREDD
      globsids = SKRIVARDEF.SIDA. 
   END.   
END PROCEDURE.

PROCEDURE skapalista_UI :
   DEFINE INPUT PARAMETER valaonr2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valort2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER globanvpkod2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER prisvar2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER edmedd2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER globsids2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER valkonst2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR kon_val.
   DEFINE OUTPUT PARAMETER musz2 AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR extemp.
   DEFINE OUTPUT PARAMETER TABLE FOR tidut.
   EMPTY TEMP-TABLE tidut NO-ERROR. 
   ASSIGN 
   valkonst = valkonst2
   valaonr = valaonr2
   valomrade = valomrade2
   valort = valort2
   globanvpkod = globanvpkod2
   prisvar = prisvar2
   edmedd = edmedd2
   globsids = globsids2
   musz = FALSE
   edvar = FALSE.
   EMPTY TEMP-TABLE tidut NO-ERROR. 
   EMPTY TEMP-TABLE mtrl_temp NO-ERROR. 
   EMPTY TEMP-TABLE mtrl_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE uppl_temp NO-ERROR.
   ASSIGN
   utnr[1] = 1
   utnr[2] = 13
   utnr[3] = 39
   utnr[4] = 54
   utnr[5] = 64
   utnr[6] = 71
   utnr[7] = 80
   utnr[8] = 90. 
   /*Om anv. har valt btn_skriv i berlista, då har skrivval redan körts*/
   IF globsids = 0  THEN globsids = 73.
   ASSIGN
   forsta = FALSE
   tant = 0
   totant = 0
   kvaravsidan = 0
   exkant = 0
   extant = 0
   sidlangdex = 56
   sidlangd = globsids - 3.
   RUN huvud_UI.   
   IF musz = FALSE THEN RUN summa_UI. 
   musz2 = musz.
   {GDPRLOGGCLIENT.I}
   RETURN.
END PROCEDURE.

PROCEDURE skapalistabygguppdyn_UI :
   DEFINE INPUT PARAMETER valaonr2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valort2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER globanvpkod2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER prisvar2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER edmedd2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER globsids2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER valkonst2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR kon_val.   
   DEFINE OUTPUT PARAMETER musz2 AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR emtrl_temp2.
   EMPTY TEMP-TABLE tidut NO-ERROR. 
   ASSIGN 
   valkonst = valkonst2
   valaonr = valaonr2
   valomrade = valomrade2
   valort = valort2
   globanvpkod = globanvpkod2
   prisvar = prisvar2
   edmedd = edmedd2
   globsids = globsids2
   musz = FALSE
   edvar = FALSE.
   EMPTY TEMP-TABLE tidut NO-ERROR. 
   EMPTY TEMP-TABLE mtrl_temp NO-ERROR. 
   EMPTY TEMP-TABLE mtrl_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE uppl_temp NO-ERROR. 
   /*ASSIGN
   utnr[1] = 1
   utnr[2] = 8
   utnr[3] = 18
   utnr[4] = 28
   utnr[5] = 60
   utnr[6] = 66
   utnr[7] = 75
   utnr[8] = 85
   utnr[9] = 95
   utnr[10] = 105.*/
   /*Om anv. har valt btn_skriv i berlista, då har skrivval redan körts*/
   IF globsids = 0  THEN globsids = 73.
   ASSIGN
   forsta = FALSE
   tant = 0
   totant = 0
   kvaravsidan = 0
   exkant = 0
   extant = 0
   sidlangdex = 56
   sidlangd = globsids - 3.
   /*RUN huvudbyggupp_UI.*/   
   IF musz = FALSE THEN RUN summabygguppdyn_UI. 
   musz2 = musz.
   {GDPRLOGGCLIENT.I}
   RETURN.
END PROCEDURE.

PROCEDURE skapalistabyggupp_UI :
   DEFINE INPUT PARAMETER valaonr2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valort2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER globanvpkod2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER prisvar2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER edmedd2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER globsids2 AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER valkonst2 AS LOGICAL NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR kon_val.
   DEFINE OUTPUT PARAMETER musz2 AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR extemp.
   DEFINE OUTPUT PARAMETER TABLE FOR tidut.
   EMPTY TEMP-TABLE tidut NO-ERROR. 
   ASSIGN 
   valkonst = valkonst2
   valaonr = valaonr2
   valomrade = valomrade2
   valort = valort2
   globanvpkod = globanvpkod2
   prisvar = prisvar2
   edmedd = edmedd2
   globsids = globsids2
   musz = FALSE
   edvar = FALSE.
   EMPTY TEMP-TABLE tidut NO-ERROR. 
   EMPTY TEMP-TABLE mtrl_temp NO-ERROR. 
   EMPTY TEMP-TABLE mtrl_temp2 NO-ERROR. 
   EMPTY TEMP-TABLE uppl_temp NO-ERROR. 
   ASSIGN
   utnr[1] = 1
   utnr[2] = 8
   utnr[3] = 18
   utnr[4] = 28
   utnr[5] = 60
   utnr[6] = 66
   utnr[7] = 75
   utnr[8] = 85
   utnr[9] = 95
   utnr[10] = 105.
   /*Om anv. har valt btn_skriv i berlista, då har skrivval redan körts*/
   IF globsids = 0  THEN globsids = 73.
   ASSIGN
   forsta = FALSE
   tant = 0
   totant = 0
   kvaravsidan = 0
   exkant = 0
   extant = 0
   sidlangdex = 56
   sidlangd = globsids - 3.
   RUN huvudbyggupp_UI.   
   IF musz = FALSE THEN RUN summabyggupp_UI. 
   musz2 = musz.
   {GDPRLOGGCLIENT.I}
   RETURN.
END PROCEDURE.




PROCEDURE huvud_UI :
   /*HUVUD*/ 
   RUN flerber_UI. 
   DO TRANSACTION:         
      IF musz = TRUE THEN musz = musz.   
      ELSE DO: 
         IF Guru.Konstanter:globforetag = "CELPA" OR Guru.Konstanter:globforetag = "BORL" THEN DO:           
            CREATE tidut.
            ASSIGN
            extant = extant + 1
            tant = tant + 1
            totant = totant + 1
            SUBSTRING(tidut.UT,utnr[1]) = "Lista materiel/upplag/artikel".
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
            SUBSTRING(tidut.UT,utnr[4]) = STRING(TODAY).
            RUN data_UI (INPUT TRUE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 1,INPUT ?).
            SUBSTRING(tidut.UT,utnr[5]) = STRING(TIME,"HH:MM:SS").                                                               
            RUN data_UI (INPUT TRUE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 1,INPUT ?).
            CREATE tidut.              
            ASSIGN         
            tant = tant + 1
            extant = extant + 1
            totant = totant + 1.
            RUN tom_UI (INPUT ?).
            CREATE tidut.
            ASSIGN         
            tant = tant + 1
            extant = extant + 1
            totant = totant + 1.
            ASSIGN                       
            SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gaonamnk + ": " + valort.
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
            FOR EACH flerbertemp:
               IF valort = flerbertemp.BENAMNING THEN.
               ELSE DO:
                  CREATE tidut.   
                  SUBSTRING(tidut.UT,16) = flerbertemp.BENAMNING. 
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,16),INPUT 1,INPUT ?).
               END.               
            END.
            
            IF AVAILABLE PERSONALTAB THEN DO:            
               FIND FIRST BEREDAONR WHERE BEREDAONR.PERSONALKOD = globanvpkod 
               USE-INDEX PERSONALKOD NO-LOCK NO-ERROR.   
               IF NOT AVAILABLE BEREDAONR THEN DO:
                  CREATE BEREDAONR.
                  ASSIGN 
                  BEREDAONR.PERSONALKOD = PERSONALTAB.PERSONALKOD
                  BEREDAONR.FORNAMN = PERSONALTAB.FORNAMN
                  BEREDAONR.EFTERNAMN = PERSONALTAB.EFTERNAMN.
               END.
               CREATE tidut.
               ASSIGN
               tant = tant + 1 
               extant = extant + 1
               totant = totant + 1.
               ASSIGN                   
               SUBSTRING(tidut.UT,utnr[1]) = "Beredare".
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
               ASSIGN SUBSTRING(tidut.UT,utnr[2]) = " : " + PERSONALTAB.FORNAMN +
               " " + PERSONALTAB.EFTERNAMN + "     " + PERSONALTAB.TELEFON + "     " + PERSONALTAB.MOBILTEL.
               RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).   
               Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + PERSONALTAB.PERSONALKOD.
                        
            END.
            FIND FIRST BEREDNING WHERE BEREDNING.BERNR = INTEGER(valaonr) AND 
            BEREDNING.OMRADE = valomrade USE-INDEX BERNR NO-LOCK NO-ERROR.        
            IF BEREDNING.AONR NE ? THEN DO:
               FIND FIRST AONRTAB WHERE AONRTAB.AONR = BEREDNING.AONR AND
               AONRTAB.DELNR = BEREDNING.DELNR USE-INDEX AONR NO-LOCK NO-ERROR.
               IF AVAILABLE AONRTAB THEN DO:
                  CREATE tidut.
                  ASSIGN
                  tant = tant + 1
                  extant = extant + 1
                  totant = totant + 1
                  SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gaok.
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                              
                  SUBSTRING(tidut.UT,utnr[2]) = " : " + AONRTAB.AONR + " Delnr:" +
                  STRING(AONRTAB.DELNR,Guru.Konstanter:varforetypchar[1]).
                  RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).
                  FOR EACH flerbertemp:
                     IF flerbertemp.AONR = AONRTAB.AONR AND flerbertemp.DELNR = AONRTAB.DELNR THEN.
                     ELSE DO:
                        IF flerbertemp.AONR NE "" THEN DO:
                           CREATE tidut.
                           ASSIGN
                           tant = tant + 1
                           extant = extant + 1
                           totant = totant + 1.
                           SUBSTRING(tidut.UT,utnr[2]) = " : " + flerbertemp.AONR + " Delnr:" + 
                           STRING(flerbertemp.DELNR,Guru.Konstanter:varforetypchar[1]).
                           RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).                      
                        END.
                     END.               
                  END.
               END.
               ELSE DO:
                  CREATE tidut.
                  ASSIGN
                  tant = tant + 1
                  extant = extant + 1
                  totant = totant + 1
                  SUBSTRING(tidut.UT,utnr[1]) = "Beredning nr : " + STRING(BEREDNING.BERNR).
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).          
               END.
               FOR EACH flerbertemp:
                  IF valaonr = flerbertemp.BERAONR THEN.
                  ELSE DO:
                     CREATE tidut.   
                     ASSIGN
                     tant = tant + 1
                     extant = extant + 1
                     totant = totant + 1
                     SUBSTRING(tidut.UT,utnr[1]) = "            : " + STRING(flerbertemp.BERAONR).
                     RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).          
                  END.               
               END.
            END.
         END.
         ELSE DO:
            
            CREATE tidut. 
            ASSIGN
            tant = tant + 1
            extant = extant + 1
            totant = totant + 1.
            IF Guru.Konstanter:globforetag = "SUND" OR Guru.Konstanter:globforetag = "SNAT" THEN DO:
               ASSIGN        
               SUBSTRING(tidut.UT,utnr[1]) = "Lista materiel/upplag/projekt".               
            END.
            ELSE DO:
               ASSIGN        
               SUBSTRING(tidut.UT,utnr[1]) = "Lista materiel/upplag/artikel".
            END.   
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
            ASSIGN
            SUBSTRING(tidut.UT,utnr[4]) = STRING(TODAY).
            RUN data_UI (INPUT TRUE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 1,INPUT ?).
            SUBSTRING(tidut.UT,utnr[5]) = STRING(TIME,"HH:MM:SS").                                                               
            RUN data_UI (INPUT TRUE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 1,INPUT ?).
            CREATE tidut.   
            totant = totant + 1.
            RUN tom_UI (INPUT ?).
            CREATE tidut.   
            ASSIGN
            totant = totant + 1
            tant = tant + 2
            extant = extant + 2              
            SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gaonamnk + ": " + valort.
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).  
            FOR EACH flerbertemp:
               IF valort = flerbertemp.BENAMNING THEN.
               ELSE DO:
                  CREATE tidut.   
                  ASSIGN
                  totant = totant + 1
                  tant = tant + 1
                  extant = extant + 1              
                  SUBSTRING(tidut.UT,16) = flerbertemp.BENAMNING. 
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,16),INPUT 1,INPUT ?).
               END.               
            END.
            CREATE tidut.  
            ASSIGN         
            tant = tant + 1                                                      
            extant = extant + 1
            totant = totant + 1
            SUBSTRING(tidut.UT,utnr[1]) = "Beredning nr".
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                                  
            ASSIGN SUBSTRING(tidut.UT,utnr[2]) = " : " + valaonr. 
            RUN data_UI (INPUT TRUE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).                                  
            FOR EACH flerbertemp:
               IF valaonr = flerbertemp.BERAONR THEN.
               ELSE DO:
                  CREATE tidut.   
                  ASSIGN
                  tant = tant + 1
                  extant = extant + 1
                  totant = totant + 1
                  SUBSTRING(tidut.UT,utnr[1]) = "             : " + STRING(flerbertemp.BERAONR).
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).          
               END.               
            END.
            
            FIND FIRST BEREDNING WHERE BEREDNING.BERNR = INTEGER(valaonr) AND 
            BEREDNING.OMRADE = valomrade USE-INDEX BERNR NO-LOCK NO-ERROR.
            IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "UMEA" THEN DO: 
               IF BEREDNING.AONR = ? THEN DO:           
                  FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = BEREDNING.ANVANDARE
                  USE-INDEX ANDV NO-LOCK NO-ERROR.
                  IF AVAILABLE ANVANDARE THEN DO:            
                     FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = ANVANDARE.PERSONALKOD
                     USE-INDEX PERSONALKOD NO-LOCK NO-ERROR.
                  END.   
               END.
               ELSE DO: 
                  FIND FIRST AONRTAB WHERE AONRTAB.AONR = BEREDNING.AONR AND
                  AONRTAB.DELNR = BEREDNING.DELNR USE-INDEX AONR NO-LOCK NO-ERROR.
                  FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = AONRTAB.BEREDARE
                  USE-INDEX PERSONALKOD NO-LOCK NO-ERROR.
               END.    
               IF AVAILABLE PERSONALTAB THEN DO: 
                  CREATE tidut.
                  ASSIGN
                  tant = tant + 1
                  extant = extant + 1
                  totant = totant + 1
                  SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gberel.
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                                   
                  SUBSTRING(tidut.UT,utnr[2]) =  " : " + PERSONALTAB.FORNAM +                
                  " " + PERSONALTAB.EFTERNAMN + "     " + PERSONALTAB.TELEFON + 
                  "     " + PERSONALTAB.MOBILTEL.
                  RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).   
                  Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + PERSONALTAB.PERSONALKOD.                                                 
               END.               
            END.  
            IF BEREDNING.AONR NE ? THEN DO:
               FIND FIRST AONRTAB WHERE AONRTAB.AONR = BEREDNING.AONR AND
               AONRTAB.DELNR = BEREDNING.DELNR USE-INDEX AONR NO-LOCK NO-ERROR.
               IF AVAILABLE AONRTAB THEN DO:
                  CREATE tidut.
                  ASSIGN
                  tant = tant + 1                
                  extant = extant + 1
                  totant = totant + 1
                  SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gaok.
                  RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
                  SUBSTRING(tidut.UT,utnr[2]) = " : " + AONRTAB.AONR + " Delnr:" + 
                  STRING(AONRTAB.DELNR,Guru.Konstanter:varforetypchar[1]).
                  RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).
               END.
               FOR EACH flerbertemp:
                  IF flerbertemp.AONR = AONRTAB.AONR AND flerbertemp.DELNR = AONRTAB.DELNR THEN.
                  ELSE DO:
                     IF flerbertemp.AONR NE "" THEN DO:
                        CREATE tidut.
                        ASSIGN         
                        tant = tant + 1                                                      
                        extant = extant + 1
                        totant = totant + 1
                        SUBSTRING(tidut.UT,utnr[2]) = " : " + flerbertemp.AONR + " Delnr:" + 
                        STRING(flerbertemp.DELNR,Guru.Konstanter:varforetypchar[1]).
                        RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).                      
                     END.
                  END.               
               END.
            END.
         END.
         IF edmedd NE "" THEN DO:
            edvar = TRUE.
            RUN anm3_UI.
            edvar = FALSE.
         END.
         CREATE tidut.
         ASSIGN
         totant = totant + 1
         tant = tant + 1
         extant = extant + 1.
         RUN tom_UI (INPUT ?).
         str3 =
"========================================================================================".
      END.
   END. 
   RELEASE BEREDAONR NO-ERROR.
END PROCEDURE.

PROCEDURE huvudbyggupp_UI :
   /*HUVUD*/ 
   RUN flerber_UI. 
   DO TRANSACTION:         
      IF musz = TRUE THEN musz = musz.   
      ELSE DO: 
         
            
         CREATE tidut. 
         ASSIGN
         tant = tant + 1
         extant = extant + 1
         totant = totant + 1.            
         ASSIGN        
         SUBSTRING(tidut.UT,utnr[1]) = "Förenklat Byggprotokoll".
           
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
         
         ASSIGN
         SUBSTRING(tidut.UT,utnr[4]) = STRING(TODAY).
         RUN data_UI (INPUT TRUE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 1,INPUT ?).
         SUBSTRING(tidut.UT,utnr[5]) = STRING(TIME,"HH:MM:SS").                                                               
         RUN data_UI (INPUT TRUE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 1,INPUT ?).
         CREATE tidut.   
         totant = totant + 1.
         RUN tom_UI (INPUT ?).
         CREATE tidut.   
         ASSIGN
         totant = totant + 1
         tant = tant + 2
         extant = extant + 2              
         SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gaonamnk + ": " + valort.
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).  
         FOR EACH flerbertemp:
            IF valort = flerbertemp.BENAMNING THEN.
            ELSE DO:
               CREATE tidut.   
               ASSIGN
               totant = totant + 1
               tant = tant + 1
               extant = extant + 1              
               SUBSTRING(tidut.UT,16) = flerbertemp.BENAMNING. 
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,16),INPUT 1,INPUT ?).
            END.               
         END.
         CREATE tidut.  
         ASSIGN         
         tant = tant + 1                                                      
         extant = extant + 1
         totant = totant + 1
         SUBSTRING(tidut.UT,utnr[1]) = "Beredning nr".
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                                  
         ASSIGN SUBSTRING(tidut.UT,utnr[2]) = " : " + valaonr. 
         RUN data_UI (INPUT TRUE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).                                  
         FOR EACH flerbertemp:
            IF valaonr = flerbertemp.BERAONR THEN.
            ELSE DO:
               CREATE tidut.   
               ASSIGN
               tant = tant + 1
               extant = extant + 1
               totant = totant + 1
               SUBSTRING(tidut.UT,utnr[1]) = "             : " + STRING(flerbertemp.BERAONR).
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).          
            END.               
         END.
         
         FIND FIRST BEREDNING WHERE BEREDNING.BERNR = INTEGER(valaonr) AND 
         BEREDNING.OMRADE = valomrade USE-INDEX BERNR NO-LOCK NO-ERROR.
         IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "UMEA" THEN DO: 
            IF BEREDNING.AONR = ? THEN DO:           
               FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = BEREDNING.ANVANDARE
               USE-INDEX ANDV NO-LOCK NO-ERROR.
               IF AVAILABLE ANVANDARE THEN DO:            
                  FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = ANVANDARE.PERSONALKOD
                  USE-INDEX PERSONALKOD NO-LOCK NO-ERROR.
               END.   
            END.
            ELSE DO: 
               FIND FIRST AONRTAB WHERE AONRTAB.AONR = BEREDNING.AONR AND
               AONRTAB.DELNR = BEREDNING.DELNR USE-INDEX AONR NO-LOCK NO-ERROR.
               FIND FIRST PERSONALTAB WHERE PERSONALTAB.PERSONALKOD = AONRTAB.BEREDARE
               USE-INDEX PERSONALKOD NO-LOCK NO-ERROR.
            END.    
            IF AVAILABLE PERSONALTAB THEN DO: 
               CREATE tidut.
               ASSIGN
               tant = tant + 1
               extant = extant + 1
               totant = totant + 1
               SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gberel.
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                                   
               SUBSTRING(tidut.UT,utnr[2]) =  " : " + PERSONALTAB.FORNAM +                
               " " + PERSONALTAB.EFTERNAMN + "     " + PERSONALTAB.TELEFON + 
               "     " + PERSONALTAB.MOBILTEL.
               RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).   
               Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + PERSONALTAB.PERSONALKOD.                                                 
            END.               
         END.  
         IF BEREDNING.AONR NE ? THEN DO:
            FIND FIRST AONRTAB WHERE AONRTAB.AONR = BEREDNING.AONR AND
            AONRTAB.DELNR = BEREDNING.DELNR USE-INDEX AONR NO-LOCK NO-ERROR.
            IF AVAILABLE AONRTAB THEN DO:
               CREATE tidut.
               ASSIGN
               tant = tant + 1                
               extant = extant + 1
               totant = totant + 1
               SUBSTRING(tidut.UT,utnr[1]) = Guru.Konstanter:gaok.
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
               SUBSTRING(tidut.UT,utnr[2]) = " : " + AONRTAB.AONR + " Delnr:" + 
               STRING(AONRTAB.DELNR,Guru.Konstanter:varforetypchar[1]).
               RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).
            END.
            FOR EACH flerbertemp:
               IF flerbertemp.AONR = AONRTAB.AONR AND flerbertemp.DELNR = AONRTAB.DELNR THEN.
               ELSE DO:
                  IF flerbertemp.AONR NE "" THEN DO:
                     CREATE tidut.
                     ASSIGN         
                     tant = tant + 1                                                      
                     extant = extant + 1
                     totant = totant + 1
                     SUBSTRING(tidut.UT,utnr[2]) = " : " + flerbertemp.AONR + " Delnr:" + 
                     STRING(flerbertemp.DELNR,Guru.Konstanter:varforetypchar[1]).
                     RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).                      
                  END.
               END.               
            END.
         
         END.
         IF edmedd NE "" THEN DO:
            edvar = TRUE.
            RUN anm3_UI.
            edvar = FALSE.
         END.
         CREATE tidut.
         ASSIGN
         totant = totant + 1
         tant = tant + 1
         extant = extant + 1.
         RUN tom_UI (INPUT ?).
         str3 =
"=============================================================================================".
      END.
   END. 
   RELEASE BEREDAONR NO-ERROR.
END PROCEDURE.

PROCEDURE rubrik_UI :
 
   CREATE tidut. 
   ASSIGN  
   totant = totant + 1
   kant = kant + 1
   exkant = exkant + 1
   SUBSTRING(tidut.UT,utnr[1]) = CAPS(Guru.Konstanter:genk).
   RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).                              
   SUBSTRING(tidut.UT,utnr[2]) = "BENÄMNING".
   RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).                                                      
   SUBSTRING(tidut.UT,utnr[4]) = "ENH".
   RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 1,INPUT ?).                                                    
   SUBSTRING(tidut.UT,utnr[5]) = "  ANTAL".
   RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 1,INPUT ?).                                                    
   IF prisvar = 1 THEN DO:
      ASSIGN 
      SUBSTRING(tidut.UT,utnr[6]) = " PRIS/ENH".
      RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 1,INPUT ?).                                                      
      SUBSTRING(tidut.UT,utnr[7]) = "    SUMMA".  
      RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 1,INPUT ?).
      IF tamedtext = TRUE THEN DO:
         SUBSTRING(tidut.UT,utnr[8]) = "TEXT".
         RUN data_UI (INPUT FALSE,INPUT "H",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[8]),INPUT 0,INPUT ?).
      END.                               
   END.
   ELSE DO:
      IF tamedtext = TRUE THEN DO:
         utnr[6] = 72.
         SUBSTRING(tidut.UT,utnr[6]) = "TEXT".
         RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).
      END.
   END. 
   CREATE tidut.
   ASSIGN
   totant = totant + 1
   kant = kant + 1
   exkant = exkant + 1
   str =
"===========.========================================.===.========.========.==========" 
   str2 =
"===========.========================================.===.========"
   str3 =
"========================================================================================"
   str4 =
"======================================================================".
   /*
   IF prisvar = 1 THEN DO:      
      SUBSTRING(tidut.UT,utnr[1]) = str.  
      RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
   END.
   ELSE DO:  
      SUBSTRING(tidut.UT,utnr[1]) = str2.                                                                
      RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
   END.               
   */
END PROCEDURE.
PROCEDURE rubrikbyggupp_UI :
 
   CREATE tidut. 
   ASSIGN  
   totant = totant + 1
   kant = kant + 1
   exkant = exkant + 1
   SUBSTRING(tidut.UT,utnr[1]) = "BYGGNR".
   RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
   /*SUBSTRING(tidut.UT,utnr[2]) = "FRI ID".
   RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).*/
   
   SUBSTRING(tidut.UT,utnr[2]) = CAPS(Guru.Konstanter:genk).   
   RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).                              
   SUBSTRING(tidut.UT,utnr[3]) = "BENÄMNING".
   RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).                                                      
   SUBSTRING(tidut.UT,utnr[5]) = "ENH".
   RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 1,INPUT ?).                                                    
   SUBSTRING(tidut.UT,utnr[6]) = "  ANTAL".
   RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 1,INPUT ?).
   DEBUGGER:SET-BREAK().                                                    
   IF prisvar = 1 THEN DO:
      ASSIGN 
      SUBSTRING(tidut.UT,utnr[7]) = " PRIS/ENH".
      RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 1,INPUT ?).                                                      
      SUBSTRING(tidut.UT,utnr[8]) = "    SUMMA".  
      RUN data_UI (INPUT FALSE,INPUT "H",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[8]),INPUT 1,INPUT ?).
      IF tamedtext = TRUE THEN DO:
         SUBSTRING(tidut.UT,utnr[9]) = "TEXT".
         RUN data_UI (INPUT FALSE,INPUT "I",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[9]),INPUT 0,INPUT ?).
      END.                               
   END.
   ELSE DO:
      IF tamedtext = TRUE THEN DO:
         utnr[7] = 71.
         SUBSTRING(tidut.UT,utnr[7]) = "TEXT".
         RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
      END.
   END. 
   CREATE tidut.
   ASSIGN
   totant = totant + 1
   kant = kant + 1
   exkant = exkant + 1
   str =
"===========.========================================.===.========.========.==========" 
   str2 =
"===========.========================================.===.========"
   str3 =
"========================================================================================"
   str4 =
"==========================================================================".
   
END PROCEDURE.
DEFINE TEMP-TABLE hjnumm NO-UNDO
   FIELD AONR AS CHARACTER
   FIELD OMRADE AS CHARACTER
   INDEX AO AONR OMRADE.
PROCEDURE summa_UI :
   DEFINE VARIABLE upppris AS DECIMAL NO-UNDO.
   ASSIGN
   sumpris = 0
   sumantal = 0
   str4 =
"======================================================================" .
   /*
   OPEN QUERY upplq FOR EACH BERVAL WHERE BERVAL.AONR = valaonr
   AND BERVAL.OMRADE = valomrade AND BERVAL.KSKAP = FALSE USE-INDEX LISTA NO-LOCK.
   */
   
   CREATE hjnumm.
   ASSIGN 
   hjnumm.AONR = valaonr
   hjnumm.OMRADE = valomrade.
   IF valkonst = TRUE THEN DO:
      FOR EACH flerbertemp:
         FIND FIRST hjnumm WHERE hjnumm.AONR = flerbertemp.BERAONR AND hjnumm.OMRADE = flerbertemp.OMRADE NO-LOCK NO-ERROR.
         IF NOT AVAILABLE hjnumm THEN DO:
            CREATE hjnumm.
            ASSIGN 
            hjnumm.AONR = flerbertemp.BERAONR
            hjnumm.OMRADE = flerbertemp.OMRADE.
         END.
      END.
   END.
   /*
   OPEN QUERY upplq FOR EACH hjnumm,
   EACH BERVAL WHERE BERVAL.AONR = hjnumm.AONR
   AND BERVAL.OMRADE = hjnumm.OMRADE AND BERVAL.KSKAP = FALSE USE-INDEX LISTA NO-LOCK. 
   */
   /*
   OPEN QUERY upplq FOR EACH BERVAL WHERE BERVAL.AONR = valaonr
   AND BERVAL.OMRADE = valomrade AND BERVAL.KSKAP = FALSE USE-INDEX LISTA NO-LOCK.
   GET FIRST upplq NO-LOCK.
   DO WHILE AVAILABLE(BERVAL):
      CREATE uppl_temp.  
      ASSIGN
      uppl_temp.NUM = BERVAL.NUM
      uppl_temp.UPPLAG = BERVAL.UPPLAG.
      GET NEXT upplq NO-LOCK.
   END.
   CLOSE QUERY upplq. 
   */
   RUN LISTKONU.P
      (INPUT valaonr, INPUT valomrade, INPUT valkonst, INPUT TABLE kon_val, OUTPUT TABLE uppl_temp,OUTPUT TABLE skap_temp, OUTPUT TABLE id_temp).
   IF valkonst = FALSE THEN DO:
      RUN LISTPROG.P
      (INPUT valaonr, INPUT valomrade, OUTPUT TABLE mtrl_temp, OUTPUT TABLE lin_upp,OUTPUT TABLE lin_temp).
   END.   
   ELSE DO:
      RUN LISTPROG2U.P
      (INPUT TABLE kon_val, OUTPUT TABLE mtrl_temp, OUTPUT TABLE lin_upp,OUTPUT TABLE lin_temp).
   END.
   FOR EACH uppl_temp USE-INDEX NUM:
      
      FIND FIRST mtrl_temp WHERE mtrl_temp.NUM = uppl_temp.NUM
      USE-INDEX NUM NO-LOCK NO-ERROR.
      IF NOT AVAILABLE mtrl_temp THEN DO:
         CREATE mtrl_temp. 
         mtrl_temp.NUM = uppl_temp.NUM.
      END.
   END.
   
   FOR EACH mtrl_temp:
      FIND FIRST uppl_temp WHERE uppl_temp.NUM = mtrl_temp.NUM NO-LOCK NO-ERROR.
      IF AVAILABLE uppl_temp THEN DO:
         ASSIGN
         mtrl_temp.UPPLAG = uppl_temp.UPPLAG
         mtrl_temp.GRUPP = uppl_temp.GRUPP
         mtrl_temp.ORD = uppl_temp.ORD.
        
      END.
      ELSE DO:
         mtrl_temp.UPPLAG = ?.
      END.      
      
   END.         
   IF tamedtext = TRUE THEN DO:
      FOR EACH mtrl_temp BREAK BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.MTRLTEXT: 
         ACCUMULATE mtrl_temp.TOTPRIS (TOTAL BY mtrl_temp.ENR BY mtrl_temp.MTRLTEXT). 
         ACCUMULATE mtrl_temp.ANTAL (TOTAL BY mtrl_temp.ENR BY mtrl_temp.MTRLTEXT).       
         IF LAST-OF(mtrl_temp.MTRLTEXT) THEN DO:
            CREATE mtrl_temp2.
            ASSIGN                        
            mtrl_temp2.MTRLTEXT = mtrl_temp.MTRLTEXT
            mtrl_temp2.UPPLAG = mtrl_temp.UPPLAG
            mtrl_temp2.ENR = mtrl_temp.ENR
            mtrl_temp2.BENAMNING = SUBSTRING(mtrl_temp.BENAMNING,1,40) 
            mtrl_temp2.ENHET = mtrl_temp.ENHET  
            mtrl_temp2.PRIS = mtrl_temp.PRIS
            mtrl_temp2.TOTPRIS = (ACCUM TOTAL mtrl_temp.TOTPRIS) - sumpris                       
            mtrl_temp2.ANTAL = (ACCUM TOTAL mtrl_temp.ANTAL) - sumantal                
            sumpris = ACCUM TOTAL mtrl_temp.TOTPRIS 
            sumantal = ACCUM TOTAL mtrl_temp.ANTAL.                       
         END.     
      END.      
   END.
   ELSE DO:
      FOR EACH mtrl_temp BREAK BY mtrl_temp.ENR BY mtrl_temp.UPPLAG: 
         ACCUMULATE mtrl_temp.TOTPRIS (TOTAL BY mtrl_temp.ENR BY mtrl_temp.UPPLAG). 
         ACCUMULATE mtrl_temp.ANTAL (TOTAL BY mtrl_temp.ENR BY mtrl_temp.UPPLAG).       
         IF LAST-OF(mtrl_temp.UPPLAG) THEN DO:
            CREATE mtrl_temp2.
            ASSIGN                        
            mtrl_temp2.UPPLAG = mtrl_temp.UPPLAG
            mtrl_temp2.ENR = mtrl_temp.ENR
            mtrl_temp2.BENAMNING = SUBSTRING(mtrl_temp.BENAMNING,1,40) 
            mtrl_temp2.ENHET = mtrl_temp.ENHET  
            mtrl_temp2.PRIS = mtrl_temp.PRIS
            mtrl_temp2.TOTPRIS = (ACCUM TOTAL mtrl_temp.TOTPRIS) - sumpris                       
            mtrl_temp2.ANTAL = (ACCUM TOTAL mtrl_temp.ANTAL) - sumantal                
            sumpris = ACCUM TOTAL mtrl_temp.TOTPRIS 
            sumantal = ACCUM TOTAL mtrl_temp.ANTAL.                       
         END.     
      END. 
   END.
   totalsum = 0. 
   forsta = TRUE.
   OPEN QUERY berq FOR EACH hjnumm,
   EACH BERUPP WHERE BERUPP.AONR = hjnumm.AONR AND
   BERUPP.OMRADE = hjnumm.OMRADE NO-LOCK.
   GET FIRST berq NO-LOCK.
   DO WHILE AVAILABLE(BERUPP): 
      upput = FALSE.
      IF Guru.Konstanter:globforetag = "UMEA" THEN DO:
         FIND FIRST mtrl_temp2 WHERE mtrl_temp2.UPPLAG = BERUPP.UPPLAG
         NO-LOCK NO-ERROR.
         IF NOT AVAILABLE mtrl_temp2 THEN DO:
            FIND FIRST lin_upp WHERE lin_upp.UPPLAG = BERUPP.UPPLAG 
            NO-LOCK NO-ERROR.
            IF AVAILABLE lin_upp THEN upput = TRUE.
            ELSE upput = FALSE.
         END.
         ELSE DO:
            upput = TRUE.
         END.
      END.
      ELSE DO:
         upput = TRUE.
      END.
      IF upput = TRUE THEN DO:
         CREATE tidut. 
         ASSIGN
         totant = totant + 1
         tant = tant + 1
         extant = extant + 1.
         IF prisvar = 1 THEN SUBSTRING(tidut.UT,utnr[1]) = str3.         
         ELSE SUBSTRING(tidut.UT,utnr[1]) = str4.
         IF forsta = TRUE THEN forsta = FALSE.
         ELSE DO:
            ASSIGN
            SUBSTRING(tidut.UT,132) = "$"
            SUBSTRING(tidut.UT,131,1) = "£".
         END.
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
         CREATE tidut. 
         ASSIGN
         totant = totant + 1
         SUBSTRING(tidut.UT,utnr[1]) = "Upplag nr :".
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
         SUBSTRING(tidut.UT,utnr[2]) = STRING(BERUPP.UPPLAG).
         RUN data_UI (INPUT TRUE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).
         ASSIGN
         tant = tant + 2
         extant = extant + 2.
         CREATE tidut.
         ASSIGN
         tant = tant + 1
         totant = totant + 1
         extant = extant + 1
         SUBSTRING(tidut.UT,utnr[1]) = "Adress    :".
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
         FIND FIRST BERPUNKT  WHERE BERPUNKT.AONR = valaonr AND BERPUNKT.OMRADE  = valomrade  AND BERPUNKT.NUM = BERUPP.UPPLAG  AND BERPUNKT.KONSTRUKTIONUPPLAG = FALSE NO-LOCK NO-ERROR.
         IF AVAILABLE BERPUNKT THEN SUBSTRING(tidut.UT,utnr[2]) = ":" + BERUPP.ADRESS + ", " + STRING(BERPUNKT.VINKEL,"XXX XX") + " " + BERPUNKT.PUNKTNAMN.                                           
         ELSE SUBSTRING(tidut.UT,utnr[2]) = ":" + BERUPP.ADRESS.   
                
         RUN data_UI (INPUT TRUE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).

          /*CCCC*/        
         FIND FIRST BERPUNKT  WHERE BERPUNKT.AONR = BERUPP.AONR AND BERPUNKT.OMRADE  = BERUPP.OMRADE  AND BERPUNKT.NUM = BERUPP.UPPLAG  AND BERPUNKT.KONSTRUKTIONUPPLAG = FALSE NO-LOCK NO-ERROR.
         IF AVAILABLE BERPUNKT THEN DO:
            IF BERPUNKT.XKORD > 0 AND BERPUNKT.YKORD > 0 AND BERPUNKT.XKORDCH = "" AND BERPUNKT.YKORDCH = "" THEN DO:
               CREATE tidut.
               ASSIGN
               totant = totant + 1
               SUBSTRING(tidut.UT,utnr[1]) = "X och Y".
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
               ASSIGN
               SUBSTRING(tidut.UT,utnr[2]) = ":" + STRING( BERPUNKT.XKORD / 10000000 )  + " " + STRING( BERPUNKT.YKORD / 10000000 ).
               RUN data_UI (INPUT TRUE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).
            END.               
            ELSE IF BERPUNKT.XKORDCH = "0" AND BERPUNKT.YKORDCH = "0" THEN.
            ELSE DO:
               CREATE tidut.
               ASSIGN
               totant = totant + 1
               SUBSTRING(tidut.UT,utnr[1]) = "X och Y".
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
               ASSIGN
               SUBSTRING(tidut.UT,utnr[2]) = ":" + BERPUNKT.XKORDCH + " " + BERPUNKT.YKORDCH.
               RUN data_UI (INPUT TRUE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).
            END.
         END.   
            
         IF BERUPP.ANMARK NE "" THEN DO: 
            fetstil = TRUE.
            RUN anm2_UI.
            fetstil = FALSE.
         END.
         CREATE tidut. 
         ASSIGN
         tant = tant + 1
         totant = totant + 1
         extant = extant + 1.
         IF prisvar = 1 THEN SUBSTRING(tidut.UT,utnr[1]) = str3.         
         ELSE SUBSTRING(tidut.UT,utnr[1]) = str4.         
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
         RUN rubrik_UI.
         sumpris = 0.
         /*Konstruktioner*/
         FOR EACH mtrl_temp2 WHERE mtrl_temp2.UPPLAG = BERUPP.UPPLAG:            
            IF mtrl_temp2.ANTAL = 0 THEN DO:
               musz = musz.
            END.   
            ELSE DO:
               CREATE tidut.
               ASSIGN
               kant = kant + 1
               totant = totant + 1
               exkant = exkant + 1
               SUBSTRING(tidut.UT,utnr[1]) = mtrl_temp2.ENR.
               RUN data_UI (INPUT TRUE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
               SUBSTRING(tidut.UT,utnr[2]) = SUBSTRING(mtrl_temp2.BENAMNING,1,40).
               RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                                    
               SUBSTRING(tidut.UT,utnr[4]) = mtrl_temp2.ENHET.
               RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                                    
/*                SUBSTRING(tidut.UT,utnr[5]) = STRING(mtrl_temp2.ANTAL,">>>>>>>9"). */
               SUBSTRING(tidut.UT,utnr[5]) = STRING(mtrl_temp2.ANTAL,">>>>>>9"). 
               RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).                                     
               IF prisvar = 1 THEN DO:
                  ASSIGN 
                  SUBSTRING(tidut.UT,utnr[6]) = STRING(mtrl_temp2.PRIS,">>>>>>>>9").
                  RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                                    
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(mtrl_temp2.TOTPRIS,">>>>>>>>9").        
                  RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
                  IF tamedtext = TRUE THEN DO:
                     SUBSTRING(tidut.UT,utnr[8]) = mtrl_temp2.MTRLTEXT.
                     RUN data_UI (INPUT FALSE,INPUT "H",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[8]),INPUT 0,INPUT ?).
                     
                  END.                                     
                  sumpris = sumpris + mtrl_temp2.TOTPRIS.
                  upppris = upppris + + mtrl_temp2.TOTPRIS.
               END.
               ELSE DO:
                  IF tamedtext = TRUE THEN DO:
                     utnr[6] = 72.
                     SUBSTRING(tidut.UT,utnr[6]) = mtrl_temp2.MTRLTEXT.
                     RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).
                  END.
               END.    
            END.               
         END. 
         IF prisvar = 1 THEN DO:
            totant = totant + 1.
            CREATE tidut. 
            SUBSTRING(tidut.UT,utnr[2]) = "Kostnad för upplag nr"  + STRING(BERUPP.UPPLAG).
            RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                           
            SUBSTRING(tidut.UT,utnr[7]) = STRING(upppris,">>>>>>>>9").                    
            RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                                    
            upppris = 0.
         END.
         FIND FIRST lin_upp WHERE lin_upp.UPPLAG = BERUPP.UPPLAG NO-LOCK NO-ERROR.
         IF AVAILABLE lin_upp THEN DO: 
            IF prisvar = 1 THEN DO:  
               CREATE tidut. 
               totant = totant + 1.
               RUN tom_UI (INPUT ?).
               CREATE tidut. 
               ASSIGN
               totant = totant + 1
               kant = kant + 2
               exkant = exkant + 2
               SUBSTRING(tidut.UT,utnr[1]) = str3.
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
               CREATE tidut.         
               ASSIGN
               kant = kant + 1
               totant = totant + 1
               exkant = exkant + 1
               SUBSTRING(tidut.UT,utnr[1]) = "Linor och kablar till upplag nr:" + STRING(BERUPP.UPPLAG).      
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
               CREATE tidut. 
               ASSIGN
               kant = kant + 1
               totant = totant + 1
               exkant = exkant + 1
               SUBSTRING(tidut.UT,utnr[1]) = str3. 
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
            END.
            ELSE DO:
               CREATE tidut. 
               totant = totant + 1.
               RUN tom_UI (INPUT ?).
               CREATE tidut. 
               ASSIGN
               totant = totant + 1
               kant = kant + 2
               exkant = exkant + 2
               SUBSTRING(tidut.UT,utnr[1]) = str4.
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
               CREATE tidut. 
               ASSIGN
               kant = kant + 1
               totant = totant + 1
               exkant = exkant + 1
               SUBSTRING(tidut.UT,utnr[1]) = "Linor och kablar till upplag nr:" + STRING(BERUPP.UPPLAG).      
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
               CREATE tidut. 
               ASSIGN
               kant = kant + 1
               totant = totant + 1
               exkant = exkant + 1
               SUBSTRING(tidut.UT,utnr[1]) = str4. 
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
            END.
            CREATE tidut.
            ASSIGN
            kant = kant + 1
            totant = totant + 1
            exkant = exkant + 1.
            RUN tom_UI (INPUT ?).
            FOR EACH lin_upp WHERE lin_upp.UPPLAG = BERUPP.UPPLAG:
               CREATE tidut.
               ASSIGN
               kant = kant + 1
               totant = totant + 1
               exkant = exkant + 1
               SUBSTRING(tidut.UT,utnr[1]) = lin_upp.ENR.
               RUN data_UI (INPUT TRUE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
               SUBSTRING(tidut.UT,utnr[2]) = SUBSTRING(lin_upp.BENAMNING,1,40).
               RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                                    
               SUBSTRING(tidut.UT,utnr[4]) = lin_upp.ENHET.
               RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                                    
/*                SUBSTRING(tidut.UT,utnr[5]) = STRING(lin_upp.TOTMETER,">>>>>>>9"). */
               SUBSTRING(tidut.UT,utnr[5]) = STRING(lin_upp.TOTMETER,">>>>>>9"). 
               RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).                                    
               IF prisvar = 1 THEN DO: 
                  ASSIGN 
                  SUBSTRING(tidut.UT,utnr[6]) = STRING(lin_upp.PRIS,">>>>>>>>9").
                  RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                                    
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(lin_upp.TOTPRIS,">>>>>>>>9").        
                  RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                                    
                  sumpris = sumpris + lin_upp.TOTPRIS.   
                  upppris = upppris + + lin_upp.TOTPRIS.
               END.
            END.
         END.      
         IF prisvar = 1 AND upppris > 0 THEN DO:
            totant = totant + 1.
            CREATE tidut. 
            SUBSTRING(tidut.UT,utnr[2]) = "Kostnad för linor och kablar upplag nr"  + STRING(BERUPP.UPPLAG).
            RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                           
            SUBSTRING(tidut.UT,utnr[7]) = STRING(upppris,">>>>>>>>9").                    
            RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                                    
            upppris = 0.
         END.
         CREATE tidut. 
         ASSIGN
         kant = kant + 1
         totant = totant + 1
         exkant = exkant + 1.
         RUN tom_UI (INPUT ?).
         totalsum = totalsum + sumpris.  
      END.
     
      GET NEXT berq NO-LOCK.   
   END.                     
   CLOSE QUERY berq.
   FIND FIRST mtrl_temp2 WHERE mtrl_temp2.UPPLAG = ? NO-LOCK NO-ERROR.
   IF AVAILABLE mtrl_temp2 THEN DO:
      IF prisvar = 1 THEN DO:  
         CREATE tidut. 
         ASSIGN
         kant = kant + 1
         totant = totant + 1
         exkant = exkant + 1.
         SUBSTRING(tidut.UT,utnr[1]) = str3.
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
         CREATE tidut.       
         ASSIGN
         kant = kant + 1
         totant = totant + 1
         exkant = exkant + 1.
         ASSIGN
         SUBSTRING(tidut.UT,utnr[1]) = "Materiel ej kopplat till upplag".      
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
         CREATE tidut. 
         ASSIGN
         kant = kant + 1
         totant = totant + 1
         exkant = exkant + 1.
         SUBSTRING(tidut.UT,utnr[1]) = str3.
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
      END.
      ELSE DO:
         CREATE tidut. 
         ASSIGN
         kant = kant + 1
         totant = totant + 1
         exkant = exkant + 1.
         SUBSTRING(tidut.UT,utnr[1]) = str4.
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
         CREATE tidut.       
         ASSIGN
         kant = kant + 1
         totant = totant + 1
         exkant = exkant + 1.
         ASSIGN
         SUBSTRING(tidut.UT,utnr[1]) = "Materiel ej kopplat till upplag".      
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
         CREATE tidut. 
         ASSIGN
         kant = kant + 1
         totant = totant + 1
         exkant = exkant + 1.
         SUBSTRING(tidut.UT,utnr[1]) = str4.
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
      END.
      RUN rubrik_UI.
      ASSIGN
      sumpris = 0.    
      FOR EACH mtrl_temp2 WHERE mtrl_temp2.UPPLAG = ?: 
         IF mtrl_temp2.ANTAL = 0 THEN DO:
            musz = musz.
         END.   
         ELSE DO:
            CREATE tidut.
            ASSIGN
            totant = totant + 1
            kant = kant + 1
            exkant = exkant + 1
            SUBSTRING(tidut.UT,utnr[1]) = mtrl_temp2.ENR.
            RUN data_UI (INPUT TRUE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                           
            SUBSTRING(tidut.UT,utnr[2]) = SUBSTRING(mtrl_temp2.BENAMNING,1,40).
            RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                           
            SUBSTRING(tidut.UT,utnr[4]) = mtrl_temp2.ENHET.
            RUN data_UI (INPUT FALSE,INPUT "D",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[4]),INPUT 0,INPUT ?).                           
/*             SUBSTRING(tidut.UT,utnr[5]) = STRING(mtrl_temp2.ANTAL,">>>>>>>9"). */
            SUBSTRING(tidut.UT,utnr[5]) = STRING(mtrl_temp2.ANTAL,">>>>>>9"). 
            RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).                           
            IF prisvar = 1 THEN DO:
               ASSIGN 
               SUBSTRING(tidut.UT,utnr[6]) = STRING(mtrl_temp2.PRIS,">>>>>>>>9").
               RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).                           
               SUBSTRING(tidut.UT,utnr[7]) = STRING(mtrl_temp2.TOTPRIS,">>>>>>>>9").        
               RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).   
               IF tamedtext = TRUE THEN DO:
                  SUBSTRING(tidut.UT,utnr[8]) = mtrl_temp2.MTRLTEXT.
                  RUN data_UI (INPUT FALSE,INPUT "H",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[8]),INPUT 0,INPUT ?).
               END.                        
            END.
            ELSE DO:
               IF tamedtext = TRUE THEN DO:
                  SUBSTRING(tidut.UT,utnr[6]) = mtrl_temp2.MTRLTEXT.
                  RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).
               END.
            END.
            sumpris = sumpris + mtrl_temp2.TOTPRIS.
         END.   
      END.       
      IF prisvar = 1 AND sumpris > 0 THEN DO:
         totant = totant + 1.
         CREATE tidut. 
         SUBSTRING(tidut.UT,utnr[2]) = "Kostnad för materiel ej kopplat till upplag".
         RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                           
         SUBSTRING(tidut.UT,utnr[7]) = STRING(sumpris,">>>>>>>>9"). 
         RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                                    
         upppris = 0.
         CREATE tidut.
      END.
      totalsum = totalsum + sumpris.      
      IF prisvar = 1 THEN DO:
         CREATE tidut.
         ASSIGN
         totant = totant + 1
         kant = kant + 1
         exkant = exkant + 1
         SUBSTRING(tidut.UT,utnr[7]) = "=========".
         RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                           
         CREATE tidut.
         ASSIGN
         totant = totant + 1
         kant = kant + 1
         exkant = exkant + 1
         SUBSTRING(tidut.UT,utnr[5]) = "Total summa:".
         RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).                           
         SUBSTRING(tidut.UT,utnr[7]) = STRING(totalsum,">>>>>>>>9").  
         RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
      END.     
   END.
   ELSE DO:   
      IF prisvar = 1 THEN DO:
         CREATE tidut.
         ASSIGN
         totant = totant + 1
         kant = kant + 1
         exkant = exkant + 1
         SUBSTRING(tidut.UT,utnr[7]) = "=========".
         RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
         CREATE tidut.
         ASSIGN
         totant = totant + 1
         kant = kant + 1
         exkant = exkant + 1
         SUBSTRING(tidut.UT,utnr[5]) = "Total summa:".
         RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).
         SUBSTRING(tidut.UT,utnr[7]) = STRING(totalsum,">>>>>>>>9").  
         RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
      END.     
   END.      
   
END PROCEDURE.

PROCEDURE summabyggupp_UI :
   DEFINE VARIABLE upppris AS DECIMAL NO-UNDO.
   ASSIGN
   sumpris = 0
   sumantal = 0
   str4 =
"========================================================================" .
      
   CREATE hjnumm.
   ASSIGN 
   hjnumm.AONR = valaonr
   hjnumm.OMRADE = valomrade.
   IF valkonst = TRUE THEN DO:
      FOR EACH flerbertemp:
         FIND FIRST hjnumm WHERE hjnumm.AONR = flerbertemp.BERAONR AND hjnumm.OMRADE = flerbertemp.OMRADE NO-LOCK NO-ERROR.
         IF NOT AVAILABLE hjnumm THEN DO:
            CREATE hjnumm.
            ASSIGN 
            hjnumm.AONR = flerbertemp.BERAONR
            hjnumm.OMRADE = flerbertemp.OMRADE.
         END.
      END.
   END.
   
   RUN LISTKONU.P
      (INPUT valaonr, INPUT valomrade, INPUT valkonst, INPUT TABLE kon_val, OUTPUT TABLE uppl_temp,OUTPUT TABLE skap_temp, OUTPUT TABLE id_temp).
   IF valkonst = FALSE THEN DO:
      RUN LISTPROG.P
      (INPUT valaonr, INPUT valomrade, OUTPUT TABLE mtrl_temp, OUTPUT TABLE lin_upp,OUTPUT TABLE lin_temp).
   END.   
   ELSE DO:
      RUN LISTPROG2U.P
      (INPUT TABLE kon_val, OUTPUT TABLE mtrl_temp, OUTPUT TABLE lin_upp,OUTPUT TABLE lin_temp).
   END.
   FOR EACH uppl_temp USE-INDEX NUM:
      
      FIND FIRST mtrl_temp WHERE mtrl_temp.NUM = uppl_temp.NUM
      USE-INDEX NUM NO-LOCK NO-ERROR.
      IF NOT AVAILABLE mtrl_temp THEN DO:
         CREATE mtrl_temp. 
         mtrl_temp.NUM = uppl_temp.NUM.
      END.
   END.
   
   FOR EACH mtrl_temp:
      FIND FIRST uppl_temp WHERE uppl_temp.NUM = mtrl_temp.NUM NO-LOCK NO-ERROR.
      IF AVAILABLE uppl_temp THEN DO:
         ASSIGN
         mtrl_temp.UPPLAG = uppl_temp.UPPLAG
         mtrl_temp.GRUPP = uppl_temp.GRUPP
         mtrl_temp.ORD = uppl_temp.ORD.
        
      END.
      ELSE DO:
         mtrl_temp.UPPLAG = ?.
      END.      
      FIND FIRST id_temp WHERE id_temp.NUM = mtrl_temp.NUM NO-LOCK NO-ERROR.
      IF AVAILABLE id_temp THEN DO:
         ASSIGN
         mtrl_temp.FRI2 = id_temp.FRI2
         mtrl_temp.FRI3 = id_temp.FRI3.
      END.   
   END.         
   IF tamedtext = TRUE THEN DO:
      FOR EACH mtrl_temp BREAK BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.NUM BY mtrl_temp.MTRLTEXT: 
         ACCUMULATE mtrl_temp.TOTPRIS (TOTAL BY mtrl_temp.ENR  BY mtrl_temp.MTRLTEXT). 
         ACCUMULATE mtrl_temp.ANTAL (TOTAL BY mtrl_temp.ENR BY mtrl_temp.MTRLTEXT).       
         IF LAST-OF(mtrl_temp.MTRLTEXT) THEN DO:
            CREATE mtrl_temp2.
            ASSIGN  
            mtrl_temp2.NUM = mtrl_temp.NUM
            mtrl_temp2.FRI2 = mtrl_temp.FRI2
            mtrl_temp2.FRI3 = mtrl_temp.FRI3                      
            mtrl_temp2.MTRLTEXT = mtrl_temp.MTRLTEXT
            mtrl_temp2.UPPLAG = mtrl_temp.UPPLAG
            mtrl_temp2.ENR = mtrl_temp.ENR
            mtrl_temp2.BENAMNING = SUBSTRING(mtrl_temp.BENAMNING,1,40) 
            mtrl_temp2.ENHET = mtrl_temp.ENHET  
            mtrl_temp2.PRIS = mtrl_temp.PRIS
            mtrl_temp2.TOTPRIS = (ACCUM TOTAL mtrl_temp.TOTPRIS) - sumpris                       
            mtrl_temp2.ANTAL = (ACCUM TOTAL mtrl_temp.ANTAL) - sumantal                
            sumpris = ACCUM TOTAL mtrl_temp.TOTPRIS 
            sumantal = ACCUM TOTAL mtrl_temp.ANTAL.                       
         END.     
      END.      
   END.
   ELSE DO:
      FOR EACH mtrl_temp BREAK BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.NUM: 
         ACCUMULATE mtrl_temp.TOTPRIS (TOTAL BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.NUM). 
         ACCUMULATE mtrl_temp.ANTAL (TOTAL BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.NUM).       
         IF LAST-OF(mtrl_temp.NUM) THEN DO:
            CREATE mtrl_temp2.
            ASSIGN                        
            mtrl_temp2.NUM = mtrl_temp.NUM
            mtrl_temp2.FRI2 = mtrl_temp.FRI2
            mtrl_temp2.FRI3 = mtrl_temp.FRI3
            mtrl_temp2.UPPLAG = mtrl_temp.UPPLAG
            mtrl_temp2.ENR = mtrl_temp.ENR
            mtrl_temp2.BENAMNING = SUBSTRING(mtrl_temp.BENAMNING,1,40) 
            mtrl_temp2.ENHET = mtrl_temp.ENHET  
            mtrl_temp2.PRIS = mtrl_temp.PRIS
            mtrl_temp2.TOTPRIS = (ACCUM TOTAL mtrl_temp.TOTPRIS) - sumpris                       
            mtrl_temp2.ANTAL = (ACCUM TOTAL mtrl_temp.ANTAL) - sumantal                
            sumpris = ACCUM TOTAL mtrl_temp.TOTPRIS 
            sumantal = ACCUM TOTAL mtrl_temp.ANTAL.                       
         END.     
      END. 
   END.
   totalsum = 0. 
   forsta = TRUE.
   OPEN QUERY berq FOR EACH hjnumm,
   EACH BERUPP WHERE BERUPP.AONR = hjnumm.AONR AND
   BERUPP.OMRADE = hjnumm.OMRADE NO-LOCK.
   GET FIRST berq NO-LOCK.
   DO WHILE AVAILABLE(BERUPP): 
      upput = TRUE.      
      IF upput = TRUE THEN DO:
         CREATE tidut. 
         ASSIGN
         totant = totant + 1
         tant = tant + 1
         extant = extant + 1.
         IF prisvar = 1 THEN SUBSTRING(tidut.UT,utnr[1]) = str3.         
         ELSE SUBSTRING(tidut.UT,utnr[1]) = str4.
         IF forsta = TRUE THEN forsta = FALSE.
         ELSE DO:
            ASSIGN
            SUBSTRING(tidut.UT,132) = "$"
            SUBSTRING(tidut.UT,131,1) = "£".
         END.
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
         CREATE tidut. 
         ASSIGN
         totant = totant + 1
         SUBSTRING(tidut.UT,utnr[1]) = "Upplag nr :".
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
         SUBSTRING(tidut.UT,utnr[3]) = STRING(BERUPP.UPPLAG).
         RUN data_UI (INPUT TRUE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 1,INPUT ?).
         ASSIGN
         tant = tant + 2
         extant = extant + 2.
         CREATE tidut.
         ASSIGN
         tant = tant + 1
         totant = totant + 1
         extant = extant + 1
         SUBSTRING(tidut.UT,utnr[1]) = "Adress    :".
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
         FIND FIRST BERPUNKT  WHERE BERPUNKT.AONR = valaonr AND BERPUNKT.OMRADE  = valomrade  AND BERPUNKT.NUM = BERUPP.UPPLAG  AND BERPUNKT.KONSTRUKTIONUPPLAG = FALSE NO-LOCK NO-ERROR.
         IF AVAILABLE BERPUNKT THEN SUBSTRING(tidut.UT,utnr[2]) = ":" + BERUPP.ADRESS + ", " + STRING(BERPUNKT.VINKEL,"XXX XX") + " " + BERPUNKT.PUNKTNAMN.                                           
         ELSE SUBSTRING(tidut.UT,utnr[2]) = ":" + BERUPP.ADRESS.   
                
         RUN data_UI (INPUT TRUE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).

          /*CCCC*/        
         FIND FIRST BERPUNKT  WHERE BERPUNKT.AONR = BERUPP.AONR AND BERPUNKT.OMRADE  = BERUPP.OMRADE  AND BERPUNKT.NUM = BERUPP.UPPLAG  AND BERPUNKT.KONSTRUKTIONUPPLAG = FALSE NO-LOCK NO-ERROR.
         IF AVAILABLE BERPUNKT THEN DO:
            IF BERPUNKT.XKORD > 0 AND BERPUNKT.YKORD > 0 AND BERPUNKT.XKORDCH = "" AND BERPUNKT.YKORDCH = "" THEN DO:
               CREATE tidut.
               ASSIGN
               totant = totant + 1
               SUBSTRING(tidut.UT,utnr[1]) = "X och Y".
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
               ASSIGN
               SUBSTRING(tidut.UT,utnr[2]) = ":" + STRING( BERPUNKT.XKORD / 10000000 )  + " " + STRING( BERPUNKT.YKORD / 10000000 ).
               RUN data_UI (INPUT TRUE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).
            END.               
            ELSE IF BERPUNKT.XKORDCH = "0" AND BERPUNKT.YKORDCH = "0" THEN.
            ELSE DO:
               CREATE tidut.
               ASSIGN
               totant = totant + 1
               SUBSTRING(tidut.UT,utnr[1]) = "X och Y".
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
               ASSIGN
               SUBSTRING(tidut.UT,utnr[2]) = ":" + BERPUNKT.XKORDCH + " " + BERPUNKT.YKORDCH.
               RUN data_UI (INPUT TRUE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).
            END.
         END.   
            
         IF BERUPP.ANMARK NE "" THEN DO: 
            fetstil = TRUE.
            RUN anm2_UI.
            fetstil = FALSE.
         END.
         CREATE tidut. 
         ASSIGN
         tant = tant + 1
         totant = totant + 1
         extant = extant + 1.
         IF prisvar = 1 THEN SUBSTRING(tidut.UT,utnr[1]) = str3.         
         ELSE SUBSTRING(tidut.UT,utnr[1]) = str4.         
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
         RUN rubrikbyggupp_UI.
         sumpris = 0.
         /*Konstruktioner*/
         FOR EACH mtrl_temp2 WHERE mtrl_temp2.UPPLAG = BERUPP.UPPLAG USE-INDEX FRI2:            
            IF mtrl_temp2.ANTAL = 0 THEN DO:
               musz = musz.
            END.   
            ELSE DO:
               CREATE tidut.
               ASSIGN
               kant = kant + 1
               totant = totant + 1
               exkant = exkant + 1
               SUBSTRING(tidut.UT,utnr[1]) = STRING(mtrl_temp2.FRI2).         
               RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
               /*SUBSTRING(tidut.UT,utnr[2]) = mtrl_temp2.FRI3.         
               RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).*/
               SUBSTRING(tidut.UT,utnr[2]) = mtrl_temp2.ENR.
               RUN data_UI (INPUT TRUE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                                    
               SUBSTRING(tidut.UT,utnr[3]) = SUBSTRING(mtrl_temp2.BENAMNING,1,40).
               RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                                    
               SUBSTRING(tidut.UT,utnr[5]) = mtrl_temp2.ENHET.
               RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).                                    
               SUBSTRING(tidut.UT,utnr[6]) = STRING(mtrl_temp2.ANTAL,">>>>>>9"). 
               RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).
                                                    
               IF prisvar = 1 THEN DO:
                  ASSIGN 
                  SUBSTRING(tidut.UT,utnr[7]) = STRING(mtrl_temp2.PRIS,">>>>>>>>9").
                  RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                                    
                  SUBSTRING(tidut.UT,utnr[8]) = STRING(mtrl_temp2.TOTPRIS,">>>>>>>>9").        
                  RUN data_UI (INPUT FALSE,INPUT "H",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[8]),INPUT 0,INPUT ?).
                  
                  IF tamedtext = TRUE THEN DO:
                     SUBSTRING(tidut.UT,utnr[9]) = mtrl_temp2.MTRLTEXT.
                     RUN data_UI (INPUT FALSE,INPUT "I",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[9]),INPUT 0,INPUT ?).
                     
                  END.                                     
                  sumpris = sumpris + mtrl_temp2.TOTPRIS.
                  upppris = upppris + + mtrl_temp2.TOTPRIS.
               END.
               ELSE DO:
                  IF tamedtext = TRUE THEN DO:
                     utnr[7] = 71.
                     SUBSTRING(tidut.UT,utnr[7]) = mtrl_temp2.MTRLTEXT.
                     RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[8]),INPUT 0,INPUT ?).
                  END.
               END.    
            END.               
         END. 
         IF prisvar = 1 THEN DO:
            totant = totant + 1.
            CREATE tidut. 
            SUBSTRING(tidut.UT,utnr[2]) = "Kostnad för upplag nr"  + STRING(BERUPP.UPPLAG).
            RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                           
            SUBSTRING(tidut.UT,utnr[8]) = STRING(upppris,">>>>>>>>9").                    
            RUN data_UI (INPUT FALSE,INPUT "H",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[8]),INPUT 0,INPUT ?).                                    
            upppris = 0.
         END.
         CREATE tidut. 
         ASSIGN
         kant = kant + 1
         totant = totant + 1
         exkant = exkant + 1.
         RUN tom_UI (INPUT ?).
         totalsum = totalsum + sumpris.  
      END.
     
      GET NEXT berq NO-LOCK.   
   END.                     
   CLOSE QUERY berq.
   FIND FIRST mtrl_temp2 WHERE mtrl_temp2.UPPLAG = ? NO-LOCK NO-ERROR.
   IF AVAILABLE mtrl_temp2 THEN DO:
      IF prisvar = 1 THEN DO:  
         CREATE tidut. 
         ASSIGN
         kant = kant + 1
         totant = totant + 1
         exkant = exkant + 1.
         SUBSTRING(tidut.UT,utnr[1]) = str3.
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
         CREATE tidut.       
         ASSIGN
         kant = kant + 1
         totant = totant + 1
         exkant = exkant + 1.
         ASSIGN
         SUBSTRING(tidut.UT,utnr[1]) = "Materiel ej kopplat till upplag".      
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
         CREATE tidut. 
         ASSIGN
         kant = kant + 1
         totant = totant + 1
         exkant = exkant + 1.
         SUBSTRING(tidut.UT,utnr[1]) = str3.
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
      END.
      ELSE DO:
         CREATE tidut. 
         ASSIGN
         kant = kant + 1
         totant = totant + 1
         exkant = exkant + 1.
         SUBSTRING(tidut.UT,utnr[1]) = str4.
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
         CREATE tidut.       
         ASSIGN
         kant = kant + 1
         totant = totant + 1
         exkant = exkant + 1.
         ASSIGN
         SUBSTRING(tidut.UT,utnr[1]) = "Materiel ej kopplat till upplag".      
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
         CREATE tidut. 
         ASSIGN
         kant = kant + 1
         totant = totant + 1
         exkant = exkant + 1.
         SUBSTRING(tidut.UT,utnr[1]) = str4.
         RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).                                    
      END.
      RUN rubrikbyggupp_UI.
      ASSIGN
      sumpris = 0.    
      FOR EACH mtrl_temp2 WHERE mtrl_temp2.UPPLAG = ? USE-INDEX FRI2: 
         IF mtrl_temp2.ANTAL = 0 THEN DO:
            musz = musz.
         END.   
         ELSE DO:
            CREATE tidut.
            ASSIGN
            totant = totant + 1
            kant = kant + 1
            exkant = exkant + 1
            SUBSTRING(tidut.UT,utnr[1]) = STRING(mtrl_temp2.FRI2).         
            RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 0,INPUT ?).
            /*SUBSTRING(tidut.UT,utnr[2]) = mtrl_temp2.FRI3.         
            RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).*/
            SUBSTRING(tidut.UT,utnr[2]) = mtrl_temp2.ENR.
            RUN data_UI (INPUT TRUE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                           
            SUBSTRING(tidut.UT,utnr[3]) = SUBSTRING(mtrl_temp2.BENAMNING,1,40).
            RUN data_UI (INPUT FALSE,INPUT "C",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[3]),INPUT 0,INPUT ?).                           
            SUBSTRING(tidut.UT,utnr[5]) = mtrl_temp2.ENHET.
            RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).                           

            SUBSTRING(tidut.UT,utnr[6]) = STRING(mtrl_temp2.ANTAL,">>>>>>9"). 
            RUN data_UI (INPUT FALSE,INPUT "F",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[6]),INPUT 0,INPUT ?).
                                       
            IF prisvar = 1 THEN DO:
               ASSIGN 
               SUBSTRING(tidut.UT,utnr[7]) = STRING(mtrl_temp2.PRIS,">>>>>>>>9").
               RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).                           
               SUBSTRING(tidut.UT,utnr[8]) = STRING(mtrl_temp2.TOTPRIS,">>>>>>>>9").        
               RUN data_UI (INPUT FALSE,INPUT "H",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[8]),INPUT 0,INPUT ?).   
               IF tamedtext = TRUE THEN DO:
                  SUBSTRING(tidut.UT,utnr[9]) = mtrl_temp2.MTRLTEXT.
                  RUN data_UI (INPUT FALSE,INPUT "I",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[9]),INPUT 0,INPUT ?).
               END.                        
            END.
            ELSE DO:
               IF tamedtext = TRUE THEN DO:
                  SUBSTRING(tidut.UT,utnr[7]) = mtrl_temp2.MTRLTEXT.
                  RUN data_UI (INPUT FALSE,INPUT "G",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[7]),INPUT 0,INPUT ?).
               END.
            END.
            sumpris = sumpris + mtrl_temp2.TOTPRIS.
         END.   
      END.       
      IF prisvar = 1 AND sumpris > 0 THEN DO:
         totant = totant + 1.
         CREATE tidut. 
         SUBSTRING(tidut.UT,utnr[2]) = "Kostnad för materiel ej kopplat till upplag".
         RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 0,INPUT ?).                           
         SUBSTRING(tidut.UT,utnr[8]) = STRING(sumpris,">>>>>>>>9"). 
         RUN data_UI (INPUT FALSE,INPUT "H",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[8]),INPUT 0,INPUT ?).                                    
         upppris = 0.
         CREATE tidut.
      END.
      totalsum = totalsum + sumpris.      
      IF prisvar = 1 THEN DO:
         CREATE tidut.
         ASSIGN
         totant = totant + 1
         kant = kant + 1
         exkant = exkant + 1
         SUBSTRING(tidut.UT,utnr[8]) = "=========".
         RUN data_UI (INPUT FALSE,INPUT "H",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[8]),INPUT 0,INPUT ?).                           
         CREATE tidut.
         ASSIGN
         totant = totant + 1
         kant = kant + 1
         exkant = exkant + 1
         SUBSTRING(tidut.UT,utnr[5]) = "Total summa:".
         RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).                           
         SUBSTRING(tidut.UT,utnr[8]) = STRING(totalsum,">>>>>>>>9").  
         RUN data_UI (INPUT FALSE,INPUT "H",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[8]),INPUT 0,INPUT ?).
      END.     
   END.
   ELSE DO:   
      IF prisvar = 1 THEN DO:
         CREATE tidut.
         ASSIGN
         totant = totant + 1
         kant = kant + 1
         exkant = exkant + 1
         SUBSTRING(tidut.UT,utnr[8]) = "=========".
         RUN data_UI (INPUT FALSE,INPUT "H",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[8]),INPUT 0,INPUT ?).
         CREATE tidut.
         ASSIGN
         totant = totant + 1
         kant = kant + 1
         exkant = exkant + 1
         SUBSTRING(tidut.UT,utnr[5]) = "Total summa:".
         RUN data_UI (INPUT FALSE,INPUT "E",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[5]),INPUT 0,INPUT ?).
         SUBSTRING(tidut.UT,utnr[8]) = STRING(totalsum,">>>>>>>>9").  
         RUN data_UI (INPUT FALSE,INPUT "H",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[8]),INPUT 0,INPUT ?).
      END.     
   END.      
   
END PROCEDURE.

PROCEDURE summabygguppdyn_UI :
   DEFINE VARIABLE upppris AS DECIMAL NO-UNDO.
   ASSIGN
   sumpris = 0
   sumantal = 0
   str4 =
"========================================================================" .
      
   CREATE hjnumm.
   ASSIGN 
   hjnumm.AONR = valaonr
   hjnumm.OMRADE = valomrade.
   IF valkonst = TRUE THEN DO:
      FOR EACH flerbertemp:
         FIND FIRST hjnumm WHERE hjnumm.AONR = flerbertemp.BERAONR AND hjnumm.OMRADE = flerbertemp.OMRADE NO-LOCK NO-ERROR.
         IF NOT AVAILABLE hjnumm THEN DO:
            CREATE hjnumm.
            ASSIGN 
            hjnumm.AONR = flerbertemp.BERAONR
            hjnumm.OMRADE = flerbertemp.OMRADE.
         END.
      END.
   END.
   
   RUN LISTKONU.P
      (INPUT valaonr, INPUT valomrade, INPUT valkonst, INPUT TABLE kon_val, OUTPUT TABLE uppl_temp,OUTPUT TABLE skap_temp, OUTPUT TABLE id_temp).
   IF valkonst = FALSE THEN DO:
      RUN LISTPROG.P
      (INPUT valaonr, INPUT valomrade, OUTPUT TABLE mtrl_temp, OUTPUT TABLE lin_upp,OUTPUT TABLE lin_temp).
   END.   
   ELSE DO:
      RUN LISTPROG2U.P
      (INPUT TABLE kon_val, OUTPUT TABLE mtrl_temp, OUTPUT TABLE lin_upp,OUTPUT TABLE lin_temp).
   END.
   FOR EACH uppl_temp USE-INDEX NUM:
      
      FIND FIRST mtrl_temp WHERE mtrl_temp.NUM = uppl_temp.NUM
      USE-INDEX NUM NO-LOCK NO-ERROR.
      IF NOT AVAILABLE mtrl_temp THEN DO:
         CREATE mtrl_temp. 
         mtrl_temp.NUM = uppl_temp.NUM.
      END.
   END.
   
   FOR EACH mtrl_temp:
      FIND FIRST uppl_temp WHERE uppl_temp.NUM = mtrl_temp.NUM NO-LOCK NO-ERROR.
      IF AVAILABLE uppl_temp THEN DO:
         ASSIGN
         mtrl_temp.UPPLAG = uppl_temp.UPPLAG
         mtrl_temp.GRUPP = uppl_temp.GRUPP
         mtrl_temp.ORD = uppl_temp.ORD.
        
      END.
      ELSE DO:
         mtrl_temp.UPPLAG = ?.
      END.      
      FIND FIRST id_temp WHERE id_temp.NUM = mtrl_temp.NUM NO-LOCK NO-ERROR.
      IF AVAILABLE id_temp THEN DO:
         ASSIGN
         mtrl_temp.FRI2 = id_temp.FRI2
         mtrl_temp.FRI3 = id_temp.FRI3.
      END.   
   END.         
   IF tamedtext = TRUE THEN DO:
      FOR EACH mtrl_temp BREAK BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.NUM BY mtrl_temp.MTRLTEXT: 
         ACCUMULATE mtrl_temp.TOTPRIS (TOTAL BY mtrl_temp.ENR  BY mtrl_temp.MTRLTEXT). 
         ACCUMULATE mtrl_temp.ANTAL (TOTAL BY mtrl_temp.ENR BY mtrl_temp.MTRLTEXT).       
         IF LAST-OF(mtrl_temp.MTRLTEXT) THEN DO:
            CREATE mtrl_temp2.
            ASSIGN  
            mtrl_temp2.NUM = mtrl_temp.NUM
            mtrl_temp2.FRI2 = mtrl_temp.FRI2
            mtrl_temp2.FRI3 = mtrl_temp.FRI3                      
            mtrl_temp2.MTRLTEXT = mtrl_temp.MTRLTEXT
            mtrl_temp2.UPPLAG = mtrl_temp.UPPLAG
            mtrl_temp2.ENR = mtrl_temp.ENR
            mtrl_temp2.BENAMNING = SUBSTRING(mtrl_temp.BENAMNING,1,40) 
            mtrl_temp2.ENHET = mtrl_temp.ENHET  
            mtrl_temp2.PRIS = mtrl_temp.PRIS
            mtrl_temp2.TOTPRIS = (ACCUM TOTAL mtrl_temp.TOTPRIS) - sumpris                       
            mtrl_temp2.ANTAL = (ACCUM TOTAL mtrl_temp.ANTAL) - sumantal                
            sumpris = ACCUM TOTAL mtrl_temp.TOTPRIS 
            sumantal = ACCUM TOTAL mtrl_temp.ANTAL.                       
         END.     
      END.      
   END.
   ELSE DO:
      FOR EACH mtrl_temp BREAK BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.NUM: 
         ACCUMULATE mtrl_temp.TOTPRIS (TOTAL BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.NUM). 
         ACCUMULATE mtrl_temp.ANTAL (TOTAL BY mtrl_temp.ENR BY mtrl_temp.UPPLAG BY mtrl_temp.NUM).       
         IF LAST-OF(mtrl_temp.NUM) THEN DO:
            CREATE mtrl_temp2.
            ASSIGN                        
            mtrl_temp2.NUM = mtrl_temp.NUM
            mtrl_temp2.FRI2 = mtrl_temp.FRI2
            mtrl_temp2.FRI3 = mtrl_temp.FRI3
            mtrl_temp2.MTRLTEXT = mtrl_temp.MTRLTEXT
            mtrl_temp2.UPPLAG = mtrl_temp.UPPLAG
            mtrl_temp2.ENR = mtrl_temp.ENR
            mtrl_temp2.BENAMNING = SUBSTRING(mtrl_temp.BENAMNING,1,40) 
            mtrl_temp2.ENHET = mtrl_temp.ENHET  
            mtrl_temp2.PRIS = mtrl_temp.PRIS
            mtrl_temp2.TOTPRIS = (ACCUM TOTAL mtrl_temp.TOTPRIS) - sumpris                       
            mtrl_temp2.ANTAL = (ACCUM TOTAL mtrl_temp.ANTAL) - sumantal                
            sumpris = ACCUM TOTAL mtrl_temp.TOTPRIS 
            sumantal = ACCUM TOTAL mtrl_temp.ANTAL.                       
         END.     
      END. 
   END.
   EMPTY TEMP-TABLE emtrl_temp2 NO-ERROR. 
   FOR EACH mtrl_temp2 NO-LOCK:
      IF mtrl_temp2.ENR NE "" AND mtrl_temp2.ANTAL > 0 THEN DO:
         CREATE emtrl_temp2.
         BUFFER-COPY mtrl_temp2 TO emtrl_temp2.
      END.   
   END.
   
END PROCEDURE.

PROCEDURE anm2_UI : 
   DEFINE VARIABLE nyanm AS CHARACTER NO-UNDO.
   IF INDEX (BERUPP.ANMARK,"$") > 0 THEN nyanm = SUBSTRING(BERUPP.ANMARK,1,INDEX(BERUPP.ANMARK,"$")  - 1).
    ELSE nyanm = BERUPP.ANMARK.  
   CREATE tidut.      
   ASSIGN
   tant = tant + 1
   extant = extant + 1
   totant = totant + 1
   SUBSTRING(tidut.UT,utnr[1]) = "Anmärkning:"
   retvar = 1
   ednum = 1
   ednum3 = LENGTH(nyanm )
   retvar = INDEX(nyanm ,CHR(10),ednum)
   edtecken = 50
   edtext = nyanm 
   tidtext = "".  
   RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
   {ANMARK2.I}   
END PROCEDURE.

PROCEDURE anm3_UI :
   CREATE tidut. 
   ASSIGN
   tant = tant + 1
   extant = extant + 1
   totant = totant + 1
   SUBSTRING(tidut.UT,utnr[1]) = "Anmärkning   :"
   retvar = 1
   ednum = 1
   ednum3 = LENGTH(edmedd)
   retvar = INDEX(edmedd,CHR(10),ednum)
   edtecken = 48
   edtext = edmedd
   tidtext = "".
   RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[1]),INPUT 1,INPUT ?).
   {ANMARK2.I}   
END PROCEDURE.

PROCEDURE anmark_UI :
       
   DEFINE INPUT PARAMETER anmark AS INTEGER NO-UNDO.
   IF anmark = 2 THEN DO: 
      IF edvar = FALSE THEN DO:      
         ASSIGN            
         /*SUBSTRING(tidut.UT,11) = ":"*/   
         SUBSTRING(tidut.UT,utnr[2]) =  tidtext.
/*          RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?). */
      END.
      ELSE DO:
         ASSIGN                     
         SUBSTRING(tidut.UT,utnr[2]) =  " : " + tidtext.
/*          RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?). */
      END.

      /*GG den 31/1 2006*/
      IF fetstil = TRUE THEN DO: 
         IF SUBSTRING(tidut.UT,1,12) = "            " THEN RUN data_UI (INPUT FALSE,INPUT "A",INPUT totant,INPUT "",INPUT 1,INPUT ?).          
         RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).         
      END.                                                                                                   
      ELSE DO:                                                                                               
         RUN data_UI (INPUT FALSE,INPUT "B",INPUT totant,INPUT SUBSTRING(tidut.UT,utnr[2]),INPUT 1,INPUT ?).         
      END.     


      CREATE tidut.
      ASSIGN
      tant = tant + 1
      extant = extant + 1
      totant = totant + 1.
      RUN tom_UI (INPUT ?).
   END.     
END PROCEDURE.

/* PROCEDURE bryt_UI :                                         */
/*    RUN brytex_UI.                                           */
/*    FIND tidut WHERE ROWID(tidut) = utrow1 NO-LOCK NO-ERROR. */
/*    DELETE tidut.                                            */
/*    ASSIGN                                                   */
/*    kant = kant - 1.                                         */
/*    FIND tidut WHERE ROWID(tidut) = utrow2 NO-LOCK NO-ERROR. */
/*    ASSIGN                                                   */
/*    SUBSTRING(tidut.UT,132) = "$"                            */
/*    tant = kant.                                             */
/*                                                             */
/*                                                             */
/* END PROCEDURE.                                              */

/* PROCEDURE brytex_UI :                                                */
/*    FIND FIRST extemp WHERE extemp.EXROW = utrow[1] NO-LOCK NO-ERROR. */
/*    IF AVAILABLE extemp THEN DO:                                      */
/*       DELETE extemp.                                                 */
/*       exkant = exkant - 1.                                           */
/*    END.                                                              */
/*    FIND FIRST extemp WHERE extemp.EXROW = utrow[2] NO-LOCK NO-ERROR. */
/*    IF AVAILABLE extemp THEN DO:                                      */
/*       ASSIGN SUBSTRING(extemp.DATA,131,1) = "£".                     */
/*    END.                                                              */
/*    extant = exkant.                                                  */
/* END PROCEDURE.                                                       */


PROCEDURE tom_UI :
   DEFINE INPUT PARAMETER exrow AS INTEGER NO-UNDO.
   CREATE extemp.
   ASSIGN 
   extemp.COLVAR = "A" 
   extemp.ROWVAR = totant 
   extemp.DATA = ""
   extemp.FNAME = "COURIER" 
   extemp.FSIZE = 10        
   extemp.FBOLD = FALSE     
   extemp.FHEIGHT = 12      
   extemp.FCOLOR = 0     
   extemp.CHARVAR = FALSE.
   IF exrow NE ? THEN DO:
      ASSIGN 
      extemp.EXROW = ROWID(extemp)
      utrow[exrow] = ROWID(extemp).
   END.
   ELSE DO:
      extemp.EXROW = ?.
   END.

END PROCEDURE.

PROCEDURE data_UI :
   DEFINE INPUT PARAMETER allachar     AS LOGICAL NO-UNDO.   /*Sätt fält med integers som character - vänsterställ*/
   DEFINE INPUT PARAMETER vcolvar      AS CHARACTER NO-UNDO. /*Vilken kolumn*/                                      
   DEFINE INPUT PARAMETER vrowvar      AS INTEGER NO-UNDO.   /*Vilken rad*/                                         
   DEFINE INPUT PARAMETER vdata        AS CHARACTER NO-UNDO. /*Data*/                                               
   DEFINE INPUT PARAMETER fontvar      AS INTEGER NO-UNDO.   /*Font*/                                               
   DEFINE INPUT PARAMETER exrow        AS INTEGER NO-UNDO.   /*Rowid*/                                              
   IF fontvar = 1 THEN DO:
      ASSIGN
      vfontname = "ARIEL"
      vfontsize = 10 
      vfonttype = TRUE 
      vfontheight = 12
      vfontcolor = 11.           
   END.
   ELSE IF fontvar = 2 THEN DO:
      ASSIGN
      vfontname = "COURIER"
      vfontsize = 8 
      vfonttype = FALSE 
      vfontheight = 12
      vfontcolor = 11. 
   END.
   ELSE IF fontvar = 0 THEN DO:
      IF Guru.Konstanter:globforetag = "ELPA" {GLOBVES.I} THEN DO:
         ASSIGN
         vfontname = "COURIER"
         vfontsize = 10 
         vfonttype = FALSE 
         vfontheight = 12
         vfontcolor = 0.
      END.                                     
      ELSE DO:    
         ASSIGN
         vfontname = "COURIER"
         vfontsize = 8 
         vfonttype = FALSE 
         vfontheight = 12
         vfontcolor = 0.     
      END.
   END.
   CREATE extemp.
   ASSIGN 
   extemp.COLVAR = vcolvar
   extemp.ROWVAR = vrowvar 
   extemp.DATA = TRIM(vdata)
   extemp.FNAME = vfontname 
   extemp.FSIZE = vfontsize 
   extemp.FBOLD = vfonttype 
   extemp.FHEIGHT = vfontheight
   extemp.FCOLOR = vfontcolor
   extemp.CHARVAR = allachar.
   IF fontvar = 0 THEN extemp.INGENFONT = FALSE.
   ELSE extemp.INGENFONT = TRUE.
   IF exrow NE ? THEN DO:
      ASSIGN 
      extemp.EXROW = ROWID(extemp)
      utrow[exrow] = ROWID(extemp).
   END.
   ELSE DO:
      extemp.EXROW = ?.
   END. 
END PROCEDURE.

