/*
     Filename: KALKAPP1.P
      Created: 2003.11.26 13:09ELPAO     
     Modified: 
*/
&SCOPED-DEFINE NEW NEW
&SCOPED-DEFINE SHARED SHARED

{GLOBVAR2DEL1.I}



FIND FIRST FORETAG NO-LOCK NO-ERROR.
Guru.Konstanter:globforetag = FORETAG.FORETAG.
RUN STYRFORE.P (INPUT Guru.Konstanter:globforetag).

DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.
DEFINE VARIABLE fbestapph AS HANDLE NO-UNDO.                      /*EXTRATABHMT*/
DEFINE VARIABLE berapph AS HANDLE NO-UNDO.
{SOKDEF.I}
{EXTRATAB.I}
{EXTRADATA.I}

{EBRPRISTEMP.I}
{SEBRPRISTEMP.I}
{KALKSTART.I}
{KALKALLTEMP.I}
{KALKYLTEMP.I}
{EJTEMP.I}
{KALKKATTEMP.I}
{BOLAGSEKSTART.I}

DEFINE TEMP-TABLE extravaldfasttemp NO-UNDO LIKE valdfasttemp.
DEFINE TEMP-TABLE efastkalktemp NO-UNDO LIKE FASTKALK.
{PERSTEMP.I}

/*DEFINE TEMP-TABLE perstemp NO-UNDO
   FIELD PERSONALKOD AS CHARACTER
   FIELD EFTERNAMN AS CHARACTER 
   FIELD FORNAMN AS CHARACTER 
   FIELD OMRADE AS CHARACTER
   FIELD TYP AS CHARACTER
   INDEX PERSONALKOD IS PRIMARY TYP PERSONALKOD.*/

DEFINE TEMP-TABLE kalktemp
   FIELD ARBKOD AS CHARACTER
   FIELD LOPNR AS INTEGER
   FIELD ANTAL AS DECIMAL
   INDEX KOD ARBKOD LOPNR ASCENDING.

DEFINE BUFFER kalkaobuff FOR KALKAONR.
DEFINE BUFFER specbuff FOR FASTSPEC.
DEFINE BUFFER fastbuff FOR FASTKALK.
DEFINE BUFFER fakbuff FOR FAKTOR.
DEFINE BUFFER befbuff FOR KALKBEF.
DEFINE BUFFER mtrlbuff FOR MTRL.
DEFINE BUFFER mtrlbuff2 FOR MTRL.
DEFINE BUFFER kalkspecbuff FOR KALKSPEC.
DEFINE BUFFER kalkbuff FOR KALKYL.
DEFINE BUFFER kalkbefbuff FOR KALKBEF.
DEFINE BUFFER kalkpabuff FOR KALKPASLAG.
DEFINE VARIABLE kopia AS LOGICAL NO-UNDO.
DEFINE VARIABLE kopkalknrvar AS INTEGER NO-UNDO.   
DEFINE VARIABLE arkopia AS INTEGER NO-UNDO.   
DEFINE VARIABLE gamkatar AS INTEGER NO-UNDO.   
DEFINE VARIABLE kopomradevar AS CHARACTER NO-UNDO.   
DEFINE VARIABLE fakvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE mtrlvar AS LOGICAL NO-UNDO.
DEFINE VARIABLE prisvar AS LOGICAL NO-UNDO.   
DEFINE VARIABLE fasttyp AS INTEGER NO-UNDO.   
DEFINE VARIABLE akod AS CHARACTER NO-UNDO.
DEFINE VARIABLE lnr AS INTEGER NO-UNDO.

FIND FIRST FORETAG  NO-LOCK NO-ERROR.
Guru.Konstanter:globforetag = FORETAG.FORETAG.

PROCEDURE anvglob_UI :
   DEFINE INPUT PARAMETER anvglob AS CHARACTER NO-UNDO.
   /*Guru.Konstanter:globanv = anvglob.*/
END PROCEDURE.

/****************************** KALKALL.W -> MENYKALK.W Procedurer ***************************/
PROCEDURE hamtakalkansv_UI: /* Tidigare KALKSTART.P */
   DEFINE OUTPUT PARAMETER TABLE FOR kalkansv.
   EMPTY TEMP-TABLE kalkansv NO-ERROR. 
   FOR EACH PERSONALTAB NO-LOCK:
      CREATE kalkansv.
      ASSIGN
      kalkansv.PERSONALKOD = PERSONALTAB.PERSONALKOD
      kalkansv.NAMN = PERSONALTAB.EFTERNAMN + " " + PERSONALTAB.FORNAMN.
      kalkansv.OMRADE = PERSONALTAB.OMRADE.
      Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + PERSONALTAB.PERSONALKOD.                       
   END.
   
   {GDPRLOGGCLIENT.I}
END PROCEDURE.

PROCEDURE sparakalkat_UI: 
   DEFINE INPUT PARAMETER TABLE FOR ekalkkattemp.
   FOR EACH ekalkkattemp:  
      DO TRANSACTION:
         FIND FIRST KALKKATEGORI WHERE KALKKATEGORI.TYP = ekalkkattemp.TYP AND KALKKATEGORI.NAMN = ekalkkattemp.NAMN EXCLUSIVE-LOCK NO-ERROR.
         IF NOT AVAILABLE KALKKATEGORI THEN CREATE KALKKATEGORI.      
         BUFFER-COPY ekalkkattemp TO KALKKATEGORI.
      END.
   END.
   RELEASE KALKKATEGORI NO-ERROR. 
END PROCEDURE.
PROCEDURE bortkalkkat_UI: 
   DEFINE INPUT PARAMETER TABLE FOR ekalkkattemp.
   FOR EACH ekalkkattemp:  
      DO TRANSACTION:
         FIND FIRST KALKKATEGORI WHERE KALKKATEGORI.TYP = ekalkkattemp.TYP AND KALKKATEGORI.NAMN = ekalkkattemp.NAMN EXCLUSIVE-LOCK NO-ERROR.
         IF AVAILABLE KALKKATEGORI THEN DELETE KALKKATEGORI.      
      END.    
   END.
END PROCEDURE.

PROCEDURE hamtakalkkat_UI: 
   DEFINE OUTPUT PARAMETER TABLE FOR kalkkattemp.
   DEFINE OUTPUT PARAMETER TABLE FOR kalkkattyptemp.
   DEFINE VARIABLE hj AS INTEGER NO-UNDO.
   hj = 0.
   EMPTY TEMP-TABLE kalkkattyptemp NO-ERROR. 
   EMPTY TEMP-TABLE kalkkattemp NO-ERROR.
   DO TRANSACTION:
      FIND FIRST KALKTYP WHERE NO-LOCK NO-ERROR.
      IF NOT AVAILABLE KALKTYP THEN DO:
         CREATE KALKTYP.
         ASSIGN
         KALKTYP.TYP = "PERS"
         KALKTYP.RUBRIK = "PERSONAL".
         CREATE KALKTYP.
         ASSIGN
         KALKTYP.TYP = "MATRL"
         KALKTYP.RUBRIK = "MATERIEL".
   
      END.
      FOR EACH KALKTYP NO-LOCK:
         CREATE kalkkattyptemp.
         BUFFER-COPY KALKTYP TO kalkkattyptemp.      
      END.
      FOR EACH kalkkattyptemp:
         FIND FIRST KALKKATEGORI WHERE KALKKATEGORI.TYP = kalkkattyptemp.TYP NO-LOCK NO-ERROR.
         IF NOT AVAILABLE KALKKATEGORI THEN DO:
            CREATE KALKKATEGORI.
            ASSIGN
            KALKKATEGORI.NAMN = kalkkattyptemp.RUBRIK
            KALKKATEGORI.TYP = kalkkattyptemp.TYP
            KALKKATEGORI.VINAMN = kalkkattyptemp.RUBRIK
            KALKKATEGORI.RADNR = 100.
         END.
      END.
      FOR EACH KALKKATEGORI NO-LOCK:
         CREATE kalkkattemp.
         BUFFER-COPY KALKKATEGORI TO kalkkattemp. 
      END.
   END.
   RELEASE KALKKATEGORI NO-ERROR.
   RELEASE KALKTYP NO-ERROR.
END PROCEDURE.


/************************* NYFKALK.W -> KALKHUV.W  SOKPROG.P - Procedurer *********************/



PROCEDURE beredningkoll_UI: /* 35 */
   DEFINE INPUT PARAMETER aonrvar AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER delnrvar AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER kalklog AS LOGICAL NO-UNDO.
   FIND FIRST BEREDNING WHERE BEREDNING.AONR = aonrvar AND BEREDNING.DELNR = delnrvar
   USE-INDEX AONR NO-LOCK NO-ERROR.
   IF AVAILABLE BEREDNING THEN kalklog = BEREDNING.KALK.  
   ELSE kalklog = FALSE.
END PROCEDURE.

PROCEDURE hamtaplannrinfo_UI: /* 37 */
   DEFINE INPUT PARAMETER plannrvar AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER artalvar AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER uppvar AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER uppnrvar AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER fastkalkvar AS LOGICAL NO-UNDO.
   FIND FIRST PLANNRTAB WHERE PLANNRTAB.PLANNR = plannrvar AND PLANNRTAB.ARTAL = artalvar NO-LOCK NO-ERROR.
   ASSIGN 
   uppvar = PLANNRTAB.UPP 
   uppnrvar = PLANNRTAB.UPPNR
   fastkalkvar = PLANNRTAB.FASTKALK.   
END PROCEDURE.


PROCEDURE kalkar_UI :
   DEFINE INPUT PARAMETER knr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER katlognr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER kar AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER vkar AS INTEGER NO-UNDO.
END PROCEDURE.


PROCEDURE ebrpris_UI: /* 40 */
   DEFINE OUTPUT PARAMETER ebrartal AS INTEGER NO-UNDO.
   /*kalkår*/
   FIND LAST EBRPRIS USE-INDEX AR NO-LOCK NO-ERROR.
   ebrartal = EBRPRIS.ARTAL.   
END PROCEDURE.



PROCEDURE kalkfor_UI: /* 42 */
   DEFINE INPUT PARAMETER kalknrvar AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER kalkforvar AS INTEGER NO-UNDO.

   FIND FIRST KALKFOR WHERE KALKFOR.KALKNR = kalknrvar NO-LOCK NO-ERROR.
   IF AVAILABLE KALKFOR THEN kalkforvar = 1.
   ELSE kalkforvar = 0.
END PROCEDURE.




/******************************************* KALKHUV.W *******************************************************/

PROCEDURE laddaperstemp_UI:
   DEFINE OUTPUT PARAMETER TABLE FOR perstemp.   
   
   EMPTY TEMP-TABLE perstemp NO-ERROR. 
   FOR EACH PERSONALTAB WHERE PERSONALTAB.PERSMASK = TRUE NO-LOCK:
      CREATE perstemp.
      BUFFER-COPY PERSONALTAB TO perstemp.
      Guru.GlobalaVariabler:GDPRvem = Guru.GlobalaVariabler:GDPRvem + "," + PERSONALTAB.PERSONALKOD.
   END.
   {GDPRLOGGCLIENT.I}
END PROCEDURE.

PROCEDURE laddaanv_UI:
   DEFINE INPUT PARAMETER anvvar AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER persvar AS CHARACTER NO-UNDO.
   persvar = "".
   FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = anvvar USE-INDEX ANDV NO-LOCK NO-ERROR.
   IF AVAILABLE ANVANDARE THEN persvar = ANVANDARE.PERSONALKOD.
END PROCEDURE.

PROCEDURE omradekoll_UI:
   DEFINE INPUT PARAMETER omradevar AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER tempvar AS INTEGER NO-UNDO.
   DEFINE VARIABLE felkoll AS LOGICAL NO-UNDO.
   DEBUGGER:SET-BREAK().
   FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = omradevar USE-INDEX OMR NO-LOCK NO-ERROR.
   IF NOT AVAILABLE OMRADETAB THEN FIND FIRST OMRADETAB USE-INDEX OMR NO-LOCK NO-ERROR.
   IF OMRADETAB.KALKYLINT2 < OMRADETAB.KALKYLSIST OR OMRADETAB.KALKYLINT1 = OMRADETAB.KALKYLINT2 THEN DO:
      tempvar = ?.     
      RETURN.
   END.
   ELSE tempvar = OMRADETAB.KALKYLSIST. 
   RUN kalksista_UI (INPUT-OUTPUT tempvar).
   RELEASE OMRADETAB NO-ERROR.
END PROCEDURE.

{KALKSISTA.I}

PROCEDURE laddaomk_UI:
   DEFINE INPUT PARAMETER omradevar AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER omkmtrvar AS DECIMAL NO-UNDO.
   DEFINE OUTPUT PARAMETER omkostpvar AS DECIMAL NO-UNDO.
   /*CCCC*/
   FIND FIRST OMRADETAB WHERE OMRADETAB.OMRADE = omradevar USE-INDEX OMR NO-LOCK NO-ERROR.
   IF AVAILABLE OMRADETAB THEN DO:
      ASSIGN
      omkmtrvar = OMRADETAB.OMKMTR 
      omkostpvar = OMRADETAB.OMKOSTP.
   END.
END PROCEDURE.



 




/****************************** MENYKALK.W Procedurer ***************************/


PROCEDURE laddaebrpristemp_UI:
   DEFINE OUTPUT PARAMETER TABLE FOR ebrpristemp.
   EMPTY TEMP-TABLE ebrpristemp NO-ERROR. 
    
      FOR EACH EBRPRIS:
         CREATE ebrpristemp.
         BUFFER-COPY EBRPRIS TO ebrpristemp.
      END.   
   
END PROCEDURE.

PROCEDURE omradecheck_UI:
   DEFINE INPUT PARAMETER vartifran AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER aonrplanr AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER delnrartal AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER omradevar AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER benamning AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER bestallarvar AS CHARACTER NO-UNDO.

   IF vartifran = 2 OR vartifran = 22 THEN DO:
      FIND FIRST AONRTAB WHERE AONRTAB.AONR = aonrplanr AND
          AONRTAB.DELNR = delnrartal NO-LOCK NO-ERROR.
      IF AVAILABLE AONRTAB THEN DO: 
         ASSIGN
         omradevar = AONRTAB.OMRADE
         benamning = AONRTAB.ORT
         bestallarvar = AONRTAB.BESTID.
      END.
   END.
   ELSE IF vartifran = 3 THEN DO:
      FIND FIRST PLANNRTAB WHERE PLANNRTAB.PLANNR = aonrplanr AND
          PLANNRTAB.ARTAL = delnrartal NO-LOCK NO-ERROR.
      IF AVAILABLE PLANNRTAB THEN DO: 
         ASSIGN
         omradevar = PLANNRTAB.OMRADE
         benamning = PLANNRTAB.ORT
         bestallarvar = PLANNRTAB.BESTID.
      END.
   END.
END PROCEDURE.


PROCEDURE koll_UI:
   DEFINE INPUT PARAMETER kalkvar AS INTEGER NO-UNDO.
   
   DO TRANSACTION:
      FIND FIRST KALKAONR WHERE KALKAONR.KALKNR = kalkvar EXCLUSIVE-LOCK NO-ERROR.
      IF KALKAONR.AONR NE ? THEN DO:
         FIND FIRST kalkaobuff WHERE kalkaobuff.AONR = KALKAONR.AONR AND
         kalkaobuff.DELNR = KALKAONR.DELNR AND kalkaobuff.STATUSNIV = "UF"
         AND RECID(kalkaobuff) NE RECID(KALKAONR) NO-LOCK NO-ERROR. 
      END.
      ELSE IF KALKAONR.PLANNR NE ? THEN DO:
         FIND FIRST kalkaobuff WHERE kalkaobuff.PLANNR = KALKAONR.PLANNR AND
         kalkaobuff.ARTAL = KALKAONR.ARTAL AND kalkaobuff.STATUSNIV = "UF"
         AND RECID(kalkaobuff) NE RECID(KALKAONR) NO-LOCK NO-ERROR. 
      END.
      IF AVAILABLE kalkaobuff THEN DO:
         IF  kalkaobuff.TYP NE KALKAONR.TYP THEN DO:
            IF KALKAONR.AONR NE ? THEN DO:
               FIND FIRST kalkaobuff WHERE kalkaobuff.AONR = KALKAONR.AONR AND
               kalkaobuff.DELNR = KALKAONR.DELNR AND kalkaobuff.STATUSNIV = "HUV"
               AND kalkaobuff.TYP = KALKAONR.TYP AND RECID(kalkaobuff) NE RECID(KALKAONR)
               NO-LOCK NO-ERROR. 
            END.
            ELSE DO:
               FIND FIRST kalkaobuff WHERE kalkaobuff.PLANNR = KALKAONR.PLANNR AND
               kalkaobuff.ARTAL = KALKAONR.ARTAL AND kalkaobuff.STATUSNIV = "HUV"
               AND kalkaobuff.TYP = KALKAONR.TYP AND RECID(kalkaobuff) NE RECID(KALKAONR)
               NO-LOCK NO-ERROR. 
            END.
            IF AVAILABLE kalkaobuff THEN DO:
               KALKAONR.STATUSNIV = "ALT".
            END.
            ELSE DO:
               KALKAONR.STATUSNIV = "HUV".
            END.
         END.
         ELSE KALKAONR.STATUSNIV = "ALT".
      END.
      ELSE DO:
         KALKAONR.STATUSNIV = "UF".
      END.
   END. 
   IF AVAILABLE KALKAONR THEN RELEASE KALKAONR.
END PROCEDURE.




/************************************* FRISUM.P *************************************/


PROCEDURE laddakalkyl_UI:
   DEFINE INPUT PARAMETER kalknrvar AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR kalkyltemp.

   EMPTY TEMP-TABLE kalkyltemp NO-ERROR. 
   FOR EACH KALKYL WHERE KALKYL.RECKALKYL = kalknrvar NO-LOCK:
      CREATE kalkyltemp.
      BUFFER-COPY KALKYL TO kalkyltemp.
   END.
END PROCEDURE.


   


