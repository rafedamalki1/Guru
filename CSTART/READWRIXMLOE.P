/*READWRIXMLOE.P
EXCEL-XML
1. DEFINERA EN TEMP-TABLE I PROGRESS. EFTER DE KOLUMNER DU HAR I EXCEL
2. DEFINERA ETT PRODATASET.
3. SKAPA EN XSD FIL AV PRODASET ELLER EN XML FIL
4. UTVECKLARE XML KÄLLA XML-MAPPNING LÄGG TILL DIN XSD ELLER XML FIL
5. KOLUMN MOT RUBRIK OBS LÄGG RUBRIKEN PÅ FÖRSTA RADEN SOM SKA VARA TOM
6. TRYCK PÅ EXPORT

SKAPA ETT XML SCHEMA 

DEFINE VARIABLE cTargetType     AS CHARACTER NO-UNDO.
DEFINE VARIABLE cFile           AS CHARACTER NO-UNDO.
DEFINE VARIABLE lFormatted      AS LOGICAL   NO-UNDO.
DEFINE VARIABLE cEncoding       AS CHARACTER NO-UNDO.
DEFINE VARIABLE cSchemaLocation AS CHARACTER NO-UNDO.
DEFINE VARIABLE lWriteSchema    AS LOGICAL   NO-UNDO.
DEFINE VARIABLE lMinSchema      AS LOGICAL   NO-UNDO.
DEFINE VARIABLE lRetOK          AS LOGICAL   NO-UNDO.


DEFINE TEMP-TABLE mtr500tt NO-UNDO
  FIELD ENR AS CHARACTER
  FIELD BEN AS CHARACTER
  FIELD ENH AS CHARACTER
  FIELD LEVKOD AS CHARACTER
  INDEX ENR LEVKOD ENR.


DEFINE DATASET mtr500ttDS FOR mtr500tt. 
  
  
/*
WRITE-XMLSCHEMA
*/
ASSIGN 
cTargetType    =  "FILE"
cFile           = "C:\PROTEMP11\mtrl500.XSD"
lFormatted      = TRUE
cEncoding       = "iso8859-1"
lWriteSchema = TRUE 
lMinSchema = TRUE.
lRetOK = DATASET  mtr500ttDS:WRITE-XMLSCHEMA(cTargetType, cFile, lFormatted,  cEncoding, lMinSchema).


ELLER WRITE-XML
cFile = "C:\PROTEMP11\mtrl500.XML"
CREATE mtr500tt.
CREATE mtr500tt.
DATASET  mtr500ttDS:WRITE-XML(cTargetType,cFile,lFormatted,cEncoding).


<?xml version="1.0" encoding="iso8859-1"?>
<mtr500ttDS xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<mtr500tt><ENR/>
<BEN/>
<ENH/>
<LEVKOD/>
</mtr500tt>
<mtr500tt>
<ENR/>
<BEN/>
<ENH/>
<LEVKOD/>
</mtr500tt>
</mtr500ttDS>




CREATE mtr500tt.
CREATE mtr500tt.
DATASET  mtr500ttDS:WRITE-XML("FILE", "C:\PROTEMP11\mtrl500.XML",FALSE,"iso8859-1").
DATASET mtr500ttDS:READ-XML ("FILE", "d:\elpool\delad\pro9s\mtrl500.XML", "MERGE", ?,False).

*/



PROCEDURE readxml_UI :

   DEFINE INPUT-OUTPUT PARAMETER hPDS AS HANDLE NO-UNDO.
   DEFINE INPUT  PARAMETER cSourceType AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER cFile AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER cReadMode AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER cSchemaLocation AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER lOverrideDefaultMapping AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER lReturn AS LOGICAL NO-UNDO.
   
   lReturn = hPDS:READ-XML (cSourceType, cFile, cReadMode,cSchemaLocation, lOverrideDefaultMapping).
END PROCEDURE. 
PROCEDURE readxmlmem_UI :
   DEFINE INPUT-OUTPUT PARAMETER hPDS AS HANDLE NO-UNDO.
   DEFINE INPUT  PARAMETER cFilelong AS MEMPTR  NO-UNDO.
   DEFINE INPUT  PARAMETER cReadMode AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER cSchemaLocation AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER lOverrideDefaultMapping AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER lReturn AS LOGICAL NO-UNDO.
   lReturn = hPDS:READ-XML ("MEMPTR", cFilelong, cReadMode,cSchemaLocation, lOverrideDefaultMapping).
END PROCEDURE. 
PROCEDURE writexml_UI :            
   DEFINE INPUT  PARAMETER hPDS AS HANDLE NO-UNDO.
   DEFINE INPUT  PARAMETER cTargetType AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER cFile AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER cEncoding AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER cSchemaLocation AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER lFormatted AS LOGICAL NO-UNDO.
   DEFINE INPUT  PARAMETER lWriteSchema AS LOGICAL NO-UNDO.
   DEFINE INPUT  PARAMETER lMinSchema AS LOGICAL NO-UNDO.
   DEFINE INPUT  PARAMETER lWriteBeforeImage AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER lReturn AS LOGICAL NO-UNDO.
   lReturn = hPDS:WRITE-XML(cTargetType, cFile,lFormatted,cEncoding, cSchemaLocation,lWriteSchema, lMinSchema, lWriteBeforeImage).
   
END PROCEDURE.

PROCEDURE writexmlomini_UI :            
   DEFINE INPUT  PARAMETER hPDS AS HANDLE NO-UNDO.
   DEFINE INPUT  PARAMETER cTargetType AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER cFile AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER cEncoding AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER cSchemaLocation AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER lFormatted AS LOGICAL NO-UNDO.
   DEFINE INPUT  PARAMETER lWriteSchema AS LOGICAL NO-UNDO.
   DEFINE INPUT  PARAMETER lMinSchema AS LOGICAL NO-UNDO.
   DEFINE INPUT  PARAMETER lWriteBeforeImage AS LOGICAL NO-UNDO.
   DEFINE INPUT  PARAMETER omit-initial AS LOGICAL NO-UNDO.
   DEFINE OUTPUT PARAMETER lReturn AS LOGICAL NO-UNDO.

   lReturn = hPDS:WRITE-XML(cTargetType, cFile, lFormatted,cEncoding,cSchemaLocation,lWriteSchema,lMinSchema,lWriteBeforeImage, omit-initial).
   
END PROCEDURE.

/*
kalkylds
OUTPUT DATASET-HANDLE BerKalkDS BIND,
       OUTPUT DATASET-HANDLE BerValDS BIND,
       OUTPUT DATASET-HANDLE BerMtrlDS BIND,
       OUTPUT DATASET-HANDLE HdSchaktDS BIND).
*/

PROCEDURE writexmllong_UI :            
   DEFINE INPUT  PARAMETER DATASET-HANDLE wDS BIND. 
   DEFINE OUTPUT PARAMETER utfillong AS LONGCHAR NO-UNDO.
   
   DEFINE VARIABLE lFormatted      AS LOGICAL   NO-UNDO.
   DEFINE VARIABLE cEncoding       AS CHARACTER NO-UNDO.
   DEFINE VARIABLE cSchemaLocation AS CHARACTER NO-UNDO.
   DEFINE VARIABLE lWriteSchema    AS LOGICAL   NO-UNDO.
   DEFINE VARIABLE lMinSchema      AS LOGICAL   NO-UNDO.
   DEFINE VARIABLE lWriteBeforeImage   AS LOGICAL   NO-UNDO.
   DEFINE VARIABLE lReturn AS LOGICAL NO-UNDO.
   DEFINE VARIABLE cTargetType     AS CHARACTER NO-UNDO.
   ASSIGN 
   cTargetType       = "LONGCHAR"  
   lFormatted        = true
   cEncoding         = "utf-8"
   cSchemaLocation   = ?
   lWriteSchema      = FALSE
   lMinSchema        = FALSE
   lWriteBeforeImage = FALSE.
   wDS:WRITE-XML(cTargetType, utfillong,lFormatted,cEncoding, cSchemaLocation,lWriteSchema, lMinSchema, lWriteBeforeImage).
   
END PROCEDURE.

PROCEDURE WritexmlDS_UI :
   DEFINE INPUT  PARAMETER cfile AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER lWriteSchema AS LOGICAL NO-UNDO.
   DEFINE INPUT  PARAMETER DATASET-HANDLE wDS BIND. 
   DEFINE VARIABLE cTargetType     AS CHARACTER NO-UNDO.
   DEFINE VARIABLE lFormatted      AS LOGICAL   NO-UNDO.
   DEFINE VARIABLE cEncoding       AS CHARACTER NO-UNDO.
   DEFINE VARIABLE cSchemaLocation AS CHARACTER NO-UNDO.
   DEFINE VARIABLE jsonfile AS CHARACTER NO-UNDO.
/*
   DEFINE VARIABLE lWriteSchema    AS LOGICAL   NO-UNDO.
  */
   DEFINE VARIABLE lMinSchema      AS LOGICAL   NO-UNDO.
   DEFINE VARIABLE lWriteBeforeImage   AS LOGICAL   NO-UNDO.
   DEFINE VARIABLE dResult AS System.Windows.Forms.DialogResult NO-UNDO.
      
   ASSIGN
   cTargetType       = "FILE"
   lFormatted        = yes
   cEncoding         = "utf-8"
   cSchemaLocation   = ?
  /* lWriteSchema      = TRUE*/
   lMinSchema        = TRUE
   lWriteBeforeImage = FALSE.
   jsonfile = REPLACE(cFile,".xml",".json").
   wDS:WRITE-XML (cTargetType, cFile, lFormatted, cEncoding, cSchemaLocation, lWriteSchema, lMinSchema, lWriteBeforeImage).
  /*
   MESSAGE cTargetType jsonfile
   VIEW-AS ALERT-BOX.
   wDS:WRITE-JSON (cTargetType, jsonfile , TRUE). 
   */
END PROCEDURE.
PROCEDURE WritexmlDSNoSchema_UI :
   DEFINE INPUT  PARAMETER cfile AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER DATASET-HANDLE wDS BIND. 
   DEFINE VARIABLE cTargetType     AS CHARACTER NO-UNDO.
   DEFINE VARIABLE lFormatted      AS LOGICAL   NO-UNDO.
   DEFINE VARIABLE cEncoding       AS CHARACTER NO-UNDO.
   DEFINE VARIABLE cSchemaLocation AS CHARACTER NO-UNDO.
   DEFINE VARIABLE lWriteSchema    AS LOGICAL   NO-UNDO.
   DEFINE VARIABLE lMinSchema      AS LOGICAL   NO-UNDO.
   DEFINE VARIABLE lWriteBeforeImage   AS LOGICAL   NO-UNDO.
   DEFINE VARIABLE dResult AS System.Windows.Forms.DialogResult NO-UNDO.
      
   ASSIGN
   cTargetType       = "FILE"
   lFormatted        = no
   cEncoding         = ?
   cSchemaLocation   = ?
   lWriteSchema      = FALSE 
   lMinSchema        = FALSE
   lWriteBeforeImage = FALSE.
   wDS:WRITE-XML (cTargetType, cFile, lFormatted, cEncoding, cSchemaLocation, lWriteSchema, lMinSchema, lWriteBeforeImage). 
   
   
END PROCEDURE.
PROCEDURE ReadxmlDS_UI :
   DEFINE INPUT  PARAMETER cfile AS CHARACTER NO-UNDO.
   DEFINE INPUT-OUTPUT  PARAMETER DATASET-HANDLE wDSh BIND. 
   DEFINE VARIABLE cTargetType     AS CHARACTER NO-UNDO.
   DEFINE VARIABLE lFormatted      AS LOGICAL   NO-UNDO.
   DEFINE VARIABLE cEncoding       AS CHARACTER NO-UNDO.
   DEFINE VARIABLE cSchemaLocation AS CHARACTER NO-UNDO.
   DEFINE VARIABLE lWriteSchema    AS LOGICAL   NO-UNDO.
   DEFINE VARIABLE lMinSchema      AS LOGICAL   NO-UNDO.
   DEFINE VARIABLE lWriteBeforeImage   AS LOGICAL   NO-UNDO.
   DEFINE VARIABLE dResult AS System.Windows.Forms.DialogResult NO-UNDO.
   
   ASSIGN
   cTargetType       = "FILE"
   lFormatted        = NO
   cEncoding         = ?
   cSchemaLocation   = ?
   lWriteSchema      = no
   lMinSchema        = FALSE
   lWriteBeforeImage = FALSE.
   wDSh:READ-XML(cTargetType, cfile, "EMPTY",cSchemaLocation,False).
   
       
END PROCEDURE.
/*EX
{VARXMLDYNOE10.I}
DEFINE DATASET xmldataread XML-NODE-NAME "BODY" FOR OrderResponse,OrderResponseHeader,OrderResponseNumber,OrderReference,Reference.
hPDS = DATASET xmldataread:HANDLE.



ASSIGN
cSourceType = "FILE"
cFile = "c:\protemp10\elpao\ORDRESP.xml"
cReadMode = "EMPTY"
cSchemaLocation = ?
lOverrideDefaultMapping = NO.
IF VALID-HANDLE(dynxmlOE10) THEN RUN readxml_UI IN dynxmlOE10 (INPUT-OUTPUT hPDS,INPUT cSourceType,INPUT cFile,
                          INPUT cReadMode,INPUT cSchemaLocation,INPUT lOverrideDefaultMapping, 
                           OUTPUT lReturn).
                

IF lReturn = FALSE THEN DO:
   MESSAGE "Fel!"    VIEW-AS ALERT-BOX.
   IF VALID-HANDLE(dynxmlOE10) THEN DELETE PROCEDURE dynxmlOE10.
   RETURN.
END.   


DEFINE DATASET xmldatawrite XML-NODE-NAME "BODY" FOR OrderResponsebuff,OrderResponseHeaderbuff,OrderResponseNumberbuff,OrderReferencebuff,Referencebuff.
hPDS = DATASET xmldatawrite:HANDLE.


ASSIGN
cTargetType = "FILE"
cFile = "c:\protemp10\elpao\UTORDRESP.xml"
lFormatted = false
cEncoding = ?
cSchemaLocation = ?
lWriteSchema = FALSE
lMinSchema = FALSE
lWriteBeforeImage = FALSE.
      
IF VALID-HANDLE(dynxmlOE10) THEN RUN writexml_UI IN dynxmlOE10 (INPUT hPDS,INPUT cTargetType,INPUT cFile,INPUT cEncoding,
                           INPUT cSchemaLocation,INPUT lFormatted,INPUT lWriteSchema,INPUT lMinSchema,
                           INPUT lWriteBeforeImage,OUTPUT lReturn).
                

IF lReturn = FALSE THEN DO:
   MESSAGE "Fel skriv!"    VIEW-AS ALERT-BOX.
   IF VALID-HANDLE(dynxmlOE10) THEN DELETE PROCEDURE dynxmlOE10.
   RETURN.
END.   
IF VALID-HANDLE(dynxmlOE10) THEN DELETE PROCEDURE dynxmlOE10.
*/
