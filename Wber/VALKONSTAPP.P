/*VALKONSTAPP.P*/
{SCADMIN.I}
{KONVALTEMP.I}
{STARTFORAPP.I}
{BEREDNINGTEMP.I}
{BERMTRL.I}
{BERIDTEMP.I}
{KONID.I}
{FRITEMP.I}
DEFINE VARIABLE valaonr AS CHARACTER NO-UNDO.
DEFINE VARIABLE valdelnr AS INTEGER NO-UNDO.
DEFINE VARIABLE valomrade AS CHARACTER NO-UNDO.


PROCEDURE lkon_val_UI :
   DEFINE INPUT PARAMETER valaonr2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valdelnr2 AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER kbename AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR kon_val.
   DEFINE OUTPUT PARAMETER TABLE FOR hdschakttemp.
   EMPTY TEMP-TABLE kon_val NO-ERROR.
   EMPTY TEMP-TABLE hdschakttemp NO-ERROR. 
   
   FIND FIRST BEREDNING WHERE BEREDNING.AONR = valaonr2 AND
   BEREDNING.DELNR = valdelnr2 USE-INDEX BERNR NO-LOCK NO-ERROR. 
   kbename = BEREDNING.BENAMNING.
   FOR EACH BERVAL WHERE BERVAL.AONR = STRING(BEREDNING.BERNR) AND BERVAL.OMRADE = BEREDNING.OMRADE 
   AND BERVAL.KSKAP = FALSE NO-LOCK:
      CREATE kon_val.
      BUFFER-COPY BERVAL TO kon_val.
      ASSIGN
      kon_val.BERAONR = BERVAL.AONR
      kon_val.GRUPP = BERVAL.KONSKOD 
      kon_val.F1 = BERVAL.KTYPKOD.
   END.
   FOR EACH HDSCHAKT WHERE HDSCHAKT.BERNR = BEREDNING.BERNR AND HDSCHAKT.OMRADE = BEREDNING.OMRADE NO-LOCK:
      CREATE hdschakttemp.
      BUFFER-COPY HDSCHAKT TO hdschakttemp.
   END.
   FOR EACH kon_val  WHERE NO-LOCK:
      FIND FIRST  BERID WHERE BERID.AONR =  kon_val.BERAONR AND BERID.OMRADE = kon_val.OMRADE AND BERID.NUM = kon_val.NUM NO-LOCK NO-ERROR.
      IF AVAILABLE BERID THEN DO:
         kon_val.EXTRA1 = (BERID.FRI3).          
         kon_val.ID2 = STRING(BERID.FRI2).
         kon_val.ID1 = STRING(BERID.FRI1).
      END.
      FIND FIRST BERORD WHERE BERORD.AONR =  kon_val.BERAONR AND BERORD.OMRADE = kon_val.OMRADE AND BERORD.NUM = kon_val.NUM NO-LOCK NO-ERROR.
      IF AVAILABLE BERORD THEN DO: 
         kon_val.ord = BERORD.ORD. 
      END.     
   END.
   
END PROCEDURE.
PROCEDURE ladda_UI : 
   DEFINE INPUT PARAMETER valaonr2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade2 AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER kalkrow99 AS ROWID NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR beredningtemp.
   DEFINE OUTPUT PARAMETER TABLE FOR bermtrltemp.
   EMPTY TEMP-TABLE beredningtemp NO-ERROR. 
   EMPTY TEMP-TABLE bermtrltemp NO-ERROR. 
   ASSIGN
   valaonr = valaonr2
   valomrade = valomrade2.

   FIND FIRST BEREDNING WHERE BEREDNING.BERNR = INTEGER(valaonr) AND
   BEREDNING.OMRADE = valomrade USE-INDEX BERNR NO-LOCK NO-ERROR.
   IF AVAILABLE BEREDNING THEN DO:
      CREATE beredningtemp.
      BUFFER-COPY BEREDNING TO beredningtemp.
      ASSIGN 
      kalkrow99 = ROWID(BEREDNING).
   END.
   FIND LAST BERMTRL WHERE BERMTRL.AONR = valaonr AND 
   BERMTRL.OMRADE = valomrade AND BERMTRL.INKOP = FALSE 
   USE-INDEX DATUM NO-LOCK NO-ERROR.
   IF AVAILABLE BERMTRL THEN DO:
      CREATE bermtrltemp.
      BUFFER-COPY BERMTRL TO bermtrltemp.
   END.
   RETURN.
END PROCEDURE.

PROCEDURE laddaberid_UI :
   DEFINE INPUT PARAMETER beraonrvar AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER omradevar AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR beridtemp.
   EMPTY TEMP-TABLE beridtemp NO-ERROR. 
   OPEN QUERY idq FOR EACH BERID WHERE BERID.AONR = beraonrvar AND 
   BERID.OMRADE = omradevar NO-LOCK.
   GET FIRST idq NO-LOCK.
   DO WHILE AVAILABLE(BERID):
      CREATE beridtemp.
      BUFFER-COPY BERID TO beridtemp.
      GET NEXT idq NO-LOCK.
   END.
   CLOSE QUERY idq.
   RETURN.
END PROCEDURE.


PROCEDURE laddaberidnum_UI :
   DEFINE INPUT PARAMETER beraonrvar AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER omradevar AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER numvar AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR beridtemp.
   DEFINE OUTPUT PARAMETER TABLE FOR eberid2temp.
   EMPTY TEMP-TABLE beridtemp NO-ERROR. 
   EMPTY TEMP-TABLE eberid2temp NO-ERROR. 
   OPEN QUERY idq FOR EACH BERID WHERE BERID.AONR = beraonrvar AND 
   BERID.OMRADE = omradevar AND BERID.NUM = numvar NO-LOCK.
   GET FIRST idq NO-LOCK.
   DO WHILE AVAILABLE(BERID):
      CREATE beridtemp.
      BUFFER-COPY BERID TO beridtemp.
      GET NEXT idq NO-LOCK.
   END.
   CLOSE QUERY idq.
   FOR EACH BERID2 WHERE BERID2.AONR = beraonrvar AND 
   BERID2.OMRADE = omradevar AND BERID2.NUM = numvar NO-LOCK:
      CREATE eberid2temp.
      BUFFER-COPY BERID2 TO eberid2temp.
   END.
   RETURN.
END PROCEDURE.
PROCEDURE laddabfrikort_UI :
   DEFINE INPUT PARAMETER beraonrvar AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER omradevar AS CHARACTER NO-UNDO.
   DEFINE INPUT  PARAMETER numvar AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR fri_temp.
   EMPTY TEMP-TABLE fri_temp NO-ERROR.
   OPEN QUERY fkq FOR EACH FRIKORT WHERE FRIKORT.AONR = beraonrvar AND 
   FRIKORT.OMRADE = omradevar AND FRIKORT.NUM = numvar NO-LOCK.
   GET FIRST fkq NO-LOCK.
   DO WHILE AVAILABLE(FRIKORT):
      CREATE fri_temp.
      BUFFER-COPY FRIKORT TO fri_temp.
      GET NEXT fkq NO-LOCK.
   END.
   CLOSE QUERY fkq.
  
END PROCEDURE.
PROCEDURE laddaberval_UI :
   DEFINE INPUT PARAMETER beraonrvar AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER omradevar AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER numvar AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER ktypkodvar AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER bernumvar AS INTEGER NO-UNDO.
   ASSIGN
   ktypkodvar = ""
   bernumvar = 0.
   FIND FIRST BERVAL WHERE BERVAL.AONR = beraonrvar AND
   BERVAL.OMRADE = omradevar AND BERVAL.NUM = numvar NO-LOCK NO-ERROR.
   IF AVAILABLE BERVAL THEN DO:
      ASSIGN 
      ktypkodvar = BERVAL.KTYPKOD
      bernumvar = BERVAL.NUM.
   END.
   RETURN.

END PROCEDURE.

PROCEDURE berhmt_UI :
   DEFINE INPUT PARAMETER valaonr2 AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER valomrade2 AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR beredningtemp.
   EMPTY TEMP-TABLE beredningtemp NO-ERROR. 
   FIND FIRST BEREDNING WHERE BEREDNING.BERNR = INTEGER(valaonr2) AND
   BEREDNING.OMRADE = valomrade2 USE-INDEX BERNR NO-LOCK NO-ERROR.
   IF AVAILABLE BEREDNING THEN DO:
      CREATE beredningtemp.
      BUFFER-COPY BEREDNING TO beredningtemp.
   END.

END PROCEDURE.
