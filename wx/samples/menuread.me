/* menuread.me
   
   Per Ekman 93-08-19.
   
   
   This document describes how to use the programs menucre.p,
   menusens.p and menuhndl.p to create and manipulate dynamic
   menus (both menu-bars and popup-menus).
   
   One advantage with dynamic menus is that you can dramatically
   simplify the menu creation.
   An other advantage is that you can store menu descriptions
   in a database table and, depending on who logged in, find
   the menu record for that user, and run menucre.p to create
   the user specific menu. In this way, you can maintain the
   menus from the application so that you don't have to change
   the source code when a menu is changed.
   
   The disadvantage with dynamic menus is that you don't have
   a direct access to the widget handles of the sub-menus and
   menu-items.
   You also have to delete them when you don't need them any more.
   
   To overcome the disadvangatges, the programs menuhndl.p and
   menusens.p was written. menuhndl.p returns the widget handle
   for a specified sub-menu or menu-item. menusens.p enables or
   disables (by changing the sensitive attribute) one or more
   sub-menus or menu-items. When you specify the sub-menu or
   menu-item to these two programs, you can either just give
   the label of it, or you can specify the full menu path for it.
   For example, in the sub-menu "File" there is a menu-item
   "Close" which you want to specify. If there are no other
   menu-items or sub-menus with the label "Close" in the menu
   structure, you specify it with "Close", otherwise with the
   full path "/File/Close". A full path must start with a "/".
   In menusens.p, the CAN-DO function is used to evaluate which
   items to enable or disable.
   
   The program menucre.p takes four input parameter. The first
   parameter describes the menu. As you will see, you specify
   the menu structure in a straight forward maner. A persistent
   trigger is defined for each menu-item. You have the option
   to specify the trigger program for each of the menu-items.
   If you don't specify a program, the label of the menu-item
   will be used as the trigger program name. You can define
   rules, skips and checkboxes, and you can specify the default
   (enabled/disabled), and the default for check-boxes
   (checked/unchecked). You have to write all the trigger
   programs your self.
   The second parameter is the widget handle of the owner of
   the menu. If it is a handle to a window, the menu becomes
   a menu-bar, otherwise it becomes a popup-menu.
   The third a fourth parameters determines the delimiters
   used in the menu decription. See the example.

   There are three example programs, menuex1.p, menuex2.p and
   menuex3.p.
   The first program demonstrates how you to use
   menucre.p in the simplest way.
   The second program demonstrates how to create a meny with
   check boxes and with some menu-items disabled. It also
   shows how to disable and enable menu-items on the fly using
   menusens.p, and how to get the widget-handle for a menu-item
   by using menuhndl.p.
   The third program shows how to create a popup-menu.

   Remeber that any dynamical widget exists until you delete it.
   So, either create a widget-pool and put them there, or remeber
   to explicitly delete them when you don't need them anymore.
   
