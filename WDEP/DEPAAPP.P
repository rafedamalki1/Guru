/*DEPAAPP.P*/
&Scoped-define NEW NEW
&Scoped-define SHARED SHARED
{GLOBVAR2DEL1.I}

&Scoped-define NEW
&Scoped-define SHARED 
{ANVTEMPS.I}
{LEVTEMP.I}
{LTRPTEMP.I}
{DEPATEMP.I}
{DEPSEKTEMP.I}
{EXTRADATA.I}
{LEVTEMPORDNINGFUNC.I}
{bestnrtab.I}
    
{TIDUTTTNEW.I}

DEFINE VARIABLE str AS CHARACTER FORMAT "X(86)" NO-UNDO.    
DEFINE VARIABLE str1 AS CHARACTER FORMAT "X(86)" NO-UNDO.
DEFINE VARIABLE best_nr_koll AS INTEGER NO-UNDO.
DEFINE VARIABLE edataapph AS HANDLE NO-UNDO.
DEFINE VARIABLE bloblog AS LOGICAL NO-UNDO.
DEFINE VARIABLE posvar AS INTEGER NO-UNDO.
DEFINE BUFFER mdepbuff FOR MTRLDEP.

FIND FIRST FORETAG NO-LOCK NO-ERROR.
ASSIGN Guru.Konstanter:globforetag = FORETAG.FORETAG.
{FORESTYR.I}
{DYNHMT.I}

PROCEDURE visdep_UI :
   DEFINE OUTPUT PARAMETER TABLE FOR tidut.
      DEFINE FRAME FRAME-VINST
       DEPA.Adress 
       DEPA.ANVANDARE 
       DEPA.Benamning 
       DEPA.Dep-Nr 
       DEPA.FakAdress 
       DEPA.FakOrt 
       DEPA.FakPnr 
       DEPA.FaxNr 
       DEPA.Firma 
       DEPA.LevAdress 
       DEPA.LevOrt 
       DEPA.LevPnr 
       DEPA.Ort 
       DEPA.Pnr 
       DEPA.Telefon
       LEVERANTOR.LEVNAMN
       KUNDNR.KUNDNR
       WITH 1 DOWN NO-BOX KEEP-TAB-ORDER OVERLAY 
            SIDE-LABELS NO-UNDERLINE THREE-D 
            AT COL 1 ROW 1
            SIZE 82.63 BY 28.42.

   EMPTY TEMP-TABLE tidut NO-ERROR. 
   FOR EACH DEPA NO-LOCK:     
      CREATE tidut.
      ASSIGN 
      tidut.UT = DEPA.Dep-Nr:LABEL.
      SUBSTRING(tidut.UT,11) = ": " + STRING(DEPA.Dep-Nr).
      CREATE tidut.
      ASSIGN 
      tidut.UT = DEPA.Benamning:LABEL
      SUBSTRING(tidut.UT,11) = ": " + STRING(DEPA.Benamning).
      CREATE tidut.
      ASSIGN 
      tidut.UT = DEPA.Adress:LABEL 
      SUBSTRING(tidut.UT,11) = ": " + STRING(DEPA.Adress).
      CREATE tidut.
      ASSIGN
      tidut.UT = DEPA.Pnr:LABEL 
      SUBSTRING(tidut.UT,11) = ": " + STRING(DEPA.Pnr).
      CREATE tidut.
      ASSIGN 
      tidut.UT = DEPA.Ort:LABEL 
      SUBSTRING(tidut.UT,11) = ": " + STRING(DEPA.Ort).
      CREATE tidut.
      ASSIGN 
      tidut.UT = DEPA.Telefon:LABEL 
      SUBSTRING(tidut.UT,11) = ": " + STRING(DEPA.Telefon).
      CREATE tidut.
      ASSIGN 
      tidut.UT = DEPA.LevAdress:LABEL 
      SUBSTRING(tidut.UT,11) = ": " + STRING(DEPA.LevAdress).
      CREATE tidut.
      ASSIGN
      tidut.UT = DEPA.LevPnr:LABEL
      SUBSTRING(tidut.UT,11) = ": " + STRING(DEPA.LevPnr).
      CREATE tidut.
      ASSIGN 
      tidut.UT = DEPA.LevOrt:LABEL 
      SUBSTRING(tidut.UT,11) = ": " + STRING(DEPA.LevOrt).
      CREATE tidut.
      ASSIGN 
      tidut.UT = DEPA.Firma:LABEL 
      SUBSTRING(tidut.UT,11) = ": " + STRING(DEPA.Firma).
      CREATE tidut.
      ASSIGN 
      tidut.UT = DEPA.FaxNr:LABEL 
      SUBSTRING(tidut.UT,11) = ": " + STRING(DEPA.FaxNr).         
      CREATE tidut.
      ASSIGN 
      tidut.UT = DEPA.FakAdress:LABEL 
      SUBSTRING(tidut.UT,11) = ": " + STRING(DEPA.FakAdress).
      CREATE tidut.
      ASSIGN
      tidut.UT = DEPA.FakPnr:LABEL
      SUBSTRING(tidut.UT,11) = ": " + STRING(DEPA.FakPnr).         
      CREATE tidut.
      ASSIGN 
      tidut.UT = DEPA.FakOrt:LABEL 
      SUBSTRING(tidut.UT,11) = ": " + STRING(DEPA.FakOrt).         
      CREATE tidut.
      ASSIGN 
      tidut.UT = DEPA.ANVANDARE:LABEL 
      SUBSTRING(tidut.UT,11) = ": " + STRING(DEPA.ANVANDARE).         
      FOR EACH KUNDNR WHERE  KUNDNR.DEP-NR = DEPA.DEP-NR NO-LOCK:
         FOR EACH LEVERANTOR WHERE  LEVERANTOR.LEVKOD = KUNDNR.LEVKOD:
            CREATE tidut.
            ASSIGN 
            tidut.UT = LEVERANTOR.LEVNAMN:LABEL 
            SUBSTRING(tidut.UT,11) = ": " + STRING(LEVERANTOR.LEVNAMN)
            SUBSTRING(tidut.UT,34) = "Kundnr"
            SUBSTRING(tidut.UT,40) = ": " + STRING(KUNDNR.KUNDNR).                         
         END.
      END.
      CREATE tidut.
      ASSIGN 
      tidut.UT = "-------------------------------------------------------------------------------------".
      CREATE tidut.
   END.   
END PROCEDURE.
PROCEDURE anvdeplbort_UI:
   DEFINE INPUT PARAMETER depinnan AS INTEGER NO-UNDO.
  
   RUN FINNSTABELL.P (INPUT "EXTRADATA", OUTPUT bloblog).
   IF bloblog = FALSE THEN RETURN.
   RUN EXTRADATAHMT.P PERSISTENT SET edataapph.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "MTRLDEPLAS"                   
   inextradatatemp.HUVUDINT = depinnan.      
   RUN exbort_UI IN edataapph (INPUT TABLE inextradatatemp).              
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph.        
   edataapph = ?.
END PROCEDURE.

PROCEDURE anvdepkoll_UI :                         
   DEFINE INPUT PARAMETER depinnan AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER ganv AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER danv AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR felmeddtemp.   
   EMPTY TEMP-TABLE felmeddtemp NO-ERROR.    
   RUN FINNSTABELL.P (INPUT "EXTRADATA", OUTPUT bloblog).
   IF bloblog = FALSE THEN RETURN.   
   RUN EXTRADATAHMT.P PERSISTENT SET edataapph.     
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
   danv = "".
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "MTRLDEPLAS"                   
   inextradatatemp.HUVUDINT = depinnan.                    
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:            
      /*någon använder depå */
      danv = extradatatemp.SOKCHAR[1].
      FIND FIRST DEPA WHERE DEPA.Dep-Nr = depinnan NO-LOCK NO-ERROR.
      FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = extradatatemp.SOKCHAR[1]  NO-LOCK NO-ERROR.
      IF AVAILABLE ANVANDARE THEN DO:            
         IF ganv = danv THEN DO:
            CREATE felmeddtemp.  
            ASSIGN               
            felmeddtemp.FELMEDD = "Depån används av " + ANVANDARE.AV-NAMN + " i program " + extradatatemp.SOKCHAR[2] + ". Ändring ej möjlig. " +
             "För att låsa upp depån måste du vara säker på att den inte används. Vill du låsa upp depån ?" .
         END.
         ELSE IF ganv = DEPA.ANVANDARE THEN DO:
            CREATE felmeddtemp.  
            ASSIGN               
            felmeddtemp.FELMEDD = "Depån används av " + ANVANDARE.AV-NAMN + " i program " + extradatatemp.SOKCHAR[2] + ". Ändring ej möjlig. " +
             "För att låsa upp depån måste du vara säker på att den inte används. Vill du låsa upp depån ?" .            
         END.
         ELSE IF ganv = CHR(69) + CHR(76) + CHR(80) + CHR(65) + CHR(79) THEN DO:
            CREATE felmeddtemp.  
            ASSIGN               
            felmeddtemp.FELMEDD = "Depån används av " + ANVANDARE.AV-NAMN + " i program " + extradatatemp.SOKCHAR[2] + ". Ändring ej möjlig. " +
             "För att låsa upp depån måste du vara säker på att den inte används. Vill du låsa upp depån ?" .            
         END.   
         ELSE DO:         
            CREATE felmeddtemp.  
            ASSIGN               
            felmeddtemp.FELMEDD = "Depån används av " + ANVANDARE.AV-NAMN + " i program " + extradatatemp.SOKCHAR[2] + ". Ändring ej möjlig." .
         END.
      END.         
      ELSE DO:         
         IF ganv = danv THEN DO:
            CREATE felmeddtemp.  
            ASSIGN               
            felmeddtemp.FELMEDD = "Depån används av " + extradatatemp.SOKCHAR[1] + " i program " + extradatatemp.SOKCHAR[2] + ". Ändring ej möjlig. " +
               "För att låsa upp depån måste du vara säker på att den inte används. Vill du låsa upp depån ?" .
         END.
         ELSE IF ganv = DEPA.ANVANDARE THEN DO:
            CREATE felmeddtemp.  
            ASSIGN               
            felmeddtemp.FELMEDD = "Depån används av " + ANVANDARE.AV-NAMN + " i program " + extradatatemp.SOKCHAR[2] + ". Ändring ej möjlig. " +
             "För att låsa upp depån måste du vara säker på att den inte används. Vill du låsa upp depån ?" .            
         END.
         ELSE DO:         
            CREATE felmeddtemp.  
            ASSIGN               
            felmeddtemp.FELMEDD = "Depån används av " + extradatatemp.SOKCHAR[1] + " i program " + extradatatemp.SOKCHAR[2] + ". Ändring ej möjlig." .
         END.
      END.
   END.  
      
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph.         
   edataapph = ?.
END PROCEDURE.         

PROCEDURE anvdepkollti_UI :                         
   DEFINE INPUT PARAMETER depinnan AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER ganv AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER danv AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR felmeddtemp.   
   EMPTY TEMP-TABLE felmeddtemp NO-ERROR.    
   RUN FINNSTABELL.P (INPUT "EXTRADATA", OUTPUT bloblog).
   IF bloblog = FALSE THEN RETURN.   
   RUN EXTRADATAHMT.P PERSISTENT SET edataapph.     
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
   danv = "".
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "MTRLDEPLAS"                   
   inextradatatemp.HUVUDINT = depinnan.                    
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:                  
      FIND FIRST DEPA WHERE DEPA.Dep-Nr = depinnan NO-LOCK NO-ERROR.
      /*någon använder depå */
      danv = extradatatemp.SOKCHAR[1].
      FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = extradatatemp.SOKCHAR[1]  NO-LOCK NO-ERROR.
      IF AVAILABLE ANVANDARE THEN DO:         
         IF ganv = danv THEN DO:
            CREATE felmeddtemp.  
            ASSIGN               
            felmeddtemp.FELMEDD = "Depån används av dig " + ANVANDARE.AV-NAMN + " i program " + extradatatemp.SOKCHAR[2] + ". Ändring ej möjlig. " +
             "För att låsa upp depån måste du vara säker på att den inte används. Vill du låsa upp depån ?" .
         END.         
         ELSE DO:                              
            CREATE felmeddtemp.  
            ASSIGN               
            felmeddtemp.FELMEDD = "Depån används av " + ANVANDARE.AV-NAMN + " i program " + extradatatemp.SOKCHAR[2] + ". Ändring ej möjlig. " +
            "Vill du ändå gå in och titta ?" .
         END.   
      END.
      ELSE DO:         
         CREATE felmeddtemp.  
         ASSIGN               
         felmeddtemp.FELMEDD = "Depån används av " + extradatatemp.SOKCHAR[1] + " i program " + extradatatemp.SOKCHAR[2] + ". Ändring ej möjlig. " +
         "Vill du ändå gå in och titta ?" .
      END.      
   END.       
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph.         
   edataapph = ?.
END PROCEDURE.

PROCEDURE anvdepkolltiinv_UI :                         
   DEFINE INPUT PARAMETER depinnan AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER ganv AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER danv AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR felmeddtemp.   
   /*inventering ingen titta efter missöde Göran Sandin 20111125*/
   EMPTY TEMP-TABLE felmeddtemp NO-ERROR.    
   RUN FINNSTABELL.P (INPUT "EXTRADATA", OUTPUT bloblog).
   IF bloblog = FALSE THEN RETURN.   
   RUN EXTRADATAHMT.P PERSISTENT SET edataapph.     
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   EMPTY TEMP-TABLE extradatatemp NO-ERROR. 
   danv = "".
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "MTRLDEPLAS"                   
   inextradatatemp.HUVUDINT = depinnan.                    
   RUN etabhamt_UI IN edataapph (INPUT TABLE inextradatatemp, OUTPUT TABLE extradatatemp). 
   FIND FIRST extradatatemp NO-LOCK NO-ERROR.
   IF AVAILABLE extradatatemp THEN DO:            
      /*någon använder depå */
      danv = extradatatemp.SOKCHAR[1].
      FIND FIRST ANVANDARE WHERE ANVANDARE.ANVANDARE = extradatatemp.SOKCHAR[1]  NO-LOCK NO-ERROR.
      IF AVAILABLE ANVANDARE THEN DO:            
         CREATE felmeddtemp.  
         ASSIGN               
         felmeddtemp.FELMEDD = "Depån används av " + ANVANDARE.AV-NAMN + " i program " + extradatatemp.SOKCHAR[2] + ". Ändring ej möjlig. ".
      END.
      ELSE DO:         
         CREATE felmeddtemp.  
         ASSIGN               
         felmeddtemp.FELMEDD = "Depån används av " + extradatatemp.SOKCHAR[1] + " i program " + extradatatemp.SOKCHAR[2] + ". Ändring ej möjlig. ".
         
      END.      
   END.       
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph.         
   edataapph = ?.
END PROCEDURE.

PROCEDURE anvdeplas_UI:
   DEFINE INPUT PARAMETER depinnan AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER ganv AS CHARACTER NO-UNDO.      
   DEFINE INPUT PARAMETER prognamn AS CHARACTER NO-UNDO.      
   RUN FINNSTABELL.P (INPUT "EXTRADATA", OUTPUT bloblog).   
   IF bloblog = FALSE THEN RETURN.
   RUN EXTRADATAHMT.P PERSISTENT SET edataapph.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "MTRLDEPLAS"                   
   inextradatatemp.HUVUDINT = depinnan
   inextradatatemp.SOKCH[1] = ganv
   inextradatatemp.SOKCH[2] = prognamn.    
   RUN extraspar_UI IN edataapph (INPUT TABLE inextradatatemp).           
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph.         
   edataapph = ?.
END.

PROCEDURE AnvandareNamn_UI :
   DEFINE INPUT PARAMETER anv AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER namn AS CHARACTER NO-UNDO.
   FIND FIRST ANVANDARE  WHERE ANVANDARE.ANVANDARE = anv NO-LOCK NO-ERROR.
   IF AVAILABLE ANVANDARE THEN DO:
      namn = ANVANDARE.AV-NAMN.
   END.
         
END PROCEDURE.
PROCEDURE LastTimeDepaLoggSet_UI :
   DEFINE OUTPUT PARAMETER twait AS INTEGER NO-UNDO.
   twait = 10 * 60 * 1000.
   
END PROCEDURE.
PROCEDURE bestbhmt_UI :                         
   DEFINE INPUT PARAMETER vald_depa AS INTEGER.
   DEFINE OUTPUT PARAMETER TABLE FOR best_nr_tab.
   EMPTY TEMP-TABLE best_nr_tab NO-ERROR.
   FIND FIRST BESTDEP WHERE BESTDEP.DEPNR = vald_depa AND BESTDEP.LEVDATUM = ? AND
   BESTDEP.BERED = FALSE AND BESTDEP.LEVNAMN = "" NO-LOCK NO-ERROR.
   IF AVAILABLE BESTDEP THEN DO TRANSACTION:
      best_nr_koll = BESTDEP.BESTNR.
      CREATE best_nr_tab.
      ASSIGN 
      best_nr_tab.bestnr = BESTDEP.BESTNR
      best_nr_tab.bestdatum = BESTDEP.BESTDATUM
      best_nr_tab.bestallare = BESTDEP.BESTALLARE.
   END.            
   DO WHILE AVAILABLE BESTDEP:
      FIND NEXT BESTDEP WHERE BESTDEP.BESTNR NE best_nr_koll AND BESTDEP.DEPNR = vald_depa
      AND BESTDEP.LEVDATUM = ? AND BESTDEP.BERED = FALSE AND BESTDEP.LEVNAMN = "" NO-LOCK NO-ERROR.
      IF AVAILABLE BESTDEP THEN DO TRANSACTION:
         CREATE best_nr_tab.
         ASSIGN 
         best_nr_tab.bestnr = BESTDEP.BESTNR
         best_nr_tab.bestdatum = BESTDEP.BESTDATUM
         best_nr_tab.bestallare = BESTDEP.BESTALLARE
         best_nr_koll = BESTDEP.BESTNR.
      END.        
   END.
   FOR EACH best_nr_tab:
      FIND FIRST BESTDEP WHERE BESTDEP.DEPNR = vald_depa AND 
      BESTDEP.BESTNR = best_nr_tab.BESTNR AND BESTDEP.LEVDATUM NE ? 
      AND BESTDEP.BERED = FALSE AND BESTDEP.LEVNAMN = "" NO-LOCK NO-ERROR.
      IF AVAILABLE BESTDEP THEN DELETE best_nr_tab.
   END.   


END PROCEDURE.     

PROCEDURE bestbhmt2_UI :                         
   DEFINE INPUT PARAMETER vald_depa AS INTEGER.
   DEFINE OUTPUT PARAMETER TABLE FOR best_nr_tab.
   EMPTY TEMP-TABLE best_nr_tab NO-ERROR.
   FIND FIRST BESTDEP WHERE BESTDEP.DEPNR = vald_depa AND BESTDEP.LEVDATUM = ? AND
   BESTDEP.BERED = FALSE AND BESTDEP.LEVNAMN NE "" NO-LOCK NO-ERROR.
   IF AVAILABLE BESTDEP THEN DO TRANSACTION:
      best_nr_koll = BESTDEP.BESTNR.
      CREATE best_nr_tab.
      ASSIGN 
      best_nr_tab.bestnr = BESTDEP.BESTNR
      best_nr_tab.bestdatum = BESTDEP.BESTDATUM
      best_nr_tab.bestallare = BESTDEP.BESTALLARE.
      posvar = INDEX(BESTDEP.LEVNAMN,";",1).
      best_nr_tab.AONR = SUBSTRING(BESTDEP.LEVNAMN,1,posvar - 1).
      best_nr_tab.DELNR = INTEGER(SUBSTRING(BESTDEP.LEVNAMN,posvar + 1)).       
   END.            
   DO WHILE AVAILABLE BESTDEP:
      FIND NEXT BESTDEP WHERE BESTDEP.BESTNR NE best_nr_koll AND BESTDEP.DEPNR = vald_depa
      AND BESTDEP.LEVDATUM = ? AND BESTDEP.BERED = FALSE AND BESTDEP.LEVNAMN NE "" NO-LOCK NO-ERROR.
      IF AVAILABLE BESTDEP THEN DO TRANSACTION:
         CREATE best_nr_tab.
         ASSIGN 
         best_nr_tab.bestnr = BESTDEP.BESTNR
         best_nr_tab.bestdatum = BESTDEP.BESTDATUM
         best_nr_tab.bestallare = BESTDEP.BESTALLARE
         best_nr_koll = BESTDEP.BESTNR.
         posvar = INDEX(BESTDEP.LEVNAMN,";",1).
         best_nr_tab.AONR = SUBSTRING(BESTDEP.LEVNAMN,1,posvar - 1).
         best_nr_tab.DELNR = INTEGER(SUBSTRING(BESTDEP.LEVNAMN,posvar + 1)).       
      END.        
   END.
   FOR EACH best_nr_tab:
      FIND FIRST BESTDEP WHERE BESTDEP.DEPNR = vald_depa AND 
      BESTDEP.BESTNR = best_nr_tab.BESTNR AND BESTDEP.LEVDATUM NE ? 
      AND BESTDEP.BERED = FALSE AND BESTDEP.LEVNAMN NE "" NO-LOCK NO-ERROR.
      IF AVAILABLE BESTDEP THEN DELETE best_nr_tab.
   END.   
END PROCEDURE.

PROCEDURE bortbest_UI :                         
   DEFINE INPUT PARAMETER depnr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER bestallnr AS INTEGER NO-UNDO.
      OPEN QUERY bestq FOR EACH BESTDEP WHERE BESTDEP.DEPNR = depnr AND 
      BESTDEP.BESTNR = bestallnr USE-INDEX BEST NO-LOCK.     
      GET FIRST bestq NO-LOCK.
      DO WHILE AVAILABLE(BESTDEP):
         DO TRANSACTION:
            GET CURRENT bestq EXCLUSIVE-LOCK. 
            DELETE BESTDEP. 
         END.        
         GET NEXT bestq NO-LOCK. 
      END.
      CLOSE QUERY bestq. 
      OPEN QUERY trpq FOR EACH LEVTRP WHERE LEVTRP.DEP-NR = depnr AND
      LEVTRP.BESTNR = bestallnr NO-LOCK.
      GET FIRST trpq NO-LOCK.
      DO WHILE AVAILABLE(LEVTRP):
         DO TRANSACTION:
            GET CURRENT trpq EXCLUSIVE-LOCK. 
            DELETE LEVTRP. 
         END.
         GET NEXT trpq NO-LOCK.
      END.
      CLOSE QUERY trpq.
     
      OPEN QUERY statq FOR EACH BESTSTAT WHERE BESTSTAT.DEP-NR = depnr AND
      BESTSTAT.BESTNR = bestallnr AND BESTSTAT.BERNR = 0 NO-LOCK.
      GET FIRST statq NO-LOCK.
      DO WHILE AVAILABLE(BESTSTAT):
         DO TRANSACTION:
            GET CURRENT statq EXCLUSIVE-LOCK. 
            DELETE BESTSTAT. 
         END.
         GET NEXT statq NO-LOCK.
      END.
      CLOSE QUERY statq.
      RELEASE BESTSTAT NO-ERROR.
      RELEASE LEVTRP NO-ERROR.
      RELEASE BESTDEP NO-ERROR.
END PROCEDURE.         

PROCEDURE bortbest2_UI :                         
   DEFINE INPUT PARAMETER depnr AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER bestallnr AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR felmeddtemp.   
   EMPTY TEMP-TABLE felmeddtemp NO-ERROR.    
   FIND FIRST LEVTRP WHERE LEVTRP.DEP-NR = depnr AND LEVTRP.BESTNR = bestallnr
   AND LEVTRP.BERNR = 0 AND LEVTRP.BESTALLD NE "Ej beställd"   NO-LOCK NO-ERROR.
   IF AVAILABLE LEVTRP THEN DO:      
      CREATE felmeddtemp.  
      ASSIGN               
      felmeddtemp.FELMEDD = "Denna beställning är redan beställd och kan ej tas bort ".
      RETURN.

   END.
   ELSE DO:      
      OPEN QUERY bestq FOR EACH BESTDEP WHERE BESTDEP.DEPNR = depnr AND 
      BESTDEP.BESTNR = bestallnr USE-INDEX BEST NO-LOCK.     
      GET FIRST bestq NO-LOCK.
      DO WHILE AVAILABLE(BESTDEP):
         DO TRANSACTION:
            GET CURRENT bestq EXCLUSIVE-LOCK. 
            DELETE BESTDEP. 
         END.        
         GET NEXT bestq NO-LOCK. 
      END.
      CLOSE QUERY bestq. 
      OPEN QUERY trpq FOR EACH LEVTRP WHERE LEVTRP.DEP-NR = depnr AND
      LEVTRP.BESTNR = bestallnr NO-LOCK.
      GET FIRST trpq NO-LOCK.
      DO WHILE AVAILABLE(LEVTRP):
         DO TRANSACTION:
            GET CURRENT trpq EXCLUSIVE-LOCK. 
            DELETE LEVTRP. 
         END.
         GET NEXT trpq NO-LOCK.
      END.
      CLOSE QUERY trpq.
     
      OPEN QUERY statq FOR EACH BESTSTAT WHERE BESTSTAT.DEP-NR = depnr AND
      BESTSTAT.BESTNR = bestallnr AND BESTSTAT.BERNR = 0 NO-LOCK.
      GET FIRST statq NO-LOCK.
      DO WHILE AVAILABLE(BESTSTAT):
         DO TRANSACTION:
            GET CURRENT statq EXCLUSIVE-LOCK. 
            DELETE BESTSTAT. 
         END.
         GET NEXT statq NO-LOCK.
      END.
      CLOSE QUERY statq.
      RELEASE BESTSTAT NO-ERROR.
      RELEASE LEVTRP NO-ERROR.
      RELEASE BESTDEP NO-ERROR.
   END.
END PROCEDURE.         


PROCEDURE depavb_UI :                         
   DEFINE INPUT PARAMETER depinnan AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER TABLE FOR depatemp.
   IF depinnan = ? THEN DO TRANSACTION:
      FIND FIRST depatemp WHERE depatemp.DEP-NR = 0 EXCLUSIVE-LOCK NO-ERROR.
      FOR EACH KUNDNR WHERE KUNDNR.DEP-NR = depinnan EXCLUSIVE-LOCK:
         DELETE KUNDNR.
      END.      
   END.
   RELEASE KUNDNR NO-ERROR.
      
END PROCEDURE.         

PROCEDURE depbort_UI :                         
   DEFINE INPUT PARAMETER depinnan AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR felmeddtemp.   
   EMPTY TEMP-TABLE felmeddtemp NO-ERROR.    
   
   FIND FIRST BESTDEP WHERE BESTDEP.DEPNR = depinnan AND BESTDEP.LEVDATUM = ? NO-LOCK NO-ERROR.
   IF AVAILABLE BESTDEP THEN DO:      
      CREATE felmeddtemp.  
      ASSIGN               
      felmeddtemp.FELMEDD = "Det finns beställningar som ej är levererade kopplade till depå . Dessa måste tas bort. ".
   END.
   ELSE DO:
      OPEN QUERY mtrlq FOR EACH MTRLDEP WHERE 
      MTRLDEP.DEPNR = depinnan USE-INDEX DEPNR NO-LOCK.
      GET FIRST mtrlq NO-LOCK.
      DO WHILE AVAILABLE(MTRLDEP):               
         DO TRANSACTION:
            GET CURRENT mtrlq EXCLUSIVE-LOCK.
            DELETE MTRLDEP.
         END.                  
         GET NEXT mtrlq NO-LOCK.
      END.    
      CLOSE QUERY mtrlq.
      OPEN QUERY bestq FOR EACH BESTDEP WHERE 
      BESTDEP.DEPNR = depinnan USE-INDEX DEPNR NO-LOCK.
      GET FIRST bestq NO-LOCK.
      DO WHILE AVAILABLE(BESTDEP):           
         DO TRANSACTION:
            GET CURRENT bestq EXCLUSIVE-LOCK.
            DELETE BESTDEP.
         END.
         GET NEXT bestq NO-LOCK.               
      END.
      CLOSE QUERY bestq.
      OPEN QUERY berq FOR EACH BERBEST WHERE 
      BERBEST.DEPNR = depinnan USE-INDEX BEST NO-LOCK. 
      GET FIRST berq NO-LOCK.
      DO WHILE AVAILABLE(BERBEST):
         DO TRANSACTION:
            GET CURRENT berq EXCLUSIVE-LOCK.
            DELETE BERBEST.
         END.
        GET NEXT berq NO-LOCK. 
      END.
      CLOSE QUERY berq.                 
      OPEN QUERY hq FOR EACH HUVUDLEV WHERE HUVUDLEV.DEP-NR = depinnan NO-LOCK.
      GET FIRST hq NO-LOCK.
      DO WHILE AVAILABLE(HUVUDLEV):
         DO TRANSACTION:
            GET CURRENT hq EXCLUSIVE-LOCK.
            DELETE HUVUDLEV.
         END.
         GET NEXT hq NO-LOCK.
      END.      
      CLOSE QUERY hq. 
      OPEN QUERY sq FOR EACH DEPSEK WHERE DEPSEK.DEPNR = depinnan NO-LOCK.
      GET FIRST sq NO-LOCK.
      DO WHILE AVAILABLE(DEPSEK):
         DO TRANSACTION:
            GET CURRENT sq EXCLUSIVE-LOCK.
            DELETE DEPSEK.
         END.
         GET NEXT sq NO-LOCK.
      END.      
      CLOSE QUERY sq.
      OPEN QUERY kundq FOR EACH KUNDNR WHERE KUNDNR.DEP-NR = depinnan NO-LOCK.
      GET FIRST kundq NO-LOCK.
      DO WHILE AVAILABLE(KUNDNR):
         DO TRANSACTION:
            GET CURRENT kundq EXCLUSIVE-LOCK.
            DELETE KUNDNR.
         END.
         GET NEXT kundq NO-LOCK.
      END.
      CLOSE QUERY kundq.   
      OPEN QUERY trpq FOR EACH LEVTRP WHERE LEVTRP.DEP-NR = depinnan AND
      LEVTRP.BESTNR > 0 NO-LOCK.
      GET FIRST trpq NO-LOCK.
      DO WHILE AVAILABLE(LEVTRP):
         DO TRANSACTION:
            GET CURRENT trpq EXCLUSIVE-LOCK.
            DELETE LEVTRP.
         END.
         GET NEXT trpq NO-LOCK.
      END.
      CLOSE QUERY trpq.
      OPEN QUERY statq FOR EACH BESTSTAT WHERE BESTSTAT.DEP-NR = depinnan AND
      BESTSTAT.BESTNR > 0 AND BESTSTAT.BERNR = 0 NO-LOCK.
      GET FIRST statq NO-LOCK.
      DO WHILE AVAILABLE(BESTSTAT):
         DO TRANSACTION:
            GET CURRENT statq EXCLUSIVE-LOCK.
            DELETE BESTSTAT.
         END.
         GET NEXT statq NO-LOCK.
      END.
      CLOSE QUERY statq.
      DO TRANSACTION:
         FIND FIRST DEPA WHERE DEPA.DEP-NR = depinnan EXCLUSIVE-LOCK.
         DELETE DEPA.       
      END.         
   END.
   RELEASE MTRLDEP NO-ERROR.
   RELEASE BESTDEP NO-ERROR.
   RELEASE BERBEST NO-ERROR.
   RELEASE DEPSEK NO-ERROR.
   RELEASE KUNDNR NO-ERROR.
   RELEASE LEVTRP NO-ERROR.
   RELEASE BESTSTAT NO-ERROR.
   RELEASE DEPA NO-ERROR.
   
   IF NOT VALID-HANDLE(edataapph) THEN RUN EXTRADATAHMT.P PERSISTENT SET edataapph.
   EMPTY TEMP-TABLE inextradatatemp NO-ERROR. 
   CREATE inextradatatemp.          
   ASSIGN
   inextradatatemp.PROGRAM = "DEPAKORD"                   
   inextradatatemp.HUVUDINT = depinnan.      
   RUN exbort_UI IN edataapph (INPUT TABLE inextradatatemp).              
   IF VALID-HANDLE(edataapph) THEN DELETE PROCEDURE edataapph.        
   edataapph = ?.
END PROCEDURE.         

PROCEDURE depkund_UI :                         
   DEFINE INPUT PARAMETER depefter AS INTEGER NO-UNDO.
   DEFINE INPUT-OUTPUT PARAMETER vald_levkod AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER nylevkund AS CHARACTER NO-UNDO.
   DEFINE INPUT-OUTPUT PARAMETER nyakund AS INTEGER NO-UNDO.
   
   DO TRANSACTION:
      FIND FIRST KUNDNR WHERE KUNDNR.LEVKOD = vald_levkod AND KUNDNR.DEP-NR = depefter EXCLUSIVE-LOCK NO-ERROR.
      IF AVAILABLE KUNDNR THEN DO:
         ASSIGN
         KUNDNR.KUNDNR = nyakund.      
      END.
   END.
   FIND FIRST LEVERANTOR WHERE LEVERANTOR.LEVNAMN = nylevkund NO-LOCK NO-ERROR.
   vald_levkod = LEVERANTOR.LEVKOD.
   DO TRANSACTION:
      FIND FIRST KUNDNR WHERE KUNDNR.LEVKOD = vald_levkod AND KUNDNR.DEP-NR = depefter EXCLUSIVE-LOCK NO-ERROR.
      IF AVAILABLE KUNDNR THEN DO:
         ASSIGN
         nyakund = KUNDNR.KUNDNR.           
      END.                   
      ELSE DO:
         CREATE KUNDNR.
         ASSIGN
         KUNDNR.KUNDNR = 0
         KUNDNR.DEP-NR = depefter
         KUNDNR.LEVKOD = vald_levkod.
         ASSIGN nyakund  = 0.         
      END.
   END.
   RELEASE KUNDNR NO-ERROR.
END PROCEDURE.         
PROCEDURE depsek_UI :     
   DEFINE INPUT PARAMETER depefter AS INTEGER NO-UNDO.
   DEFINE INPUT PARAMETER globanv AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER musz AS LOGICAL NO-UNDO.
   FIND FIRST DEPSEK WHERE DEPSEK.DEPNR = depefter AND
   DEPSEK.ANVANDARE = globanv USE-INDEX DEPNR NO-LOCK NO-ERROR.
   IF AVAILABLE DEPSEK THEN musz = FALSE.
   ELSE musz = TRUE.
END PROCEDURE.
PROCEDURE dnamn_UI :     
   DEFINE INPUT PARAMETER vdepa AS INTEGER NO-UNDO.   
   DEFINE OUTPUT PARAMETER dnamn AS CHARACTER NO-UNDO.
   FIND FIRST DEPA WHERE DEPA.Dep-Nr = vdepa NO-LOCK NO-ERROR.
   IF AVAILABLE DEPA THEN DO:
      dnamn = DEPA.Benamning.
   END.   
   
END PROCEDURE.         
PROCEDURE depspara_UI :                         
   DEFINE INPUT PARAMETER depinnan AS INTEGER NO-UNDO.           
   DEFINE INPUT PARAMETER depefter AS INTEGER NO-UNDO.           
   DEFINE INPUT PARAMETER vald_lev AS CHARACTER NO-UNDO.           
   DEFINE INPUT PARAMETER vald_levkod AS CHARACTER NO-UNDO.      
   DEFINE INPUT PARAMETER knr AS INTEGER NO-UNDO.           
   DEFINE INPUT PARAMETER TABLE FOR depatemp.             
   DEFINE OUTPUT PARAMETER TABLE FOR felmeddtemp.             
   EMPTY TEMP-TABLE felmeddtemp NO-ERROR.    
   
   FIND FIRST depatemp WHERE depatemp.dep-nr = depefter  NO-ERROR.    
   RUN namnkoll_UI (INPUT depinnan,INPUT depatemp.DEP-NR, OUTPUT TABLE felmeddtemp).                   .     
   FIND FIRST felmeddtemp NO-ERROR.
   IF AVAILABLE felmeddtemp THEN RETURN.   
   DO TRANSACTION:
      FIND FIRST DEPA WHERE DEPA.DEP-NR = depatemp.DEP-NR EXCLUSIVE-LOCK NO-ERROR.    
      IF NOT AVAILABLE DEPA THEN CREATE DEPA.
      BUFFER-COPY depatemp TO DEPA.
   END.

   IF depinnan NE ? THEN DO: 
      IF depefter NE depinnan THEN DO: 
         DO TRANSACTION:
            FIND FIRST HUVUDLEV WHERE HUVUDLEV.DEP-NR = depinnan EXCLUSIVE-LOCK NO-ERROR.
            IF AVAILABLE HUVUDLEV THEN DO:
               ASSIGN
               HUVUDLEV.LEVKOD = vald_lev
               HUVUDLEV.DEP-NR = depefter.
            END. 
         END.
         OPEN QUERY mtrlq FOR EACH MTRLDEP WHERE MTRLDEP.DEPNR = depinnan 
         USE-INDEX DEPNR NO-LOCK. 
         GET FIRST mtrlq NO-LOCK.
         DO WHILE AVAILABLE(MTRLDEP):
            DO TRANSACTION:
               GET CURRENT mtrlq EXCLUSIVE-LOCK. 
               MTRLDEP.DEPNR = depefter.
            END.
            GET NEXT mtrlq NO-LOCK. 
         END.
         CLOSE QUERY mtrlq. 
         OPEN QUERY bestq FOR EACH BESTDEP WHERE BESTDEP.DEPNR = depinnan 
         USE-INDEX DEPNR NO-LOCK. 
         GET FIRST bestq NO-LOCK.
         DO WHILE AVAILABLE(BESTDEP):
            DO TRANSACTION:
               GET CURRENT bestq EXCLUSIVE-LOCK. 
               BESTDEP.DEPNR = depefter.
            END.
            GET NEXT bestq NO-LOCK. 
         END.
         CLOSE QUERY bestq.   
         IF Guru.Konstanter:globforetag = "ELPA" OR Guru.Konstanter:globforetag = "SOLE"  THEN DO: 
            OPEN QUERY berq FOR EACH BERBEST WHERE BERBEST.DEPNR = depinnan 
            USE-INDEX BEST NO-LOCK. 
            GET FIRST berq NO-LOCK.
            DO WHILE AVAILABLE(BERBEST):
               DO TRANSACTION:
                  GET CURRENT berq EXCLUSIVE-LOCK. 
                  BERBEST.DEPNR = depefter.
               END.              
               GET NEXT berq NO-LOCK. 
            END.
            CLOSE QUERY berq.   
            OPEN QUERY sekq FOR EACH DEPSEK WHERE DEPSEK.DEPNR = depinnan 
            USE-INDEX DEPNR NO-LOCK. 
            GET FIRST sekq NO-LOCK.
            DO WHILE AVAILABLE(DEPSEK):
               DO TRANSACTION:
                  GET CURRENT sekq EXCLUSIVE-LOCK. 
                  DEPSEK.DEPNR = depefter.
               END.              
               GET NEXT sekq NO-LOCK. 
            END.
            RELEASE DEPSEK NO-ERROR.
            CLOSE QUERY sekq.
         END.   
      END.
      ELSE DO:
         DO TRANSACTION:
            FIND FIRST HUVUDLEV WHERE HUVUDLEV.DEP-NR = depefter EXCLUSIVE-LOCK NO-ERROR.
            IF AVAILABLE HUVUDLEV THEN DO:
               ASSIGN
               HUVUDLEV.LEVKOD = vald_lev.
            END.
         END.   
         IF Guru.Konstanter:globforetag = "NIKLAS" {GLOBVES.I} THEN Guru.Konstanter:globforetag = Guru.Konstanter:globforetag.
         ELSE DO:        
            FIND FIRST DEPSEK WHERE DEPSEK.DEPNR = depefter AND
            DEPSEK.ANVANDARE = depatemp.ANVANDARE USE-INDEX DEPNR NO-LOCK NO-ERROR.
            IF NOT AVAILABLE DEPSEK THEN DO TRANSACTION:
               CREATE DEPSEK.
               ASSIGN
               DEPSEK.DEPNR = depatemp.DEP-NR
               DEPSEK.ANVANDARE = depatemp.ANVANDARE.
            END.   
         END.
      END.      
   END.  
   ELSE DO TRANSACTION:    
      CREATE HUVUDLEV.
      ASSIGN
      HUVUDLEV.LEVKOD = vald_lev
      HUVUDLEV.DEP-NR = depatemp.DEP-NR.
      IF Guru.Konstanter:globforetag = "NIKLAS" {GLOBVES.I} THEN Guru.Konstanter:globforetag = Guru.Konstanter:globforetag.
      ELSE DO:        
         CREATE DEPSEK.
         ASSIGN
         DEPSEK.DEPNR = depatemp.DEP-NR
         DEPSEK.ANVANDARE = depatemp.ANVANDARE.
      END.
   END.  
   DO TRANSACTION:
      FIND FIRST KUNDNR WHERE KUNDNR.LEVKOD = vald_levkod AND KUNDNR.DEP-NR = depatemp.DEP-NR EXCLUSIVE-LOCK NO-ERROR.
      IF AVAILABLE KUNDNR THEN DO:
         ASSIGN
         KUNDNR.KUNDNR = knr.      
      END.
   END.          
   RELEASE HUVUDLEV NO-ERROR.
   RELEASE KUNDNR NO-ERROR.
   RELEASE DEPSEK NO-ERROR.
   RELEASE DEPA NO-ERROR.       
END PROCEDURE.

PROCEDURE namnkoll_UI :                         
   DEFINE INPUT PARAMETER vem AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER vemsok AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR felmeddtemp.      
   EMPTY TEMP-TABLE felmeddtemp NO-ERROR.       
   IF vem = ? THEN DO:
      FIND FIRST DEPA WHERE DEPA.DEP-NR = vemsok NO-LOCK NO-ERROR.
      IF AVAILABLE DEPA THEN DO:
         CREATE felmeddtemp.
         ASSIGN
         felmeddtemp.FELMEDD = "Det finns redan en depå med denna beteckning.".
         RETURN.
      END.      
   END.
END PROCEDURE.         

PROCEDURE depsekspar_UI :        
   DEFINE INPUT PARAMETER globanv AS CHARACTER NO-UNDO.
   DEFINE INPUT PARAMETER sekdepnr AS INTEGER NO-UNDO.
   DO TRANSACTION:
      FIND FIRST DEPSEK WHERE DEPSEK.ANVANDARE = globanv USE-INDEX DEPNR EXCLUSIVE-LOCK NO-ERROR.
      IF AVAILABLE DEPSEK THEN DEPSEK.DEPNR = sekdepnr.
      ELSE DO:
         CREATE DEPSEK.
         ASSIGN
         DEPSEK.ANVANDARE = globanv
         DEPSEK.DEPNR = sekdepnr.
      END.
   END. 
   RELEASE DEPSEK NO-ERROR.
END PROCEDURE.

PROCEDURE sekhmtn_UI :
   DEFINE OUTPUT PARAMETER TABLE FOR depsektemp.
   EMPTY TEMP-TABLE depsektemp NO-ERROR.    
   FOR EACH DEPSEK NO-LOCK:         
      CREATE depsektemp.
      ASSIGN 
      depsektemp.Dep-Nr    = DEPSEK.DEPNR
      depsektemp.ANVANDARE = DEPSEK.ANVANDARE.                            
   END.
END PROCEDURE.
PROCEDURE dephmtn_UI:
   DEFINE OUTPUT PARAMETER TABLE FOR depatemp.   
   DEFINE OUTPUT PARAMETER TABLE FOR levtemp.   
   EMPTY TEMP-TABLE depatemp NO-ERROR.    
   EMPTY TEMP-TABLE levtemp NO-ERROR.  
   {DEPHMT.I} 
   FOR EACH levtemp WHERE NO-LOCK:
      {LEVTEMPORDNING.I}
   END.    
END PROCEDURE.

PROCEDURE dephmt_UI:
   DEFINE OUTPUT PARAMETER TABLE FOR depatemp.   
   DEFINE OUTPUT PARAMETER TABLE FOR levtemp.   
   DEFINE OUTPUT PARAMETER TABLE FOR ltrptemp.   
   DEFINE OUTPUT PARAMETER TABLE FOR depsektemp.
   EMPTY TEMP-TABLE depatemp NO-ERROR.    
   EMPTY TEMP-TABLE levtemp NO-ERROR.    
   EMPTY TEMP-TABLE ltrptemp NO-ERROR.    
   EMPTY TEMP-TABLE depsektemp NO-ERROR.    
   {DEPHMT.I}     
   FOR EACH levtemp WHERE NO-LOCK:
      {LEVTEMPORDNING.I}
   END.
   FOR EACH DEPSEK NO-LOCK:         
      CREATE depsektemp.
      ASSIGN 
      depsektemp.Dep-Nr    = DEPSEK.DEPNR
      depsektemp.ANVANDARE = DEPSEK.ANVANDARE.                            
   END.
END PROCEDURE.
PROCEDURE hamtaen_UI:
   DEFINE INPUT PARAMETER vem AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR depatemp.        
   EMPTY TEMP-TABLE depatemp NO-ERROR.    
   ASSIGN
   nytab      = "depatemp"
   orginaltab = "DEPA".
   /*IF vemid = "" THEN kommandoquery = "BESTTAB.VIBESTID = " + '"' + vem + '"'.
   ELSE 
   */
   kommandoquery = "DEPA.DEP-NR = " + "'" + STRING(vem) + "'".
   kommandoquery = "FOR EACH " +  orginaltab + " WHERE " + kommandoquery + " NO-LOCK".       
   /*BUGG 9.1c FIX*/
   ASSIGN extratemptabh = TEMP-TABLE depatemp:DEFAULT-BUFFER-HANDLE.
   RUN dynquery_UI (INPUT FALSE,INPUT FALSE).   
   RUN objdelete_UI.
END PROCEDURE.

PROCEDURE hamtalev_UI:
   DEFINE INPUT PARAMETER vem AS INTEGER NO-UNDO.   
   DEFINE OUTPUT PARAMETER vald_kundlev AS CHARACTER NO-UNDO.
   DEFINE OUTPUT PARAMETER kundnummer AS INTEGER NO-UNDO.
   DEFINE OUTPUT PARAMETER TABLE FOR anvandartemp.   
   EMPTY TEMP-TABLE anvandartemp NO-ERROR.    
   

   FIND FIRST HUVUDLEV WHERE HUVUDLEV.DEP-NR = vem NO-LOCK NO-ERROR.   
   IF AVAILABLE HUVUDLEV THEN DO:  
      vald_kundlev = HUVUDLEV.LEVKOD.
   END.                              
   ELSE DO:
      FIND FIRST HUVUDLEV WHERE HUVUDLEV.DEP-NR = 999 NO-LOCK NO-ERROR.
      IF AVAILABLE HUVUDLEV THEN DO:
         vald_kundlev = HUVUDLEV.LEVKOD.
      END.
      ELSE DO:      
         FIND FIRST LEVERANTOR WHERE LEVERANTOR.LEVKOD NE "0" 
         AND LEVERANTOR.BORTTAG = FALSE NO-LOCK NO-ERROR.
         vald_kundlev = LEVERANTOR.LEVKOD.
      END.      
   END.   
   FIND FIRST KUNDNR WHERE KUNDNR.LEVKOD = vald_kundlev AND KUNDNR.DEP-NR = vem NO-LOCK NO-ERROR.
   IF AVAILABLE KUNDNR THEN DO:
      ASSIGN kundnummer = KUNDNR.KUNDNR.
   END.                   
   ELSE DO TRANSACTION:
      CREATE KUNDNR.
      ASSIGN    
      KUNDNR.DEP-NR = vem
      KUNDNR.LEVKOD = vald_kundlev
      KUNDNR.KUNDNR = 0.
      ASSIGN kundnummer = 0.
   END.
   FOR EACH ANVANDARE WHERE ANVANDARE.AV-LEVEL <> 0 NO-LOCK.
      CREATE anvandartemp.
      BUFFER-COPY ANVANDARE TO anvandartemp.
   END.
   RELEASE KUNDNR NO-ERROR.
END PROCEDURE.

PROCEDURE kollinv_UI:                         
DEFINE INPUT PARAMETER vald_depa AS INTEGER NO-UNDO.
DEFINE OUTPUT PARAMETER datvar AS DATE NO-UNDO.
   
   datvar = ?.
   FOR EACH MTRLDEP WHERE MTRLDEP.DEPNR = vald_depa 
   AND MTRLDEP.IBDATUM NE ? AND MTRLDEP.INVDATUM = ? NO-LOCK:    
      /*kolla att ej inventera enr ej är borttagen. Om borttaget- starta ny inventering*/
      FIND FIRST mdepbuff WHERE mdepbuff.ENR = MTRLDEP.ENR AND mdepbuff.DEPNR =  MTRLDEP.DEPNR 
      AND mdepbuff.IBDATUM = ?  NO-LOCK NO-ERROR.
      IF AVAILABLE mdepbuff THEN DO:         
         datvar = MTRLDEP.IBDATUM.
      END.      
   END.            
END PROCEDURE.
